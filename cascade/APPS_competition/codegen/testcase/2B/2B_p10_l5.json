[
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '5'\nassert solution('4') == '5'\nassert solution('8') == '9'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '5'\nassert solution('8') == '9'\nassert solution('4') == '5'\nassert solution('6') == '5'\nassert solution('2') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"8\") == \"9\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"8 2\") == \"9\"\nassert solution(\"4\") == \"5\"\nassert solution(\"6\") == \"5\"\nassert solution(\"6\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '5'\nassert solution('8 3') == '9'\nassert solution('4') == '5'\nassert solution('6') == '5'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '5'\nassert solution('8 ( 2 ( 2 1 ) ) 3') == '9'\nassert solution('4 ( 12 3 )') == '36'\nassert solution('6 ( ( 2 ) )') == '5'\nassert solution('6 ( ( ( 2 3 ) ) )') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '6'\nassert solution('4') == '5'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n2\n2 3\n\"\"\"\n) == \"5\"\nassert solution(\n\"\"\"\n8\n( 2 ( 2 1 ) ) 3\n\"\"\"\n) == \"9\"\nassert solution(\n\"\"\"\n4\n( 12 3 )\n\"\"\"\n) == \"36\"\nassert solution(\n\"\"\"\n6\n( ( 2 3 ) )\n\"\"\"\n) == \"5\""
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n2 3\n''') == \"5\"\n\nassert solution('''\n8\n( 2 ( 2 1 ) ) 3\n''') == \"9\"\n\nassert solution('''\n4\n( 12 3 )\n''') == \"36\"\n\nassert solution('''\n6\n( ( 2 3 ) )\n''') == \"5\""
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''610\n''') == '4'\nassert solution('''009990001''') == '3'\nassert solution('''29998''') == '5'\nassert solution('''981''') == '2'\nassert solution('''9989''') == '3'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0\n''') == '0'\nassert solution('''\n009990001\n''') == '3'\nassert solution('''\n29998\n''') == '5'\nassert solution('''\n610\n''') == '4'\nassert solution('''\n981\n''') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == ''"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('610') == '4'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('981') == '2'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') =='seems legit'\nassert solution('3') == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n2\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\nassert solution(\n    \"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"tampered odometer\"\nassert solution(\n    \"\"\"\n2\n2017 1 0\n2017 2 0\n\"\"\") == \"insufficient service\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\nassert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"insufficient service\"\nassert solution(\"\"\"\n2\n2017 11 0\n2018 1 1000\n\"\"\") == \"tampered odometer\""
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == 'insufficient service'\nassert solution('''\n2\n2017 11 0\n2018 1 1000\n''') == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\\\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\nassert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"insufficient service\"\nassert solution(\"\"\"\n2\n2017 11 0\n2018 1 1000\n\"\"\") == \"tampered odometer\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('\\n'.join(['3', '2017 4 0', '2017 8 12000', '2018 8 42000'])) =='seems legit'\nassert solution('\\n'.join(['3', '2017 4 0', '2017 8 12000', '2018 8 42000'])) == 'insufficient service'\nassert solution('\\n'.join(['2', '2017 11 0', '2018 1 1000'])) == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') =='seems legit'\nassert solution('1') == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"seems legit\""
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == \"seems legit\"\nassert solution('''\n2\n2017 11 0\n2018 1 1000\n''') == \"insufficient service\"\nassert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == \"tampered odometer\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\nSample Output 4:\n2\")\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2\n0 2 3\n0 1\n1\nSample Input 1:\n4\n1 2\n0 2 3\n0 1\n1\nSample Output 1:\n3\n\nSample Input 2:\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 2:\n2\n\nSample Input 3:\n6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\nSample Output 3:\n2\n\nSample Input 4:\n4\n1 2 3\n0 2 3\n0 1 3\n0 1 2\nSample Output 4:\n4\n''') == '2'"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\n''') == '4'\nassert solution('''8\n0 1\n0 2\n1 2\n0 3\n1 3\n0 4\n1 4\n1 5\n2 4\n2 5\n3 5\n''') == '2'\nassert solution('''11\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\n2 5\n3 5\n3 6\n4 5\n4 6\n5 6\n5 7\n6 6\n6 7\n7 7\n''') == '3'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(s) == \"3\"\nassert solution(s2) == \"2\"\nassert solution(s3) == \"4\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '3'\nassert solution('5') == '2'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\nSample Output 2:\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\nSample Output 3:\") == \"2\"\nassert solution(\"4\\n1 2 3\\n0 2 3\\n0 1 3\\n1 3 2\\nSample Output 4:\") == \"4\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n1\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"4\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 2\n0 2 3\n0 1\n1\nSample Input 5:\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 5:\n2\n''') == '2'\nassert solution('''\n6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\nSample Input 6:\n4\n1 2 3\n0 2 3\n0 1 3\n0 1 2\nSample Output 6:\n1\n''') == '1'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '3'\nassert solution('5 4') == '2'\nassert solution('6 5') == '4'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('2') == 'IMPOSSIBLE'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'IMPOSSIBLE'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('3') == 'IMPOSSIBLE'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_data) == \"2\"\nprint(solution(input_data))\nprint(solution(input_data_2))"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"IMPOSSIBLE\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\""
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == 0\nassert solution(\"ABBCCCCDDDDD\") == 4\nassert solution(\"GAGCTAGTAGGCT\") == 3\nassert solution(\"ABABCCCCDDDDD\") == 6\nassert solution(\"ABBABABABA\") == 1\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('AAAABBBBCCCCCCCCCDDDDDDD') == \"19\"\nassert solution('ABAABABBBABAA') == \"1\"\nassert solution('PRIME') == \"5\"\nassert solution('BABBABABBABBA') == \"6\"\nassert solution('BABBBBABBBBB') == \"2\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''D 1\nD 2\nE''') == '0'\nassert solution(\n    '''D 2\nD 1\nE''') == '1'\nassert solution(\n    '''D 1\nD 2\nE\nD 1\nD 2\nE''') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\ne\") == \"0\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\ne\") == \"1\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\ne\") == \"1\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '0'\nassert solution('''\nD 1\nI 10 A\nI 10 A\nI 10 A\nI 10 A\nI 10 A\nI 10 A\nI 10 A\nI 10 A\nI 10 A\nI 10 A\nI 10 A\nI 10 A\nI 10 A\nI 10 A\nE\n''') == '0'\nassert solution('''\nI 14 B\nD 1\nE\nD 1\nD 2\nE\n''') == '0'\nassert solution('''\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"D 1\nD 2\nE\nD 3\nD 1\nE\n\"\"\"\n) == \"0\"\nassert solution(\n    \"\"\"D 2\nD 1\nE\nD 1\nD 2\nE\n\"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"I 14 B\nD 1\nE\nD 1\nD 2\nE\nE\n\"\"\"\n) == \"0\"\nassert solution(\n    \"\"\"I 14 A\nI 15 B\nE\nD 1\nE\nD 1\nD 2\nE\nE\n\"\"\"\n) == \"1\""
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nD 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '0'\nassert solution('''\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\nD 1\nD 2\nE\nD 3\nD 1\nE\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\nD 2\nD 1\nE\nD 1\nD 2\nE\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\nD 2\nD 1\nE\nD 1\nD 2\nE\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n\"\"\") == \"1\""
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\nassert solution('D 1\\nD 2\\nI 1 X\\nD 3\\nD 1\\nI 14 A\\nI 15 B\\nE') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0'\n\n\"\"\""
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == \"2300\""
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 0 1 0 0 0\n1\n0\n1\n1\n2\n''') == '300'\nassert solution('''5 0 1 0 1 0\n1\n0\n1\n1\n2\n''') == '1900'\nassert solution('''6 0 1 1 0 0\n1\n0\n1\n1\n2\n''') == '2300'\nassert solution('''10 399 0 0 0 0\n0\n0\n1\n1\n2\n''') == '399'\nassert solution('''20 300 0 0 0 0\n1\n0\n1\n1\n1\n2\n2\n3\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n3\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 0 1 0 0 0''') == '300'\nassert solution('''5 0 1 0 1 0''') == '1900'\nassert solution('''6 0 1 1 0 0''') == '2300'\nassert solution('''10 399 0 0 0 0''') == '399'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2300\""
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 0 1 0 0 0\nSample Input 1:\n5 0 1 0 1 0\nSample Output 1:\n300\n\nSample Input 2:\n6 0 1 1 0 0\nSample Output 2:\n1900\n\nSample Input 3:\n10 399 0 0 0 0\nSample Output 3:\n399\n\nSample Input 4:\n1000000 0 0 0 0 0\nSample Output 4:\n1000000\n''') == '1000000'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 0 1 0 0 0''') == '300'\nassert solution('''5 0 1 0 1 0''') == '1900'\nassert solution('''6 0 1 1 0 0''') == '2300'\nassert solution('''10 399 0 0 0 0''') == '399'\nprint('All test cases passed.')"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 10\\n1 12\\n1 13\\n') == '2'\nassert solution('2 10\\n1 5\\n1 12\\n') == '2'\nassert solution('2 10\\n1 5\\n4 1\\n') == '2'\nassert solution('2 10\\n3 5\\n5 5\\n') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 10\n1 5\n1 12\n''') == \"2\"\nassert solution('''\n2 10\n1 5\n1 4\n''') == \"2\"\nassert solution('''\n2 10\n1 5\n3 5\n''') == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 10') == '2'\nassert solution('2 10') == '2'"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 10') == '2'\nassert solution('2 10') == '2'\nassert solution('2 10') == '2'\n\"\"\"\nimport math\nimport itertools"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_data) == \"2\"\nprint(solution(input_data))"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3\nassert solution(sample_input_4) == sample_output_4\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 10\") == '2'\nassert solution(\"2 10\") == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 10\n1 12\n1 13\n''') == '2'\nassert solution('''2 10\n1 5\n1 12\n''') == '2'\nassert solution('''2 10\n1 5\n1 4\n''') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 10\n1 12\n1 13\n''') == \"2\"\nassert solution('''\n2 10\n1 5\n1 12\n''') == \"2\"\nassert solution('''\n2 10\n1 5\n1 4\n''') == \"2\""
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n10 10 5\n10 20 5\n20 10 5\n20 20 5''') == '28.970562748'\nassert solution('''4\n10 10 5\n10 20 1\n20 10 12\n20 20 8''') == '36.2842712475'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == 'IMPOSSIBLE'\nassert solution('4') == '28'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0.000'\nassert solution('2') == '0.000'\nassert solution('3') == '0.000'\nassert solution('4') == '0.000'\nassert solution('5') == '0.000'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\nassert solution('''4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == 'IMPOSSIBLE'\nassert solution('''6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32.07211921'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"28\"\nassert solution(\"4\") == \"36\"\nassert solution(\"6\") == \"32\""
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5') == '28.976603528'\nassert solution('4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5') == 'IMPOSSIBLE'\nassert solution('6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\\n') == '32.952511544'\nassert solution('8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5') == '28.970562748'\nassert solution('4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8') == '36.2842712475'\nassert solution('6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\\n') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"28\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"IMPOSSIBLE\"\nassert solution(\"5\") == \"36.947\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'IMPOSSIBLE'\nassert solution('3') == '28.9642785714'\nassert solution('4') == '36.9676126393'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '28.980562748'\nassert solution('4') == '36.2842712475'"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n2\n-1 2\n-1 1\n''') == '1'\nassert solution('''3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '3'\nassert solution('''3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''4\n2 4 10 8\n2 5 5 4\n5 1 7 7\n''') == '2'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\nassert solution('''\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''\n3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n''') == '1'\n''')"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([3, 1, 9, 5]) == \"3\"\nassert solution([2, 2, 6, 8]) == \"1\"\nassert solution([4, 8, 9, 3]) == \"1\""
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n3\n-1 -2 -1 -1\n-1 2 -1 -1\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n1 3 9 5\n2 2 6 8''') == '3'\nassert solution('''3\n5 2 7 10\n7 4 4 10\n2 4 10 8''') == '1'\nassert solution('''4\n5 2 7 10\n7 4 4 10\n2 4 10 8\n10 2 4 5''') == '1'\nassert solution('''2\n-1 -2 -1 -1\n-1 2 -1 -1''') == '1'"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"95\"\nassert solution(\"1234321\") == \"94708\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == 10\nassert solution('55') == 55\nassert solution('101') == -1\nassert solution('1234321') == 94708\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"-1\"\nassert solution(\"1234321\") == \"94708\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''12223\n12223\n33322111\n122321\n12321''') == '94708'\n\nassert solution('''55\n55\n12322111\n123211\n12321''') == '95'\n\nassert solution('''101\n101\n1234321\n123211\n12321''') == '-1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"12223\") == \"94708\"\nassert solution(\"12321\") == \"94708\"\nassert solution(\"12321\") == \"94708\"\nassert solution(\"12322\") == \"94708\"\nassert solution(\"123221\") == \"94708\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1234321') == '94708'\nassert solution('123') == '-1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('12223') == '55'\nassert solution('33322111') == '94708'\nassert solution('1232321') == '-1'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 0 0 3') == '6'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 7') == '1'\nassert solution('1 2 0 0 8') == '0'\nprint(solution(*input().split()))\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 0 0 0 3\") == \"6\"\nassert solution(\n    \"1 2 0 0 5\") == \"2\"\nassert solution(\n    \"1 2 0 0 4\") == \"4\"\nassert solution(\n    \"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 0 0 0 3\") == '6'\nassert solution(\"1 2 0 0 5\") == '2'\nassert solution(\"1 2 0 0 4\") == '4'\nassert solution(\"1 2 0 0 6\") == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2 0 0 3\nSample Output 1:\n6\n\nSample Input 2:\n1 2 0 0 5\nSample Output 2:\n2\n\nSample Input 3:\n1 2 0 0 4\nSample Output 3:\n4\n\nSample Input 4:\n1 2 0 0 6\nSample Output 4:\n0''') == '4'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 0 0 5') == '6'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 7') == '7'\nassert solution('1 2 0 0 8') == '8'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 0 0 0 3') == '6'\nassert solution('1 2 0 0 3') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 0 0 0 3\n''') == '6'\nassert solution('''\n1 2 0 0 5\n''') == '2'\nassert solution('''\n1 2 0 0 4\n''') == '4'\nassert solution('''\n1 2 0 0 6\n''') == '0'\nprint(solution('''\n3 0 0 0 3\n'''))\nprint(solution('''\n1 2 0 0 5\n'''))\nprint(solution('''\n1 2 0 0 4\n'''))\nprint(solution('''\n1 2 0 0 6\n'''))\nprint(solution('''\n5 2 0 0 0\n'''))\nprint(solution('''\n3 2 0 0 3\n'''))\nprint(solution('''\n2 2 0 0 0\n'''))\nprint(solution('''\n2 2 0 0 0\n'''))\nprint(solution('''\n3 2 0 0 3\n'''))\nprint(solution('''\n2 3 0 0 0\n'''))\nprint(solution('''\n4 3 0 0 0\n'''))\nprint(solution('''\n3 4 0 0 0\n'''))\nprint(solution('''\n1 1 2 1 1\n'''))\nprint(solution('''\n2 2 2 2 2\n'''))\nprint(solution('''\n2 2 2 2 2\n'''))\nprint(solution('''\n4 4 4 4 4\n'''))\nprint(solution('''\n5 5 5 5 5\n'''))\nprint(solution('''\n6 6 6 6 6\n'''))\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 0 0 3\n''') == '6'\nassert solution('''\n1 2 0 0 4\n''') == '4'\nassert solution('''\n1 2 0 0 6\n''') == '0'\nassert solution('''\n2 1 0 0 5\n''') == '2'\nassert solution('''\n2 2 0 0 4\n''') == '4'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 0 0 0 3\n''') == '6'\nassert solution('''1 2 0 0 5\n''') == '2'\nassert solution('''1 2 0 0 4\n''') == '4'\nassert solution('''1 2 0 0 6\n''') == '0'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 0 0 0 3\n1 2 0 0 5\n1 2 0 0 4\n1 2 0 0 6''') == '6'\nassert solution('''4 0 0 0 3\n2 2 0 0 5\n2 2 0 0 4\n2 2 0 0 6''') == '4'\nassert solution('''2 1 0 0 3\n1 2 0 0 5\n1 2 0 0 4\n1 2 0 0 6''') == '2'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\""
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0.5 -5.301 3.098\n''') == '-1.26167861 3.88425357'\nassert solution('''\n0.5 8 8\n''') == '9.21068947 2.56226688'\nassert solution('''\n1 8 8\n''') == '6.22375968 -0.31921472'"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\""
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\nassert solution('0.5 -8 8') == '-4.36385220 9.46891588'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\""
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([2, 2]) == '1'\nassert solution([3, 3]) == '0'\nassert solution([4, 5]) == '1'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2\n1 2\n2 1''') == '1'\nassert solution('''3 3\n1 2\n2 3\n3 1''') == '1'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1''') == '0'\nassert solution('''5 5\n1 2\n2 3\n2 4\n3 1\n4 1''') == '2'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\""
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 2\\n1 2\\n2 1\\nSample Output 1\\n1\\nSample Output 2\\n1\\nSample Output 3\\n0\\nSample Output 4\\n2\\n\"\n) == \"1\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\"\nprint(solution(input()))\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 2\n1 2\n2 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 3\n1 2\n2 3\n3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 5\n1 2\n2 3\n2 4\n3 1\n4 1\n5 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n6 7\n1 2\n2 3\n2 4\n3 5\n4 1\n5 2\n\"\"\") == \"1\""
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"1\"\nprint(solution(open(\"input.txt\").read()))\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == \"11\"\nassert solution('''\n5 5 0 4\n0 1 1\n1 2 1\n2 3 1\n3 0 1\n2 4 1\n''') == \"infinity\"\nassert solution('''\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\n''') == \"2\"\nassert solution('''\n3 3 1 2\n0 1 1\n1 2 1\n2 0 1\n''') == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5 0 3\") == \"11\"\nassert solution(\"5 5 0 3\") == \"infinity\"\nassert solution(\"10 5 0 4\") == \"infinity\"\nassert solution(\"10 5 5 4\") == \"infinity\"\nassert solution(\"2 1 0 1\") == \"2\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 0 3') == \"11\"\nassert solution('5 5 0 4') == \"infinity\"\nassert solution('3 3 1 2') == \"2\"\nassert solution('7 7 0 1') == \"infinity\""
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5 0 3\") == \"11\"\nassert solution(\"5 5 0 4\") == \"infinity\"\nassert solution(\"3 3 1 2\") == \"2\"\nassert solution(\"2 1 0 1\") == \"2\""
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 0 3') == '11'\nassert solution('5 5 0 4') == 'infinity'\nassert solution('2 1 0 1') == '2'\nassert solution('3 3 1 2') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 5 0 3\"\n    \"0 1 1\"\n    \"1 2 2\"\n    \"2 0 4\"\n    \"2 3 1\"\n    \"2 3 3\"\n) == \"11\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([4, 5, 0, 3]) == '11'\nassert solution([5, 5, 0, 4]) == 'infinity'\nassert solution([2, 1, 0, 1]) == '2'\nassert solution([3, 3, 1, 2]) == '2'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == '11'\nassert solution('''\n5 5 0 4\n0 1 1\n1 0 1\n1 2 1\n2 0 4\n2 3 1\n2 3 3\n''') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 0 1\") == \"2\"\nassert solution(\"3 3 1 2\") == \"infinity\"\nassert solution(\"4 4 0 4\") == \"infinity\"\nassert solution(\"6 5 0 4 1 2\") == \"6\"\nassert solution(\"5 5 0 4 1 2\") == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5 0 3') == '11'\nassert solution('5 5 0 4') == 'infinity'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 1 2 1') == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('3 2 2 3') == '18'\nassert solution('3 1 2 3') == '12'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 1 2 1') == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('3 2 2 3') == '18'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('4 2 1 2 1') == '6'\nassert solution('3 3 1 1') == '18'\nassert solution('3 2 2 3') == '12'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 2 1 2\n2 1 2\"\"\") == \"6\"\n\nassert solution(\"\"\"3 3 1 1\n1 1\n2 2 3\nSample Input 4:\n3 3 2 1\n1 1\n2 2 3\nSample Output 4:\n0\n\nSample Input 5:\n4 3 3 1\n3 3\n1 2\nSample Output 5:\n0\n\nSample Input 6:\n4 4 3 3\n1 1 1 1\n2 2 2 2\nSample Output 6:\n0\n\nSample Input 7:\n4 4 4 3\n2 1 2 3\nSample Output 7:\n0\"\"\") == \"12\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\n\nassert solution('''3 3 1 1\n1 1\n2 2 3\n''') == '0'\n\nassert solution('''3 2 2 3\n1 1\n2 2 3\n''') == '18'\n\nassert solution('''3 1 2 3\n1 1\n2 2 3\n''') == '0'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1 2 1\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"3 2 2 3\") == \"18\"\nassert solution(\"3 1 2 3\") == \"12\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1 2 1\\n2 1 2\\n2 3 4\\n\") == \"6\"\nassert solution(\"3 3 1 1\\n1 1\\n2 2 3\\n\") == \"0\"\nassert solution(\"3 3 2 3\\n1 1\\n2 2 3\\n\") == \"12\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 1 2 1\n2 1 2\n2 3 4''') == '6'\nassert solution('''3 3 1 1\n1 1\n2 2 3\nSample Output 4:\n18''') == '12'\nassert solution('''4 2 1 2 1\n2 1 2\n2 3 4\nSample Output 2:\n0''') == '0'\nassert solution('''3 3 1 1\n1 1\n2 2 3\nSample Output 1:\n6''') == '6'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 2 1 2 1\"\n) == \"6\"\nassert solution(\n    \"3 3 1 1\"\n) == \"0\"\nassert solution(\n    \"3 2 2 3\"\n) == \"18\"\nassert solution(\n    \"3 1 2 3\"\n) == \"0\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 2 1 2 1\n2 1 2\n2 3 4\n\"\"\") == '6'\nassert solution(\"\"\"\n3 3 1 1\n1 1\n2 2 3\n\"\"\") == '0'\nassert solution(\"\"\"\n3 2 2 3\n1 1\n2 2 3\n\"\"\") == '18'"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"468559\"\nprint(solution(input_string))"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1000000 1''') == '468559'\nassert solution('''1000000 5''') == '49401'\nassert solution('''1000000 16''') == '20'\nassert solution('''9000000000000000000 62''') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1000000 1\") == '468559'\nassert solution(\"1000000 5\") == '49401'\nassert solution(\"1000000 16\") == '20'\nassert solution(\"9000000000000000000 62\") == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"468559\"\nprint(solution(input_))\nprint(solution(input_))\nprint(solution(input_))\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"468559\"\n\n\"\"\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n123456789012\n12\"\"\") == \"1\"\nassert solution(\"\"\"\n123456789012\n5\"\"\") == \"49401\"\nassert solution(\"\"\"\n123456789012\n16\"\"\") == \"20\"\nassert solution(\"\"\"\n123456789012\n62\"\"\") == \"1\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\nassert solution(\"18 90\") == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == \"2\"\nprint(solution(input_string))"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'\n\"\"\"\nimport math\nfrom itertools import product"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 9\n5 4 1\n''') == '1'\nassert solution('''4 13\n2 2 2 2\n''') == '3'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '12'"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 9\n5 4 1\nSample Output 1:\n1\n\nSample Input 2:\n4 13\n2 2 2 2\nSample Output 2:\n3\n\nSample Input 3:\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\nSample Output 3:\n12\n''') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'\nassert solution('1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6') == '1'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\nassert solution(\"18 90\") == \"12\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 3 4 5 8''') == '5'\nassert solution('''1\n1''') == '0'\nassert solution('''2\n3''') == '2'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '3'\nassert solution('5') == '5'\n\"\"\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n1''') == '0'\nassert solution('''3\n4 7 8''') == '3'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '5'\nassert solution('5') == '5'"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2 3 4 5 8''') == '3'\nassert solution('''\n3\n8 9 6''') == '6'\nassert solution('''\n5\n6 6 8 6''') == '6'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\""
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''37''') == '75'\nassert solution('''48''') == '85'\nassert solution('''3748''') == '7585'\nassert solution('''123748''') == '11112'\nassert solution('''4000001''') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7') == '8'\nassert solution('9') == '8'\nassert solution('931') == '17'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\nassert solution(\"5912843589\") == \"7760\"\nassert solution(\"2233773668\") == \"3266\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7\n10\n100000000000\n''') == '-1'\nassert solution('''\n123456789\n123456789\n''') == '-1'\nassert solution('''\n1234\n''') == '4'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"36\") == \"3\"\nassert solution(\"34\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"24\") == \"4\"\nassert solution(\"1234567890\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('123456') == '-1'\nassert solution('34567') == '1112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\nassert solution('9') == '-1'\nassert solution('8') == '-1'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"d 4\\ncab\\n\") == \"adcb\"\nassert solution(\"c 4\\nabc\\n\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\\n\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nc 4\nabc\nbca\ncab\naca\n''') == 'adcb'\nassert solution('''\nb 2\nabc\nbca\ncab\naca\n''') == 'IMPOSSIBLE'\nassert solution('''\nz 4\nzab\nzca\nzab\nzac\n''') == 'zab'\nassert solution('''\na 2\nab\nac\nab\nac\n''') == 'IMPOSSIBLE'\nassert solution('''\nz 4\nabc\nbca\ncab\naca\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca\\n') == 'adcb'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"d 4\\n\"\n                \"cab\\n\"\n                \"cda\\n\"\n                \"ccc\\n\"\n                \"badca\") == \"adcb\"\nassert solution(\"f 2\\n\"\n                \"dea\\n\"\n                \"cfb\") == \"IMPOSSIBLE\"\nassert solution(\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('d 4\\n'\n'cab\\n'\n'cda\\n'\n'ccc\\n'\n'badca\\n') == 'adcb'\nassert solution('f 2\\n'\n'abc\\n'\n'bca\\n'\n'cab\\n'\n'aca\\n') == 'IMPOSSIBLE'\n\"\"\"\n\n\"\"\"\nclass Order:\n\n    def __init__(self):\n        self.a = list(map(chr, range(ord('b'), ord('z') + 1)))\n        self.s = []\n\n    def reset(self):\n        self.s = []\n\n    def sort(self, al):\n        i = 0\n        j = 0\n        while i < len(al) and j < len(self.a):\n            if al[i] < self.a[j]:\n                self.s.append(al[i])\n                i += 1\n            else:\n                self.s.append(self.a[j])\n                j += 1\n        while i < len(al):\n            self.s.append(al[i])\n            i += 1\n\n        return self.s\n\n    def find(self, l, m):\n        for i in range(len(self.s)):\n            if self.s[i] == l:\n                return m\n            m += 1"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\nabc\\nbca\\ncab\\naca\\n\") == \"adcb\"\nassert solution(\"3 2\\nabc\\nbca\\ncab\\naca\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nb 4\nabc\nbca\ncab\naca\n''') == 'adcb'\nassert solution('''\nc 4\nabc\nbca\ncab\naca\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"d 4\\nabc\\nbca\\ncab\\naca\\n\") == \"adcb\"\nassert solution(\"c 2\\nabc\\nbca\\ncab\\naca\\n\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndef\\ncba\\nabc\\nbca\\ncab\\naca\\n\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('d 4\\nabc\\nbca\\ncab\\naca\\n') == 'adcb'\n\nassert solution('c 4\\nabc\\nbca\\ncab\\naca\\n') == 'IMPOSSIBLE'"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\nab\nac\n''') == 'adcb'\nassert solution('''\n4\ncab\ncda\nccc\nbadca\n''') == 'impa'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3 3 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\nassert solution('''\n100 20 543 12\n''') == '164'"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 3 3 3\\n\") == \"9\", \"Wrong output!\"\nassert solution(\n    \"10 20 0 0\\n\") == \"10\", \"Wrong output!\"\nassert solution(\n    \"100 20 543 12\\n\") == \"164\", \"Wrong output!\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3 3 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\nassert solution('''\n100 20 543 12\n''') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 3 3 3\n3''') == '9'\nassert solution('''10 20 0 0\n3''') == '10'\nassert solution('''100 20 543 12\n1''') == '164'\nassert solution('''5\n3\n1\n2\n1\n5\n''') == '9'"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2 3\n\"\"\") == \"9\"\nassert solution(\"\"\"\n4 5 6\n\"\"\") == \"10\"\nassert solution(\"\"\"\n100 50 0 0\n\"\"\") == \"164\""
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2 3') == 'yes'\nassert solution('4 3 3') == 'no'\nassert solution('3 2 3') == 'no'\nassert solution('3 3 3') == 'no'"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0''') == \"yes\"\n\nassert solution('''4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0''') == \"no\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3\") == \"yes\"\nassert solution(\"4 3 3\") == \"no\"\nassert solution(\"3 2 3\") == \"no\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\") == \"yes\"\nassert solution(\"3 2 3\") == \"no\"\nassert solution(\"3 3 3\") == \"no\"\nassert solution(\"3 3 3\") == \"no\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '4 2 3'\n    '0 1'\n    '1 0'\n    '-1 0'\n    '0 -1'\n    '-1 1 -2'\n    '-1 -1 2'\n    '0 -1 0'\n) == 'yes'\nassert solution(\n    '4 3 3'\n    '0 1'\n    '1 2'\n    '-1 2'\n    '0 -1'\n    '-1 1 -2'\n    '-1 -1 2'\n    '0 -1 0'\n) == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 3') == 'yes'\nassert solution('4 2 3') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'yes', \"Failed\"\n\nassert solution('''4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\n''') == 'no', \"Failed\""
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2 3\") == \"no\"\nassert solution(\"4 2 3\") == \"yes\"\nassert solution(\"4 3 3\") == \"no\"\nassert solution(\"4 3 3\") == \"yes\""
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0''') == 'yes'\nassert solution('''4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0''') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'yes', 'happy'\n\nassert solution('''\n4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\n''') == 'no','sad'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('123456789') == '1'\nassert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\nassert solution('aa') == '1'\nassert solution('ab') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"1\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('123456789') == '1'\nassert solution('12345678') == '3'\nassert solution('1234567890') == '4'\nassert solution('1234567890a') == '5'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''12121131221''') == '7'\nassert solution('''123456789''') == '1'\n\"\"\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n\nimport math\nimport itertools"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0\"\nassert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 2 3\") == \"0\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sample_input_1) == '0'\nassert solution(sample_input_2) == '24'\nassert solution(sample_input_3) == '800'\nprint('all tests passed')\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''\n4 4\n24 10\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '24'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0'\nprint('all tests passed')\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\nassert solution('''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 4\") == \"24\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '0'\nassert solution('4 4') == '24'\nassert solution('6 8') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4') == '0'\nassert solution('6 8') == '2400'\nassert solution('3 3') == '0'\nassert solution('10 20 30 50') == '10000'"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '0'\nassert solution('4 4') == '24'\nassert solution('6 8') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3\n1\n1 2\n2 3\n1 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 4\n24 10\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n\"\"\") == \"24\"\nassert solution(\"\"\"\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n\"\"\") == \"800\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 3 2 4\n''') == '1 4'\nassert solution('''\n5\n1 2 3 4 5\n''') == '1 2 3 4 5'\nassert solution('''\n4\n2 1 4 3\n''') == '1 2 3 4'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('4\\n2 1 3 4') == '-1'"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 4 3') == '1 2 3 4', \"wrong\"\nassert solution('5 1 2 3 4 5') == '1 2 3 4 5', \"wrong\"\nassert solution('4') == '-1', \"wrong\"\nassert solution('1') == '-1', \"wrong\""
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '1 4'\nassert solution('5') == '1 2 3 4 5'\nassert solution('-1') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == \"1 4\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1 2 3 4 5\"\n\n\"\"\"\n\nstdin = input()\nstdin = list(map(int, stdin.split()))\nprint(solution(stdin))\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 3 2 4\n''') == '1 4'\nassert solution('''\n5\n1 2 3 4 5\n''') == '1 2 3 4 5'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 2 4\\n') == '1 4'\nassert solution('5\\n1 2 3 4 5\\n') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3\\n') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3 2 4') == '1 4'\nassert solution('5 1 2 3 4') == '1 2 3 4'\nassert solution('4 5 1 3 2') == '1 2 3 4'\nassert solution('4 5 1 3 2') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '1 4', 'First'\nassert solution('5') == '1 2 3 4 5', 'Second'\nassert solution('1 2 3 4 5') == '1 2 3 4 5', 'Third'\nassert solution('3') == '-1', 'Fourth'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3') == '-1'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\n''') == \"8\"\nassert solution('''\n3 3\n...\n.#.\n...\n''') == \"1\"\nassert solution('''\n2 6\n.#####\n#####.\n''') == \"5\"\n\"\"\"\nimport math"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 2\\n.#.#\\n...\\n.###') == '1'\nassert solution('4 6\\n...#\\n.###.\\n.#.#\\n.#.#') == '1'\nassert solution('4 6\\n.####\\n.#.#.\\n.#.#.\\n#..#\\n.#.#') == '3'\nassert solution('4 6\\n.####\\n.#.#.\\n.###.\\n#..#\\n.#.#') == '3'\nassert solution('6 3\\n...#\\n...#\\n...#\\n...#\\n.#.#') == '1'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3') == '1'\nassert solution('2 6') == '5'\nassert solution('3 3') == '1'\nassert solution('4 4') == '1'\nassert solution('5 2') == '0'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n.#####\\n#####.') == '5'\nassert solution('1 2\\n##.##\\n##.##') == '1'\nassert solution('3 3\\n##.##\\n##.##\\n##.##') == '5'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n') == '1'\nassert solution('6 2\\n') == '1'\nassert solution('3 6\\n') == '2'\nassert solution('7 7\\n') == '1'\nassert solution('3 8\\n') == '2'"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 8\\n..#..#..\\n.######.\\n.######.\\n..#..#..') == '8'\nassert solution('3 3\\n...\\n.#.\\n...\\n') == '1'\nassert solution('2 6\\n.#####\\n#####.\\n') == '5'\nprint(solution.__doc__)\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4 8\n..#..#..\n.######.\n.######.\n..#..#..\n\"\"\") == \"8\"\n\nassert solution(\"\"\"3 3\n...\n.#.\n...\nSample Output 3:\n1\n\nSample Input 4:\n5 5\n.#####\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 8\n.######.\n.######.\n..#..#..\n''') == '8'\nassert solution('''\n3 3\n...\n.#.\n...\nSample Output 3:\n5\n''') == '1'\nassert solution('''\n2 6\n.#####\n#####.\nSample Output 2:\n5\n''') == '5'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"2 6\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input()) == \"4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(input()) == \"13\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5 5\") == \"6\"\nassert solution(\"4 5 5\") == \"19 12 2 18 5 5\"\nassert solution(\"3 3 3\") == \"13\"\n\nassert solution(\"3 2 2\") == \"4 2 6 1 9 7 5 5 7 1 2 3 3\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == \"6\"\nassert solution(sample_input_2) == \"13\"\nassert solution(sample_input_3) == \"-1\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 3') == '4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 3 3') == '-1'\nassert solution('2 2 2') == '4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('5 2 1') == '5 2 1'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\") == \"6\"\nassert solution(\"3 3 3\\n3 1 3 3 1\\n1 3 3 3 1\\n3 2 3 3 1\" ) == \"13\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 5\") == \"6\"\nassert solution(\"3 3 3\") == \"13\"\nassert solution(\"3 2 2\") == \"4 2 6 1 9 7 5 5 7 1 2 3 3\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6'\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13'\nassert solution('''3 2 2\n1 2\n2 1\n1 2\n''') == '-1'"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '6'\nassert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '19 12 2 18 5 5'\nassert solution('''\n3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6', 'First'\nassert solution('''\n3 3 3\n3 1 3\n1 3 2\n3 2 3\n''') == '13', 'Second'\nassert solution('''\n3 2 2\n1 2\n2 1\n1 2\n''') == '-1', 'Third'\n\nsolution(\"\"\"\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n\"\"\") == '6'"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\"\"\") == \"\"\"6\n19 12 2 18 5 5\"\"\", 'You should return a single line containing the number of moves in the winning sequence.'\n\nassert solution(\"\"\"3 3 3\n3 1 1\n1 3 2\n3 2 3\"\"\") == \"\"\"13\n4 2 6 1 9 7 5 5 7 1 2 3 3\"\"\""
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5'\n\nassert solution('''\n5\n4\n3\n2\n1\n0\n1\n2\n3\n4\n''') == '3 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1 5\"\nassert solution(\"4\") == \"1 2\"\nassert solution(\"\") == \"\"\nassert solution(\"4\") == \"\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '5 1'\nassert solution('4') == '1 5'\nassert solution('3') == '1 5'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(solution.__doc__) == '1 5\\n'\n\nassert solution(solution.__doc__) == '1 5\\n'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n3\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5'\n\nassert solution('''\n3\n5\n3\n2\n1\n0\n1\n2\n3\n4\n''') == '3 2'\n\nassert solution('''\n4\n1\n5\n3\n6\n1\n2\n3\nSample Output 4:\n3 2\n''') == '1 5'\n\nassert solution('''\n5\n3\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5'\n\nassert solution('''\n4\n1\n5\n3\n6\n1\n2\n3\nSample Output 5:\n3 2\n''') == '1 5'"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1 2'\nassert solution('4') == '1 5'\nassert solution('3') == '1 2'\nassert solution('2') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n3\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 3'\nassert solution('''\n5\n4\n3\n2\n1\n0\n1\n2\n3\n4\n''') == '3 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1 1\"\nassert solution(\"4\") == \"2 1\"\nassert solution(\"3\") == \"1 1\""
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"2 2\"\nassert solution(\"4\") == \"3 2\"\nassert solution(\"5\") == \"4 2\"\nassert solution(\"6\") == \"5 3\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0 1\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"5\") == \"5 1\"\nassert solution(\"4\") == \"1 1\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\\n\") == \"5\\n\"\nassert solution(\"10\\n0 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\") == \"10\\n\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n3 0\\n3 1\\n3 2\") == \"1\"\nassert solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\") == \"5\"\nassert solution(\"6\\n5 0\\n4 1\\n3 1\\n2 2\\n1 3\\n0 4\") == \"5\""
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\nassert solution('''5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '5'\nassert solution('''6\n3 0\n1 1\n2 1\n1 3\n0 4\n5 1\n''') == '5'\n\nimport math\nimport random\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '1'\nassert solution('6') == '5'\nprint('all tests passed')\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 0\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"5\"\nassert solution(\"4 0 3 0 1\") == \"1\"\nassert solution(\"5 4 0 3 1\") == \"1\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\nassert solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4') == '5'\nassert solution('6\\n5 0\\n4 1\\n3 1\\n2 2\\n1 3\\n0 4') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\nassert solution('8') == '0'\nassert solution('9') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == '0'\nassert solution('''9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\nassert solution('9') == '5'\nassert solution('10') == '1'"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"8\\n\"\n    \"1 3 1\\n\"\n    \"2 3 1\\n\"\n    \"3 4 3\\n\"\n    \"4 5 4\\n\"\n    \"5 6 3\\n\"\n    \"6 7 2\\n\"\n    \"6 8 2\\n\"\n) == \"4\\n\"\n\nassert solution(\n    \"8\\n\"\n    \"1 2 2\\n\"\n    \"1 3 1\\n\"\n    \"2 4 3\\n\"\n    \"2 7 1\\n\"\n    \"3 5 2\\n\"\n    \"5 6 2\\n\"\n    \"7 8 1\\n\"\n) == \"0\\n\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\nassert solution('9') == '5'"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''\n8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == '0'\nassert solution('''\n9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8\") == \"4\"\nassert solution(\"8\") == \"0\"\nassert solution(\"9\") == \"5\"\nassert solution(\"10\") == \"1\"\nassert solution(\"11\") == \"1\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\nassert solution('''\n8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(samples[0]) == '4'\nassert solution(samples[1]) == '2'\nassert solution(samples[2]) == '5'\nassert solution(samples[3]) == '1'\nassert solution(samples[4]) == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '4'\nassert solution('8') == '6'\nassert solution('9') == '5'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n2 1\nV1 V2 V1 V1 V2\n''') == '6'\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '30'\nassert solution('''\n2 2\nR1 R2 R1\n''') == '4'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''2 1\nV1 V2 V1 V1 V2\n''') == '6'\nassert solution('''1 2\nR10 V1 V2 V1 E\n''') == '30'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 2\nV1 V2\nR10 V1 V2 V1 E\n''') == '6'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\nR10 V1 V2 V1 E\n''') == '30'\n'''\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '30'\nassert solution('''\n1 2\nV1 V2 E\n''') == '5'\nassert solution('''\n1 2\nR10 V1 V2 E\n''') == '30'\nassert solution('''\n1 2\nR10 V1 V2 E\n''') == '30'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1\nV1 V2 V1 V1 V2\n''') == '5'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 3\nV1 V2 V3 E\n''') == '5'\nassert solution('''\n2 1\nV1 V2 V1 V1 V2\n''') == '6'\nassert solution('''\n1 100000\nV1 V2 V1 V2 V1 V2 V1 V2 V1 V2 V1 V2\n''') == '700000'\nassert solution('''\n2 1000\nV1 V2 V1 V2 V1 V2 V1 V2 V1 V2 V1 V2\n''') == '8000000'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"5\"\nassert solution(\"1 2\") == \"6\"\nassert solution(\"1 2\") == \"30\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\nR1 R2 V3 E\nSample Input 4:\n2 1\nV1 V2 V1 V1 V2\nR1 R10 V1 V2 V1 E\nSample Output 4:\n10\n''') == '10'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\nR1 R10 V1 V2 V1 E\nSample Input 5:\n2 1\nV1 V2 V1 V1 V2\nR1 R10 V1 V2 V1 E\nV3 V3 V3 V3 V3 V3 E\nSample Output 5:\n10\n''') == '10'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\nV3 V3 V3 V3 V3 V3 V3 V3\nV4 V4 V4 V4 V4 V4 V4 V4 V4\nR1 R10 V1 V2 V1 E\nV1 V2 V1 V1 V2 V1 E\nSample Input 6:\n2 1\nV1 V2 V1 V1 V2\nR1 R10 V1 V2 V1 E\nV3 V3 V3 V3 V3 V3 V3 V3 V3\nSample Output 6:\n8\n''') == '8'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\nR1 R10 V1 V2 V1 E\nV3 V3 V3 V3 V3 V3 V3 V3\nV4 V4 V4 V4 V4 V4 V4 V4 V4 V4\nSample Input 7:\n2 1\nV1 V2 V1 V1 V2\nR1 R10 V1 V2 V1 E\nV3 V3 V3 V3 V3 V3 V3 V3\nV4 V4 V4 V4 V4 V4 V4 V4 V4 V4\nV5 V5 V5 V5 V5 V5 V5 V5 V5 V5\nV6 V6 V6 V6 V6 V6 V6 V6 V6 V6 V6\nV7 V7 V7 V7 V7 V7 V7 V7 V7 V7 V7\nSample Output 7:\n24\n''') == '24'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 1\nR10 V1 V2 V1 E''') == '6'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '30'"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n\"\"\""
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 1') == '2'\nassert solution('3 1') == '3'\nassert solution('10 11') == 'impossible'\nassert solution('10 9') == 'impossible'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 24\n''') == '38'\nassert solution('''\n10 11\n''') == 'impossible'\nassert solution('''\n9 216\n''') == '546'''\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"9 216\") == \"impossible\"\nprint(solution(\"10 11\"))\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 11\") == \"impossible\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 10\") == \"38\""
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 8\") == \"243\"\nassert solution(\"20 30\") == \"impossible\"\nassert solution(\"100 100\") == \"impossible\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n\"\"\") == \"466.662\"\nassert solution(\"\"\"3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n\"\"\") == \"10.00005\"\nassert solution(\"\"\"3 4 1 0\n0 2 0.25 8\n\"\"\") == \"2.0\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == \"10.00005\"\nassert solution('''3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == \"0.00005\"\nassert solution('''2 3\n1 1\n''') == \"0.00005\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 0.3333 33') == '1.3333'\nassert solution('2 5 0.6666 66') == '2.6666'\nassert solution('2 7 0.6666 66') == '3.0000'\nassert solution('3 4 1 0') == '1.0000'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n20 60 2 1\n5 15 0.3333\n22 60 0.66667\n0 10\n''') == '466.662', f'Expected \"{466.662}\" for \"{solution(''\\'\\n20 60 2 1\\n5 15 0.3333\\n22 60 0.66667\\n0 10\\')}\"'\nassert solution('''\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == '10.00005', f'Expected \"{10.00005}\" for \"{solution(''\\'\\n3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\\')}\"'\nassert solution('''\n3 4 1 0\n0 2 0.25 8\n''') == '2.0', f'Expected \"{2.0}\" for \"{solution(''\\'\\n3 4 1 0\\n0 2 0.25 8\\')}\"'"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10') == '466.662'\nassert solution('3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2') == '10.00005'\nassert solution('1 1\\n2 3\\n0 1') == '1.00005'\nassert solution('1 2\\n3 4\\n0 1') == '1.00005'\nassert solution('1 2\\n3 2\\n0 1') == '1.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"466.662\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('20 60 2 1') == '466.662'\nassert solution('3 4 2 1') == '10.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 2 1') == '10.00005'\nassert solution('20 60 2 1') == '466.662'\nassert solution('3 4 2 1') == '2.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\\n') == '466.662'\nassert solution('3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\\n') == '10.00005'\nassert solution('2 2\\n0 0\\n0 1') == '1.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('20 60 2 1') == '466.662'\nassert solution('3 4 2 1') == '10.00005'\nassert solution('3 4 1 0') == '2.0'\nassert solution('10 0') == '0.000001'\nprint('all tests passed')\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n''') == '1.500000000000000'\nprint(solution('''\n2\nblue red 1.0\nred pink 1.5\n'''))\nassert solution('''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1.500000000000000'\nassert solution('2') == '0.000000000000000'\nassert solution('4') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\nblue green 1.9') == '10.000000000000000'\nassert solution('2\\nblue red 1.0') == '0.000000000000000'\nassert solution('3\\nblue pink 1.0') == '1.500000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n\"\"\") == \"1.500000000000000\"\nassert solution(\n    \"\"\"\n2\nblue red 1.0\nred pink 1.5\n\"\"\") == \"0.000000000000000\"\nassert solution(\n    \"\"\"\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n\"\"\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1.500000000000000'\nassert solution('2') == '0.000000000000000'\nassert solution('4') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0') == '1.500000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0.000000000000000\"\nassert solution(\"3\") == \"1.500000000000000\"\nassert solution(\"3\") == \"1.500000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0.000000000000000'\nassert solution('2') == '0.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"1.500000000000000\""
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n''') == '1.500000000000000'\n\nassert solution('''\n4\nblue red 1.0\nred pink 1.5\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == '22'\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\n''') == '0'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 2:\n22\n''') == '0'\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 3:\n0\n''') == '0'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 2:\n22\n\nSample Input 3:\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 3:\ntoo many"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(s) == \"too many\""
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n4 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '22'\nassert solution('''\n5 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == 'too many'\nassert solution('''\n1 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == 'too many'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == 'too many'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == '0'\nprint(solution())\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180', \"First\"\n\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == '22', \"Second\"\n\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\n''') == '0', \"Third\"\n\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\n''') == 'too many', \"Fourth\"\n\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\n''') == 'too many', \"Fifth\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 1 1 1 0\") == \"180\"\nassert solution(\"2 3 1 5 3 2\") == \"22\"\nassert solution(\"2 1 2\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(solution.__doc__) == \"too many\"\nprint(solution())\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 2') == '17 17'\nassert solution('6 8 5') == '20 20'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nright 7\\ndown 2\\nleft 4\\nu 3\\n\") == \"20 20\"\nassert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\ndown 2\\n\") == \"-1 -1\"\nassert solution(\"7 7 7\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 8 5') == '20 20'\nassert solution('6 8 5') == '20 20'\nassert solution('3 3 2') == '17 17'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 8 5') == \"20 20\"\nassert solution('6 8 5') == \"17 17\"\nassert solution('3 3 2') == \"17 17\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '20 20', 'Your solution is not correct.'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '20 20'\nassert solution() == '17 17'\nassert solution() == '-1 -1'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\") == \"17 17\"\nassert solution(\"6 8 5\") == \"20 20\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 8 5\n...#....\n########\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '200'\nassert solution('2\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '300'\n\nfrom typing import List\nimport itertools\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('10') == 'impossible'\nassert solution('3 2') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3\n20 40 65\n2 88 200\n90 90''') == '88'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n3\n2 40 65\n2 100 150\n2 300 320''') == '300'\n\nassert solution('''10\n3\n2 20 35\n2 88 200\nSample Output 3:\n8\n''') == 'impossible'\n\nassert solution('''0\n3\n2 40 65\n2 100 150\n2 300 320\nSample Output 3:\n2\n''') == '2'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n3\n2 40 65\n2 100 150\n2 300 320\n''') == \"impossible\"\n\nassert solution('''91\n3\n2 20 35\n2 88 200\nSample Output 3:\n88\n''') == \"88\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('371\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\nassert solution('310\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '300'\nassert solution('1000\\n3\\n1 10 5') == 'impossible'\nassert solution('1000\\n3\\n2 10 5\\n2 1 8') == 'impossible'\nassert solution('10000\\n3\\n1 100 1\\n2 1 8\\n3 1 100') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == '300'\nassert solution('4') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2\\n2 40 65\\n2 100 150\\n2 300 320\\n') == '88'\nassert solution('2\\n5\\n0 0 0\\n2 20 35\\n2 100 200\\n') == '2'"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"3\\n2\\n3 40 65\\n2 100 150\\n2 300 320\") == \"300\"\nassert solution(\"3\\n2\\n1 40 65\\n2 100 150\\n2 300 320\") == \"800\"\nassert solution(\"3\\n2\\n1 40 65\\n2 100 150\\n2 500 320\") == \"impossible\"\nassert solution(\"3\\n2\\n1 40 65\\n2 100 150\\n2 800 320\") == \"impossible\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"6\") == \"impossible\"\nassert solution(\"10\") == \"impossible\"\nassert solution(\"60\") == \"impossible\"\nassert solution(\"100\") == \"impossible\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"....###\") == \"cannot fold\"\nassert solution(\"#.....##\") == \"can fold\"\nassert solution(\"##...###\") == \"can fold\"\nassert solution(\"#..#.##.\") == \"can fold\"\nassert solution(\"##...#.#\") == \"can fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('......#.##......#...#####.##.#..#..##') == 'can fold'\nassert solution('...#.##...#.##...#.#.#.#.#.#.#.###.##.#.#') == 'cannot fold'\nassert solution('.....##...#.#...#.#..##...##.##..#.#....#') == 'can fold'\nassert solution('......#.##.#....##...##.#...#..#.##....##') == 'cannot fold'\nassert solution('..#.#.##.#..###.#.#.#..###.###.##..##.#..#') == 'can fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"......\\n......\\n######\") == \"can fold\"\nassert solution(\"..##..\\n...#..\\n..##..\\n...#..\") == \"cannot fold\""
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"#.##.#.#.##\") == \"cannot fold\"\nassert solution(\"#.#.###.#.##\") == \"can fold\"\nassert solution(\"#.##.###.#.##\") == \"can fold\"\nassert solution(\"##.##.###.#.##\") == \"can fold\"\nassert solution(\"#.#...#.#..##\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''......\n......\n######\n......\n......\n......\n''') == 'cannot fold'\nassert solution('''......\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('.....\\n...#.\\n##...\\n...#.#\\n.....#\\n.##...\\n.....#\\n.##...') == 'cannot fold'\nassert solution('..#.\\n##...\\n.#..\\n##...\\n##...\\n##...\\n##...') == 'can fold'\nassert solution('.....\\n#####\\n#...#\\n#..#.\\n#.#.#\\n#.#.#\\n.....') == 'cannot fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"##..##\\n#...#.\\n###..#\\n...#.#\\n....#.\\n#.##..\") == \"cannot fold\"\n\nprint(solution(\"......\\n######\\n#.....\\n######\\n#.....\\n......\"))"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('.....') == 'cannot fold'\nassert solution('..#.#') == 'can fold'\nassert solution('#..#.#') == 'can fold'\nassert solution('#.#.#.#') == 'cannot fold'\nassert solution('.#.##.#') == 'can fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n....##\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''......\n......\n######\n......\n......\n......\nSample Output 3:\ncan fold''') == 'cannot fold'\nassert solution('''##.##\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\""
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nabcefgabc\n''') == 'abc'\nassert solution('''\nabcbabcba\n''') == 'abcba'\nassert solution('''\naaaa\n''') == 'aaa'"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\nprint(solution(input()))\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('ab') == ''\nassert solution('abcd') == ''\nassert solution('abcefgabc') == 'abc'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input_1) == 'abc'\nassert solution(sample_input_2) == 'abcba'\nassert solution(sample_input_3) == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"abcefgabc\"\n) == \"abc\"\nassert solution(\n    \"abcbabcba\"\n) == \"abcba\"\nassert solution(\n    \"aaaa\"\n) == \"aaa\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''aaabbccddeeefffggghhiiiiijjkkkklllmno\no''') == 'o'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1 4') == '4'\nassert solution('2\\n1 4\\n2 5') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 4\n2 5\n''') == '4'\nassert solution('''\n3\n1 4\n2 10005\n0 15\n''') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 4') == '4'\nassert solution('2 5') == '6'\nassert solution('1 4') == '4'\n\n'''\nfrom itertools import combinations\nimport sys\nimport math\n\nN = int(input())\nintervals = []\n\nfor i in range(N):\n    a, b = map(int, input().split())\n    intervals.append([a, b])\n\nsolution = 0\nmax_coupons = sys.maxsize\n\nfor combo in combinations(intervals, 2):\n    coupons_left = 2 + abs(combo[0][1] - combo[1][0])\n    if coupons_left <= max_coupons:\n        solution = max(solution, coupons_left)\n\nprint(solution)"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '4'"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 4\n2 5\n''') == '4'\n\nassert solution('''\n2\n1 4\n2 10005\n''') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 4\n2 5\n''') == '4'\nassert solution('''\n3\n1 4\n2 10005\n0 15\n''') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 4\") == \"4\"\nassert solution(\"2 5\") == \"6\"\nassert solution(\"3 10005\") == \"6\""
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 4\\n2 5\") == \"4\"\nassert solution(\"2\\n1 4\\n2 10005\") == \"6\"\nassert solution(\"3\\n1 4\\n2 10\\n0 15\") == \"4\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'\nassert solution('5\\n1 1 1 1 1') == '4'\nassert solution('100\\n1 2 3 4 5') == '0'"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3 4 4 8 12 24') == '2'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''3\n7 7 7\n''') == '3'\nassert solution('''5\n1 2 3 2 1\n''') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 2 1') == '2'\nassert solution('4 5 3 2 1') == '1'\nassert solution('3 6 4 2 1') == '0'\nassert solution('2 8 4 2 1') == '3'\nassert solution('6 7 2 2 1') == '1'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == \"0\"\nassert solution('2') == \"1\"\nassert solution('3') == \"1\"\nassert solution('4') == \"1\"\nassert solution('5') == \"0\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '0'\nassert solution('8') == '1'\nassert solution('10') == '1'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n10 20 10') == '4'\nassert solution('4\\n1 2 3 2 1') == '0'\nassert solution('5\\n1 2 3 2 1') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 2 3 4 4 8 12 24') == '2'\nassert solution('3 7 7 7') == '3'\nassert solution('5 1 2 3 2 1') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 2 3 4 4 8 12 24') == '2'\nassert solution('3 7 7 7') == '3'\nassert solution('5 1 2 3 2 1') == '0'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 5 4\\nS#.F.\\n.MFMG\\nS#\\n#G\\nSample Output 1:\\n3\\nSample Input 2:\\n1 2 1\\nGS\\nSample Output 2:\\n1\\nSample Input 3:\\n2 2 10\\nS#\\n#G\\nSample Output 3:\\n-1\\n\") == \"3\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == '3'\nassert solution('1 2 1\\nGS\\n') == '1'\nassert solution('1 2 1\\nGS\\n') == '-1'"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('2 2 10') == '1'"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '3'\nassert solution(input(2)) == '1'\nassert solution(input(3)) == '-1'\nassert solution(input(4)) == '-1'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('2 2 10') == '1'"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(samples[0]) == \"3\"\nassert solution(samples[1]) == \"1\"\nassert solution(samples[2]) == \"1\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1') == '1'\nassert solution('2 2 10') == '1'\nassert solution('4 5 2') == '2'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 5 4\nS#.F.\n.MFMG\n''') == '3'\nassert solution('''1 2 1\nGS\n''') == '1'\nassert solution('''2 2 10\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\nassert solution(\"3 3 3\\nS#\\n#G\\n\") == \"-1\"\nassert solution(\"1 1 1\\nGS\\n\") == \"1\""
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3\nS..\n.#.\n..G\nDRRDD\n''') == '1'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n....\n...#\nG#.S\n.###''') == '1'\nassert solution('''2 7\n...S.\n.#.#''') == '1'\nassert solution('''3 7\n.#.....\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"DRRDD\") == \"1\"\nassert solution(\"LDLDLLDR\") == \"2\"\nassert solution(\"R.R.R.D\") == \"0\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nS\\nS\\ng\\nD\\nR\\nR\\nL\\nR\\nD\\nR') == '1'\nassert solution('2\\nS\\ng\\nG\\ng\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input(file=\"sample1.txt\")) == \"1\"\nassert solution(input(file=\"sample2.txt\")) == \"1\"\nassert solution(input(file=\"sample3.txt\")) == \"2\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n3 3\n.....\n.G..S.\n.......\nDRRDD\n\"\"\") == \"1\"\nassert solution(\n    \"\"\"\n3 7\n.......\n.G.##S.\n.......\nLDLDLLDR\n\"\"\") == \"2\"\nassert solution(\n    \"\"\"\n3 7\n.....\n.G.#.S.\n.......\nLDLDLLDR\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == '1'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n100 0 101\n0 200 199\n''') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\\n\") == \"1000200 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\\n\") == \"uncertain\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"5\") == \"1000200 799\"\nassert solution(\"4\") == \"1000200 799\"\nassert solution(\"5\") == \"1000200 799\"\nassert solution(\"2\") == \"uniform\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1\n0 0\n0 1000\n10\n0\n\"\"\") == \"1000200 799\"\n\nassert solution(\"\"\"\n2\n100 0\n0 200\n999\n0\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n2\n0 0\n0 1000\n10\n0\n\"\"\") == \"uncertain\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\n\nassert solution('''2\n100 0 101\n0 200 199\n''') == 'uncertain'\n\nassert solution('''2\n100 0 100\n0 200 199\n''') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"1000200 799\"\nassert solution(\"\"\"\n1\n1 1\n\"\"\") == \"1 1\"\nassert solution(\"\"\"\n1\n1 0\n\"\"\") == \"0 1\"\nassert solution(\"\"\"\n2\n100 0 100\n0 200 199\n\"\"\") == \"uncertain\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\nassert solution('''2\n100 0 101\n0 200 199\n''') == 'uncertain'\nassert solution('''2\n100 0 100\n0 200 199\n''') == 'impossible'\nassert solution('''1\n0 0 100\n''') == '0 0 100'\nassert solution('''2\n100 0 100\n0 200 199\n''') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == 'uncertain'\nassert solution('3') == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"1000200 799\"\nassert solution(\"\"\"\n2\n100 0 101\n0 200 199\n\"\"\") == \"uncertain\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1\") == \"1000200 799\"\nassert solution(\"2\") == \"uncertain\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n4 7\n9 8\n14 17\n19 18\n''') == '2'\nassert solution('''\n2\n4 7\n14 17\n19 18\n''') == '1'\nassert solution('''\n2\n4 7\n9 7\n14 17\n19 18\n''') =='syntax error'\nassert solution('''\n2\n4 8\n9 7\n14 18\n19 17\n''') =='syntax error'\n\n'''\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n4 7\n9 8\n14 17\n19 18\n''') == '2 1'\nassert solution('''\n2\n4 7\n9 7\n14 17\n19 18\n''') == '1 2'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\\n1\"\nassert solution(\"4\") == \"2\\n1\"\nassert solution(\"5\") == \"syntax error\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == \"2\\n1\\n\"\nassert solution(\"2\\n4 8\\n9 7\\n14 17\\n19 18\") == \"1\\n2\"\nassert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\") == \"syntax error\"\n\"\"\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == \"1\\n2\\n\"\n\n\"\"\""
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n4 7\n9 8\n''') == '2 1'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n4 7\n9 8\n14 17\n19 18\n''') == '2'\nassert solution('''\n2\n4 7\n9 8\n14 17\n19 18\n''') == '1'\nassert solution('''\n2\n4 8\n9 7\n14 17\n19 18\n''') =='syntax error'\nprint('all tests passed')"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n4 7\n9 8\n14 17\n19 18\n''') == '2'\nassert solution('''2\n4 7\n9 8\n14 17\n19 18\n''') == '1'\nassert solution('''2\n4 7\n9 7\n14 18\n19 17\n''') =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"syntax error\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2 4 7\") == \"2 4 1\"\nassert solution(\"4 7\") == \"4 1\"\nassert solution(\"2 4 7 9 8\") == \"2 4 1 9 8\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\") == \"1\"\nassert solution(\"_ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\") == \"8640\"\nassert solution(\"_ _ _ _ _ _ _ 85 63 153\") == \"1\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\") == \"1\"\nassert solution(\"_ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ 170\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81') == '1'\nassert solution('_ 40 _ _ _ 12 60 _ 90 _') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _ 85 63 153') == '8640'\nassert solution('160 _ _ 136 _ _ _ _ _ 170') == '8640'"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\nSample Output 1:\n1\n\nSample Input 2:\n85 55 _ 99 51 _ _ _ _ _\n_ _ _ _ _ _ _ 85 63 153\nSample Output 2:\n1\n\nSample Input 3:\n160 _ _ 136 _ _ _ _ _ 170\n_ _ _ _ 120 _ _ 144 _ _\nSample Output 3:\n8640''') == '1'"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n90\\n22\\n6\\n') == '1'\nassert solution('85\\n55\\n99\\n51\\n') == '1'\nassert solution('160\\n136\\n120\\n144\\n170\\n') == '8640'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('\\n'.join([\"_ 90 22 _ 6 _ _ _ _ 81\", \"_ 40 _ _ _ 12 60 _ 90 _\", \"\"])) == \"1\"\nassert solution('\\n'.join([\"_ 90 22 _ 6 _ _ _ _ 81\", \"_ 40 _ _ _ 12 60 _ 90 _\", \"159\"])) == \"8640\"\nassert solution('\\n'.join([\"_ 90 22 _ 6 _ _ _ _ 81\", \"_ 40 _ _ _ 12 60 _ 90 _\", \"1575\"])) == \"many\"\nassert solution('\\n'.join([\"_ 90 22 _ 6 _ _ _ _ 81\", \"_ 40 _ _ _ 12 60 _ 90 _\", \"165\"])) == \"1\"\nassert solution('\\n'.join([\"_ 90 22 _ 6 _ _ _ _ 81\", \"_ 40 _ _ _ 12 60 _ 90 _\", \"1410\"])) == \"many\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\nassert solution('160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ _ _ _ 120 _ _\\n') == '8640'"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\""
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(t1) == '2'\nassert solution(t2) == '8'\nassert solution(t3) == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"8\"\nassert solution(\"10\") == \"24\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline().strip()\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '24'"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '8'\nassert solution('10') == '24'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"8\"\nassert solution(\"10\") == \"24\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"secretmessage\"\n) == \"essa\"\n\nassert solution(\n    \"treetreetreetree\"\n) == \"3\"\n\nassert solution(\n    \"oranges\"\n) == \"0\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''A=6;B=7;C=8;D=9;E=10;F=11;G=12;H=13;I=14;J=15;K=16;L=17;M=18;N=19;O=20;P=21;Q=22;R=23;S=24;T=25;U=26;V=27;W=28;X=29;Y=30;Z=31;a=32;b=33;c=34;d=35;e=36;f=37;g=38;h=39;i=40;j=41;k=42;l=43;m=44;n=45;o=46;p=47;q=48;r=49;s=50;t=51;u=52;v=53;w=54;x=55;y=56;z=57;123456789;123456789;''') == '3'"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('treetreetreetree') == '3'\nassert solution('oranges') == '0'\n\"\"\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('boot') == 'essa'\nassert solution('treetreetreetree') == '3'"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"3\"\nassert solution(\"treetreetreetree\") == \"0\"\nassert solution(\"oranges\") == \"0\""
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"3\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''boot\ntrunk\nstrip\n''') == 'boot'\nassert solution('''wood\ntreet\n''') == 'treet'\nassert solution('''oranges\napples\n''') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\nassert solution('oranges') == '0'\nassert solution('apples') == '0'\n\nprint('all tests passed')\n'''\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"3\"\nassert solution(\"treetreetreetree\") == \"0\"\nassert solution(\"apples\") == \"0\"\nassert solution(\"oranges\") == \"0\""
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n^>^\n..#\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n>^<^\") == \"2\"\nassert solution(\"4\\nv<^>\") == \"4\"\nassert solution(\"4\\n<<<\") == \"1\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"<<<\") == \"1\"\nassert solution(\"v<^>\") == \"2\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\nassert solution('3') == '1'"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('<<<') == '1'\nassert solution('<<<<<<') == '2'"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('5') == '1'\nassert solution('3') == '1'"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"3\"\nassert solution(\"2 3 0 2 9 2 3 0\") == \"3\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\nassert solution('''\n2\n7 0 0 20 10 3 0 10\n10 1 0 2 5 2 2 7\n''') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('2') == '3'\nassert solution('3') == '6'\n\"\"\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\n\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('2 2 0 2 9 2 3 0') == '3'\nassert solution('1 6 1 4 6 3 -1 -2') == '3'\nassert solution('3 5 50 55 8 1 -16 2') == '6'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"163.5274740179\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('40.0 0.0 0.0 0.0') == '163.5274740179'\nassert solution('0.0 1.0 4.0 1.0') == '3.7320508076'\nassert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('40.0 0.0 0.0 0.0') == '163.5274740179'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"0.0 1.0 4.0 1.0\") == \"3.7320508076\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"0.0 1.0 4.0 1.0\") == \"3.7320508076\""
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"163.5274740179\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"163.5274740179\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"168.7916512460\""
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == '168.7916512460'\nassert solution(\n    '60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == '163.5274740179'\nassert solution(\n    '0.0 1.0 4.0 1.0\\n1\\n0.0 0.0 4.0 0.0') == '3.7320508076'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == '163.5274740179'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n''') == '168.7916512460'\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\n''') == '163.5274740179'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == '168.7916512460'\n\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\n''') == '163.5274740179'\nassert solution('''0.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0\n''') == '3.7320508076'"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == '163.5274740179'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == '163.5274740179'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 5 3\n''') == 'rarity'\n\nassert solution('''\n9 8 1\n''') == 'canterlot'\n\nassert solution('''\n5 3 5\n''') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\""
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 5 3\n''') == 'rarity'\nassert solution('''\n9 8 1\n''') == 'canterlot'\nassert solution('''\n5 3 5\n''') =='madam'"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\"\n'''"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\n\"\"\"\n\n\n\nN, K, P = list(map(int, input().split()))\ns = input()"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\""
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Blue Ridge mountain road.') == 'Blue Ridge mountain road.'\nassert solution('Leaves, glowing in autumn sun, fall in Virginia.') == 'Leaves, glowing in autumn sun, fall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest- motivation high Programmers have fun!.\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. \") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables? \") == \"Who would know if we had too few syllables?\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('Blue Ridge mountain road.') == 'Blue Ridge mountain road.'\nassert solution('Leaves, glowing in autumn sun, fall in Virginia.') == 'Leaves, glowing in autumn sun, fall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!') == 'International contest- motivation high Programmers have fun!'"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International\\ncontest- motivation high\\nProgrammers have fun!'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!. \") == \"International contest-\\nmotivation high Programmers have fun!.\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!. I'm excited to win the contest!\") == \"International contest-\\nmotivation high Programmers have fun!.\\nI'm excited to win the contest!\""
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\n\nprint(solution(\"blue ridge mountain road. leaves, glowing in autumn sun, fall in Virginia.\"))\n\nprint(solution(\"International contest- motivation high Programmers have fun!\"))\n\nprint(solution(\"Programmers have fun!.\"))\n\"\"\""
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!. \") == \"International\\ncontest- motivation high\\nProgrammers have fun!\""
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest- motivation high Programmers have fun!'\nassert solution('Blah') == 'Blah'"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Blue Ridge mountain road.') == 'Blue Ridge mountain road.'\nassert solution('Leaves, glowing in autumn sun, fall in Virginia.') == 'Leaves, glowing in autumn sun, fall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest- motivation high Programmers have fun!."
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'ThoreH'\nassert solution('2') == 'Thore sucks'\nassert solution('3') == 'Thore is awesome'\nassert solution('4') == 'ThoreH'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nThoreHusfeldt\nThoreTiemann\n''') == 'Thore sucks'\n\nassert solution('''\nThoreHusfeldter\nThoreTiemann\n''') == 'Thore is awesome'\n\nassert solution('''\nThoreHusfeldter\nThoreTiemann\n''') == 'Thore is awesome'\n\nassert solution('''\nThoreTiemann\nThoreHusfeldt\n''') == 'Thore is awesome'\n\nassert solution('''\nThoreTiemann\nJohanSannemo\n''') == 'Thore sucks'"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nThoreTiemann\\nThoreHusfeldt') == 'ThoreHusfeldt'\nassert solution('1\\nThoreTiemann\\nJohanSannemo') == 'ThoreHusfeldt'\nassert solution('1\\nThoreHusfeldt\\nThoreHusfeldt') == 'ThoreHusfeldt'"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'Thore'\nassert solution('2') == 'Thore sucks'\nassert solution('3') == 'Thore is awesome'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\nThoreTiemann\nThoreHusfeldt\nThoreHusfeldt''') == 'ThoreHusfeldt'\nassert solution('''4\nThoreHusfeldt\nThoreHusfeldt\nJohanSannemo\nThoreTiemann''') == 'ThoreHusfeldt'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"ThoreH\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\nThoreTiemann\\nThoreHusfeldt\") == \"ThoreH\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(None) == ''\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n    ThoreTiemann\n    ThoreHusfeldt\n    ThoreHusfeldter''') == 'Thore is awesome'\nassert solution('''2\n    ThoreHusfeldt\n    ThoreHusfeldter''') == 'Thore sucks'\nassert solution('''1\n    ThoreHusfeldter''') == 'Thore sucks'\nassert solution('''1\n    ThoreHusfeldter''') == 'Thore sucks'\nassert solution('''5\n    ThoreHusfeldter\n    ThoreHusfeldter\n    ThoreHusfeldter\n    ThoreHusfeldter\n    ThoreHusfeldter''') == 'Thore sucks'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\nThoreTiemann\nThoreHusfeldt\n''') == 'ThoreH'\nassert solution('''2\nThoreHusfeldter\nThoreHusfeldt\n''') == 'Thore sucks'\nassert solution('''3\nThoreHusfeldt\nJohanSannemo\n''') == 'Thore is awesome'\nprint(\"all tests passed\")\n'''"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('*') == '33'\nassert solution('P*P') == '6'\nassert solution('L*R') == '25'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\nprint(solution(input()))\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"LR\") == \"5\"\nassert solution(\"RR\") == \"3\"\nassert solution(\"P*P\") == \"6\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''P*P\n    L*R\n    L*R\n    L*P\n    R*P\n    P*P\n    *P*\n    R*P''') == \"10\"\n\nassert solution('''*\n    P*P\n    L*R\n    L*R\n    L*P\n    R*P\n    P*P\n    *P*\n    R*P''') == \"22\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\n\"\"\"\nfrom typing import Dict\nfrom collections import defaultdict\nimport math\nimport heapq\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"6\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nnot\noskar is poptart\nlukas is smart\n''') == 'wait what?'\n\nassert solution('''\nherp\noskar is derp\nderp is herp\nherp is herp\n''') == 'yes'\n'''\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n''') == 'yes'\n\nassert solution('''\noskar not lukas\noskar is poptart\nlukas is smart\n''') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == 'yes'\nassert solution('3') == 'wait what?'\nassert solution('2') == 'wait what?'\nassert solution('1') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'yes', \"Failed sample #1\"\nassert solution('2') == 'wait what?', \"Failed sample #2\"\nassert solution('3') == 'yes', \"Failed sample #3\"\n\n\"\"\""
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'yes'\nassert solution('2') == 'wait what?'\nassert solution('3') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\noskar not lukas\noskar is poptart\nlukas is smart\n''') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\nherp is derp\nderp is herp\nherp is herp\nderp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\noskar is moo\n''') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\nherp is derp\\n') == 'yes'\nassert solution('2\\nderp is herp\\n') == 'wait what?'\nassert solution('3\\noskar not lukas\\n') == 'yes'"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\nherp is derp\\nderp is herp\\nherp is herp\") == \"yes\", \"Again is the same\"\nassert solution(\"4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\\nSample Output 2:wait what?\") == \"wait what?\", \"Again\"\nassert solution(\"3\\nmoo not foo\\noskar is smart\\nlukas is poptart\") == \"wait what?\", \"Again\""
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('\\n'.join([\n    '5',\n    'AACCMMAA',\n    'ACA',\n    'MM',\n    'ACMAA',\n    'AA',\n    'A',\n    ])) == '1 4', solution('\\n'.join([\n    '5',\n    'AACCMMAA',\n    'ACA',\n    'MM',\n    'ACMAA',\n    'AA',\n    'A',\n    ]))\nassert solution('\\n'.join([\n    '3',\n    'ACMA',\n    'ACM',\n    'ACA',\n    'AMA',\n    ])) == 'impossible', solution('\\n'.join([\n    '3',\n    'ACMA',\n    'ACM',\n    'ACA',\n    'AMA',\n    ]))\n'''\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\nSample Output 1:\n1 4\nMM\nA\nAA\nACA\nACMAA\n\nSample Input 2:\n3\nACMA\nACM\nACA\nAMA\nSample Output 2:\nimpossible\n\nSample Input 3:\n1\nAM\nMA\nSample Output 3:\nimpossible\n''') == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\\n'''"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1 4'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1 2'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\nAACAAA\nAA\nAACAAA\nAA\nAACAAA\n''') == '4 1 4 1 4 1'\nassert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n''') == '1 4 4 1 4 1'\nassert solution('''3\nACMA\nACM\nACA\nAMA\nSample Output 3:\nimpossible\n''') == 'impossible'\nassert solution('''1\nAM\n''') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n\"\"\") == \"1 4\"\nassert solution(\"\"\"\n3\nACMA\nACM\nACA\nAMA\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n4\nAA\nAA\nAA\nAA\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n7\nAAGAAGAAG\nACGAAACAA\nACGAAAACG\nACGAAACAA\nAAGAAGAAG\nACGAAACAA\nACGAAACAA\n\"\"\") == \"1 4\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2178') == '2178'\nassert solution('3') == 'impossible'\nassert solution('20') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\nACCCCCCAAAAAA\nACCCCCCAAAAAA\nACCCCCCAAAAAA\nACCCCCCAAAAAA\nACCCCCCAAAAAA\n''') == '4 4'\nassert solution('''\n1\nACCCCCCAAAAAA\nACCCCCCAAAAAA\n''') == 'impossible'\nassert solution('''\n3\nACMA\nACM\nAC\n''') == '1 2'\n\nstdin = '''\n5\nACCCCCAAAAAA\nACCCCCCAAAAAA\nACCCCCCAAAAAA\nACCCCCCAAAAAA\nACCCCCCAAAAAA\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"4 1\"\nassert solution(\"3\") == \"impossible\""
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n''') == '1 4\\nMM\\nA\\nAA\\nACA\\nACMAA\\n'\n\nassert solution('''3\nACMA\nACM\nACA\n''') == 'impossible\\n'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.9029850746'\nassert solution('''\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2\\n') == '124'\nassert solution('2 4 1\\n1 0.5 5\\n') == '3'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == \"124\"\nassert solution(sample_input_2) == \"3\"\nassert solution(sample_input_3) == \"18.9029850746\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 1') == '3'\nassert solution('10 20 3') == '18.9029850746'\nassert solution('100 111 5') == '124'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(open('test_input_1.txt', 'r').read()) == '4.99999'\nassert solution(open('test_input_2.txt', 'r').read()) == '13.99999'\nassert solution(open('test_input_3.txt', 'r').read()) == '31.99999'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 4 1\n1 0.5 5\n''') == '3'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124'\n\nassert solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 20 3') == '18.9029850746'\nassert solution('2 4 1') == '3'\nassert solution('1 0.5 5') == '2'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"18.9\", solution()\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 1') == '3'\nassert solution('10 20 3') == '18.9'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"5 22\") == \"4 3 4 2\""
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n2 1 2\n''') == '2 1 2'\nassert solution('''2 1\n''') == '1'\nassert solution('''5 22\n''') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"5 22\") == \"4 3 4 2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(['5', '22']) == '4 3 4 2'"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"5 22\") == \"4 3 4 2\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3\n2 1 2''') == '2 1 2'\nassert solution('''5 22\n4 3 4 2''') == '4 3 4 2'\nassert solution('''7 8\n5 3 5 2 3 5''') == '5 3 5 2 3 5'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4') == '2'\nassert solution('7 6') == '2'\nassert solution('7 5') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4') == '2'\nassert solution('7 6') == '2'\nassert solution('5 6') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 4\n1 2\n2 3\n3 4\n2 4''') == \"2\"\nassert solution('''7 6\n1 2\n2 3\n3 4\n5 6\n6 7\nSample Output 4:\n0\n''') == \"0\"\nprint(solution(input()))\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 4\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"2 4\"\n) == \"2\"\n\nassert solution(\n    \"7 6\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"2 5\\n\"\n    \"6 3\\n\"\n    \"7 2\\n\"\n    \"3 4\\n\"\n) == \"2\"\n\nassert solution(\n    \"7 5\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\"\n    \"5 6\\n\"\n    \"6 7\\n\"\n) == \"0\"\n\nassert solution(\n    \"10000000 999 999\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\"\n    \"5 6\\n\"\n    \"6 7\\n\"\n) == \"999999\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7 6\") == \"2\"\nassert solution(\"7 5\") == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 4') == '2'\nassert solution('7 6') == '2'\nassert solution('7 5') == '0'\nassert solution('2 4') == '2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 5') == '1'\nassert solution('7 5') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '2'\nassert solution('4 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n') == '0'\nassert solution('10 20\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n') == '6'\nassert solution('8 12\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n') == '6'\nassert solution('10 30\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n') == '6'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 4\n1 2\n1 3\n3 4\n2 4''') == '2'\nassert solution('''7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\nSample Output 3:\n0''') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"7 6\") == \"2\"\nassert solution(\"7 5\") == \"0\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''20 0\n1.00 0.10\n''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00\n''') == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 0') == '20.00000000'\nassert solution('-10 10') == '3.14159265'\nassert solution('0 20') == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\nassert solution('''0 20\n1.00 0.10''') == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n20 0\n1.00 0.10\n''') == '20.00000000'\nassert solution('''\n-10 10\n10.00 1.00\n''') == '3.14159265'\nassert solution('''\n0 20\n1.00 0.10\n''') == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"20 0\n1.00 0.10\"\"\") == \"20.00000000\"\nassert solution(\"\"\"-10 10\n10.00 1.00\"\"\") == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''20 0\n1.00 0.10\n''') == '20.00000000'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('20 0') == '20.00000000'\nassert solution('1.00 0.10') == '20.00000000'\nassert solution('-10 10') == '3.14159265'\nassert solution('10.00 1.00') == '3.14159265'\nassert solution('0 20') == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"20 0\n1.00 0.10\n\"\"\") == \"20.00000000\"\nassert solution(\n\"\"\"-10 10\n10.00 1.00\n\"\"\") == \"3.14159265\"\nassert solution(\n\"\"\"10 0\n10.00 1.00\n\"\"\") == \"28.26445910\""
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''20 0\n1.00 0.10\n''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00\n''') == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"-10 10\") == \"3.14159265\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '50'\nassert solution('6') == '0'"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 100\n4 70\n3 70\n''') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 100\n1 100\n''') == '170'\nassert solution('''\n4\n2 100\n1 100\n4 70\n3 70\n2 80\n''') == '150'\nassert solution('''\n3\n2 120\n3 50\n2 80\n''') == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 100 1 100 3 70') == '170'\nassert solution('3 2 120 3 50 2 80') == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"170\"\nassert solution(\"4\") == \"150\"\n\"\"\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n2 100\n1 100\n4 70\n3 70\n''') == '170'\nassert solution('''2\n2 120\n3 50\n2 80\n''') == '150'\nassert solution('''\n''') == '0'\nassert solution('''\n''') == '0'"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n2 100\n1 100\n4 70\n3 70\n''') == '170'\nassert solution('''\n3\n2 120\n3 50\n2 80\n''') == '150'\nassert solution('''\n7\n1 1\n4 1\n5 1\n6 1\n3 1\n5 1\n1 1\n''') == '6'\nassert solution('''\n5\n1 1\n4 1\n5 1\n6 1\n3 1\n5 1\n2 1\n''') == '4'"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n2 100\n1 100\n4 70''') == '170'\nprint(solution('''4\n2 100\n1 100\n4 70\n3 70\n2 80'''))"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n2 100\n1 100\n4 70\n3 70\n''') == '170'\nprint('Tests passed!')"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == \"2\"\nassert solution('''2 2\n2 2\n2 2\n2 2''') == \"2\"\nprint('First puzzle is complete!')"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 3\n1 2\n1 3\n2 4\n''') == '2'\nassert solution('''\n6 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n''') == '5'\n\n''')\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '5'\nassert solution('6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '5'\nassert solution('10 10\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == '8'\nassert solution('12 12\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == '9'\nassert solution('6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '2'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 6\") == \"5\"\nassert solution(\"10 10\") == \"9\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == \"2\"\nassert solution('6 6') == \"5\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '5'\nassert solution('10 20\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n7 8\\n7 9\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n') == '11'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '5'\nassert solution('2 3') == '2'\nassert solution('10 10') == '0'"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 6') == \"5\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0.0446429\"\nprint(solution())\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0.5'\nassert solution('8') == '0.0446429'\n\n'''\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n\"\"\") == \"0.5\"\nassert solution(\"\"\"\n8\n6\n1 0 2 3 0 1\n7 1 2 3 4 5 6 7\n1 0\n2 0 2\n2 0 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\nSample Output 3:\n0.0246740\n\"\"\") == \"0.0246740\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'\nprint(solution(input()))\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n1 0\n''') == '0.5'\nassert solution('''\n8\n6\n1 0 2 3 0 1\n7 1 2 3 4 5 6 7\n1 0\n2 0 3\n2 0 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1\\n1\\n2 1 2\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0') == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1\\n0\\n2 1 2\\n1 0') == '0.5'\nassert solution('5\\n4\\n3 1 2 3\\n0\\n1 0\\n2 0\\n2 0\\n0\\n1 0\\n0\\n1 0') == '0.5'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"0.5\"\nassert solution(\"8\") == \"0.0446429\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3 4 3\"\nassert solution(\"2\") == \"1 6 1\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 3 2 1') == \"3\\n1 6 1\"\nassert solution('6') == \"IMPOSSIBLE\"\n'''\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2 3\"\nassert solution(\"5\") == \"3 4\"\nassert solution(\"3\") == \"2 3\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n6\n1 2 3 3 2 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n1 2 1 2\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n1\n2 3\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n5\n1 2 1 2 1\n\"\"\") == \"1 2 3 3\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"3\") == \"1 2 1\"\nassert solution(\"5\") == \"1 2 1 2 3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1 2 5\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"1 2 3 3 2 1\") == \"3 6 1\"\nassert solution(\"2 5 2\") == \"3 4 3\"\nprint(solution(\"1 2 3 3 2 1\"))\nprint(solution(\"2 5 2\"))\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 3 2 1\\n') == '3\\n1 6 1\\n2 5 2\\n3 4 3'\nassert solution('4\\n1 2 1 2\\n') == 'IMPOSSIBLE'\nassert solution('6\\n1 2 3 3 2 1\\n') == '3\\n1 6 1\\n2 5 2\\n3 4 3'\nassert solution('6\\n1 2 3 3 2 1\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 3 3 2\n''') == '3'\nassert solution('''8\n1 2 3 4 5 6 7\n8\n3 6 8\n7 4 5 2\n4 3 5 1\n5 4 3 1\n6 5 4 2\n6 7 6 3\n7 7 7 2\n''') == 'IMPOSSIBLE'\nassert solution('''10\n1 2 3 4 5 6 7 8 9\n10\n1 10 1 5\n2 9 2 6\n3 8 8 7\n4 7 7 5\n5 6 6 4\n6 5 5 4\n7 4 4 3\n7 5 4 3\n7 6 5 4\n7 7 7 4\n7 8 7 3\n7 9 7 2\n''') == '5'\nassert solution('''4\n1 2 1 2\n2 1 2 2\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\"\nprint('Tests passed')\n\"\"\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '1 2 3 3 2 1',\n    ) == '3'\n\nassert solution(\n    '1 2 1 2',\n    ) == '2 5 2'\n\nassert solution(\n    '1 2 1 2',\n    ) == 'IMPOSSIBLE'"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2\n1 100\n1 1''') == '1 2 100'\nassert solution('''5 10 20 30 40 50\n2 28 27''') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1 2'\nassert solution('2') == '1 100'\nassert solution('5 10 20 30 40 50') == '10 20 28 27 30 40 50'"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n1 100\n1 1\n''') == '1 2 100'\nassert solution('''\n3\n1 2\n1 100\n1 1\n''') == '1 2 100'\nassert solution('''\n5\n10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n2 12 13 14 15 16 17 18 19 20\n3 30 31 32 33 34 35 36 37 38 39\n4 40 41 42 43 44 45 46 47 48 49\n5 50 51 52 53 54 55 56 57 58 59\n6 60 61 62 63 64 65 66 67 68 69\n7 70 71 72 73 74 75 76 77 78 79\n8 80 81 82 83 84 85 86 87 88 89\n9 90 91 92 93 94 95 96 97 98 99\n10 100 101 102 103 104 105 106 107 108\n11 110 111 112 113 114 115 116 117 118\n12 120 121 122 123 124 125 126 127 128\n13 130 131 132 133 134 135 136 137 138\n14 140 141 142 143 144 145 146 147 148\n15 150 151 152 153 154 155 156 157 158\n16 160 161 162 163 164 165 166 167 168\n17 170 171 172 173 174 175 176 177 178\n18 180 181 182 183 184 185 186 187 188\n19 190 191 192 193 194 195 196 197 198\n20 200 201 202 203 204 205 206 207 208\n21 210 211 212 213 214 215 216 217 218\n22 220 221 222 223 224 225 226 227 228\n23 230 231 232 233 234 235 236 237 238\n24 240 241 242 243 244 245 246 247 248\n25 250 251 252 253 254 255 256 257 258\n26 270 271 272 273 274 275 276 277 278\n27 280 281 282 283 284 285 286 287 288\n28 290 291 292 293 294 295 296 297 298\n29 300 301 302 303 304 305 306 307 308\n30 310 311 312 313 314 315 316 317 318\n31 330 331 332 333 334 335 336 337 338\n32 340 341 342 343 344 345 346 347 348\n33 350 351 352 353 354 355 356 357 358\n34 360 361 362 363 364 365 366 367 368\n35370 371 372 373 374 375 376 377 378\n3680 380 381 382 383 384 385 386 387\n3890 390 391 392 393 394 395 396 397 398\n3980 400 401 402 403 404 405 406 407 408\n4100 410 411 412 413 414 415 416 417 418\n4200 420 421 422 423 424 425 426 427 428\n4300 430 431 432 433 434 435 436 437 438 439\n4400 440 441 442 443 444 445 446 447 448 449\n4500 450 451 452 453 454 455 456 457 458 459\n4600 460 461 462 463 464 465 466 467 468 469 4\n4700 470 471 472 473 474 475 476 477 478 479\n4800 480 481 482 483 484 485 486 487 488 489\n4900 490 491 492 493 494 495 496 497 498 499\n4999 500 501 502 503 504 505 506 507 508 509\n5100 510 511 512 513 514 515 516 517 518 519\n5200 520 521 522 523 524 525 526 527 528 529\n5300 530 531 532 533 534 535 536 537 538 539\n5400 540 541 542 543 544 545 546 547 548 549\n5500 550 551 552 553 554 555 556 557 558 559\n5600 560 561 562 563 564 565 566 567 568 569\n5700 570 571 572 573 574 575 576 577 578 579\n5800 580 581 582 583 584 585 586 587 588 589\n5900 590 591 592 593 594 595 596 597 598 599\n5999 600 601 602 603 604 605 606 607 608 609\n6100 610 611 612 613 614 615 616 617 618 619\n6200 620 621 622 623 624 625 626 627 628 629\n6300 630 631 632 633 634 635 636 637 638 639\n6400 640 641 642 643 644 645 646 647 648 649\n6500 650 651 652 653 654 655 656 657 658 659\n6600 660 661 662 663 664 665 666 667 668 669\n6700 670 671 672 673 674 675 676 677 678 679\n6800 680 681 682 683 684 685 686 687 688 689\n6900 690 691 692 693 694 695 696 697 698 699\n6999 70000 70001 70002 70003 70004 70005 70006\n70007 70008 70009 7001a 7001b 7001c 7001d 7001e\n7001f 70020 70021 70022 70023 70024 70025 70026\n70027 70028 70029 70030 70031 70032 70033 70034\n70035 70036 70037 70038 70039 70040 70041 70042\n70043 70044 70045 70046 70047 70048 70049 70050\n70051 70052 70053 70054 70055 70056 70057 70058\n70059 70060 70061 70062 70063 70064 70065 70066\n70067 70068 70069 70070 70071 70072 70073 70074\n70075 70076 70077 70078 70079 70080 70081 70082\n70083 70084 70085 70086 70087 70088 70089 70090\n70091 70092 70093 70094 70095 70096 70097 70098\n70099 70100 7101 0101 0102 0103 0104 0105 0106\n0107 0108 0109 0110 0111 0112 0113 0114 0115 0116\n0117 0118 0119 0120 0121 0122 0123 0124 0125 0126\n0127 0128 0129 0130 0131 0132 0133 0134 0135 0136\n0137 0138 0139 0140 0141 0142 0143 0144 0145 0146\n0147 0148 0149 0150 0151 0152 0153 0154 0155 0156\n0157 0158 0159 0160 0161 0162 0163 0164 0165 0166\n0167 0168 0169 0170 0171 0172 0173 0174 0175 0176\n0177 0178 0179 0180 0181 0182 0183 0184 0185 0186\n0187 0188 0189 0190 0191 0192 0193 0194 0195 0196\n0197 0198 0199 0200 0201 0202 0203 0204 0205 0206\n0207 0208 0209 0210 0211 0212 0213 0214 0215 0216\n0217 0218 02"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2') == '1 2'\nassert solution('3\\n1 2') == '1 2'\nassert solution('3\\n1 2') == '1 2'\nassert solution('3\\n1 2') == '1 2'\nassert solution('3\\n1 2') == '1 2'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n1 100\\n1 1') == '1 2 100\\n'\n\"\"\"\n\nimport itertools\nimport collections"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\n\"\"\"\n\nfrom typing import List\nimport sys"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n1 100\n1 1\n''') == '1 2 100'\nassert solution('''\n3\n1 2\n1 100\n1 1\n''') == '1 2 100'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2') == '1 2'\nassert solution('3\\n1 2\\n1 100') == '1 2 100'\nassert solution('4\\n1 2\\n1 1\\n1 1') == '1 2 1 1'\nassert solution('5\\n1 2\\n1 100\\n1 1\\n1 1') == '1 2 100 1 1'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '10 20 28 27 30 40 50'\nassert solution('3') == '1 2 100'"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2\n1 100\n1 1\n''') == '1 2 100'\nassert solution('''\n2\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0\\n\") == \"2600\"\nassert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\") == \"506\"\nassert solution(\"2\\nAB 1 1\\nAB 2 1\\n\") == \"2600\""
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0\nAB 1 1\nAC 2 1\nBC 2 1\nSample Output 2:\n506\n''') == '2600'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nAB 1 1\\nAC 2 1\\nBC 2 1') == '2600'"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"2\") == '2600'\nassert solution(\"3\") == '506'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0\\n') == '2600'\nassert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '506'"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '2600'\nassert solution('2') == '506'\nassert solution('3') == '5404'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '506'\nassert solution('50\\n' + '\\n'.join(['AB' + str(i) +'1' for i in range(1,50)]) + '\\n' + '\\n'.join(['AC' + str(i) +'1' for i in range(1,50)]) + '\\n' + '\\n'.join(['BC' + str(i) +'1' for i in range(1,50)])) == '2600'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0\\n') == '2600'\nassert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '506'\nassert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '506'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n\") == \"506\"\nassert solution(\"4\\nA 1 1\\nB 2 2\\nC 2 2\\nD 3 3\\nE 4 4\\nF 5 5\\nG 6 6\\n\") == \"134\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''0\nA 1\nB 1\nC 1\nD 1\nE 1\nF 1\nG 1\nH 1\nI 1\nJ 1\nK 1\nL 1\nM 1\nN 1\nO 1\nP 1\nQ 1\nR 1\nS 1\nT 1\nU 1\nV 1\nW 1\nX 1\nY 1\nZ 1''') == '2600'\nassert solution('''3\nAB 1 1\nAC 2 1\nBC 2 1\nCD 3 1\nEF 4 1\nFG 5 1\nHI 6 1\nIJ 7 1\nKL 8 1\nMK 9 1\nNL 10 1\nOP 11 1\nPT 12 1\nQM 13 1''') == '506'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\nassert solution(\"()))()\") == \"possible\"\nassert solution(\"((()))\") == \"possible\"\nassert solution(\"((((()))))\") == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(ex1) == 'possible'\nassert solution(ex2) == 'impossible'\nassert solution(ex3) == 'possible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\nassert solution(\"(\") == \"impossible\"\nassert solution(\"())))((()(\" ) == \"impossible\"\nassert solution(\"()(())\") == \"possible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('()))') == 'possible'\nassert solution('(()))') == 'impossible'"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('()))' == 'possible'\nassert solution(')))(' == 'impossible'"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"()))\" ) == \"possible\"\nassert solution(\"))((\" ) == \"impossible\""
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"()))\"\n    ) == \"possible\"\nassert solution(\n    \"()))\"\n    ) == \"impossible\""
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('(())') == 'possible'\nassert solution('(()())') == 'possible'\nassert solution('(()())()') == 'impossible'\nassert solution('(()))((()') == 'impossible'\nassert solution('(((()))((((()))))') == 'impossible'"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n(\n)\n\"\"\") == \"possible\"\nassert solution(\n\"\"\"\n(()))\n\"\"\") == \"possible\"\nassert solution(\n\"\"\"\n)))(\n\"\"\") == \"impossible\"\nassert solution(\n\"\"\"\n()))\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([\n    2, 3,\n    1, 1800, 9000, 1800,\n    1, 2000, 9200, 1600,\n    1, 2200, 9400, 1400,\n]) == '1800', solution([\n    2, 3,\n    1, 1800, 9000, 1800,\n    1, 2000, 9200, 1600,\n    1, 2200, 9400, 1400,\n])\nassert solution([\n    2, 2,\n    1, 1800, 3600, 1800,\n    1, 1900, 3600, 1600,\n    1, 2200, 9400, 1400,\n]) == 'impossible', solution([\n    2, 2,\n    1, 1800, 3600, 1800,\n    1, 1900, 3600, 1600,\n    1, 2200, 9400, 1400,\n])\nassert solution([\n    2, 2,\n    1, 1800, 3600, 1800,\n    1, 1900, 3600, 1600,\n    1, 2200, 9400, 1400,\n]) == 'impossible', solution([\n    2, 2,\n    1, 1800, 3600, 1800,\n    1, 1900, 3600, 1600,\n    1, 2200, 9400, 1400,\n])\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n1 1800 9200 1600\\n1 1900 9400 1400') == '1800'\nassert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600') == 'impossible'"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == '1800'\nprint('All test cases passed!')"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n') == '1800'\nassert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n') == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == '1800'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 10\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\nSample Input 3:\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\nSample Output 3:\n1800\n''') == \"1800\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == '1800'\n\nassert solution('''\n1 2\n1 1800 3600 1800\n1 1900 3600 1600\n''') == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1800\"\nassert solution(\"2 2\") == \"impossible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == '1800'\nassert solution('''\n4 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n1 30000 9100 1606\n''') == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([1, 2, 1]) == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\nA1-B2 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2''') == 'A1-B2 A2-C2 B2-C1 A3-B3'\nassert solution('''2 3\nA1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B2 B1-C1''') == 'A1-B1 A2-C2 B2-C1 A3-B3'\nprint('Congratulations! All test cases passed!')"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n''') == 'A1-B2 B1-A2 A3-B3\nassert solution('''\n2 3\n''') == 'A1-B1 A2-C2 B2-C1\nassert solution('''\n3 4\n''') == 'A1-B1 A2-C2 A3-D3 B2-D2 C3-D1'\n''')\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n''') == 'A1-B2 B1-A2 A3-B3\nassert solution('''\n2 3\n''') == 'A1-B1 A2-C2 B2-C1\nassert solution('''\n3 2\n''') == 'A1-B1 A2-C2 B2-C1'\nassert solution('''\n5 5\n''') == 'A1-B1 A2-C2 A3-D3 A4-D4 B1-C1 B2-D2 C3-D3 C4-D4 B2-C2 D1-C1 D2-C2 C1-D1 D3-C3 D4-C4'\n\n'''"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\n3 4 5''') == 'A1-B2 A2-C2 B2-C1 A3-B3'\nassert solution('''2 2\n2 2''') == 'A1-B1 A2-C2 B2-C1'"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\nassert solution('4 2') == 'A1-B1 A2-C1 A3-B2 B2-C2 C3-B3'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B2 B1-C1'\nassert solution('3 2') == 'A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2\n3 3''') == '1-2 1-3 1-4 2-3 2-4 2-5 3-4 3-5 4-5 5-4'''\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2\nA1-B2\nA2-C2\nA3-B3''') == 'A1-B2 A2-C2 A3-B3'\nassert solution('''2 3\nA1-B1\nA2-C2\nA3-B3''') == 'A1-B1 A2-C2 A3-B3'\nassert solution('''1 3\nA1-C1\nA2-B1\nA3-B2''') == 'A1-C1 A2-B1 A3-B2'"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2\n1 2 1\n''') == 'A1-B2 A2-C2 B2-C1'\nassert solution('''2 3\n1 2 1\n''') == 'A1-B1 A2-C2 B2-C1'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 2\n3 2\"\"\") == \"\"\"A1-B2 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\"\"\", \"\"\"3 3\n3 3\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B2 B1-C2\"\"\", \"\"\"3 2\n3 2\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"3 3\n3 3\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"3 3\n3 3\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B2-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B1-C2\nA1-C2 A2-B1 B1-C1\nA1-B2 A2-C1 B1-C2\"\"\", \"\"\"5 5\n5 5\"\"\") == \"\"\"A1-B1 A2-C2 B2-C1\nA1-C1 A2-B1 B"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n..\n..\n''') == '7'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '7'\nassert solution('4 4') == '9'\nassert solution('1 1') == '1'"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 2\n..\n..\n.X.\n.XX\n.X.\nSample Output 2:\n5\n''') == '7'\nassert solution('''\n4 4\n.XX\nX..\n.XX\n.XX\n''') == '10'\nassert solution('''\n5 5\n.XX\n.XX\n.XX\n.XX\n.XX\nSample Output 2:\n8\n''') == '13'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"4 4\") == \"9\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\n..\\n..') == '7'\nassert solution('4 4\\nX.XX\\nX..X\\n..X.\\n..XX\\n') == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 2\n..\n..\n\"\"\") == \"7\"\nassert solution(\"\"\"\n4 4\nX.XX\nX..X\n..X.\n..XX\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n..\n..\n''') == '7'\nassert solution('''\n4 4\nX.XX\nX..X\n..X.\n..XX\n''') == '9'"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"7\""
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n.X.\\nX..\") == '7'\nassert solution(\"4 4\\nXX.XX\\nX..X\\n..X.X\\n..XX.\") == '9'"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n.\\n.\\n\") == \"1\"\nassert solution(\"4 4\\n.XX\\n..XX\\n..XX\\n\") == \"4\"\nprint(solution(*[*map(str, sys.stdin.readlines())]) + '\\n')\n\n\n\"\"\""
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\nassert solution('''4\n2 2 2 2 2\n4 4 2 2 4\n4 4 4 4 4\n4 4 4 2 2\n''') == '100'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"600\"\nassert solution(input_stdin=['1', '0', '0', '1', '100']) == \"100\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\\n\") == \"600\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\nassert solution('''\n4 1 2 2 100\n2 1 0 2 500\n''') == '-1'"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3 2 2 100\n1 1 1 1 500\n2 0 2 1 100''') == '600'\nassert solution('''2\n10 0 2 1\n5 0 8 1''') == '100'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3 2 2 100\n1 1 1 1 500\n\"\"\") == \"600\"\nassert solution(\"\"\"\n3 3 2 2 100\n1 1 1 1 500\n\"\"\") == \"500\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '400'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\nassert solution('''\n2\n1 1 1 1 500\n''') == '100'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('11') == '0'"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '6'\nassert solution('7') == '0'\nassert solution('11') == '0'\nassert solution('22') == '4'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n361\n''') == '3'\nassert solution('''2\n11\n''') == '0'\nassert solution('''1\n121\n''') == '1'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(samples) == \"1\""
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"7\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n9') == '3'\nassert solution('5\\n20') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"0\"\nassert solution(\"212\") == \"1\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n11 5\\n') == 'cancel road trip'"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"10\"\nassert solution(\"3 10\\n2 100\\n1 10\\n11 5\") == \"cancel road trip\"\nassert solution(\"5 10\\n1 5\\n1 10\\n1 5\\n1 10\") == \"cancel road trip\"\nassert solution(\"5 10\\n1 5\\n1 10\\n1 5\\n1 5\") == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 10') == '10'\nassert solution('3 10') == 'cancel road trip'\nassert solution('3 10') == 'cancel road trip'\nassert solution('3 10') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 5\n2 100\n1 10''') == '10'\n\nassert solution('''3 10\n2 100\n1 10\n11 5\nSample Output 3:\ncancel road trip''') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n2 10\n2 100\n1 10\n11 5\n''') == '10'\n\nassert solution(\n'''\n3 10\n2 100\n1 10\n11 5\n''') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) in [\"10\", \"cancel road trip\"]\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3,10,2,100,1,10,11,5]) == '10'\nassert solution
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3, 10, 2, 100, 1, 10, 11, 5]) == \"10\"\nassert solution([3, 10, 2, 100, 1, 10, 11, 5]) == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 10\n2 100\n1 10\n11 5\n\"\"\") == \"10\"\nassert solution(\"\"\"\n3 10\n2 100\n1 10\n13 5\n\"\"\") == \"cancel road trip\"\nprint(solution(input()))\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'cancel road trip'\nassert solution('2') == '10'"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(samples.SAMPLE_1) == \"1 8 9 9 100 101 108 109 109\"\nassert solution(samples.SAMPLE_2) == \"0 7 8 11 15 16 19\"\nassert solution(samples.SAMPLE_3) == \"0\"\nassert solution(samples.SAMPLE_4) == \"0\""
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 9') == '1 8 9 9 100 101 108 109 109'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    4 9\n    2 8\n    1 1\n    3 4\n    5 100\n    ''') == '1 8 9 9 100 101 108 109 109'"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n2 3\n2 4\n''') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n4 9\n2 8\n1 1\n3 4\n5 100\n'''\n) == '1 8 9 9 100 101 108 109 109'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 9\") == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\"5 7\") == \"0 7 8 11 15 16 19\"\nassert solution(\"9 5\") == \"0 0 0 0 0 0 0 0 0 0\""
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 9\") == \"1 8 9 9 100 101 108 109 109\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 9\") == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\"5 7\") == \"0 7 8 11 15 16 19\""
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 7') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 6') == '5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 1001 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1001 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 10"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == \"1\"\nassert solution('''\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == \"1\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 2 2\n0 0 1\n-3 3\n0 0 1\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n0 3\n3 0\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 3 3\") == \"1\", \"Wrong!\"\nassert solution(\"0 0 1\") == \"1\", \"Wrong!\"\nassert solution(\"3 3\") == \"3\", \"Wrong!\"\nassert solution(\"-3 3\") == \"1\", \"Wrong!\"\nassert solution(\"3 -3\") == \"1\", \"Wrong!\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '3'"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\nSample Output 3:\n1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n\"\"\") == \"3\""
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '3'\nassert solution('1 6 3') == '2'\nassert solution('1 7 3') == '3'\nassert solution('1 8 3') == '4'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '3'"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"4\\n4\\n2\\n0\\n0\\n\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4\\n4\\n2\\n2\\n0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10000') == '4\\n4\\n2\\n2\\n0'\nassert solution('5 9') == '2\\n0\\n2\\n2\\n0'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3\\n10 9\\n0\") == \"0\\n1\\n1\\n0\"\nassert solution(\"2 1\\n2 3\\n0\") == \"1\\n1\\n0\""
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1') == '4'\nassert solution('5\\n1') == '4'\nassert solution('10\\n1') == '2'\nassert solution('8\\n1') == '0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 10000\n1\n1\n1\n1\n1''') == '4'\nassert solution('''5 9\n1\n1\n10\n1\n9''') == '2'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 10000\n1\n1\n1\n1\n1\n''') == '4'\nassert solution('''\n5 9\n1\n1\n10\n1\n9\nSample Output 2:\n2\n0\n0\n2\n0\n''') == '0'\nassert solution('''\n5 9\n1\n1\n10\n1\n9\nSample Output 2:\n2\n0\n0\n2\n0\n''') == '0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10000\\n1') == '4'\nassert solution('5 9\\n1') == '2'\nassert solution('5 9\\n10') == '0'\nassert solution('5 100000\\n1') == '0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10') == '4'\nassert solution('5 9') == '2'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n4') == '4'\nassert solution('5\\n10000\\n1\\n1\\n1\\n1') == '4'\nassert solution('5\\n9\\n1\\n10\\n1\\n9') == '2'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nne\nak\n''') == \"NE\"\nassert solution('''\nne\nkava\n''') == \"DA\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\nab') == 'DA'\nassert solution('2\\nq') == 'NE'\nassert solution('3\\nzz') == 'NE'\nassert solution('4\\nq') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"NE\"\nprint(solution())\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'NE'"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\"\nassert solution(\"5\") == \"NE\"\nassert solution(\"6\") == \"DA\"\nassert solution(\"7\") == \"NE\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\"\nassert solution(\"5\") == \"NA\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n\") == \"2\"\nassert solution(\"10 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\\n\") == \"3\"\nassert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\nSample Input 3:\n4 10 3\\n1 2\\n1 3\\n3 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\\nSample Output 3:\n1\n0\n1"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\nassert solution('''\n8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '1'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\nassert solution('''\n8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '3'\nprint(solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n'''))\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4 4\") == \"2\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 4') == '2'\nassert solution('8 10 4') == '2'\nassert solution('4 5 9') == '0'"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '2'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2\"\nassert solution(\"1 2\\n1 3\") == \"0\""
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\nassert solution('''\n8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '2'"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4 4\\n1 2\\n1 3\\n2 4\\n3 4\") == \"2\"\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\" == \"3\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\nassert solution('''\n8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '2'"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 0\") == \"2\"\nassert solution(\"1 2 1\") == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '1'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '1', \"minimize\"\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '2', \"minimize\"\nassert solution('''\n3 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '1', \"minimize\"\nassert solution('''\n3 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '2', \"minimize\"\nassert solution('''\n3 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '1', \"minimize\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3''') == '1'\nassert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3''') == '2'\nassert solution('''3 4\n1 2 1\n2 1 1\n1 2 2\n1 1 2''') == '4'\nassert solution('''4 5\n1 2 1\n2 1 1\n1 2 2\n1 1 2\n1 2 3''') == '4'\nassert solution('''3 5\n1 2 1\n2 1 1\n1 2 2\n1 1 2\n1 2 3''') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '1'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 1\") == \"2\"\nassert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\") == \"1\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '1'\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '2'\nassert solution('''\n3 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '0'\n'''\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '1'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 3\n1 1 2\n2 1 1\n1 3 1\n2 1 3\n3 3 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 1\n1 2\n1 3\n1 2\n1 4\n1 2\n1 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3 1\n1 2 1\n1 2 3\n1 2 4\n2 3 4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '2'\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '1'\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 2\n''') == '3'\n\nprint('ALL TEST CASES PASSED')\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 15\nD 4 10 1\nC 6 1\nC 9 3''') == '49.000000000'\nassert solution('''2 15\nD 4 10 1\nC 6 1''') == '40.500000000'\nprint(solution('''3 15\nD 4 10 1\nC 6 1\nC 9 3'''))\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 10\nD 4 10 1\nC 6 1\nC 9 3\nC 6 5\nD 3 5\n''') == '40.500000000'\nassert solution('''\n5 30\nD 4 10 1\nC 6 1\nC 9 3\nC 6 5\nD 3 5\n''') == '49.000000000'\nprint('all tests passed')"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 15') == '40.500000000'\nassert solution('3 15') == '49.000000000'"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.5'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\nprint(solution(input()))\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\nassert solution('4 5\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\nassert solution('4 5\\nD 4 10 1\\nC 9 3') == '49.000000000'\nassert solution('10 9\\nD 1 1\\nC 6 1\\nC 6 1') == '49.000000000'\nassert solution('10 9\\nD 1 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n3\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\nprint('Success')"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 15') == '40.500000000'\nassert solution('3 15') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5\\nD 4 10 1\\nC 6 1\\n') == '40.500000000'\nassert solution('3 5\\nD 4 10 1\\nC 6 1\\nC 9 3\\n') == '49.000000000'"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == 'fail'\nassert solution('10') == '5 4 9 3 1 10 7 6 2'\nassert solution('10') == '5 4 9 3 1 10 7 6 2'\nassert solution('10') == 'fail'\nassert solution('10') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n\") == \"fail\"\nassert solution(\"10\\n\") == \"5 4 9 3 1 10 7 6 2\""
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'\nassert solution('10\\nfail') == 'fail'"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'\nprint('all tests passed')\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == '5 4 9 3 1 10 7 6 2'\nassert solution('10\\n') == 'fail'\nassert solution('0\\n') == 'fail'"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"\"\"\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"fail\"\nassert solution(\"\"\"\n1\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"fail\"\nassert solution(\"\"\"\n2\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"fail\"\nassert solution(\"\"\"\n3\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"fail\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7''') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\n0\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\n1\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"00:08\") == \"3\"\nassert solution(\"00:00\") == \"3\"\nassert solution(\"00:00\") == \"2\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''00:00\n01:01''') == '3\\n00:00\\n01:00\\n01:01\\n'\nassert solution('''00:08\n00:00''') == '3\\n00:00\\n00:08\\n00:08\\n'"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('00:00') == \"3\"\nassert solution('01:01') == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"00:00\\n01:01\") == \"3\"\nassert solution(\"00:08\\n00:00\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''0:00\n1:01\n2:02\n3:03\n4:04\n5:05\n6:06\n7:07\n8:08\n9:09\n10:10\n11:11\n12:12\n13:13\n14:14\n15:15\n16:16\n17:17\n18:18\n19:19\n20:20\n21:21\n22:22\n23:23''') == '2'\n\nassert solution('''0:08\n0:00\n1:01\n2:02\n3:03\n4:04\n5:05\n6:06\n7:07\n8:08\n9:09\n10:10\n11:11\n12:12\n13:13\n14:14\n15:15\n16:16\n17:17\n18:18\n19:19\n20:20\n21:21\n22:22\n23:23''') == '1'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('00:00\\n01:01') == '3'\nassert solution('00:00\\n00:00') == '3'\nassert solution('00:00\\n00:01') == '3'\nassert solution('00:00\\n00:02') == '2'\nassert solution('00:00\\n00:03') == '1'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"00:00\\n01:01\\n\") == \"3\\n00:00\\n01:00\\n01:01\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"01:01\") == \"3\"\nassert solution(\"00:08\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '1'\nassert solution('00:00') == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''00:00\n01:01\n''') == '3'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('((()))') == '4,4:4,4:\nassert solution('(((()))))') == '4,4:4,4:4,4:4,4:\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin):\n        count = 0\n        stack = []\n        for i in stdin:\n            if i == '(' or i == ')':\n                count += 1\n                stack.append(i)\n            if i == '(':\n                if count == 0:\n                    count = 1\n                else:\n                    count += 1\n            if i == ')':\n                count -= 1\n                if count == 0:\n                    count = -1\n                    break\n        if count!= -1:\n            print('0,')\n        else:\n            while stack:\n                print('{},'.format(stack.pop(0)), end='')\n            print('')\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '(())'\n    ) == '4,8:8,8:'\n\nassert solution(\n    '(())(())((())'\n    ) == '4,4:4,4:4,4:4:4,4:4:4:4:4:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\"\nassert solution(\"(()(()))\") == \"4,8:8,8:\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"4,4:\", \"WRONG!\"\n\n\"\"\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"((()))\"\n) == \"4,4:\", \"You have an incorrect solution!\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('(())') == '4,4:\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.read()\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''()\n    ''') == '4,4:'''\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''(((())))(((()()(()((()())))()()(()()))())((((())))))''') == '4,8:8,8:8,8,8:8,8,8:8,8,8,8,8:8,8,8,8,8,8,8,8:8,8,8,8,8,8:8,8,8,8,8,8,8,8:8,8,8,8,8,8,8,8:8,8,8,8,8,8,8,8:8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8:8,8,8,8,8,8,8,8,8,8,8,8,8,8,8:8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8:8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('(((((()))))') == '4,4:4,4:\n'''\n\nimport unittest"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\nassert solution('1 1\\n26 02 03 03 2') == '185'\nassert solution('1 1\\n26 02 03 03 4') == '-1'\nassert solution('1 1\\n26 02 03 03 5') == '-1'\nassert solution('1 1\\n26 02 03 03 6') == '-1'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\nassert solution('1 1') == '5'"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\n\nprint(solution('''\n1 1\n26 02 03 03 2\n'''))"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1\n26 02 03 03 1\n26 02 03 03 2\n1 1\n26 02 03 03 2''') == '-1'\n\nprint(solution('''1 1\n26 02 03 03 1\n26 02 03 03 2\n1 1\n26 02 03 03 2'''))"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n20 21 22\n''') == '-1', 'first'\nassert solution('''\n1\n26 02 03 03 1\n''') == '5','second'"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\nassert solution('1 2') == '-1'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\n\nassert solution('''\n1 1\n26 02 03 03 2\n''') == '185'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n1 1\n26 02 03 03 1\n\"\"\"\n) == \"5\"\n\nassert solution(\n    \"\"\"\n1 1\n26 02 03 03 2\n\"\"\"\n) == \"-1\"\n\nassert solution(\n    \"\"\"\n1 1\n26 02 03 03 2\n\"\"\"\n) == \"-1\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"5 6 1 2 3 4\"\nassert solution(\"1 2 3 4 5 6 7\") == \"2 3 4 1 6 5 7\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"2 3 4 1 6 5 7 8\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"2 3 4 1 6 5 7 8 9\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"2 3 4 1 6 5 7 8 9 10\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"6 2\\n\"\n    \"3 4 5 6 1 2\\n\"\n    \"\") == \"5 6 1 2 3 4\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2\\n') == '5 6 1 2 3 4'\nassert solution('4 2\\n3 4 1 2\\n') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\nassert solution(\"4 2\\n3 4 1 2\") == \"2 3 4 1\""
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 2\n3 4 5 6 1 2''') == '5 6 1 2 3 4'\nassert solution('''4 2\n3 4 1 2''') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\nassert solution(\"4 2\\n3 4 1 2\") == \"2 3 4 1\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4', 'First Problem'\n\nassert solution('''\n4 2\n3 4 1 2\n''') == '2 3 4 1', 'Second Problem'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '5 6 1 2 3 4'\nassert solution('4 2') == '2 3 4 1 5'"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'\nassert solution('4 2') == '2 3 4 1'"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"Impossible\"\nassert solution(\"3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\nassert solution(\"6 2\") == \"5 6 1 2 3 4\"\nassert solution(\"5 4 5 3 1\") == \"3 4 5 1 2\"\nassert solution(\"4 2\") == \"2 3 4 1\"\n\n\"\"\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n''') == '1'\nassert solution('''\n10\n''') == '10'\nassert solution('''\n100\n''') == '101'\nassert solution('''\n100\n''') == '101'\nassert solution('''\n100\n''') == '101'\n'''\n)"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution) == '201', solution(solution)\nprint(solution(input()))\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '21'\nassert solution('10\\n2') == '12'\nassert solution('1000\\n1') == '1001'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\nprint('all test cases passed...')\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n71 42\n''') == '7211'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0'\nassert solution('10') == '9'\nassert solution('10',1) == '0'\nassert solution('10',2) == '1'"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n0 0\n0 1\n1 1\n1 0''') == '0.666666666666667'\nassert solution('''2\n0 0\n1 1\n2 0\n''') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '0.666666666666667'\nassert solution('3') == '0.733333333333333'"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"0.666666666666667\"\nassert solution(\"3\") == \"0.733333333333333\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '0.666666666666667'\nassert solution('1') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '0.666666666666667'\nassert solution('3') == '0.733333333333333'"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"0.666666666666667\"\nassert solution(\"4\") == \"0.666666666666667\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n0 0\\n0 1\\n1 1\\n1 0') == '0.666666666666667'\nassert solution('3\\n0 0\\n1 1\\n2 0') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0.5'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '0.666666666666667'\nassert solution('3') == '0.733333333333333'\n\nsolution('10000000')\n'10000000000000.0'\n\"\"\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '0.666666666666667'\nassert solution('3') == '0.733333333333333'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 5 2\n10 1 10\n0 1 20\n0 2 10\n0 3 5\n3 4 20\"\"\") == \"9\"\nassert solution(\"\"\"\n5 5 2\n10 1 10\n10 1 10\n10 1 10\n10 1 10\n3 4 20\"\"\") == \"21\"\nassert solution(\"\"\"\n5 5 2\n10 1 10\n10 1 10\n10 1 10\n10 1 10\n3 4 20\"\"\") == \"21\"\nassert solution(\"\"\"\n5 5 2\n10 1 10\n10 1 10\n10 1 10\n10 1 10\n3 4 20\"\"\") == \"21\"\nassert solution(\"\"\"\n5 5 1\n10 1 10\n10 1 10\n10 1 10\n10 1 10\n3 4 20\"\"\") == \"21\"\n\nprint('PASSED!')"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n1 1\\n1 2\\n1 10\\n0 0\\n1 20\\n1 20\\n0 100\\n\") == \"21\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 4') == '9'\nassert solution('2 3 100') == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3 4\n10 1 3\n0 1 20\n''') == '9'\nassert solution('''\n2 2 2\n1 1 1\n0 0 0\n''') == '1'\nassert solution('''\n2 4 4\n1 1 1\n10 2 2\n10 2 2\n''') == '9'\nassert solution('''\n2 2 4\n1 1 1\n0 0 0\n''') == '5'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5 7\n0 1 5\n1 2 2\n4 5 5\n4 3 4\n3 5 7\n''') == '9'\nassert solution('''\n5 5 10\n0 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 7\n''') == '17'\nassert solution('''\n3 3 6\n0 1 2\n1 2 2\n2 3 3\n''') == '8'\nassert solution('''\n3 5 10\n1 2 1\n2 3 2\n3 4 3\n4 5 3\n5 6 4\n''') == '11'\nassert solution('''\n7 5 10\n0 1 1\n1 2 2\n1 3 3\n2 4 4\n2 5 5\n3 6 6\n4 5 7\n4 6 7\n5 6 8\n5 7 8\n6 7 9\n6 8 9\n7 8 10\n7 9 10\n8 9 10\n''') == '45'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '9'"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 3 4\n10 1 3\n0 1 20\"\"\") == \"9\"\nassert solution(\"\"\"2 3 100\n10 1 10\n10 1 10\"\"\") == \"21\""
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4 100\n10 1 3\n0 1 20\n10 1 10\n''') == '9'\nassert solution('''\n3 3 100\n10 1 3\n0 1 20\n10 1 10\n''') == '21'\nprint('All tests passed!')"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 2 7 -') == '2'\nassert solution('9 2 7 -') == '4'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 2 7 -\") == \"2\"\nassert solution(\"9 2 7 -\") == \"4\"\n\nstdin = \"\"\"8 2 7 -\n1 1 1 2\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8 2 7 -\n1 1 1 2\n1 1 1 2''') == '2'\nassert solution('''9 2 7 -\n1 1 1 2\n1 1 1 2''') == '4''')\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8 2 7 -\n1 1 1 2\n''') == '2'\nassert solution('''9 2 7 -\n1 1 1 2\n''') == '4'\nassert solution('''8 2 9 -\n3 1 1 2\n''') == '0'\nassert solution('''8 2 3 -\n3 1 1 2\n''') == '0'\nassert solution('''9 2 5 -\n3 1 1 2\n''') == '0'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4 1 7 -') == '2'\nassert solution('8 2 7 -') == '4'\nassert solution('9 2 7 -') == '4'\nassert solution('4 3 1 -') == '1'\nassert solution('5 3 1 -') == '0'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2\\n') == '2'\nassert solution('9 2 7 -\\n1 1 1 2\\n') == '4'"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\\n\") == \"2\"\nassert solution(\"9 2 7 -\\n1 1 1 2\\n\") == \"4\"\nassert solution(\"10 3 10 7 -\\n1 1 1 2\\n5 5 5 6\\n7 8 8 8 9\\n4 4 4 4 4\") == \"8\"\nassert solution(\"10 3 10 7 -\\n1 1 1 2\\n5 5 5 6\\n7 8 8 8 9\\n4 4 4 4 4\\n5 4 4 4 4\") == \"10\"\nassert solution(\"10 3 10 7 -\\n1 1 1 2\\n5 5 5 6\\n7 8 8 8 9\\n4 4 4 4 4\\n5 4 4 4 4\\n7 8 8 8 9\") == \"10\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2\\n') == '2'\nassert solution('9 2 7 -\\n1 1 1 2\\n') == '4'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2\\n') == '2'\nassert solution('9 2 7 -\\n1 1 1 2\\n') == '4'\n\"\"\"\n\nfrom collections import deque\n\nimport sys\n\nclass KenKen:\n    def __init__(self, n: int, m: int, t: int, op: str):\n        self.n = n\n        self.m = m\n        self.t = t\n        self.op = op\n\n    def solution(self):\n        pass"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '3'\nassert solution('''4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '2'\nassert solution('''5 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '1'\nassert solution('''5 5\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '0'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3\\n4\\n3\\n2\\n'\n\nimport unittest\n\nclass Test(unittest.TestCase):\n\n    def test_sample_input_1(self):\n        self.assertEqual(solution(\"3 3\\n1 2 5\\n2 3 5\\n3 4 5\\n\"), \"3\\n4\\n3\\n2\\n\")\n\n    def test_sample_input_2(self):\n        self.assertEqual(solution(\"4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\"), \"2\\n3\\n2\\n1\\n\")"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '3'\nassert solution('''4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '3'\n\nassert solution('''4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '2'"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '3'\nassert solution('4 4\\n1 4 8\\n1 4 8\\n1 4 8\\n1 4 8') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"2\"\nassert solution(\"4 4\") == \"3\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"10 5\") == \"5\""
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '6'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 4\") == \"24\"\nassert solution(\"1 1\") == \"2\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4') == '6'\nassert solution('2 3') == '6'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 4\") == \"24\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 4\") == \"24\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\n2 1') == '6'\nassert solution('3 4\\n2 3 1') == '24'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1 2\n''') == '2'\nassert solution('''5\n3 4 5 1 2\n''') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1 2\n''') == '1'\nassert solution('''5\n3 4 5 1 2\n''') == '1'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1 2\n''') == '1'\nassert solution('''\n5\n3 4 5 1 2\n''') == '1'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2\n3 4\n''') == '2'\nassert solution('''\n1 2\n3 4\n5 6\n''') == '1'\n'''\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\nassert solution('3 4 5 1 2') == '1'\nassert solution('6 4 5 1 2 3') == '2'\nassert solution('10 4 5 1 2 3 4 5 1 2 3') == '3'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n3 4 5 1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n1 1 1 1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 4 10\\n5 2 6\\n11 1 3') == '9'\nassert solution('3 3\\n1 3 1\\n2 1 2\\n1 1 1') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3\n1 4 10\n5 2 6\n11 1 3\n\"\"\") == \"9\"\nassert solution(\"\"\"\n1 3\n1 4\n5 2\n\"\"\") == \"4\""
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3') == '9'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3\\n5 2 6\\n11 1 3\\n') == '9'\nassert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3\\n5 2 6\\n11 1 3\\n') == '9'\nassert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '9'\nassert solution('3 3') == '4'\nassert solution('4 5') == '2'\nassert solution('3 4') == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9', '''\nCorrect: 9\nYour submission: {}\n'''.format(solution('''\n3 3\n1 3 1\n2 1 2\n1 1 1\n'''))\n\nassert solution('''\n3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '4', '''\nCorrect: 4\nYour submission: {}\n'''.format(solution('''\n3 3\n1 3 1\n2 1 2\n1 1 1\n'''))"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9'\nassert solution('''\n3 3\n1 3 1\n2 1 2\n1 1 1\n''') == '4'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n') == '6'\nassert solution('4\\n3 4 5 6\\n1 2\\n1 3\\n2 4\\n') == '3'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '6'\nassert solution('''\n4\n3 4 5 6\n1 2\n1 3\n2 4\n''') == '3'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 2\\n1 2') == '2'\nassert solution('4 5 6\\n1 2') == '3'\nassert solution('5 1 2\\n1 3\\n2 4\\n3 4') == '2'\nassert solution('4 1 2\\n1 3\\n2 3\\n3 4') == '2'\n\n---\n\nSample Input 1:\n5\n1 2 3 4 5\n1 2\n1 3\n2 4\n3 4\nSample Output 1:\n0\n\nSample Input 2:\n5\n1 2 3 4 5\n1 2\n1 3\n2 3\n3 4\nSample Output 2:\n0\n\nSample Input 3:\n5\n1 2 3 4 5\n1 2\n1 3\n2 3\n3 4\nSample Output 3:\n2\n\nSample Input 4:\n5\n1 2 3 4 5\n1 2\n1 3\n2 3\n3 4\n4 5\nSample Output 4:\n0\n\nSample Input 5:\n4\n1 2 3 4\n1 2\n1 3\n3 4\nSample Output 5:\n1\n'''\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '6'\nassert solution('3') == '3'\nassert solution('2') == '1'"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '6'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\nassert solution('4\\n3 4 5 6\\n1 2\\n1 3\\n2 4\\n') == '3'\nprint('All tests passed!')"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '6'"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '6'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n1 10\n5 8\n\"\"\") == \"18\"\nassert solution(\"\"\"\n3\n17 144\n121 121\n89 98\n\"\"\") == \"265\"\nassert solution(\"\"\"\n1\n4\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 10\n5 8\n''') == '18'\nassert solution('''\n3\n17 144\n121 121\n89 98\n''') == '265'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 10\\n5 8\\n') == '18'\nassert solution('2 1\\n17 144\\n121 121\\n89 98\\n') == '265'\nprint('all tests passed')\n\"\"\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 10\\n5 8\\n') == '18'\nassert solution('2 1\\n5 8\\n') == '25'\nassert solution('3 1\\n17 144\\n') == '265'\nassert solution('4 1\\n121 121\\n89 98\\n') == '10'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1 10\\n5 8\\n') == '18\\n8\\n'\nassert solution('3\\n17 144\\n121 121\\n89 98\\n') == '265\\n25\\n10\\n'\nprint(solution(input()))\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 10') == '18'\nassert solution('3 17 144 121 121 89 98') == '265 25 10'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n1 10\\n5 8') == '18\\n8\\n'\nassert solution('3\\n17 144\\n121 121\\n89 98') == '265\\n25\\n10\\n'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2\n1 10\n5 8\n\"\"\") == \"18\"\n\nassert solution(\"\"\"3\n17 144\n121 121\n89 98\n\"\"\") == \"265\"\n\nassert solution(\"\"\"5\n1 2\n2 5\n3 8\n4 8\n5 2\n\"\"\") == \"10\"\n\nassert solution(\"\"\"4\n8 6\n9 1\n3 8\n5 2\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 10\n1 10\n2 10\n\"\"\") == \"18\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10\\n5 8') == '18'\nassert solution('3 17 144\\n121 121\\n89 98') == '265'\nprint(solution(input()))"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3') == '0.50000000'\nassert solution('5 5') == '12.50000000'"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n0 4\\n1 3\\n2 1') == '0.50000000'\nassert solution('2 5\\n0 0\\n1 1\\n2 1\\n2 0') == '1.0'\nprint('all tests passed')"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 1\n2 1\n2 0\n1 0\n''') == '0.50000000'\nassert solution('''\n4 3\n0 0\n1 1\n2 1\n1 0\n''') == '0.50000000'\nassert solution('''\n5 5\n0 4\n4 2\n4 1\n3 -1\n-2 4\n''') == '12.50000000'\nprint('all tests passed')"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '0.5'\nassert solution('5 5') == '12.5'\n\n------------------------------------------------------------\n\nHow to do this?\n\n---"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 2\") == \"1.5\"\nassert solution(\"1 2 3\") == \"1.5\"\nassert solution(\"1 2 3 4\") == \"1.5\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\\n') == '12.50000000'\nassert solution('10 10\\n0 0\\n1 1\\n2 1\\n3 2\\n4 1\\n5 1\\n6 1\\n7 2\\n8 1\\n9 0\\n10 0\\n') == '1.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"0.50000000\"\nassert solution(\"5 5\") == \"12.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '0.5'\nassert solution('2 2') == '0.5'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '0.5'\nassert solution('5 5') == '12.5'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '0.50000000'\nassert solution('5 5') == '12.50000000'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 1 3\n0 1\n1 2\n2 3\n1''') == '2'\nassert solution('''4 0 4\n0 2\n0 1\n2 1\n2 3\n\n''') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n\"\"\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 1 3') == '2'\nassert solution('4 0 4') == '1'\nassert solution('4 1 3\\n0 2') == '1'\nassert solution('4 0 4\\n0 1\\n1 2\\n2 3') == '2'"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 1 3\n0 1\n1 2\n2 3''') == '2'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 1 3\n0 1\n1 2\n2 3\n1''') == '2'\n\nassert solution('''4 0 4\n0 2\n0 1\n2 1\n2 3\n\n''') == '1'\n\n'''"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 1 3\n0 1\n1 2\n2 3\n1''') == '2'\nassert solution('''4 0 4\n0 2\n0 1\n2 1\n2 3\n\n1''') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"4 1 3\\n\"\n    \"0 1\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"1\"\n) == \"2\"\n\nassert solution(\n    \"4 0 4\\n\"\n    \"0 2\\n\"\n    \"0 1\\n\"\n    \"2 1\\n\"\n    \"2 3\"\n) == \"1\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\nassert solution('''\n4 0 4\n0 2\n0 1\n2 1\n2 3\n''') == '1'\nassert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '0'\nassert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '1'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == None\nassert solution(\"1 2 1\") == 6\nassert solution(\"2 2 2\") == 30\nassert solution(\"3 3 3\") == None\nassert solution(\"10 10 10\") == None\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\nassert solution('1 1 2') == '10'\n\"\"\"\n\nfrom itertools import permutations\nfrom math import factorial\n\na, c, m = map(int, input().split())"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2 1\n2 1 1\n1 1 1''') == '6'\nassert solution('''1 2 2\n2 1 2\n1 1 2''') == '30'\n\n'''\nIn this problem, there are two types of apples, cherry and mango. We are given three boxes with the types of apples, cherry and mangos. We are also given a number. If the number is odd, the apple will move to the next box. If the number is even, the cherry will move to the next box. If the number is zero, the mango will move to the next box. The next box will contain apple or cherry.\n\nWe can only order the boxes such that we can have different types of apples in each box. The total number of orders is the total number of possible ways to order the boxes.\n\nThe task is to compute the total number of possible orders and print that.\n\n'''"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\""
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n\nimport math\nimport random\nimport itertools"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == str(answer)\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\nassert solution(\"2 2 2\") == \"30\"\n\n-------------------------------------------------------------"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == '2021 2020 2020'"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2020 2020 2020\n''') == '2021 2020 2020'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2020 2020 2020\n''') == '2021 2020 2020'\nassert solution('''2\n1 9999999\n''') == 'impossible'\nprint('All tests passed!')\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1110 1101 1110\n''') == 'impossible'\nassert solution('''3\n2020 2020 2020\n''') == '2020 2020 2020'\nassert solution('''2\n1 9999999\n''') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n2020 2020 2020''') == '2021 2020 2020'\nassert solution('''2\n1 9999999''') == 'impossible'"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2021 2020 2020'\nassert solution('2') == 'impossible'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 9999999') == 'impossible'"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2\") == \"impossible\"\nassert solution(\"2 3 1\") == \"impossible\"\nassert solution(\"5 5 5 5 5\") == \"impossible\"\nassert solution(\"0 0 0 0 0\") == \"impossible\"\nassert solution(\"4 2 2 1 1\") == \"impossible\"\n\nprint(\"All tests passed\")\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n2020 2020 2020\n\"\"\") == \"2021 2020 2020\"\nassert solution(\"\"\"\n4\n1 9999999\n2 3 5\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\n\"\"\""
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1'\nassert solution('10') == '1'\nassert solution('20') == '2'\nassert solution('30') == '2'\nassert solution('35') == '2'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(t) == \"2\""
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == '1'\nassert solution('30 70') == '11'\nassert solution('66 69') == '2'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n10000000\n''') == '10000000'\nassert solution(\n'''\n0\n''') == '0'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n') == '1'\nassert solution('2\\n3\\n') == '1'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''30 70\n            30 70\n            30 70''') == '1'\nassert solution('''66 69\n            66 69\n            66 69''') == '2'\nprint('all tests passed')"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10\\n3\\n3\\n') == '3'\nassert solution('20\\n-3\\n6\\n') == '3'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''10\n10''') == '1'\nassert solution('''50\n50''') == '0'\n''')"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4 1\n>@<\n>~#~<\n>@<\n''') == \"4\"\nassert solution('''\n4 4 1\n>@<\n>~#~<\n>@<\n''') == \"4\"\nassert solution('''\n2 2 1\n>@<\n>~#~<\n''') == \"0\"\nassert solution('''\n2 2 1\n>@<\n>~#~<\n''') == \"0\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 0\") == \"2\"\nassert solution(\"3 5 1\") == \"4\"\nassert solution(\"2 3 0\") == \"begin repairs\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 5 1\n>>@<<\n>~#~<\n''') == '2'\nassert solution('''\n3 2 0\n>@\n>~\n''') == '1'\nassert solution('''\n3 3 0\n>>@<<\n>~#~<\n''') == '1'\n'''\nSample Input 3:\n6 6 4\n>@<\n>~<\n<@<\n'''\nassert solution('''\n6 6 4\n>@<\n>~<\n<@<\n''') == '5'\nassert solution('''\n6 6 3\n>@<\n>~<\n<@<\n''') == '1'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 0\n>@\n>~\n''') == '2'\nassert solution('''\n3 5 1\n>>@<<\n>~#~<\n''') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 0\") == \"2\"\nassert solution(\"3 5 1\") == \"4\""
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n2 2 0\n>@\n>~\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n3 5 1\n>>@<<\n>~#~<\n>>>>~\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 0') == '2'\nassert solution('3 5 1') == '4'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\""
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n\nSample Input 3:\n9775=5\nSample Output 3:\n9+7+5=5\n\"\"\"\n\na, s = stdin.split(\"=\")\na, s = int(a), int(s)"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''143175=120\nSample Input 1:\n5025=30\nSample Output 1:\n5+025=30''') == \"5+025=30\""
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1 2\"\nassert solution(\"3\") == \"1 2\"\nassert solution(\"6\") == \"-1\"\nassert solution(\"10\") == \"-1\"\nassert solution(\"10 10 10 10 10 10 10\") == \"-1\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1\\n2\\n3\\n4\\n1\\n5\\n2\\n4\") == \"1 2\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n1\\n5\\n2\\n4\") == \"1 -1\"\nassert solution(\"7\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n2\\n3\\n4\\n5\\n6\\n7\") == \"-1 1\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n1\\n5\\n2\\n4\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n1\\n5\\n2\\n4\") == \"-1 1\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"1 2\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n1''') == '1 2'\nassert solution('''8\n1\n2\n3\n4\n5\n6\n7\n1\nSample Output 3:\n-1\n''') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2'\nassert solution('4') == '1 2'\nassert solution('5') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1\n3\n2\n4\n1\n5\n2\n4\n''') == '1 2'\n\nassert solution('''\n8\n1\n3\n2\n4\n1\n5\n2\n4\n''') == '1 2'\n\nassert solution('''\n8\n1\n2\n3\n4\n1\n5\n2\n4\n''') == '-1'\n\nassert solution('''\n8\n1\n3\n2\n4\n1\n5\n6\n7\n1\n''') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n\") == \"-1\"\nassert solution(\"8\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1\\n3\\n2\\n4') == '1 2'\nassert solution('8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4') == '1 2'\nassert solution('8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4') == '-1'\nassert solution('7\\n1\\n1\\n1\\n1\\n1\\n1') == '1 -1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n8\n1\n3\n2\n4\n1\n5\n2\n4\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1101\"\n) == \"1\"\n\nassert solution(\n    \"1\"\n) == \"0\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n0\n1\n0\n1\n1\n0\n0\n0\n1\n0\n1\n1\n0\n1\n1\n1\n0\n0\n0\n0\n0\n1\n0\n1\n1\n0\n1\n1\n0\n1\n0\n1\n0\n1\n1\n1\n1\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n1\n1\n0\n0\n1\n0\n1\n1\n1\n1\n0\n0\n0\n1\n1\n1\n1\n1\n0\n0\n0\n0\n0\n1\n1\n1\n1\n1\n0\n0\n0\n1\n0\n1\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n1\n1\n1\n0\n0\n0\n0\n1\n1\n1\n1\n0\n1\n1\n0\n1\n0\n0\n1\n1\n1\n0\n1\n0\n1\n1\n0\n1\n1\n1\n0\n1\n1\n0\n1\n1\n1\n0\n1\n1\n0\n1\n0\n0\n1\n1\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n1\n1\n1\n1\n0\n1\n1\n0\n0\n0\n1\n0\n1\n1\n0\n0\n0\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n1\n1\n0\n1\n0\n0\n0\n0\n1\n1\n1\n1\n1\n1\n0\n1\n0\n0\n1\n1\n1\n1\n1\n0\n1\n0\n0\n0\n1\n0\n1\n1\n1\n0\n0\n1\n0\n0\n0\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n1\n0\n1\n1\n0\n0\n1\n1\n0\n0\n1\n0\n1\n0\n1\n0\n1\n0\n0\n0\n1\n0\n0\n1\n1\n0\n1\n0\n0\n0\n1\n1\n1\n1\n1\n1\n1\n1\n0\n1\n1\n0\n1\n1\n0\n0\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n1\n0\n0\n0\n1\n1\n0\n1\n0\n0\n0\n0\n1\n1\n1\n1\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\nassert solution('00') == '0'"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"01\") == \"0\""
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\""
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1101') == \"1\"\nassert solution('1') == \"0\"\nassert solution('1101') == \"1\""
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == output_string, f'Your program output: {output_string}'"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\""
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '1'\nassert solution('2 1') == '0'\nassert solution('3 3') == '2'\nassert solution('7 3 4 2 6 5 6 1') == '3'"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 1 6 3 6') == '2'\nassert solution('7 3 4 2 6 5 6 1') == '3'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\nprint(solution())\nassert solution() == '0'\nprint(solution())\n\"\"\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 1 6 3 6\") == \"2\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\") == \"1\\n0\\n2\"\nassert solution(\"4 1\\n3 1 2\\n7 2 1\\n1 2\\n2 3\") == \"3\\n1\\n0\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"1\\n0\\n2\\n\"\nassert solution(\"2 1\") == \"3\\n\"\nassert solution(\"3 3\") == \"1\\n0\\n2\\n\"\nassert solution(\"7 3 4 2 6 5 6 1\") == \"6\\n\"\nassert solution(\"1 2\") == \"4\\n\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 3 1 2 3\\n2 2 1') == '2'\nassert solution('5 1\\n1 2\\n1 3') == '1'\nassert solution('5 5\\n1 2 4 3\\n1 2 4 3') == '3'\nassert solution('4 2\\n4 1 6 3 6\\n1 2\\n2 3') == '1'\nassert solution('6 2\\n5 3 5 1 6\\n3 4 2 6 5 6 1') == '0'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"1\\n0\\n2\\n\"\nassert solution(\"2 1\") == \"3\\n\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"7 3\") == \"4\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '4.000000'\nassert solution('4 2 3 4') == '3.666666'"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n2 4 3 4\") == \"4.000000\"\nassert solution(\"4 2\\n2 4 3 4\") == \"3.666666\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 1') == '4.000000'\nassert solution('4 2') == '3.666666'\n\n'''"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 2\\n') == '2'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.000000\"\nassert solution(\"4 2\\n2 4 3 4\") == \"3.666666\""
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 1\n1 2 3 4''') == '4.000000'\nassert solution('''4 2\n2 4 3 4''') == '3.666666'\nassert solution('''8 2\n2 4 3 4 5 6 7''') == '4.285714'\nassert solution('''5 5\n10 20 20 10 30 20 30 20 40 50''') == '5.000000'\nassert solution('''5 6\n10 20 20 10 30 20 30 20 40 50''') == '6.000000'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 1\n1 2 3 4''') == '4.000000'\nassert solution('''4 2\n2 4 3 4''') == '3.666666'"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 1\") == \"4.000000\"\nassert solution(\"4 2\") == \"3.666666\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1') == \"4.000000\"\nassert solution('4 2') == \"3.666667\""
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '1'\nassert solution('4 1') == '1'\nassert solution('4 2') == '2'\nassert solution('4 3') == '3'\nassert solution('4 4') == '4'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0.375\"\nassert solution(\"2 2 5 5\") == \"0.750\"\nassert solution(\"2 3 5 5\") == \"0.000\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0') == '0.625'\nassert solution('4\\n3.0\\n0.0\\n2.0\\n1.0\\n1.0\\n0.0\\n0.0\\n0.0\\n0.0\\n0.0') == '0.750'\nprint('all test cases passed')"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0.625'\nassert solution('1\\n3\\n5\\n10\\n5\\n') == '1.5'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.625'\nassert solution('''\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.375'"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\nassert solution('2 2 5 5') == '0.625'\nassert solution('2 2 5 5') == '0.625'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n''') == '0.750'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\nassert solution('2 2 5 5') == '0.375'\nassert solution('2 2 5 5') == '0.375'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 5 5') == '0.750', f\"actual: {solution('2 2 5 5')}\"\nassert solution('2 2 5 5') == '0.625', f\"actual: {solution('2 2 5 5')}\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.750'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.750'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 2 4') == '2'\nassert solution('3 4\\n2 3 0 7') == '37'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '2'\nassert solution('''\n3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0\n''') == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2 4') == '2'\nassert solution('3 4\\n2 3 0 7') == '37'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == \"37\", \"Should return 37\"\nassert solution(\"2 3 0 7\") == \"2\", \"Should return 2\"\nassert solution(\"3 4 2 3 0 7\") == \"37\", \"Should return 37\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 2 4\n0 3 6\n4 0 3''') == '2'\n\nassert solution('''3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0''') == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 2\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0\n\"\"\") == \"37\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\n1 2 4\n0 3 6\n4 0 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n0 3 6') == '2'\nassert solution('3 4\\n2 3 0 7') == '37'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1234\\n1 4\\n1 4\\n1 4') == '10\\n14\\n18\\n'\nassert solution('4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4') == '1\\n4\\n9\\n16\\n'\nprint(solution(input()))\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"10 14 18\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2\\n2 2\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '10'\nassert solution('4 4') == '1 4 9 16'\n\nimport os\nimport sys\n\nfrom io import StringIO\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 3\n1234\n1 4\n1 4\n1 4\n\"\"\") == \"10\"\nassert solution(\"\"\"\n4 4\n1234\n1 1\n1 2\n1 3\n1 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"4 4\") == \"14\""
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '10'\nassert solution('5 4') == '14'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10\\n14\\n18\\n\""
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1234\\n1 4\\n1 4\\n1 4\\n1 4\") == \"10\\n14\\n18\\n\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 3\n1234\n1 4\n1 4\n1 4\n''') == '10'\nassert solution('''4 4\n1234\n1 1\n1 2\n1 3\n1 4\n''') == '1'\nprint('All tests passed!')"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\") == \"2\"\nassert solution(\"5 2 4\") == \"1\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 2 3\n1 3\n2 3\n3 4\n''') == '2'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\nassert solution('''\n4 2 3\n1 3\n2 3\n3 4\n''') == '2'\nprint('solution() is working.')"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\\n1 3\\n1 2\") == \"1\"\nassert solution(\"2 2 2\\n1 2\\n1 3\") == \"2\"\nassert solution(\"2 2 4\\n1 2\\n1 3\") == \"2\"\nassert solution(\"5 2 4\\n1 3\\n2 4\\n3 4\") == \"1\"\nassert solution(\"5 2 3\\n1 2\\n1 3\") == \"1\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 2 3\n1 3\n2 3\n3 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 2 4\n1 3\n3 4\n2 4\n4 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5 4\n1 3\n3 4\n2 4\n4 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5 4\n1 3\n3 4\n2 4\n4 5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 2 3\\n1 3\\n2 3\\n3 4\"\n) == \"2\"\n\nassert solution(\n    \"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\"\n) == \"1\"\n\nassert solution(\n    \"2 2 4\\n1 2\\n1 4\\n2 4\"\n) == \"1\""
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 2 4\n1 3\n3 4\n2 4\n4 5''') == '1'\nassert solution('''\n4 2 3\n1 3\n2 3\n3 4\nSample Output 3:\n0''') == '0'\nassert solution('''\n1 2\n1 2\nSample Output 4:\n3''') == '3'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('4 2 3') == '2'\nassert solution('5 2 4') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2 3\n1 3\n2 3\n3 4\n''') == '2'\nassert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2 3') == '2'\nassert solution('5 2 4') == '1'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n') == 'yes'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\nSample Output 2:\nno\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n') == 'yes'\nprint('Tests Passed!')"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'no'\nassert solution('2') == 'no'\nassert solution('3') == 'yes'\nassert solution('4') == 'yes'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"yes\"\nassert solution(\"2\") == \"no\""
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"no\"\nassert solution(\"2\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'no'\nassert solution('2') == 'yes'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'no'\nassert solution('2') == 'yes'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000') == 'yes'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\nSample Output 2:\nno\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'yes'\nassert solution('2') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\nSample Output 1:\nno\n\nSample Input 2:\n2\n9996 0 9997 0 0 1\n9999 0 10000 0 0 1\n2\n9997 0 9998 0 0 1\n9998 0 9999 0 0 1\nSample Output 2:\nyes\n''') == 'no'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 2\n2 3\n1 3''') == 'YES'\nassert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'NO'"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n1 2\n2 3\n1 3\n''') == 'YES'\nassert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('4 4') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"YES\\n1 3\\n2 1\\n\"\nassert solution(\"4 3\") == \"NO\\n\"\nassert solution(\"6 6\") == \"YES\\n1 2\\n3 1\\n5 3\\n4 2\\n4 3\\n4 5\\n5 4\\n\"\nassert solution(\"10 5\") == \"NO\\n\"\nassert solution(\"15 5\") == \"NO\\n\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"YES\\n1 3\\n2 1\\n\"\nassert solution(\"4 3\") == \"NO\\n\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == \"YES\\n1 2\\n3 1\\n2 1\\n4 2\"\nassert solution(\"1 2\\n2 3\") == \"YES\\n2 1\\n3 2\\n1 3\\n2 1\"\nassert solution(\"1 2\\n1 3\") == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('4 3') == 'NO'\nassert solution('5 3') == 'NO'\nassert solution('6 3') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == 'YES\\n1 3\\n2 1\\n3 2\\n'\nassert solution('4 3') == 'NO\\n'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('4 3\\n1 2\\n1 3\\n1 4\\n') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1 2\n2 3\n1 3\n1 3\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n2 2\n1 2\n1 3\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\n2 2\n1 2\n1 3\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5') == 'consistent'\nassert solution('3 3') == 'inconsistent'\nassert solution('2 2') == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2''') == 'inconsistent'\nprint(solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4'''))"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"consistent\"\nassert solution('3 3\\n0 > 1\\n1 = 2\\n0 = 2\\n') == \"inconsistent\""
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\nassert solution('''3 4\n0 > 1\n0 = 1\n2 = 3\n0 > 2\n1 > 3\n''') == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'inconsistent'\nassert solution('''\n3 3\n0 = 1\n1 = 2\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''\n7 7\n0 = 1\n1 = 2\n2 = 3\n0 > 1\n1 > 2\n1 > 3\n2 > 3\n2 > 4\n0 = 5\n1 = 6\n2 = 7\n0 > 5\n1 > 6\n1 > 7\n''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == 'inconsistent'\nassert solution('5 5') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\nSample Output 3:\nconsistent''') == 'consistent'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1.57079633\"\nassert solution() == \"41938.65135885\""
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '1.57079633'\n\"\"\""
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 0 0\n1 1 0\n0 0 0\n''') == '0.0'\nassert solution('''\n4\n-1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '0.0'\nassert solution('''\n4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '0.0'\nassert solution('''\n4\n-10 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n''') == '1.57079633'\nassert solution('''\n4\n0 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '0.5'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3.0\"\nassert solution(\"4\") == \"1.57079633\"\nassert solution(\"5\") == \"0.7853981633\"\nassert solution(\"6\") == \"41938.65135885\""
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1.57079633'\nassert solution('4') == '1.57079633'"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1.57079633\"\nassert solution(\"6\") == \"1.61803398875\""
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n0 0 0\n-1 0 0\n0 0 0\n0 0 -1\n0 0 0\n''') == '1.57079633'\n'''\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\nassert solution('''\n4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n''') == '41938.65135885'\nassert solution('''\n1\n0 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\nassert solution('''\n1\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n''') == '41938.65135885'\nassert solution('''\n1\n0 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1.57079633'\nassert solution('4') == '0'\nassert solution('4') == '1.57079633'\n\"\"\"\n\n\nimport math\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        x = []\n        for i in stdin.split('\\n'):\n            x.append([float(i.split(' ')[0]), float(i.split(' ')[1]), float(i.split(' ')[2])])\n        \n        max_radius = 1.0\n        \n        for i in x:\n            temp_max = (i[0]**2 + i[1]**2 + i[2]**2)**0.5\n            \n            if temp_max > max_radius:\n                max_radius = temp_max\n            \n        return str(max_radius)\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"11\") == \"3\"\nassert solution(\"18\") == \"4\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().strip()\n\"\"\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\na\n10\nabc\n12\ncdef\n9\nfgh\n11\njkl\n13\nmno\n9\npqrs\n11\ntuv\n13\nwxyz\n''') == '8'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7\\nab\") == \"7\"\nassert solution(\"10\\nabcde\") == \"10\"\nassert solution(\"6\\nabcabc\") == \"5\"\nassert solution(\"8\\nabcd\") == \"0\"\nassert solution(\"12\\nabcdd\") == \"0\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11') == '3'\nassert solution('18') == '4'"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r\"\"\"\n    6\n    sabcabcfabc\n    3\n    a\n    b\n    b\n    k\n    \"\"\") == \"3\"\n    \"\"\")\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11') == '3'\nassert solution('18') == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n11\nsabcabcfabc\n''') == '3'\nassert solution('''\n18\ntrutrutiktiktappop\n''') == '4'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == 'huge'\nassert solution('4') == 'huge'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n2 3 1\n3 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6\n5 1 6 3 2 4\n4 6 5 1 3 2\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '5'\nassert solution('10') == 'huge'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 4 1 2 5 3') == '5'\nassert solution('3 4 2') == 'huge'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"6\") == \"5\"\nassert solution(\"10\") == \"huge\""
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"huge\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"10\") == \"huge\"\nassert solution(\"100\") == \"huge\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == 'huge'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1\n0 10 20\n0 10\nSample Input 3:\n6 1\n0 10 20 26 40 50\n0 40\nSample Output 3:\n9\n''') == '4'\n\nassert solution('''6 1\n0 10 20 26 40 50\n0 40\nSample Input 4:\n3 1\n0 10 20\n0 10\nSample Output 4:\n6\n''') == '10'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2 1\n0 10 20\n0 10\"\"\") == \"4\"\nassert solution(\"\"\"3 1\n0 10 20\n0 10\nSample Input 3:\n2 1\n0 40\n0 10\nSample Output 3:\n9\n\"\"\") == \"9\"\nassert solution(\"\"\"3 1\n0 10 20\n0 10\nSample Input 4:\n3 1\n0 40\n0 10\n0 50\nSample Output 4:\n7\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1\n0 10 20\n0 10\n''') == '4'\nassert solution('''\n3 1\n0 10 20\n0 10\n0 10\n''') == '4'\nassert solution('''\n6 1\n0 10 20 26 40 50\n0 40\n''') == '9'\nassert solution('''\n5 1\n0 10 20 30 40 50\n0 40\n0 40\n0 40\n0 40\n''') == '5'\nassert solution('''\n5 1\n0 10 20 30 40 50\n0 40\n0 40\n0 40\n0 40\n''') == '5'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '9'\nassert solution('3') == '10'\nassert solution('4') == '4'\nassert solution('5') == '5'"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '4'\nassert solution('6') == '9'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '4'\nassert solution('3 1') == '4'\nassert solution('5 1') == '5'\nassert solution('10 1') == '10'\nassert solution('20 1') == '20'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == '4'\nassert solution('3 2') == '0'\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom math import floor, sqrt\nfrom fractions import Fraction\n\nn, p = map(int, input().split())\ndic = {}\nfor i in range(n):\n    x = int(input())\n    if x not in dic:\n        dic[x] = 1\n    else:\n        dic[x] += 1\n\nmax_score = 0\nfor i in range(p):\n    s, e = map(int, input().split())\n    count_in_range = 0\n    for key in dic.keys():\n        if s <= key <= e:\n            count_in_range += dic[key]\n    max_score = max(max_score, count_in_range)\n\nprint(max_score)"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1\n0 10 20\n0 10\nSample Input 3:\n6 1\n0 10 20 26 40 50\n0 40\nSample Output 3:\n12\n''') == '12'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n3 1\n0 10 20\n0 10\n\"\"\",\n) == \"4\"\n\nassert solution(\n    \"\"\"\n5 1\n0 10 20 10\n\"\"\",\n) == \"6\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 1\n0 10 20\n0 10\nSample Input 3:\n6 1\n0 10 20\n40 50\n0 40\n0 30\nSample Output 3:\n9\n''') == '4'"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal''') == 'not equal'"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))''') == 'not equal'\nassert solution('''sorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'equal'\nprint(solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]'''))"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('shuffle([1,2,1,2])') == 'equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\n\"\"\") == \"not equal\"\nassert solution(\"\"\"\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\n\"\"\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\n\"\"\") == \"not equal\"\nassert solution(\"\"\"\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\n\"\"\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\") == \"equal\""
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))''') == 'not equal'\nassert solution('''sorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'equal'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('1 3') == '1'\nassert solution('3 2') == '2'\n\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n''') == 'Oh no'\nassert solution('''\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n''') == '1'\nassert solution('''\n3 2\n3 2\n1 2 1 2\n2 3 1 2\n''') == '2'"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"Oh no\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"3 2 1 2\") == \"2\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('3 2') == '1'\nassert solution('1 3') == 'Oh no'\nassert solution('3 2') == '1'\nassert solution('1 2 1 2') == 'Oh no'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n''') == '1'\n\nassert solution('''\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n''') == 'Oh no'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('1 3') == '1'\nassert solution('3 2') == '1'\nassert solution('3 2 1 2') == '1'\nassert solution('3 2 1 2 1 2') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3') == 'Oh no'\nassert solution('1 2') == '1'\nassert solution('3 2') == '1'\nassert solution('1 2 1 2') == '2'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == \"Oh no\"\nassert solution('1 3') == \"1\"\nassert solution('3 2') == \"1\"\nassert solution('3 2') == \"Oh no\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2\n3 2\n1 2 1 2\n2 3 1 2''') == '1'\nassert solution('''1 3\n3 2\n1 2 1 2\n2 3 1 2''') == '2'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"Oh no\"\nassert solution(\"\"\"\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"1\""
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\"\nassert solution(\"5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"3\"\nassert solution(\"3 3\\n1 1 1\\n2 2 1\\n3 1 1\\n4 1 2\\n3 2 2\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"4\") == \"3\""
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\\n') == '3'\nassert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\\n') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"5 5\") == \"impossible\"\nassert solution(\"100 100\") == \"impossible\"\nassert solution(\"100 300\") == \"impossible\"\nassert solution(\"100 400\") == \"4\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3'\nassert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == 'impossible'\nassert solution('''\n4 4\n1 2 1\n2 3 1\n3 4 1\n4 1 2\n''') == 'impossible'\nassert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == 'impossible'\nassert solution('''\n1 2 1\n''') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"5 5\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"5 5\") == \"impossible\""
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"5 5\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 2\") == \"3\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n2 1 1 1 3\n''') == '2'\n\nassert solution('''1\n22\n''') == '4'''\n\nn = int(input())\n\nstring = input()\n\nmax_quot_level = 0\n\nwhile True:\n    # print(string)\n    if string[0] == '\"' and string[-1] == '\"':\n        max_quot_level += 1\n        string = string[1:-1]\n    elif string[0] == '\"' and string[-1]!= '\"':\n        while len(string) > 0 and string[-1]!= '\"':\n            string = string[:-1]\n        if len(string) > 0:\n            max_quot_level += 1\n            string = string[1:-1]\n    else:\n        break\nprint(max_quot_level)\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 1 1 1 3\n''') == '2'\nassert solution('''\n1\n22\n''') == '4'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '2'\nassert solution('1') == '1'\nassert solution('22') == '4'\nassert solution('0') == None"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().rstrip()\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 1 3\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"22\") == \"4\""
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('3 1 1 1 3') == '2'\nassert solution('4') == 'no'\nassert solution('2 4') == 'no'\nassert solution('3') == 'no'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n2 1 1 1 3\"\"\") == \"2\"\nassert solution(\"\"\"1\n22\"\"\") == \"4\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('1') == '4'\nassert solution('22') == '4'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n2 3 4''') == '3'\nassert solution('''1\n1 2 3''') == '2'\nassert solution('''2\n1 2 3\n4 5''') == '2'\nassert solution('''2\n3\n4\n5''') == '3'\nassert solution('''3\n3 4\n5\n6''') == '4'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '1\\n'\n    '1 2 3'\n) == '3'\nassert solution(\n    '4\\n'\n    '1 2 3 4'\n) == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\nassert solution('2\\n1 2\\n') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n3 1 5\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == \"1\"\nassert solution('1 2 3 4') == \"2\"\nassert solution('5 4 3 2 1') == \"0\"\nassert solution('7 4 3 2 1 5') == \"1\"\n\n'''"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '2'\nassert solution('2 5 4 1') == '2'\nassert solution('3 5 3 1') == '3'\nassert solution('4 5 3 1') == '2'\nassert solution('5 7 6 5') == '3'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\n3 1 5\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n4\n1 2 3 4\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n3 1 5\n''') == '3'\nassert solution('''4\n1 2 3 4\n''') == '2'"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n3 1 5''') == '3'\nassert solution('''4\n1 2 3 4''') == '2'\nassert solution('''5\n1 2 3 4 5''') == '1'\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"a+b-c\") == \"-+\"\nassert solution(\"a-b+d-c\") == \"--\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('a+b-c') == '+-c'\nassert solution('a-b+d-c') == '-a+d-'\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('a+b-c') == '- +d-','sample test case 1'\nassert solution('a-b+d-c') == '- +d-','sample test case 2'\nassert solution('abcd') == '<any> <empty>','sample test case 3'\nassert solution('abcd') == '<any> <empty>','sample test case 4'\nassert solution('a-b+d-c') == '<any> <empty>','sample test case 5'\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '<any> <empty>'\n\"\"\"\n\nI = input()\nO = input()"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''a+b-c\na-b+d-c''') == '- +d-'\n\nassert solution('''knuth-morris-pratt\nknuthmorrispratt''') == '<any> <empty>'''"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''a+b-c\na-b+d-c\n''') == '- +d-', 'Wrong'\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", \"Test 1 Failed\"\nassert solution(\"a-b+d-c\") == \" - +d-\", \"Test 2 Failed\"\n\n---Input---\nSample Input 1:\n0 0\n0 1\nSample Output 1:\n<empty>\n\nSample Input 2:\n1 1\n0 1\nSample Output 2:\n<any> <any>\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''a+b-c\na-b+d-c\n''') == '- +d-', 'Wrong Answer'\n\n'''\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", 'Expected: \"- +d-\"'\nassert solution(\"a-b+d-c\") == \"+ -d+\", 'Expected: \"+ -d+\"'\nassert solution(\"\") == \"<empty>\", 'Expected: \"<empty>\"'\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.readline().strip()) in {'<any>', '<empty>'}, 'Please fix me!'\n\"\"\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nSample Output 1:\n0\n1\n3\n2\n3\n5\n3\n\nSample Input 2:\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\nSample Output 2:\n11\n6\n5\n9\n4\n3\n7\n9\n9\n10\n''') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\\n'\n\nassert solution(\n'''5 0\n3 2\n5 1\n4 1\n5 2\n4 2\n4 3\n4 4\n4 5\n''') == '2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n'''\n) == '7\\n8\\n9\\n10\\n'''\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\n\"\"\") == \"11\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"4 0\") == \"2\"\nassert solution(\"5 0\") == \"3\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 1') == '1'\nassert solution('3 2') == '2'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"3 0\") == \"1\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"4 1\") == \"5\"\nassert solution(\"4 2\") == \"4\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\n\"\n) == \"0\\n1\\n3\\n2\\n3\\n5\\n3\\n7\\n9\\n9\\n10\\n\"\n\nassert solution(\n    \"3 0\\n2 6 6\\n10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\\n\"\n) == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\\n\""
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"0\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 0\") == \"2\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1\\nt 2 6 6\\n10') == '3'\nassert solution('3 0\\nt 1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '9'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\n7\\nt 8\\nt 9\\nt 10\\n') == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n7\\n9\\n9\\n10\\n'\n\nassert solution('3 0\\n2 6 6\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\n7\\nt 8\\nt 9\\nt 10\\n') == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\\n'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n\"\"\") == \"0\""
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 8') == '2'\nassert solution('5 6') == '0'"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 8') == '2'\nassert solution('5 6') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '0'\nassert solution('2 3') == '1'\nassert solution('7 8') == '2'\nassert solution('5 6') == '0'\nassert solution('7 8') == '0'"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1''') == '0\n\nassert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6''') == '2 4 6'''\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '2\\n4 6'\nassert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '2\\n4 6'"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\"\"\") == \"2 4 6\"\nassert solution(\"\"\"10 6\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n6 8 2\n7 9 1\n8 10 3\n9 10 4\"\"\") == \"5 6 8 7 9\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n''') == '2'\n\nassert solution('''\n5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n''') == '4, 6'"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3') == '1 2 3\\n1 1 2\\n1 1 3\\n'\nassert solution('5\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3') == '1 1 1 2 2\\n1 1 2 1 3\\n1 2 1 2 3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '1 2 3 1 1 2 3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n\") == \"1\\n2\\n3\\n4\\n5\\n6\\n\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n''') == '1'\n\nassert solution('''\n1\n2 1\n3 1\n''') == '3'\n\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '2'\n\nassert solution('''\n10\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n4 1\n4 2\n4 3\n5 1\n5 2\n5 3\n6 1\n6 2\n6 3\n7 1\n7 2\n7 3\n8 1\n8 2\n8 3\n9 1\n9 2\n9 3\n10 1\n10 2\n10 3\n11 1\n11 2\n11 3\n12 1\n12 2\n12 3\n''') == '5'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 1\") == \"3\"\nassert solution(\"1 1\") == \"4\"\nassert solution(\"1 1\") == \"5\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '4'\nassert solution('2 1') == '5'\nassert solution('1 2') == '6'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6'\n) == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution(\n    '6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6'\n) == '1\\n2\\n3\\n1\\n2\\n3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '4'\nassert solution('1 1 2') == '5'\nassert solution('2 1 1 2 3') == '6'"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"4\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"1 3\") == \"6\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '4'\nassert solution('1 2') == '5'\nassert solution('1 3') == '6'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\nassert solution(\"P\") == \"1\"\nassert solution(\"PCCCC\") == \"3\"\nassert solution(\"PCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('CCCP') == '1'\nassert solution('PPPP') == '8'\nassert solution('PPPPCCCC') == '19'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\nassert solution('CPCCP') == '1'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('CPCC') == \"1\"\nassert solution('PPPPCCCC') == \"8\"\nassert solution('CSCC') == \"4\"\nassert solution('PP') == \"2\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\""
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''CPCC''') == '1'\nassert solution('''PPPCCCC''') == '8'\nprint('PASSED')"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '1 2 3'\nassert solution('3 2 1') == '1 2 3'\nassert solution('3 2 2') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 2 1\n1 3\n2 3\n3\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"3 2 1\n1 2\n2 3\n1\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"3 2 1\n1 2\n3 2\n3\n\"\"\") == \"2 3\""
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2 1\n1 2\n2 3\n2''') == '1 2 3'\nprint(\"First Test Completed. \u2714\ufe0f\")\n\nassert solution('''3 2 1\n1 3\n2 3\n3\nSample Input 3:\n3 2 1\n1 2\n2 3\n2\nSample Output 3:\n3\n''') == '3'\nprint(\"Second Test Completed. \u2714\ufe0f\")\n\nassert solution('''3 2 1\n1 3\n2 3\n3\nSample Input 4:\n3 2 1\n1 3\n2 3\n4\nSample Output 4:\n4\n''') == '4'\nprint(\"Third Test Completed. \u2714\ufe0f\")\n\nassert solution('''3 2 1\n1 3\n2 3\n3\nSample Input 5:\n3 2 1\n1 3\n2 3\n4\nSample Output 5:\n3\n''') == '3'\nprint(\"Fourth Test Completed. \u2714\ufe0f\")\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\\n1 3\\n2 3\\n2\") == \"1 2 3\"\nassert solution(\"1 2 1\\n1 3\\n2 3\\n2\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n2\") == \"1 2 3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2 1\n1 2\n2 3\n2\n''') == '1 2 3'\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '1 2 3'\nassert solution('''\n1 5 2\n1 1\n1 2\n1 3\n1 4\n''') == '1 2 3'\nassert solution('''\n4 6 2\n1 3\n2 4\n3 5\n1 5\n3 4\n1 2\n3 2\n4 2\n4 2\n1 5\n''') == '1 2 3'\nassert solution('''\n4 6 2\n1 3\n2 4\n3 5\n1 5\n3 4\n1 2\n3 2\n4 2\n4 2\n1 5\n5 5\n1 6\n6 6\n1 7\n7 7\n1 8\n8 8\n1 9\n9 9\n1 10\n10 10\n1 11\n11 11\n''') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2 1\n1 3\n2 3\n3\n2\n''') == '1 2 3'\nassert solution('''2\n4\n''') == '4'\nassert solution('''3\n2\n1\n4\n''') == '2 1 4'"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1') == '1 2 3'\n\nassert solution('3 2 1') == '1 2 3'\n\nassert solution('3 2 1') == '1 2 3'\n\nassert solution('3 2 1') == '1 2 3'\n\nassert solution('3 2 1') == '1 2 3'"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2 1\n1 3\n2 3\n3\nSample Input 3:\n3 2 1\n1 2\n2 3\n1\nSample Output 3:\n1 2 3\n''') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 1\\n1 3\\n2 3\\n2') == '1 2 3'\nassert solution('3 2 1\\n1 2\\n2 3\\n3') == '1 2 3'\nassert solution('3 2 1\\n1 3\\n2 3\\n3') == '1 2 3'\nassert solution('3 2 1\\n1 3\\n2 3\\n4') == '1 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 1\\n1 3\\n2 3\\n2\\n') == '1 2 3'\nassert solution('3 2 1\\n1 3\\n2 3\\n3\\n') == '1 2 3'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"39\"\nassert solution(\"5 1\") == \"4\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '39'\nassert solution('5 1') == '4'\nassert solution('1 0 1 1 1') == '4'\nassert solution('10 50 2 2 2') == '5'\nassert solution('10 200 2 2 2') == '100'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n2 4 2 3 4\n''') == '39', \"Wrong\"\nassert solution('''\n5 1\n1 0 1 1 1\n''') == '4', \"Wrong\"\nassert solution('''\n10 5\n2 5 2 8 7 6 9 3 1 5 2 4\n''') == '27', \"Wrong\"\nassert solution('''\n10 10\n7 7 7 7 7 7 7 7 7 7\n''') == '10', \"Wrong\"\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9\n''') == '3', \"Wrong\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"39\", \"First\"\nassert solution(\"5 1\") == \"4\", \"Second\"\nprint(f\"The task is solved! All tests are passed!\")\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '39', solution('5 3')\nassert solution('5 1') == '4', solution('5 1')"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '4'\nassert solution('1 1 1') == '2'\nassert solution('2 4 2 4') == '9'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n2 4 2 3 4\\n') == '39'\nassert solution('5 1\\n1 0 1 1 1\\n') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\nassert solution('1 2\\n1 2') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"4\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '39'\nassert solution('1 1') == '4'\nassert solution('10 1') == '1'\nassert solution('100 1') == '0'\nassert solution('10000 1') == '1'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3\n.xx\nxx.x\nxx''') == '1 1 2'\nassert solution('''4 6\n.xx..\nx.xxx\n..xx.\nxx.xxx\nxx''') == '1 4 3'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(s) == '2 2 1'\nassert solution(s) == '1 3 3'"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\nxx.\nxxx\n...\n''') == \"1 1 2\"\nassert solution('''4 6\nxx....\nxx.xxx\n...xxx\n...xxx\n''') == \"1 2 2\"\nprint(solution('''3 4\n.x.x.\nxx.x.\nxxx\nxx.x.\n'''))\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\nxx.\nxxx\n...\nSample Output 1:\n1 1 2\n2 3 1\n\nSample Input 2:\n4 6\nxx....\nxx.xxx\n...xxx\n...xxx\nSample Output 2:\n1 1 2\n2 4 3''') == '''1 1 2\n2 4 3'''\nassert solution('''10 10\nxxxxxx\nxxxxxx\nxxxxxx\nxxxxxx\nxxxxxx\nxxxxxx\nxxxxxx\nxxxxxx\nxxxxxx\nxxxxxx\nxxxxxx''') == '''1 1 2\n2 5 1\n3 6 1\n4 9 2\n5 10 3\n6 11 4\n7 12 5\n8 13 6\n9 14 7\n10 15 8'''\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 2 1'"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\nxx.\nxxx\n...\n''') == '1 1 2'\n\nassert solution('''\n4 6\nxx....\nxx.xxx\n...xxx\n...xxx\n''') == '1 1 2'\n\nassert solution('''\n5 5\nxxx...\nxx.x..\n...xxx\nxx.xx.\n''') == '1 3 2'\n\nassert solution('''\n7 7\nxx.xxx.\n...xxx.\nxxx.xx.\nxx.xx.x\n...xx.x\nxxx..xx\nxxxxx.\n''') == '2 6 2'\n\nassert solution('''\n6 6\nxxx.\nxx..\n...x\n...x\n...x\n...x\nxxx.\n''') == '2 6 2'"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"1 1 2\\n2 4 3\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"1 1 2\"\nassert solution(\"4 6\") == \"1 2 4 3\"\nassert solution(\"1 4 1\") == \"1 4 3\"\nassert solution(\"3 5\") == \"2 2 1\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"1 1 2\"\nassert solution(\"4 6\") == \"1 2 3\"\n\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nQ. Find all pairs of integers in a list which add up to a specific number.\n\nFind all pairs of integers in a list which add up to a specific number.\n\nGiven a list of integers and a number \u2018k\u2019, the task is to print all pairs of integers from the list which add up to \u2018k\u2019. If no such pairs exist, then print \u201cNo such pair exists\u201d.\n\nInput:\nThe first line contains an integer T, denoting the number of test cases. Then T test cases follow.\nEach test case consists of an integer N denoting the size of the list and a number \u2018K\u2019.\n\nOutput:\nFor each test case, output \u201cNo such pair exists\u201d if no such pair exists else print all pairs in a single line with each pair separated by a space.\n\nConstraints:\n1 <= T <= 100\n1 <= N <= 105\n1 <= K <= 109\n\nExample:\nInput:\n2\n5 3\n6\n\nOutput:\n1 2\n3 4\n\nExplanation:\nTestcase 1: 1 + 2 = 3 so 1 and 2 are printed.\n\"\"\""
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\nx.\nxxx\n...\n''') == '1 1 2'\n\nassert solution('''\n4 6\nxx...\nxx.xxx\n...xxx\n...xxx\n''') == '1 4 3'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1 2') == '0'\nassert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '1'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 2') == '0'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 2') == 'indistinguishable'\nassert solution('3 0 2') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 2\\n1 2 1\\n0 2 0\\n0 1 0') == '0'\nassert solution('2 0 1\\n1 1 1\\n0 0 0') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"indistinguishable\"\nassert solution(\"2 0 1\") == \"0\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0') == '-1'\nassert solution('1') == '1'\nassert solution('010') == '1111'\nassert solution('1001') == '0111'\nassert solution('0110') == '1111'"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"0\") == \"-1\""
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n0\n1\n''') == '-1'\n\nassert solution('''\n0\n0\n''') == '0'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0') == '-1', \"Wrong!\"\nassert solution('1') == '1111', \"Wrong!\"\nassert solution('10') == '1111', \"Wrong!\"\nassert solution('01') == '1110', \"Wrong!\"\nassert solution('111') == '1111', \"Wrong!\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n'''\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0\\n1') == '-1'\nassert solution('01\\n10') == '1111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0\") == \"-\"\nassert solution(\"1\") == \"1111\"\nassert solution(\"10\") == \"1110\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('0') == '-1'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n''') == '+0-'\nassert solution('''\n-1\n''') == '-1+'\nassert solution('''\n-1\n''') == '+1-0'"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0000') == '+0000'\nassert solution('1111') == '+000-'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"-1\") == \"-\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"+1\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"+1\"\nassert solution(\"10000\") == \"+0000\"\nassert solution(\"-1\") == \"-1\"\nassert solution(\"-1000000\") == \"-010000\"\nassert solution(\"-1000000000\") == \"-01000000\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '+0'\nassert solution('11') == '+1'\nassert solution('1000') == '+00'\nassert solution('1001') == '+01'\nassert solution('010000') == '+0-0'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    10000\n''') == '+0000'\nassert solution('''\n    1111\n''') == '+000-'"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'\n\n------------------------------------------------------------\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10000\") == \"+0000\"\nassert solution(\"1111\") == \"+000-\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\\\n100000\\\n''') == '+0000'\n\"\"\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"+0000\") == \"+0000\"\nassert solution(\"+000000\") == \"+000000\"\nassert solution(\"+0+0+0\") == \"+0+0+0\"\nassert solution(\"+1+1+1\") == \"+1+1+1\"\nassert solution(\"+1+1+1+1\") == \"+1+1+1+1\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n\"\"\") == \"9\"\nassert solution(\"\"\"\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n\"\"\") == \"\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 1\\n2 2\\n1\") == \"2\"\nassert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n\") == \"9\"\nassert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n\") == \"9\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n'\n) == '9'\nassert solution(\n    '2 1 1 1\\n2 2\\n1'\n) == '2'"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9', 'First'\nassert solution('''\n2 1 1 1\n2 2\n1\n1\n1 2 1\n''') == '2', 'Second'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n''') == '1'\nassert solution('''\n4 2\n1 3\n4 5\n7 6\n''') == '7'\nassert solution('''\n2 2\n1 1\n3 3\n''') == '1'\nassert solution('''\n2 2\n1 1\n1 2\n''') == '2'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == \"9\"\nassert solution('''4 5\n1 2\n3 4\n3 1\n2 3\n''') == \"4\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 8 3 2') == '9'\nassert solution('1 2') == '2'\nassert solution('7 3 4') == '10'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9', \"Should be 9\"\nassert solution('''\n2 1 1 1\n2 2\n1\n1\n1 2 1\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '10', \"Should be 10\"\nassert solution('''\n1 1 1 1\n2 2\n1\n1\n1 2 1\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '14', \"Should be 14\"\nassert solution('''\n1 1 1 1\n2 2\n1\n1\n1 2 1\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '18', \"Should be 18\"\nassert solution('''\n1 1 1 1\n2 2\n1\n1\n1 2 1\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '18', \"Should be 18\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 8 3 2') == '9'\nassert solution('2 1 1 1') == '2'\nassert solution('1') == ''\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1\") == \"2\"\nassert solution(\"3 4 2\") == \"7\"\nassert solution(\"9 9 1\") == \"1\"\nassert solution(\"6 6 2\") == \"1\""
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3 1\n2 2\n1 1 R\n010\n000\n000\n''') == '2'\nassert solution('''\n3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n''') == '7'\nassert solution('''\n1 1 R\n010\n000\n''') == '1'\nassert solution('''\n1 1 U\n010\n000\n''') == '0'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 3 2') == '7'\nassert solution('2 1 2') == '-1'\nassert solution('3 4 2') == '8'\nassert solution('3 4 3') == '5'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 1\n2 2\n1 1 R\n010\n000\n000\n''') == '2'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010\n000\n000''') == '2'\nassert solution('''3 3 1\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 3:\n5"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\\n') == '2'\n\nassert solution('5 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\\n') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 4 2') == '7'\nassert solution('3 6 3') == '-1'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 4 2') == '7'"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R''') == '2'\nassert solution('''3 3 2\n1 2\n3 2 R\n10\n10''') == '2'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1\") == \"2\", \"Should work for sample case\"\nassert solution(\"3 4 2\") == \"7\", \"Should work for sample case\"\nassert solution(\"6 4 5 2\") == \"44\", \"Should work for sample case\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\nassert solution('1\\n1') == '1'\nassert solution('8\\n1 2 4 1 1 2 5 1') == '4'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n2 2 1 2 3\n''') == '2'\nassert solution('''8\n1 2 4 1 1 2 5 1\n''') == '4'''\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 4 1 1 2 5 1') == '4'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\nassert solution(\"8\\n1 2 4 1 1 2 5 1\") == \"4\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 2 1 2 3\n''') == '2'\nassert solution('''8\n1 2 4 1 1 2 5 1\n''') == '4'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n2 2 1 2 3\n''') == '2'\nassert solution('''8\n1 2 4 1 1 2 5 1\n''') == '4'''"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\n\"\"\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == 'NE'\nassert solution('''6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == '1'\n'''"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3') == '3\\n1\\nNE\\nNE'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4') == '1\\n2\\nNE\\nNE'\nassert solution('6\\nD 2 2\\nD 8 8\\nD 5 6\\nP 2\\nD 6 2\\nP 4') == '1\\n2\\nNE\\nNE'\nassert solution('6\\nD 2 2\\nD 8 8\\nD 5 6\\nP 2\\nP 4') == '3\\n1\\n1\\nNE\\nNE'\nassert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3') == '1\\n1\\n1\\n1\\n1\\n1\\nNE\\nNE'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'NE'\nassert solution('3') == '1'\nprint('All tests passed!')"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == 'NE'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n') == '3'\nassert solution('0\\n') == 'NE'"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3') == 'NE'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4') == '1'"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"NE\"\nassert solution(\"\"\"\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"3 1\"\n\nassert solution(\"\"\"\n2\nD 1 3\nP 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\nD 1 3\nP 2\n\"\"\") == \"NE\"\n\nassert solution(\"\"\"\n2\nD 1 3\nP 2\n\"\"\") == \"1\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\", \"Test 1 fail\"\nassert solution(\"6\") == \"1\", \"Test 2 fail\"\nassert solution(\"\") == \"\", \"Test 3 fail\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == 'NE'\nassert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == '2'\nassert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == '1'\nassert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == 'NE'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n') == '2'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"NE\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == 'NE'\n\nprint('Day 2 - Part 2 - From the start to the end. This is a freaking Halloween!')"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2 1 10\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\\n1 4\") == \"5\"\nassert solution(\"1 2\\n1 4\\n1 2\") == \"5\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''2 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 1 10') == '2'\nassert solution('3 2 3 9') == '5'"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''2 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 2 1 10\n0 0\n1 4\n3 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''2 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '5'"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == '2'\nassert solution(\"2 3 5 6\") == '5'\nassert solution(\"2 2 1 10\") == '2'"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 5 6') == '5'\nassert solution('2 2 1 10') == '2'\nassert solution('3 1 2 1') == '3'\nassert solution('1 2 3') == '2'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''3 4 6\n1 1\n1 1 6\n1 2 2\n''') == '5'\nassert solution('''7 7 7\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == '7'\n\n'''\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '5'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n\"\"\") == \"2.0000000000\"\nassert solution(\"\"\"\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n\"\"\") == \"2.0000000000\"\nassert solution(\"\"\"\n3\n-1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n\"\"\") == \"2.0000000000\"\nassert solution(\"\"\"\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n\"\"\") == \"2.0000000000\"\nassert solution(\"\"\"\n2\n1.4 1.0 0.0\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n\"\"\") == \"2.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\\n') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\\n') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2.0000000000'\nassert solution('5') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n\"\"\") == \"2.0000000000\"\nprint(solution(input()))\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\\n\") == \"2.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\nassert solution('''\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n''') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.0 0.0 1.4') == '2.0000000000'\nassert solution('-1.0 0.0 -1.4') == '2.0000000000'\nassert solution('0.0 1.0 -0.2') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2.0000000000'\nassert solution('5') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\nassert solution(\"5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\") == \"2.0000000000\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '5'"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"5\"\nprint(solution.__doc__)\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 9 5\n1 100 10''') == '9 19'\nassert solution('''1 100 100\n1 0''') == '100 100'\nassert solution('''1 100 1\n1 0''') == '0 1'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 9 5\n1 100 10\n1 100 10''') == '1\\n5\\n'''"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"0\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"1 100 5\") == \"4\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('4 1 2 3 4') == '4 4 2 4 4 1 4'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 5\n1 2 3 4 5\n4 3 2 1\n1 2''') == '4 5 4 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1\n2\n''') == '1'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5\\n2 1 2 4 4\\n3 3 2 1') == '3 7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1\n1\n1\n''') == '1'\nassert solution('''4 5\n4 1 2 4 4\n4 3 2 1\n''') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\\\n1 1\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\\\n4 5\n4 1 2 4 4\n4 3 2 1\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 10 3 2\n''') == '4'\nassert solution('''\n1 10 1 2\n''') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\nassert solution('2 1 100 2') == '2'\nassert solution('10 100 3 2') == '1'\nassert solution('2 1 100 100 2') == '100'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([2, 10, 3, 2]) == '4'\nassert solution([10, 10, 5, 0]) == '10'"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\nassert solution('10 0 3 2') == '10'\nassert solution('5 5 2 2') == '5'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('4 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INPUT_S) == OUTPUT_S\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'\n\nstdin = \"\"\"5 20 9\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"2 10 3\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1 20\n0123456789\n''') == '10'\nassert solution('''6 100 9294\n23689\n''') == '111'''\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 1 20\n0123456789''') == '10'\nassert solution('''6 100 9294\n23689''') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 1 20\n0123456789\n\"\"\") == \"10\"\nassert solution(\"\"\"\n6 100 9294\n23689\n\"\"\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 20') == \"10\"\nassert solution('6 100 9294') == \"111\""
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '2 1 20'\n    ) == '10'\nassert solution(\n    '6 100 9294'\n    ) == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 20') == '10'\nassert solution('2 1 20') == '10'\nassert solution('3 1 20') == '10'\nassert solution('4 1 20') == '10'\nassert solution('5 1 20') == '10'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"1.500000 2.666667\"\nassert solution(\"6 3\") == \"1.500000 3.666667\"\nassert solution(\"10 3\") == \"1.500000 3.666667\"\nassert solution(\"5 2\") == \"1.500000 3.666667\"\nassert solution(\"6 2\") == \"1.500000 3.666667\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"1.500000 2.666667\"\nassert solution(\"5 2\") == \"1.500000 3.666667\""
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\nassert solution(\"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\\n') == '1.500000 2.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 2.666667'\nassert solution('3\\n1 S 1\\n2 R 2\\n3 S 2') == '1.500000 2.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 3\"\n) == \"1.500000 2.666667\"\nassert solution(\n    \"4 4\"\n) == \"0.500000 1.500000\"\nassert solution(\n    \"1 1\"\n) == \"0.000000 0.000000\"\nassert solution(\n    \"1 2\"\n) == \"0.000000 1.000000\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 2.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 2.666667'\nassert solution('''\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"3\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n100\n''') == '1'\nassert solution('''\n2\n100\n''') == '2'\nassert solution('''\n3\n100\n''') == '3'\nassert solution('''\n4\n100\n''') == '4'\nassert solution('''\n5\n100\n''') == '4'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 6') == '3'\nassert solution('4 5') == '3'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"3\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"4 6\") == \"-1\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 6\\n101010\\n111001\\n101001\\n') == '3'\nassert solution('4 5\\n10010\\n01010\\n10101\\n01001\\n') == '3'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"3\"\n\"\"\"\n\n\"\"\"\nThis is a Python3 program to find the size of the largest square killer in a given \nmemory layout.  \n\nInput Format:\nThe first line of input contains the number of rows and columns of the memory. \nThe second line of input contains the characters in the memory. \nThe third line contains an integer, $R$, the number of rows in the memory. \nThe fourth line contains an integer, $C$, the number of columns in the memory. \n\nOutput Format:\nOutput the size of the largest square killer on a single line, or output $-1$ if there are no square killers.\n\nConstraints:\n\n1 <= R, C <= 300\n1 <= R*C <= 300\nAll characters are either 0 or 1\n\nSample Input 1:\n3 6\n101010\n111001\n101001\nSample Output 1:\n3\n\nSample Input 2:\n4 5\n10010\n01010\n10101\n01001\nSample Output 2:\n3\n\nSample Input 3:\n2 3\n101\n10\nSample Output 3:\n-1\n\"\"\""
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 5\n10010\n01010\n10101\n01001''') == \"3\"\nassert solution('''3 3\n10010\n01010\n10101\n01001''') == \"3\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 6\n101010\n111001\n101001\n''') == '3'\nassert solution('''\n4 5\n10010\n01010\n10101\n01001\n''') == '3'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"3\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"./test.in\") == \"1\"\nassert solution(\"./test2.in\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1'\nassert solution('''\n4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n2 4\\n6 -1\\n3 5\\n-1 -1') == '3 4'\nassert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0') == '-3 -1'"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '-3 -1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '-3 -1'\nassert solution('3') == '3 1'"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1'\nassert solution('''\n4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4'\nassert solution('''\n10\n0 0\n0 1\n1 0\n0 -1\n-1 0\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '-7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 -23 -24 -25 -26 -27 -28 -29 -30 -31 -32 -33 -34 -35 -36 -37 -38 -39 -40 -41 -42 -43 -44 -45 -46 -47 -48 -49 -50 -51 -52 -53 -54 -55 -56 -57 -58 -59 -60 -61 -62 -63 -64 -65 -66 -67 -68 -69 -70 -71 -72 -73 -74 -75 -76 -77 -78 -79 -80 -81 -82 -83 -84 -85 -86 -87 -88 -89 -90 -91 -92 -93 -94 -95 -96 -97 -98 -99 -100 -101 -102 -103 -104 -105 -106 -107 -108 -109 -110 -111 -112 -113 -114 -115 -116 -117 -118 -119 -120 -121 -122 -123 -124 -125 -126 -127 -128 -129 -130 -131 -132 -133 -134 -135 -136 -137 -138 -139 -140 -141 -142 -143 -144 -145 -146 -147 -148 -149 -150 -151 -152 -153 -154 -155 -156 -157 -158 -159 -160 -161 -162 -163 -164 -165 -166 -167 -168 -169 -170 -171 -172 -173 -174 -175 -176 -177 -178 -179 -180 -181 -182 -183 -184 -185 -186 -187 -188 -189 -190 -191 -192 -193 -194 -195 -196 -197 -198 -199 -200 -201 -202 -203 -204 -205 -206 -207 -208 -209 -210 -211 -212 -213 -214 -215 -216 -217 -218 -219 -220 -221 -222 -223 -224 -225 -226 -227 -228 -229 -230 -231 -232 -233 -234 -235 -236 -237 -238 -239 -240 -241 -242 -243 -244 -245 -246 -247 -248 -249 -250 -251 -252 -253 -254 -255 -256 -257 -258 -259 -260 -261 -262 -263 -264 -265 -266 -267 -268 -269 -270 -271 -272 -273 -274 -275 -276 -277 -278 -279 -280 -281 -282 -283 -284 -285 -286 -287 -288 -289 -290 -291 -292 -293 -294 -295 -296 -297 -298 -299 -300 -301 -302 -303 -304 -305 -306 -307 -308 -309 -310 -311 -312 -313 -314 -315 -316 -317 -318 -319 -320 -321 -322 -323 -324 -325 -326 -327 -328 -329 -330 -331 -332 -333 -334 -335 -336 -337 -338 -339 -340 -341 -342 -343 -344 -345 -346 -347 -348 -349 -350 -351 -352 -353 -354 -355 -356 -357 -358 -359 -360 -361 -362 -363 -364 -365 -366 -367 -368 -369 -370 -371 -372 -373 -374 -375 -376 -377 -378 -379 -380 -381 -382 -383 -384 -385 -386 -387 -388 -389 -390 -391 -392 -393 -394 -395 -396 -397 -398 -399 -400 -401 -402 -403 -404 -405 -406 -407 -408 -409 -410 -411 -412 -413 -414 -415 -416 -417 -418 -419 -420 -421 -422 -423 -424 -425 -426 -427 -428 -429 -430 -431 -432 -433 -434 -435 -436 -437 -438 -439 -440 -441 -442 -443 -444 -445 -446 -447 -448 -449 -450 -451 -452 -453 -454 -455 -456 -457 -458 -459 -460 -461 -462 -463 -464 -465 -466 -467 -468 -469 -470 -471 -472 -473 -474 -475 -476 -477 -478 -479 -480 -481 -482 -483 -484 -485 -486 -487 -488 -489 -490 -491 -492 -493 -494 -495 -496 -497 -498 -499 -500 -501 -502 -503 -504 -505 -506 -507 -508 -509 -510 -511 -512 -513 -514 -515 -516 -517 -518 -519 -520 -521 -522 -523 -524 -525 -526 -527 -528 -529 -530 -531 -532 -533 -534 -535 -536 -537 -538 -539 -540 -541 -542 -543 -544 -545 -546 -547 -548 -549 -550 -551 -552 -553 -554 -555 -556 -557 -558 -559 -560 -561 -562 -563 -564 -565 -566 -567 -568 -569 -570 -571 -572 -573 -574 -575 -576 -577 -578 -579 -580 -581 -582 -583 -584 -585 -586 -587 -588 -589 -590 -591 -592 -593 -594 -595 -596 -597 -598 -599 -600 -601 -602 -603 -604 -605 -606 -607 -608 -609 -610 -611 -612 -613 -614 -615 -616 -617 -618 -619 -620 -621 -622 -623 -624 -625 -626 -627 -628 -629 -630 -631 -632 -633 -634 -635 -636 -637 -638 -639 -640 -641 -642 -643 -644 -645 -646 -647 -648"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0') == '-3 -1'\nassert solution('4\\n2 4\\n6 -1\\n3 5\\n-1 -1') == '3 4'\nassert solution('1\\n0 0') == '1 0'\nassert solution('2\\n1 2') == '1 1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1'\n\nassert solution('''4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '3 4'\n\"\"\""
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\n2 4\n6 -1\n3 5\n-1 -1\n''') == '''3 4\n3 -1'''\nassert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '''-3 -1\n3 1\n'''\nassert solution('''\n7\n2 4\n6 -1\n3 5\n-1 -1\n-1 0\n-1 -1\n0 0\n''') == '''3 4\n3 -1\n'''\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1'\n\nassert solution('''\n4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1 1'\nassert solution('2') == '2 2'"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2 2.71828'\nassert solution([0, 0]) == '2 2.71828'\nassert solution([2, 0]) == '3 5.086781'\nassert solution([1, 1.5]) == '1 12.715255'\nassert solution([1, 1.5, 4, 8, 16, 32]) == '1 12.715255'\nprint('All tests passed!')"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5') == '2 1.5'\nassert solution('3 0.25 2 45 20') == '1 12.715255'\nassert solution('3 1.5') == '1 3.4999998'\nassert solution('5 3 1.5') == '2 3.4999998'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '4 1.000000000000001'\nassert solution('1.1') == '0 0.9999999999999997'\nassert solution('0') == '0 0'\nassert solution('2') == '1 1.5'\nassert solution('20') == '20 20.000000000000000000000000000000000000000000001'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 2\n1 1\n3 3\n\"\"\") == \"1 3\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n0 0\n2 0\n1 1.5\n3 4\n5 0''') == '2 5.086781'\nassert solution('''3\n0 0\n2 0\n1 1.5\n3 4\n5 0''') == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2.5 0 0') == '2 4.208333'\nassert solution('4 0 0 0') == '1 1.5'\nassert solution('7 0.5 5 4 2 4 2') == '6 3.5'"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() in [\"1 2.673908\", \"2 3.602084\", \"3 4.526055\"]\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n0 0\n2 0\n1 1.5\n''') == '2 5.086781\\n'\nassert solution('''3\n0 0\n2 0\n1 1.5\n''') == '1 12.715255\\n'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 0\n0 0\n2 0\n1 1.5\n3 1\n2 1\n''') == '2 5.086781'\nassert solution('''\n10 1\n1 0\n2 0\n3 1\n4 2\n5 2\n6 3\n7 4\n8 5\n9 6\n10 7\n11 8\n12 9\n13 10\n14 11\n15 12\n16 13\n17 14\n18 15\n19 16\n20 17\n21 18\n22 19\n23 20\n24 21\n25 22\n26 23\n27 24\n28 25\n29 26\n30 27\n31 28\n32 29\n33 30\n34 31\n35 32\n36 33\n37 34\n38 35\n39 36\n40 37\n41 38\n42 39\n43 40\n44 41\n45 42\n46 43\n47 44\n48 45\n49 46\n50 47\n51 48\n52 49\n53 50\n54 51\n55 52\n56 53\n57 54\n58 55\n59 56\n60 57\n61 58\n62 59\n63 60\n64 61\n65 62\n66 63\n67 64\n68 65\n69 66\n70 67\n71 68\n72 69\n73 70\n74 71\n75 72\n76 73\n77 74\n78 75\n79 76\n80 77\n81 78\n82 79\n83 80\n84 81\n85 82\n86 83\n87 84\n88 85\n89 86\n90 87\n91 88\n92 89\n93 90\n94 91\n95 92\n96 93\n97 94\n98 95\n99 96\n100 97\n101 98\n102 99\n103 100\n104 101\n105 102\n106 103\n107 104\n108 105\n109 106\n110 107\n111 108\n112 109\n113 110\n114 111\n115 112\n116 113\n117 114\n118 115\n119 116\n120 117\n121 118\n122 119\n123 120\n124 121\n125 122\n126 123\n127 124\n128 125\n129 126\n130 127\n131 128\n132 129\n133 130\n134 131\n135 132\n136 133\n137 134\n138 135\n139 136\n140 137\n141 138\n142 139\n143 140\n144 141\n145 142\n146 143\n147 144\n148 145\n149 146\n150 147\n151 148\n152 149\n153 150\n154 151\n155 152\n156 153\n157 154\n158 155\n159 156\n160 157\n161 158\n162 159\n163 160\n164 161\n165 162\n166 163\n167 164\n168 165\n169 166\n170 167\n171 168\n172 169\n173 170\n174 171\n175 172\n176 173\n177 174\n178 175\n179 176\n180 177\n181 178\n182 179\n183 180\n184 181\n185 182\n186 183\n187 184\n188 185\n189 186\n190 187\n191 188\n192 189\n193 190\n194 191\n195 192\n196 193\n197 194\n198 195\n199 196\n200 197\n201 198\n202 199\n203 200\n204 201\n205 202\n206 203\n207 204\n208 205\n209 206\n210 207\n211 208\n212 209\n213 210\n214 211\n215 212\n216 213\n217 214\n218 215\n219 216\n220 217\n221 218\n222 219\n223 220\n224 221\n225 222\n226 223\n227 224\n228 225\n229 226\n230 227\n231 228\n232 229\n233 230\n234 231\n235 232\n236 233\n237 234\n238 235\n239 236\n240 237\n241 238\n242 239\n243 240\n244 241\n245 242\n246 243\n247 244\n248 245\n249 246\n250 247\n251 248\n252 249\n253 250\n254 251\n255 252\n256 253\n257 254\n258 255\n259 256\n260 257\n261 258\n262 259\n263 260\n264 261\n265 262\n266 263\n267 264\n268 265\n269 266\n270 267\n271 268\n272 269\n273 270\n274 271\n275 272\n276 273\n277 274\n278 275\n279 276\n280 277\n281 278\n282 279\n283 280\n284 281\n285 282\n286 283\n287 284\n288 285\n289 286\n290 287\n291 288\n292 289\n293 290\n294 291\n295 292\n296 293\n297 294\n298 295\n299 296\n300 297\n301 298\n302 299\n303 300\n304 301\n305 302\n306 303\n307 304\n308 305\n309 306\n310 307\n311 308\n312 309\n313 310\n314 311\n315 312\n316 313\n317 314\n318 315\n319 316\n320 317\n321 318\n322 319\n323 320\n324 321\n325 322\n326 323\n327 324\n328 325\n329 326\n330 327\n331 328\n332 329\n333 330\n334 331\n335 332\n336 333\n337 334\n338 335\n339 336\n340 337\n341 338\n342 339\n343 340\n344 341\n345 342\n346 343\n347 344\n348 345\n349 346\n350 347\n351 348\n352 349\n353 350\n354 351\n355 352\n356 353\n357 354\n358 355\n359 356\n360 357\n361 358\n362 359\n363 360\n364 361\n365 362\n366 363\n367 364\n368 365\n369 366\n370 367\n371 368\n372 369\n373 370\n374 371\n375 372\n376 373\n377 374\n378 375\n379 376\n380 377\n381 378\n382 379\n383 380\n384 381\n385 382\n386 383\n387 384\n388 385\n389 386\n390 387\n391 388\n392 389\n393 390\n394 391\n395 392\n396 393\n397 394\n398 395\n399 396\n400 397\n401 398\n402 399\n403 400\n404 401\n405 402\n406 403\n407 405"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '8'\nassert solution('''\n3\n1 1 1\n2 2 2\n3 3 3\n''') == '4'\nassert solution('''\n1\n1 1 1\n1 1 1\n''') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0 0 1 0\n0 0 0 1\n1 0 1 1\n''') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1') == '8'\nassert solution('4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\\n4 0 4 4\\n7 0 3 4\\n\"\n) == \"8\"\nassert solution(\n    \"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\\n\"\n) == \"1\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\"\"\") == '8'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(open(\"test_1.txt\")) == \"1\"\nassert solution(open(\"test_2.txt\")) == \"1\""
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n''') == 'impossible'\nassert solution('''\n5\n''') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\nprint(solution(input()))\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n') == 'impossible'\nassert solution('4\\n') == '2 3'\nassert solution('5\\n') == 'impossible'\nassert solution('8\\n') == '5 2'\nassert solution('10\\n') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n') == 'impossible'\nassert solution('7\\n') == '4 3'\nassert solution('10\\n') == 'impossible'\nprint(solution())"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n1\n''') == 'impossible'\nassert solution('''1\n3\n''') == '2 4'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"4 2\"\nassert solution(\"15\") == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"4 3\"\nassert solution(\"10\") == \"impossible\""
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"100\") == \"impossible\"\nassert solution(\"6\") == \"impossible\"\nassert solution(\"7\") == \"impossible\"\nassert solution(\"9\") == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n5\n2\n9\n1\n8\n3\n7''') == 'impossible'\n\nassert solution('''3\n4\n2\n9\n1\n8\n3\n7''') == 'impossible'\n\nassert solution('''5\n4\n2\n3\n1\n8\n7\n''') == '6 4'\n\nassert solution('''9\n6\n2\n3\n1\n5\n8\n4\n7\n''') == 'impossible'\n\nassert solution('''2\n8\n7\n''') == 'impossible'"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == 'impossible'\nassert solution('7') == 'impossible'\nassert solution('11') == 'impossible'\nassert solution('13') == 'impossible'\nassert solution('15') == 'impossible'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\nassert solution('4') == '109'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6\n1\n2\n4\n3\n4\n5\n\"\"\") == \"109\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '16'\n\nassert solution('4') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\n\n'''\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\", \"Try harder\"\nassert solution(\"5\") == \"16\", \"Try harder\"\nassert solution(\"8\") == \"16\", \"Try harder\"\nassert solution(\"10\") == \"16\", \"Try harder\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"16\"\nassert solution(\"\"\"\n4\n2\n4\n1\n4\n\"\"\") == \"109\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1\\n3\\n\") == \"16\"\nassert solution(\"4\\n2\\n4\\n1\\n4\\n\") == \"109\"\nassert solution(\"5\\n1\\n5\\n1\\n5\\n\") == \"110\"\nassert solution(\"10\\n1\\n10\\n1\\n10\\n\") == \"111\"\nassert solution(\"100\\n1\\n100\\n1\\n100\\n\") == \"110\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"16\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n\") == \"3\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n\") == \"5\"\nprint(\"solution()\")\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n5 1\n1 2\n1 2\n1 2\n''') == \"3\", 'First'\nassert solution('''\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == \"5\", 'Second'"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 3') == '5'\nassert solution('5 4 1 1') == '1 3 1'\nassert solution('6 4 1 2 1') == '1 2 2'\nassert solution('6 5 1 1 1') == '1 2 1 2'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 4\n5 1 1\n1 2\n2 3\n4 1\n''') == '3'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n3 3\n5 1\n1 2\n1 2\n1 2\n\"\"\"\n) == \"3\"\nassert solution(\n    \"\"\"\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\nSample Output 3:\n5\n1 3 1\n2 3 2\n4 1 0\n2 4 1\n3 1 0\n\"\"\"\n) == \"5\"\n\nprint(solution(input()))"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\n''')\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([2, 3]) == \"3\"\nassert solution([4, 3]) == \"5\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 3') == '5'\nassert solution('8 5 1 1 2 1 2 1 1') == '1 2 1 1 1 1 1 2 2'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\nassert solution('''\n3 2\n2 3\n''') == '1 2 1'\nassert solution('''\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '1 2 2 2'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"1 2\"\nassert solution(\"2 1\") == \"impossible\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('2 1') == '1'\n\n'''\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == \"1 2\"\nassert solution('''\n2 3\n0 0 1\n0 10 1\n''') == \"impossible\"\nassert solution('''\n2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\nSample Output 3:\n2 1\n''') == \"2 1\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1 2\"\nassert solution(\"2 1\") == \"impossible\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n6 7\\n0 1 1\\n0 2 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1\") == \"1 2\"\nassert solution(\"1 1\\n0 2\") == \"impossible\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('6 7') == '1 2'\nassert solution('0 1 1') == '1 2'\nassert solution('0 2 2') == '1 2'\nassert solution('1 1 3') == '1 2'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1 2\"\nassert solution(\"2 1\") == \"impossible\"\nassert solution(\"1 1\") == \"1 2\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n6 7\\n0 1 1\\n0 2 2\\n1 1 3\\n2 1 2\\n2 2 1\\n3 2 3\\n4 2 1\") == \"1 2\"\nassert solution(\"2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\\nSample Output 2:\") == \"impossible\""
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n\"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n2 3\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n2 1\n0 1 1\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n\"\"\") == \"1 2\""
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '2 1'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1 1'\nassert solution('2') == '2 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"2 4\"\nassert solution(\"20\") == \"4 1\"\nassert solution(\"2020\") == \"5 2\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('12') == '5'\nassert solution('20') == '2'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1 2 3 5'\nassert solution('10') == '2 4 6 8 10'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3 1'\nassert solution('10') == '3 2'\nassert solution('20') == '3 2'\nassert solution('30') == '3 2'\nassert solution('100') == '3 2'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '5 2'\nassert solution('5') == '5 2'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible'\nassert solution('''\n3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\nassert solution('''\n3\n4\n0 chocolate\n1 icecream\n2 cookies\n1 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\nassert solution('''\n4\n4\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\nassert solution('''\n4\n4\n0 chocolate\n1 icecream\n2 cookies\n0 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\nSample Output 3:\nambiguous\n''') == 'impossible'\nassert solution('''4\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\nSample Output 4:\nunique''') == 'unique'\nassert solution('''1\n1\n0''') == 'impossible'\nassert solution('''1\n1\n0''') == 'unique'\nassert solution('''2\n2\n0''') == 'impossible'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible'\nassert solution('''4\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\nSample Output 3:\nunique\n\nSample Input 4:\n6\n1\n0 new\n1 old\n3\na c h o\no l l l l\nSample Output 4:\nambiguous\n\nSample Input 5:\n2\n1\n0\n1\nSample Output 5:\nambiguous\n\nSample Input 6:\n2\n1\n0\n1\nSample Output 6:\nunique\n''') == 'unique'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"3\") == \"unique\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n5\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'impossible', \"First\"\n\nassert solution('''\n2\n5\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique', \"Second\"\n\nassert solution('''\n5\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous', \"Third\""
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\nicecream\\ncookies\\n\") == \"impossible\"\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n\") == \"unique\"\nassert solution(\"1\\n1\\n0 chocolate\\n1 icecream\\n1 cookies\\n0 chocolate\\n1 icecream\\n1 cookies\\n\") == \"impossible\"\nassert solution(\"1\\n4\\n0 chocolate\\n1 icecream\\n1 cookies\\n0 chocolate\\n1 icecream\\n1 cookies\\n\") == \"ambiguous\""
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\nassert solution('''\n5\n5\n0 chocolate\n1 icecream\n2 cookies\n1 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'impossible'\nassert solution('''\n10\n12\n0 chocolate\n1 icecream\n2 cookies\n1 chocolate\n3\nchocolate\nicecream\ncookies\n2 chocolate\n5\nchocolate\nicecream\ncookies\n''') == 'impossible'\n\nSample Input 3:\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\nSample Output 3:\nimpossible\n\nSample Input 4:\n6\n6\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n4\ntomato\nbanana\n5\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'impossible'\nassert solution('1') == 'unique'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream''') == 'impossible'\nassert solution('''4\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\nSample Output 3:\nambiguous\n\nSample Input 4:\n1\n7\n0 a\n1 b\n2 c\n3 d\n4 e\n5 f\n6 g\nSample Output 4:\nunique\n''') == 'unique'\n\nassert solution('''1\n10\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"3\") == \"unique\""
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 5\n''') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 0 10\\n') == '0'\nassert solution('1 2 10\\n') == '1'"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 10\") == \"1\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\""
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 0 10\n''') == '0'\nassert solution('''\n1 2 10\n''') == '1'\nassert solution('''\n2 4 10\n''') == '2'\nassert solution('''\n20 20 10\n''') == '20'\nprint('Congratulations! All test cases passed')\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\nassert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('....................XX..............') == '3 zoom out'\nassert solution('.............XXXX..............') == '1 pan'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n....XX....\n....XX....\n....XX....\n....XX....\n....XX....\n....XX....\n....XX....\n....XX....\n....XX....\n....XX....\n....XX....\n....XX....\n\"\"\") == \"3 zoom out\"\n\nassert solution(\"\"\"\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n\"\"\") == \"1 pan\"\n\nassert solution(\"\"\"\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n......................................................\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n''') == '1 zoom out'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 pan\\n') == \"1 pan\"\nassert solution('1 pan\\n2 pan\\n') == \"1 pan\"\nassert solution('1 pan\\n2 pan\\n3 pan\\n') == \"1 pan\"\nassert solution('1 pan\\n2 pan\\n3 pan\\n4 pan\\n') == \"1 pan\"\nassert solution('1 pan\\n2 pan\\n3 pan\\n4 pan\\n5 pan\\n') == \"1 pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 0 0 3 5 2 5 5 1\") == \"2 pan\"\nassert solution(\"3 5 0 3 5 2 2\") == \"3 zoom out\"\nassert solution(\"4 5 0 3 5 2 2\") == \"4 rotate\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 2:\n3 zoom out\n\"\"\") == \"3 zoom out\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.4 1.6 1.3 2.5 2.3 2.4 2.5 2.6 2.8 3.6 3.7 3.8 4.4 4.5 4.6 4.8') == '1 pan'\nassert solution('1.4 1.6 1.3 2.5 2.3 2.4 2.5 2.6 2.8 3.6 3.7 3.8 4.4 4.5 4.6 4.8') == '3 zoom out'\nassert solution('3.6 3.7 3.8 4.4 4.5 4.6 4.8') == '3 rotate'"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('......XXX....X....XXXXX..X..........XX...XX....XX......XX.....XX..X..XX.....XX.....XX...XX..........XX...XX.....XX...XX.....XX.........XX..........XX...XX.....XX..X..XX.....XX.....XX..........XX......XXX..........XX..........XX...XX.....XX...XX..........XX..........XX..........XX..........XX..................') == '1 zoom out'"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"............................................................\"\n    \"............................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n    \"...................................................................\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 1:\n1 pan\n\nSample Input 3:\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............................................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\nSample Output 2:\n3 zoom out\n''') == '3 zoom out'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8 20\n apples are great!\n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our\n fresh apples!''') == 'apples are great!\\n\\nfresh apples!\\n\\n'\n\nassert solution('''7 7\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++''') ==''\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == \"\"\"++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+   +\"\"\".strip()\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2\\nabcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('5 7\\n+---+\\n+   +') == '+---+\\n+   +'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8 20\n apples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      \n''') == 'apples are great!\\ncheck out our\\nfresh apples!'\nassert solution('''7 7\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\n''') =='   \\n    '\nassert solution('''8 8\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\n''') =='   \\n    '\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8 20\n apples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      \n''') == 'apples are great!\\nfresh apples!'\nassert solution('''7 7\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\n''') ==' '\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8 20\n  apples are great!\n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!''') == 'apples are great!\\ncheck out our\\nfresh apples!'\nassert solution('''7 7\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++''') == '       \\n       '\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 20') == 'apples are great!\\n++++++++++++++++++++\\n+ oranges are      +\\n+ way better!      +\\n+ #oranges>apples  +\\n++++++++++++++++++++\\n check out our      \\n fresh apples!'\nassert solution('7 7') == '+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\\n check out our      \\n fresh apples!'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 20') == 'apples are great!  '\nassert solution('7 7') == '+++++++  +  + + +++ + +++ + +++ +  +++++++ '\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 20\\n''apples are great!  \\n' '++++++++++++++++++++'\n'+ oranges are      +\\n' '+ way better!      +\\n' '+ #oranges>apples  +\\n'\n'++++++++++++++++++++\\n''check out our      +\\n''fresh apples!      ') == 'apples are great!\\n oranges are\\n  way better!\\n ++ oranges\\n +++ +\\n  oranges>apples\\n  check out our      fresh apples!\\n'\n\n\n'''\n\n\n\n'''\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 20') == 'apples are great!\\n' + 'check out our\\nfresh apples!'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('H?\\n') == '1.5'\nassert solution('HH\\n') == '2.0'\nprint('Congratulations! All test cases passed.')\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('H?') == '1.5'\nassert solution('HH') == '2.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H?\") == \"1.5\""
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nH?\nHH\n''') == '1.5'\nassert solution('''\nTHT\nTHH\n''') == '4.0'\nassert solution('''\nTHHT\nTHHH\n''') == '3.0'\nassert solution('''\nTHT\nTHHH\n''') == '2.5'\n\n''')\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('HH') == \"2.0\"\nassert solution('H?') == \"1.5\"\n\"\"\""
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"H?\") == \"1.5\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8\n11111\n11111\n11111\n11111\n11111\n11111\n11111''') == '2'\n\nassert solution('''4\n1111\n1111\n1111\n1111''') == '1'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '1'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1111\n1111\n1111\n1111\n''') == '6'\nprint(solution('''4\n1111\n1111\n1111\n1111\n'''))"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '1'\nassert solution('4\\n1111') == '6'\nassert solution('4\\n1111\\n1111') == '6'\nassert solution('4\\n1111\\n1111\\n1111') == '6'\nassert solution('4\\n1111\\n1111\\n1111\\n1111') == '6'"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n0011\n0011''') == '1'\nassert solution('''4\n0111\n0111\n0111\n0111''') == '6'\nassert solution('''6\n0111\n0111\n0111\n0111\n0111\n0111''') == '7'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"4\") == \"1\""
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0001\n0001\n0011\n1110\n''') == '1'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n111\\n111\\n111\") == \"4\"\nassert solution(\"2\\n0011\\n0011\") == \"2\"\nassert solution(\"10\\n11011110001111001\") == \"5\""
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n0001\n0001\n0011\n1111\n''') == \"1\"\nassert solution('''\n4\n1111\n1111\n1111\n1111\n''') == \"6\""
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\nassert solution(\"10\") == \"4\"\nassert solution(\"100\") == \"3\"\nassert solution(\"11\") == \"10\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\nh 5 1 2\nv 1 2 1\n''') == \"3\"\nassert solution('''5\nh 2 2 4\nh 10 2 2\nv 2 2 3\nv 10 2 1\nh 5 2 1\nv 1 2 1\n''') == \"3\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''h 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nv 1 10 1\nv 5 10 3\n''') == '4'\nprint(solution('''\nh 1 4 1\nh 5 4 2\nv 1 4 1\nv 5 4 3\n'''))\nassert solution('''\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\n''') == '5'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\nh 1 4 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"2\"\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\\n') == '4'\nassert solution('1\\nh 1 4 1\\nv 2 4 2\\nh 5 2 3\\nv 11 2 3\\n') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\nassert solution('4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3') == '4'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n') == '2'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '4'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 4\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n\"\"\") == \"-1\""
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4') == '2'\nassert solution('1 2 3') == '1'\nassert solution('4 5 6') == '0'\nassert solution('7 8 0') == '4'\nassert solution('4 2 3') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8') == '4'\nassert solution('5 5\\n1 2 3\\n4 5 6\\n7 8 0\\n5 2 3\\n3 4 1\\n4 1 5\\n1 3 6\\n0 7 8') == '3'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\") == \"2\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8') == '4'"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 3\n2 3 4\n3 4 5''') == '2'\n\nassert solution('''8\n1 2 1 3 1 3 1 2\n2 3 4\n3 4 5\n4 5 6\n5 6 7\n6 7 8''') == '4'''\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"6\\n\"\n    \"1 2 3 3 4 2\"\n) == \"2\"\nassert solution(\n    \"8\\n\"\n    \"1 2 1 3 1 3 1 2\"\n) == \"4\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 1 3 1\n''') == '2'\nassert solution('''15\n1 1 2 2 2 2 3 3 3 2 2 2 1 1 1 1 2 3 2 2 2 1 3\n''') == '5'\nassert solution('''12\n1 1 1 2 2 2 2 2 2 2\n''') == '5'\nassert solution('''3\n1 1 1\n''') == '0'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n1 2 3 3 4 2') == '2'\nassert solution('8\\n1 2 1 3 1 3 1 2') == '4'\nprint('Solution:')\nprint(solution(*tuple(input().split())))"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"2\"\nassert solution(t) == \"4\"\n'''\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 4 5\n''') == '2'\nassert solution('''6\n1 2 3 4 5 6\n''') == '2'\nassert solution('''7\n1 2 2 3 2 4\n''') == '2'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 3 1 3 1 2\") == \"2\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '3'"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 1 3 1 3 2''') == '2'\nassert solution('''6\n1 2 3 3 4 2''') == '4'''\nassert solution('''8\n1 2 1 3 1 3 1 2''') == '4'''\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n1 2 3 3 4 2\n''') == '2'\nassert solution('''\n8\n1 2 1 3 1 3 1 2\n''') == '4'\nassert solution('''\n6\n1 2 3 3 4 2\n''') == '3'"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2\"\n) == \"4\\n2\"\nassert solution(\n    \"2 2 2\\n1 1 1\\n2 2 2\\n2 2 2 1\\n1 1 1 2\"\n) == \"4\\n2\"\nprint(solution.__doc__)"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n\"\"\"\n) == \"4\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == \"4\"\nassert solution('''\n2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''') == \"2\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '4'\nassert solution('''\n2 3 3\n1 2 1\n1 1 1\n2 1 2\n1 2 1 1\n''') == '6'\n\n'''\nRuntime: 948 ms, faster than 33.95% of Python3 online submissions for N-Queen.\nMemory Usage: 15.3 MB, less than 100.00% of Python3 online submissions for N-Queen.\n'''\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2 1') == '2'\nassert solution('1 1 1 2') == '2'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2 1') == '2'\nassert solution('2 2 2 1 2') == '2'\nassert solution('1 1 1 2') == '1'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '4'\nassert solution('''\n3 3 3\n1 1 1\n1 1 2\n1 1 1 2\n''') == '0'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '4'\n\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2''') == '4'\n\nassert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '0'\n\nassert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '2'\n\nassert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '0'"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\"\nassert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2\\n\") == \"4\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 3\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3 4\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n4 3\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n8 7\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n0 1 3\n1 4\n0 5 6\n7 8\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\") == \"1\"\nassert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"impossible\"\nassert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 1\") == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input_1) == \"1\"\nassert solution(sample_input_2) == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '4 2\\n'\n    '0 0 1 1\\n'\n    '1 0 0 1\\n'\n    '0 1 0 0\\n'\n    '0 0 1 0\\n'\n    '1 2'\n    ) == '1'\nassert solution(\n    '4 2\\n'\n    '0 0 1 1\\n'\n    '1 0 0 1\\n'\n    '0 1 0 0\\n'\n    '0 0 1 0\\n'\n    '1 2\\n'\n    ) == 'impossible'\nassert solution(\n    '10 2\\n'\n    '1 0 2 3 5 7 9\\n'\n    '4 5 6 7 8 9 10\\n'\n    '3 2 5 1\\n'\n    '3 5 4 1\\n'\n    '5 2 3\\n'\n    '7 5 4\\n'\n    '3 1 4 2\\n'\n    '5 2\\n'\n    ) == '2'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\") == \"1\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"impossible\""
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == \"1\"\nassert solution('''\n5 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == \"impossible\"\n\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == \"1\"\nassert solution('''\n5 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == \"impossible\"\n\nassert solution('''\n10 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n0 1\n0 0\n0 1\n1 2\n0 0\n0 1\n''') == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == '1'\nassert solution('5 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == 'impossible'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == '2'"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\") == \"1\"\nprint(solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\nSample Output 2: impossible\"))\nassert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n2\\nSample Output 2: impossible\") == \"impossible\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 4') == '5'\nassert solution('1 5') == '6'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"15\\n8\\n1\\n\"\nprint('All test cases passed!')"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1 1 1\\n2 2 1\\n3 3 1\\n\"\nassert solution(\"5 1\") == \"1 1 1\\n2 2 1\\n3 3 1\\n4 4 1\\n\"\nassert solution(\"5 2\") == \"1 1 1\\n2 2 1\\n3 3 1\\n4 4 1\\n\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"10 4\") == \"35\"\nassert solution(\"10 4 0\") == \"18\"\nassert solution(\"10 4 3\") == \"3\"\nassert solution(\"10 4 5\") == \"1\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"8\\n2\\n1\\n\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 4') == '35'\nassert solution('11 3') == '8'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3') == '8'\nassert solution('2 4') == '18'\nassert solution('1 2') == '3'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(t) == \"12\"\nprint(solution())"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 2 1\") == \"35\"\nassert solution(\"10 4\") == \"18\""
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 2 1') == '35'\nassert solution('11 3') == '18'\nassert solution('10 4') == '35'\nassert solution('1 1 2 1') == '35'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '0'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n4\\n1\\n5\") == \"0\\n1\\n2\\n4\\n6\"\nassert solution(\"3\\n2\\n4\\n1\\n5\") == \"0\\n1\\n2\\n3\\n4\\n5\""
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '0\\n1\\n2\\n4\\n6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\") == \"0\\n1\\n2\\n4\\n6\""
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n1\n2\n3\n4\n''') == '0 1 3 6'\nassert solution('''5\n3\n2\n4\n1\n5\n''') == '0 1 2 4 6'\nassert solution('''3\n1\n2\n''') == '0 1 2'\nassert solution('''3\n1\n3\n''') == '0 1 2'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '0 1 2 3'\nassert solution('5') == '0 1 2 4 6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6''') == '0 1 3 6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1\n2\n3''') == '0 1 3'\nassert solution('''3\n3\n2\n1''') == '0 1 2 3'\nassert solution('''3\n3\n2\n1''') == '0 1 2 3'\nassert solution('''3\n2\n2\n2''') == '0 1 1 2'\nassert solution('''4\n1\n2\n3\n4''') == '0 1 1 2 2 3 3 4 4'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\") == \"0\\n1\\n2\\n4\\n6\""
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 2 2') == '2 4 1 3'\nassert solution('1 1 3 2') == '2 4 1 3'\nassert solution('2 4 7 3') == '4 3 5 3'\nassert solution('3 3 5 3') == '3 3 5 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\") == \"4 3 1 2\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n') == '2 4 1 3'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 3 2 2\") == \"2 4 1 3\"\nassert solution(\"1 1 3 2\") == \"2 4 1 3\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1 3 2 2\n1 1 3 2\n2 4 7 3\n3 3 5 3\n''') == '2 4 1 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '2 4 1 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 0 1 1\n1 2 0 3\n2 2 3 3\n4 0 3 1\n''') == '2 4 1 3'\nassert solution('''\n5\n0 0 1 1\n1 2 0 3\n2 2 3 3\n4 0 3 1\n5 2 1 3\n''') == '1 4 3 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '2 4 1 3'\nassert solution('5') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '1 3 2'\nassert solution('0 0 1 1') == '2 4 1 3'"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins', \"Wrong Answer\"\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins', \"Wrong Answer\""
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\n89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49''') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789TJ\n23456789T"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins', solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5')\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins', solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49')\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'Theta wins'"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\", \"Your result does not match the expected result\"\nprint(solution(input()))\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\n    89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49''') == 'Theta wins'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n\nprint('all tests passed')\n\"\"\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 2\n1 charlatan 1\n1 not charlatan 1\n\"\"\") == \"charlatan\"\nassert solution(\"\"\"\n2 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"fabulist\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\nassert solution('1 10\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1\\n1 not charlatan 1') == 'charlatan'\n\n'''\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2\n1 not charlatan 1\n1 and fabulist 1 fabulist 2\n''') == 'truther'\nassert solution('''\n2 1\n1 not charlatan 1\n1 and fabulist 1 fabulist 2\n''') == 'charlatan'\nassert solution('''\n3 2\n1 not charlatan 1\n2 not charlatan 2\n1 and fabulist 1 fabulist 2\n''') == 'truther'\n'''\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('\\n'.join([\n    '3 1',\n    '1 charlatan 1',\n    '1 not charlatan 1',\n    '1 and fabulist 1',\n    '1 not charlatan 1',\n    '1 and fabulist 1',\n    '1 and not charlatan 1',\n    '1 and not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan 1',\n    '1 or charlatan 1',\n    '1 or charlatan 1',\n    '1 or not charlatan 1',\n    '1 or not fabulist 1',\n    '1 or not charlatan"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('5') == '4'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '4'\nassert solution('3') == '3'"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00''') == '4'\nassert solution('''3\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00''') == '3'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '1\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\\n') == '4'\nassert solution(\n    '2\\n1.00 1.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\\n') == '3'\nassert solution(\n    '1\\n0.00 0.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\\n') == '0'\nassert solution(\n    '4\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\\n') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4', 'Check first example'\nassert solution('2\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '3', 'Check second example'\nassert solution('3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '3', 'Check third example'\nassert solution('4\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4', 'Check fourth example'\nassert solution('5\\n-1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4', 'Check fifth example'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\\n\") == \"4\"\nassert solution(\"3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\\n\") == \"3\"\nassert solution(\"7\\n1.00 -1.00\\n3.00 -1.00\\n-1.00 1.00\\n4.00 -1.00\\n1.00 1.00\\n5.00 -1.00\\n6.00 2.00\\n\") == \"7\"\nassert solution(\"9\\n-1.00 1.00\\n-1.00 2.00\\n-1.00 3.00\\n-1.00 4.00\\n-1.00 5.00\\n-1.00 6.00\\n-1.00 7.00\\n-1.00 8.00\\n-1.00 9.00\\n\") == \"9\"\nassert solution(\"1\\n\") == \"1\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00\n''') == '4'\n\nassert solution('''\n5\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '4'\n\nassert solution('''\n3\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00\n''') == '3'\n\nassert solution('''\n5\n1.00 1.00\n1.00 5.00\n-1.00 2.00\n2.00 5.00\n2.00 1.00\n''') == '2'\n\nassert solution('''\n4\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00\n2.00 5.00\n2.00 1.00\n''') == '2'"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\\n') == '4'\nassert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\\n') == '3'\nassert solution('3\\n1.00 3.00\\n2.00 2.00\\n3.00 1.00\\n') == '3'\nassert solution('3\\n1.00 3.00\\n2.00 2.00\\n3.00 1.00\\n') == '3'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '4'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('1 2 4') == '4'"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 5 2\nR..?.\n.X...\n100 100 7 100 8\n''') == '16'\nassert solution('''\n2 3 1\nX..\n.?.\n10 1000 1\n''') == '10'\nassert solution('''\n2 3 2\nX..\n.?.\n10 1000 1\n''') == '11'\nassert solution('''\n2 3 3\nX..\n.?.\n10 1000 1\n''') == '11'\nassert solution('''\n2 3 2\nX..\n.?.\n10 1000 1\n''') == '11'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\") == \"16\"\nassert solution(\"2 3 1\\nX..\\n.?.\\n10 1000 1\") == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5 2') == '16'\nassert solution('3 1 1') == '10'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3 1\\nX..\\n?.\\n10 1000 1\") == \"10\"\nassert solution(\"2 2 1\\n?.\\n.X\") == \"1\"\nassert solution(\"2 5 2\\nX..\\n.X\\n.X\\n?.\\nX\\nX\") == \"2\"\nassert solution(\"2 5 2\\n.X\\nX..\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n?.\\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2\") == \"16\"\nassert solution(\"3 3 1\") == \"10\"\nassert solution(\"10 1000 1\") == \"10\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 1') == '10'\nassert solution('2 3 1') == '10'\n\n'''\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 1') == '16'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 5 2\nR..?.\n.X...\n100 100 7 100 8\n\"\"\") == \"16\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 5 2\nR..?.\n.X...\n100 100 7 100 8\n''') == '16'\nassert solution('''\n2 3 1\nX..\n.?.\n10 1000 1\n''') == '10'\nassert solution('''\n10 10 5\nX..?.\n..?.\n?.?.\n100 100\n.X...\n.X...\n.X...\n.X...\n.X...\n.X...\n''') == '500'"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n0 4 4\n1 5 1\n2 6 1\n''') == '1.414'\nassert solution('''\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n''') == '5.657'\nassert solution('''\n7 3\n0 0 1\n0 2 3\n0 5 4\n1 0 2\n1 1 3\n5 6 1\n20 20 10\n''') == '3.4845'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0.000\"\nassert solution(\"3 3\") == \"1.000\"\nassert solution(\"3 3\") == \"1.000\"\nassert solution(\"5 5\") == \"1.000\"\nassert solution(\"6 11\") == \"1.657\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1.414'\nassert solution('6 11') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '1.414'\nassert solution('6 11') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n0 4 4\n1 5 1\n2 6 1''') == '1.414'\nassert solution('''6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10''') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\n0 4 4\\n1 5 1\\n2 6 1') == '1.414'\nassert solution('6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n5 5 1\\n20 20 10') == '5.657'"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"0 4 4\\n\"\n    \"1 5 1\\n\"\n    \"2 6 1\"\n) == \"1.414\"\nassert solution(\n    \"6 11\\n\"\n    \"0 0 1\\n\"\n    \"0 1 2\\n\"\n    \"1 0 3\\n\"\n    \"1 1 4\\n\"\n    \"5 5 1\\n\"\n    \"20 20 10\"\n) == \"5.657\"\nassert solution(\n    \"4 6\\n\"\n    \"2 3 4\\n\"\n    \"1 3 1\\n\"\n    \"0 1 2\\n\"\n    \"0 4 1\\n\"\n    \"1 2 2\\n\"\n    \"2 2 1\\n\"\n    \"3 2 2\"\n) == \"2.236\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n0 4 4\n1 5 1\n2 6 1\n''') == '1.414'\nassert solution('''6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n''') == '5.657'\nprint('\"Run\" is the best')"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\"\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\""
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '1.414'\nassert solution('6 11') == '5.657'"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 1 1 1 1\n''') == '1.0'\nassert solution('''\n3 1 1 1\n''') == '0.433'"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 1 1') == '0.433'\nassert solution('3 1 2 3') == '0.6'\nassert solution('3 4 5 6') == '1.2'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 1 1') == '0.433'\nassert solution('3 1 1 1') == '0.433'\n\"\"\""
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 1 1 1\n''') == '1.0'\nassert solution('''\n3 2 1\n''') == '0.25'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 1 1 1 1\n''') == '1.0'\nprint(solution('''\n3 1 1 1\n'''))\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 1 1 1 1\n1\nSample Input 3:\n1 1\nSample Output 3:\n1\n''') == '0.433"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 1 1\") == \"0.433\"\n\nassert solution(\"4 1 1 1 1\") == \"1.0\"\n\nassert solution(\"3 3 3 3\") == \"0.0\"\n\nassert solution(\"3 3 3 3 3\") == \"0.0\""
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1 1 1\") == \"0.433\"\nassert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 2\") == \"0.5\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5'\nassert solution('''\n8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n''') == '36'\nassert solution('''\n5\n1 1\n2 2\n3 3\n4 4\n''') == '5'\nassert solution('''\n2\n2\n1\n''') == '0'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"10 10\") == \"10\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5''') == '5'\nassert solution('''8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15''') == '36'\nprint(solution('''18 7\n1 1 7\n2 2 9\n1 2 4\n2 3 7\n3 2 30\n3 3 5\n3 4 10\n4 2 50\n4 3 20\n4 4 10\n4 5 8\n5 2 8\n5 3 7\n6 2 5\n6 3 1\n6 4 1\n6 5 2'''))"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n') == '5\\n4\\n1 1\\n1 2\\n2 2\\n3 3\\n3 2\\n'\nprint(solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n'))"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 10\") == \"4\"\nassert solution(\"6 5\") == \"5\"\nassert solution(\"8 10\") == \"36\"\nassert solution(\"12 10\") == \"48\"\nassert solution(\"14 10\") == \"72\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 5\") == \"5\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n') == '5\\n4'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == '5'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\nassert solution(\"6 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\nassert solution('5 5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\nassert solution('5 2') == '3'\nassert solution('1 1') == '2'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"5 4\") == \"4\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\nassert solution('''\n1 2\n1 2\n1 2\n''') == '1'\nassert solution('''\n1 3\n1 3\n1 2\n''') == '2'\nassert solution('''\n1 2\n1 3\n2 3\n''') == '2'\n'''\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == \"1\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4 4\n1 2 3 4\n1 3 2 4\n2 3 1 4\n3 2 1 4\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"3\""
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n') == '-1'\nassert solution('6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n') == '5'\nassert solution('6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n\"\"\") == \"5\"\nassert solution(\"\"\"\n6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n\"\"\") == \"5\"\nassert solution(\"\"\"\n10 10\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10 10\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n\"\"\") == \"11\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 8') == '-1'\nassert solution('6 5') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\nassert solution('''6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 8\") == \"-1\"\nassert solution(\"6 5\") == \"5\""
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 8\") == \"-1\"\nassert solution(\"6 5\") == \"5\"\nprint('AOC 2020 Day 12 - Part 1')\nprint('=========================')\ntest(solution, (\"5 8\", -1))\ntest(solution, (\"6 5\", \"5\"))"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n    3 5\n    1 5\n    3 6\n    1 6\n    '''\n    ) == '5'\n\nassert solution(\n    '''\n    6 5\n    2 4\n    3 5\n    1 5\n    3 6\n    1 6\n    '''\n    ) == '-1'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 8\") == \"-1\"\nassert solution(\"6 5\") == \"5\"\nassert solution(\"6 5\") == \"5\""
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 8') == '-1'\nassert solution('6 5') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\nassert solution('''\n4 1\n1 1\n5 1\n5 5\n4 2\n''') == '6.00'\n\n'''\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 1\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\nassert solution('''\n6 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n''') == '9.00'''\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 1\n1 1\n5 1\n5 5\n4 2\n\"\"\") == \"4.00\"\n\nassert solution(\"\"\"\n6 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n\"\"\") == \"9.00\""
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 1') == '4.00'\nassert solution('6 3') == '9.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"4.00\"\nassert solution(\"4 2\") == \"5.00\"\nassert solution(\"6 3\") == \"9.00\"\nassert solution(\"8 -8\") == \"5.00\"\nassert solution(\"0 -1\") == \"5.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 1\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\nassert solution('''\n6 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n''') == '9.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"6 3\") == \"5.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0\\n') == '9.00'\nprint(solution('''5 1\n5 5\n4 2\n8 -8\n1 0\n0 10\n-1 0\nSample Input 3:\n6 3\n8 8\n0 -1\n0 5\n4 -2\n8 -8\n1 0\n0 10\n-1 0\nSample Output 3:\n8.00\n'''))\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"2.00\"\nassert solution(\"4 2\") == \"3.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 1\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\nassert solution('''\n6 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n''') == '9.00'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\\n'''"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3 2') == '2 1 2 3'\nassert solution('3 3 4') == '2 1 2 3'"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"2 1 2 3\"\nassert solution(\"3 3 4\") == \"1 2 1 2\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1''') == '1 2 1 2'\nassert solution('''3 3 4\nPAINT 3 0 0 1 1\nPAINT 3 0 3 3 3\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1''') == '3 1 1'\nassert solution('''5 5 5\nPAINT 3 1 1 1 2\nPAINT 1 3 1 1 2\nSAVE\nPAINT 1 4 1 1 2\nPAINT 2 4 1 1 2\nLOAD 1\n''') == '1 1 1 1 2'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3'\nassert solution('''\n3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\nSample Output 2:\n3 1 1\n1 3 1\n1 1 1\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"3 3 2\") == \"2 1 2 3\", \"Wrong input\"\nassert solution(\"3 3 4\") == \"2 1 2 3\", \"Wrong input\"\nassert solution(\"2 3 3 3 3\") == \"3 1 2 1 2\", \"Wrong input\"\nassert solution(\"2 3 2 2 3\") == \"2 1 2 1 2\", \"Wrong input\""
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 2') == '2 1 2 3'\nassert solution('4 3 2') == '2 1 2 3'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\\n\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\"\nassert solution(\"3 3 4\\nPAINT 3 0 0 1 1\\nSAVE\\nPAINT 2 1 1 2 2\\nLOAD 1\\n\") == \"3 1 1\\n1 3 1\\n1 1 1\\n1 2 1 2\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 2') == '2 1 2'\nassert solution('3 3 4') == '3 1 1 2 2'\nprint('solution()')\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '1 2 3'\nassert solution('4 1') == '1 2 3 4'\nassert solution('5 1') == '-1'"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == '1 4 2 3'\nassert solution(\"5 1\") == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == '1 4 2 3'\nassert solution('5 1') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '1 4 2 3'\nassert solution('5 1') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '1 2 3'\nassert solution('4 3') == '1 2 3'\nassert solution('5 1') == '-1'"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"1 2 3\"\nassert solution(\"5 1\") == \"-1\""
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '-1'\n\nassert solution('2 5 3 4 1') == '1 4 3 2'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"1 4 2 3\"\nassert solution(\"5 1\") == \"-1\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n    5 1\n    '''\n    ) == '1 4 2 3'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '-1'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n4 2\n2 1\n1 3\n''') == '1'\nassert solution('''\n4\n5 0\n2 6\n8 6\n5 7\n''') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n4 2\n2 1\n1 3\n''') == '1', \"1st example\"\nassert solution('''\n4\n5 0\n2 6\n8 6\n5 7\n''') == '0', \"2nd example\"\nassert solution('''\n5\n0 0\n1 1\n3 3\n4 4\n2 2\n''') == '1', \"3rd example\"\nassert solution('''\n1\n-1 -1\n1 1\n''') == '0', \"4th example\"\nassert solution('''\n2\n2 0\n0 2\n''') == '0', \"5th example\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n4 2\n2 1\n1 3''') == '1'\nassert solution('''4\n5 0\n2 6\n8 6\n5 7''') == '0'\nprint('YOUR CODE IS CORRECT!')\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '0'\n'''\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\", \"Test 1 failed\"\nassert solution(\"4\") == \"0\", \"Test 2 failed\"\nassert solution(\"5\") == \"0\", \"Test 3 failed\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\") == \"1\"\nassert solution(\"8 4 2\") == \"0\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n2 2\n1 2\n1 3\n''') == '1'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n4 2\n2 1\n1 3''') == '1'\nassert solution('''4\n5 0\n2 6\n8 6\n5 7''') == '0'\nassert solution('''5\n3 0\n2 1\n1 3\n6 3\n6 6\n''') == '3'\nassert solution('''6\n3 0\n2 1\n1 3\n6 3\n6 6\n5 7\n''') == '6'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\"\nassert solution(\"0 0 1 0\") == \"0 0\"\nassert solution(\"0 0 1 1\") == \"1\"\nassert solution(\"2 1 0 1\") == \"1\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 0 1') == '1000 100'\nassert solution('4 4 0 3') == '4 140'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2 2\") == \"2 1 1\"\nassert solution(\"1 1 0 1\") == \"1 1 1\"\nassert solution(\"2 1 0 1\") == \"2 1 1\"\nassert solution(\"3 2 2\") == \"2 1 1\"\nassert solution(\"2 3 2\") == \"2 1 1\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\n\nassert solution('''\n2 1 0 1\n0 1 1000 100\nSample Output 2:\n1000 100000\n''') == '1000 100000'\n\nassert solution('''\n0 0 0 0\n1 1 2 3\n0 1 2 3\n0 0 1 4\n1 0 2 3\n0 0 1 4\n1 1 1 1\n1 0 1 2\n0 0 1 3\n0 0 0 0\n1 1 1 1\n1 1 1 2\n0 0 1 4\n0 1 1 3\n1 1 2 4\n0 0 0 0\n1 0 1 2\n0 0 1 3\n0 0 0 0\n0 0 0 0\n''') == '0 0 0 0'\n\nassert solution('''\n1 1 1 1\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1 2\n0 0 0 0\n0 0 0 0\n1 0 1 2\n1 1 1 1\n0 0 0 0\n0 0 0 0\n1 0 1"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4 0 3') == '4 140'\nassert solution('2 1 0 1') == '1000 100000'"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4 0 3\\n0 1 4 10\\n1 2 2 10\\n0 2 4 30\\n2 3 4 10') == '4 140'\nassert solution('2 2 0 1\\n0 1 1000 100\\n') == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100000\""
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\""
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 7\n1 4\n1 5\n1 7\n2 4\n3 5\n3 6\n3 7\n4 6\n4 7\n5 7\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6 9\n1 5\n6 3\n3 5\n5 6\n5 4\n3 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10 10\n1 4\n5 8\n3 5\n3 3\n6 9\n4 7\n5 6\n6 5\n7 7\n8 6\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n100 7\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n\"\"\") == \"3\"\nassert solution(\"\"\"\n100 8\n3 6\n6 7\n7 9\n9 10\n8 5\n8 4\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n1 1\n1 1\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n3 4\\n') == '3'\nassert solution('10\\n1 2\\n3 4\\n') == 'impossible'\nassert solution('1\\n1\\n1\\n') == 'impossible'\nassert solution('2\\n1\\n2\\n') == '2'\nassert solution('100\\n40\\n20\\n') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3 4\n4 1\n3 4\n4 5\n''') == '3'\nassert solution('''\n10\n2 5\n3 4\n5 7\n7 8\n4 8\n7 5\n3 6\n6 5\n8 4\n4 9\n7 5\n''') == 'impossible'\nassert solution('''\n100 100\n10 100\n100 100\n''') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100 7') == '3'\nassert solution('8 2') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('\\n'.join(['100 7', '1 50', '50 70', '70 90', '90 40', '20 60', '60 80', '80 20'])) == '3'\nassert solution('\\n'.join(['8 2', '8 3', '5 7'])) == 'impossible'"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"3\"\nassert solution(\"10 10\") == \"2\"\nassert solution(\"5 7\") == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''100 7\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20''') == '3'\nassert solution('''8 2\n8 3\n5 7''') == 'impossible'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('51090942171709440000') == '21'\nassert solution('20') == '2'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\""
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\""
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r\"120\") == \"5\"\nassert solution(r\"51090942171709440000\") == \"21\"\n\"\"\"\nimport math\nn = int(input())\nn = math.factorial(n)\nprint(n)\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\nassert solution('0') == '1'\nassert solution('1') == '1'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"120\") == \"120\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    10 1 2\n    3 3 3\n    ''') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1 2\n3\n7''') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 1') == \"45\"\nassert solution('10 1 2') == \"45\"\nassert solution('3 3 3') == \"10\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\") == \"45\"\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 3') == '45'\nassert solution('10 1 2') == '45'\nassert solution('20 1 1') == '1'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n\"\"\""
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 1 2\n''') == '45'\nassert solution('''\n3 3 3\n''') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 3') == '45'\n\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '45'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n\") == \"20\"\nprint(\"Solution: OK\")\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'impossible'\nassert solution('10') == '20'\n\"\"\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 1\n4 1\n5 9\n2 6\n5 3\n10\nSample Input 3:\n5\n1 1\n4 1\n5 9\n2 6\n5 3\n9\nSample Output 3:\n9\n''') == 'impossible'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '18'\nassert solution('4\\n7 2\\n8 8\\n10 11\\n11 11\\n12 6\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n12 12\\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5') == 'impossible'"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()[:-1]"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1\n4\n3\n2\n1\n1\n''') == '10'\nprint('PASSED')\nassert solution('''3\n3\n1\n4\n''') == 'impossible'\nprint('PASSED')\nassert solution('''3\n3\n1\n4\n''') == 'impossible'\nprint('PASSED')\nassert solution('''3\n3\n1\n4\n''') == 'impossible'\nprint('PASSED')\nassert solution('''4\n3\n1\n4\n1\n1\n''') == 'impossible'\nprint('PASSED')\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n10\n''') == '18'\nassert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == '20'\nassert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n''') == 'impossible'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == \"impossible\"\nassert solution('2') == \"impossible\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"20\"\nassert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5\") == \"impossible\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '11'\nassert solution('3') == '10'\n\n'''\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2\n1 5 10\n7 8 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n-1 -1 -1\n5 5 5\n10 10 10\n\"\"\") == \"11\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n1 5 10\n7 8 2\n\"\"\") == \"3\"\n\"\"\"\n4. Write a program which takes as input an array and an integer n and returns the minimum number of swaps required to sort the array into increasing order\n\nInput:\n[2, 4, 7, 3, 1, 5, 6, 9, 10, 8]\n5\n\nOutput:\n0\n\"\"\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n1 5 10\n7 8 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n-1 -1 -1\n5 5 5\n10 10 10\n\"\"\") == \"11\"\nassert solution(\"\"\"\n4\n-1 -1 -1\n5 5 5\n10 10 10\n20 20 20\n\"\"\") == \"19\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"11\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n-1 -1 -1\n5 5 5\n10 10 10\n2 2 2\n''') == '11'\n\nassert solution('''\n3\n-1 -1 -1\n5 5 5\n10 10 10\nSample Output 3:\n7\n''') == '7'\n\nassert solution('''\n3\n5 5 5\n5 5 5\n5 5 5\nSample Output 4:\n1\n''') == '1'\n\nassert solution('''\n3\n-1 -1 -1\n-5 -5 -5\n-10 -10 -10\nSample Output 5:\n2\n''') == '2'\n\nprint(\"All Tests Passed\")"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"11\""
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '11'\nassert solution('1') == '3'\n\"\"\"\n\nn = int(input())\n\nx, y, z = [int(x) for x in input().split()]"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '11'"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n4 2\n1000\n1000\n0000\n0010\n''') == '0'\n\nprint(solution(\n'''\n3 1\n110\n011\n'''))\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1\\n110\\n011\\n') == '2'\nassert solution('4 2\\n1000\\n1000\\n0000\\n0010\\n') == '0'\nprint('all test cases passed')\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n6 3\n110\n011\n000\n100\n010\nSample Output 1:\n1\n\nSample Input 2:\n8 3\n1000\n1000\n0000\n0010\n0000\n0000\n0010\nSample Output 2:\n0\n\nSample Input 3:\n9 3\n11111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\nSample Output 3:\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 3\n110\n011\n000\n100\n010\nSample Output 1:\n1\n\nSample Input 2:\n8 3\n1000\n1000\n0000\n0010\n0000\n0000\n0010\nSample Output 2:\n0\n\nSample Input 3:\n9 3\n11111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\nSample Output 3:\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 5\n1111\n1111\n1110\n110\n010\nSample Output 1:\n1\n\nSample Input 2:\n7 5\n11111\n1111\n1111\n1111\n1111\n1111\n1111\nSample Output 2:\n0\n\nSample Input 3:\n10 5\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\nSample Output 3:\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n10 9\n1110\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"1000 1000\") == \"0\"\nassert solution(\"1000 1000\") == \"0\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1\\n110\\n011') == '2'\nassert solution('4 2\\n1000\\n1000\\n0000\\n0010') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    3 1\n    110\n    011\n    ''') == '2'\n\nassert solution('''\n    4 2\n    1000\n    1000\n    0000\n    0010\n    ''') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\n110\n011\nSample Input 3:\n4 2\n1000\n1000\n0000\n0010\nSample Output 3:\n0\n''') == '0'\n\nassert solution('''\n3 1\n111\n010\nSample Input 4:\n4 3\n1000\n1000\n0010\n0110\nSample Output 4:\n1\n''') == '1'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'\nassert solution('1000 1000') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2'\nassert solution('3 2') == '0'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\n\nsolution(input())"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 3\n3\n2''') == '1'\nassert solution('''3\n1 2 3\n3\n2''') == '1'\n'''\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_str) == output_str, \"Solution is wrong!\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3\n1 2 3\n3\n2\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n3\n1 3 2\n2\n1\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '1'"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n    3\n    1 2 3\n    3\n    \"\"\") == \"1\"\nassert solution(\"\"\"\n    3\n    1 3 2\n    2\n    \"\"\") == \"5\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"5\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3\\n3\\n2') == '1'\nassert solution('3\\n1 2 3\\n2\\n3') == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3'\n) == '1'\nassert solution(\n    '3'\n) == '1'\nassert solution(\n    '1'\n) == '1'\nassert solution(\n    '3'\n) == '1'\nassert solution(\n    '3'\n) == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('3') == '1'\nassert solution('1 2 3 4 5') == '4'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 100 20\\n\") == \"0\"\nassert solution(\"10 10 1\\n\") == \"19\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 100 20\\n') == '0'\nassert solution('10 10 1\\n') == '19'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\"\nprint(solution(input()))\n'''"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input(\"\")) == \"0\"\n'''"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2\n''') == ''\nassert solution('''1 2\n1\n''') == ''\nassert solution('''1 2\n''') == ''\nassert solution('''1 2\n1\n''') == ''\nassert solution('''1 2\n1\n1\n''') == ''\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n\"\"\") == \"c\"\nassert solution(\"\"\"\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n\"\"\") == \"myfilec\"\nassert solution(\"\"\"\n6\na b c d e f g\na 1\nimport f, e, g, d, b\nb 2\nimport f, e, g\nc 1\nimport g\ne 1\nimport f\nf 1\nimport d, e, g\ng 1\nimport e, f\n\"\"\") == \"a b c f e f g\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == \"SHIP IT\"\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == \"SHIP IT\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n\") == \"SHIP IT\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nimport a\nimport b\na.c\na.d\na.e\nimport b\nb.c\nb.d\n''') == 'SHIP IT'\nassert solution('''\nimport a\nimport b\na.c\nb.d\n''') == 'SHIP IT'\nassert solution('''\nimport a\nimport b\na.c\nimport b\nb.c\nimport c\nc.d\n''') == 'SHIP IT'\nassert solution('''\nimport a\nimport b\na.c\nimport b\nb.c\nimport c\nc.d\n''') == 'SHIP IT'\nassert solution('''\nimport a\nimport b\na.c\nimport b\nb.c\nimport c\nc.d\nimport e\nimport f\ne.g\n''') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n') == \"SHIP IT\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''a b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == \"c\"\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == \"SHIP IT\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_sample_1) == \"SHIP IT\"\nassert solution(input_sample_2) == \"b,a,c\"\nassert solution(input_sample_3) == \"c\"\nprint('Tests passed')\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == 'c'\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\nprint('Tests passed')"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('\\n'.join([\n    \"classa classb myfilec execd libe\",\n    \"classa 2\",\n    \"import classb\",\n    \"import myfilec, libe\",\n    \"classb 1\",\n    \"import execd\",\n    \"myfilec 1\",\n    \"import libe\",\n    \"libe 0\",\n])) == \"SHIP IT\"\n\nassert solution('\\n'.join([\n    \"classa classb myfilec execd libe\",\n    \"classa 2\",\n    \"import classb\",\n    \"import myfilec, libe\",\n    \"classb 1\",\n    \"import execd\",\n    \"myfilec 1\",\n    \"import libe\",\n    \"libe 0\",\n])) == \"classa\"\n\nassert solution('\\n'.join([\n    \"classa classb myfilec execd libe\",\n    \"classa 2\",\n    \"import classb\",\n    \"import myfilec, libe\",\n    \"classb 1\",\n    \"import execd\",\n    \"myfilec 1\",\n    \"import libe\",\n    \"libe 0\",\n])) == \"myfilec\"\n\nassert solution('\\n'.join([\n    \"classa classb myfilec execd libe\",\n    \"classa 2\",\n    \"import classb\",\n    \"import myfilec, libe\",\n    \"classb 1\",\n    \"import execd\",\n    \"myfilec 1\",\n    \"import libe\",\n    \"libe 0\",\n])) == \"execd\"\n\nassert solution('\\n'.join([\n    \"classa classb myfilec execd libe\",\n    \"classa 2\",\n    \"import classb\",\n    \"import myfilec, libe\",\n    \"classb 1\",\n    \"import execd\",\n    \"myfilec 1\",\n    \"import libe\",\n    \"libe 0\",\n    \"myfilec 2\",\n    \"import libe\",\n    \"libe 0\",\n    \"libe 1\",\n    \"import libe\",\n    \"libe 1\",\n    \"libe 2\",\n    \"import libe\",\n    \"libe 2\",\n    \"libe 3\",\n    \"import libe\",\n    \"libe 3\",\n    \"libe 4\",\n    \"import libe\",\n    \"libe 4\",\n    \"libe 5\",\n    \"import libe\",\n    \"libe 5\",\n    \"libe 6\",\n    \"import libe\",\n    \"libe 6\",\n    \"libe 7\",\n    \"import libe\",\n    \"libe 7\",\n    \"libe 8\",\n    \"import libe\",\n    \"libe 8\",\n    \"libe 9\",\n    \"import libe\",\n    \"libe 9\",\n    \"libe 10\",\n    \"import libe\",\n    \"libe 10\",\n    \"libe 11\",\n    \"import libe\",\n    \"libe 11\",\n    \"libe 12\",\n    \"import libe\",\n    \"libe 12\",\n    \"libe 13\",\n    \"import libe\",\n    \"libe 13\",\n    \"libe 14\",\n    \"import libe\",\n    \"libe 14\",\n    \"libe 15\",\n    \"import libe\",\n    \"libe 15\",\n    \"libe 16\",\n    \"import libe\",\n    \"libe 16\",\n    \"libe 17\",\n    \"import libe\",\n    \"libe 17\",\n    \"libe 18\",\n    \"import libe\",\n    \"libe 18\",\n    \"libe 19\",\n    \"import libe\",\n    \"libe 19\",\n    \"libe 20\",\n    \"import libe\",\n    \"libe 20\",\n    \"libe 21\",\n    \"import libe\",\n    \"libe 21\",\n    \"libe 22\",\n    \"import libe\",\n    \"libe 22\",\n    \"libe 23\",\n    \"import libe\",\n    \"libe 23\",\n    \"libe 24\",\n    \"import libe\",\n    \"libe 24\",\n    \"libe 25\",\n    \"import libe\",\n    \"libe 25\",\n    \"libe 26\",\n    \"import libe\",\n    \"libe 26\",\n    \"libe 27\",\n    \"import libe\",\n    \"libe 27\",\n    \"libe 28\",\n    \"import libe\",\n    \"libe 28\",\n    \"libe 29\",\n    \"import libe\",\n    \"libe 29\",\n    \"libe 30\",\n    \"import libe\",\n    \"libe 30\",\n    \"libe 31\",\n    \"import libe\",\n    \"libe 31\",\n    \"libe 32\",\n    \"import libe\",\n    \"libe 32\",\n    \"libe 33\",\n    \"import libe\",\n    \"libe 33\",\n    \"libe 34\",\n    \"import libe\",\n    \"libe 34\",\n    \"libe 35\",\n    \"import libe\",\n    \"libe 35\",\n    \"libe 36\",\n    \"import libe\",\n    \"libe 36\",\n    \"libe 37\",\n    \"import libe\",\n    \"libe 37\",\n    \"libe 38\",\n    \"import libe\",\n    \"libe 38\",\n    \"libe 39\",\n    \"import libe\",\n    \"libe 39\",\n    \"libe 40\",\n    \"import libe\",\n    \"libe 40\",\n    \"libe 41\",\n    \"import libe\",\n    \"libe 41\",\n    \"libe 42\",\n    \"import libe\",\n    \"libe 42\",\n    \"libe 43\",\n    \"import libe\",\n    \"libe 43\",\n    \"libe 44\",\n    \"import libe\",\n    \"libe 44\",\n    \"libe 45\",\n    \"import libe\",\n    \"libe 45\",\n    \"libe 46\",\n    \"import libe\",\n    \"libe"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n\nassert solution('''5\na a b\nb 1\nimport a, c\na 1\nimport c\nc 1\nimport b\n''') == 'SHIP IT'\n\nassert solution('''5\na b c d\na 1\nimport b, c, d\nc 2\nimport d\nb 1\nimport c\n''') == 'SHIP IT'\n\nassert solution('''5\na b c d\na 1\nimport b, c, d\nb 2\nimport d\nc 1\nimport c\nd 0\n''') == 'SHIP IT'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\""
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5+3+x''') == '1'\nassert solution('''20+3+x''') == '2'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\""
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5+3+x''') == '1'\nassert solution('''20+3+x''') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\nprint(solution(input()))\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\""
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('10+10') == '10'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 10\n0 15\n5 20''') == 'yes'\nassert solution('''2 10\n1 15\n0 20''') == 'no'"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 10\n0 15\n5 20\n''') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 10\n0 15\n5 20\n''') == 'yes'\nassert solution('''\n1 10\n1 15\n0 20\n''') == 'no'\nprint('PASSED')\n\"\"\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 10\\n1 15\\n0 20\") == \"yes\"\nassert solution(\"2 10\\n1 15\\n0 20\") == \"no\""
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'yes'\nassert solution('3 2') == 'no'\nassert solution('3 3') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 10\n0 15\n5 20''') == 'yes', \"Should allow to take all photos for daytime\"\nassert solution('''2 10\n1 15\n0 20''') == 'no', \"Should allow to take all photos for nighttime\"\n\n'''"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 10\n0 15\n5 20\n''') == 'yes', \"First\"\nassert solution('''\n2 10\n1 15\n0 20\n''') == 'no', \"Second\""
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 10\") == \"yes\"\nassert solution(\"2 10\") == \"no\""
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 10\") == \"yes\"\nassert solution(\"2 10\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10\\n0 15\\n5 20') == 'yes'\nassert solution('2 10\\n1 15\\n0 20') == 'no'"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4 4') == '0.25'\nassert solution('4 4 4') == '0'"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 1') == '0.25'\nassert solution('3 4 1') == '0'\nassert solution('2 3 5') == '0.2222222222222222'\nassert solution('4 5 4') == '0.0611111111111111'\nassert solution('4 4 4') == '0.1666666667'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4 4\") == \"0.25\"\nassert solution(\"4 4 4\") == \"0\""
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'\nassert solution('''4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n''') == '0'\nassert solution('''4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n3\n2 green\n''') == '0.5'\nassert solution('''4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n3\n2 green\n''') == '0.5\nprint('Solution:')\nstdio.writeln(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4 4') == '0.25'\nassert solution('4 4 4') == '0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4 4\n4\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'''\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 5 5\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'\nassert solution('''6 7 7\n4\n3 green\n18 yellow\n34 red\n4 red\n1 red\n''') == '0.5'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4 4') == '0.25'\nassert solution('4 4 4') == '0'"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 4') == '0.25'\nassert solution('4 4 4') == '0'\nassert solution('3 3 3') == '0'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == '3', 'First sample'\nassert solution('''\n6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3\n''') == 'inf', 'Second sample'"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n') == '3'\nprint(solution('''6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3'''))\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == '3'\nassert solution('''\n6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3\n''') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\nassert solution('3\\n') == '3'\nassert solution('4\\n') == 'inf'\nassert solution('6\\n7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\\n') == '3'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\n\"\"\""
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3''') == \"3\"\n\nassert solution('''6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3''') == \"inf\""
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 7\") == \"3\"\nassert solution(\"6 8\") == \"inf\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4''') == '3'\nassert solution('''6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3''') == 'inf'\nprint('All tests passed!')\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == '3'\nassert solution('''\n6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3\n''') == 'inf'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 4\n1 2 3 4 5 6\n''') == '4'\nassert solution('''\n1 2\n1 3\n''') == '3'\nassert solution('''\n6 4\n2 3 4 5 6 7\n''') == '6'\nassert solution('''\n6 4\n1 2 3 4 5 6\n''') == '6'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4') == '2'\nassert solution('12 3') == '3'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == '4', \"Wrong answer for input: {}\".format(stdin)\nassert solution('''\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2', \"Wrong answer for input: {}\".format(stdin)\nprint('All tests passed!')\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\nassert solution(\"\") == \"\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"4 5\") == \"3\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 4\\n\"\n    \"1 2 3 4\\n\"\n    \"2 3 4 5 6 7 4 7 8 8 12 12\"\n) == \"4\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4') == '4', \"base\"\nassert solution('12 3') == '2', \"one\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == \"4\"\nassert solution('''\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == \"2\"\nassert solution('''\n15 3\n1 2 3 5 6 7 8 9 10 11 12 13 14 15\n''') == \"5\"\n''')"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n4 4\n1 2 3 4\n''') == '4'\n\nassert solution(\n'''\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\nhose\\nhoose\\noose\\nmose') == 'hoose'\nassert solution('4\\nhose\\nhoose\\noose\\nmose') == 'hoose'\nassert solution('5\\nhoose\\nhose\\nnoise\\nnoise\\noise') == 'hoose,noise'\nassert solution('5\\nhose\\nhose\\nnoise\\nnoise\\noise') == 'hose,noise'\nassert solution('5\\nhose\\nhose\\nnoise\\nnoise\\noise') == 'hose,noise'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'hoose'\nassert solution('4') == 'hoose'"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s) == 'hoose'\n\nstdin = \"\"\"\n5\nhoose\nhose\nnose\nnoises\nnoise\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\\\n4\nhose\nhoose\noose\nmoose\\\n''') == 'hoose,moose'\n\nassert solution('''\\\n2\nhoose\nhose\\\n''') == 'hoose'\n\"\"\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\nhose\\nhose\\n') == 'hose'\nassert solution('3\\nhose\\nhose\\n') == 'hose'\nassert solution('4\\nhose\\noose\\nhose\\n') == 'hose'\nassert solution('5\\nhose\\nhose\\noose\\nhose\\n') == 'hose'\nassert solution('6\\nhose\\nhose\\noose\\nhose\\n') == 'hose'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\nhoose\\nhose\\nnose\\nnoises\\nnoise') == 'hoose\\nnoise\\n'\nassert solution('4\\nhose\\nhoose\\noose\\nmoose') == 'hoose\\nmoose\\n'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\nhoose\") == \"hoose\"\nassert solution(\"2\\nhose\") == \"hoose\"\nassert solution(\"3\\nhose\") == \"hose\"\nassert solution(\"4\\nhose\") == \"hose\"\nassert solution(\"5\\nhose\") == \"hose\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'hoose'\nassert solution('4') == 'hoose'\nassert solution('2') == 'noise'\nassert solution('3') == 'noise'\nassert solution('1') == 'NO TYPO'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\\\n5\nhoose\nhose\nnose\nnoises\nnoise''') == 'noises'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\nhose\") == \"hose\"\n\nprint(solution(\"1\\nhose\"))\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1\n3\nSample Input 3:\n1 2\n2\nSample Output 3:\n0\n16\n8''') == '2 16 8'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"2 4\") == \"1\""
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'\nassert solution('3 4') == '0'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"5\""
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '16'\nassert solution('2 3') == '0'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"3 4\") == \"16\"\nassert solution(\"10 5\") == \"0\"\nassert solution(\"1 1\") == \"2\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '16'\nassert solution('4') == '8'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '16'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'\nassert solution('3 3') == '0'\nassert solution('1 2') == '-1'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n50 45 45\\n\") == \"44.72135955\"\nassert solution(\"2\\n1 2 4\\n\") == \"68.52419365\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n50 45 45\n''') == '68.52419365', 'First'\nassert solution('''\n2\n50 45 45\n''') == '68.52419365', 'Second'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n50 45 45\n\"\"\") == \"68.52419365\"\nassert solution(\"\"\"\n1\n1 1 1\n\"\"\") == \"0.0003749625\"\nprint(solution(input()))"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n50 45 45\n50 50 50\n''') == '68.52419365'\nassert solution('''\n50 45 45\n60 60 60\n''') == '100.0'\nprint('Tests finished.')\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0.00000000'\nassert solution('2') == '44.72135955'"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n50 45 45\n''') == \"68.52419365\"\nassert solution('''\n2\n50 45 45\n''') == \"85.61135859\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"68.52419365\"\nassert solution(\"1\") == \"44.72135955\"\nassert solution(\"2\") == \"68.52419365\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 5\") == \"1\"\nassert solution(\"3 4 2 3\") == \"2\""
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2 3\") == \"1\"\nassert solution(\"2 3 1 5\") == \"2\"\nassert solution(\"3 4 2 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4 2 3\n1 3 1\n''') == '1'\nassert solution('''\n3 4 2 3\n1 2\n''') == '0'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 5\") == \"1\"\nassert solution(\"3 4 2 3\") == \"3\"\nassert solution(\"1 3 1\") == \"1\"\nassert solution(\"1 1\") == \"0\""
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '3'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3 1 5\n1 2\n''') == '1\\n3\\n2'\nassert solution('''3 4 2 3\n1 3 1\n''') == '1\\n1\\n0\\n2\\n'''\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 4 2 3\n1 3 1\nSample Output 3:\n1\n1\n0\n2''') == '1'\nassert solution('''2 5 4 5\n1 2\nSample Output 4:\n2\n0\n1\n0\n''') == '0'\nassert solution('''2 6 4 2\n1 2\nSample Output 5:\n1\n0\n1\n0\n1\n0\n1\n''') == '1'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4 2 3\") == \"1\"\nassert solution(\"2 3 1 5\") == \"1\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '1'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 5\n1 1\n''') == '3'\nassert solution('''5 3\n2 2 3 2 2\n''') == '2'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5\\n1 1\\n') == '3'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5\\n1 1') == '3'\nassert solution('5 3\\n2 2 3 2 2') == '2'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"3\"\nassert solution(\"5 3\") == \"2\""
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"5 3\") == \"4\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5\\n1 1') == '3'\nassert solution('5 3\\n2 2 3 2 2') == '2'"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"3\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"15 5\") == \"15\""
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"3\"\nassert solution(\"5 3\") == \"2\""
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 2') == '2'\nassert solution('3 3') == '2'\nassert solution('4 4') == '4'\nassert solution('5 5') == '4'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2\n3 4\n2 3\n''') == '1'\nprint(solution('''\n2 3\n1 2\n3 3\n1 3\n'''))\nassert solution('''\n1 1\n3 2\n2 2\n''') == '2'\nassert solution('''\n5 3\n1 1\n2 2\n3 3\n4 4\n''') == '1'"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''\n    2\n    100 100\n    50 50\n    '''\n    ) == '50'\nassert solution(\n    '''\n    1\n    1\n    '''\n    ) == '1'\nprint('Passed all tests!')"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"50\"\nassert solution(\"100 100\") == \"50\"\nassert solution(\"0 50\") == \"50\"\nassert solution(\"50 50\") == \"0.5\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n100 100\n50 50\n''') == '50', '''Expected a value of 50, but returned a value of 50.'''\n\nassert solution('''\n5\n40 40 40 40 40\n60 60 60 60 60\n''') == '60', '''Expected a value of 60, but returned a value of 60.'''\nassert solution('''\n6\n10 10 10 10 10 10\n20 20 20 20 20 20\n''') == '20', '''Expected a value of 20, but returned a value of 20.'''\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n10 20\n6 40\n''') == '55.0'\n\nprint(solution('''\n2\n10 20\n6 40\n'''))\nassert abs(10.3-solution('2\n10 20\n6 40')) < 10**-6"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '25'\nassert solution('2') == '50'"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n50 50\\n0 50\") == \"50\\n\"\nassert solution(\"1\\n100 100\\n0 50\\n50 50\") == \"50\\n\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n100 100\\n50 50\\n') == '50'\nassert solution('2\\n0 50\\n50 0\\n') == '25'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n0 50\\n50 0') == '25'\nassert solution('3\\n100 100\\n50 50\\n50 50') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n100 100\\n50 50') == '50'\nassert solution('3\\n0 50\\n50 0') == '25'"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n100 100\n50 50\n''') == '50'\nassert solution('''2\n0 50\n50 0\n''') == '25'"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"250\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n100\n200\n2000\n3000\n3000''') == '200'\nassert solution('''4\n100\n200\n1000\n3000''') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == \"160\"\nassert solution('3') == \"250\"\nassert solution('10') == \"160\"\nassert solution('0') == \"40\"\nassert solution('-1') == \"40\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n100\n200\n''') == '160'\nassert solution('''\n3\n100\n200\n2010\n''') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n100\n200\n''') == '160'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '160'\nassert solution('3') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2\\n100\\n200\\n\"\n    \"1\\n250\\n\"\n    \"2\\n250\\n\"\n    \"3\\n100\\n200\\n2010\"\n) == \"160\"\nassert solution(\n    \"4\\n60\\n60\\n100\\n60\\n\"\n    \"80\\n80\\n50\\n80\\n\"\n    \"80\\n50\\n\"\n    \"70\\n70\\n70\\n70\"\n) == \"220\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(INPUT) == OUTPUT"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n    2\n    100\n    200\n    '''\n    ) == '160'\n    assert solution(\n    '''\n    3\n    100\n    200\n    2010\n    '''\n    ) == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n100\\n200\\n2010') == '250'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 5\") == \"0\""
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n0 1 1\n2 3 1\n1 2 3\n''') == '2'\nassert solution('''\n2 2\n2 1 2\n1 2 3\n''') == '1'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n0 1 1\") == \"2\"\nassert solution(\"5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\") == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 5\") == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\") == \"2\""
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 5') == '0'\nassert solution('4 2') == '2'\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5') == '0'\nassert solution('10 10') == '1'\nassert solution('9 9') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0\"\nassert solution(r\"\"\"\n4\n0 1 1\n2 3 1\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4\n0 1 1\n2 3 1\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3\\n3 3 2\\n3 3 3') == '1 2\\n1 2 3\\n2 3 4'\nassert solution('5 5\\n4 2 3 1\\n4 1 2 1\\n1 2 1 2 1\\n5 1 2\\n1 1 2') == '4 1 3 4 5'\nassert solution('3 3\\n3 3 3\\n6 3\\n8 3\\n8 5\\n7 3\\n7 5\\n7 6\\n7 8\\n7 9\\n7 10\\n8 3\\n8 3\\n8 5\\n8 7\\n8 9\\n8 10\\n9 6\\n9 8\\n9 10\\n9 11\\n9 12\\n10 7\\n10 8\\n10 11\\n10 12\\n11 6\\n11 7\\n11 8\\n11 9\\n11 10\\n12 4\\n12 5\\n12 6\\n12 7\\n12 8\\n12 9\\n12 10\\n12 11\\n12 12\\n13 8\\n13 9\\n13 10\\n13 11\\n13 12\\n13 14\\n13 15\\n13 16\\n14 8\\n14 9\\n14 10\\n14 11\\n14 12\\n14 13\\n14 14\\n14 15\\n14 16\\n15 8\\n15 9\\n15 10\\n15 11\\n15 12\\n15 13\\n15 14\\n15 16\\n16 8\\n16 9\\n16 10\\n16 11\\n16 12\\n16 13\\n16 14\\n16 15\\n16 16' == '4 1 3 4 5\\n4 2 3 3 4 5\\n4 1 2 2 3 4\\n1 2 1 2 3 4\\n2 3 3 2 2 4\\n6 3 3 3 2 3\\n8 3 3 3 2 2\\n8 5 3 3 2 1\\n7 3 3 3 1 2\\n7 5 3 3 1 2\\n7 6 3 3 1 2\\n7 8 3 3 1 2\\n7 9 3 3 1 2\\n7 10 3 3 1 2\\n8 3 3 3 2 1\\n8 3 3 3 2 2\\n8 5 3 3 2 2\\n8 7 3 3 2 2\\n8 9 3 3 2 2\\n8 10 3 3 2 2\\n9 6 3 3 2 1\\n9 8 3 3 2 1\\n9 10 3 3 2 1\\n9 11 3 3 2 1\\n9 12 3 3 2 1\\n10 7 3 3 1 2\\n10 8 3 3 1 2\\n10 11 3 3 1 2\\n10 12 3 3 1 2\\n11 6 3 3 1 2\\n11 7 3 3 1 2\\n11 8 3 3 1 2\\n11 9 3 3 1 2\\n11 10 3 3 1 2\\n12 4 3 3 1 1\\n12 5 3 3 1 1\\n12 6 3 3 1 1\\n12 7 3 3 1 1\\n12 8 3 3 1 1\\n12 9 3 3 1 1\\n12 10 3 3 1 1\\n13 6 3 3 1 1\\n13 7 3 3 1 1\\n13 8 3 3 1 1\\n13 9 3 3 1 1\\n13 10 3 3 1 1\\n14 8 3 3 1 1\\n14 9 3 3 1 1\\n14 10 3 3 1 1\\n14 11 3 3 1 1\\n14 12 3 3 1 1\\n15 6 3 3 1 1\\n15 7 3 3 1 1\\n15 8 3 3 1 1\\n15 9 3 3 1 1\\n15 10 3 3 1 1\\n15 11 3 3 1 1\\n15 12 3 3 1 1\\n16 8 3 3 1 1\\n16 9 3 3 1 1\\n16 10 3 3 1 1\\n16 11 3 3 1 1\\n16 12 3 3 1 1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '1 1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n3 3 2\n3 3 3''') == '1 1'\n\nassert solution('''1 2\n1 1\n1 2''') == '-1'\n\nassert solution('''4 4\n3 3 2 1\n3 3 3\n6 3\nSample Output 3:\n4 4\n3 3 2\n1 4''') == '3 4 4'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"1 1\"\nassert solution(\"2 2\") == \"1 2\"\nassert solution(\"5 3\") == \"1 1 1 1 1\"\nassert solution(\"9 3\") == \"1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == '1 1'\nassert solution('4 2') == '1 2'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4 3\n3 3 2 1\n3 3 3\n\"\"\") == \"1 1\\n1 2\\n2 3 4\\n\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 3 2 1\\n3 3 3\\n\") == \"1 2 3 4\"\nassert solution(\"2\\n3 3 2 1\\n6 3\\n\") == \"-1\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3\n3 3 2 1\n3 3 3\n4 3''') == '1 1\\n1 2\\n2 3 4'\nassert solution('''4 2\n3 3 2 2\n6 3''') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n4 3 2 1\\n3 3 3') == '1 1\\n1 2\\n2 3\\n3 4'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3 10\n0 0 D\n10 1 L\n''') == '10.0\nassert solution('''\n4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == '4.0\nassert solution('''\n1000000 100000 1000000000\n1 0 D\n1 1 L\n1 2 L\n1 1 D\n1 2 D\n1 1 L\n1 2 L\n''') == '3.454545454545454'\n''')\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\n''') == '10.0\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == '4.0\nassert solution('''2 2 2\n0 0 L\n1 1 R\n''') == '1.0\nassert solution('''3 5 5\n0 0 D\n1 1 D\n1 2 L\n0 2 L\n1 2 R\n0 3 L\n''') == '4.0'''\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n2 3 10\n0 0 D\n10 1 L\n\"\"\"\n) == \"10.0 10.0 0.0\"\nassert solution(\n    \"\"\"\n4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n\"\"\"\n) == \"10.0 4.0 1.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 10') == \"10.0\"\nassert solution('4 3 7') == \"10.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"10.0\\n4.0\\n1.0\\n\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '2 3 10\\n'\n    '0 0 D\\n'\n    '10 1 L\\n'\n    ) == '10.0\\n10.0\\n0.0\\n'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\n''') == \"10.0\"\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == \"10.0\""
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L''') == '10.0\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D''') == '4.0\nassert solution('''2 3 10\n0 0 D\n10 1 L\nSample Output 2:\n10.0\n4.0\n1.0\n''') == '10.0\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\nSample Output 2:\n10.0\n4.0\n1.0\n''') == '4.0''') == '10.0\nassert solution('''2 3 10\n0 0 D\n10 1 L\nSample Output 2:\n10.0\n4.0\n1.0\n''') == '10.0\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 10\") == \"10.0\"\nassert solution(\"4 3 7\") == \"10.0\"\nassert solution(\"10 5 2\") == \"6.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 3 10\\n0 0 D\\n10 1 L\\n\"\n) == \"10.0\\n10.0\\n0.0\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz\nwl jkd''') == 'impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz''') == 'we will avenge our dead parrot arr'\nassert solution('''wl jkd''') == 'Impossible'\nassert solution('''ca gb hg pq xxdcr''') == 'ca gb hg pq xxdcr'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('be') == 'our'\nassert solution('our') == 'be'\nassert solution('rum') == 'will'\nassert solution('will') == 'rum'\nassert solution('dead') == 'hook'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz''') == 'we will avenge our dead parrot arr'\nassert solution('''wl jkd''') == 'Impossible'\nassert solution('''aeoeuijlhjx'\n    qzvxreuwq\n    uuyuyhbqqq\n    zeznhr\n    sxvze\n    jhaxz\n    rqhxt\n    rvxzj\n    qxjzt\n    kqjzg\n    lgvfx\n    xwzsz\n    xn\n    xq\n    u\n    x\n    u\n    z\n    z\n    jz\n    z\n    z\n    z\n    zz\n    zzz''') == 'xwzszxnqjzx'\nprint('OK')"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\nassert solution('fjks dlks fk jhjg') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"IMPOSSIBLE\"\nprint(solution(\"\"\"\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\"))\nassert solution(\"\"\"\nHamburg Bremen\n1\nHamburg Bremen 15 68 10 5\n\"\"\") == \"68.3\""
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('Hamburg Bremen') == '68.3'\nassert solution('Amsterdam Rotterdam') == 'IMPOSSIBLE'\nassert solution('Rotterdam Utrecht') == 'IMPOSSIBLE'"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\nNetherlands Antilles 453 8 12\nCanada Quebec 454 9 11\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n2\nNetherlands Antilles 543 8 12\nCanada Quebec 554 9 11\n\"\"\") == \"53.6\""
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\\n') == '68.3'\nassert solution('2\\n1\\nAmsterdam Utrecht 10 22 5 10\\nAmsterdam Utrecht 5 11 5 10\\nAmsterdam Rotterdam 10 22 5 10\\nAmsterdam Utrecht 5 11 5 10\\nAmsterdam Utrecht 5 11 5 10\\nAmsterdam Rotterdam 5 11 5 10\\nAmsterdam Rotterdam 10 22 5 10\\nAmsterdam Utrecht 5 11 5 10\\nAmsterdam Rotterdam 5 11 5 10\\n') == 'IMPOSSIBLE'\nassert solution('2\\n5\\nAmsterdam Utrecht 10 22 5 10\\nAmsterdam Utrecht 5 11 5 10\\nAmsterdam Rotterdam 10 22 5 10\\nAmsterdam Utrecht 5 11 5 10\\nAmsterdam Rotterdam 5 11 5 10\\nAmsterdam Utrecht 5 11 5 10\\nAmsterdam Rotterdam 5 11 5 10\\n') == 'IMPOSSIBLE'\nassert solution('3\\n2\\nHamburg Bremen 10 20 10 5\\nBremen Rotterdam 10 20 10 5\\nBremen Utrecht 10 20 10 5\\nBremen Rotterdam 10 20 10 5\\nBremen Utrecht 10 20 10 5\\nBremen Rotterdam 10 20 10 5\\nBremen Utrecht 10 20 10 5\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"68.3\"\nassert solution(\"\"\"\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\nHamburg Bremen\n1\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\nAmsterdam Rotterdam\n2\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n''') == 'IMPOSSIBLE'\nassert solution('''\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n''') == '68.3'\n''')\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"68.3\"\n\nassert solution(\"\"\"\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('Hamburg Bremen') == '68.3'\nassert solution('Amsterdam Rotterdam') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'IMPOSSIBLE'\nassert solution('2') == 'IMPOSSIBLE'\nassert solution('3') == '68.3'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Hamburg Bremen') == '68.3'\nassert solution('Amsterdam Rotterdam') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\\n*-*.*\\n|.|.|\\n*.*-*\") == \"3\"\nassert solution(\n    \"2\\n*.*\\n|...|\\n*.*\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == '2', \"Should return 2 because it can make 3 moves\"\nassert solution('''2\n*.*\n...\n*.*\n''') == '4', \"Should return 4 because it can make 4 moves\"\nassert solution('''2\n*.*\n|...|\n*.*\n''') == '3', \"Should return 3 because it can make 3 moves\"\nassert solution('''4\n*.*\n*..|\n*.*\n|*..|\n*.*\n''') == '8', \"Should return 8 because it can make 8 moves\"\n\n[input]\n5\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n\n[output]\n4\n'''\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n*-*.*\\n|.|.|\\n*.*-*\") == \"3\"\nassert solution(\"2\\n*.*\\n...\\n*.*\") == \"4\"\n\"\"\"\n\nfrom itertools import product\nfrom collections import Counter"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '4'\nassert solution('5') == '4'\nassert solution('6') == '3'\nassert solution('10') == '2'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('6') == '3'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '4'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('10') == '10'\nassert solution('1000') == '10'"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n*-*.*\\n|.|.|\\n*.*-*') == '3'\nassert solution('2\\n*.*\\n|...|\\n*.*') == '4'\nassert solution('2\\n*.*\\n|...|\\n*.*') == '4'\nassert solution('2\\n*.*\\n|...|\\n*.*') == '4'\nassert solution('2\\n*.*\\n|...|\\n*.*') == '4'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n*-*.*\\n|.|.|\\n*.*-*\") == \"3\"\nassert solution(\"2\\n*.*-*\\n|.|.|\\n*.*-*\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"5\""
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8') == '4'\nassert solution('12210020') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1111''') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == 'impossible'\nassert solution('8') == '4'"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8') == '4'\nassert solution('4') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '4'\nassert solution('4') == 'impossible'\nassert solution('1111') == 'impossible'\nassert solution('12210020') == 'impossible'\nassert solution('122100110') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"4\") == \"3\"\n\"\"\""
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'impossible'\nassert solution('12210020') == '4'\nprint('all tests passed')"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n123\n1221\n1311''') == 'impossible'\nassert solution('''5\n1113\n2112\n1234\n3412\n1421''') == '4'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n500 500 499\n0 0 999\n1000 1000 200\nSample Input 3:\n5\n250 250 300\n250 250 300\n750 250 300\n750 250 300\n750 750 300\nSample Output 3:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\n\"\"\") == \"\"\"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\"\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n500 500 499\n0 0 999\n1000 1000 200\n''') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).', solution.__doc__\n\nassert solution('''\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\n''') == 'Bill will be bitten.', solution.__doc__\n\nassert solution('''\n9\n900 900 981 843\n1000 1000 980 843\n1500 1500 1000 980\n3000 3000 3000 981\n1000 1000 981 843\n800 800 800 981\n1000 1000 980 843\n1500 1500 1000 980\n3000 3000 3000 981\n1000 1000 981 843\n''') == 'Bill enters at (1.00, 981.00) and leaves at (979.00, 843.00).', solution.__doc__\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n5\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 999\n1000 1000 200\n1\n500 500 499\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000 200\n0 0 999\n1000 1000 200\n0 999\n1000 1000"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\nassert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\\n\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\nassert solution(\"4\") == \"Bill will be bitten.\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n500 500 499\\n0 0 999\\n1000 1000 200') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300') == 'Bill will be bitten.'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n500 500 499\n0 0 999\n1000 1000 200''') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('''4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 3:\nBill will be bitten.''') == 'Bill will be bitten.'\n\nprint('All test cases passed.')\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n500 500 499\n0 0 999\n1000 1000 200\n''') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('''\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\n''') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n500 500 499\\n0 0 999\\n1000 1000 200') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)'\nassert solution('4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\\n') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"4\") == \"Bill will be bitten.\""
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n500 500 499\n0 0 999\n1000 1000 200\n''') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8 3\n++xx+x++\n''') == '++xx+o++'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 3') == 'xxoooooo'\nassert solution('1') == 'x'\nassert solution('10') == 'x'\nassert solution('5') == 'x'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''8 3\n++xx+x++\n''') == '++xx+o++'\nassert solution('''8 4\n+x+x++\n''') == 'xxooo+x+x++'\nassert solution('''8 2\n+x+\n''') == 'xx+o+'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"8 3\n++xx+x++\"\"\") == \"++xx+o++\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 3') == '++xx+o++'\nassert solution('16 3') == 'xxoooooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 5\n++x++++++\n''') == 'xxooo+++++++xoo'\nprint(solution('''\n10 5\n++x++++++\n'''))\nassert solution('''\n10 7\n++++xx+++\n''') == 'xo++xoooo++xx'\nprint(solution('''\n10 7\n++++xx+++\n'''))\nassert solution('''\n7 5\n++xx+x++\n''') == 'xxo++++'\nprint(solution('''\n7 5\n+x++x++x+\n'''))\nassert solution('''\n7 3\n+++xx+x++\n''') == 'xxx++ooo'\nprint(solution('''\n7 3\n++xx+x++\n'''))\nassert solution('''\n7 3\n+++xx+xx+\n''') == 'xx++oo++'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8 3\n++xx+x++\n''') == '++xx+o++'\nassert solution('''8 3\n+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 3') == '++xx+o++'\nassert solution('8 3') == 'xxoooooo'\nassert solution('8 9') == 'xxxxxxxx'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3') == '++xx+o++'\nassert solution('8 4') == 'xxoooooo'"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8 3\n++x++\n''') == '++x++'\nassert solution('''\n8 3\n+++x+x+++\n''') == '++x+x+++'\n\nprint('PASSED!')\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\\\nLost is Close to Lose\n\n\"Better Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors,\" he said.\n***\n\"\"\") == \"close: lose\\the: hen the\\till: will\\nhe: the\\tin: is\\nthat clock: oclock\\tis: it\\tin: clock\\nwhen: hen\\tin: till\\tclock: oclock\\tis: is\\tclock: it\\tclock: oclock\\tclock: it\\tclock: oclock\\tclock: is\\tclock: oclock\\tclock: oclock\\tclock: is\\tclock: oclock\\tclock: oclock\\tclock: is\\tclock: oclock\\tclock: oclock\\tclock: is\\tclock: oclock\\tclock: oclock\\tclock: is\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\t"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('\\n'.join(input() for _ in range(int(input())))) == '\\n'.join(sorted(set(stdin.splitlines())))\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('lost is close to lose') == 'close: lose'\nassert solution('the fox said, \"When?\"') == 'the fox: is'\n\n\"\"\"\n\nfrom string import ascii_lowercase\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('The fox said, \"When?\"\\n\"Not till 12 o'clock\", replied the hen.\\n\"That clock is stopped, it will never strike.') == 'clock: oclock\\the: hen the\\tis: it\\till: will\\twhen: hen\\tnot till: 12 o\\'clock\\treply: hen the\\tclock is stopped, it will never strike.'"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('Lost is Close to Lose') == 'close: lose\\the: he\\tin: inc is\\tinc: in\\tis: in\\lose: close lost\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n''') == '''clock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('lost is close to lose') == 'close: lose'\nassert solution('the fox said, \"When?\"') == 'the fox said: when?'\nassert solution('the fox said, \"When?\"') == 'the fox said: when?'\nassert solution('the fox said, \"When?\"') == 'the fox said: when?'\n\"\"\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n\"Better Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors,\" he said.\n***\n''') == 'close: lose\\the: hen\\tin: inc is\\tinc: in\\tis: in\\tis: in\\tlose: close lost\\tlost: lose\\tclock: oclock\\then: hen the\\twhen: hen\\thence clock: oclock\\tnot till 12 o'clock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('test.txt') == 'the: he: is: it: is: oclock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock: clock"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"clock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n\"\"\".replace(\"\\n\", \"\")\n\nassert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"The fox said, When?\nNot till 12 o'clock replied the hen.\nThat clock is stopped, it will never strike. he said.\n\"\"\".replace(\"\\n\", \"\")\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1 2') == '1\\n'\nassert solution('1\\n2 1') == '1\\n'\nassert solution('2\\n3 2') == '2\\n'\nassert solution('3\\n2 3') == '1\\n'\nassert solution('5\\n2 4 3 5') == '1\\n'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n1 2 7 3 8 9 4 5 10 6\n''') == '1'\nassert solution('''\n100\n10 20 30 40 50 60 70 80 90 100\n''') == '1'\nassert solution('''\n50\n1 2 3 4 5\n''') == '1'\nassert solution('''\n15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n''') == '2'\nassert solution('''\n4\n2 1 3 5\n''') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n1 2 7 3 8 9 4 5 10 6\n''') == '1'\nassert solution('''\n10\n3 8 1 9 4 5 2 7 10 6\n''') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('10') == '9'"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\nassert solution(\"10\\n3 8 1 9 4 5 2 7 10 6\") == \"2\""
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '1'\nassert solution('10 2 7 3 8 9 4 5 10 6') == '2'\nassert solution('10 3 8 1 9 4 5 2 7 10 6') == '3'\n\"\"\""
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('2') == '1'"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\") == \"1\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"1\"\nassert solution(\"100\\n3 2 1 4 5 6 7 8 9 10\") == \"1\"\nassert solution(\"10\\n2 1 3 4 5 6 7 8 9 10\") == \"2\"\nassert solution(\"100\\n3 1 2 4 5 6 7 8 9 10\") == \"3\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('1.5 1') == '10/15'\nassert solution('1.5 2') == '2/15'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '1/7'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('-4 -0.142857 6') == '-5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"0.142857 6\"\n    ) == \"1/7\"\nassert solution(\n    \"1.6 1\"\n    ) == \"5/3\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''0.142857 6\n''') == '1/7'\nassert solution('''1.6 1\n''') == '5/3'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1\\n') == '6'\nassert solution('1\\n0 0 0\\n0 0 1\\n') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n0 0 0\n''') == '6'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '10'\nassert solution('''\n3\n0 0 0\n0 0 1\n0 0 2\n''') == '21'\n\n'''\n\ubb38\uc81c \uc124\uba85\n\ub2e4\uc74c\uc740 \uc644\uc804\ud788 \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c \ud480\uc774 \uac00\ub2a5\ud558\uba70 \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\ub294 O(N^2)\uc774\uae30 \ub54c\ubb38\uc5d0 \ubaa8\ub4e0 \uc810\uc744 \uc77d\uc5b4\uc11c \uc22b\uc790\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub2e4. "
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n0 0 0\n0 0 1\n''') == '6', 'Sample Test Failed'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '10', 'Sample Test Failed'\nassert solution('''\n3\n0 0 0\n0 0 1\n0 0 2\n''') == '11', 'Sample Test Failed'\nassert solution('''\n10\n0 0 0\n0 0 1\n0 0 2\n0 0 3\n0 0 4\n0 0 5\n0 0 6\n0 0 7\n0 0 8\n0 0 9\n''') == '21', 'Sample Test Failed'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n0 0 2') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"2\") == \"10\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n0 0 0\n0 0 1\n''') == '6'\n\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '10'\n\nprint('All tests passed!')"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '6'\nassert solution('10') == '30'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n0 0 0\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n2\n0 0 0\n0 0 1\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n0 0 0\n0 0 1\n''') == '6'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1', 'Wrong answer for input : (\"3\", \"-1 2 -1\", \"2 2\", \"1 -1 1\")'\nassert solution('''\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1', 'Wrong answer for input : (\"7\", \"-1 4 5 1 0 -1 -1\", \"-1 3 2 0 0 1\", \"1 3 4 2 2 4\", \"0 2 3 -1 4 4 2\", \"-1 4 4 3 3 2\", \"1 -1 -1 -1 4 2 -1\")'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\nassert solution('''8\n-1 5 -2 2 1 1 1 1 1\n-2 -3 2 2 1 -1 1 2\n1 -3 2 -3 1 2 -2 -2\n1 -2 2 2 1 2 1 2 2\n2 -1 -2 1 1 -2 1 1\n-2 1 1 1 -2 2 2 1\n1 -2 2 2 2 -1 1 2 2\n2 -1 1 2 -2 2 1 2\n2 1 1 -1 2 2 1 1 2\n1 1 1 -1 2 1 2 1 1 2\n-1 1 1 1 1 1 1 1 1 1\n-2 1 2 1 1 2 2 1 1 2\n-1 2 2 2 2 1 2 1 1 2\n2 1 2 1 1 2 1 1 1 1\n1 2 1 2 1 1 2 1 1 1\n2 1 1 1 1 1 1 1 1 1\n-1 2 1 1 1 1 1 1 1 1\n-1 1 2 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 2 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-2 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 2 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 2 1 1 1 1 1 1 1 1\n-1 1 2 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n-1 1 1 1 1 1 1 1 1 1\n-"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    3\n    -1 2 -1\n    2 2\n    1 -1 1\n    \"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n6\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\n'''"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\n\nassert solution('''\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"7\") == \"1\"\nassert solution(\"101\") == \"1\"\nassert solution(\"1111\") == \"1\""
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n-1 2 -1\n2 2\n1 -1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '1'"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n-1 2 -1\n2 2\n1 -1 1''') == '1'\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1''') == '1'\nprint(solution('''\n'''))"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == None\nassert solution(\"1001\") == \"3\"\nassert solution(\"1111\") == \"1\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1001\") == \"3\"\nassert solution(\"1111\") == \"1\""
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1001\") == \"3\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"101\") == \"1\"\nassert solution(\"00\") == \"1\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1 1''') == 'LLL'\nassert solution('''5\n1 2 2 1 2''') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 1 1\n''') == 'LLL'\nassert solution('''\n5\n1 2 2 1 2\n''') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2 2 1 2\n''') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1 1\n''') == 'LLL'\n\nassert solution('''\n5\n1 2 2 1 2\n''') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == 'LLRLR'\nprint(solution('''7\n1 1 2 2 3 3 4\n4 4 3 4 2 3 5\n2 2 5 1 1 3 1\n3 3 4 1 3 2 2\n4 5 1 1 2 1 3\n3 5 1 3 1 2 4\n2 5 2 4 4 1 1\n1 2 2 3 1 3 2\n2 2 2 2 1 1 2\n3 4 4 3 3 1 2\n3 5 4 3 5 2 1\n1 2 1 4 1 2 4\n1 5 4 4 5 1 4\n2 2 2 1 3 2 2\n2 3 3 2 3 3 4\n1 2 3 4 4 4 4\n1 4 5 5 5 5 4\n2 4 5 5 5 5 4\n4 2 2 1 3 2 2\n3 5 3 3 3 3 2\n4 4 4 4 4 4 4\n''')) == 'LLRLLLRLRLRLRLLRLLRRLRLRRLRRLRRLRRLRRRLLRLLRLLRLLRRLRLLRRLLRRLRRLRRLRRLRRLRRLRLLRLRLRRLRLRLRRLRRLRRLRRLLRLLRRLRRLRLRRLLRRLRRLLRLLRRLRRLRLRLRRLLRRLRRLLRRLRRLLRLRLRRLRRLRLRRLRRRLLLLLLLLRRLRRLRRLLRRLLRLRLRLRRRLRLLRLRRRRLRLRLRLRRRLRLRLRLRLRLRLRLRLRLRLRRLRLRRLRLRLRRRLLRLRRRRLRLRLRLRRRLLRLRLRLRRRRLRLLRRLRRLRLRRLLRRLLRLLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRRLLLLLLRLRLRLRRLLRRLLRLRLRLRRLLRLRLRLRRLLRLLRLRRRLRLRLRLRRRLLRLRLRRRLLRLRLRLRLRLRLRRLLRLRLRLRLRLRRLLRRLRLRLRRLLRLRLRLRLRLRLRLRLRLRLRLRLRLRRRLLLLLLLLRRLRLRRLLRRLLRLRLRLRRLLRLRLRLRLRLRLRLRLRLRLRRLLRLRLRLRLRLRLRLRLRLRLRLRLRRRLLLLLLLLRRLRLRRLLRRLLRLRLRLRRLLRLRLRLRRLLRLRLRLRRRRRRLLRRRLRLRLRRRLRLRLRLRLRLRRRRLLRLLLRRRLRLRRLLRLLLRRRRLLRLRLRLRRRRRLLRRRRRRRLRLRRRLRRRRRRRRLRLRLRLRLRRRRRRLRLRLRLRLRLRLRLRRRLRLRRRRLRLRLRLRLRLRLRLRLRLRLRLRLRLRRRLRLRLRLRLRLRRRLRLRLRLRLRLRLRLRLRLRLLLLLLLLRRRLRRRLRLRRRRRLLRLRLRLRRLLRRRRLRLRRRRRRRRRLLRLRLRLRRLLRLRRRRRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRRRLLLLLLLLRRRLRRRRLLRLRLRLRRLLRLRLRLRRRRRLRLRLRLRRRRRRRLLLLLLLRRRRRRRRRLLLLLLLRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRLLLLLLLRRRRRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLLLRRRRRRRRRRRLLLLLL"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 'LLRLR'\nassert solution('6') == 'LLRLLLLL'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'LLL'\nassert solution('5') == 'LLRLR'\nassert solution('1234') == 'LLLLLLLL'"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n1 1 1\n\"\"\") == \"LLL\"\nassert solution(\"\"\"\n3\n1 2 1\n\"\"\") == \"LLR\"\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"LLR\"\nassert solution(\"\"\"\n4\n1 2 1 3\n\"\"\") == \"LLRLRLLRLL\""
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 1\") == \"LLL\"\nassert solution(\"5\\n1 2 2 1 2\") == \"LLRLR\""
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'LLL'\nassert solution('5') == 'LLRLR'\n\n\"\"\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'Poor girl!'\nassert solution('''\n1 1 1\n3 2 3000000\n3 2 2000000\n''') == 'Poor girl!'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7 7 10\\n1 2 1000000\\n2 3 2000000\\n3 4 3000000\\n4 5 4000000\\n5 6 5000000\\n6 7 6000000\\n7 1 7000000\\n\") == \"49000000000070\"\nassert solution(\"6 6 7\\n1 3 1000000\\n3 5 3000000\\n5 1 5000000\\n2 4 2000000\\n4 6 4000000\\n6 2 6000000\\n\") == \"25000000000021\""
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"7 7 10\\n\"\n    \"1 2 1000000\\n\"\n    \"2 3 2000000\\n\"\n    \"3 4 3000000\\n\"\n    \"4 5 4000000\\n\"\n    \"5 6 5000000\\n\"\n    \"6 7 6000000\\n\"\n    \"7 1 7000000\"\n    ) == \"49000000000070\"\nassert solution(\n    \"6 6 7\\n\"\n    \"1 3 1000000\\n\"\n    \"3 5 3000000\\n\"\n    \"5 1 5000000\\n\"\n    \"2 4 2000000\\n\"\n    \"4 6 4000000\\n\"\n    \"6 2 6000000\"\n    ) == \"25000000000021\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 7 10\") == \"49000000000070\"\nassert solution(\"4 6 7\") == \"25000000000021\""
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\nassert solution('7 7 10') == 'Poor girl'\nprint(solution.__doc__)\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 10 7') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'Poor girl'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 6 7') == '49000000000070'\nassert solution('7 7 10') == '49000000000070'\nprint(solution(input()))\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4 3000000\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\n''') == '49000000000070'\nassert solution('''\n3 4 3000000\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '25000000000021'\nprint('\"{}\" passed all tests.'.format(solution('''\n10 5 1\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\n''')))\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"2\\n2\\n0\\n1\\n2\\n2\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\\n3 2\\n3 3\") == \"Yeah!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"2\\n0 1\\n2 3\\n3 3\"\nassert solution(\"4 4\") == \"Yeah!\"\nassert solution(\"4 2\") == \"0 1\"\nassert solution(\"4 1\") == \"1 0\"\nassert solution(\"4 0\") == \"2 3\""
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"Yeah!\"\n\n\"\"\""
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"2\\n2\\n0\\n1\"\n\nassert solution(\"4 4\") == \"yeah!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == \"2\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"Yeah!\""
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sample_input_1) == \"2\\n0\\n2\\n1\"\nassert solution(sample_input_2) == \"yeah!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"2\\n0\\n1\\n2\\n3\\n\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\\n\") == \"2\\n2\\n0\\n1\\n2\\n2\\n3\\n3\\n\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4') == '2'\n\ninput:\n\n10 4\n1 3\n2 6\n4 6\n3 7\n0 4\n5 2\n0 7\n8 3\n0 2\n0 1\n6 3\n0 7\n1 6\n2 5\n8 3\n9 9\n\noutput:\n\n2\n1\n1\n2\n3\n3\n3\n2\n1\n2\n3\n0\n1\n1\n1\n1\n2\n1\n1\n1\n0\n1\n1\n2\n1\n\ninput:\n\n10 4\n0 1\n1 0\n2 3\n3 2\n0 4\n5 2\n0 7\n8 3\n0 2\n0 1\n6 3\n0 7\n1 6\n2 5\n8 3\n9 9\n\noutput:\n\nYeah!\n\n\"\"\""
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4') == '2'\nassert solution('4 4') == '2'\nassert solution('5 5') == 'yeah!'\nassert solution('4 4') == 'yeah!'\nassert solution('8 4') == 'yeah!'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"2\\n0\\n1\\n2\\n\"\nassert solution(\"5 5\") == \"Yeah!\\n0\\n1\\n2\\n3\\n4\\n\""
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'POSSIBLE'\nassert solution('3 1') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'IMPOSSIBLE'\nassert solution('2') == 'POSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 1 2\n''') == 'POSSIBLE'\n\nassert solution('''\n2\n1 2\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n100\n0 1 2 3 4 5 6 7 8 9\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n1\n0 1 2\n''') == 'POSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 2') == 'POSSIBLE'\nassert solution('2 2') == 'IMPOSSIBLE'\nprint('You passed all the tests!')"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1 1\n''') == 'POSSIBLE'\nassert solution('''\n2\n1 2\n''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    2\n    1 2\n''') == 'IMPOSSIBLE'\nassert solution('''\n    3\n    1 1 2\n''') == 'POSSIBLE'\nassert solution('''\n    4\n    1 2 3\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'POSSIBLE'\nassert solution('2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n3 1 3 2\n''') == 'POSSIBLE'\n\nassert solution('''\n3\n1 2 1\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 2\\n') == 'POSSIBLE\\n1 3\\n2 3\\n'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 2\") == \"POSSIBLE\"\nassert solution(\"3 1 2\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0\") == \"0.5 0.5 0.5\"\nassert solution(\"1 0 0\") == \"0.5 0.5 0.5\"\nassert solution(\"0 1 0\") == \"0.5 0.5 0.5\"\nassert solution(\"0 0 1\") == \"0.5 0.5 -0.5\""
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\"\n) == \"0.5 0.5 0.5\"\nassert solution(\n    \"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\"\n) == \"0.0 0.0 -0.0\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\""
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n\") == \"0.5 0.5 0.5\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 0') == '0.5 0.5 0.5'\nassert solution('1 0 0') == '0.0 0.0 -0.0'\nassert solution('0 1 0') == '0.0 0.0 -0.0'\nassert solution('0 0 1') == '0.0 0.0 -0.0'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 0 0') == '0.5 0.5 0.5'\nassert solution('1 0 0') == '0.5 0.5 0.5'\nassert solution('0 1 0') == '0.5 0.5 -0.5'\nassert solution('0 0 1') == '0.5 0.5 -0.5'\nassert solution('-1 0 0') == '0.0 0.0 0.0'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 0 0') == '0.5 0.5 0.5'\nassert solution('1 0 0') == '0.5 0.5 0.5'\nassert solution('0 1 0') == '0.0 0.0 0.0'\nassert solution('0 0 1') == '0.0 0.0 0.0'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3 2 2\n''') == '1 1 1'\n\"\"\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3 6 2 3 2 2 2 1 5 6\n3 2 2 1 5 6\n''') == '2\\n3 2 2\\n6 6\\n'''\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2 2'\n\"\"\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3 2 1'\nassert solution('10') == '3 6 2 3 2 2 2 1 5 6'"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n3 2 6 8') == '3 2 4 6 8'\nassert solution('3\\n3 2 5 4') == '3 2 3 5 4'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\n2 2 2 2 2 1 2 2 2 1\nSample Output 1:\n2\n3 2 1\n3 2 1\n''') == '3 2 1'\n\nassert solution('''\n3\n3 3 3 3 3 3 2 3 2 1\nSample Output 2:\n0\n3 2 1\n3 2 1\n''') == '3 2 1'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '2'\nassert solution('15') == '3'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(t1) == \"2\"\nassert solution(t2) == \"3 2 2\""
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '0 2 1 3 4'\nassert solution('4') == '0 2 1 3'\nassert solution('3') == '0 2 1'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 1\") == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE'\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n2 3\n''') == '74.6666666667'\nassert solution('''\n10\n''') == '49.80260829'\nassert solution('''\n9\n''') == '41.8'\nassert solution('''\n4\n''') == '49.0000016'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n    \"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n2 3\n\"\"\"\n) == \"74.6666666667\"\n\nassert solution(\n    \"\"\"\n2 2 1\n1 2 7\n1 3 8\n1\n2 2\n\"\"\"\n) == \"74.66666667\"\n\nassert solution(\n    \"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n    \"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n2 3\n\"\"\"\n) == \"74.66666667\""
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\") == \"IMPOSSIBLE\"\n\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\nSample Output 2:\n74.6666666667\n\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\nSample Output 2:\nIMPOSSIBLE\") == \"IMPOSSIBLE\"\n\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\nSample Output 2:\n74.6666666667\") == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '3 2 1\\n1 2 7\\n2 3 8\\n1'\n    ) == 'IMPOSSIBLE'\nassert solution(\n    '3 2 1\\n1 2 7\\n2 3 8\\n1'\n    ) == '74.6666666667'\nassert solution(\n    '3 2 1\\n1 2 7\\n2 3 8\\n2'\n    ) == '103.3333333333'\nassert solution(\n    '5 6 3\\n1 2 7\\n2 3 8\\n3 4 9\\n4 1\\n5'\n    ) == '103.3333333333'\nassert solution(\n    '5 6 3\\n1 2 7\\n2 3 8\\n3 4 9\\n4 1\\n5'\n    ) == '103.3333333333'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3') == '74.6666666667'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1\\n1 2 7\\n2 3 8\\n1') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n') == '74.6666666667'\nprint(solution(input()))\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\") == \"74.6666666667\"\n\nassert solution(\"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n2 3\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 2') == 'IMPOSSIBLE'\nassert solution('3 2 1') == '74.6666666667'\nassert solution('3 2 1') == 'IMPOSSIBLE'\nassert solution('3 2 2') == 'IMPOSSIBLE'\nassert solution('3 2 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\") == \"74.6666666667\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"6 6\") == \"1\""
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n') == '1\\n2\\n1\\n2\\n2\\n1'\nassert solution('7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\\n') == '0\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n5 6\n6 7\n7 4\n''') == '1'\nassert solution('''7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n''') == '0'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n5 6\n6 7\n7 4\n''') == '2'\nassert solution('''\n7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n''') == '1'\nassert solution('''\n5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n5 6\n6 7\n7 4\n''') == '1'\nassert solution('''\n7 7\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n5 6\n6 7\n7 4\n''') == '2'\n'''\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '1'\nassert solution('7 7') == '2'"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == \"1\\n2\\n1\\n2\\n2\\n1\"\nassert solution(\"7 7\") == \"1\\n2\\n1\\n2\\n2\\n1\\n2\"\n\n----------------------------------------\n\nSample Input 1:\n5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\nSample Output 1:\n0\n1\n1\n2\n2\n1\n\nSample Input 2:\n7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\nSample Output 2:\n0\n1\n1\n2\n2\n1\n2\n1\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '1'\nassert solution('7 7') == '1'"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '1'\nassert solution('7 7') == '2'"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6\\n') == '1'\nassert solution('7 7\\n') == '1'\nassert solution('10 10\\n') == '2'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 10 2\n0\n15\n30\n45''') == '10'\n\nassert solution('''4 10 3\n0\n15\n30\n45''') == '5'\n\nassert solution('''5 1 2 3 4\n0\n2\n3\n4\n5\n''') == '4'\n\nassert solution('''4 3 1 2\n0\n2\n3\n4\n5\n''') == '6'\n\nassert solution('''2 7\n0\n1\n''') == '7'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 10 2\") == \"10\"\nassert solution(\"4 10 3\") == \"5\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 10 2\n0\n15\n30\n45\n''') == '10'\nassert solution('''4 10 3\n0\n15\n30\n45\n''') == '5'\nassert solution('''5 10 3\n0\n15\n30\n45\n50\n''') == '10'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 10 2\\n0\\n15\\n30\\n45\\n') == '10'\nassert solution('4 10 3\\n0\\n15\\n30\\n45\\n') == '5'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 10 2\\n0\\n15\\n30\\n45\\n') == '10'\nassert solution('4 10 3\\n0\\n15\\n30\\n45\\n') == '5'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 10 2\") == \"10\"\nassert solution(\"4 10 3\") == \"5\""
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 10 2\n0\n15\n30\n45\n''') == '10'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '5'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"10\"\nassert solution(stdin='''\n5 10 3\n0\n15\n30\n45\n''') == \"5\"\nassert solution(stdin='''\n4 10 2\n0\n15\n30\n45\n''') == \"10\""
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 2') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2\\n50 50 50 50\\n25 25 25 25') == '1'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2\n50 50 75\n25 25 25\nSample Input 3:\n7 2\n5 10 10 10 10 5 5 5\nSample Output 3:\n3\n''') == '2'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"5 2 4 5\") == \"3\"\n\n\"\"\"\n\n\nimport heapq\nimport math\nimport unittest\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 2') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '1'\nassert solution('4 2') == '2'\nassert solution('8 3') == '3'\n\nprint(solution(input()))\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n721. Accounts Merge\n\n'''\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n50 50 75\n25 25 25\n''') == '2'\n\nassert solution('''5 3\n50 50 100 50\n25 25 25 25\n''') == '1'\n\nassert solution('''5 2\n50 50 75\n25 25 25\n''') == '1'\n\nassert solution('''5 2\n50 50 75\n25 25 25\n''') == '1'\n\nassert solution('''5 2\n50 50 75\n25 25 25\n''') == '1'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 2') == '1'\nassert solution('4 5') == '3'\nassert solution('5 5') == '3'\nassert solution('4 8') == '5'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n    4 2\n    50 50 75\n    25 25 25\n    '''\n    ) == '2'\n\nassert solution(\n    '''\n    5 2\n    50 50 50 50\n    25 25 25 25\n    '''\n    ) == '1'\n\nassert solution(\n    '''\n    6 2\n    50 50 50 50 50 50\n    25 25 25 25 25 25\n    '''\n    ) == '2'\n\nassert solution(\n    '''\n    6 3\n    40 40 40 40 40 40\n    20 20 20 20 20 20\n    10 10 10 10 10 10 10\n    3 3 3 3 3 3 3\n    '''\n    ) == '1'\n\nprint('ALL TESTS PASSED')"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n...L\n.X..\n''') == '1'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n...L\n.X..\n''') == '1'\n\nassert solution('''5 5\n.X.X\n.X.X\n..X.\n.X.X\n..X.\n''') == '3'\n\nassert solution('''10 10\nX.....X\n.X...X.\nX..X..X\nXX...X.\nXX...X.\nX...X..\n...X.X\n.X..X.X\n.X...X.\n.X...X.\n''') == '4'\n\nassert solution('''20 20\n.X.X.X\n.X.X.X\n..X.X..\n.X.X.X\n..X.X..\n.X.X.X\n.X.X.X\n.X.X.X\n.X.X.X\n.X.X.X\n''') == '5'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n....\n.....\n....\n''') == \"0\"\nassert solution('''3 3\n.X..\n.X..\n.X..\n''') == \"1\"\nassert solution('''4 4\n.X.L\n.X.L\n.X.L\n.X.L\n''') == \"1\"\nassert solution('''4 4\n....\n....\n.....\n.X.L\n''') == \"2\"\nassert solution('''3 3\n.....\n.....\n.....\n''') == \"1\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n.X.L\") == \"1\"\nassert solution(\"5 4\\n.X.L\") == \"1\""
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == \"1\"\nassert solution('4 4') == \"2\"\nassert solution('4 4') == \"3\"\nassert solution('10 20') == \"1\"\nassert solution('10 20') == \"2\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n....\n.L..\n''') == '1'\n\nassert solution('''2 4\n.XX\nX..\n.X.\nX..\n''') == '1'\n\nassert solution('''2 4\n.X.\n.X.\n.X.\n.X.\n''') == '2'\n\nassert solution('''2 4\n.X.\n.X.\n.X.\n.X.\n''') == '1'\n\nassert solution('''4 4\n.LX.\n.X..\n...L\n.X..\n''') == '0'"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n.LX.\n.X..\n....\n.L..\n''') == '1'\nassert solution('''\n4 4\n.XLX\n.X..\n...L\n.X..\n''') == '2'\nassert solution('''\n3 5\n.LL.\n.L..\n....\n.L..\n''') == '2'\nassert solution('''\n2 2\n.XX\n.XX\n''') == '0'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''4 4\n.X..\n.X..\n....\n.L..''') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4') == '1'\nassert solution('4 4') == '2'\nassert solution('5 5') == '4'\nassert solution('4 4') == '2'"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n.LX.\n.X..\n....\n.L..\n''') == '1'\nassert solution('''5\n.XLX\n.X..\n...L\n.X..\n''') == '2'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2 1\n1 1\n2 0 2\n2 1 3\n1 2''') == 'home'\nassert solution('''5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 3:\ndetention\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n4 2 1\\n1 2') == 'home'\n\"\"\""
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"home\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n3 0 5\\n1 2 2\\n0 2 2\\n2 3 3\") == \"home\"\n\n\"\"\"\nimport itertools"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2 1\n1 1\n2 0 2\n2 1 3\n1 2\n''') == 'home'\n\nassert solution('''\n5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n''') == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n1 4\") == \"detention\"\nassert solution(\"10 1 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n2 3 4\\n2 4 5\\n2 5 6\\n2 6 7\\n2 7 8\\n2 8 9\\n2 9 10\") == \"detention\""
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"home\"\nassert solution(\"5 3 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"home\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'home'\nassert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2') == 'detention'\nassert solution('3 2 1\\n1 1\\n2 0 2') == 'detention'\nassert solution('1 1\\n0') == 'home'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n2 1\") == \"home\"\nassert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"detention\"\n\nassert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"home\""
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\") == \"home\"\nassert solution(\"4 2 1\") == \"detention\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"-\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == 'allatral'"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'allatral'\nprint(solution(input()))\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nprint(solution(\"zzzz\"))\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"allatral\"\n\nSample Input 2:\nzzzzzzz\nSample Output 2:\n-1\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    tralalal\n    zzzz\n''') == 'allatral'\n\nassert solution('''\n    tralalal\n    zzzz\n''') == '-1'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"-1\""
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"-\"\n\"\"\""
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('zzzz') == '-1'\nassert solution('tralalal') == 'allatral'\nassert solution('tralalala') == 'allatral'\nprint('Tests passed')\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3 4 5\n''') == '5'\nassert solution('''\n3 2 1 6 4 5\n''') == '8'\nassert solution('''\n3 3 2 2 2 1\n''') == '1'\nassert solution('''\n1 2 3\n''') == '4'\nassert solution('''\n5 1 3 3 5 5\n''') == '7'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"8\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 4 2 4 1\") == \"7\"\nassert solution(\"1 3 5 7 3\") == \"1\"\nassert solution(\"3 3 2 3 3\") == \"1\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"1 2 3 4 5 2\") == \"2\"\nassert solution(\"1 2 3 4 5 3\") == \"1\"\nassert solution(\"1 2 3 4 5 4\") == \"3\"\nassert solution(\"1 2 3 4 5 5\") == \"0\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('6\\n3 2 1 6 4 5') == '8'\nprint('All tests passed!')"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n') == '5'\nassert solution('6\\n') == '8'\nprint('all tests passed')\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('6\\n3 2 1 6 4 5') == '8'"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\n1 2 3 4 5\n\"\"\") == \"8\"\nassert solution(\"\"\"\n6\n3 2 1 6 4 5\n\"\"\") == \"8\"\nassert solution(\"\"\"\n4\n2 5 3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"1\"\nprint(\"All test cases passed...\")\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '8'"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '5'\nassert solution(stdin='''\n1 2 3 4 5\n3 2 1 6 4 5\n''') == '8'\nassert solution(stdin='''\n1 2 1 1\n2\n''') == '0'\nassert solution(stdin='''\n5\n1 2 3 4 5\n5\n''') == '0'\nassert solution(stdin='''\n4\n1 2 3 4\n1\n''') == '1'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n47\n''') == '1'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"47\") == \"1\"\nassert solution(\"523\") == \"2\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('23') == '2'\nassert solution('523') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1'\nassert solution('47') == '1'\nassert solution('523') == '2'\nprint('All test cases passed')\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('47') == '1'\nassert solution('523') == '2'"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''9\n''') == '1'\nassert solution('''20\n''') == '4'\nassert solution('''1000000\n''') == '10'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\nassert solution('47') == '1'\nassert solution('523') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n\") == \"1\"\nassert solution(\"3\\n\") == \"1\"\nassert solution(\"100\\n\") == \"1\"\nassert solution(\"24\\n\") == \"1\"\nassert solution(\"499\\n\") == \"2\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('123') == '2'\nassert solution('21') == '2'\nassert solution('12') == '1'\nassert solution('35') == '3'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('47') == '1'\nassert solution('523') == '2'"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 10') == '1'\nassert solution('2 2 10') == '1'\nassert solution('2 1 10') == '2'\nassert solution('0 1 10') == '1'\nassert solution('0 0 10') == '10'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1'\nassert solution('2 2') == '0'"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '1 0 15'\nassert solution('3 2\\n0 1 20\\n1 0 5\\n2 0 30') == '1 0 15'\nassert solution('3 1\\n0 1 30\\n1 0 30\\n2 0 30') == '1 0 30'\nassert solution('3 1\\n0 1 30\\n1 0 30\\n2 0 30') == '1 0 30'"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '1'\nassert solution('5 3\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '0'\nassert solution('3 2\\n0 1 20\\n1 0 5\\n0 3 10') == '0 1 15'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\n0 1 20\\n1 0 5') == '1 0 15'\nassert solution('4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '0'\nassert solution('4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '1 0 15'\nassert solution('5 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '1 0 15'\nassert solution('10 10\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '1 0 15'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4') == '1'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\nassert solution('1 2') == '1 2'\nassert solution('0 1 10') == '0 1 10'\nassert solution('0 3 10') == '0 3 10'\nassert solution('3 2 10') == '0 1 10'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '0'\nassert solution('''\n3 3\n0 1 2\n1 0 2\n2 0 1\n''') == '1'\nassert solution('''\n2 1\n0 1 5\n''') == '0'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20''') == '1'\nassert solution('''2 2\n0 1 10\n1 0 5\n''') == '0 1 15'\n\nassert solution('''3 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '0 1 15'\n\nassert solution('''5 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '0 1 15'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\\n') == '5'\nassert solution('4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\\n2 5\\n') == '1'\nassert solution('3 4\\n1 1\\n1 1\\n1 1\\n') == '0'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\nassert solution('''4 4 8 12\n1 2\n2 3\n3 4\n''') == '1'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'\nassert solution('4 4 8 12') == '1'\nassert solution('5 6') == '5'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"5 6\") == \"5\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6\") == \"5\"\nassert solution(\"4 3\") == \"1\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'\nassert solution('4 4 8 12') == '1'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\") == \"5\"\nassert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\") == \"1\"\nassert solution(\"5 6\\n3 5\\n4 5\\n2 5\") == \"1\"\nassert solution(\"5 6\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\") == \"1\"\nassert solution(\"5 6\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\") == \"1\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5''') == '5'\nassert solution('''4 3\n4 4 8 12\n1 2\n2 3\n3 4\nSample Output 3:\n0\n''') == '0'\nassert solution('''5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\nSample Output 4:\n2\n''') == '2'\nassert solution('''5 7\n1 3 2 4 1 5 6 7\n1 3\n2 3\n3 4\n4 5\n5 6\n6 7\nSample Output 5:\n3\n''') == '3'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'\nassert solution('4 4 8 12') == '2'\nprint('all test cases passed')\n\n\"\"\""
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\") == \"1\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"3\"\nassert solution(\"4 4\\n1 2\\n3 4\\n3 5\\n1 4\\n4 5\\n5 6\") == \"1\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0201') == '0'\nassert solution('0202') == '1'\nassert solution('0203') == '2'\nassert solution('0204') == '3'\nassert solution('0205') == '3'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sample_input_1) == str(sample_output_1)\nassert solution(sample_input_2) == str(sample_output_2)\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('02320') == '2+3+4'\nassert solution('1311') == '2+3+11'\nassert solution('11') == '1+1'\nprint(solution(input()))\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('020302') == '7'\nassert solution('1311') == '24'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '7'\nassert solution(input()) == '24'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0123456789') == '1'\nassert solution('1234') == '2'\nassert solution('123456789') == '3'\nassert solution('1234567890123456789') == '4'\nassert solution('1234') == '2'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('020302') == '7'\nassert solution('1311') == '24'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('030302') == '7'\nassert solution('1311') == '24'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"030303\") == \"0\"\nassert solution(\"012020\") == \"1\"\nassert solution(\"012021\") == \"1\"\nassert solution(\"012022\") == \"1\"\nassert solution(\"012023\") == \"1\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1311\") == \"24\"\nprint(solution(input()))\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 20\\n###########.#.#.#.\\n###########...#.###.\\n##########..##.#..##.\\n###########..#.#.##.\\n###########.###...#.\\n\") == \"1 15 5 15\"\nassert solution(\n    \"10 20\\n###.##....##.##..##\\n#..##.##.##..##.##\\n####...#..#.##..##\\n##...#.#.#.##.##..\\n##...##.##..##.##.##\\n##.##.....##..##.#.##\\n##.#...#.#.##..##.##\\n##.#.#.###.##.##.##\\n####.##.##.##.##.##\\n###.##.....##.##.##\\n######...#.##.##.##\\n#######.##.##.##.##\\n###.##.##.##.##.##\\n##.#.##.##.##.##.##\\n##.##.##.##.##.##.##\\n##.##.##.##.##.##.##\\n######.##.##.##.##.##\\n###.##.##.##.##.##.##\\n##.##.##.##.##.##.##\\n##.##.##.##.##.##.##\\n##.##.##.##.##.##.##\\n###.##.##.##.##.##.##\\n####.##.##.##.##.##.##\\n######.##.##.##.##.##\\n##.#.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##\\n###.##.##.##.##.##.##\\n####.##.##.##.##.##.##\\n###.##.##.##.##.##.##\\n####.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##\\n######.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##\\n######.##.##.##.##.##.##\\n####.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##\\n####.##.##.##.##.##.##.##\\n####.##.##.##.##.##.##.##\\n####.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##\\n######.##.##.##.##.##.##.##\\n####.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##\\n###.##.##.##.##.##.##.##.##\\n######.##.##.##.##.##.##.##\\n####.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##.##\\n###.##.##.##.##.##.##.##.##\\n#####.##.##.##.##.##.##.##.##\\n####.##.##.##.##.##.##.##.##.##\\n###.##.##.##.##.##.##.##.##.##\\n###.##.##.##.##.##.##.##.##.##\\n####.##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##.##.##\\n##.##.##.##.##.##.##.##.##.##.##\\n###."
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########') == '3 1 3 10'\nassert solution('5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##.\\n###########..#.#.##.##\\n###########.###...#.##\\nSample Output 2: \\n1 15 5 15') == '1 15 5 15'"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 10') == \"3 1 3 10\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8 10\") == \"3 1 3 10\"\nassert solution(\"5 20\") == \"1 15 5 15\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n8 10\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"50 0.125\"\n) == \"16.339203308\"\n\nassert solution(\n    \"201 1.000\"\n) == \"5.000000000\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 0.125\") == \"16.339203308\"\nassert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\""
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"16.339203308\"\nassert solution(input()) == \"5.000000000\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"50 0.125\\n\"\n    \"201 1.000\\n\") == \"16.339203308\"\n\n\"\"\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\""
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''50 0.125\n201 1.000''') == '16.339203308'"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\nprint(solution(input()))\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('4 3\\n1 11\\n0.4 1\\n') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '2'\nassert solution('4 3') == '3'\nassert solution('4 3') == '3'\nassert solution('12 1') == '1'\nassert solution('3 8') == '7'\nprint('All tests passed!')\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 2\n1 0.6\n1 2\n0.5 1\n0.4 1\n0.4 1\nSample Output 3:\n4\n''') == '4'\n\nassert solution('''\n2 3\n1 0.6\n1 2\n0.5 1\n0.4 1\n0.4 1\nSample Output 4:\n2\n''') == '2'\n\nassert solution('''\n1 1\n0.7 1\nSample Output 5:\n1\n''') == '1'\n\nassert solution('''\n3 3\n1 0.6\n1 2\n0.5 1\n0.4 1\n0.4 1\nSample Output 6:\n3\n''') == '3'\n\nassert solution('''\n4 5\n1 0.6\n1 2\n0.5 1\n0.4 1\n0.4 1\nSample Output 7:\n5\n''') == '5'"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 3\") == \"3\"\nprint(solution(input()))\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(t1) == '3'\nassert solution(t2) == '4'"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 2\n0.5 1\n1 11\n0.4 1\"\"\") == \"3\"\nassert solution(\"\"\"4 3\n1 11\n0.4 1\"\"\") == \"2\""
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 2\n0.5 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 3\n1 11\n0.4 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('\\n'.join(['2 2', '0.5 1', '1 11', '0.4 1'])) == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 3') == '3'"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n0.5 1\\n') == '2'\nassert solution('4 3\\n1 11\\n0.4 1\\n') == '3'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"-1\"\nassert solution(\"1\") == \"1.0\"\nassert solution(\"2\") == \"0.5\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n10 2\n12 3\n3 4\n12 0\n''') == '-1'\nassert solution('''6\n3 2\n2 1\n4 0\n10 0\n1 1\n''') == '7.75'\nassert solution('''10\n10 2\n12 3\n3 4\n12 0\n''') == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '4.0'\nassert solution('3 2') == '10.0'\nassert solution('2 1') == '10.5'\nassert solution('3 0') == '-1'\nassert solution('1 2') == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '3'\n) == '10.5'\nassert solution(\n    '3'\n) == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n4 2\n0 1\n0 3\n3 2\n1 4\n4 5\n''') == '-1'\nassert solution('''\n2\n4 1\n1 2\n3 0\n''') == '2.5'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('2') == '-1'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n7 1\n3 2\n10 0\n\"\"\") == \"10.5\"\nassert solution(\"\"\"\n3\n3 2\n4 0\n\"\"\") == \"-1\"\nprint(\"solution() is working.\")"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n7 1\\n3 2\") == \"10.5\"\nassert solution(\"3\\n2 1\\n4 0\\n0 3\") == \"-1\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '10.5'\nassert solution('3\\n7 1\\n3 2') == '10.5'\nassert solution('3\\n2 1\\n4 0\\n0 3') == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n7 1\n3 2\n10 0\n\"\"\") == \"10.5\"\nassert solution(\"\"\"\n3\n7 1\n3 2\n11 1\n\"\"\") == \"11.0\"\nassert solution(\"\"\"\n3\n7 1\n3 2\n20 0\n\"\"\") == \"20.0\"\n\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 1\n0.8\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 1\n0.8 0.1 0.2\n0.6 0.3 0.5\n0.8 0.3 0.7\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 1\n0.8\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 1\n0.2 0.2 0.2 0.2\n0.2 0.2 0.2 0.2\n0.2 0.2 0.2 0.2\n0.2 0.2 0.2 0.2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10 1\n0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n\"\"\") == \"1\""
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 0.5\n2 0.5\n1 0.5\n1 0.5\n1 0.5''') == '1'\nassert solution('''5 0.5\n1 0.5\n2 0.5\n2 0.51\n1 0.49\nSample Output 3:\n2\n\nSample Input 4:\n3 0.5\n2 0.51\n1 0.49\nSample Output 4:\n3\n\nSample Input 5:\n5 0.5\n2 0.5\n1 0.5\n2 0.5\n2 0.5\nSample Output 5:\n1\n\nSample Input 6:\n10 0.5\n2 0.5\n1 0.5\n2 0.5\n1 0.5\n1 0.5\n1 0.5\n1 0.5\n1 0.5\n1 0.5\n1 0.5\n1 0.5\n1 0.5\n1 0.5\nSample Output 6:\n1\n\nSample Input 7:\n1 0.5\n1 0.5\n1 0.5\n1 0.5\nSample Output 7:\n0''') == '0'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\\n\") == \"1\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 0.1\\n5 0.3\\n1 0.7\\n') == '2'\nassert solution('4 3 0.5\\n4 1 0.5\\n1 0.5\\n') == '1'\nassert solution('1 4 0.5\\n') == '4'\nassert solution('3 2 0.1\\n1 0.5\\n') == '0'\nassert solution('3 2 0.5\\n1 0.5\\n') == '0'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 0.5\n2 0.51\n1 0.49''') == '1'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 0.5') == '1'\nassert solution('2 0.5') == '1'\nassert solution('2 0.51') == '2'\nassert solution('1 0.49') == '2'"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49\\n') == '2'\nassert solution('3 0.5\\n4 0.5\\n5 0.5\\n6 0.5\\n') == '3'\nassert solution('10 0.5\\n9 0.5\\n8 0.5\\n7 0.5\\n6 0.5\\n') == '6'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"1\"\nprint('All tests passed!')"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 0.5\n2 0.5\n1 0.5\n''') == '1'\nassert solution('''2 0.51\n2 0.51\n1 0.49\n''') == '2'"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\\n\") == \"1\"\nassert solution(\"2 0.5\\n2 0.51\\n1 0.49\\n\") == \"2\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == 'yes'\nassert solution('''\n4 5 2\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'no'"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n\") == \"yes\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 2') == 'yes'\nassert solution('5 4 4') == 'yes'\nassert solution('2 3 3 3') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 4') == 'yes'\nassert solution('5 4 4') == 'no'"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4 4') == 'yes'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"yes\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5 2\") == \"yes\"\nassert solution(\"5 4 4\") == \"no\""
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\") == \"yes\"\nassert solution(\"5 4 3\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4 2\") == \"yes\"\nassert solution(\"1 1 2 2 2\") == \"yes\"\nassert solution(\"5 5 4 4\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 2') == 'yes'\nassert solution('4 5 2') == 'no'\n\n\"\"\""
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n5\n5\n5\n5''') == '2 1'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n5\n5\n5\n\"\"\") == \"\"\"\n2\n1\n2\n\"\"\"[1:]\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"2 1 8 7\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n5\\n5\") == \"2\\n1\\n2\"\nassert solution(\"4\\n20\\n15\\n17\\n14\") == \"5\\n8\\n2\\n7\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"5 8\"\nassert solution(\"5\") == \"2 1 5\"\nassert solution(\"10\") == \"7 7 7 7 7 7 7 7 7 7\"\nassert solution(\"100\") == \"7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2 1'\nassert solution('4') == '5 8'\nprint('solution() is ok')\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\nassert solution('10') == '1'\nassert solution('100') == '4'\nassert solution('300') == '2'\nassert solution('1012') == '4'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2 1'\nassert solution('4') == '5 8'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\n4\n2\n1\n7\n8\n9\n10\n3\n5\n6\n7\n''') == '2 8 5 3 1 4 7 10 6 9'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n5\n5\n5\n''') == '2 1 2'\n\nassert solution('''4\n20\n15\n17\n14\n''') == '5 8 2 7'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\npython\np^ main.py\n^ -n 10\n''') == \"python main.py -n 10\"\nassert solution('''\n2\npython\njava\n^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^ ^\n^"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\npython\\npython\\njava\\njava\\n') == 'python\\npython\\njava'\nassert solution('2\\npython\\njava\\npython\\njava\\n') == 'java\\njava'\nassert solution('3\\npython\\npython\\njava\\njava\\n') == 'python\\npython'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'python'\nassert solution('2') == 'java'\nassert solution('3') == 'python'\nassert solution('4') == 'java'\nassert solution('5') == 'java'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\npython\\njava\\n^') == 'python\\njava'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"python\") == \"python\"\nassert solution(\"python main.py\") == \"python main.py\"\nassert solution(\"python main.py -n 10\") == \"python main.py -n 10\"\nassert solution(\"python main.py -n 10 -t\") == \"python main.py -n 10 -t\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\npython\\npython\\npython\\n') == 'python'\nassert solution('2\\npython\\njava\\n^\\n^\\n^\\n') == 'java'\nassert solution('3\\npython\\njava\\n^\\n^\\n^\\n') == ''\nassert solution('4\\njava\\n^\\n^\\n^\\n') == ''\nassert solution('5\\njava\\n^\\n^\\n^\\n') == ''\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    1\n    python\n    ^\n    python main.py\n    ^ -n 10\n    ^''') == 'python python main.py -n 10'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n') == ''\nassert solution('2\\n') == ''\nassert solution('3\\n') == ''\nassert solution('4\\n') == ''\nassert solution('5\\n') == ''"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\npython\") == \"python\"\nassert solution(\"2\\njava\") == \"java\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''python\n    ^ -n 10''') == 'python'\n\nassert solution('''java\n    ^''') == 'java'\n\nassert solution('''^''') == '^'\n\n''' == '^'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\n\nassert solution('hello') == 'impossible'"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\"\nassert solution(\"hitehre\") == \"impossible\"\nassert solution(\"\") == \"impossible\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nhitehre\n2\nthere\nhello\nSample Output 2:\nimpossible\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''tihssnetnceemkaesprfecetsesne\nmakes\nperfect\nsense\nsentence\nthis\n''') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == 'impossible'\n\"\"\"\n\nfrom collections import Counter\nfrom string import ascii_lowercase as letters\nimport itertools"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hello there') == 'impossible'\nassert solution('the') == 'impossible'\nassert solution('h') == 'impossible'\nassert solution('the the') == 'impossible'"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense', \"Wrong solution\"\n\nassert solution('hitehre') == 'impossible', \"Wrong solution\"\n\nassert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense', \"Wrong solution\"\n\nassert solution('hitehre') == 'impossible', \"Wrong solution\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hello') == 'impossible'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n\") == \"4\"\nassert solution(\"2 2\\n\") == \"16\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1\n5 6\n''') == '4'\nassert solution('''1 3\n4 5\n''') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"2 2\") == \"16\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '4'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\n''') == '4'\nassert solution('''\n2 2\n''') == '16'\n'''"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == \"4\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '4', 'TEST ERROR'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(samples_get_input) == '2'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\\nabcbab\\n2\\ncb\\ncbab\") == \"2\"\nassert solution(\"4\\nabab\\n2\\nbac\\nbaba\") == \"4\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\n'''\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\n'''\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '2'\nassert solution('6') == '2'\nassert solution('6') == '4'\nassert solution('6') == '4'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INP1) == OUT1\nassert solution(INP2) == OUT2\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nab\\nabc\\nbcd\\nef') == '3'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('16') == '4'\nassert solution('32') == '4'\nassert solution('50') == '5'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n4\n110 10\n80 10\n80 0\n110 0\n''') == '6'\nassert solution('''\n4\n3\n10 10\n30 10\n20 20\n''') == '4'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '6'\nassert solution('''\n24\n3\n10 10\n30 10\n20 20\n''') == '4'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''50\n4\n110 10\n80 10\n80 0\n110 0''') == '6\n\nassert solution('''24\n3\n10 10\n30 10\n20 20\n''') == '4\n\nassert solution('''\n2\n4\n0\n1\n''') == '3\n\nassert solution('''\n10\n3\n5\n6\n5\n4\n7\n5\n4\n3\n''') == '6\n\nassert solution('''\n24\n3\n10 10\n30 10\n20 20\n''') == '4"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n3\n0 0\n0 0\n0 0''') == '6'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10\\n4\\n10 10\\n80 10\\n80 0\\n110 0') == '6\\n85\\n90\\n95\\n100\\n105\\n'\nassert solution('10\\n3\\n10 10\\n30 10\\n20 20') == '4\\n17.071067\\n20\\n22.928932\\n'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '6'\nassert solution('1') == '4'\nassert solution('6') == '8'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"10\") == \"12\"\nassert solution(\"16\") == \"15\"\nassert solution(\"24\") == \"24\"\nassert solution(\"32\") == \"25\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\\n') == '6\\n85\\n90\\n95\\n100\\n105'\nassert solution('24\\n3\\n10 10\\n30 10\\n20 20\\n') == '4\\n17.071067\\n20\\n22.928932'\nassert solution('70\\n9\\n20\\n21\\n60\\n80\\n50\\n60\\n40\\n90\\n60\\n100\\n30\\n60\\n80\\n70\\n60\\n60\\n50\\n60\\n100\\n50\\n60\\n70\\n80\\n100\\n70\\n60\\n50\\n100\\n60\\n100\\n100\\n70\\n60\\n100\\n60\\n100\\n100\\n70\\n100\\n100\\n100\\n70\\n100\\n60\\n100\\n60\\n100\\n100\\n100\\n70\\n100\\n100\\n100\\n100\\n100\\n70\\n100\\n100\\n100\\n100\\n100\\n70\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\""
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([10, 11]) == 'yes'\nassert solution([10, 7]) == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''10 11''') == 'yes'\nassert solution('''10 7''') == 'yes'\nassert solution('''123456789''') == 'no'\nassert solution('''10''') == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"no\"\nprint(\"PASS\")\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([10,11]) == 'yes'\nassert solution([10,7]) == 'no'\nassert solution([100,7]) == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n10 11\n''') == 'yes'\nassert solution(\n'''\n10 7\n''') == 'no'\n''')\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\nassert solution('-10 -7') == 'no'\nprint('The tests passed')\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '3'"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3\\n1 6\\n2 5\\n3 4'\nassert solution('5') == '3\\n10 60\\n30 50\\n30 40\\n20 40\\n10 60'"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n3 4\n2 5\n1 6\n\"\"\") == \"3 1 6 2 5\"\nassert solution(\"\"\"\n5\n10 30\n20 40\n30 50\n10 60\n30 40\n\"\"\") == \"3 10 60 30 50\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10 30\") == \"3\"\nassert solution(\"20 40\") == \"3\"\nassert solution(\"30 50\") == \"3\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3 4\n2 5\n1 6''') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n3 4\n2 5\n1 6\n''') == '3'\n\nassert solution('''\n5\n10 30\n20 40\n30 50\n10 60\n30 40\n''') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"3\\n1 6\\n2 5\\n3 4\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '1 3'\nassert solution('5') == '1 3 5'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\n1\\n4') == '3\\n1\\n4'\nassert solution('5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40') == '3\\n10 60\\n30 50\\n30 40'\nprint('You passed all the tests!')\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1') == \"5836\"\nassert solution('5 2') == \"1828\"\nassert solution('1 2') == \"0\"\nassert solution('2 1') == \"0\"\nassert solution('5 3') == \"0\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '5836'\nassert solution('''\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == \"5836\"\nassert solution('''\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == \"1828\"\nassert solution('''\n6 5\n0 0 0 0 1\n1 0 1 1 2\n1 1 2 2 2\n1 1 1 1 2\n2 1 2 2 2\n2 2 2 2 2\n3 2 2 2 2\n4 2 2 2 2''') == \"12960\"\nassert solution('''\n6 6\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1''') == \"12960\"\nassert solution('''\n5 5\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2''') == \"6\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '5836'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1') == '5836'\nassert solution('5 2') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '5836'\nprint(solution(*(stdin := input())))"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '5836', 'First'\nassert solution('''\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '1828', 'Second'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n20 10 5\\n9 8 10\\n12 4 8\\n2 3 16\") == \"5836\"\nassert solution(\"3\\n4 4 4\\n5 6 5\\n6 8 8\\n8 2 2\\n10 4 4\\n3 4 4\") == \"5836\"\nassert solution(\"5\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\\n7 7 7\") == \"5536\"\nassert solution(\"5\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\") == \"5536\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '5836'\nprint('YOUR CODE IS CORRECT!')\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"5\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '50'\nassert solution('4') == 'impossible'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '50'\nassert solution('2') == 'impossible'"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"impossible\"\nassert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"50\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"3\\n7 2401 3299 0\") == \"50\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99') == '50'\nassert solution('3\\n7 100 200 200\\n8 100 300 200\\n9 100 400 200\\n') == 'impossible'\nassert solution('1\\n0\\n10\\n') == 'impossible'\n\nimport sys\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99''') == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == output"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5.0') == '0 0 0 0 1', 'First'\nassert solution('4.5') == '0 0 0 1 1', 'Second'"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n\"\"\""
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\nprint('Solution:')\nprint(solution(*TESTS))\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5.0''') == '0 0 0 0 1'\nassert solution('''4.5''') == '0 0 0 1 1'\n\"\"\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 3 1\n1 7 8 2 6 4 3 5\n''') == '8'\nassert solution('''8 2 1\n1 7 8 2 6 4 3 5\n''') == '3'\nassert solution('''12 4 1\n1 7 8 2 6 4 3 5\n''') == '8'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '8 3 1\\n'\n    '1 7 8 2 6 4 3 5\\n'\n    ) == '8'\nassert solution(\n    '8 2 1\\n'\n    '1 7 8 2 6 4 3 5\\n'\n    ) == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 3 1') == '8'\nassert solution('10 8 2') == '10'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n\nimport itertools\nimport collections"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 3 1\") == \"8\"\nassert solution(\"8 2 1\") == \"3\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n7 3 1\\n1 7 8 2 6 4 3 5\\n') == '8'\nassert solution('2\\n3 4 1\\n1 7 8 2 6 4 3 5\\n') == '3'\n\n------------------\nAhopper: The method that jumps from the current index to the next index with the maximum length possible.\n\nclass Ahopper:\n    def __init__(self, array, d, m):\n        self.array = array\n        self.d = d\n        self.m = m\n        self.current_index = 0\n        self.jump_to_index = 0\n        self.max_index = 0\n\n    def jump(self):\n        if self.current_index + self.d <= len(self.array):\n            self.jump_to_index = self.current_index + self.d\n            if self.array[self.current_index] - self.array[self.jump_to_index] > self.m:\n                self.max_index = self.current_index\n                self.current_index = self.jump_to_index\n                return True\n        return False\n\narray = [1, 7, 8, 2, 6, 4, 3, 5]\nd = 3\nm = 1\n\nah = Ahopper(array, d, m)\nprint(ah.array)\nprint(ah.d, ah.m, ah.current_index, ah.jump_to_index, ah.max_index)\n\nwhile ah.jump():\n    print(ah.array, ah.d, ah.m, ah.current_index, ah.jump_to_index, ah.max_index)\n\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2, 6, 4, 3, 5] 3 1 3\n-> [1, 7, 8, 2,"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 3\\n2 2 2 4 4 4') == '4'\nprint(solution('''6 3\n2 2 2 4 4 4'''))"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == '3'\nassert solution('6 3') == '4'\nassert solution('10 2') == '2'\nassert solution('8 3') == '3'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2 3 4 1\n''') == '3'\nassert solution('''\n6 3\n2 2 2 4 4 4\n''') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '3'\nassert solution('6 3') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == \"3\"\n\n'''"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2\n2 3 4 1\n''') == '3'\nassert solution('''\n4 4\n5 5 6 7\n''') == '1'\nassert solution('''\n10 3\n10 20 30 50 40 50 40 30\n''') == '1'\nassert solution('''\n10 2\n10 20 20 30 50 40 50 40 30\n''') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"6 3\") == \"4\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n3\n5\n3\n\n''') == '4'\n\nassert solution('''\n1\n1\n\n''') == '1'\n\nassert solution('''\n3\n4\n5\n2\n\n''') == '3'"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('10') == '9'\nassert solution('1023') == '10'\nassert solution('11010010') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 3\n4 1 3 2 5\n''') == '4'\nassert solution('''\n5 3\n5 1 3 2 4\n''') == '4'\nassert solution('''\n2 2\n5 4\n''') == '2'\nassert solution('''\n1 2\n''') == '0'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 2.000001') == '-1'\nassert solution('1 1 1.000001') == '1.000001'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\nassert solution('1 1 2.0') == '-1'\n\n'''\n\na,b,c = list(map(float, input().split()))"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 3.0') == '1.732050808'\nassert solution('1 1 -2.0') == '-1.0'\nassert solution('1 0.5 1.0') == '0.8'\nassert solution('-3 -3.0') == '-0.8'\nassert solution('1 -2.0 2.0') == '1.0'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.7320508\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.7320508\"\n\"\"\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1.732050') == '1.7320508'\nassert solution('1 1 3.0') == '-1'\n'''\nimport math"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 1 1.732050\n1 1 3.0\n1 1 2.2\n1 1 5.6\n1 1 4.1\n1 1 6.3\n1 2 7.7\n1 1 4.1\n1 2 3.8\n1 3 4.2\n1 3 5.6\n1 3 7.7\n1 2 6.3\n1 1 2.2\n1 3 3.8\n1 3 4.2\n1 4 4.1\n1 2 3.8\n1 2 5.6\n1 1 4.1\n1 2 2.2\n1 2 6.3\n1 2 7.7\n1 3 7.7\n1 1 3.8\n1 4 4.2\n1 2 6.3\n1 1 2.2\n1 2 2.2\n1 1 6.3\n1 3 7.7\n1 3 4.2\n1 1 4.1\n1 1 5.6\n1 1 7.7\n1 2 7.7\n1 2 5.6\n1 3 4.2\n1 3 2.2\n1 2 2.2\n1 2 7.7\n1 3 7.7\n1 4 4.2\n1 3 4.2\n1 4 5.6\n1 2 7.7\n1 1 4.1\n1 2 3.8\n1 2 5.6\n1 3 4.2\n1 1 4.1\n1 2 4.1\n1 1 4.1\n1 3 3.8\n1 2 3.8\n1 3 7.7\n1 3 5.6\n1 2 7.7\n1 1 7.7\n1 3 4.2\n1 1 5.6\n1 2 2.2\n1 1 2.2\n1 1 2.2\n1 2 5.6\n1 1 6.3\n1 3 3.8\n1 2 4.2\n1 1 4.1\n1 1 2.2\n1 1 3.8\n1 1 2.2\n1 1 4.1\n1 1 2.2\n1 2 2.2\n1 2 6.3\n1 1 5.6\n1 1 4.1\n1 1 6.3\n1 1 7.7\n1 2 5.6\n1 1 4.1\n1 1 6.3\n1 1 7.7\n1 2 7.7\n1 3 5.6\n1 1 3.8\n1 3 4.2\n1 2 5.6\n1 1 2.2\n1 1 2.2\n1 2 7.7\n1 1 4.1\n1 2 2.2\n1 1 4.1\n1 3 3.8\n1 2 7.7\n1 3 4.2\n1 2 6.3\n1 3 7.7\n1 1 2.2\n1 3 4.2\n1 2 3.8\n1 2 6.3\n1 3 4.2\n1 4 4.1\n1 2 6.3\n1 1 4.1\n1 2 7.7\n1 3 7.7\n1 2 7.7\n1 2 5.6\n1 2 6.3\n1 3 7.7\n1 3 5.6\n1 2 7.7\n1 2 5.6\n1 1 5.6\n1 1 2.2\n1 1 2.2\n1 1 2.2\n1 2 7.7\n1 1 3.8\n1 1 2.2\n1 1 3.8\n1 1 4.1\n1 1 4.1\n1 1 7.7\n1 1 7.7\n1 1 4.1\n1 3 3.8\n1 2 6.3\n1 2 7.7\n1 3 7.7\n1 3 6.3\n1 3 5.6\n1 1 5.6\n1 2 4.1\n1 1 7.7\n1 2 7.7\n1 2 6.3\n1 2 7.7\n1 3 7.7\n1 1 5.6\n1 1 4.1\n1 1 4.1\n1 1 2.2\n1 2 2.2\n1 1 2.2\n1 1 5.6\n1 1 3.8\n1 1 4.1\n1 1 4.1\n1 2 2.2\n1 2 4.2\n1 1 5.6\n1 1 4.1\n1 1 3.8\n1 1 2.2\n1 1 4.1\n1 2 2.2\n1 2 7.7\n1 3 5.6\n1 1 3.8\n1 1 2.2\n1 3 2.2\n1 1 4.1\n1 2 6.3\n1 1 4.1\n1 3 3.8\n1 1 4.1\n1 1 7.7\n1 2 4.1\n1 1 6.3\n1 1 7.7\n1 1 7.7\n1 1 3.8\n1 1 2.2\n1 2 2.2\n1 1 2.2\n1 1 5.6\n1 1 4.1\n1 1 6.3\n1 1 7.7\n1 1 7.7\n1 1 4.1\n1 1 5.6\n1 1 3.8\n1 1 4.1\n1 2 2.2\n1 2 4.2\n1 1 5.6\n1 1 7.7\n1 1 7.7\n1 1 4.1\n1 3 2.2\n1 1 4.1\n1 1 4.1\n1 1 5.6\n1 1 7.7\n1 1 4.1\n1 3 3.8\n1 1 4.1\n1 1 4.1\n1 1 3.8\n1 1 2.2\n1 1 3.8\n1 2 3.8\n1 1 2.2\n1 3 2.2\n1 1 7.7\n1 1 2.2\n1 1 2.2\n1 1 2.2\n1 1 2.2\n1 1 2.2\n1 1 2.2\n1 1 3.8\n1 1 4.1\n1 1 4.1\n1 1 2.2\n1 2 3.8\n1 2 4.2\n1 1 4.1\n1 1 4.1\n1 1 3.8\n1 1 4.1\n1 1 4.1\n1 1 4.1\n1 1 4.1\n1 1 5.6\n1 1 3.8\n1 1 4.1\n1 1 4.1\n1 1 4.1\n1 1 5.6\n1 1 3.8\n1 1 7.7\n1 1 2.2\n1 1 2.2\n1 1 2.2\n1 1 3.8\n1 1 2.2\n1 1 3.8\n1 1 2.2\n1 1 7.7\n1 1 4.1\n1 1 4.1\n1 1 3.8\n1 1 3.8\n1 1 4.1\n1 1 2.2\n1 1 2.2\n1 1 2.2\n1 1 7.7\n1 1 4.1\n1 1 5.6\n1 1 4.1\n1 1 4.1\n1 1 5.6\n1 1 7.7\n1 1 7.7\n1 1 7.7\n1 1 4.1\n1 1 7.7\n1 1 7.7\n1 1 4.1\n1 1 4.1\n1 1 4.1\n1 1 4.1\n1 1 3.8\n1 1 2.2\n1 1 4.1\n1 1 2.2\n1"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3 4 2\\n.75') == '2.4999999987500003'\nassert solution('2\\n0 100 10\\n0 -100 100\\n.80') == '9.999999999000002'"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution('''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\nassert solution('''\n0\n0 0 0\n.70\n''') == '3.5'\nassert solution('''\n0\n0 0 0\n.8\n''') == '5.0'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"2.4999999987500003\"\nassert solution(\"2\") == \"9.999999999000002\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '2.4999999987500003'\nassert solution('2') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n0 0 2\n1 1.75\n2 0.8\n3.3.2\n\"\"\") == \"2.4999999987500003\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3 4 2\\n.75') == '2.4999999987500003'\nassert solution('2\\n0 100 10\\n0 -100 100\\n.80') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n3 4 2\n.75\n\"\"\") == \"2.4999999987500003\"\nassert solution(\"\"\"\n2\n0 100 10\n0 -100 100\n.80\n\"\"\") == \"9.999999999000002\""
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n3 4 2\n.75\n\"\"\") == \"2.4999999987500003\"\nassert solution(\"\"\"\n2\n0 100 10\n0 -100 100\n.80\n\"\"\") == \"9.999999999000002\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\n\nassert solution('''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\n\nassert solution('''\n4\n1 2 0.5\n3 2 1.25\n2 2 1.5\n1 2 0.75\n''') == '1.9287113883406165'\n\nprint(f'Successful Test Cases: {success} / {total}')\nprint(f'Total Run Time: {(success_time - start_time)/60} minutes')\nprint('\\n')"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\nassert solution('''\n6 3\n1 1 6\n1 2 3\n1 3 4\n2 1 2\n2 2 2\n2 3 3\n2 4 4\n''') == '2'\nassert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '1'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '3'\nassert solution('10 10') == '6'"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 3') == '0'\nassert solution('4 5') == '3'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n''') == '0'\nassert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\n\nstdin = '''\n5 2\n1 1 5 1 2\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n'''\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 5 1 2\") == \"0\"\nassert solution(\"2 1 6\") == \"3\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 5\n2 1 6\n1 1 5 1 2\n2 1 6\nSample Input 3:\n6 2\n1 1 1\n2 1 6\nSample Output 3:\n0\n3\n\nSample Input 4:\n6 4\n1 1 5 1 2\n2 1 1\n2 2 2\n2 3 3\n2 4 4\nSample Output 4:\n3\n2\n1\n0\n''') == '3'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n''') == '0'\nassert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 3\") == \"0\\n3\\n\"\nassert solution(\"4 5\") == \"3\\n2\\n\""
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\n\nassert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '2'\n\nassert solution('''\n3\n1 1 2\n1 1 3\n2 2 4\nSample Output 3:\n3\n0\n2\n''') == '0'\n\nassert solution('''\n3\n1 1 2\n1 1 3\n2 2 4\nSample Output 3:\n3\n1\n2\n''') == '1'\n\nassert solution('''\n5\n1 1 3 2 2\n1 2 3 4 4\n2 1 3 2 3\n2 2 3 3 4\n3 1 3 2 2\n''') == '1'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 1 6\\n\"\n    \"2 1 6\\n\"\n) == \"3\"\n\nassert solution(\n    \"4 5\\n\"\n    \"1 1 4 3 4\\n\"\n    \"2 1 1\\n\"\n    \"2 2 2\\n\"\n    \"2 3 3\\n\"\n    \"2 4 4\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n\"\"\""
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == '4'\nassert solution('') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 7 1000000007\n''') == '1'\n\nassert solution('''\n3 2 1000000007\n''') == '4'\n\nassert solution('''\n4 5 10007\n''') == '3'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\nassert solution('3 2 10000000007') == '0'\nassert solution('3 3 10000000007') == '0'\nassert solution('3 3 1000000007') == '0'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 10') == '5'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5') == '8'"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 10\n6\nSample Input 1:\n1 10\n5\nSample Output 1:\n5\n''') == '5'\nassert solution('''3 5\n11\nSample Output 2:\n8\n''') == '8'\nassert solution('''10 10\n7\nSample Output 3:\n8\n''') == '8'\nassert solution('''10 10\n3\nSample Output 4:\n9\n''') == '9'\nassert solution('''100 10\n1\nSample Output 5:\n0\n''') == '0'"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('2\\n3') == '1'\nassert solution('3\\n4') == '2'\nassert solution('4\\n5') == '2'\nassert solution('5\\n6') == '3'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1\\n1') == '1'\nassert solution('2 2\\n1') == '2'\nassert solution('3 4\\n1') == '3'\n\nimport sys\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(['10', '6']) == '5'\nassert solution(['3', '5']) == '8'"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n2\\n\") == \"5\"\nassert solution(\"1 1\\n2\\n\") == \"3\"\nassert solution(\"10 20\\n20 10\\n\") == \"15\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '5'\nassert solution('3 5') == '8'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 1') == '2'\nassert solution('4 3 3') == '3'\nassert solution('8 9 2') == '3'\nassert solution('4 5 3') == '1'\nassert solution('4 5 3') == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\n\nassert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '3'"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\nassert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '3'\nassert solution('''\n5 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\nassert solution('''\n5 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '3'\nassert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5 3') == '2'\nassert solution('4 5 3') == '3'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3') == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(example_input_00) == \"2\"\nassert solution(example_input_01) == \"3\"\nassert solution(example_input_02) == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 3\") == \"2\"\nassert solution(\"4 5 3\") == \"3\"\nassert solution(\"4 5 3\") == \"3\"\nassert solution(\"4 5 3\") == \"3\""
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 2\n1 2 1\n3 2 1\n''') == '2'\nassert solution(\n'''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '3'\nassert solution(\n'''\n\n''') == '1'\nassert solution(\n'''\n\n''') == '0'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '2'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '3'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1') == '1'\nassert solution('10 20 20 20\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '2'"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sample_input_1) == \"2\"\nassert solution(sample_input_2) == \"3\"\nprint(solution(input))\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5 3') == '2'\nassert solution('4 5 3') == '3'\nassert solution('10 10 5') == '2'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1') == '1'\n\"\"\"\nimport heapq"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '3'\nassert solution('3 1') == '3'\nassert solution('3 1') == '3'\nassert solution('3 1') == '3'\nassert solution('3 1') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n3 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n1 2\n10\n10\n''') == '2'"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"3 1\") == \"3\"\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        max_ponies = 0\n        ponies_on_type = [0] * m\n        ponies_off_type = [0] * m\n        for i in range(n):\n            i_ponies_off, i_ponies_on = map(int, stdin.split())\n            ponies_off_type[i_ponies_off - 1] += 1\n            ponies_on_type[i_ponies_on - 1] += 1\n        for i in range(1, m):\n            ponies_off_type[i - 1] += ponies_off_type[i]\n            ponies_on_type[i - 1] += ponies_on_type[i]\n        max_ponies = max(max(ponies_off_type), max(ponies_on_type))\n        return str(max_ponies)\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == '3'\nassert solution('3 1') == '3'\nassert solution('5 5 10') == '5'\nassert solution('2 20') == '3'\nassert solution('1 30') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 1\\n10\\n10\\n1 10\\n1 10\\n1 10\") == \"3\"\nassert solution(\"4 3\\n5 5 10\\n2 20\\n1 30\\n1 32\") == \"3\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\nprint(\"SUCCESS\")\n\"\"\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 1\n10\n10\n1 10\n1 10\n1 10\n''') == '3'\nassert solution('''\n4 2\n10 20\n20 30\n30 40\n40 50\n10\n20\n30\n40\n50\n''') == '4'\nassert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n2 5\n3 1 2 2 1\n''') == '2'\nassert solution('''\n6 3\n10 20 30\n40 50 60\n50 60 50\n40 50 60\n30 50 40\n''') == '3'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n3\") == \"5\"\nassert solution(\"4\\n4\\n4\") == \"0\"\nassert solution(\"8\\n2\\n4\") == \"4\""
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n\n5\n1 2\n1 3\n1 4\n2 3\n2 4\n2 5\n3 4\n3 5\n''') == '5'\nassert solution('''\n\n8\n3 4\n5 6\n7 8\n1 2\n4 5\n7 8\n9 10\n12 13\n4 9\n''') == '8'\nassert solution('''\n\n10\n6 5\n7 8\n1 2\n3 4\n5 6\n7 8\n9 10\n12 13\n4 9\n3 8\n''') == '13'\nassert solution('''\n\n100\n37 38\n46 55\n42 51\n48 60\n44 66\n''') == '19'"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n3\n4\n5\n2\n2\n''') == '5'\n\nassert solution('''\n10\n12\n3\n4\n5\n''') == '10'\n\nassert solution('''\n10\n15\n3\n4\n5\n''') == '15'\n\nassert solution('''\n10\n15\n3\n4\n5\n''') == '15'\n\nassert solution('''\n10\n5\n2\n4\n3\n''') == '10'"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '-1'\nassert solution('5 3') == '2'\nprint(solution(input()))\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n0 11 9\n1 0 10\n0 0 0''') == '2'\nassert solution('''4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0''') == '-1'\nassert solution('''6 0\n0 0 0 0 0 0\n1 1 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0''') == '1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\n\nassert solution('''\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\n\nassert solution('''\n5 3\n0 1 0 0\n0 0 2 0\n0 5 0 3\n0 0 0 0\n0 0 0 0\n''') == '1'\n\nassert solution('''\n6 3\n0 1 0 0 0 0\n0 0 2 0 0 0\n0 5 0 3 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n''') == '2'\n\nassert solution('''\n7 3\n0 1 0 0 0 0 0\n0 0 2 0 0 0 0\n0 5 0 3 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n''') == '-1'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\nassert solution('''4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\nassert solution('4 3') == '-1'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 1\n0 11 9\n1 0 10\n0 0 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\nassert solution('''\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\nassert solution('''\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\nassert solution('''\n1 4\n1 1 3\n3 2 3\n3 0 0\n''') == '-1'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 100000 1'\n\nsolution('')\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 0 1') == '4 3 5'\nassert solution('2 1 0 1') == '0 1 2'\nassert solution('2 1 0 1') == '0 1 2'\nassert solution('5 5 0 3') == '4 3 5'\nassert solution('5 5 0 3') == '0 1 2'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\\n') == '4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2'\nassert solution('1 1 0 1\\n0 1 100000\\n') == '1 1 0 1\\n0 1 100000'"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4 0 3\") == \"3 4 100000\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\"\nprint(\"You're all set!\")\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 1 2'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1 0 3\") == \"3 2 1\"\nassert solution(\"2 1 0 3\") == \"3 2 1\"\nassert solution(\"2 1 0 3\") == \"3 2 1\"\nassert solution(\"2 1 0 3\") == \"3 2 1\""
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 100000 1'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\""
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\nassert solution(\"4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\""
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '1 4 3'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n.\n.\n.\n.\n.\n.\n2\n.\n.\n.\n.\n.\n.\n''') == '2 0'\nassert solution('''1\n.\n.\n.\n.\n.\n.\n2\n.\n.\n.\n.\n.\n.\n.\n''') == '1 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3\nSMS\nMMS\n''') == \"3 5\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2 3\\nSMS\\nMMS\"\n) == \"3 5\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\nSMS\nMMS''') == '''3 5'''\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '3 5'\n\nassert solution('2 3') == '2 0'\n\nassert solution('2 4') == '3 1'\n\nassert solution('1 1') == '0 0'\n\nassert solution('1 1') == '0 0'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\nSMS\nMMS\n''') == '2 5'\nassert solution('''4 4\nSMS\nSMS\nMMS\nMMS\n''') == '0 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '3 5'\nassert solution('2 3') == '2 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\nSMS\nMMS\n''') == '5 5'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\n\nassert solution(\"2 1\\nMMS\\nMMS\") == \"0 0\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n.S.M.S.') == '1 5'\nassert solution('2\\nM.S.S.M.') == '2 0'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\nassert solution() == '2'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n3\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\n\nassert solution(\n    '''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\nSample Output 2:\n1\n6 b\n'''\n) == '1'\n\nassert solution(\n    '''\n13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n3\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n4\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1 c\"\nassert solution(\"7\") == \"6 c\"\nassert solution(\"5\") == \"6 c\"\nassert solution(\"11\") == \"7 a\"\nassert solution(\"13\") == \"10 a\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\nSample Output 2:\n1\n6 b\n''') == '1'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\"\n\nassert solution(\"3\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\") == \"2\"\n\nassert solution(\"6\\n0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 T a\\nSample Output 3:\") == \"1\"\n\nassert solution(\"6\\n0 B\\n1 T a\\n2 E a\\n2 S\\n5 T a\\nSample Output 4:\") == \"1\"\n\nassert solution(\"6\\n0 B\\n1 T a\\n2 E a\\n2 S\\n5 T a\\nSample Output 5:\") == \"0\""
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\n\nassert solution('''\n4\n0 B\n1 B\n2 E a\n2 S\n1 T a\nSample Output 3:\n1\n7 b\n''') == '3'\n\nassert solution('''\n3\n0 B\n1 T a\n2 E a\nSample Output 4:\n0\n''') == '1'\n\nimport aoc\n\npuzzle = aoc.Puzzle(day=13, year=2020)\n\npuzzle.answer(solution())\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\nassert solution('2 3') == '2'"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\""
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '40'\nassert solution('1 2') == '2'\nassert solution('3 2') == '1'\nassert solution('1 100') == '1'\nassert solution('2 100') == '2'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == str(40)\nassert solution(input()) == str(76)"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5\") == \"40\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5') == \"40\"\nassert solution('288 291') == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5\\n') == '40'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\nprint(solution(input()))\n'''"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\nassert solution('4 5') == '100'\nassert solution('10 5') == '40'\nassert solution('1 3') == '9'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"COG\", \"1st\"\nprint(solution(stdin))"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"CAT\"\nassert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"CAT\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\nCAT\nDOG\nCOT\n''') == 'COG'\nassert solution('''\n4\nCAT\nDOG\nCOT\n''') == 'CAT'\nassert solution('''\n2\nCAT\nDOG\n''') == '0'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\nCAT\nDOG\n''') == 'COG'\nassert solution('''\n3\nCAT\nDOG\nCOT\n''') == 'COG'\nassert solution('''\n1\nCAT\n''') == 'CAT'\nassert solution('''\n4\nCAT\nDOG\nCOT\nDOG\n''') == 'CAT'\nassert solution('''\n7\nCAT\nDOG\nCOT\nDOG\nCAT\nDOG\n''') == 'CAT'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'CAT'\nassert solution('2') == 'COG'\nassert solution('3') == 'COT'"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    5\n    CAT\n    DOG\n    COT\n    \n    3\n    CAT\n    DOG\n    COT\n    ''') == 'COG'\n\nassert solution('''\n    2\n    CAT\n    DOG\n    ''') == '0'\n\nassert solution('''\n    2\n    CAT\n    CAT\n    ''') == '0'\n\nassert solution('''\n    2\n    CAT\n    CAT\n    ''') == '0'\n\nassert solution('''\n    2\n    CAT\n    CAT\n    ''') == '0'"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\nCAT\nDOG\n''') == 'CAT'\nassert solution('''2\nCAT\nDOG\n''') == 'DOG'\nassert solution('''3\nCAT\nDOG\nCOT\n''') == 'COT'\nassert solution('''3\nCAT\nDOG\nCOT\n''') == 'COT'\nassert solution('''10\nCAT\nDOG\nCOT\nCAT\nDOG\nCOT\nDOG\nCAT\nCAT\nDOG\nDOG\nCOT\nDOG\nCAT\n''') == 'DOG'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\nCAT\nDOG\n''') == 'COG'\nassert solution('''\n2\nCAT\nDOG\n''') == '0'"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == 'COG'\nprint('You are a smart cookie!')\n\"\"\""
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\nCAT\\nDOG') == 'COG'\nassert solution('1\\nCAT\\nDOG') == 'CAT'\nassert solution('3\\nCAT\\nDOG') == 'CAT'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 1\") == \"9\"\nassert solution(\"4 3\") == \"6\""
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n4 3\n''') == '6'\n\nassert solution(\n'''\n4 4\n''') == '10'\n\nassert solution(\n'''\n2 3\n''') == '3'\n\nassert solution(\n'''\n4 2\n''') == '2'\n\nassert solution(\n'''\n10 10\n''') == '13'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 1\") == \"9\"\nassert solution(\"4 3\") == \"6\""
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('4 3') == '6'\nassert solution('2') == '0'\n\n---Input Format---\nThe first line contains $N$. The second line contains $N$ integers separated by a single space.\n\n---Constraints---\n1 <= $N$ <= 1000\n1 <= $C$ <= 10000\n\n---Output Format---\nPrint the total number of sequences modulo $1000000007$.\n\n---Sample Input 0---\n10 1\n4 3\n5 6 7 8 9 10\n\n---Sample Output 0---\n9\n'''\n\nn = int(input())\nn_lst = list(map(int, input().split()))\n\nresult = 0\nconfusion = 0\n\nfor i in range(len(n_lst)-1):\n    confusion += 1\n    if n_lst[i] > n_lst[i+1]:\n        result += confusion\n        confusion = 0\n\nprint(result)\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 1\") == \"9\"\nassert solution(\"4 3\") == \"6\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1\n2 3\n3 4\n1 2''') == '6', 'Wrong!'\nassert solution('''10 2\n2 3\n3 4\n1 2''') == '10', 'Wrong!'\n\n\"\"\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 1\") == \"9\"\nassert solution(\"4 3\") == \"6\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '9\\n'\nassert solution('10 1\\n') == '9\\n'\nassert solution('4 3\\n') == '6\\n'\nassert solution('12 4\\n') == '10\\n'\nassert solution('4 4\\n') == '4\\n'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2') == '0'\nassert solution('1\\n3') == '1'\nassert solution('4\\n4') == '0'\nassert solution('10\\n2') == '8'\nassert solution('100\\n10') == '60'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V./') == '3'\nassert solution('2 5\\nV...\\nH...V') == '-1'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V./') == '3'\n\nassert solution('1 1\\nH.V\\n.V.H') == '-1'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5\\nV...\\nH...V') == '3'\nassert solution('5 5\\nV...\\nH...V\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V.') == '-1'\nassert solution('8 8\\n.#...#\\n#######\\n##.##.\\n....#.\\n#####.\\n..#.#.\\n########\\n#.#####\\n....##') == '4'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 5\n.V.\n.V.\n.V.\n.V.\n.V.''') == '3'\n\nassert solution('''\n5 5\n.V..\n.V..\n.V..\n.V..\n.V..\n''') == '2'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 5\n/.V.\\\n./.V.\n..#..\n.V.#.\n.V./''') == '3'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5\\nV...\\nH...V') == '3'\nassert solution('2 5\\nV...\\nH...V') == '-1'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V./\") == \"3\"\nassert solution(\"2 5\\nV...\\nH...V\") == \"-1\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"3\"\nassert solution(\"2 5\") == \"-1\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '5 5\\n'\n    '.V.\\n'\n    './.V.\\n'\n    '..#..\\n'\n    '.V.#.\\n'\n    '.V./'\n) == '3'\n\nassert solution(\n    '2 5\\n'\n    'V...\\n'\n    'H...V'\n) == '-1'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"AMBIGUOUS\", \"test 1\"\nassert solution(\"a\") == \"AMBIGUOUS\", \"test 2\"\nassert solution(\"n fox jumps ove\") == \"AMBIGUOUS\", \"test 3\"\nassert solution(\"n fox jumps oove\") == \"AMBIGUOUS\", \"test 4\"\nassert solution(\"n fox jumps oove \") == \"AMBIGUOUS\", \"test 5\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7') == \"The quick brown fox jumps over the lazy dog.\"\nassert solution('4') == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7\\nn fox jumps ove\\nuick brown f\\nThe quick b\\ny dog.\\nrown fox\\nmps over the l\\nthe lazy dog\\n') == 'The quick brown fox jumps over the lazy dog.'\nassert solution('4\\ncdefghi\\nefghijk\\nefghijx\\nabcdefg\\n') == 'AMBIGUOUS'\nassert solution('10\\nabc\\nabcd\\nabcde\\nabcdef\\nabcdefg\\nabcdefgh\\nabcdefghi\\nabcdefghij\\nabcdefghijk\\nabcdefghijkl\\n') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n\"\"\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('n fox jumps ove\\r\\nuick brown f\\r\\nThe quick b\\r\\ny dog.\\r\\nrown fox\\r\\nmps over the l\\r\\nthe lazy dog\\r\\n') == 'AMBIGUOUS'\n\nThe two puzzles below are quite short and give you a hint of what you should do to test your code:\n\n---Part 1---\nFor Part 2, you need to make sure that you haven't messed up the non-deterministic function, i.e., that it's still a non-deterministic recurrence.\n\n---Part 2---\nFor Part 1, you need to make sure that you haven't messed up the deterministic function, i.e., that it's still a deterministic recurrence.\n\nIf you ever get stuck on a particular line of your code, you can look at the solution to try to debug it. Then, if you ever get stuck again, you can try to write a better function.\n\nIf you still get stuck, then be sure to look for patterns in your code to help you get more and more familiar with the problem.\n\n*Note: You may assume that n is always greater than 0 and no more than 250.\n\n'''\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'AMBIGUOUS'"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7') == 'The quick brown fox jumps ove'\nassert solution('4') == 'AMBIGUOUS'\nassert solution('1') == 'AMBIGUOUS'\nassert solution('0') == 'AMBIGUOUS'\n\"\"\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7\\nn fox jumps ove\\nuick brown f\\nThe quick b\\ny dog.\\nrown fox\\nmps over the l\\nthe lazy dog\\n') == 'AMBIGUOUS'\nassert solution('4\\ncdefghi\\nefghijk\\nefghijx\\nabcdefg\\n') == 'AMBIGUOUS'\nassert solution('3\\nxyz\\nabc\\n') == 'AMBIGUOUS'\nassert solution('5\\njason\\nhannah\\nkate\\nryan\\n') == 'AMBIGUOUS'\n\n\"\"\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\nq\nw\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == 'AMBIGUOUS'\n\nassert solution('''\n20\nc\ns\nh\ne\nd\ng\nb\nf\ni\nj\nk\nl\nm\nn\no\np\nq\nr\nt\nu\nv\nw\nx\ny\nz\na\nb\nc\n''') == 'AMBIGUOUS'\n\nassert solution('''\n10\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == 'AMBIGUOUS'\n\nassert solution('''\n4\nabcdefgh\nhijklmn\nhkll\nhjl\n''') == 'AMBIGUOUS'\n\nassert solution('''\n1\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7\\nn fox jumps ove\\nuick brown f\\ny dog.\\nrown fox\\nmps over the l\\nthe lazy dog') == 'AMBIGUOUS'\nassert solution('3\\ncdefghi\\nefghijk\\nefghijx\\nabcdefg\\n') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 6\") == \"--+0-\", \"First\"\nassert solution(\"3 2\") == \"0+-\", \"Second\"\nassert solution(\"6 0\") == \"impossible\", \"Third\"\nassert solution(\"7 2\") == \"impossible\", \"Fourth\""
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"0+-\""
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == \"--+0-\"\nassert solution(\"3 2\") == \"0+-\"\n\n###\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"--+0-\", \"First example\"\nassert solution(\"3 2\") == \"0+-\", \"Second example\""
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '0+-', f\"actual: {solution('3 2')}\"\nassert solution('5 6') == '--+0-', f\"actual: {solution('5 6')}\"\nassert solution('1 2') == '--+0-', f\"actual: {solution('1 2')}\"\nassert solution('-2 -2 4') == '--+0-', f\"actual: {solution('-2 -2 4')}\"\nassert solution('2 3 3') == '-+-0+--', f\"actual: {solution('2 3 3')}\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '0+-'\nassert solution('4 2') == '--0+'\nassert solution('7 8') == '0+--0--'\nassert solution('10 9') == '0+--+0+--+'\nassert solution('20 15') == '0+--+--+0+--+0+--+0+--+--+'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n0 -1 2\\n1 1 2\") == \"--+0-\"\nassert solution(\"3 3\\n1 2 3\\n0 -1 2\") == \"0-0-\"\n\n\"\"\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '--+0-'\nassert solution('3 2') == '0+-\nassert solution('0 0 0') == 'impossible"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '--+0-0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0+--0"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"--+0-\"\nassert solution(\"3 2\\n1 2 1\\n-1 -2 2\") == \"0+-\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == '1'\nassert solution([2, 2, 2, 2, 2, 2, 2, 2]) == '6'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '2'\nassert solution('2 3') == '4'\nassert solution('2') == '0'\nassert solution('1 2 1') == '3'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 1') == '1'\nassert solution('1 2 1 1') == '1'\nassert solution('1 2 1 1 1') == '1'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 3') == '4'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2\n1 1\n1 1\n1\n1 1 1\n1 2 1\n2 2 1\n''') == '1'\nassert solution('''\n2 2\n1 2\n2 2\n2\n1 2 2\n1 2 2\n1 1 1\n1 1 1 1\nSample Output 3:\n1\n4\n''') == '4'"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\n1 1\n1 1\n1''') == '1'\nassert solution('''2 2\n1 2\n2 3\n2''') == '4'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"2\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 1\n1 1\n2\n1 1 1 1\n1 1 1\n''') == '2'\nassert solution('''\n10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n2 4\n3\n2 1 1\n1 3\n4\n1 2 1\n1 2 1\n3\n4\n3\n2 1 1\n1 3\n4\n1 3 1\n2 2 1\n''') == '4'\n\nassert solution('''1\n3\n1 1\n1 2\n3\n1 2 2\n1 3\n2 1 1\n1 3\n4\n1 3 1\n2 2 1\n''') == '2'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 4\nWWRR\nWRRR\nWRRR\n''') == 'YES'\nassert solution('''3 2\nWWRR\nWRRR\n''') == 'NO'\nassert solution('''2 2\nWBR\n''') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5\\nWWRR\\nWRRR\\nWRRR\\nWBBBB') == 'YES'\n\nprint(solution('''4 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB'''))\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\nWRRR\nWRRR\nWRRR\n''') == 'YES'\nassert solution('''\n2 2\nWRR\n''') == 'NO'\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a $N$ \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 $M$. \u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0435\u0442 \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u0441\u0442\u0440\u043e\u043a \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 (\u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043b\u044e\u0431\u043e\u0433\u043e \u0442\u0438\u043f\u0430). \u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b \u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u0442\u0438\u043f\u0430 $\\\\'R\\\\', $\\\\'G\\\\', $\\\\'B\\\\', \u0438 \u0438\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b $\\\\'W\\\\''.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u2014 \u0441\u0442\u0440\u043e\u043a\u0443 \u043e\u0442\u0432\u0435\u0442\u0430.\n'''\n) == 'YES', f'Should be \"YES\" but was printed: {solution(stdin)}'\n\nassert solution('''\n2 2\nWRRR\n''') == 'NO', f'Should be \"NO\" but was printed: {solution(stdin)}'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"2 1\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\n\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\\n') == 'YES'\nassert solution('3 4\\nWWRR\\nWRRR\\nWRRR\\n') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"WRRRG\") == \"YES\"\nassert solution(\"WRRRG\\nWRRRG\\nWRRRG\") == \"YES\"\nassert solution(\"WWRR\\nWRRR\\nWRRR\") == \"NO\"\nassert solution(\"WRRR\\nWRRR\\nWRRR\\nWRRR\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB\n''') == 'YES'\nassert solution('''3 4\nWWRR\nWRRR\nWRRR\n''') == 'NO'"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5') == 'YES'\nassert solution('3 4') == 'NO'\nassert solution('1 2') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 5\\n\"\n    \"WRRRG\\n\"\n    \"WRRRG\\n\"\n    \"WRRRG\\n\"\n    \"WBBBB\\n\"\n    ) == \"YES\"\nassert solution(\n    \"3 4\\n\"\n    \"WWRR\\n\"\n    \"WRRR\\n\"\n    \"WRRR\\n\"\n    ) == \"NO\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3 5\n1\n2\n3\n3\n2\n1\n''') == '1'\n\nassert solution('''\n4 3 5\n1\n2\n3\n3\n2\n1\n''') == '3'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3 5\n1\n2\n3\n3\n2\n1''') == '1'\nassert solution('''6 3 5\n1\n2\n3\n3\n2\n1''') == '3'"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\nassert solution('10 1 2 3') == '3'\nassert solution('10 5 6 2 1 3 4') == '3'\nassert solution('10 10 10 2 1 3 4 5 6 8') == '2'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 5') == '1'\nassert solution('1') == '1'\nassert solution('1 2 3 4 5') == '3'\nassert solution('2 4 5 1 2 3') == '3'\nassert solution('9 8 6 5 3 2 1') == '3'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n4\n5\n6\n7\n5\n''') == '3'\nassert solution('''8\n1\n2\n3\n4\n5\n6\n7\n8\n''') == '2'\nassert solution('''20\n8\n11\n19\n10\n9\n10\n9\n11\n12\n11\n12\n13\n14\n13\n12\n13\n14\n15\n13\n14\n15\n14\n13\n11\n''') == '2'\nassert solution('''9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n''') == '5'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\nassert solution('6 2 5') == '3'\n\"\"\""
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 4\") == \"1\"\nassert solution(\"4 2 4\") == \"1\"\nassert solution(\"2 5 3\") == \"2\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3 5\n1\n2\n3\n3\n2\n1''') == '1'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\nprint('Congratulations!')\nprint('Your solutions means a big thanks to you!')\n\n'''\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2 2'\nassert solution('5') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"1\"\n) == \"1 0\"\nassert solution(\n    \"5\"\n) == \"12 3\""
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3 2'\nassert solution('5') == '12 3'"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1 2'\nassert solution('5') == '12 3'\nassert solution('10000000') == '10000002'"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2 2\"\nassert solution(\"3\") == \"3 2\"\nassert solution(\"5\") == \"12 3\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3\\n\"\n    \"0 2\\n\"\n    \"1 2\\n\"\n    \"3 3\\n\"\n    ) == \"3 2\"\n\nassert solution(\n    \"5\\n\"\n    \"0 2\\n\"\n    \"1 3\\n\"\n    \"3 3\\n\"\n    \"7 5\\n\"\n    \"9 5\\n\"\n    ) == \"12 3\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2 2'\nassert solution('3') == '3 2'\nassert solution('4') == '3 2'\nassert solution('5') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3 2'\nassert solution('5') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\n0 2\n1 3\n3 3\n7 5\n9 5\n''') == '12 3'\nassert solution('''\n4\n0 2\n1 3\n3 3\n7 5\n9 5\n''') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n0 2\n1 2\n3 3\n\"\"\") == \"3 2\"\nassert solution(\"\"\"\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n\"\"\") == \"12 3\"\nassert solution(\"\"\"\n9\n0 2\n1 3\n3 3\n7 5\n9 5\n\"\"\") == \"24 3\""
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"100\"\n\nassert solution(\"4\") == \"1010\"\n\nassert solution(\"10\") == \"1010011\"\n\nassert solution(\"15\") == \"100110110011\"\n\nassert solution(\"50\") == \"101101101101101101\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == \"100\"\nassert solution('2') == \"000\"\nassert solution('1') == \"000\"\nassert solution('0') == \"100\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n0\n1 1\n1\n1 1\n1\n1\n\"\"\") == \"100\"\nassert solution(\"\"\"3\n0\n1 1\n1\n1 1\n1\n1\n\"\"\") == \"001\"\nassert solution(\"\"\"2\n0\n0\nSample Output 3:\n0\n0\n0\n1\n1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '100\\n001\\n010'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(samples[0]) == samples[1]\nassert solution(samples[1]) == samples[0]"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0\n1 1\n1\n1 1\n1\n1\n''') == '001'\nassert solution('''\n0\n1 1\n1\n1 1\n1\n1\n''') == '010'\nassert solution('''\n0\n1 1\n1\n1 1\n1\n1\n''') == '011'\nassert solution('''\n0\n1 1\n1\n1 1\n1\n1\n''') == '011'\nassert solution('''\n0\n1 1\n1\n1 1\n1\n1\n''') == '011'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '100'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"001\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    2\n    1 1\n    1\n    2\n    \"\"\") == \"100\"\n\nassert solution(\n    \"\"\"\n    3\n    1 1\n    1\n    2\n    \"\"\") == \"011\"\n\nassert solution(\n    \"\"\"\n    3\n    0 1\n    1\n    1\n    \"\"\") == \"010\""
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n0\n0\n3\n\"\"\") == \"\"\"\n100\n000\n01\n01\n01\n\n\"\"\".strip()\n\nassert solution(\"\"\"\n2\n1\n1\n3\n\"\"\") == \"\"\"\n001\n010\n\n\"\"\".strip()\n\nassert solution(\"\"\"\n3\n1 1 1\n1\n1 1\n1\n1\n\"\"\") == \"\"\"\n011\n011\n000\n000\n001\n010\n000\n100\n000\n011\n010\n000\n100\n001\n010\n000\n100\n001\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n001\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n001\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n001\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n001\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n100\n011\n010\n000\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\nprint('SUCCESS')"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 1') == '3'\nassert solution('6 2') == '4'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 1') == '3'"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '1'\nassert solution('4 1') == '2'\nassert solution('3 1') == '1'\nassert solution('4 6') == '3'\nassert solution('7 8') == '4'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1\n1 2\n2 3\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n9 4\n1 4\n9 5\n4 8\n2 6\n2 7\n5 3\n3 4\n1 2\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '2', 'Sample Test 1'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3', 'Sample Test 2'\nassert solution('''\n5 1\n1 3\n4 6\n7 8\n2 5\n''') == '5', 'Sample Test 3'"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 1\n1 2\n2 3\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 1\n1 3\n4 5\n7 8\n2 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n\"\"\") == '90.00000000'\n\nassert solution(\"\"\"\n5 10 1000\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n\"\"\") == '0.0'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '90.00000000'\nassert solution('5 6 1000\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '90.00000000'\nassert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '90.00000000'\nassert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '90.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == '90.00000000'\nassert solution('''5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == '126.86989765'\nassert solution('''7 7 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n5 6\n5 7\n6 7\nSample Output 2:\n''') == 'Impossible'"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == '90.00000000'\nassert solution('''\n5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == '126.86989765'\nassert solution('''\n5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == 'Impossible'\n''')"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 500\") == \"126.86989765\"\nassert solution(\"5 5 100\") == \"Impossible\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '126.86989765'\nassert solution('5 6 450') == '126.86989765'\nassert solution('5 6 450') == 'Impossible'\nassert solution('5 6 400') == 'Impossible'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\nSample Output 1:\n90.00000000\n\nSample Input 2:\n5 6 450\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\nSample Output 2:\n126.86989765''') == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '90.00000000'\nassert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == 'Impossible'\nassert solution('5 6 500\\n0 0\\n0 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == 'Impossible'"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 1000') == '135.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '90.00000000'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"12\\n\"\n    \"9\\n\"\n    \"33\\n\"\n    \"10\\n\"\n    \"4\\n\"\n    \"15\\n\"\n    \"20\\n\"\n    \"15\\n\"\n    \"22\\n\"\n    \"18\\n\"\n    \"22\\n\"\n    \"19\\n\"\n    \"23\\n\"\n    \"22\\n\"\n    \"7\\n\"\n    \"9\\n\"\n    \"7\\n\"\n    \"11\\n\"\n    \"22\\n\"\n    \"24\\n\"\n    \"10\\n\"\n    \"13\\n\"\n    \"3\\n\"\n    \"5\\n\"\n    \"5\\n\"\n    \"16\\n\"\n    \"10\\n\"\n    \"5\\n\"\n    \"16\\n\"\n    \"15\\n\"\n    \"2\\n\"\n    \"9\\n\"\n    \"15\\n\"\n    \"6\\n\"\n    \"13\\n\"\n    \"15\\n\"\n    \"9\\n\"\n    \"15\\n\"\n    \"9\\n\"\n    \"15\\n\"\n    \"6\\n\"\n    \"7\\n\"\n    \"7\\n\"\n    \"5\\n\"\n    \"8\\n\"\n    \"4\\n\"\n    \"7\\n\"\n    \"11\\n\"\n    \"8\\n\"\n    \"5\\n\"\n    \"7\\n\"\n    \"13\\n\"\n    \"4\\n\"\n    \"9\\n\"\n    \"7\\n\"\n    \"15\\n\"\n    \"11\\n\"\n    \"3\\n\"\n    \"7\\n\"\n    \"11\\n\"\n    \"15\\n\"\n    \"8\\n\"\n    \"2\\n\"\n    \"9\\n\"\n    \"13\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"7\\n\"\n    \"8\\n\"\n    \"12\\n\"\n    \"9\\n\"\n    \"8\\n\"\n    \"7\\n\"\n    \"15\\n\"\n    \"7\\n\"\n    \"9\\n\"\n    \"8\\n\"\n    \"13\\n\"\n    \"10\\n\"\n    \"7\\n\"\n    \"2\\n\"\n    \"4\\n\"\n    \"2\\n\"\n    \"12\\n\"\n    \"5\\n\"\n    \"5\\n\"\n    \"13\\n\"\n    \"11\\n\"\n    \"5\\n\"\n    \"2\\n\"\n    \"6\\n\"\n    \"7\\n\"\n    \"4\\n\"\n    \"9\\n\"\n    \"13\\n\"\n    \"8\\n\"\n    \"2\\n\"\n    \"10\\n\"\n    \"11\\n\"\n    \"7\\n\"\n    \"8\\n\"\n    \"2\\n\"\n    \"9\\n\"\n    \"13\\n\"\n    \"9\\n\"\n    \"13\\n\"\n    \"8\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"7\\n\"\n    \"4\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"9\\n\"\n    \"8\\n\"\n    \"5\\n\"\n    \"6\\n\"\n    \"11\\n\"\n    \"8\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"7\\n\"\n    \"8\\n\"\n    \"12\\n\"\n    \"7\\n\"\n    \"3\\n\"\n    \"8\\n\"\n    \"7\\n\"\n    \"3\\n\"\n    \"6\\n\"\n    \"5\\n\"\n    \"8\\n\"\n    \"8\\n\"\n    \"12\\n\"\n    \"8\\n\"\n    \"6\\n\"\n    \"5\\n\"\n    \"9\\n\"\n    \"4\\n\"\n    \"9\\n\"\n    \"4\\n\"\n    \"11\\n\"\n    \"11\\n\"\n    \"4\\n\"\n    \"8\\n\"\n    \"4\\n\"\n    \"6\\n\"\n    \"6\\n\"\n    \"4\\n\"\n    \"7\\n\"\n    \"3\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"4\\n\"\n    \"7\\n\"\n    \"4\\n\"\n    \"9\\n\"\n    \"10\\n\"\n    \"9\\n\"\n    \"4\\n\"\n    \"3\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"2\\n\"\n    \"4\\n\"\n    \"8\\n\"\n    \"12\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"5\\n\"\n    \"8\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"2\\n\"\n    \"5\\n\"\n    \"3\\n\"\n    \"1\\n\"\n    \"7\\n\"\n    \"8\\n\"\n    \"11\\n\"\n    \"4\\n\"\n    \"8\\n\"\n    \"9\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"11\\n\"\n    \"8\\n\"\n    \"8\\n\"\n    \"4\\n\"\n    \"11\\n\"\n    \"11\\n\"\n    \"4\\n\"\n    \"11\\n\"\n    \"8\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"11\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"11\\n\"\n    \"8\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"4"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('13') == \"1\\n1 3\"\nassert solution('45') == \"1\\n2 4\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n\n'''"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '4'\nassert solution('37') == '4'\nassert solution('30014') == '7'\nassert solution('60000') == '60000'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''37\n''') == '4'\nassert solution('''30014\n''') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\""
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\""
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1') == '3.5'\nassert solution('2 2 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == \"None\"\nassert solution(\"\") == \"None\"\nassert solution(\"3\") == \"4.9\"\nassert solution(\"2 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 1\\n') == '3.5'\nassert solution('3 3 2\\n') == '4.9'"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1') == '1.5'\nassert solution('3 3 2') == '4.9'\nassert solution('5 9 5') == '15.2'\nassert solution('10 10 10') == '100.0'\nassert solution('5 9 5') == '15.2'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n\n\"\"\""
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3 1\n4.5\n''') == '3.5'\nassert solution('''3 3 2\n4.9\n''') == '4.9'\n\n'''\n\nimport math\n\nstdin = open('Gem-island.txt')\n\nn, d, r = map(int, stdin.readline().split())\n\nfor i in range(1, n + 1):\n    numbers = [x for x in range(1, i + 1)]\n    numbers = sorted(numbers)\n    counts = dict()\n    for j in range(len(numbers)):\n        if numbers[j] in counts:\n            counts[numbers[j]] += 1\n        else:\n            counts[numbers[j]] = 1\n    n = len(counts.keys())\n    res = 0\n    for k in range(1, n + 1):\n        res += math.log(n) * (counts[k] - 1)\n    print(res * n / d)"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5 1 5') == '19'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 5 1 5\n12 12 1 12''') == '4'\n\nassert solution('''12 12 1 12\n1 5 1 5''') == '19'"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == '0'\nassert solution('1 5 1 5') == '19'\n\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5 1 5') == '19', 'Sample Test Failed'"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\"\nprint(solution(input()))\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == \"4\"\nassert solution(\"1 12\") == \"4\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n5 7\\n7 8\\n\") == \"1\"\nassert solution(\"2 100\\n1 100\\n2 100\\n\") == \"2\"\nassert solution(\"2 100\\n1 100\\n2 100\\n\") == \"3\"\nassert solution(\"1 2\\n3\\n4\\n\") == \"2\"\nassert solution(\"1 2\\n3\\n4\\n\") == \"1\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('car') == 1\nassert solution('cocar') == 2\nassert solution('cocarco') == 2\nassert solution('cocarcoo') == 2\nassert solution('cocarcooo') == 2\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\n'''"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\ncar\n''') == '1'\nassert solution('''\ncocar\n''') == '2'\nassert solution('''\naoeu\n''') == '10'\nassert solution('''\noeou\n''') == '2'\nassert solution('''\naeou\n''') == '4'\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\nassert solution(\"bbb\") == \"0\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\""
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 2 0 1\n''') == '8'\nassert solution('''\n5\n1000000 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1000000 1 1 1 1\n''') == '0'\nassert solution('''1\n1\n''') == '1'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n2 2 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5\n1000000 1 1 1 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n7\n2 2 2 2 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10\n3 7 4 6 4 2 4 4\n\"\"\") == \"10\"\nassert solution(\"\"\"\n10\n100000 100000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n0 2 0 1''') == '8'\nassert solution('''5\n1000000 1 1 1 1''') == '0'"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n1\\n2\\n1\\n1\\n1\") == \"1\"\nassert solution(\"2\\n2\\n2\\n2\\n2\\n2\\n2\") == \"1\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n5') == '1000000\\n'\nassert solution('2\\n10') == '0\\n'"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n8\n8 2 4 5\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n4\n0 2 0 1\n\"\"\"\n) == \"8\"\n\nassert solution(\n\"\"\"\n5\n1000000 1 1 1 1\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n7\n1000000001 1000100001 1000100001 1000100001 1000100001\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n0 2 0 1') == '8'\nassert solution('5\\n1000000 1 1 1 1') == '0'\nprint('All test cases passed')\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n0 2 0 1\n''') == '8'\nassert solution('''5\n1000000 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 2 0 1\\n\") == \"8\"\nassert solution(\"5\\n1000000 1 1 1 1\\n\") == \"0\""
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 651') == 'zyz'\nassert solution('2 650') == 'zyz'\nassert solution('2 651') == 'zyz'\nassert solution('2 650') == 'zyz'\nassert solution('2 651') == 'zyz'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 650\") == \"zyz\"\nassert solution(\"2 651\") == \"-1\"\nassert solution(\"2 2\") == \"2 2\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 651\") == \"zyz\"\nassert solution(\"2 650\") == \"zyz\"\nassert solution(\"4 806\") == \"aababac\"\nassert solution(\"4 906\") == \"aababac\"\nassert solution(\"4 904\") == \"aababac\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    2 650\n    2 651\n''') == 'zyz'\nassert solution('''\n    2 652\n''') == '-1'\nassert solution('''\n    3 653\n''') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\nprint(solution(input()))\n\n--input--\n2 650\n--output--\nzyz\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 650\n''') == 'zyz'\nassert solution('''\n2 651\n''') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == \"zyz\"\n\nassert solution(\"\"\"\n    2 650\n    2 651\n    \"\"\") == \"zyz\"\n\nassert solution(\"\"\"\n    3 1\n    \"\"\") == \"zyz\"\n\nassert solution(\"\"\"\n    3 2\n    \"\"\") == \"zyz\"\n\nassert solution(\"\"\"\n    3 3\n    \"\"\") == \"zyz\""
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 650\") == \"zyz\"\nassert solution(\"2 651\") == \"-1\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\n\nstdin = '2 516'\nprint(solution(stdin))\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '8'\nassert solution('10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1' == '8'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n0\\n1\\n5\\n4\\n2\\n3\\n\") == \"8\""
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"4\"\nassert solution(\"3\") == \"5\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n') == '4'\nassert solution('10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\\n') == '8'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\nassert solution() == \"8\""
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('6') == '2'\nassert solution('10') == '4'\nassert solution('11') == '3'"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n0 2 0\n1 1 1\n1 1 1\n1 1 1\n''') == '1'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"10\") == \"8\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"4\"\nassert solution(\"5\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\\n\") == \"8\"\nassert solution(\"5\\n1 2 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\\n\") == \"4\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4 3\") == \"0\"\nassert solution(\"3 5 2\") == \"2\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4 3\\n3 4 5 7\\n1 2 10\\n') == '0'\nassert solution('3 5 2\\n1 4 7 9 11\\n2 3\\n') == '2'\nassert solution('2 6 3\\n3 1 2 4 5 6 7\\n8 9 10 11\\n2 3\\n') == '1'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\nprint('You passed all the tests!')\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n3 4 5\n1 2 10''') == '0'\n\nassert solution('''\n2\n3 4 5\n1 2 10''') == '1'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n2 4 3\n3 4 5 7\n1 2 10\n''') == '1'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 4 3\n3 4 5 7\n1 2 10\n''') == '0'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\nassert solution('3 5 2') == '-1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 3\n3 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 2\n3 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n5 1\n4 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n100 2\n100 5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '2'"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '1'\nassert solution('2 1') == '2'\nassert solution('3 2') == '1'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 3\n2 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2\n3 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 1\n2 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '2'"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2\n3 4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 4\") == \"2\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\nIVO\nJASNA\nJOSIPA\n''') == '4'\nassert solution('''5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA\n''') == '24'\nassert solution('''1\nAB\nBA\n''') == '1'\nassert solution('''2\nAB\nBA\n''') == '0'\nassert solution('''3\nAB\nBA\n''') == '1'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\nIVO\nJASNA\nJOSIPA\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA\n\"\"\") == \"24\""
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nIVO\\nJASNA\\nJOSIPA\\n') == '4'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\nIVO\nJASNA\nJOSIPA''') == '4'\nassert solution('''5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA''') == '24'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"24\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA''') == '4'\n\nassert solution('''\n10\nMARICA\nMARTA\nMATO\nMARA\nMARTINA\nJASNA\nJOSIPA\nJOS\u00c9\nJOS\u00c9\nJOSE\n''') == '30'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '4', \"Wrong solution\"\nassert solution('5') == '24', \"Wrong solution\"\n\"\"\""
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"24\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '4'\nassert solution('5') == '24'\nprint(solution(input()))\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n3 2 1 2\n3 2 6 5\n1 9 4 7\n''') == '39'\n\nassert solution('''\n3\n2 2 1\n3 1 5\n1 9 4\n''') == '35'\n\nassert solution('''\n10\n2 3 1 2 2 2 5 2 1 3\n6 2 3 6 5 2 9 4 1\n4 9 1 5 1 2 6 2\n1 1 5 4 2 2 3 4\n2 7 3 3 2 3 3 2\n2 1 5 3 3 1 2 2\n1 9 7 6 3 1 5\n4 2 7 5 2 3 3\n1 5 5 3 9 3 2\n1 3 3 2 1 2 5\n2 1 1 9 4 5 2\n2 8 2 2 3 3 1\n3 1 2 1 2 1\n1 1 4 3 3 4\n''') == '33'\n\nassert solution('''\n20\n1 2 4 1 2 1 1 2 2 2 1 1 4 1 1 1 2 2 1 2 4 1 2 1 1 1 2 1 2 1 2 1 1 1 4 1 1 1 2 2 1 2 4 1 2 1 1 2 1 2 1 2 1 1 1 1 1 1 2 1 2 1 1 2 1 1 1 2 1 2 1 2 1 1 1 1 2 1 2 1 1 1 2 1 1 1 1 1 1 1 2 1 2 1 1 1 2 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\n\n'''\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2 2 3 1') == '3'\nassert solution('3\\n2 1 5 6') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"39\"\n\"\"\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '39'\n\"\"\"\n\nstdin = \"\"\"\n3\n2 2 3 1\n3 1 5 6\n1 9 4 7\n\"\"\""
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''\n1 2 3 1\n3 3 4 1\n2 3 4 1\n''') == '-1'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n4 2 3 1\n3 1 5 6\n1 9 4 7\n''') == '39'\nassert solution('''\n1\n1 1 1 1\n1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3'\nassert solution('2 2 3 8\\n3 1 5 6\\n1 9 4 7') == '39'\nprint('TAKEN')"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"39\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n8 9 3 -14 -14 14 -14 0 20\n\"\"\") == \"9\"\n\"\"\""
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.003515621386'\nassert solution('2') == '0.098607242554'\nassert solution('3') == '0.00452122747'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '5.2696518641'\nassert solution('1') == '9'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '5.2696518641'\nassert solution('2') == '9'\n\n'''\nfrom math import sqrt\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '5.2696518641'\nassert solution('1') == '9'"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '5.2696518641'\nassert solution('1') == '9'"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n8 4 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '5.2696518641'\nassert solution('''\n1\n8 9 3 -14 -14 14 -14 0 20\n''') == '9'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"9.026802533\"\nprint(solution())\n\"\"\"\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '5.2696518641'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n8 9 3 -14 -14 14 -14 0 20') == '9'\n\"\"\""
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"20\") == \"1\"\nassert solution(\"100\") == \"1\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 0 2\") == \"8\"\nassert solution(\"3 1 1\") == \"4\"\nassert solution(\"4 1 1\") == \"24\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 1\\n2 0 2\\n3 1 1\") == \"1\\n8\\n4\"\nassert solution(\"3\\n4 1 1\\n5 2 3\\n5 0 3\") == \"6\\n4\\n24\""
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n5 2 3\n0 0 2\n3 1 1\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 1\\n2 0 2\\n3 1 1\\n') == '1\\n8\\n4\\n'\nassert solution('3\\n4 1 1\\n5 2 3\\n5 0 3\\n') == '6\\n4\\n24\\n'\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == -1\nassert solution(\"1 1 1\") == 1\nassert solution(\"2 0 2\") == 8\nassert solution(\"3 1 1\") == 4\nassert solution(\"3 1 1 2\") == 24\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '-1'\nassert solution('4') == '6'\n\nstdin = input()\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 1\\n2 0 2\\n3 1 1') == '1'\nassert solution('3\\n4 1 1\\n5 2 3\\n5 0 3') == '8'\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n2 1 1\n5 2 3\n5 0 3\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n\"\"\""
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\nassert solution('10 20 10') == '0'\nassert solution('10 20 10', '1') == '0'\n\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5') == '3'\nassert solution('3 5') == '3'\nassert solution('4 5') == '6'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"6 6\") == \"240\"\nassert solution(\"5 8\") == \"3528\"\n\"\"\"\n\nn,k = map(int, input().split())\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3, 2]) == '3'\nassert solution([6, 6]) == '240'\n\nassert solution([3, 3]) == '3'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\nprint(solution('''3 2\n'''))\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''SEND+MORE=MONEY''') == '9567+1085=10652'\nassert solution('''A+A=A''') == 'impossible'\nprint(solution('''SEND+MORE=MONEY'''))\nprint(solution('''A+A=A'''))\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == 'impossible'\nassert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\nassert solution('C+B=A') == '2+1=3'\n\n\"\"\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\n\"\"\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n\n------------------\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 2 1 1') == '1'\nassert solution('4\\n0 1 2 3') == '4'"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 1 2 1 1''') == '1'\nassert solution('''4\n0 1 2 3''') == '14'"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '14'\nassert solution('5') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n0 1 2 3\n''') == '14'\nassert solution('''5\n1 1 2 1 1\n''') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0 1 2 3') == '14'\nassert solution('5\\n1 1 2 1 1') == '1'\nassert solution('3\\n1 1 2') == '0'\n\nprint(solution())\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"14\"\nassert solution(\"4\") == \"1\"\nassert solution(\"10\") == \"10\"\nassert solution(\"1000\") == \"1\"\nassert solution(\"1000000\") == \"1\""
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 1') == '1'\nassert solution('4 1 2 3') == '2'\nassert solution('1 2 3 4') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1 2 3') == '14'\nassert solution('5\\n1 1 2 1 1') == '1'\nprint('all tests passed')\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n3 4 1 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n3 4 1 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n0 1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n0 1 2 3\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88', \"First\"\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '-1', \"Second\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n') == \"88\"\nassert solution('2 3\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n') == \"32\"\nassert solution('2 2\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n') == \"-1\"\nassert solution('5 5\\n1 2 3 4 5\\n0 0 5 6 7\\n0 0 8 9 0\\n0 0 10 11 12\\n0 13 14 15 0\\n') == \"14\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '-1'\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '-1'\nassert solution('''\n4 4\n0 0 0 0\n1 1 1 1\n0 0 0 0\n0 0 0 0\n''') == '0'\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '-1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 0 7 8\n7 0 0 10''') == '88', \"First Example\"\nassert solution('''3 4\n1 2 3 0\n0 0 5 6\n7 0 0 10''') == '-1', \"Second Example\"\nassert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 7 8 9\n7 0 0 10''') == '-1', \"Third Example\"\nprint('All test cases passed.')\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10''') == '88'\nassert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n1 5 3 8\n2 2 4 1\n3 6 5 4\n4 7 2 5\n5 7 6 6\n6 9 7 5\n7 9 8 7\n8 9 1 2\n9 7 1 4''') == '-1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == '88'\nassert solution('4 4') == '-1'"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"88\"\nassert solution(\"4 4\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5 5\n1 2 3 4 0\n0 0 5 6 7\n0 0 7 8 9\n7 0 0 10 11\n4 0 0 12 13\n\"\"\") == \"88\"\nassert solution(\"\"\"\n10 10\n1 2 3 4 5 0 6 7 8 9 10 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\"\"\") == \"18\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n\"\"\") == \"88\"\nassert solution(\"\"\"\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n4 4\n1 2 3 0\n0 0 5 6\n7 4 7 8\n7 0 0 10\n\"\"\") == \"38\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 1\\n1 1\") == \"0.000\"\nassert solution(\"2\\n1 99999\\n99999 99999\") == \"9999700002.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '9999700002.000'\nassert solution([\n    '1 1',\n    '1 1',\n    ]) == '9999700002.000'\nassert solution([\n    '1 1',\n    '2 1',\n    '3 1',\n    '4 1',\n    '5 1',\n    ]) == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0.000'\nassert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\nassert solution('99999 99999') == '9999700002.000'\nassert solution('3 5') == '1.000'"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '9999700002.000'\nassert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0.000'\nassert solution('1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0.000'\nassert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 1\n1 1\n''') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n1 1\n''') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1 1\\n1 1') == '0.000'\nassert solution('2\\n1 99999\\n99999 99999') == '9999700002.000'\nassert solution('1\\n1 1') == '0.000'\nassert solution('1\\n1 99999') == '9999700002.000'\nassert solution('1\\n1 99999\\n1 99999') == '9999700002.000'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\\n') == '3'\nassert solution('3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2\\n') == 'Infinity'"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == \"3\"\nassert solution('''\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == \"Impossible\"\nassert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == \"Impossible\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 8 1 6\") == \"3\"\nassert solution(\"3 4 1 2\") == \"Infinity\""
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == 'Infinity'\nassert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == 'Infinity'\nassert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 7 1 6') == '3'\nassert solution('5 4 1 2') == '1'\nassert solution('5 8 1 6') == '1'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1\n1''') == 'impossible'\nassert solution('''3 2\n1\n3''') == '010'\nassert solution('''6 1\n6\n3\n1\n2\n5\n4\n7\n8\n9\n10\n11\n12\n13\n14''') == '000,001,011,010,110,111,101,100'\nassert solution('''6 2\n1\n3\n2\n3\n1\n3\n1\n3''') == '111,101,110,100,011,011,010,010,111'\nprint('All test cases passed...')\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n1\nSample Output 3:\n0 1\n1 1\n1 0''') == 'impossible'"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 1\n1\n''') == 'impossible'\nassert solution('''\n3 1\n1\n''') == '000'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 1\n1\n''') == 'impossible'\nassert solution('''\n6 1\n1\n''') == '000'\nassert solution('''\n3 1\n1\n''') == '111'\nassert solution('''\n4 1\n1\n''') == '111'\nassert solution('''\n5 1\n1\n''') == '110'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n6 1\n1\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3 1\n1\"\"\") == \"000\"\n\nassert solution(\"\"\"\n6 1\n1\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3 1\n1\n\"\"\") == \"000\"\n\nassert solution(\"\"\"\n6 1\n1\n\"\"\") == \"impossible\""
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 1\n1\n''') == 'impossible'\nassert solution('''\n3 1\n1\n''') == '000'\nassert solution('''\n3 2\n1\n''') == '001'\nassert solution('''\n3 3\n1\n''') == '010'\nassert solution('''\n3 4\n1\n''') == '011'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n''') == 'impossible'\nassert solution('''\n3\n1\n''') == '000'\nassert solution('''\n6\n1\n''') == 'impossible'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 1\n2''') == \"impossible\"\nassert solution('''6 1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == 'impossible'\nassert solution('6 1') == '000'\nassert solution('3 1') == '000'\nassert solution('6 1') == '000'\nassert solution('6 1') == '000'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1') == 'impossible'\nassert solution('3 1') == '000 001 011 010 111'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '10'\nassert solution('90') == '11'"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"10\"\nassert solution(\"90\") == \"10\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"1\"\nassert solution(\"90\") == \"10\"\nprint(\"Congratulations! Your solution works for the '10' and '99' cases.\")"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"1\"\n\nSample Input 1:\n99999999999\n8\nSample Output 1:\n0\n\nSample Input 2:\n99999\n9999999999\nSample Output 2:\n1\n\nSample Input 1:\n99999\n9999999999\nSample Output 1:\n0\n\"\"\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '2'\nassert solution('9') == '1'\nassert solution('9') == '0'\nassert solution('99') == '3'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\\n90\") == \"1\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"1\"\nassert solution(\"90\") == \"10\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '2'"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '2'\n\n'''"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n99\n10\n''') == '10'\nassert solution('''\n99\n10\n''') == '10'\nassert solution('''\n90\n10\n''') == '10'\nassert solution('''\n90\n10\n''') == '10'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n4 1 10\\n2 7 3\\n') == '1'\nassert solution('5\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6\\n') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3 3\\n4 1 10\\n2 7 3\") == \"2\"\nassert solution(\"4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6\") == \"1\"\nassert solution(\"8\\n5 1 3 3\\n5 8 7 10\\n4 1 2 6\\n6 2 7 3\") == \"0\"\nassert solution(\"5\\n5 1 3 3\\n4 1 2 6\\n6 2 7 3\") == \"2\"\nassert solution(\"10\\n9 5 1 3\\n5 8 7 10\\n4 1 2 6\\n6 2 7 3\") == \"3\""
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 3\\n4 1 10\\n2 7 3') == '1'\nassert solution('4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6') == '2'\nassert solution('6\\n5 5 5 5 5 5 5\\n6 8 6 6 6 6\\n4 4 4 4 4 4 4\\n5 2 5 2 5 2\\n5 5 5 5 5 5 5\\n2 1 2 1 2 1\\n2 2 1 1 1 1\\n4 5 5 5 5 5 5') == '2'\nassert solution('10\\n5 5 5 5 5 5 5 5 5 5 5 5\\n6 8 6 6 6 6 6 6 6 6 6 6\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n5 2 5 2 5 2 5\\n5 5 5 5 5 5 5 5 5 5 5 5\\n2 1 2 1 2 1 2 1 1 1 1 1 1\\n2 2 1 1 1 1 1 1 1 1 1 1\\n4 5 5 5 5 5 5 5 5 5 5 5\\n2 5 2 5 2 5 2 5 2 5 2 5\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4') == '1'\n\nhttps://www.hackerrank.com/challenges/sliding-window-maximum/problem\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n2 3 3 3\n4 1 10\n2 7 3\n''') == '1'\nassert solution('''\n2\n5 8 7 10\n3 1 2 6\n''') == '2'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n2 3 3') == '2'\nassert solution('4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6') == '1'\nassert solution('10\\n9 8 7 10\\n4 1 2 6\\n3 1 3 3\\n5 8 7 10\\n8 4 3 2\\n7 6 2 1\\n2 5 4 1\\n6 5 3 1\\n9 8 7 10\\n8 4 3 2\\n7 6 2 1\\n5 8 7 10\\n3 1 3 3\\n2 5 4 1\\n6 5 3 1\\n9 8 7 10\\n7 6 2 1\\n8 4 3 2\\n9 5 4 1\\n5 8 7 10\\n4 1 2 6') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n4 1 3 3\\n5 8 7 10\\n2 7 3') == '1'\n\nassert solution('5\\n10 8 9 2 6\\n2 4 3 7\\n1 6 8 4\\n2 3 5 7\\n7 8 9 2\\n3 4 8 6\\n8 4 5 2') == '2'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\n\nstdin = \"\"\"\n5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n1 4\n4 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4\n1 5\n5 4\n2 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5\n1 4\n4 3\n5 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9 3') == '5'\nassert solution('6 1') == '7'\n\n\"\"\""
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 1') == '7'\nassert solution('9 3') == '11'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 1\nvelvet\n1 6\n''') == '7'\n\nassert solution('''\n9 3\nbeginning\n1 5\n4 8\n1 9\nSample Output 2:\n11\n''') == '16'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9\") == \"11\"\n\n'''\n\n'''\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n5\n4 8\n1 9\n\"\"\") == \"11\"\n\nassert solution(\"\"\"\n3\nbeggin\n2 2\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n9\nbeginning\n1 5\n4 8\n1 9\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('13') == '1'\nassert solution('5') == '5'\nassert solution('9') == '5'\nassert solution('4') == '8'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('beginning') == '5'\nassert solution('velvet') == '7'\n\nNote: The first line of each input contains an integer, $N$, the number of characters in $S$; and the second line contains a string, $S$.\nThe third line contains an integer, $Q$, the number of lines of input.\n\nEach of the next $Q$ lines contains two integers, $L_ i$ and $R_ i$, denoting that for the $i^\\text {th}$ line of inputs, you will consider only the $L_ i^\\text {th}$ through $R_ i^\\text {th}$ characters of $S$.\n\nThe $i^\\text {th}$ line of outputs should be a single integer, the number of nonempty almost palindromic substrings in the $i^\\text {th}$ line of inputs.\n\nIf you are not yet familiar with palindromic substring, you should refer to the lesson on palindromic substrings.\n\n'''\nimport math"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 1\\nvelvet') == '7'"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5') == '14'\n\nprint(solution('6 1'))\n\"\"\"\nn, q = list(map(int, input().split()))\n\ns = list(map(str, input().split()))\n\nfor i in range(q):\n    a, b = list(map(int, input().split()))\n    print(a, b, s[a-1:b])\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"23\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4\\n3 1\\n2 2\\n1 1\\n') == '2'\nassert solution('1 2\\n4 5\\n2 3\\n2 2\\n1 1\\n') == '2'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4\\n3 1\\n2 2\\n1 1') == '2'\nassert solution('2 3\\n1 23\\n2 17') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4\\n3 1\\n2 2\\n1 1') == '2'\nassert solution('2 3\\n1 23\\n2 17') == '23'"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 1\") == \"2\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 3\n1 23\n2 17\n\"\"\") == \"23\"\nassert solution(\"\"\"\n5 2\n1 23\n2 17\n1 19\n5 4\n1 21\n2 24\n\"\"\") == \"24\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5\\n1 1\\n2 2\\n1 1\\n3 3') == '2'\nassert solution('3 3\\n2 1\\n3 1\\n2 1\\n') == '3'\nassert solution('7 5\\n1 7\\n5 2\\n3 2\\n4 6\\n6 3\\n5 1\\n') == '7'"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 4\n3 1\n2 2\n1 1\n''') == '2'\nassert solution('''10 4\n7 0\n3 1\n2 2\n2 2\n2 3\n1 1\n3 3\n0 2\n1 2\n1 1\n''') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 4\n3 1\n2 2\n1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0.0000000000'\nassert solution('5') == '1.013514162568'\nassert solution('12') == '0.0000000000'\nassert solution('26') == '0.0000000000'\nassert solution('54') == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == \"9.476048311178\""
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0.0000000000'\nassert solution() == '9.476048311178'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n''') == '0.0000000000'\nassert solution('''4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n''') == '9.476048311178'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0.0000000000'\nassert solution('4') == '1.0000000000'\nassert solution('6') == '2.76470588235'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '0.0000000000'\nassert solution('6') == '1.0000010001'"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3') == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n''') == '0.0000000000'\nassert solution('''\n5\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n''') == '9.476048311178'\nassert solution('''\n7\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n''') == '11.64648430485'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n\") == \"8.0000000000\"\nassert solution(\"5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\") == \"0.0200000000\""
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '8.0000000000'\nassert solution('5 -1') == '8.0000000000'\nassert solution('5 1') == '8.0000000000'\nassert solution('5 0') == '4.0000000000'\nassert solution('5 2') == '3.141592653589793'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '8.0000000000'\nassert solution('5 2 0') == '8.0000000000'\nassert solution('5 1 1') == '8.0000000000'\nassert solution('5 0 2') == '8.0000000000'\nassert solution('5 -2 0') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\nassert solution('5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n') == '0.0200000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == \"1\"\nassert solution('5') == \"8.0000000000\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '8.0000000000'\nassert solution('2') == '8.0000000000'\nassert solution('3') == '1.0000000000'\n\n'''\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '16.000000000'\nassert solution('10') == '190.00000000'\nassert solution('5') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\") == \"8.0000000000\"\nassert solution(\"10\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n-0.2 -0.20\\n0 -0.20\\n0.20 -0.2\\n0.20 0.2\\n-0.20 0\\n-0.20 -0.2\\n0 -0.20\\n0.2 -0.20\\n0.2 0.20\\n-0.2 0.2\\n0.20 0\\n0 0.20\") == \"18.0000000000\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"8.0000000000\"\nassert solution(\"10\") == \"10.0000000000\"\nassert solution(\"1\") == \"1.0000000000\"\nassert solution(\"0.5\") == \"0.50000000000\"\nassert solution(\"0.1\") == \"0.100000000000\""
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('\\n'.join(['1', '1', '9', '9', '1', '6', '6', '39', '9'])) == '2'\nassert solution('\\n'.join(['10', '2', '2', '2', '2', '2', '2', '2', '2'])) == '2'\nassert solution('\\n'.join(['5', '4', '4', '4', '4', '4', '4', '4', '4'])) == '4'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\\\n3 3 3\n1 1 1\n2 2 2\n3 3 3\\\n\"\"\") == \"2\"\nassert solution(\"\"\"\\\n5 2 2\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\\\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\\\n4 3 2\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\\\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\\\n8 3 2\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\\\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\\\n6 4 3\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9\n10 10 10\\\n\"\"\") == \"3\""
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n3 4 2\n1 1 1 1 1\n2 2 2 2 2\n3 3 3 3 3\n    \"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"\n7 8 2\n3 3 3 3 3 3 3 3\n1 2 2 2 1 1 1\n2 2 1 1 1 1 1\n1 1 2 2 2 2 1\n2 2 2 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n    \"\"\"\n) == \"3\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 5') == '2'\nassert solution('2 4 5') == '2'\nassert solution('2 4 7') == '2'\nassert solution('2 6 7') == '2'\n\nstdin = \"\"\"6 6 7\n1 1 1 1 1 2 2 2 2\n1 2 2 2 2 3 3 3 3 3\n1 3 3 3 3 4 4 4 4 4\n1 5 5 5 5 6 6 6 6 6\n1 7 7 7 7 8 8 8 8 8 8\n1 9 9 9 9 10 10 10 10 10\"\"\"\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\n\nassert solution('''\n5 7 7\n1 1 1 1 1 1 1 1\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n1 2 2"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    5 6 3\n    1 1 9 9 1 6 6 39 9\n    \"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"\n    5 6 4\n    1 1 1 1 1 1 1 2 2 2 2 2\n    \"\"\"\n) == \"1\"\n\nassert solution(\n    \"\"\"\n    5 10 2\n    1 1 1 1 1 2 2 2 2 2 2 2\n    \"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"\n    20 20 20\n
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5 3') == '1'\nassert solution('5 4 3') == '2'\nassert solution('7 7 7 7') == '5'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('9 4 3') == '2'\nassert solution('10 2 2') == '2'"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"10 2 2\\n1 1 1 1 1 2 2 2 2 2\"\n) == \"2\"\nassert solution(\n    \"4 5 5\\n1 1 1 1 1\\n1 1 2 2 2\\n2 2 3 3 3\\n3 3 4 4 4\"\n) == \"1\"\nprint(solution.__doc__)\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 3') == '2'\nassert solution('9 4 3') == '2'\nassert solution('10 2 2') == '2'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000'\nassert solution('''\n2 2 2\n1\n''') == '2.0'\n'''\n    # your code here\n'''\nSOLUTION:\n\nUsing Fisher-Yates shuffle for generating random numbers in each iteration of the following algorithm:\n1. Start with 0 (0% chance of being picked).\n2. Randomly choose any element.\n3. Swap that element with its previous index in the shuffle.\n4. Repeat the above steps n-1 times.\n\nLet's create a function to shuffle an array of numbers by Fisher-Yates algorithm.\n'''\n\nimport random\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3 2\n1 2 3\n\"\"\") == \"3.666666667\"\n\nassert solution(\"\"\"\n4 11 4\n10 10 10 10\n\"\"\") == \"20.000000000\""
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''4 11 4\n10 10 10 10\n''') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''4 11 4\n10 10 10 10\n''') == '20.000000000'\nassert solution('''4 11 4\n7 9 8 8\n''') == '21.500000000000001'\nassert solution('''4 11 4\n0 0 0 0\n''') == '0.25'\nassert solution('''4 11 4\n0 0 0 0\n0 1 1 1\n''') == '0.0'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\nprint(solution(*[*map(int, stdin.strip().split())]))\n\n---\nIn the example above, Robin and Jim are ordinary people and Jim has a small network of friends. The restaurant opens at a certain hour of the day and closes at a different time, giving the restaurant no time to open at all.\n\nAssume that each person follows a uniform distribution with probabilities $p_1, p_2, \\ldots, p_n$ and that the restaurant is closed when any of the group members get out.\n\nThe expected number of people in the restaurant at a time is the sum of the probability of each person in the restaurant being in their room at that time. The following table shows the expected number of people in the restaurant at a time.\n\n| Ti |    | p_1  | p_2  | p_3  | p_4  | p_5  | p_6  | p_7  | p_8  | p_9  |\n| --- | --- | ---  | ---  | ---  | ---  | ---  | ---  | ---  | ---  |\n| 0   |  1  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  |\n| 1   |  2  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  |\n| 2   |  3  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  |\n| 3   |  4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  |\n| 4   |  5  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  |\n| 5   |  6  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  |\n| 6   |  7  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  |\n| 7   |  8  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  |\n| 8   |  9  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  | 1/4  |\n\nFind the expected number of people in the restaurant after $t$ hours of operation.\n\n'''\n\n'''\nCan you find a solution using only $n$ people who arrive in groups of size $g$ and are not always in the same room?\n\nSo we need to find an array of size $g$ in which we put 1 when the person is in the same room and 0 otherwise.\n\nThen we can construct an array of size $n$ in which we put the number of people in each room.\n\nThen we can construct an array of size $n$ in which we put 1 if the person is in the same room as someone else and 0 otherwise.\n\nIf we put 1 when the person is in the same room as someone else, we need to also put a 1 in the corresponding index of the people array.\n\nThe formula for this is:\n\n$people_in_each_room[i] = (sum(people[i:i+g])) % (g*n) + 1\n\nHere is the first example.\n\nFor a group of size $g = 3$, the array of people in each room would be:\n\n$people_in_each_room = [0, 1, 2]$\n\nHere is the second example.\n\n$people_in_each_room = [1, 0, 1]$\n\nNow we can do the calculation for this example:\n\n$(people_in_each_room[i] + people_in_each_room[i+1] + people_in_each_room[i+2]) % (g*n) + 1 = 1 + 0 + 0 = 1 + 1 + 1 = 2\n\nNow we need to calculate the number of people in the restaurant. We need to add up all the people in each room and divide by the number of groups.\n\n$sum(people_in_each_room) = 2 + 1 + 2 = 5$\n\n$n = 5$\n\n$n \\times g = 10$\n\nWe also need to calculate how many people will be in each room when the restaurant is closed.\n\n$(sum(people_in_each_room) - (sum(people_in_each_room) - 1)) = 0$\n\n$n - 1 = 4$\n\n$n \\times g - 1 = 10 - 1 = 9$\n\n$n - 1 \\times g - 1 = 10 - 9 = 1$\n\nSo we need to find a division algorithm that works for $n$ and $g$.\n\nThe above algorithm would return a list of size $g$.\n\nWhat is the algorithm to calculate this list of size $g$?\n\nHere is an example.\n\nLet the first two lists be\n\n$people_in_each_room = [0, 1, 2, 3, 4, 5]$\n\n$people_in_each_room = [0, 1, 2, 3, 4, 5]$\n\nNow the same group is\n\n$group = 1$\n\nHere is the second example.\n\n$people_in_each_room = [1, 0, 1]$\n\n$people_in_each_room = [1, 0, 1]$\n\nNow the same group is\n\n$group = 1$\n\n'''\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == \"22.0000000000000\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 5 2\") == \"3.0\"\nassert solution(\"3 10 10 10\") == \"20.0\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 100\n\n2 10000''') == '1'\nassert solution('''3 3\n\n3 2\n\n4 4\n\n5 5''') == '4'"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2, 42]) == \"2\"\nassert solution([5, 123456789]) == \"16317634\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 42\n''') == '2'\nassert solution('''\n5 123456789\n''') == '16317634'\nprint('You passed all the tests! Nice job!')"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 42\n''') == '2'\nassert solution('''5 123456789\n''') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 123456789') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5') == '2'\nassert solution('2 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == output_string, \"Your function does not return correct result\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\""
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2\n''') == '1'\nassert solution('''6 4\n''') == '1'\nassert solution('''8 9\n''') == '1'\nassert solution('''1000000000000000\n''') == '1'"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 42''') == '2'\nassert solution('''5 123456789''') == '16317634'\nprint('all test cases passed')"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4'\nassert solution('''\n3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '5'\nassert solution('''\n3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4'\nassert solution('''\n3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '3'\nassert solution('''\n3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '2'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\""
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 1 2 3') == '4'\nassert solution('10 10 5 6 5') == '0'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1 0 2\") == \"4\"\nassert solution(\"5 4 1 1 1\") == \"5\"\n\nn, e, x, y, c = map(int, input().split())\n\ncans = []\n\nfor i in range(c):\n    x_cans, y_cans, time = map(int, input().split())\n    cans.append((x_cans, y_cans, time))\n\ncans.sort(key=lambda x: x[2])\n\nscore = 0\nfor i in range(len(cans)):\n    x_diff = x - cans[i][0]\n    y_diff = y - cans[i][1]\n\n    if abs(x_diff) + abs(y_diff) <= n:\n        score += cans[i][2]\n        x = cans[i][0]\n        y = cans[i][1]\n    else:\n        break\n\nprint(score)"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 0 0 2\") == \"0\"\nassert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n3\n''') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1 10 10\\n8 8') == '3'\nassert solution('5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'\nassert solution('''5 1 10 10\n1 1\n4 6\n4 7\n7 9\n''') == '2'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 100 100\") == \"3\""
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 10 10') == '3'\nassert solution('5 1 100 100') == '3'"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 100 100\") == \"3\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3', 'First'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n3\n''') == '3', 'Second'\nprint('All tests passed!')"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"3\""
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\nassert solution(input_stdin) == \"3\""
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1 100 100') == \"3\"\nassert solution('7 9') == \"1\"\nassert solution('27 75') == \"1\"\nassert solution('40 93') == \"1\"\nassert solution('62 41') == \"2\""
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''ABC\nABC\nABC\n''') == '2'\nassert solution('''ABC\nABC\nABC\n''') == '3'\nassert solution('''AA\nBB\nCC\n''') == '-1'"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''ABC\nABC\nABC''') == '2'\nassert solution('''ABBBAAAA\nBBBCCCBB\nCCCCAAAC''') == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nABC\nABC\nABC\n''') == '2'\nassert solution('''\nABBBAAAA\nBBBCCCBB\nCCCCAAAC\n''') == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ABC') == '2'\nassert solution('ABBBAAAA') == '2'\nassert solution('BBBCCCBB') == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == 2\nassert solution(\"ABBBAAAA\") == 2\nassert solution(\"BBBCCCBB\") == 2\nassert solution(\"CCCCAAAC\") == 3\nassert solution(\"ABC\") == -1\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''ABC\nABC\nABC''') == '2'\nassert solution('''ABBBAAAA\nBBBCCCBB\nCCCCAAAC''') == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == 2\nassert solution(\"ABBBAAAA\") == 3\nassert solution(\"BBBCCCBB\") == 3"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"ABC\\nABC\\nABC\\n\") == \"2\"\nassert solution(\"ABBBAAAA\\nBBBCCCBB\\nCCCCAAAC\\n\") == \"3\"\nprint(\"All test cases passed\")\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''ABC\nABC\nABC\n''') == 2\nassert solution('''ABC\nABC\nABC\n''') == 3\nassert solution('''AA\nBB\nCC\n''') == -1\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == 2\nassert solution(\"ABBBAAAA\") == 2\nassert solution(\"BBBCCCBB\") == 3\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '3'\nassert solution('2') == '1'\nassert solution('5') == '3'\nprint('\u2705')\nprint(f'\ud83c\udf89 The local tests are done. \ud83c\udf89')\n\n\n\"\"\""
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\nA\\nABA\\nBBB\\nAAA\") == \"3\"\nassert solution(\"5\\nA\\nABA\\nBBB\\nAAA\") == \"3\"\nassert solution(\"5\\nA\\nABAA\\nBBB\\nAAA\") == \"3\"\nassert solution(\"5\\nA\\nAAABB\\nBBBB\\nAAAAAB\") == \"2\"\nassert solution(\"5\\nA\\nABABABA\\nBBBB\\nAAAAAB\") == \"1\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '3'\n__import__('print').close()\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '4'\nassert solution('3') == '3'\n\"\"\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\nA\nB\nAA\nBBB\nAAA''') == '3'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB''') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '3'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n100 10 2 1\n''') == '0.1'\nassert solution('''\n100 10 2 2\n''') == '0.1909090909'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 10 2 1\n4 5 2 1\n10 10 2 1''') == '0.10000000000000002'\nassert solution('''10 10 2 1\n4 5 2 1\n10 10 2 1''') == '0.1909090909090909'\nassert solution('''100 10 2 1\n4 5 2 1\n10 10 2 1''') == '0.10000000000000002'\nassert solution('''100 10 2 1\n4 5 2 1\n10 10 2 1''') == '0.1909090909090909'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 2 2\") == \"0.25\"\nassert solution(\"100 10 2 1\") == \"0.1\"\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '0.10000000000000'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ABABABcABABAbAbab') == '4'\nassert solution
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ABABABcABABAbAbab') == '4'"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '5'\n\"\"\""
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAbab\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''ABABABcABABAbAbab\n3\n0 2\n1 6\n0 7\n''') == '4'\n\nassert solution('''ABABABcABABAbAbab\n3\n1 6\n0 7\n''') == '5'"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''ABABABcABABAbAbab''') == '4'\nassert solution('''ABABABcABABAbAbab''') == '5'\nassert solution('''ABABABcABABAbAbab''') == '4'\n\n''')\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''ABABABcABABAbAbab\n3\n0 2\n1 6\n0 7\n''') == '4'\nassert solution('''ABABABcABABAbAbab\n3\n1 2\n1 3\n0 2\nSample Input 2:\nAABBBACCD\n3\n0 2\n1 6\n0 7\nSample Output 2:\n5\n0\n1\n''') == '5'\nassert solution('''AABBBACCD\n3\n1 2\n1 3\n0 2\n''') == '1'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ABABABcABABAbAbab') == '5'\nassert solution('aABABAbAbab') == '0'\nassert solution('ABBcABBBAcABBB') == '6'\nassert solution('AAABBBcAABB') == '3'\nassert solution('aABABAbAbab') == '1'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABAbAbAbab\") == \"0\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"3\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n0 1 2\\n1 2 0\\n2 0 0\\n') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n0 0 1\\n0 1 2\\n1 2 3\") == \"2\"\nassert solution(\"10 10\\n0 0 1\\n0 1 2\\n1 2 3\\n0 3 4\\n0 4 5\\n0 5 6\\n1 6 7\\n1 7 8\\n1 8 9\\n2 9 10\") == \"3\"\nassert solution(\"5 5\\n0 1 2\\n0 2 3\\n1 2 3\\n0 3 4\\n0 4 5\\n0 5 6\\n1 6 7\\n1 7 8\") == \"4\"\nassert solution(\"5 5\\n0 1 2\\n0 2 3\\n1 2 3\\n0 3 4\\n0 4 5\\n0 5 6\\n1 6 7\\n1 7 8\") == \"4\"\nassert solution(\"10 10\\n0 0 1\\n0 1 2\\n1 2 3\\n0 3 4\\n0 4 5\\n0 5 6\\n1 6 7\\n1 7 8\\n1 8 9\\n2 9 10\") == \"3\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n0\n0\n1\n''') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0\n0\n1\n''') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"9\") == \"2\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n0\\n1\\n2\") == \"2\"\nassert solution(\"3 3\\n0\\n1\\n2\\n0\\n1\") == \"2\"\nassert solution(\"5 3\\n0\\n1\\n3\\n2\\n4\\n0\\n1\\n3\\n2\\n4\") == \"5\"\nassert solution(\"2 5\\n0\\n1\\n1\\n1\\n1\\n1\") == \"2\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n4 3\n0\n0\n1\n''') == '2'\nassert solution(\n'''\n5 2\n1\n0\n2\n1\n0\n''') == '4'\nassert solution(\n'''\n6 5\n1\n0\n2\n3\n4\n5\nSample Output:\n3\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n0\n0\n1\n''') == '2'\nassert solution('''\n3 3\n0\n0\n0\n''') == '2'\nassert solution('''\n1 10\n1\n''') == '1'\nassert solution('''\n1 10\n1\n''') == '1'\n'''\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n0\n0\n1\nSample Input 2:\n4 2\n1\nSample Output 2:\n3\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 8 8 8\") == \"1\"\nassert solution(\"10 1 2 1 8 -6 1\") == \"1\"\nprint(solution(\"2 3 3 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 5') == '1'\nassert solution('12 4 1 4 5 3 -2') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '1'"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\nassert solution('''\n2 2 2 2\n1 1 2 2\n2 2 2 2\n2 2 2 2\n''') == '2'\nassert solution('''\n3 3 3 3\n1 1 2 1\n2 2 2 2\n3 3 3 3\n''') == '1'\nassert solution('''\n3 4 4 4\n1 2 1 2\n2 3 1 2\n4 4 4 4\n''') == '2'\nassert solution('''\n5 5 5 5\n1 1 1 1 1\n2 1 2 2 2\n3 2 3 3 3\n4 3 4 4 4\n5 5 5 5 5\n''') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('12 4 1 4 5 3 -2') == '0'\nassert solution('10 1 2 1 8 -6 1') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('2 5 8 10 4 5') == '2'"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n2 5 4 4 -1 -1\n1 2 6 6 -1 -1\nSample Input:\n2 1 1 3\n12\n1 0 -1\nSample Output:\n1\nP0: 22 1 0 2 -1 0\n''') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 10 5 10 10\n2 5 1 2 5 -1 1\n3 5 1 1 10 -1 -1\n3 10 1 1 5 -1 -1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 3 1 1 1\n1 2 1 2 2\n1 1 1 1 1\n1 2 1 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 10 5 10 10\n4 5 1 2 5 -1 1\n3 5 1 1 10 -1 -1\n3 10 1 1 5 -1 -1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3 1 1 1\n1 2 1 2 2\n1 1 1 1 1\n1 2 1 1 2\n\"\"\") == \"0\"\n\nprint(\"\u2705 Test passed\")\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\n\nassert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n1 8 8 1 -1 -2\n''') == '2'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\nassert solution('''\n2 8 8 8\n10 2 2 2 2 4 1 1 1 -2 1 1 -1 1 -1\n1 2 2 1 2 2 1 1 1 -1 1 -1 1 -1 1\n''') == '2'\nassert solution('''\n10 9 8 6 4 3 2 2 1 -2 -1\n1 10 5 2 2 5 2 1 2 1 -1 1 -1\n''') == '0'\nassert solution('''\n10 10 2 2 2 3 3 2 1 2 1 -1 1 -1\n1 10 5 2 2 5 2 1 2 1 -1 1 -1\n''') == '0'\nassert solution('''\n3 5 3 5 5 5 5 1 1 1 1 -1 -1\n1 5 5 5 5 5 5 1 1 1 1 -1 -1\n''') == '1'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1\\n2\\n3\\n'"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '1'\nassert solution('''\n5 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '2'\nassert solution('''\n7 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n4 4 4\n3\n1 2\n1 3\n3 4\n''') == '3'\nassert solution('''\n8 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '4'\nassert solution('''\n11 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n4 4 4\n3\n1 2\n1 3\n3 4\n''') == '5'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4') == '1'\nassert solution('6 7') == '1'\nassert solution('2 7') == '1'\nassert solution('5 7') == '1'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"./testinput.txt\") == \"2\"\nprint(solution(\"./input.txt\"))\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == \"1\"\n\nassert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == \"1\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n2\n1 1\n1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n\") == \"1\\n2\\n3\\n\""
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 7') == '1'\nassert solution('7 7') == '1'\nassert solution('10 5') == '2'\nassert solution('7 3') == '2'\nassert solution('6 7') == '3'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\\n2\\n3\\n\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 4\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n1 2 5 4 3\n1 2 5 4 3\"\"\") == \"\"\"\n2\n\"\"\".strip()\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"6\n1 5 4 3 2 6\n1 2 5 4 3 6\n\"\"\") == \"2\"\n\nassert solution(\"\"\"4\n1 3 2 4\n1 3 2 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"6\n1 2 3 4 5 6\n1 2 3 4 5 6\n\"\"\") == \"2\"\n\nassert solution(\"\"\"3\n2 1 3\n2 1 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"4\n1 2 3 4\n1 2 3 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n1 5 4 3 2 6\n1 2 5 4 3 6\n''') == '2'\nassert solution('''\n6\n1 2 5 4 3 6\n1 5 4 3 2 6\n''') == '2'\nassert solution('''\n6\n1 2 3 4 5 6\n1 2 3 4 5 6\n''') == '3'\n'''\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 5 4 3 2 6''') == '1 2 5 4 3 6'\nassert solution('''1 3 5 4 2 6''') == '1 3 2 5 4 6'\n\n'''\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 4 5\n2 3 4 5 1\n''') == '1 2 5 4 3 6'\n\"\"\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n1 5 4 3 2 6\\n1 2 5 4 3 6') == '2'\n\"\"\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 4 5 6\") == \"1 2 3 4 5 6\"\nassert solution(\"1 5 4 3 2 6\") == \"1 6 2 5 4 3\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 5 4 3 6\\n1 2 5 4 3 6\\n\") == \"2\"\n\"\"\"\nimport math"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4\\n1 5 4 3 2 6\\n1 2 5 4 3 6\"\n    ) == \"2\""
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '60'\nassert solution('1 3 2') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 2') == '-1'\nassert solution('1 1 2') == '2'\nassert solution('2 2 2') == '-1'\nassert solution('1 1 1') == '1'\nassert solution('2 3 2') == '-1'\n\"\"\""
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"60\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '60', \"Wrong\"\nassert solution('''\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '-1', \"Wrong\""
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n3 40 1 60\n''') == '60'\nassert solution('''\n4 3 1\n1 30 2 50\n2 70 3 10\n3 20 1 80\n2 40 3 60\n''') == '-1'\nassert solution('''\n5 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n3 40 1 60\n''') == '60'\nassert solution('''\n5 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n3 40 1 60\n''') == '-1'\nassert solution('''\n5 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n3 40 1 60\n''') == '60'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2\") == \"60\"\nassert solution(\"10 1 2\") == \"10\"\nassert solution(\"6 4 2\") == \"-1\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"60\"\nassert solution(\"\"\"\n2 1 1\n5 4 6\n1 2 2\n4 5 5\n\"\"\") == \"1000\"\nassert solution(\"\"\"\n2 1 1\n2 4 4\n1 2 2\n4 5 5\n\"\"\") == \"-1\"\n\n\"\"\"\n\nThe greedy approach is:\n- Go through all shops.\n- Go through all possible antiques.\n- Use the greedy method to select the cheapest of the three.\n\nSo, we need to find the cheapest one.\n\nWe can create a graph with all the shops as nodes and all the possible antiques as edges.\n\n- Start with a graph of all the shops.\n- For every antique in the graph, select the cheapest one.\n- We don't want to select a antique twice. If we have already visited the shops of the antiques, we don't want to select it again.\n- If the cheapest antique is found, we update the costs.\n- If not found, we add the cheapest antique to the list and recurse.\n\n\"\"\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"60\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"60\"\nassert solution(\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 2') == '60'\nassert solution('3 2 3') == '-1'\nassert solution('3 2 3') == '60'\nassert solution('5 1 2 1') == '5'\nassert solution('5 1 2 1') == '5'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'Case #1: 1\\nCase #2: 2'\nprint(solution(input()))\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000''') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'Case #1: 1'\nassert solution('2') == 'Case #2: 2'\nassert solution('3') == 'Case #1: 1'\n\"\"\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Case #1: 1\\nCase #2: 2\""
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n3\\n5000 0 0\\n0 2000 0\\n0 0 4000') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'Case #1: 1\\nCase #2: 2'\nassert solution('3') == 'Case #1: 1\\nCase #2: 2\\nCase #3: 3'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"Case #1: 1\\nCase #2: 2\\n\"\n\n---"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n''') == 'Case #1: 1\\nCase #2: 2\\nCase #3: 3\\nCase #4: 0\\nCase #5: 0\\nCase #6: 0\\nCase #7: 1\\nCase #8: 2\\nCase #9: 3\\nCase #10: 3\\nCase #11: 3\\nCase #12: 3\\nCase #13: 3\\nCase #14: 0\\nCase #15: 0\\nCase #16: 0\\nCase #17: 1\\nCase #18: 2\\nCase #19: 3\\nCase #20: 3\\nCase #21: 0\\nCase #22: 0\\nCase #23: 0\\nCase #24: 0\\nCase #25: 0\\nCase #26: 0\\nCase #27: 1\\nCase #28: 2\\nCase #29: 3\\nCase #30: 3\\nCase #31: 3\\nCase #32: 3\\nCase #33: 3\\nCase #34: 3\\nCase #35: 0\\nCase #36: 0\\nCase #37: 0\\nCase #38: 1\\nCase #39: 2\\nCase #40: 3\\nCase #41: 3\\nCase #42: 3\\nCase #43: 3\\nCase #44: 3\\nCase #45: 3\\nCase #46: 3\\nCase #47: 3\\nCase #48: 3\\nCase #49: 3\\nCase #50: 3\\nCase #51: 3\\nCase #52: 3\\nCase #53: 3\\nCase #54: 0\\nCase #55: 0\\nCase #56: 0\\nCase #57: 1\\nCase #58: 2\\nCase #59: 3\\nCase #60: 3\\nCase #61: 3\\nCase #62: 3\\nCase #63: 3\\nCase #64: 3\\nCase #65: 3\\nCase #66: 3\\nCase #67: 3\\nCase #68: 3\\nCase #69: 3\\nCase #70: 3\\nCase #71: 3\\nCase #72: 3\\nCase #73: 3\\nCase #74: 3\\nCase #75: 3\\nCase #76: 3\\nCase #77: 3\\nCase #78: 3\\nCase #79: 3\\nCase #80: 3\\nCase #81: 3\\nCase #82: 3\\nCase #83: 3\\nCase #84: 3\\nCase #85: 3\\nCase #86: 3\\nCase #87: 3\\nCase #88: 3\\nCase #89: 3\\nCase #90: 3\\nCase #91: 3\\nCase #92: 3\\nCase #93: 3\\nCase #94: 3\\nCase #95: 3\\nCase #96: 3\\nCase #97: 3\\nCase #98: 3\\nCase #99: 3\\nCase #100: 3\\nCase #101: 3\\nCase #102: 3\\nCase #103: 3\\nCase #104: 3\\nCase #105: 3\\nCase #106: 3\\nCase #107: 3\\nCase #108: 3\\nCase #109: 3\\nCase #110: 3\\nCase #111: 3\\nCase #112: 3\\nCase #113: 3\\nCase #114: 3\\nCase #115: 3\\nCase #116: 3\\nCase #117: 3\\nCase #118: 3\\nCase #119: 3\\nCase #120: 3\\nCase #121: 3\\nCase #122: 3\\nCase #123: 3\\nCase #124: 3\\nCase #125: 3\\nCase #126: 3\\nCase #127: 3\\nCase #128: 3\\nCase #129: 3\\nCase #130: 3\\nCase #131: 3\\nCase #132: 3\\nCase #133: 3\\nCase #134: 3\\nCase #135: 3\\nCase #136: 3\\nCase #137: 3\\nCase #138: 3\\nCase #139: 3\\nCase #140: 3\\nCase #141: 3\\nCase #142: 3\\nCase #143: 3\\nCase #144: 3\\nCase #145: 3\\nCase #146: 3\\nCase #147: 3\\nCase #148: 3\\nCase #149: 3\\nCase #150: 3\\nCase #151: 3\\nCase #152: 3\\nCase #153: 3\\nCase #154: 3\\nCase #155: 3\\nCase #156: 3\\nCase #157: 3\\nCase #158: 3\\nCase #159: 3\\nCase #160: 3\\nCase #161: 3\\nCase #162: 3\\nCase #163: 3\\nCase #164: 3\\nCase #165: 3\\nCase #166: 3\\nCase #167: 3\\nCase #168: 3\\nCase #169: 3\\nCase #170: 3\\nCase #171: 3\\nCase #172: 3\\nCase #173: 3\\nCase #174: 3\\nCase #175: 3\\nCase #176: 3\\nCase #177: 3\\nCase #178: 3\\nCase #179: 3\\nCase #180: 3\\nCase #181: 3\\nCase #182: 3\\nCase #183: 3\\nCase #184: 3\\nCase #185: 3\\nCase #186: 3\\nCase #187: 3\\nCase #188: 3\\nCase #189: 3\\nCase #190: 3\\nCase #191: 3\\nCase #192: 3\\nCase #193: 3\\nCase #194: 3\\nCase #195: 3\\nCase #196: 3\\nCase #197: 3\\nCase #198: 3\\nCase #199: 3\\nCase #200: 3\\nCase #201: 3\\nCase #202: 3\\nCase #203: 3\\nCase #204: 3\\nCase #205: 3\\nCase #206: 3\\nCase #207: 3\\nCase #208: 3\\nCase #209: 3\\nCase #210: 3\\nCase #211: 3\\nCase #212: 3\\nCase #213: 3\\nCase #214: 3\\nCase #215: 3\\nCase #216: 3\\nCase #217: 3\\nCase #218: 3\\nCase #219: 3\\nCase "
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"Case #1: 1\\nCase #2: 2\\n\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1'\n\nassert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1'\n\nassert solution('''+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1\n+1 6 C 1 O 1 O 1 H 1"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '12 3 6 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 1 O 2\n+1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 1 O 2\n+1 3 C 6 H 12 O 6\n0 0\n''') == '12 6 3 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 1 O 1\\n+1 1 H 2\\n+1 1 O 2\\n-1 1 H 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"7 7 7 1\"\nassert solution(\"+1 1 O 1\\n+1 1 H 2\\n+1 1 O 2\\n-1 1 H 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"7 7 7 1\"\nassert solution(\"+1 1 O 1\\n+1 1 H 2\\n+1 1 O 2\\n-1 1 H 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"7 7 7 1\"\nassert solution(\"+1 1 O 1\\n+1 1 H 2\\n+1 1 O 2\\n-1 1 H 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"7 7 7 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"6 6 6 1\"\nassert solution(\"\"\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 2 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"12 12 12 1\"\nassert solution(\"\"\"+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 2 O 2\n+1 3 C 6 H 12 O 6\n0 0\"\"\") == \"12 12 12 1\"\nassert solution(\"\"\"+1 2 O 2\n+1 2 C 1 O 2\n+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 2 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"6 6 6 1\"\nassert solution(\"\"\"+1 2 O 2\n+1 2 C 1 O 2\n+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 2 O 2\n+1 3 C 6 H 12 O 6\n0 0\"\"\") == \"12 12 12 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == \"6 6 6 1\"\nassert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == \"6 6 6 1\"\nassert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == \"6 6 6 1\"\nassert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == \"6 6 6 1\"\nassert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == \"6 6 6 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n\nassert solution('''\n+1 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n\nassert solution('''\n+1 2 C 1 O 2\n+1 2 H 2 O 1\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '12 6 6 1'\n\nassert solution('''\n+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 6 C 1 O 1 O 1 H 1\n+1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '12 12 12 1'\n\nassert solution('''\n+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n-1 6 C 1 O 1 O 1 H 1\n+1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"-1 1 O 2\") == \"1 1 1\"\nassert solution(\"+1 2 C 1 O 2\") == \"1 2 2\"\nassert solution(\"-1 3 C 6 H 12 O 6\") == \"6 6 6 6\"\nassert solution(\"0 0\") == \"0 0\"\nassert solution(\"+1 1 O 1\") == \"1 1 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1'\nassert solution('''+1 2 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '3 3 3 2'\nassert solution('''+1 2 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '0 0'\nassert solution('''+1 2 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n+2 2 H 2 O 1''') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('-1 3 C 6 H 12 O 6\\n+1 2 C 1 O 2') == '6 6 6 1'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\n\n\"\"\""
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n30 50\n20 0\n100 0\n100 40\n20 40''') == '20.83'\nassert solution('''4\n100 10\n100 20\n100 30\n100 40''') == '45.40'\nassert solution('''4\n30 50\n20 0\n100 0\n100 40\n20 40''') == '23.12'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"21.67\"\nassert solution(\"4\") == \"32.33\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n30 50\n20 0\n100 0\n100 40\n20 40\n''') == '20.83'\n\nassert solution('''5\n2 5\n1 1\n2 2\n1 3\n''') == '2.233333333333333'\n\nassert solution('''10\n50 50\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n50 0\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 2\n1\n''') == '1.67'\nassert solution('''2\n4 2\n1 0\n1 1\n''') == '2.00'\nprint(solution('''3\n1 0\n0 2\n2 1\n'''))"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"4\n30 50\n20 0\n100 0\n100 40\n20 40\n\"\"\") == \"20.83\"\nassert solution(\"\"\"4\n4 2\n0 1\n4 0\n2 0\n2 4\n\"\"\") == \"2.5\"\n\n\"\"\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\nassert solution('5\\n10 10\\n10 10\\n20 20\\n10 10\\n') == '20.0'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n30 50\n20 0\n100 0\n100 40\n20 40\n''') == '20.83'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\nprint('all tests passed')\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n30 50\n20 0\n100 0\n100 40\n20 40\n\"\"\") == \"20.83\"\nassert solution(\"\"\"\n3\n100 50\n100 0\n50 0\n\"\"\") == \"100.00\"\nassert solution(\"\"\"\n1\n0 0\n0 0\n\"\"\") == \"0.00\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3\\n1 2 5\\n7 6 4\\n9 8 3') == '49'\n\n\"\"\"\nfrom itertools import product\nimport re\nfrom collections import deque"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"4 4\") == \"27\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 1\") == \"0\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 2\n1 2\n7 8\n''') == '49'\nassert solution('''\n5 1\n1 2\n''') == '0'\nassert solution('''\n6 3\n1 2 3\n4 5 6\n''') == '0'\nassert solution('''\n4 4\n1 2 3 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '38'\nassert solution('''\n3 3\n2 1\n3 4\n''') == '17'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3\n1 2 5\n7 6 4\n9 8 3\n\"\"\") == \"49\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 5') == \"49\"\nassert solution('7 6 4') == \"49\"\nassert solution('9 8 3') == \"49\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"49\"\n\n----\n\n\"\"\"\n\nimport itertools\nfrom collections import defaultdict"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 2 5\n7 6 4\n9 8 3''') == '49'\nassert solution('''2 2\n1 1\n2 2''') == '2'\nassert solution('''3 3\n1 2 5\n7 6 4\n9 8 3\n5 5 5''') == '2'\nassert solution('''7 7\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1''') == '1'\nassert solution('''5 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1''') == '8'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 5\\n7 6 4\\n9 8 3') == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\n3 5 5\\n2 2 5\\n2 4 5\\n5 6 5') == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3') == '1\\n2\\n3'\n\"\"\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n            10\n            ##.......\n            5\n            1E0D4F\n            2G0A1B\n            CROSSWORD\n            3\n            SSSSSSS\n            4\n            SSSSSSS\n            5\n            SSSSSSS\n            6\n            SSSSSSS\n            7\n            SSSSSSS\n            8\n            SSSSSSS\n            9\n            SSSSSSS\n            10\n            SSSSSSS\n            11\n            SSSSSSS\n            12\n            SSSSSSS\n            13\n            SSSSSSS\n            14\n            SSSSSSS\n            15\n            SSSSSSS\n            ''') == '''\n            ##CROSSWORD####\n            1E0D4F\n            2G0A1B\n            '''\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 15\") == \"##CROSSWORD####\"\nassert solution(\"1\") == \"##CROSSWORD####\"\nassert solution(\"1 15 2 4\") == \"##CROSSWORD####\"\nassert solution(\"1\") == \"##CROSSWORD####\"\nassert solution(\"1 15 2 4 0\") == \"##CROSSWORD####\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == stdin"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 15') == '##CROSSWORD####'\nassert solution('1 5') == '##CROSSWORD####'\nassert solution('4 2') == '###CROSSWORD####'\nassert solution('13 3') == 'CROSSWORDF'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 15\n##.....#####.\n1\nCROSSWORD\n''') == '##CROSSWORD####'\n\nassert solution('''\n5 4\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 5\n#######\n#######\n####.##\n##.###\n######''') == '#######'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5\\n.#...#..#') == '#......#..#'"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 15\\nCROSSWORD\\n1') == '###CROSSWORD###'\nprint(solution('1 15\\nCROSSWORD\\n1'))\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1\n2 7 6\n9 5 1\n4 3 8\n''') == \"31\"\nassert solution('''\n3 2\n10 7\n20 5\n''') == \"33\"\nassert solution('''\n6 1\n3 8\n6 3\n1 6\n''') == \"16\"\n'''\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1') == '31'\nassert solution('2 7 6') == '37'\nassert solution('9 5 1') == '46'\nassert solution('4 3 8') == '35'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '31'\nassert solution('5 7 6') == '22'\nassert solution('9 5 1') == '10'\nassert solution('4 3 8') == '13'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 1\n2 7 6\n9 5 1\n4 3 8\n\"\"\") == \"31\"\nassert solution(\"\"\"\n4 1\n1 2 2\n2 3 3\n1 2 2\n1 1 1\n\"\"\") == \"32\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1\n2 7 6\n9 5 1\n4 3 8''') == \"31\"\nassert solution('''4 5\n10 9 2\n11 5 1\n6 3 8''') == \"37\"\nassert solution('''4 5\n10 9 2\n11 5 1\n6 3 8''') == \"42\"\nassert solution('''4 5\n10 9 2\n11 5 1\n6 3 8''') == \"46\"\nassert solution('''4 5\n10 9 2\n11 5 1\n6 3 8''') == \"46\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 1\n2 7 6\n9 5 1\n4 3 8\n\"\"\") == \"31\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 1\n2 7 6\n9 5 1\n4 3 8\n\"\"\") == \"31\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4 2') == '11'\nassert solution('3 3 1') == '4'\nassert solution('10 10 10') == '33'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\n\nassert solution('''\n3 1\n2 7 6\n9 5 1\n4 3 8\n''') == '28'\n\nassert solution('''\n3 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"3 1\") == \"7\"\nassert solution(\"3 2\") == \"9\"\nassert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1\nBBW\n\n--- Day 10: Adapter Array ---\n\n\u201cWhat if our device suddenly disconnected?\u201d You ask your best friend, an old computer scientist, for help.\n\n\u201cIt looks like the charging cable is connecting the two computers together, but it is missing. Can you take a look at the schematic?\u201d\n\n\u201cHere is a hint: the current is AC coupled to the power supply. The power supply, which is connected to the computer, is a generic electrical device, not specific to one computer. You can connect a generic computer to the power supply in this way: connect the power supply to the 5 volts pin of the generic computer. Plug your phone into that 5 volts pin and press the RESET button. Now, if you plug that phone into the same generic computer again, that generic computer will now be connected to the power supply.\u201d\n\nThe device is not capable of charging faster than about 3 seconds, so this is not too bad.\n\nThe laptop battery is also capable of charging faster than the phone can, if you plug that phone into the laptop.\n\nSo, if you plug that phone into the laptop, and plug that phone into the laptop and plug that phone into the laptop and plug that phone into the laptop and plug that phone into the laptop, the device will automatically connect to the generic computer. And so on.\n\nThe first step in this process is to connect the power supply to the generic computer, the generic computer to the phone, and the phone to the laptop.\n\nNow your phone and laptop are both connected to the same generic computer.\n\n\u201cWait, I\u2019m not sure I understand you. Can you figure out a way to plug the phone into the generic computer?\u201d\n\n\u201cNo, not in this case. The same generic computer can connect to the power supply and the phone in parallel. But what if you plug the phone into the generic computer in parallel with the power supply?\u201d\n\n\u201cThen that\u2019s just one way. But if you plug the phone into the generic computer in parallel with the power supply, but the power supply is connected to the generic computer in parallel with the phone, then this is the only way.\u201d\n\nThe process reverses. The generic computer connects the power supply to the phone, the power supply connects the phone to the laptop, and the laptop connects the generic computer to the phone. So the process stops at the second step.\n\n\u201cWe can connect the power supply to the generic computer in parallel with the phone and the phone to the laptop. However, that is the only way.\u201d\n\nWhat is the number of distinct starting circles that give the same circle after exactly $K$ transformations?\n\n''')\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"BBW\"\n) == \"2\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1\\nBBW') == '2'\nassert solution('3 1\\nBBWW') == '1'\nassert solution('3 2\\nBWWB') == '1'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3, 1]) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\nBWB') == '2'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 1\nBBW\n''') == '2'\nassert solution('''\n2 3\nBBWW\n''') == '3'\nassert solution('''\n3 3\nBBBWW\n''') == '3'\nassert solution('''\n3 1\nBBB\n''') == '2'\n'''\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '2'\nassert solution('5 5') == '4'\nassert solution('7 10') == '9'\nassert solution('3 11') == '0'\nassert solution('5 100') == '1'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n5 2 1\\n1 2 3\\n2 4 5') == '0.556'\nprint(solution('1\\n5 2 1\\n1 2 3\\n2 4 5'))"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.5555555555555556'\nassert solution('1 2 3') == '0.5555555555555556'\nassert solution('3 2 1') == '0.5555555555555556'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"0.556\""
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1\n3 2 1\n1 2 3\n''') == '0.556'\nassert solution('''2 10\n5 5 2\n4 4 4''') == '0.4284'"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 1\n3 2 1\n1 2 3\n2 3 1\n1 3 1\n''') == '0.556'\nassert solution('''\n3 1\n3 2 1\n1 2 3\n2 3 1\n1 3 1\n''') == '1.000'\nassert solution('''\n6 1\n3 2 1\n1 2 3\n2 3 1\n1 3 1\n1 4 1\n''') == '0.500'\n\n'''\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '0.556'\nassert solution('3 2 1') == '0.556'\nassert solution('1 2 3') == '1.000'\n\"\"\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\n3 2 1\n1 2 3\n''') == '0.556'\nassert solution('''\n5 4\n5 2 1 3 4\n4 2 1 3\n1 2 1 2\n''') == '1.177'\nassert solution('''\n6 2\n2 2 2 3 3 1\n3 3 1 3\n1 2 1 1\n''') == '0.233'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0.556'\nassert solution('1 1 2 3') == '0.566'\nassert solution('1 1 2 3 4 3 2 1') == '0.567'\nassert solution('1 1 2 3 4 3 2 1') == '0.56'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0.556\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0.55'\nassert solution('1 3') == '0.555'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3\n1 2\n1 1\n1 1\n''') == '3'\nassert solution('''\n1 1 2\n1 2\n1 2\n1 2\n''') == '2'\nassert solution('''\n5 4 3 2\n1 2\n1 2\n1 2\n1 2\n''') == '2'\n'''\n    return '{}'.format(min(float('inf'), round(max(int(x) - int(y) for x, y in zip(stdin.split(), [1] * len(stdin.split())))), max(int(x) - int(y) for x, y in zip(stdin.split(), [1] * len(stdin.split()))) + 1))\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 2') == '3'\nassert solution('5 4 3 2') == '4'\nassert solution('4 5 3 2') == '3'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 4 3 2\n0 1 2 3 4\n0 2 1 2\n0 3 1 2\n1 2 3 2\n0 1 3 2\n''') == '3'\nassert solution('''\n5 5 5 4 4\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '3'\n'''"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3 2\") == \"3\"\nassert solution(\"5 4 5 2\") == \"2\"\nassert solution(\"5 4 5 5 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4 3 2') == '3'\nassert solution('2 2 2 2') == '4'\nassert solution('10 10 10 10') == '19'\nassert solution('10 10 10 10') == '0'\nassert solution('2 2 2 2') == '4'"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4 3 2') == '3'\n\"\"\""
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 4 3 2\\n\"\n) == \"3\"\nassert solution(\n    \"5 4 3 2\\n\"\n    \"4 5\\n\"\n    \"5 4\\n\"\n    \"5 5\\n\"\n    \"3 5\\n\"\n    \"1 1\\n\"\n) == \"3\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 4 3 2\n''') == '3'\n'''"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n\"\"\") == \"13\"\nassert solution(\"\"\"\n7\n1 5 2\n2 4 4\n2 2 7\n5 1 1\n5 4 4\n5 3 1\n5 2 1\n\"\"\") == \"15\"\nassert solution(\"\"\"\n1\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\nassert solution('''\n3\n1 3 1\n2 5 1\n3 2 1\n5 3 1\n''') == '4'\n'''\nInput Format\n\nThe first line contains an integer $n$, where $n$ ($1 \\le n \\le 5000$) is the number of data streams. The next $n$ lines contains three integers $s_ i$, $d_ i$, $p_ i$ ($1 \\le s_ i,d_ i \\le 10^9$, $0 \\le p_ i \\le 100000$) describing one data stream, where $s_ i$ is its start time, $d_ i$ is the duration of the stream, and $p_ i$ is its priority. Note that the cluster has at least $5000$ processors.\n\nConstraints\n\n    The input consists of a single test case.\n    The total number of data streams is at most 5000.\n    The total priority of the streams in the chosen subset should be maximized.\nOutput Format\n\nReturn the maximum total priority of a subset of streams such that their reports can be generated with the architecture described above using a single OGU.\n'''"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 1\\n2 3 2\\n3 2 1') == '0'\nassert solution('5 4 2 1\\n2 5 1\\n2 3 1\\n4 2 2\\n3 4 1\\n5 1 2\\n2 2 2') == '9'\nassert solution('5 5 5 2\\n3 4 1\\n2 5 1\\n5 4 1\\n4 2 2\\n3 4 1\\n5 1 2\\n2 2 2') == '10'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6\\n') == '13'\nassert solution('100\\n2\\n3\\n1\\n3\\n5\\n4\\n6\\n7\\n8\\n') == '32'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\nassert solution('''\n4\n1 3 5\n2 3 5\n3 6 8\n5 4 7\n''') == '20'\nassert solution('''\n4\n1 3 5\n2 3 5\n3 6 8\n5 4 7\n''') == '17'\n''')"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 3 6\n2 5 8\n3 3 5\n5 3 6''') == \"13\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3 6\") == \"1 2 3 5 6\"\nassert solution(\"1 2 3 5 6\") == \"1 2 3 5 6\"\nassert solution(\"2 3 5 6\") == \"1 3 2 5 6\"\nassert solution(\"1 3 2 5 6\") == \"1 3 2 5 6\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == '13'\nassert solution('5 4 3\\n6 5 2\\n7 6 2\\n3 8 3\\n5 9 1\\n3 9 2\\n8 9 1\\n6 9 2\\n1 9 1\\n3 8 3\\n7 6 3\\n6 5 1\\n2 8 3\\n4 6 2\\n7 2 1\\n5 8 3\\n3 7 3\\n9 6 2\\n8 1 1\\n2 9 2\\n4 5 2\\n6 9 2\\n9 7 3\\n6 6 3\\n6 1 2\\n1 1 1\\n8 3 2\\n8 2 2\\n2 1 1\\n5 4 2\\n1 7 1\\n9 7 2\\n7 9 2\\n4 8 2\\n5 8 2\\n6 5 2\\n5 6 3\\n4 8 3\\n2 2 1\\n6 2 2\\n6 6 3\\n2 3 2\\n3 8 3\\n4 9 2\\n4 1 3\\n2 8 3\\n5 4 3\\n8 6 2\\n3 6 3\\n8 9 1\\n9 6 2\\n2 5 2\\n1 6 2\\n5 1 2\\n2 4 2\\n8 3 2\\n4 2 1\\n4 8 2\\n4 6 2\\n3 7 3\\n7 4 2\\n5 7 3\\n4 9 2\\n5 7 2\\n6 5 2\\n5 6 3\\n5 1 2\\n6 5 2\\n4 6 2\\n8 1 1\\n4 7 2\\n7 1 2\\n3 6 3\\n9 1 1\\n6 5 2\\n3 6 3\\n7 5 2\\n4 6 2\\n1 4 2\\n5 2 2\\n1 7 2\\n5 6 2\\n2 2 1\\n6 3 3\\n1 1 1\\n3 2 2\\n2 4 2\\n7 9 2\\n1 4 2\\n4 1 2\\n1 5 1\\n5 4 2\\n5 3 2\\n1 8 1\\n5 5 2\\n3 7 2\\n6 9 2\\n5 9 1\\n5 9 1\\n7 7 2\\n1 4 2\\n5 3 2\\n5 8 2\\n5 8 2\\n3 6 3\\n5 4 2\\n1 4 2\\n1 1 1\\n3 2 2\\n2 6 2\\n8 9 1\\n4 6 2\\n6 6 3\\n9 5 2\\n6 2 2\\n5 7 2\\n4 5 2\\n6 2 2\\n3 6 3\\n5 6 3\\n3 7 3\\n9 8 2\\n4 6 2\\n4 5 2\\n5 7 2\\n5 6 2\\n9 6 2\\n1 8 1\\n2 8 3\\n2 1 1\\n4 7 2\\n3 7 2\\n9 8 2\\n8 1 1\\n1 4 2\\n1 1 1\\n7 8 2\\n2 4 2\\n3 8 3\\n6 4 2\\n4 1 3\\n5 6 2\\n1 6 2\\n7 5 2\\n1 1 1\\n7 6 2\\n8 1 1\\n2 4 2\\n4 6 2\\n3 7 2\\n3 8 3\\n8 1 1\\n7 7 2\\n1 6 2\\n3 8 3\\n4 6 2\\n4 5 2\\n6 5 2\\n7 9 2\\n1 4 2\\n4 6 2\\n8 6 2\\n4 8 2\\n7 1 2\\n4 5 2\\n7 6 2\\n4 6 2\\n5 6 3\\n2 6 2\\n3 6 3\\n8 2 2\\n4 6 2\\n3 7 2\\n3 8 3\\n6 6 3\\n1 6 2\\n8 5 2\\n8 9 2\\n4 7 2\\n3 7 2\\n4 9 2\\n8 1 1\\n4 7 2\\n5 9 2\\n6 5 2\\n5 6 3\\n4 8 2\\n3 5 2\\n2 5 2\\n1 1 1\\n5 5 2\\n2 4 2\\n4 1 2\\n3 8 3\\n3 6 3\\n1 1 1\\n3 2 2\\n3 8 3\\n5 5 2\\n8 7 2\\n9 5 2\\n2 4 2\\n4 5 2\\n4 8 2\\n5 5 2\\n4 5 2\\n5 6 3\\n4 6 2\\n5 8 2\\n5 8 2\\n3 6 3\\n1 6 2\\n8 9 1\\n6 6 3\\n7 7 2\\n5 5 2\\n4 9 2\\n4 8 2\\n8 1 1\\n6 6 3\\n3 6 3\\n6 6 3\\n4 6 2\\n4 5 2\\n3 7 3\\n1 5 2\\n5 4 2\\n5 6 2\\n6 6 3\\n7 6 2\\n4 8 2\\n3 7 2\\n1 8 1\\n5 6 2\\n2 5 2\\n8 1 1\\n8 6 2\\n8 1 1\\n6 6 3\\n3 7 3\\n4 7 2\\n8 9 1\\n7 1 2\\n4 5 2\\n4 5 2\\n5 6 2\\n3 6 3\\n8 1 1\\n6 5 2\\n6 6 3\\n4 6 2\\n1 7 2\\n5 6 2\\n1 5 2\\n2 4 2\\n1 1 1\\n4 8 2\\n4 7 2\\n5 6 2\\n6 5 2\\n3 6 3\\n6 6"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1 3 6\n2 5 8\n3 3 5\n5 3 6''') == '13'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n------Input------\n10.000000 20.123456\n1\n13.141593 20.123456\n------Output------\n3.141593\n''') == '3.141593'\nassert solution('''\n------Input------\n20.123456 10.000000\n1\n20.123456 10.000000\n------Output------\n20.123456\n''') == '20.123456'\nassert solution('''\n------Input------\n10.000000 10.000000\n1\n10.000000 10.000000\n------Output------\n10.000000\n''') == '10.000000'\nassert solution('''\n------Input------\n10.123456 10.123456\n1\n10.123456 10.123456\n------Output------\n10.123456\n''') == '10.123456'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0.000000 10.000000') == '0.000000'\nassert solution('1.000000 10.000000') == '1.000000'\n\nstdin = input()\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0.000000'\nassert solution('3') == '0.000000'\nassert solution('1') == '1.000000'\nassert solution('10000000') == '1.000000'\nassert solution('10000000.0000000') == '1.000000'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10.000000 20.123456\") == \"3.141593\"\nassert solution(\"100.001001 20.123456\") == \"3.141593\"\nassert solution(\"1.000.1.0 20.123456\") == \"3.141593\"\nassert solution(\"10.010000 20.123456\") == \"3.141593\"\nassert solution(\"10.010000 20.123456\") == \"3.141593\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\nassert solution('0.000000 0.000000\\n1\\n0.000000 0.000000') == '0.000000'\nassert solution('0.000000 1000.000000\\n1\\n0.000000 1000.000000') == '999.99999'\nassert solution('0.000000 1000.000000\\n1\\n1000.000000 1000.000000') == '0.000000'\nassert solution('0.000000 1000.000000\\n1\\n1000.000000 1000.000000') == '1000.000000'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\nassert solution('1000000000.00000001\\n2000000000.00000001\\n1000000000000000.00000001\\n1000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000.00000001\\n1000000000000000."
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\nprint(solution(*map(float, stdin.strip().split())))\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10.000000 20.123456\n1\n13.141593 20.123456\n''') == '3.141593'\n\nassert solution('''\n1.000000 0.000000\n-1.000000 2.000000\n-2.000000 -2.000000\n2.000000 -1.000000\n3.000000 1.000000\n''') == '4.000000'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n4\\n3\\n1\") == \"4.242640\"\nassert solution(\"1\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n1\\n4\\n2\\n3\\n') == '3.141593'\nassert solution('2\\n7\\n8\\n3\\n1\\n2\\n3\\n') == '2.9263768'\nassert solution('3\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n') == '3.8160000000000006'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '2.2'\nassert solution('5 2') == '2.4'\nassert solution('5 3') == 'impossible'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n4 4\\n2') == '2.13333333333333'\nassert solution('3\\n4 4\\n1') == 'impossible'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n4\n2\n\"\"\") == \"2.13333333333333\"\nassert solution(\"\"\"\n10\n18\n1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n5\n4\n2\n2\n1\n\"\"\") == \"2.500000\"\nassert solution(\"\"\"\n10\n11\n2\n3\n4\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'impossible'\nassert solution('2 2') == '2.0'\nassert solution('2 1 2') == '2.0'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n4 4\n2\nSample Input 2:\n4\n2 3\n1\nSample Output 2:\nimpossible\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1\n2\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3\n3\n2\n\"\"\") == \"2.5\"\n\nassert solution(\"\"\"\n3\n4\n1\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3\n1\n2\n\"\"\") == \"2.5\"\n\nassert solution(\"\"\"\n3\n1\n2\n4\n\"\"\") == \"2.5\""
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    3\n    4 4\n    2\n    ''') == '2.13333333333333'\nassert solution('''\n    5\n    4 4\n    3\n    5\n    2\n    ''') == '2.25'\n''')\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2.13333333333333\"\nassert solution(\"10\") == \"impossible\"\nassert solution(\"8\") == \"impossible\"\nassert solution(\"20\") == \"impossible\"\nassert solution(\"100\") == \"impossible\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'impossible', 'Wrong result'\nassert solution('2') == '2.13333333333333', 'Wrong result'\nassert solution('3') == 'impossible', 'Wrong result'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n4 4\n2\n''') == '2.13333333333333'\n\nassert solution('''\n4\n4 4\n2\n''') == 'impossible'\n\nassert solution('''\n2\n3 3\n1\n''') == '3.58333333333333'"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('5') == '7'\nassert solution('18') == '44'\nassert solution('19') == '2'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '3'\nassert solution('5') == '6'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"10\") == \"22\"\nassert solution(\"12\") == \"20\""
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n5\n''') == '8', f'Should be {8}'\nassert solution('''\n2\n3\n''') == '0', f'Should be {0}'\nassert solution('''\n5\n6\n''') == '6', f'Should be {6}'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n\") == \"8\"\nassert solution(\"3\\n\") == \"0\"\nassert solution(\"10\\n\") == \"26\"\nassert solution(\"100\\n\") == \"1366\"\nassert solution(\"1000\\n\") == \"6234\"\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"7\") == \"18\"\nassert solution(\"13\") == \"26\"\nassert solution(\"25\") == \"126\""
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '3'\n'''\nIn this test case, N=4, so the solution should be 3 because the tallest group of 3 is:\nM (35) - M (43) - M (30)\n'''\n\nassert solution('''\n5\n1 F is a very conservative high school teacher\n0 M is a very conservative low school teacher\n0 M is a very conservative high school teacher\n4 M is a very conservative low school teacher\n0 F is a very conservative low school teacher\n''') == '2'\n\nassert solution('''\n2\n4 M is a very conservative low school teacher\n0 F is a very conservative low school teacher\n''') == '1'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\", \"Wrong solution\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"3\"\nprint(solution(input()))\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '3'\n\nassert solution('''\n35 M classicism programming\n0 F baroque skiing\n43 F baroque chess\n30 F baroque soccer\n''') == '3'\n\nassert solution('''\n100 M baroque music\n0 F baroque football\n40 F baroque volleyball\n45 F baroque rugby\n30 F baroque ice hockey\n''') == '4'\n\nassert solution('''\n5 M baroque chess\n0 F baroque chess\n40 F baroque chess\n45 F baroque chess\n30 F baroque chess\n''') == '2'\n\nassert solution('''\n50 M classicism programming\n0 M classicism programming\n0 F classicism programming\n40 F classicism programming\n45 F classicism programming\n30 F classicism programming\n''') == '2'\n'''\n\n'''\n(3) Write a function that takes a list of integers and returns a list with the same elements, but with the elements in reverse order.\n\nFor example, if the input list is:\n$[1, 2, 3, 4, 5]$\n\nThen the function should return:\n$[5, 4, 3, 2, 1]$\n'''"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\\n\") == \"3\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == '3'\n'''\nfrom collections import defaultdict\nimport math\n\nn = int(input())\npersons = []\nfor i in range(n):\n    persons.append(input().split())"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n\"\"\") == \"3\"\n\"\"\")"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer''') == '3'"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n35 M\n0 M\n43 M\n30 F''') == '2'\nassert solution('''2\n0 F\n1 M\n1 F''') == '3'\nassert solution('''3\n0 F\n1 F\n2 F''') == '1'\nassert solution('''4\n-1 M\n-1 F\n-1 F\n-1 F''') == '0'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '3', 'First test fail'\nassert solution('''\n10\n1 M classical guitar\n3 F classical bass\n5 M classical violin\n8 F classical drums\n10 F classical organ\n13 F classical piano\n15 F classical cello\n''') == '6', 'Second test fail'\nassert solution('''\n20\n1 M jazz\n5 F jazz\n15 M jazz\n10 F jazz\n''') == '5', 'Third test fail'\nassert solution('''\n20\n1 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '3', 'Fourth test fail'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\na 2\\n') == '2'\nassert solution('2\\nb 1\\nc 1') == '1'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0\n1\n''') == '2'\nassert solution('''\n0\n1\n2\n2 3\n''') == '1'\nassert solution('''\n0\na\n1\n2\nb\n2 3\n''') == '3'\n'''\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2 1 2 1'\nassert solution('a 0\\na 1\\nb 2\\nc 2 3\\nb 4') == '2 1 2 1'"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n2\\n3\\n2\\n') == '2\\n1\\n1'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 0\") == \"2\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"2 1 0 1 1 1 1 0 0 0 1 1 1 0 1 1 1 1 0 0 0 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\") == \"1\\n1\\n1\"\nassert solution(\"2\\n3\") == \"2\\n3\"\nassert solution(\"3\\n\") == \"1\"\nassert solution(\"4\\n1\\n2\") == \"3\"\nassert solution(\"5\\n3\\n4\") == \"4\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1\\n2\\n3\\n2 4\\n') == '2 1'\nassert solution('100\\n') == '1'\nassert solution('100\\n') == '1'\nassert solution('1\\n1\\n') == '2'\nassert solution('3\\n4\\n4\\n4\\n') == '1'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\na 0\na 1\nb 2\nc 2 3\nb 4\n\"\"\") == \"2\\n1\\n2\\n\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n7\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '1'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '5'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '1'\nassert solution('5 1') == '2'\nassert solution('6 1') == '2'\nassert solution('6 2') == '3'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n20\n9 5 3\n5 9 3\n1 4 1\n1 3 1\n1 7 0\n2 5 0\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '4'\nassert solution('5 3') == '3'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '4'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input(\"\")) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '5'"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'\nassert solution('6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\\n1 4 5\\n1 4 2\\n1 2 3\\n2 2 3\\n2 3 4\\n3 3 4\\n4 2 3\\n5 3 4\\n5 4 5\\n1 2 3\\n2 2 4\\n4 3 3\\n3 4 2\\n3 1 4\\n2 1 2\\n4 2 3\\n2 4 2\\n2 2 4\\n3 1 4\\n1 1 3\\n1 2 3\\n2 2 3\\n3 2 3\\n2 2 3\\n4 1 3\\n2 3 2\\n2 3 2\\n3 2 2\\n2 1 3\\n2 1 3\\n3 2 3\\n3 2 2\\n3 2 2\\n2 3 2\\n2 2 4\\n3 2 2\\n4 3 1\\n3 1 2\\n2 3 3\\n2 2 4\\n2 4 3\\n2 4 2\\n4 3 1\\n3 2 2\\n4 3 1\\n1 3 4\\n1 2 2\\n2 1 2\\n3 4 1\\n2 1 2\\n2 1 2\\n2 2 2\\n2 2 2\\n3 2 2\\n3 1 2\\n3 2 2\\n4 2 2\\n2 2 3\\n1 1 2\\n4 2 3\\n1 2 3\\n2 2 3\\n2 3 2\\n2 4 2\\n3 2 3\\n2 2 2\\n4 1 2\\n2 2 4\\n2 3 4\\n3 1 3\\n3 1 4\\n4 4 4\\n3 2 3\\n2 4 2\\n1 3 3\\n1 2 2\\n3 2 4\\n2 4 3\\n4 3 3\\n3 2 2\\n3 2 2\\n3 2 2\\n4 3 2\\n4 3 3\\n3 1 3\\n3 2 2\\n3 2 2\\n4 3 2\\n3 2 2\\n1 4 4\\n4 1 3\\n3 4 4\\n4 4 4\\n1 4 4\\n4 4 4\\n3 1 4\\n1 4 4\\n1 1 3\\n3 1 4\\n3 2 2\\n2 4 4\\n4 2 2\\n2 3 2\\n2 4 2\\n2 4 2\\n4 1 3\\n2 2 3\\n1 3 3\\n2 1 2\\n1 2 4\\n2 2 4\\n2 1 2\\n2 4 2\\n2 2 3\\n1 1 4\\n2 4 3\\n1 1 2\\n1 2 4\\n1 1 4\\n2 4 3\\n2 4 2\\n2 1 2\\n1 2 2\\n3 1 4\\n3 2 4\\n1 1 4\\n2 2 2\\n1 1 4\\n1 4 2\\n2 4 2\\n2 2 4\\n2 4 2\\n4 2 3\\n1 1 4\\n1 4 2\\n1 2 2\\n2 2 4\\n2 1 2\\n2 4 3\\n2 4 2\\n3 2 3\\n1 2 2\\n2 2 4\\n1 1 4\\n1 4 3\\n2 1 2\\n2 2 4\\n1 4 3\\n1 4 3\\n1 3 4\\n2 2 4\\n3 2 4\\n4 4 4\\n2 2 3\\n1 1 2\\n3 1 4\\n3 2 2\\n2 2 4\\n1 2 3\\n2 4 2\\n4 1 3\\n1 3 4\\n1 1 4\\n1 2 2\\n2 1 4\\n2 2 4\\n2 4 3\\n1 2 3\\n1 2 4\\n2 3 2\\n2 1 4\\n1 2 4\\n1 2 2\\n1 1 4\\n1 1 4\\n1 4 3\\n2 4 3\\n1 4 3\\n2 4 3\\n2 4 2\\n1 3 4\\n1 1 4\\n1 1 4\\n1 3 4\\n3 1 4\\n1 1 4\\n1 1 4\\n3 2 2\\n3 1 4\\n1 2 4\\n1 1 4\\n3 2 2\\n2 2 2\\n2 4 2\\n2 4 2\\n3 2 2\\n2 2 4\\n1 1 4\\n1 1 4\\n2 1 4\\n1 3 4\\n1 1 4\\n1 1 4\\n1 2 4\\n1 1 4\\n1 4 4\\n2 4 3\\n1 1 4\\n2 3 2\\n3 1 4\\n2 1 4\\n3 1 4\\n2 1 4\\n1 1 4\\n2 1 4\\n2 1 4\\n3 1 4\\n2 3 2\\n4 1 4\\n1 4 2\\n1 1 4\\n3 2 2\\n1 1 4\\n2 1 2\\n1 1 4\\n1 1 4\\n1 4 2\\n1 2 2\\n2 2 3\\n1 1 4\\n2 1 4\\n2 1 4\\n1 1 4\\n1 1 4\\n1 1 4\\n3 2 2\\n1 1 4\\n2 1 4\\n2 1 4\\n3 1 4\\n4 4 4\\n1 2 4\\n2 4 3\\n1 1 4\\n1 4 2\\n1 2 2\\n2 2 4\\n1 1 4\\n1 1 4\\n2 1 4\\n1 4 3\\n2 1 4\\n1 1 4\\n1 1 4\\n2 2 4\\n1 1 4\\n1 4 3\\n1 2 4\\n2 1 4\\n1 2 4\\n1 1 4\\"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n90 63 0 0\n80 67 0 0\n90 63 0 0\n''') == '5'\nassert solution('''\n10 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '4'\nassert solution('''\n10 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n80 67 0 0\n90 63 0 0\n''') == '3'\nassert solution('''\n10 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n80 67 0 0\n90 63 0 0\n''') == '2'\nassert solution('''\n10 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n80 67 0 0\n90 63 0 0\n''') == '1'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 5\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '4'\n\nassert solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '2'\n\nassert solution('''10 5\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n4 6\n''') == '4'\n\nassert solution('''10 100\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n4 6\n''') == '1000000000000000'\n\nassert solution('''10 100\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n4 6\n''') == '1000000000000000'"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n4\\n1 2\\n1 3\\n1 4\") == \"4\"\nassert solution(\"100\\n50\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\") == \"1000000009\""
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '0'\nassert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '2'\nassert solution('2 5\\n2 4\\n1 3\\n1 4\\n1 2\\n') == '1'\nassert solution('2 5\\n1 2\\n1 3\\n1 4\\n1 2\\n') == '2'\nassert solution('3 4\\n1 2\\n1 3\\n1 4\\n1 2\\n') == '0'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '1\\n'\nassert solution('3 4') == '1\\n'\nassert solution('4 5') == '3\\n'\nassert solution('2 3') == '1\\n'\nassert solution('2 4') == '1\\n'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"0\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '8'\nassert solution('5 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '0'\nassert solution('6 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '10'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '4'\nassert solution('1 3') == '0'\nassert solution('1 4') == '0'\nassert solution('2 3') == '0'\nassert solution('2 4') == '0'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '4'\n\nassert solution('''\n4\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '0'\n\nassert solution('''\n5\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '0'\n\nassert solution('''\n100000\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n5 7\n5 8\n6 7\n6 8\n6 9\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n9 11\n10 11\n10 12\n11 12\n11 13\n12 13\n12 14\n13 14\n13 15\n14 15\n14 16\n15 16\n15 17\n16 17\n16 18\n17 18\n17 19\n18 19\n18 20\n19 20\n19 21\n20 21\n20 22\n21 22\n21 23\n22 23\n22 24\n23 24\n23 25\n24 25\n24 26\n25 26\n25 27\n26 27\n26 28\n27 28\n27 29\n28 29\n28 30\n29 30\n29 31\n30 31\n30 32\n31 32\n31 33\n32 33\n32 34\n33 34\n33 35\n34 35\n34 36\n35 36\n35 37\n36 37\n36 38\n37 38\n37 39\n38 39\n38 40\n39 40\n39 41\n40 41\n40 42\n41 42\n41 43\n42 43\n42 44\n43 44\n43 45\n44 45\n44 46\n45 46\n45 47\n46 47\n46 48\n47 48\n47 49\n48 49\n48 50\n49 50\n49 51\n50 51\n50 52\n51 52\n51 53\n52 53\n52 54\n53 54\n53 55\n54 55\n54 56\n55 56\n55 57\n56 57\n56 58\n57 58\n57 59\n58 59\n58 60\n59 60\n59 61\n60 61\n60 62\n61 62\n61 63\n62 63\n62 64\n63 64\n63 65\n64 65\n64 66\n65 66\n65 67\n66 67\n66 68\n67 68\n67 69\n68 69\n68 70\n69 70\n69 71\n70 71\n70 72\n71 72\n71 73\n72 73\n72 74\n73 74\n73 75\n74 75\n74 76\n75 76\n75 77\n76 77\n76 78\n77 78\n77 79\n78 79\n78 80\n79 80\n79 81\n80 81\n80 82\n81 82\n81 83\n82 83\n82 84\n83 84\n83 85\n84 85\n84 86\n85 86\n85 87\n86 87\n86 88\n87 88\n87 89\n88 89\n88 90\n89 90\n89 91\n90 91\n90 92\n91 92\n91 93\n92 93\n92 94\n93 94\n93 95\n94 95\n94 96\n95 96\n95 97\n96 97\n96 98\n97 98\n97 99\n98 99\n98 100\n''') == '18'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '0'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '2'\nassert solution('1 2 3 4 5') == '3'\nassert solution('1 2 3 4 5 6') == '4'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2 4'"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2\n2 3\n3 4\n''') == '''\n2\n3 4\n2 4\n'''"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2 3 4\""
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n2 3\\n3 4') == '2 3'\nassert solution('4\\n1 2\\n2 3\\n3 4') == '3 4'\nassert solution('3\\n1 2\\n2 3') == '3'\nassert solution('4\\n1 2\\n2 3') == '1 2'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n''') == '1 4'\nassert solution('''\n3\n1 2\n2 3\n3 4\n''') == '2 4'\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n''') == '3 4'\n''')\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2\n2 3\n3 4\n4 5\n6 7\n''') == '3 4'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2 3 4'\nassert solution('1 2\\n2 3\\n3 4') == '2 3 4'\nassert solution('3\\n3 1 2') == '1 2'\nassert solution('5 1 2 3 4\\n3 2 4 1 5') == '1 2 3 4 5'\nassert solution('5\\n1 2 3 4 5\\n3 2 4 1 5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2 1\"\nassert solution(\"5\") == \"2 3 4 1\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\\n2 3\") == \"1 2\\n2 3\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2 3\\n3 4\\n2 4\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"3 4\\n2 4\\n1 2\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '3'\nassert solution('2 1') == '2'\nassert solution('3 5') == '3'\nassert solution('7 2') == '0'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"5\"\nassert solution(\"3 5\") == \"0\"\n\n'''\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '2'\nassert solution('2 1') == '0'\nassert solution('3 5') == '5'\nassert solution('7 2') == '1'\n\n'''"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\nassert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '0'\nassert solution('''\n2 3\n1 3\n2 1\n3 5\n7 2\n''') == '2'\nassert solution('''\n2 1\n3 5\n1 1\n2 5\n''') == '0'\n''')\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '0'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n2 1\\n2 1\\n1 3\\n3 5\\n7 2\") == \"5\"\nassert solution(\"4\\n3 2\\n3 2\\n3 2\") == \"0\""
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '2'\nassert solution('3 5') == '5'\nassert solution('7 2') == '0'\nassert solution('1 1') == '0'\nprint('Almost done! Go Check!')\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 2\\n1 3\\n2 1\\n3 5\\n7 2\") == \"5\"\nassert solution(\n    \"2 2\\n1 3\\n2 1\\n3 5\\n7 2\") == \"0\"\nassert solution(\n    \"10 1\\n1 1\\n10 1\\n10 1\\n1 1\\n10 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\nassert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '0'\nassert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\n''')\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 5 3') == '2'\nassert solution('5 3 3') == '4'\nassert solution('10 5 3') == '7'\nassert solution('5 3 3') == '4'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'\nassert solution('7 8 9\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7') == '7'\nassert solution('3 7 8\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8') == '7'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3\") == \"2\"\nassert solution(\"3 5 3\") == \"2\"\nassert solution(\"3 5 3\") == \"2\"\nassert solution(\"3 5 3\") == \"2\"\n\n----Hints----\nTest 1:"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5 3\\n1 1\\n2 2') == '2'\nassert solution('5 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n') == '2'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 1 2 3') == '2'\nassert solution('5 3 4 5 3') == '2'\nassert solution('10 10 10 10') == '0'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('1 1') == '1'\nassert solution('2 2') == '1'\nassert solution('1 3') == '0'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\nassert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '1'\nassert solution('''2\n1\n1\n''') == '0'\nassert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '3'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'\nprint('all tests passed')\n\n\"\"\"\n\nfrom math import sqrt\nimport collections\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('3 5 3') == '2'\nassert solution('3 5 3') == '2'"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 3\n3 C\n2 C\n1 C\n\"\"\") == \"GHOST\"\n\nassert solution(\"\"\"\n4 3\n1 C\n2 C\n3 C\n\"\"\") == \"SAFE\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n3 C\n2 C\n1 C\n''') == 'GHOST'\n\nassert solution('''4\n3 C\n2 C\n1 C\n''') == 'SAFE'\n\nassert solution('''6\n3 C\n2 C\n1 C\n4 C\n5 C\n6 C\n''') == 'SAFE'"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 C\n2 C\n1 C\nSample Output:\nGHOST\n''') == 'GHOST'\n\nassert solution('''4 3\n2 C\n1 C\n2 C\n1 C\nSample Output:\nSAFE\n''') == 'SAFE'\n\nassert solution('''4 3\n1 C\n2 C\n3 C\nSample Output:\nGHOST\n''') == 'GHOST'\n\nassert solution('''4 3\n1 C\n2 C\n3 C\n4 C\nSample Output:\nSAFE\n''') == 'SAFE'\n\nassert solution('''5 3\n1 C\n2 C\n3 C\n4 C\n5 C\nSample Output:\nSAFE\n''') == 'SAFE'"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n3\n3 C\n2 C\n1 C\n''') == 'GHOST'\n\nassert solution(\n'''\n3\n5 C\n1 C\n2 C\n2 C\n2 C\n''') == 'SAFE'\n\nassert solution(\n'''\n5\n6 C\n2 C\n1 C\n3 C\n4 C\n2 C\n''') == 'GHOST'\n\nassert solution(\n'''\n5\n2 C\n1 C\n4 C\n5 C\n2 C\n3 C\n''') == 'SAFE'\n\nassert solution(\n'''\n5\n6 C\n2 C\n1 C\n3 C\n4 C\n2 C\n''') == 'GHOST'"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 3\n3 C\n2 C\n1 C\n\"\"\") == \"GHOST\"\nassert solution(\"\"\"\n4 3\n3 C\n2 C\n1 C\n\"\"\") == \"SAFE\"\nassert solution(\"\"\"\n1 2\nC\n\"\"\") == \"SAFE\"\nassert solution(\"\"\"\n1 2\n3 4\n\"\"\") == \"GHOST\"\nassert solution(\"\"\"\n1 2\n1 C\n\"\"\") == \"GHOST\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 C\n2 C\n1 C\n\"\"\") == \"GHOST\"\nassert solution(\"\"\"\n4 3\n3 C\n2 C\n1 C\n\"\"\") == \"SAFE\"\nassert solution(\"\"\"\n2 3\n1 C\n3 C\n\"\"\") == \"SAFE\"\nassert solution(\"\"\"\n3 4\n3 C\n2 C\n1 C\n\"\"\") == \"GHOST\"\nassert solution(\"\"\"\n4 4\n3 C\n2 C\n1 C\n\"\"\") == \"SAFE\"\n\"\"\")\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 C\") == \"GHOST\"\nassert solution(\"5\\n2 C\") == \"SAFE\"\nassert solution(\"5\\n3 C\") == \"GHOST\"\nassert solution(\"5\\n4 C\") == \"SAFE\"\nassert solution(\"5\\n1 C\") == \"SAFE\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"GHOST\"\nassert solution(\"4 3\") == \"SAFE\"\nassert solution(\"1 0\") == \"GHOST\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n3 C\n1 C''') == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n3 C\\n2 C\\n1 C\\n\") == \"GHOST\"\nassert solution(\"2 3\\n3 C\\n2 C\\n1 C\\n\") == \"SAFE\"\n\n'''"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '2'\nassert solution('1') == '1'\nassert solution('5') == '10'"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '2'\nassert solution('10 1') == '1'\nassert solution('9 10') == '1'\nassert solution('99 1') == '1'\nassert solution('6 1') == '0.5'\n\n\"\"\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '2'\nassert solution('1 2') == '1'\nassert solution('2.1 2.2') == '2.1'\nassert solution('3.1 2.2') == '1.1'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n0.00 2.00') == '2'\nassert solution('2\\n2.00 2.00') == '0.00'\n\n----Solutions----\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\n0.00 2.00\nSample Input 2:\n4 5\n0.00 0.00\nSample Output 2:\n0.99\n''') == '0.99\\n'\n\n'''\nSample Input 3:\n3 4\n0.00 1.00\nSample Output 3:\n1.00\n'''\n\n'''\nSample Input 4:\n2 8\n0.00 0.00\nSample Output 4:\n0.01\n'''\n\n'''\nSample Input 5:\n2 7\n0.00 2.00\nSample Output 5:\n2.00\n'''"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '2'\nassert solution('4 5') == '5'\nassert solution('6 5') == '4'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"no fika\"\nassert solution(\"1.00 2.00\") == \"2\""
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '2'\n\nassert solution('1.5 5') == '5'\n\nassert solution('-1.0 5') == '2'\n\nassert solution('1 2') == 'no fika'\n\nassert solution('3 4') == 'no fika'"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 3\n0.00 2.00\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\nassert solution('2 5\\n0.00 2.00') == '5'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2') == '10'\nassert solution('5\\n0 0\\n5 0\\n4 0\\n3 0\\n2 0\\n1 0\\n0 0') == '8'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '10'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '10'\nassert solution('5') == '30'\nassert solution('3') == '15'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n0\\n10\\n0') == '1'\nassert solution('1\\n0\\n10\\n0') == '1'\nassert solution('1\\n0\\n10\\n0') == '1'\nassert solution('1\\n0\\n10\\n0') == '1'\nassert solution('1\\n0\\n10\\n0') == '1'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '10\\n'\nassert solution('2\\n') == '0\\n'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0 0\\n10 0\\n2\\n30 0\\n15 0\\n\") == \"10\"\nassert solution(\"3\\n0 0\\n1 1\\n1 1\\n1 1\\n0 0\\n\") == \"1.5\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n0 0\n10 0\n2\n30 0\n15 0\"\"\") == \"10\"\nprint(\"Solution:\")\nprint(solution(input))\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\n0 0\n10 0\n2\n30 0\n15 0\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\nprint('Congratulations!')"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1.0\"\nprint(solution())\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n8 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n8 3\nW 10 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n8 3\nW 10 0\nW 10 3\nW 10 3\nE 17 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n8 1\nW 1 3\nW 2 3\nW 3 4\nE 3 5\nE 4 6\nE 5 7\nE 6 8\nE 7 9\nE 8 10\nE 9 11\nE 10 12\nE 11 13\nE 12 14\nE 13 15\nE 14 16\nE 15 17\nE 16 18\nE 17 19\nE 18 20\nE 19 21\nE 20 22\nE 21 23\nE 22 24\nE 23 25\nE 24 26\nE 25 27\nE 26 28\nE 27 29\nE 28 30\nE 29 31\nE 30 32\nE 31 33\nE 32 34\nE 33 35\nE 34 36\nE 35 37\nE 36 38\nE 37 39\nE 38 40\nE 39 41\nE 40 42\nE 41 43\nE 42 44\nE 43 45\nE 44 46\nE 45 47\nE 46 48\nE 47 49\nE 48 50\nE 49 51\nE 50 52\nE 51 53\nE 52 54\nE 53 55\nE 54 56\nE 55 57\nE 56 58\nE 57 59\nE 58 60\nE 59 61\nE 60 62\nE 61 63\nE 62 64\nE 63 65\nE 64 66\nE 65 67\nE 66 68\nE 67 69\nE 68 70\nE 69 71\nE 70 72\nE 71 73\nE 72 74\nE 73 75\nE 74 76\nE 75 77\nE 76 78\nE 77 79\nE 78 80\nE 79 81\nE 80 82\nE 81 83\nE 82 84\nE 83 85\nE 84 86\nE 85 87\nE 86 88\nE 87 89\nE 88 90\nE 89 91\nE 90 92\nE 91 93\nE 92 94\nE 93 95\nE 94 96\nE 95 97\nE 96 98\nE 97 99\nE 98 100\nE 99 101\nE 100 102\nE 101 103\nE 102 104\nE 103 105\nE 104 106\nE 105 107\nE 106 108\nE 107 109\nE 108 110\nE 109 111\nE 110 112\nE 111 113\nE 112 114\nE 113 115\nE 114 116\nE 115 117\nE 116 118\nE 117 119\nE 118 120\nE 119 121\nE 120 122\nE 121 123\nE 122 124\nE 123 125\nE 124 126\nE 125 127\nE 126 128\nE 127 129\nE 128 130\nE 129 131\nE 130 132\nE 131 133\nE 132 134\nE 133 135\nE 134 136\nE 135 137\nE 136 138\nE 137 139\nE 138 140\nE 139 141\nE 140 142\nE 141 143\nE 142 144\nE 143 145\nE 144 146\nE 145 147\nE 146 148\nE 147 149\nE 148 150\nE 149 151\nE 150 152\nE 151 153\nE 152 154\nE 153 155\nE 154 156\nE 155 157\nE 156 158\nE 157 159\nE 158 160\nE 159 161\nE 160 162\nE 161 163\nE 162 164\nE 163 165\nE 164 166\nE 165 167\nE 166 168\nE 167 169\nE 168 170\nE 169 171\nE 170 172\nE 171 173\nE 172 174\nE 173 175\nE 174 176\nE 175 177\nE 176 178\nE 177 179\nE 178 180\nE 179 181\nE 180 182\nE 181 183\nE 182 184\nE 183 185\nE 184 186\nE 185 187\nE 186 188\nE 187 189\nE 188 190\nE 189 191\nE 190 192\nE 191 193\nE 192 194\nE 193 195\nE 194 196\nE 195 197\nE 196 198\nE 197 199\nE 198 200\nE 199 201\nE 200 202\nE 201 203\nE 202 204\nE 203 205\nE 204 206\nE 205 207\nE 206 208\nE 207 209\nE 208 210\nE 209 211\nE 210 212\nE 211 213\nE 212 214\nE 213 215\nE 214 216\nE 215 217\nE 216 218\nE 217 219\nE 218 220\nE 219 221\nE 220 222\nE 221 223\nE 222 224\nE 223 225\nE 224 226\nE 225 227\nE 226 228\nE 227 229\nE 228 230\nE 229 231\nE 230 232\nE 231 233\nE 232 234\nE 233 235\nE 234 236\nE 235 237\nE 236 238\nE 237 239\nE 238 240\nE 239 241\nE 240 242\nE 241 243\nE 242 244\nE 243 245\nE 244 246\nE 245 247\nE 246 248\nE 247 249\nE 248 250\nE 249 251\nE 250 252\nE 251 253\nE 252 254\nE 253 255\nE 254 256\nE 255 257\nE 256 258\nE 257 259\nE 258 260\nE 259 261\nE 260 262\nE 261 263\nE 262 264\nE 263 265\nE 264 266\nE 265 267\nE 266 268\nE 267 269\nE 268 270\nE 269 271\nE 270 272\nE 271 273\nE 272 274\nE 273 275\nE 274 276\nE 275 277\nE 276 278\nE 277 279\nE 278 280\nE 279 281\nE 280 282\nE 281 283\nE 282 284\nE 283 285\nE 284 286\nE 285 287\nE 286 288\nE 287 289\nE 288 290\nE 289 291\nE 290 292\nE 291 293\nE 292 294\nE 293 295\nE 294 296\nE 295 297\nE 296 298\nE 297 299\nE 298 300\nE 299 301\nE 300 302\nE 301 303\nE 302 304\nE 303 305\nE 304 306\nE 305 307\nE 306 308\nE 307 309\nE 308 310\nE 309 311\nE 310"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    8 3\n    W 10 0\n    W 10 3\n    E 17 4\n    \"\"\"\n) == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\nW 10 0\\nE 17 4\\n') == '0'\nassert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '1'\n\"\"\"\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\nE 1 5\nE 1 3\nW 10 0\n\"\"\") == \"1\"\nassert solution(\"\"\"\nW 1 5\nE 1 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\nE 1 3\nW 1 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\nE 1 2\nW 1 0\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '0'\nassert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '1'\nassert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '2'\nassert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '3'\nassert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '4'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nW 10 0\nW 10 3\nE 17 4\n''') == '0'\n\nassert solution('''\nE 17 4\nE 18 2\nW 10 0\n''') == '1'\n\nassert solution('''\nW 10 0\nW 10 3\nW 11 5\nE 17 4\nE 17 8\nE 18 2\nE 18 9\n''') == '2'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nW 10 0\\nE 17 4') == '0'\nassert solution('2\\nW 10 0\\nW 10 3\\nE 17 4') == '1'\nassert solution('3\\nW 10 0\\nE 10 1\\nE 17 4') == '2'\nassert solution('4\\nW 10 0\\nE 10 1\\nW 10 3\\nE 17 4') == '3'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    8 3\n    W 10 0\n    W 10 3\n    E 17 4\n    ''') == '0'\nassert solution('''\n    7 3\n    W 9 2\n    W 11 0\n    W 12 4\n    E 17 0\n    E 17 3\n    ''') == '2'\nassert solution('''\n    6 3\n    W 1 3\n    W 11 3\n    E 17 2\n    E 17 3\n    W 9 2\n    E 17 1\n    E 17 3\n    ''') == '1'\nassert solution('''\n    10 3\n    E 2 2\n    W 1 3\n    E 5 2\n    W 9 2\n    W 11 0\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    W 11 3\n    E 17 1\n    W 9 2\n    E 17 1\n    E 17 2\n    E 17 2\n    W 9 2\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    W 9 2\n    E 17 1\n    E 17 3\n    E 17 2\n    E 17 2\n    W 9 2\n    W 11 3\n    E 17 1\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 3\n    E 17 3\n    E 17 2\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    W 9 2\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 2\n    W 9 2\n    E 17 1\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 3\n    W 9 2\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    W 9 2\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    W 9 2\n    E 17 1\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 3\n    E 17 2\n    E 17 2\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 3\n    E 17 3\n    E 17 2\n    E 17 3\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 2\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 3\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 3\n    E 17 3\n    E 17 3\n    E 17 2\n    E 17 3\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 3\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 2\n    E 17 3\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 3\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 3\n    E 17 3\n    E 17 3\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 3\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 3\n    E 17 3\n    E 17 3\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 2\n    W 9 2\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 2\n    E 17 2\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 3\n    E 17 3\n    E 17 3\n    E 17 3\n    E 17 3\n    W 9 2\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 2\n    E 17 2\n    W 11 3\n    E 17 1\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 2\n    E 17 2\n    E 17 3\n    E 17 3\n    E 17 3\n    E 17"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0'\nassert solution(\n'''\n3 6\nE 10 1\nW 10 3\nW 10 4\n'''\n) == '1'\nassert solution(\n'''\n10 6\nW 10 1\nE 17 4\n'''\n) == '0'\nassert solution(\n'''\n10 6\nE 17 4\nW 10 1\nE 17 4\n'''\n) == '1'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n5\\n8\\n5 6\\n3 4\") == \"3\"\nassert solution(\"2\\n3\\n2\\n1\\n3\") == \"2\"\nassert solution(\"2\\n4\\n1\\n1\\n3\") == \"2\"\nassert solution(\"1\\n1\\n2\\n1\") == \"1\"\nassert solution(\"2\\n3\\n5\\n8\") == \"3\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n2\\n1\\n4\\n2') == '3'\n\nimport sys\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n8\n5 6\n3 4\n5 13\n6 10''') == '3'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n3\n3\n2\n1\n1\nSample Input 2:\n2\n2\n1\n1\nSample Output 2:\n2"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\n5 8\n5 6\n3 4\n5 13\n6 10\"\"\") == \"3\"\nassert solution(\"\"\"5\n5 9\n5 6\n3 4\n5 13\n6 10\"\"\") == \"4\"\nassert solution(\"\"\"5\n5 9\n5 10\n3 4\n5 13\n6 10\"\"\") == \"5\"\nassert solution(\"\"\"5\n5 9\n5 10\n3 4\n5 13\n6 10\"\"\") == \"5\"\nassert solution(\"\"\"5\n5 9\n5 10\n3 4\n5 13\n6 10\"\"\") == \"4\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '3'\nassert solution('5 10') == '3'\nassert solution('5 6') == '2'\nassert solution('5 13') == '2'\nassert solution('6 10') == '2'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\") == \"3\"\nassert solution(\"10\\n8\\n5 6\\n3 4\\n5 13\\n6 10\") == \"4\"\nassert solution(\"5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\") == \"5\"\nassert solution(\"5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\") == \"5\"\nassert solution(\"5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\") == \"5\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '3'\nassert solution('4') == '1'\nassert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\\n') == '3'\nassert solution('4\\n2\\n2\\n1\\n4\\n') == '1'\nassert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\\n') == '2'\nprint('You pass all the tests!')"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 1\n1 1\n''') == 'impossible'\nassert solution('''1 1\n1 1\n''') == 'A A A'\nassert solution('''1 1\n2 2\n''') == 'A A A'\nassert solution('''2 2\n2 2\n''') == 'impossible'\nassert solution('''2 1\n1 1\n''') == 'impossible'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '4 4\\n'\n    '10 3 3\\n'\n) == 'ABCC'\n\nassert solution(\n    '8 7 5\\n'\n    '10 3 3\\n'\n) == 'ABCCBA'\n\nassert solution(\n    '3 3 4\\n'\n    '5 5 5\\n'\n) == 'ABCBCDCC'\n\nassert solution(\n    '20 8 8\\n'\n    '3 3 3\\n'\n) == 'ABCBCDCCAAABBBCCCDCCABBCDCCBBBBBCCCDCCABBBCCCCCBBBBBCCCDDCCDDCCDDDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCCDDCC"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4') == 'A\\nB'\nassert solution('3 3') == 'A\\nA\\nB'\nassert solution('4 4') == 'A\\nB\\nB\\nA'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4\\n10 3 3') == 'CAC'\nassert solution('10 8 8\\n100 80 80') == 'AC'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2\n0 0 0''') == 'ABC'\nassert solution('''2 2\n4 5 2''') == 'AABAABC'\nassert solution('''4 4\n2 2 3 3''') == 'ABCABC'\n'''\n\n\n\n###\n\n'''\n\n'''\n\nimport math\n\nn, m = list(map(int, input().split()))\nr, c, s = list(map(int, input().split()))"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4') == 'ABAC'\nassert solution('8 7 2') == 'ABBCCCDDD'\nassert solution('10 1') == 'A'\n\"\"\"\n\nfrom itertools import product\nfrom math import ceil"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == 'A B B C\\nA B C A\\nA C C A\\nA C B A\\nA B C A'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == 'ABBAACABABCCB'\nassert solution('7 4') == 'ABBAAABBAABAAAB'\nassert solution('6 7') == 'ABCBABAABAABCB'\nassert solution('2 8') == 'ABBAAABBAABAAAB'\nassert solution('2 5') == 'ABCABAACABAA'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(solution.__doc__) == \"impossible\"\n\nSample Input:\n4 4\n10 2 2\nSample Output:\nABCD\nCEGH\nIMNO\nJKLM\nPQRS\nTUV\nWXYZ"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2 3') == 'ABB'\nassert solution('6 2 2') == 'BBBBBBB'\nassert solution('3 2 2') == 'AABBB'\nassert solution('6 2 5') == 'BBBBBBAA'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''11\n    BETWEEN\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN''') == '''BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'''\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\""
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('1\\nBETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\n    ''') == 'BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'\nassert solution('''\n    BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\n    ''') == 'BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'\nassert solution('''\n    BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\n    ''') == 'BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'\nassert solution('''\n    BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\n    ''') == 'BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'\nassert solution('''\n    SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\n    ''') == 'BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\nABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('13\\nCAT IN THE HAWK') == 'CAT IN THE HAWK'\nassert solution('15\\nCAT CATS CAT CATS') == 'CAT CATS CAT CATS'\nassert solution('19\\nTHE CAT IS A BIRD') == 'THE CAT IS A BIRD'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nABC\\nXYZ') == 'ABCXYZ'\nassert solution('2\\nABC\\nXYZ') == 'ABCXYZ'\nassert solution('3\\nABC\\nXYZ') == 'ABCXYZ'\nassert solution('4\\nABC\\nXYZ') == 'ABCXYZ'\nassert solution('5\\nABC\\nXYZ') == 'ABCXYZ'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == '''BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'''\nassert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == '''BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'''\n'''\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abrahellehhelleh') == '12'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''abrahellehhelleh''') == '12'\nassert solution('''abrahellohleh''') == '8'\nassert solution('''abrahellohleh1''') == '8'\nassert solution('''abrahellohleh12''') == '8'\nassert solution('''abrahellohleh1234''') == '0'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('abrahellehl') == '12'\nassert solution('abrlehhel') == '13'\nassert solution('abrlehhe') == '15'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abrahellehhelleh') == '12'\n\"\"\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''abrahellehhelleh''') == '12'\nassert solution('''welcome''') == '0'\n\n----------------------------------------\nSolutions by Michael Fulford"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abrahellehhelleh') == '12'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\nassert solution(\"abrakadabra\") == \"0\"\nassert solution(\"eighth\") == \"1\"\nassert solution(\"majestic\") == \"0\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"12\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''abra\n            hleh\n            lleh''') == '12'\n\nassert solution('''knez\n            zne''') == '0'\n\nassert solution('''kre\n            zre\n            beb\n            cbe\n            bek\n            zbe\n            abra\n            abbe\n            abak''') == '23'\n\nassert solution('''abra\n            hleh\n            lleh''') == '12'\n\nassert solution('''abra\n            hleh\n            lleh''') == '12'"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\"\"\") == \"70\"\n\nassert solution(\"\"\"\n5\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\"\"\") == \"80\"\n\nassert solution(\"\"\"\n5\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\"\"\") == \"90\"\n\nassert solution(\"\"\"\n5\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\"\"\") == \"100\"\n\nassert solution(\"\"\"\n5\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\"\"\") == \"80\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"10\") == \"10\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"10\"\nassert solution(\"2 1 2 2 2 2 2 2 2 2 2 2 2\") == \"16\"\nassert solution(\"2 1 1 1 1 1 1 2 2 2 2 2\") == \"13\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n18\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n') == '70'\n\"\"\""
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 1 1 1\n2 1 1\n3 2\n\"\"\") == \"70\"\nassert solution(\"\"\"\n9\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n\"\"\") == \"70\"\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"500\"\nassert solution(\"\"\"\n2\n1 1 1 1\n1 1 1 1\n\"\"\") == \"100\"\nassert solution(\"\"\"\n3\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\") == \"1\"\nassert solution(\"5 4 2\") == \"1\"\nassert solution(\"2 4 1 5\") == \"5\"\nassert solution(\"5 5 4 4 5\") == \"3\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70':\n    print('Correct')\n\nassert solution('''\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\n\n\"\"\"\nA regular yahtzee is the game played when any player wants to play in regular yahtzee, i.e. their hand-held game is normal.\n\nIn regular yahtzee you are given a set of $13$ dice that can be used in any of the four categories. Your goal is to score points by placing the result of each roll of the dice into one of the categories. The categories are listed below, along with how you score points for each category:\n\nCategory\n\nScoring\n\nCategory\n\nScoring\n\n$1$\u2019s\n\n$1$ points for each $1$\n\n$3$-of-a-Kind\n\ntotal of all $5$ dice\n\n$2$\u2019s\n\n$2$ points for each $2$\n\n$4$\u2019s\n\n$4$ points for each $4$\n\n$3$\u2019s\n\n$3$ points for each $3$\n\nFull House\n\n$30$\n\n$5$\u2019s\n\n$5$ points for each $5$\n\nSmall Straight\n\n$40$\n\n$6$\u2019s\n\n$6$ points for each $6$\n\nLong Straight\n\n$50$\n\n$7$\u2019s\n\n$7$ points for each $7$\n\nChance\n\ntotal of all $5$ dice  \n\nYahtzee\n\n$50$"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"10\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"10\\n\"\nassert solution(\"10\\n\") == \"7\\n\"\nassert solution(\"5 5\\n5 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\nSample Input 2:\n10 2\n1 2 3 4 5 6 7 8 9 10\n0 1\nSample Output 2:\n14\n8\nSample Input 3:\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output 3:\n13\n8\nSample Input 4:\n10 6\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\nSample Output 4:\n13\n8\nSample Input 5:\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\nSample Output 5:\n9\n9\nSample Input 6:\n10 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\nSample Output 6:\n7\nSample Input 7:\n10 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\nSample Output 7:\n6\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\n\nn, q = map(int, input().strip().split())\nnodes = {i: 0 for i in range(1, n + 1)}\nparents = {i: i for i in range(1, n + 1)}\nfor _ in range(n - 1):\n    a, b = map(int, input().strip().split())\n    nodes[b] = nodes[a] + 1\n    parents[a] = b\n\nfor _ in range(q):\n    x = int(input().strip())\n    k = nodes[x]\n    nodes[x] = 0\n    while k:\n        x = parents[x]\n        nodes[x] = nodes[x] - 1\n        k -= 1\n    print(k)\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n10\n7\n8\n7\n''') == '7'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n7\\n8\\n7\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n7\\n8\\n7\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n7\\n8\\n7\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n7\\n8\\n7\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n7\\n8\\n7\\n\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '12'"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n') == \"10\"\nassert solution('5 10\\n4 3 2 1 0\\n1 4\\n2 4\\n4 5\\n3 5\\n2 5\\n2 6\\n3 6\\n0 2\\n1 5\\n0 5\\n2 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5\\n0 5"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\n2 3\n2 1\n1 1\n0 0\n\"\"\"\n) == \"7\"\n\nassert solution(\n\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n') == '10'\nassert solution('10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n') == '7'\nassert solution('10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n') == '8'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '10'\nassert solution('''10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '7'\nassert solution('''10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '8'\nassert solution('''10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '7'\nassert solution('''10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '7'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 1\\n-1 1\\n-1 2\\n1 1') == '2'\nassert solution('3 5 3\\n-1 2\\n-3 1\\n3 1') == '1'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\nassert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n3 2\") == \"1\"\nassert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n3 2\\n3 3\") == \"2\"\nassert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n3 2\\n3 3\\n3 3\") == \"3\""
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4 7\") == \"6\"\nassert solution(\"-2 0\") == \"2\"\nassert solution(\"0 -1\") == \"2\"\nassert solution(\"-2 1\") == \"0\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2,4,7]) == \"6\"\nassert solution([-2, 0]) == \"2\"\nassert solution([0, -1]) == \"2\"\nassert solution([-2, 1]) == \"1\"\nassert solution([1, 0]) == \"2\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n') == '6'\nassert solution('1\\n5\\n4\\n-1\\n') == '1'\n\"\"\"\nfrom collections import deque\n\nn, r, l = list(map(int, input().split()))\nlogs = []\nfor _ in range(l):\n    logs.append(list(map(int, input().split())))"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('3 3 3') == '2'\nassert solution('1 1 2') == '2'\nassert solution('5 5 5') == '2'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\nassert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"1\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1''') == '6'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 1\n1 2\n1 2\n1 2\n''') == '4'\nassert solution('''\n1 1 1\n2 2\n1 1\n2 2\n1 1\n''') == '3'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == '6'\nassert solution('''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == '3'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 4 5') == '2'\nassert solution('3 1 4 5') == '2'\nassert solution('3 2 4 5') == '1'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1 1 5 3\"\"\") == \"3\"\nassert solution(\"\"\"1 1 3 2\"\"\") == \"2\"\nassert solution(\"\"\"1 1 6 7\"\"\") == \"1\"\nassert solution(\"\"\"1 1 8 5\"\"\") == \"1\"\nassert solution(\"\"\"1 1 8 4\"\"\") == \"1\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 4 40\") == \"2\"\nassert solution(\"2 0.00004 2 1 4 40\") == \"2\"\nassert solution(\"2 0.00004 3 5 1 4 40\") == \"3\"\nassert solution(\"2 0.00003 2 5 1 4 40\") == \"2\"\nassert solution(\"2 0.00003 3 5 1 4 40\") == \"2\"\n\"\"\"\n\nimport math\n\nradius_of_sandwich = float(input())\nradius_of_pickles = float(input())\nnumber_of_pickles = int(input())\npercentage_of_area_covered = float(input())\n\npickles_per_circle = number_of_pickles / (2 * math.pi * radius_of_pickles)\npercentage_area_covered = percentage_of_area_covered * radius_of_sandwich\n\ncant_of_pickles_in_sandwich = int(math.ceil(pickles_per_circle - percentage_area_covered))\n\nprint(cant_of_pickles_in_sandwich)"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('3 100 1 40') == '3'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2.2 1 1 1\") == \"4\", \"Too big, too small\"\nassert solution(\"1.1 2 1.1 2.2\") == \"2\", \"2\"\nassert solution(\"1.1 2.2 1.1 2.2\") == \"2\", \"2\"\nassert solution(\"1.1 1.1 1.1\") == \"1\", \"No pickles\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1 4 40\n4 2 2 4''') == '2'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 4 40') == '3'\nassert solution('1.5 1.5 4.1 40') == '3'\nassert solution('1 2 3 4') == '4'\nassert solution('5 0.5 0.5 0.5') == '5'\nassert solution('9 9 8 8') == '3'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\nprint(solution(input()))\n\n3 1 4 40\nSample Output:\n4\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('2 4 3 40') == '4'\n\nSample Input:\n6 1 8 40\nSample Output:\n5\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\n\nSample Input:\n2.4 2.5 4.1\n10 5\nSample Output:\n0"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '120'\nassert solution(['0', '50', '100', '200', '210', '220', '220', '250', '250', '300', '300', '300', '300', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400', '400',"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n') == '99'\n\nassert solution('3 1\\n2 1\\n1 1\\n') == '1'\n\nassert solution('3 0\\n2 5\\n0 4\\n') == '2'\n\nassert solution('5 0\\n1 1\\n1 1\\n') == '1'\n\nassert solution('10 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n') == '1'"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '83 78 83 73 0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n3 2\n1 3\n''') == '1 3'\nassert solution('''\n6 7\n1 2\n2 3\n3 4\n4 5\n5 3\n2 4\n''') == '1 3'\nassert solution('''\n6 10\n1 2\n2 3\n3 4\n4 5\n5 3\n6 4\n2 5\n5 1\n1 3\n''') == '5 1'\nassert solution('''\n4 1\n1 2\n2 3\n3 4\n1 4\n''') == '1 4'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    3 352\n    93 82 444\n    92 76 436\n    99 62 -1\n    0 70 66 71 97\n    76 0 87 66 74\n    62 90 0 60 94\n    60 68 68 0 69\n    83 78 83 73 0\n    ''') == '99'\nassert solution('''\n    3 1\n    3 2\n    3 4\n    ''') == '0'\nassert solution('''\n    3 2\n    1 3\n    3 1\n    ''') == '0'\nassert solution('''\n    3 3\n    5 8\n    3 4\n    ''') == '0'\nassert solution('''\n    3 4\n    3 4\n    2 3\n    ''') == '2'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 352') == '99'\nassert solution('12 0') == ''\nassert solution('7 0 4 0 1') == '1 4 0 0 1'\nassert solution('12 -1') == ''\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 1\n98 83\n73 79\n68 92\n83 89\n82 -1\n-1 -1\n0 72\n72 60\n99 80\n74 96\n80 91\n''') == '99'\nassert solution('''\n12 4\n-1 92 -1 -1 -1 88 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 88 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n\"\"\") == \"99\"\n\nassert solution(\"\"\"\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n\"\"\") == \"\"\n\nassert solution(\"\"\"\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n\"\"\") == \"\"\n\nassert solution(\"\"\"\n3 0\n0 20 8\n0 0 0\n99 93 70\n\"\"\") == \"\"\n\nassert solution(\"\"\"\n5 2\n2 8 4 9 1\n1 3 0 0\n0 0 0 0\n1 0 0 0\n0 0 0 0\n\"\"\") == \"2\""
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 352\") == \"99\"\nassert solution(\"0\") == \"\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n3\\n4\\n') == '2 4\\n3 1\\n'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2 4\""
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2\n2 3\n3 4\n''') == '2 3'\nassert solution('''10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n''') == '10 11'"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4') == '2 4'\nassert solution('3\\n2 1\\n1 2\\n4 3') == '4 2'"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2 3'\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n''') == '4 2'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n1 2\n2 3\n3 4\n\"\"\") == \"2 3\"\n\nassert solution(\"\"\"\n2\n1 2\n2 3\n3 4\n\"\"\") == \"4 2\"\n\nassert solution(\"\"\"\n1\n1 2\n2 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1\n1 2\n2 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2 3'\nprint(solution('''5\n1 2\n2 3\n3 4\n4 5\n'''))\nprint(solution('''6\n1 2\n2 3\n3 4\n4 5\n5 6\n'''))\nprint(solution('''7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n'''))\nprint(solution('''8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n'''))\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n1\n2\n3\n4\n    \"\"\"\n    ) == \"4 2\"\nassert solution(\n    \"\"\"\n2\n3\n4\n1\n    \"\"\"\n    ) == \"4 1\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1 2'\nassert solution('10') == '5 9 8 7 6 5 4 3 2 1'\nprint(solution())\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '9.0000'\nassert solution('2 2') == '12.00000'\nassert solution('3 2') == '12.00000'\nassert solution('4 1') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '9.0'\nassert solution('2') == '12.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1\\n2 2\\n3 2\\n4 1') == '9.0000'\nassert solution('10\\n1 1\\n2 2\\n3 2\\n4 1') == '12.00000'\nassert solution('15\\n1 1\\n2 2\\n3 2\\n4 1\\n5 2\\n6 2\\n7 2\\n8 2\\n9 2\\n10 2\\n11 2\\n12 2\\n13 2\\n14 2') == '12.00000'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '9.0000'\nassert solution('3 2') == '12.00000'\nassert solution('4 1') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 1\n2 2\n3 2\n4 1''') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r\"\"\"\n1 1\n2 2\n3 2\n4 1\n\"\"\") == \"9.0000\"\nassert solution(r\"\"\"\n2 2\n1 1\n2 2\n1 1\n\"\"\") == \"12.00000\"\nassert solution(r\"\"\"\n5 5\n1 1\n3 2\n4 3\n2 2\n5 5\n\"\"\") == \"16.00000\"\nassert solution(r\"\"\"\n1\n1\n\"\"\") == \"1.00000\""
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == \"12.00000\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 1\n2 2\n3 2\n4 1\n''') == '9.0000'\nassert solution('''\n5\n1 1\n2 2\n3 2\n4 1\n5 2\n''') == '12.00000'\n'''\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"9.00000\"\nassert solution(\"4\") == \"9.0\""
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n2 2\n3 2\n4 1\n''') == '9.0000\\n12.00000\\n12.00000\\n9.0\\n'"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'DI Y'\nassert solution('0') == 'DI Y'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'DI A\\n'\nassert solution('2') == 'DI A\\nDI X\\nDI Y\\n'\nassert solution('3') == 'DI A\\nDI A\\nDI A\\nDI X\\nDI Y\\nDI Y\\nDI X\\n'\nassert solution('4') == 'DI A\\nDI A\\nDI A\\nDI X\\nDI A\\nDI A\\nDI A\\nDI A\\nDI X\\nDI A\\nDI A\\nDI A\\nDI A\\nDI X\\nDI X\\nDI X\\nDI X\\nDI X\\nDI Y\\nDI Y\\nDI X\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI X\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI X\\nDI Y\\nDI Y\\nDI X\\nDI Y\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI Y\\nDI X\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI X\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI X\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == \"DI\"\nassert solution('2') == \"DI Y\"\nassert solution('5') == \"DI Y Y Y Y\"\nassert solution('8') == \"DI Y Y Y Y Y Y Y Y\"\nassert solution('10') == \"DI Y Y Y Y Y Y Y Y Y Y\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\nassert solution(\"255\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\nassert solution(\"1001\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nDI X\\nDI Y\\n\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"ZE A\"\nassert solution(\"3\") == \"ST A\""
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == \"DI A\\n\"\nassert solution('1') == \"DI X\\n\"\nassert solution('255') == \"DI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X\\nDI Y\\nDI A\\nDI X"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"DI Y\"\n\n\"\"\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'AD'\nassert solution('1') == 'DI'\nassert solution('5') == 'DI Y'\nassert solution('42') == 'DI Y'\nassert solution('100') == 'DI Y'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == '2'\n\n'''\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 5 7') == '1'\nassert solution('1 5 6 8') == '3'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 5 5') == '1'\nassert solution('1 5 2') == '0'\n\nimport itertools\n\nn, r, c = list(map(int, input().split()))\n\nl = []\nfor i in range(n):\n    l.extend(list(map(int, input().split())))\n\nl = sorted(list(set(itertools.chain(*[list(range(n)) for _ in range(n)]))))"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('2 4 8') == '1'"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\") == \"2\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 5 5') == '1'\nassert solution('1 1 1') == '0'\nassert solution('1 5 1') == '3'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\") == '2'"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 5 6\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 2 1\") == \"1\"\nassert solution(\"2 2 2\") == \"2\"\nassert solution(\"3 3 3\") == \"3\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 6') == '2'\nassert solutionn"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == '2'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nnone on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n\") == \"abaaba\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\nA -> a\\nS -> a\\n') == 'abaaba'\nassert solution('3\\nS -> a\\nS -> a\\n') == 'abaaba'\nassert solution('3\\nS -> a\\nS -> a\\n') == 'abaaba'\nassert solution('3\\nS -> a\\nS -> a\\n') == 'abaaba'\nassert solution('3\\nS -> a\\nS -> a\\n') == 'abaaba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\n\") == \"abaaba\"\nassert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\n\") == \"NONE\"\nassert solution(\"4\\nS -> a\\nS -> b\\nS -> c\\nS -> \\n\") == \"a\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS ->\\n\") == \"abaaba\"\nassert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS ->\\n\") == \"abaaba\"\nassert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS ->\\n\") == \"abbbbbbbbbbbbbbbbba\"\nassert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS ->\\n\") == \"abbbbbbbbbbbbbbbbba\"\nassert solution(\"3\\nA -> a\\nA -> b\\nA ->\\n\") == \"a\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nNONE on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == \"abaaba\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nNONE on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == \"abaaba\""
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\nS -> aSbSb\\nS -> aSb') == 'abaaba'\nassert solution('6\\nS -> aSbSb\\nS -> aSb') == 'abaaba'\nassert solution('6\\nS -> aSbSb\\nS -> aSb\\nS -> b') == 'abaaba'\nassert solution('6\\nS -> aSbSb\\nS -> aSb\\nS -> b\\nS -> ') == 'abbbbbbbbbbbbbbbbba'\nassert solution('6\\nS -> aSbSb\\nS -> aSb\\nS -> b\\nS -> \\nS -> a') == 'abbbbbbbbbbbbbbbbba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nnone on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\") == \"abaaba\"\nassert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nNONE\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\") == \"a\"\nassert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\naba\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\") == \"aba\"\n\"\"\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\nassert solution('''\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'NONE'\n\n\"\"\"\n\n\nimport sys\nimport re\n\nV = set(chr(i) for i in range(65, 91))\nV.add('')"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\nS -> aSa') == 'abaaba'\nassert solution('2\\nS -> aSb') == 'abaaba'\nassert solution('3\\nS -> a\\n') == 'NONE'\nassert solution('4\\nS -> b\\n') == 'NONE'\nassert solution('5\\nS -> a') == 'a'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4 5 0 2\") == \"3\"\nassert solution(\"1 3 7\") == \"4\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '5'\nassert solution('''\n4\n4 3 7\n0 2\n4\n''') == '3'\n''')"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '4'\nassert solution('5') == '4'\nassert solution('5') == '4'\nassert solution('5') == '4'\nassert solution('5') == '4'"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '4'\nassert solution('5\\n4\\n0\\n2\\n1\\n3\\n7') == '4'\nassert solution('5\\n4\\n0\\n2\\n1\\n3\\n7\\n10') == '5'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3'\n\"\"\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '4'\nassert solution('''\n5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '5'\n'''"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n5 5 0 2\n1 3 7\n2 0\n4\n\"\"\") == \"4\""
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\nassert solution('10\\n3 4 0 5\\n5 6 9 0\\n5 7\\n1 5 3 9\\n7 8\\n8 4\\n1 1 2\\n8\\n') == '3'\nassert solution('6\\n2 4 0 5\\n6 8 0\\n6 7\\n1 5 3 9\\n7 8\\n8 5\\n1 1 2\\n8\\n') == '0'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '4'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('4') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW') == 'GO FOR IT'\nassert solution('2 3\\n4 4\\nWWWW\\nWBWG\\nWWWW') == 'NO CHANCE'\nassert solution('3 1\\n1 1\\nWWWW\\nWWWW\\nWWWW') == 'NO WAY'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'GO FOR IT'\nassert solution('2 5') == 'NO WAY'\nassert solution('3 5') == 'NO WAY'\n\nimport sys\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\\n') == 'GO FOR IT'\nassert solution('5 4\\n9 8\\nWWWW\\nWWWG\\nWWWG\\nBBWW\\n') == 'GO FOR IT'\nassert solution('2 3\\n3 3\\nWWWW\\nWSBB\\nWWWW\\nWWWW\\n') == 'NO WAY'\nassert solution('5 4\\n9 8\\nWWWW\\nWWWG\\nWWWG\\nBBWW\\n') == 'NO WAY'\nassert solution('2 3\\n3 3\\nWWWW\\nWSBB\\nWWWW\\nWWWW\\n') == 'NO WAY'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == 'GO FOR IT', \"1st\"\nassert solution('2 1') == 'NO CHANCE', \"2nd\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG''') == 'GO FOR IT'\nassert solution('''2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG''') == 'NO WAY'\nassert solution('''2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG''') == 'SUCCESS'\n''')\n\nimport sys\nimport io\nsys.stdin = io.StringIO('''2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG''')\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n2\n3\n1\n2\n3''') == 'GO FOR IT', 'First'\nassert solution('''4\n4\n1\n2\n3\n1\n2''') == 'NO CHANCE', 'Second'\n'''\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\", '2'\nassert solution(\"3 3\") == \"GO FOR IT\", '3'\nassert solution(\"4 4\") == \"GO FOR IT\", '4'\nassert solution(\"5 5\") == \"GO FOR IT\", '5'\nassert solution(\"5 5\") == \"NO WAY\", '5'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == 'GO FOR IT'\nassert solution('2 2') == 'NO CHANCE'\nassert solution('3 3') == 'GO FOR IT'\nassert solution('3 1') == 'NO CHANCE'\nassert solution('3 2') == 'NO WAY'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWBWG\\nWBWB\\nGWWB\") == \"NO WAY\"\nassert solution(\"1 2\\n4 4\\nWWWW\\nWSBB\\nWBWG\\nWBWB\\nGWWB\") == \"NO WAY\"\nassert solution(\"1 2\\n3 3\\nWWWW\\nWSBB\\nWBWG\\nWBWB\\nGWWB\") == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == 'SUCCESS'\nassert solution('2 3') == 'GO FOR IT'\nassert solution('10 5') == 'NO CHANCE'\n\n\"\"\""
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == \"2243\"\nassert solution('''\n4 5\n1 2 3 4 5\n''') == \"15\"\nassert solution('''\n4 5\n1 2 3 4\n''') == \"12\"\n\n'''\nclass Solution:\n    def solution(self, stdin):\n        pass\n\nassert Solution().solution('''\n5 900\n800 700 400 300 200\n''') == \"2243\"\nassert Solution().solution('''\n4 5\n1 2 3 4 5\n''') == \"15\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\") == \"2243\"\nassert solution(\"5 2\\n1 2 1 1 1\") == \"0\""
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 2\\n5 7 3\\n1 0 0\\n1 7 1\\n0 1 2\\n1 1 1\"\n    ) == \"2243\"\nassert solution(\n    \"4 10\\n1 0 0\\n1 1 1\\n1 2 2\\n1 3 3\"\n    ) == \"2393\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\nassert solution('5 5 9 4 8 7') == '239'"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 9\n800 700 400 300 200\n''') == '2243'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(s) == '2243', \"Case Failed\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\\n\") == \"2243\"\nassert solution(\"10 4\\n50 50 50 50 50 50 50 50 50 50\\n\") == \"723\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\nassert solution('8 1\\n1 1 1 1 1 1 1 1\\n') == '9'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n900\\n800\\n700\\n400\\n300\\n200\") == \"2243\"\nassert solution(\"2\\n1000\\n900\\n800\\n700\\n400\\n300\\n200\") == \"1900\"\nassert solution(\"3\\n1000\\n900\\n800\\n700\\n400\\n300\\n200\") == \"1900\"\nassert solution(\"4\\n500\\n1000\\n900\\n800\\n700\\n400\\n300\\n200\") == \"1900\"\nassert solution(\"5\\n500\\n1000\\n900\\n800\\n700\\n400\\n300\\n200\") == \"1900\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''\n2 100\n60 50\n''') == '60'\nassert solution('''\n3 400\n20 300 200\n''') == '300'\nassert solution('''\n2 200\n200 200\n''') == '200'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n= 1 8\\n? 1 3') == 'no\\nyes\\n'\nassert solution('1 2\\n= 1 8\\n? 1 3\\n= 1 8\\n? 1 3') == 'yes\\nno\\n'"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n=1 2\\n=1 3\\n=1 4\\n?1 3\\n?1 4\\n=2 4\") == \"yes\\nno\\n\"\nassert solution(\"4\\n5\\n=1 2\\n=1 3\\n=1 4\\n?1 3\\n?1 4\\n=2 4\") == \"yes\\nyes\\nno\\n\"\nassert solution(\"5\\n5\\n=1 2\\n=1 3\\n=1 4\\n?1 3\\n?1 4\\n=2 4\") == \"yes\\nyes\\nyes\\nno\\n\"\n\"\"\""
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4') == 'no\\nyes\\n'\nassert solution('5 5') == 'yes\\nno\\n'\nassert solution('5 6') == 'no\\n'"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n= 1 8\\n= 3 8\\n? 1 3\\n') == 'no\\nyes\\n'\nassert solution('4 1\\n= 1 8\\n= 3 8\\n? 1 3\\n') == 'yes\\n'"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"yes\"\nassert solution(\"1 2\") == \"no\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"no\\nyes\"\nassert solution(\"10 5\") == \"no\\nyes\"\nassert solution(\"10 5\") == \"yes\\nyes\"\nassert solution(\"1 2\") == \"yes\\n\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 3\\n1 3\") == \"yes\"\nassert solution(\"1 2\\n2 4\\n3 4\") == \"no\"\nassert solution(\"5 4\\n2 3\\n3 4\\n4 5\\n3 6\\n4 5\") == \"yes\"\nassert solution(\"5 4\\n2 3\\n4 5\\n3 6\\n4 5\") == \"no\"\nassert solution(\"10 100\\n10 10\\n9 9\\n8 8\\n7 7\\n6 6\\n5 5\\n4 4\\n3 3\\n2 2\\n1 1\") == \"yes\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3') == 'no\\nyes'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n= 1 8\\n= 3 8\\n? 1 3\\n') == 'yes\\nno'\nassert solution('10 2\\n= 1 8\\n= 3 8\\n? 1 3\\n= 3 8\\n= 1 8\\n? 1 3\\n= 3 8\\n= 1 8\\n? 1 3\\n= 3 8\\n= 1 8\\n? 1 3\\n= 3 8') == 'yes\\nno'\nassert solution('10 2\\n= 2 3\\n= 1 3\\n? 1 2\\n= 3 1\\n= 3 1\\n? 1 2\\n= 2 3\\n= 1 3\\n? 1 2\\n= 2 3\\n= 1 3\\n? 1 2\\n= 3 1\\n= 3 1') == 'yes\\nno'\nassert solution('10 3\\n= 1 3\\n= 3 3\\n? 1 2\\n= 2 3\\n= 3 3\\n? 1 2\\n= 2 3\\n= 3 3\\n? 1 2\\n= 3 3\\n= 1 3') == 'yes\\nno'\nassert solution('10 3\\n= 1 3\\n= 3 3\\n? 1 2\\n= 2 3\\n= 3 3\\n? 1 2\\n= 2 3\\n= 3 3\\n? 1 2\\n= 3 3\\n= 1 3') == 'yes\\nno'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"yes\\nyes\\nno\\nno\\nno\\nno\\nno\\nno\\nno\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n10 5 4 8 3\") == \"2\"\nassert solution(\"15 15\\n
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n10 5 4 8 3\n''') == '2'\n\nassert solution('''\n4 3\n10 5 4 8 3\n''') == '0'\n\"\"\""
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == 0\nassert solution('5 3\\n10 5 4 8 3') == 2\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == \"2\"\nassert solution('10 5 4 8 3') == \"2\""
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n4\n5\n7\n8\n10\n''') == \"2\"\nassert solution('''\n5\n8\n1\n2\n4\n''') == \"1\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '2'\nassert solution('5 5 2') == '2'\nassert solution('5 5 4 8 3') == '2'\nassert solution('6 2') == '1'\nassert solution('5 5 4 8 3 6') == '2'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\n10 5 4 8 3\n''') == '2'\n\"\"\""
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '2'\n'''"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n10 5 4 8 3\") == \"2\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == \"2\"\nassert solution
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1083\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 127\") == \"1083\"\nassert solution(\"1 1\") == \"2\""
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n\") == \"1083\"\nassert solution(\"1 12\\n\") == \"1083\"\nassert solution(\"1 0\\n\") == \"1\"\nassert solution(\"12 128\\n\") == \"1083\"\nassert solution(\"1 1\\n\") == \"1083\"\n\"\"\""
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n5\\n') == '1033'\nassert solution('10\\n17\\n') == '1137'"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 127') == '1083'\n\n'''\n\nfrom sys import stdin,stdout"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n7\n''') == \"17\"\nassert solution('''\n50\n51\n''') == \"29\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '1083'\nassert solution('3 3\\n') == '13'"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 127\n''') == '1083'\nassert solution('''\n1 7\n''') == '7'\nassert solution('''\n1 2\n''') == '1'\n'''))\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 127') == 1083"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"1 127\n        \"\"\") == \"1083\"\n\"\"\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4') == '2.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 4') == '2.0000000000'\nassert solution('4 5') == '1.50000000000'\n\"\"\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\nHow much is 6 times 9?') == '2.0000000000'\nassert solution('3 3\\nHow much is 9 times 6?') == '2.0000000000'\nassert solution('4 4\\nIs there intelligent life on Earth?') == '2.0000000000'\nassert solution('5 5\\nWhat is the air speed velocity of an unladen swallow?') == '2.0000000000'\n\"\"\"\n\nimport sys\nimport math\n\nt, n = map(int, input().split())\n\nans = n\n\nfor i in range(t):\n    words = input().split()\n    if words[-1] == \"?\":\n        words.pop()\n    a = 0\n    for j in range(len(words)):\n        a += ord(words[j][0]) - ord('a') + 1\n    a = a * 2\n    ans = min(ans, a)\n\nprint(ans)\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2.0000000000'\nassert solution('10 10\\nabcdefghijklmnopqrstuvwxyz\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n1234567890\\n_+-*/%&^<>?|`~\\'\") == '4.143033707865686'\nassert solution('4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '3.30000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(t=4, n=4) == \"2.0000000000\"\n\"\"\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'\n\nSample Input:\n3\nHow many stairs are there? 10\nHow many stairs are there? 5\nHow many stairs are there? 5\nSample Output:\n3.999999999'''\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2.0000000000'\nprint('Tests passed!')\n\"\"\"\nimport sys\nfrom math import log\nfrom functools import partial\n\nimport numpy as np\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(stdin) == '3.0000000000'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1.0000000000'\nassert solution('2') == '2.0000000000'\nassert solution('3') == '3.0000000000'\nassert solution('4') == '4.0000000000'\nassert solution('5') == '5.0000000000'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4\\n'\n    '2 3\\n'\n    '1 4\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'POSSIBLE'\nassert solution('''3 2\nmonkey 2 lion\nlion 3 monkey\npenguin 1 monkey''') == 'IMPOSSIBLE'\nassert solution('''3 1\nmonkey 1\nlion 0''') == 'FALSE ALARM'"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\"5 5\", \"lion 2 monkey penguin\", \"monkey 3 lion\", \"penguin 1 monkey\"]) == \"IMPOSSIBLE\"\nassert solution([\"1 2\", \"lion 1 monkey\", \"monkey 2 penguin\", \"penguin 3 lion\"]) == \"FALSE ALARM\"\nassert solution([\"1 1\", \"penguin 1 penguin\", \"penguin 3 penguin\", \"monkey 1 monkey\"]) == \"POSSIBLE\""
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\\n\") == \"POSSIBLE\"\nassert solution(\"1 1\\n\") == \"IMPOSSIBLE\"\n\nimport sys"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\") == \"POSSIBLE\"\nassert solution(\"3 5\\ncat 4 wolf rabbit frog\\ntiger 5 cat wolf frog\\nfrog 1 cat rabbit\\ngiraffe 6 tiger wolf\\nwolf 7 giraffe\\n\") == \"IMPOSSIBLE\"\nassert solution(\"3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey\") == \"FALSE ALARM\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n0\na\n\"\"\") == \"IMPOSSIBLE\", \"Not possible\"\nassert solution(\n\"\"\"\n1\na\n\"\"\") == \"IMPOSSIBLE\", \"Not possible\"\nassert solution(\n\"\"\"\n2\na\nb\n\"\"\") == \"POSSIBLE\", \"Not possible\"\nassert solution(\n\"\"\"\n3\na\nc\n\"\"\") == \"POSSIBLE\", \"Not possible\"\nassert solution(\n\"\"\"\n4\na\nb\nc\nd\n\"\"\") == \"POSSIBLE\", \"Not possible\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"IMPOSSIBLE\"\n\n\"\"\""
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey\n''') == 'POSSIBLE'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    100\n    4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n    4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n    0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n    2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n    8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n    ''') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n\"\"\"\n) == \"triple correlation 4(1)4(3)3 found\"\n\nassert solution(\n\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4') == 'triple correlation 4(1)4(3)3 found'\nassert solution('4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2') == 'triple correlation 4(1)4(3)3 found'\nassert solution('8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4') == '4(1)4(3)3'\nassert solution('1 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7') == 'random sequence'\nassert solution('6 5 4 3 2 1 7 9 8 0 9 3 5 9 8 3 3 8 2 6 1 5 3') == 'random sequence'\nassert solution('1 1 1 1 0 1 1 0 0 0 1 0 1 0 1 1 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 1 0 0 1 1 0 1 1 1 1 1 1 1 0 1 1 0 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 0 0 1 0 1 1 0 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4') == 'triple correlation 4(1)4(3)3 found'\nassert solution('2\\n2 3 2 1 1\\n1 1 1 1\\n0 0 0 0') == 'random sequence'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100 6 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4') == 'triple correlation 4(1)4(3)3 found'\nassert solution('5 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6 5 8 3 5 6 5 8 5 0 0 0 0 0 1 2 3 4 4 5 6"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0\n9 7 0 3 6 1 4 4 1 2 3 2 6 9 9''') == 'triple correlation 4(1)4(3)3 found'\nprint('Success!!')"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '3.5'\nassert solution('3 10') == '19.0'\nassert solution('13 0') == '13.0'"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"2.5\"\nassert solution(\"2 0\") == \"0.5\"\n\n---Input---\n3 1\n39\n10\n40\nSample Output\n40.5\n\"\"\"\nimport math"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n100 500\\n25\\n50\\n') == '50.0'\nprint(solution(*input().split()))"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"40.5\"\nassert solution(\"10 10\") == \"22.5\"\nassert solution(\"3 3\") == \"16.0\"\nassert solution(\"10 10\") == \"22.5\"\nassert solution(\"10 0\") == \"10.0\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '40.5'\nassert solution('10 1') == '8.0'\nassert solution('100 1') == '100.0'\nassert solution('1000 1') == '1000.0'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '40.5'\nassert solution('2') == '44.0'\nassert solution('3') == '41.0'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1\\n39\\n10\\n40') == '40.5'\nassert solution('3 1\\n20\\n40\\n50\\n60\\n70\\n80\\n90\\n100') == '101'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '4.5'\nassert solution('1 1 1') == '2.0'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '3.0'\nassert solution('1.5') == '2.0'\nassert solution('1.5 1.5') == '1.5'\nassert solution('0.5') == '1.0'\nassert solution('1.5 1.5 1.5') == '1.5'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1\\n40') == '41.5'\nassert solution('1000000 1\\n1000000') == '100000000.000000001'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 6') == 'Impossible'\nassert solution('1 3') == '2008'\nassert solution('1 2') == 'Impossible'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"2008\"\nassert solution(\"5 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == 'Impossible'\n\nassert solution('''4 8\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == '1987'\n\nassert solution('''5 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == '1987'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'Impossible'\nassert solution('4 4') == '2015'\nassert solution('3 3') == 'Impossible'\n\"\"\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 6') == 'Impossible'\nassert solution('16 3') == 'Impossible'\nassert solution('19 18 3') == '1988'\n\"\"\"\n\n\"\"\"\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n1 4 1987\n1 5 1987\n2 6 1987\n1 6 1987\n1 6 1987\n1 6 1987\n1 7 1987\n2 7 1987\n1 7 1987\n1 8 1987\n1 9 1987\n2 10 1987\n1 10 1987\n2 11 1987\n1 11 1987\n1 12 1987\n2 13 1987\n1 13 1987\n1 14 1987\n1 15 1987\n1 16 1987\n2 17 1987\n1 17 1987\n1 18 1987\n1 19 1987\n1 20 1987\n2 21 1987\n1 21 1987\n2 22 1987\n1 22 1987\n1 23 1987\n1 24 1987\n2 25 1987\n1 25 1987\n1 26 1987\n2 27 1987\n1 27 1987\n2 28 1987\n1 28 1987\n2 29 1987\n1 29 1987\n1 30 1987\n1 31 1987\n1 321987\n2 33 1987\n1 33 1987\n1 34 1987\n1 35 1987\n2 36 1987\n1 36 1987\n1 37 1987\n1 38 1987\n2 39 1987\n1 39 1987\n1 40 1987\n1 41 1987\n1 42 1987\n2 43 1987\n1 43 1987\n1 44 1987\n1 45 1987\n1 46 1987\n2 47 1987\n1 47 1987\n1 48 1987\n1 49 1987\n1 50 1987\n2 51 1987\n1 51 1987\n1 52 1987\n2 53 1987\n1 54 1987\n1 55 1987\n1 56 1987\n1 57 1987\n1 58 1987\n1 59 1987\n1 60 1987\n2 61 1987\n1 61 1987\n1 62 1987\n1 63 1987\n1 64 1987\n1 65 1987\n1 66 1987\n1 67 1987\n1 68 1987\n1 69 1987\n1 70 1987\n2 71 1987\n1 71 1987\n1 72 1987\n1 73 1987\n1 74 1987\n1 75 1987\n1 76 1987\n1 77 1987\n1 78 1987\n1 79 1987\n1 80 1987\n1 81 1987\n1 82 1987\n1 83 1987\n1 84 1987\n1 85 1987\n1 86 1987\n1 87 1987\n1 88 1987\n1 89 1987\n1 90 1987\n2 91 1987\n1 91 1987\n1 92 1987\n1 93 1987\n1 94 1987\n1 95 1987\n1 96 1987\n1 97 1987\n1 98 1987\n1 99 1987\n1 100 1987\n1 101 1987\n1 102 1987\n1 103 1987\n1 104 1987\n1 105 1987\n1 106 1987\n1 107 1987\n1 108 1987\n1 109 1987\n1 110 1987\n1 111 1987\n1 112 1987\n1 113 1987\n1 114 1987\n1 115 1987\n1 116 1987\n1 117 1987\n1 118 1987\n1 119 1987\n1 120 1987\n2 121 1987\n1 121 1987\n1 122 1987\n1 123 1987\n1 124 1987\n1 125 1987\n1 126 1987\n1 127 1987\n1 128 1987\n1 129 1987\n1 130 1987\n1 131 1987\n1 132 1987\n1 133 1987\n1 134 1987\n1 135 1987\n1 136 1987\n1 137 1987\n1 138 1987\n1 139 1987\n1 140 1987\n1 141 1987\n1 142 1987\n1 143 1987\n1 144 1987\n1 145 1987\n1 146 1987\n1 147 1987\n1 148 1987\n1 149 1987\n1 150 1987\n1 151 1987\n1 152 1987\n1 153 1987\n1 154 1987\n1 155 1987\n1 156 1987\n1 157 1987\n1 158 1987\n1 159 1987\n1 160 1987\n1 161 1987\n1 162 1987\n1 163 1987\n1 164 1987\n1 165 1987\n1 166 1987\n1 167 1987\n1 168 1987\n1 169 1987\n1 170 1987\n1 171 1987\n1 172 1987\n1 173 1987\n1 174 1987\n1 175 1987\n1 176 1987\n1 177 1987\n1 178 1987\n1 179 1987\n1 180 1987\n1 181 1987\n1 182 1987\n1 183 1987\n1 184 1987\n1 185 1987\n1 186 1987\n1 187 1987\n1 188 1987\n1 189 1987\n1 190 1987\n1 191 1987\n1 192 1987\n1 193 1987\n1 194 1987\n1 195 1987\n1 196 1987\n1 197 1987\n1 198 1987\n1 199 1987\n1 200 1987\n1 201 1987\n1 202 1987\n1 203 1987\n1 204 1987\n1 205 1987\n1 206 1987\n1 207 1987\n1 208 1987\n1 209 1987\n1 210 1987\n1 211 1987\n1 212 1987\n1 213 1987\n1 214 1987\n1 215 1987\n1 216 1987\n1 217 1987\n1 218 1987\n1 219 1987\n1 220 1987\n1 221 1987\n1 222 1987\n1 223 1987\n1 224 1987\n1 225 1987\n1 226 1987\n1 227 1987\n1 228 1987\n1 229 1987\n1 230 1987\n1 231 1987\n1 232 1987\n1 233 1987\n1 234 1987\n1 235 1987\n1 236 1987\n1 237 1987\n1 238 1987\n1 239 1987\n1 240 1987\n1 241 1987\n1 242 1987\n1 243 1987\n1 244 1987\n1 245 1987\n1 246 1987\n1 247 1987\n1 248 1987\n1 249 1987\n1 250 1987\n1 251 1987\n1 252 1987\n1 253 1987\n1 254 1987\n1 255 1987\n1 256 1987\n1 257 1987\n1 258 1987\n1 259 1987\n1 260 1987\n1 261 1987\n1 262 1987\n1 263 1987\n1 264 1987\n1 265 1987\n1 266 1987\n1 267 1987\n1 268 1987\n1 269 1987\n1 270 1987\n1 271 1987\n1 272 1987\n1 273 1987\n1 274 1987\n1 275 1987\n1 276 1987\n1 277 1987\n1 278 1987\n1 279 1987\n1 280 1987\n1 281 1987\n1 282 1987\n1 283 1987\n1 284 1987\n1 285 1987\n1 286 1987\n1 287 1987\n1 288 1987\n1 289 1987\n1 290 1987\n1 291 1987\n1 292 1987\n1 293 1987\n1 294 1987\n1 295 1987\n1 296 1987\n1 297 1987\n1 298 1987\n1 299 1987\n1 300 1987\n1 301 1987\n1 302 1987\n1 303 1987\n1 304 1987\n1 305 1987\n1 306 1987\n1 307 1987\n1 308 1987\n1 309 1987\n1 310 1987\n1 311 1987\n1 312 1987\n1 313 1987\n1 314 1987\n1 315 1987\n1 316 1987\n1 317 1987\n1 318 1987\n1 319"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 6\") == \"1987\"\nassert solution(\"2 10\") == \"1987\"\nassert solution(\"2 8\") == \"1988\"\nassert solution(\"4 3\") == \"1988\"\nassert solution(\"4 4\") == \"2008\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\nassert solution(\"3 5\\n1 2 1987\\n3 4 1988\\n3 2 1987\\n3 1 1988\\n3 4 1987\\n1 4 1987\") == \"2008\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([4, 6, 1, 2, 3, 4, 1, 3, 4, 2, 4, 5]) == 'Impossible'\nassert solution([4, 6, 1, 2, 3, 4, 1, 3, 4, 2, 4, 6]) == '2008'\nassert solution([4, 6, 1, 2, 3, 4, 1, 3, 4, 2, 4, 5]) == '2008'\nassert solution([4, 6, 1, 2, 3, 4, 1, 3, 4, 2, 4, 5]) == '2007'\nassert solution([4, 6, 1, 2, 3, 4, 1, 3, 4, 2, 4, 5]) == '2007'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 6\") == \"Impossible\"\nassert solution(\"4 5\") == \"1969\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 4\n1 2 1988\n2 3 1988\n1 3 1988\n2 4 1988\n1 4 1988''') == 'Impossible'\nassert solution('''10 10\n3 9 9\n2 3 8\n1 3 8\n2 4 8\n2 1 8\n1 4 8\n1 5 8\n1 6 8\n1 7 8\n2 7 8\n3 6 8\n4 5 8\n4 5 8\n3 5 8\n1 4 8\n2 5 8\n2 6 8\n1 6 8\n1 7 8\n3 7 8\n4 6 8\n4 7 8''') == '2008'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1 2\nC 1 2\nC 1 3\n''') == \"impossible\"\nassert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == \"3\"\nassert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == \"3\"\nassert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == \"impossible\"\nassert solution('''\n3 0 1\nN 1 2\nN 2 3\n''') == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 0 1\\n1 2\\n3 1\") == \"impossible\"\nassert solution(\"2 0 2\\n1 2\\n3 1\") == \"3\"\nassert solution(\"2 0 3\\n1 2\\n3 1\") == \"2\"\nassert solution(\"2 0 4\\n1 2\\n3 1\") == \"impossible\"\nassert solution(\"2 0 5\\n1 2\\n3 1\") == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == 'impossible'\nassert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == '3'\n'''\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 0 1\") == \"impossible\"\nassert solution(\"4 0 1\") == \"impossible\"\n\nimport pytest\nimport io\nimport sys\nimport math\nfrom contextlib import redirect_stdout"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 0 1') == 'impossible'\nassert solution('3 1 1') == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 0 1\") == \"impossible\"\nassert solution(\"4 0 1\") == \"3\"\nassert solution(\"4 0 1\") == \"impossible\"\nassert solution(\"4 0 2\") == \"3\"\nassert solution(\"4 0 2\") == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 0 1\") == \"impossible\"\nassert solution(\"4 0 2\") == \"impossible\"\nassert solution(\"4 0 3\") == \"2\"\nassert solution(\"4 1 2\") == \"impossible\"\nassert solution(\"4 1 3\") == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == '3'\nassert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == 'impossible'\nassert solution('''\n5 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == 'impossible'\nassert solution('''\n6 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == 'impossible'\nassert solution('''\n6 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\nN 1 1\nC 1 1\n''') == '1'\n'''\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 0 1\") == \"impossible\"\nassert solution(\"3 0 1\") == \"2\""
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"()\") == 1\nassert solution(\"((())\") == 3\nassert solution(\"(()())\") == 4\nassert solution(\"(()(()))\") == 5\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n())\n((()\n)()\nSample Output:\n10\n''') == '10'\n\nassert solution('''\n2\n(()\n)()\nSample Output:\n6\n''') == '6'\n\nassert solution('''\n1\n()\nSample Output:\n2\n''') == '2'\n\nassert solution('''\n4\n(())\n()()\n()()\nSample Output:\n10\n''') == '10'\n\nassert solution('''\n5\n(())\n()()\n())(\nSample Output:\n6\n''') == '6'"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == 0, 'Empty'\nassert solution(\"()\") == 1, '(\")\"'\nassert solution(\"((()\") == 3, '(((()'\nassert solution(\"(()((()))\") == 8, '(((()((()))'"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == 0\nassert solution(\"(\") == 1\nassert solution(\"())\") == 1\nassert solution(\"((()\") == 2\nassert solution(\")()())\") == 4\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(')()') == 2\nassert solution('()())') == 5\nassert solution('()()())') == 6\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n())\n((()\n''') == 10\nassert solution('''4\n()()()\n(())()()\n''') == 12\nassert solution('''5\n()()\n((()\n()())\n(()(\n()()\n''') == 17\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 10, \"TEST\"\nassert solution('(())') == 6, \"TEST\"\nassert solution('))') == 4, \"TEST\"\nassert solution('(()(()))((())') == 14, \"TEST\""
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(')') == ''\nassert solution('(((') == ''\nassert solution(')())') == 6\nassert solution('))(((((') == 6\nassert solution('(()(()(()(') == 6\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n((()\n)()\n''') == 10\nassert solution('''\n(()()\n)())\n''') == 5\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('())') == '0'\nassert solution('((()') == '1'\nassert solution(')()') == '2'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '8333'\nassert solution('9') == '70000'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\nassert solution('8\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\nassert solution('13\\n3774 h\\n4559 h\\n1811 h\\n2133 h\\n134 h\\n4654 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\nassert solution('12\\n3774 h\\n4559 h\\n1811 h\\n2133 h\\n134 h\\n4654 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\nassert solution('10\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n''') == '85293'\n\nimport itertools\nfrom typing import Generator\n\nfrom utils import timing\n\nLIMIT = 10000"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('9') == '85293'\nassert solution('1 1') == '0'\nassert solution('1 4') == '1'\nassert solution('1 6') == '1'\nassert solution('2 3') == '0'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n10\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\") == \"85293\""
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\") == \"85293\"\n\"\"\")"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"85293\"\n\"\"\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\nassert solution('8\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '21681'\nassert solution('9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '41085'\nassert solution('10\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85453'\nassert solution('11\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '98244'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n    9\n    377 a\n    455 h\n    180 a\n    211 a\n    134 a\n    46 h\n    111 h\n    213 h\n    17 a\n    15\n    1 2\n    1 4\n    1 6\n    2 3\n    2 4\n    2 5\n    3 5\n    4 6\n    4 7\n    4 9\n    5 7\n    5 8\n    6 9\n    7 9\n    7 8\n\"\"\") == \"85293\"\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 5\\n2 3\\n1 3\\n2 3\\n1 4\\n2 4') == '1'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\nassert solution('10 10\\n1 2\\n1 4\\n2 3\\n3 4\\n5 4\\n4 5\\n5 6\\n6 4\\n5 7\\n7 4\\n6 6\\n5 7\\n6 5\\n7 5\\n6 7\\n7 6\\n5 6\\n6 5\\n7 5\\n6 6\\n5 7\\n6 5\\n7 5\\n6 6\\n7 6\\n5 7\\n7 6\\n5 6\\n7 7\\n7 5\\n5 7\\n7 6\\n6 5\\n7 5\\n7 6\\n6 5\\n6 7\\n5 7\\n6 7\\n7 5\\n6 5\\n7 5\\n6 7\\n7 6\\n7 7\\n5 6\\n6 5\\n7 5\\n7 6\\n6 5\\n7 6\\n6 7\\n7 5\\n7 6\\n7 7\\n6 7\\n7 5\\n7 6\\n7 6\\n6 7\\n7 5\\n7 6\\n6 7\\n5 6\\n6 7\\n7 5\\n7 6\\n7 6\\n7 7\\n7 7\\n7 6\\n6 6\\n6 5\\n7 6\\n7 6\\n5 7\\n7 6\\n6 7\\n7 5\\n5 7\\n7 5\\n6 7\\n7 6\\n6 5\\n5 7\\n7 6\\n6 7\\n6 5\\n7 6\\n7 6\\n7 6\\n7 5\\n7 6\\n7 6\\n6 6\\n6 5\\n7 6\\n7 6\\n6 5\\n7 6\\n7 6\\n7 6\\n6 7\\n7 7\\n7 5\\n7 6\\n7 6\\n7 6\\n7 6\\n7 7\\n7 7\\n7 5\\n7 6\\n7 6\\n7 5\\n7 6\\n7 5\\n7 6\\n7 6\\n7 5\\n7 7\\n7 5\\n7 7\\n7 6\\n7 5\\n7 6\\n7 5\\n7 5\\n7 6\\n7 5\\n7 6\\n7 6\\n6 7\\n7 5\\n7 5\\n7 6\\n7 5\\n7 5\\n7 6\\n7 5\\n7 5\\n7 5\\n7 6\\n7 6\\n7 5\\n7 5\\n7 5\\n7 5\\n7 6\\n7 6\\n7 5\\n7 5\\n7 5\\n7 5\\n7 6\\n7 6\\n7 5\\n7 5\\n7 5\\n7 5\\n7 6\\n7 6\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 6\\n7 6\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 6\\n7 6\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 6\\n7 6\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 6\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 6\\n7 6\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 6\\n7 6\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\n7 5\\"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"4 4\") == \"4\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '5'"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1\\n1 3\\n2 3\\n1 4\\n2 4\\n') == '5'\nassert solution('10 10\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n') == '15'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\n'''"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '1'\nassert solution('3 4') == '5'\nassert solution('5 5') == '1'\nassert solution('4 5') == '1'\nassert solution('6 5') == '1'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5\n1 2\n1 3\n2 3\n1 4\n2 4\n''') == '5'\nprint(solution('''\n4 5\n1 2\n1 3\n2 3\n1 4\n2 4\n'''))"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\n\n'''\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"5100\"\nassert solution(input_stdin='''5\n2 caterpillar 3 popo 7 fly\n1 butterfly 1 penguin 1 aaabaaajss\n2 goose 2 popup 1 pupa\n3 rabbit 1 cup 1 sss\n3 mouse 1 electromouse 1 rat\n5 dog\n''') == \"4200\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"5100\""
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly''') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n\"\"\") == \"5100\"\n\"\"\"\n--- Day 9: Encoding Error ---\nYou have a function, which you call encode. For example:\n\n>>> encode(\"a\")\n'1'\n>>> encode(\"ab\")\n'11'\n>>> encode(\"aba\")\n'111'\n\nIt takes a single string parameter, and returns a string.\n\nThe returned string should be encoded such that each digit is an ASCII value. For example:\n\n>>> decode(\"11\")\n'ab'\n>>> decode(\"111\")\n'aba'\n>>> decode(\"1111\")\n'a'\n\nIn other words, the digit \"1\" is represented by the ASCII value 48, \"a\" by the ASCII value 97, \"2\" by ASCII value 100, and so on. For example, \"111\" is \"b\" in ASCII.\n\nYour code should return a value of the type str.\n\nYour code should be able to handle input that is outside the set of possible ASCII values (e.g. non-ASCII digits).\n\nIn other words, your function should not crash when it encounters an ASCII value that does not belong to the set of possible ASCII values.\n\nWhat is the length of the longest string your function can represent?\n\"\"\""
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '9000'\nassert solution('7') == '19500'\nassert solution('5') == '3500'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n3 caterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n7 mouse 1 electromouse 5 rat') == '5100'\nassert solution('10\\n5 petal 3 flower 4 flower 5 flower\\n1 flower 1 flower 2 flower 3 flower 4 flower 5 flower 6 flower 7 flower 8 flower 9 flower 10 flower 11 flower 12 flower 13 flower 14 flower 15 flower 16 flower 17 flower 18 flower 19 flower 20 flower 21 flower 22 flower 23 flower 24 flower 25 flower 26 flower 27 flower 28 flower 29 flower 30 flower 31 flower 32 flower 33 flower 34 flower 35 flower 36 flower 37 flower 38 flower 39 flower 40 flower 41 flower 42 flower 43 flower 44 flower 45 flower 46 flower 47 flower 48 flower 49 flower 50 flower 51 flower 52 flower 53 flower 54 flower 55 flower 56 flower 57 flower 58 flower 59 flower 60 flower 61 flower 62 flower 63 flower 64 flower 65 flower 66 flower 67 flower 68 flower 69 flower 70 flower 71 flower 72 flower 73 flower 74 flower 75 flower 76 flower 77 flower 78 flower 79 flower 80 flower 81 flower 82 flower 83 flower 84 flower 85 flower 86 flower 87 flower 88 flower 89 flower 90 flower 91 flower 92 flower 93 flower 94 flower 95 flower 96 flower 97 flower 98 flower 99 flower 100 flower 101 flower 102 flower 103 flower 104 flower 105 flower 106 flower 107 flower 108 flower 109 flower 110 flower 111 flower 112 flower 113 flower 114 flower 115 flower 116 flower 117 flower 118 flower 119 flower 120 flower 121 flower 122 flower 123 flower 124 flower 125 flower 126 flower 127 flower 128 flower 129 flower 130 flower 131 flower 132 flower 133 flower 134 flower 135 flower 136 flower 137 flower 138 flower 139 flower 140 flower 141 flower 142 flower 143 flower 144 flower 145 flower 146 flower 147 flower 148 flower 149 flower 150 flower 151 flower 152 flower 153 flower 154 flower 155 flower 156 flower 157 flower 158 flower 159 flower 160 flower 161 flower 162 flower 163 flower 164 flower 165 flower 166 flower 167 flower 168 flower 169 flower 170 flower 171 flower 172 flower 173 flower 174 flower 175 flower 176 flower 177 flower 178 flower 179 flower 180 flower 181 flower 182 flower 183 flower 184 flower 185 flower 186 flower 187 flower 188 flower 189 flower 190 flower 191 flower 192 flower 193 flower 194 flower 195 flower 196 flower 197 flower 198 flower 199 flower 200 flower 201 flower 202 flower 203 flower 204 flower 205 flower 206 flower 207 flower 208 flower 209 flower 210 flower 211 flower 212 flower 213 flower 214 flower 215 flower 216 flower 217 flower 218 flower 219 flower 220 flower 221 flower 222 flower 223 flower 224 flower 225 flower 226 flower 227 flower 228 flower 229 flower 230 flower 231 flower 232 flower 233 flower 234 flower 235 flower 236 flower 237 flower 238 flower 239 flower 240 flower 241 flower 242 flower 243 flower 244 flower 245 flower 246 flower 247 flower 248 flower 249 flower 250 flower 251 flower 252 flower 253 flower 254 flower 255 flower 256 flower 257 flower 258 flower 259 flower 260 flower 261 flower 262 flower 263 flower 264 flower 265 flower 266 flower 267 flower 268 flower 269 flower 270 flower 271 flower 272 flower 273 flower 274 flower 275 flower 276 flower 277 flower 278 flower 279 flower 280 flower 281 flower 282 flower 283 flower 284 flower 285 flower 286 flower 287 flower 288 flower 289 flower 290 flower 291 flower 292 flower 293 flower 294 flower 295 flower 296 flower 297 flower 298 flower 299 flower 300 flower 301 flower 302 flower 303 flower 304 flower 305 flower 306 flower 307 flower 308 flower 309 flower 310 flower 311 flower 312 flower 313 flower 314 flower 315 flower 316 flower 317 flower 318 flower 319 flower 320 flower 321 flower 322 flower 323 flower 324 flower 325 flower 326 flower 327 flower 328 flower 329 flower 330 flower 331 flower 332 flower 333 flower 334 flower 335 flower 336 flower 337 flower 338 flower 339 flower 340 flower 341 flower 342 flower 343 flower 344 flower 345 flower 346 flower 347 flower 348 flower 349 flower 350 flower 351 flower 352 flower 353 flower 354 flower 355 flower 356 flower 357 flower 358 flower 359 flower 360 flower 361 flower 362 flower 363 flower 364 flower 365 flower 366 flower 367 flower 368 flower 369 flower 370 flower 371 flower 372 flower 373 flower 374 flower 375 flower 376 flower 377 flower 378 flower 379 flower 380 flower 381 flower 382 flower 383 flower 384 flower 385 flower 386 flower 387 flower 388 flower 389 flower 390 flower 391 flower 392 flower 39"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n''') == '5100'\nassert solution('''1\n3\n2\n3\n4\n5\n2\n''') == '6'\nassert solution('''3\n5\n2\n3\n4\n5\n2\n''') == '7'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n3 caterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n7 mouse 1 electromouse 5 rat\\n') == '5100'\nassert solution('6\\n4 piglet 4 rat 4 zebra 4 hedgehog 4 fox 4 dragon\\n') == '5100'\nassert solution('15\\n20 cat 20 dog 20 rabbit 20 chicken 20 snail 20 horse 20 zebra 20 mouse 20 tiger 20 wolf 20 goose 20 crab 20 bat 20 snail 20 horse 20 fox 20 snake 20 rabbit 20 turtle 20 zebra 20 tiger 20 fox 20 rat 20 rabbit 20 goat 20 fox 20 snail 20 chicken 20 rat 20 wolf 20 goat 20 pig 20 dog 20 duck 20 pig 20 sheep 20 horse 20 wolf 20 chicken 20 cat 20 dog 20 rabbit 20 chicken 20 snake 20 fox 20 goat 20 tiger 20 snake 20 wolf 20 duck 20 pig 20 dog 20 goat 20 fox 20 cat 20 rabbit 20 dog 20 wolf 20 rabbit 20 goat 20 fox 20 snake 20 rabbit 20 duck 20 cat 20 dog 20 duck 20 wolf 20 goat 20 rabbit 20 goat 20 fox 20 rabbit 20 snake 20 goat 20 fox 20 rabbit 20 rabbit 20 fox 20 rabbit 20 goat 20 fox 20 dog 20 goat 20 rabbit 20 cat 20 goat 20 fox 20 sheep 20 dog 20 rabbit 20 tiger 20 wolf 20 cat 20 cat 20 rabbit 20 cow 20 goat 20 fox 20 sheep 20 chicken 20 goat 20 fox 20 fox 20 chicken 20 rabbit 20 goat 20 rabbit 20 dog 20 goat 20 rabbit 20 rabbit 20 fox 20 goat 20 goat 20 snake 20 rabbit 20 fox 20 goat 20 dog 20 goat 20 rabbit 20 duck 20 goat 20 dog 20 rabbit 20 dog 20 rabbit 20 wolf 20 cat 20 goat 20 tiger 20 rabbit 20 snake 20 rabbit 20 fox 20 goat 20 chicken 20 rabbit 20 wolf 20 fox 20 goat 20 tiger 20 wolf 20 goat 20 fox 20 cat 20 rabbit 20 dog 20 rabbit 20 rabbit 20 snake 20 goat 20 fox 20 dog 20 goat 20 fox 20 rabbit 20 goat 20 dog 20 wolf 20 rabbit 20 goat 20 rabbit 20 dog 20 goat 20 goat 20 fox 20 goat 20 dog 20 goat 20 fox 20 rabbit 20 goat 20 goat 20 fox 20 rabbit 20 dog 20 goat 20 goat 20 goat 20 fox 20 dog 20 goat 20 fox 20 goat 20 fox 20 rabbit 20 goat 20 goat 20 fox 20 rabbit 20 goat 20 goat 20 goat 20 fox 20 rabbit 20 goat 20 goat 20 fox 20 rabbit 20 goat 20 goat 20 fox 20 goat 20 fox 20 goat 20 rabbit 20 goat 20 goat 20 fox 20 rabbit 20 goat 20 goat 20 goat 20 fox 20 goat 20 fox 20 goat 20 goat 20 goat 20 fox 20 rabbit 20 goat 20 goat 20 fox 20 goat 20 goat 20 goat 20 goat 20 goat 20 fox 20 goat 20 goat 20 goat 20 fox 20 goat 20 goat 20 goat 20 goat 20 fox 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 fox 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat 20 goat"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n3 caterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n7 mouse 1 electromouse 5 rat\\n1500 rat') == '5100'\nassert solution('10\\n1 boy 8 pirate 8 cat 6 dog 3 horse 1 water 4 horse 5 rock\\n1 rock 2 water 2 cat 2 dog 2 horse 2 horse 4 man 2 horse 5 dog 4 horse\\n3 water 1 goat 2 cow 1 cow 5 man 2 cow 3 horse\\n1 boy 1 cat 2 cat 5 dog 1 dog 4 dog 3 dog 5 dog 6 dog\\n3 cat 1 dog 1 cow 3 cow 5 cow 6 cow 2 horse 5 horse 6 horse 2 horse\\n5 man 2 horse 5 man 6 man 1 dog 2 dog 4 dog 3 horse 1 horse 4 horse 5\\n4 horse 6 horse 7 horse 8 horse 5 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 5 horse 2 horse 4 horse 1 horse 3 horse 3 horse 5 horse 6 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n4 horse 7 horse 1 horse 3 horse 2 horse 4 horse 6 horse 5 horse 8 horse\\n2 horse 1 horse 2 horse 4 horse 3 horse 5 horse 6 horse 7 horse 8 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2 horse\\n4 horse 5 horse 6 horse 2 horse 3 horse 4 horse 1 horse 3 horse 2 horse\\n3 horse 1 horse 2 horse 3 horse 4 horse 5 horse 6 horse 1 horse 2"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n''') == '5100'\nassert solution('''\n6\n1 caterpillar 1 pupa 1 butterfly\n2 dove 1 pigeon 1 aaabaaajss\n3 mouse 1 electromouse 5 rat\n4 butterfly 2 butterfly 1 electromouse\n5 butterfly 3 mouse 3 electromouse 5 rat\n6 butterfly 4 rabbit 5 aaabaaajss\n7 rabbit 6 rabbit 3 rabbit 1\n''') == '5300'\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\nassert solution(\"\"\"\n3\n0\n1\n2\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\""
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nassert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nassert solution('4\\n0\\n1 1\\n2 2 3\\n3 3\\n4 4\\n3 3\\n4 4\\n3 3\\n4 4\\n3 3\\n4 4\\n3 3\\n4 4\\n3 3\\n4 4\\n') == '-1\\n1\\n2\\n3\\n1\\n4\\n5\\n'"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\nassert solution('8\\n0\\n1\\n2\\n3\\n4\\n5\\n6\\n7') == '7\\n0\\n1\\n2\\n3\\n4\\n5\\n6'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3\n0\n1\n2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n0\n1\n2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n0\n1\n2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6 1 2 3 1 4 5'\nprint(solution(open(0).read()))"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6', 'First sample tests'\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '8', 'Second sample tests'\nassert solution('''\n3\n1 2\n1 2\n2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '8', 'Third sample tests'\nassert solution('''\n3\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '-1', 'Fourth sample tests'\nassert solution('''\n3\n2\n1\n3\n1\n4\n2\n3\n5\n''') == '5', 'Fifth sample tests'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '4\\n' +\n    '0\\n' +\n    '1 1\\n' +\n    '1 1\\n' +\n    '2 2 3\\n' +\n    '1 4\\n' +\n    '8\\n' +\n    '1\\n' +\n    '2\\n' +\n    '3\\n' +\n    '1\\n' +\n    '4\\n' +\n    '2\\n' +\n    '3\\n' +\n    '5'\n) == '6\\n' +\n    '1\\n' +\n    '2\\n' +\n    '3\\n' +\n    '1\\n' +\n    '4\\n' +\n    '5\\n'"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == -1\nassert solution(\"1\") == 1\nassert solution(\"1 1\") == -1\nassert solution(\"1 1 1\") == 1\nassert solution(\"1 1 1 1\") == 1\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"\"\"6\n1\n2\n3\n1\n4\n5\"\"\"\n\nassert solution(\"\"\"\n10\n0\n1\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"\"\"11\n1\n2\n3\n1\n4\n5\"\"\"\n\nassert solution(\"\"\"\n100\n0\n1\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"\"\"101\n1\n2\n3\n1\n4\n5\"\"\"\n\nassert solution(\"\"\"\n10000\n0\n1\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"\"\"10001\n1\n2\n3\n1\n4\n5\"\"\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == output"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 5\n1 2 1 2 1\n4\n1 2 O 3\n1 2 R 5\n2 1 O 3\n1 2 R 6''') == '10'\nassert solution('''3 5\n1 2 O 3\n2 1 O 3\n1 2 O 2\n2 1 O 3''') == '17'\nassert solution('''4 5\n1 2 O 3\n2 1 O 3\n1 2 R 5\n2 1 O 3''') == '25'\nassert solution('''10\n1 2 O 3\n2 1 O 3\n1 2 O 2\n2 1 O 3''') == '0'\nassert solution('''5\n1 2 O 3\n2 1 O 3\n1 2 O 2\n2 1 O 3''') == '6'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"10\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n1 2 R 5\nSample Input 2:\n2 10\n1 2 1 2 1\n4\n1 2 O 3\n1 2 R 5\n1 2 O 6\n1 2 R 4\n1 2 R 5\n1 2 R 4\n1 2 O 7\n1 2 R 8\nSample Output 2:\n9\n''') == '10'\nassert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n1 2 R 5\n1 2 O 6\n1 2 R 4\n1 2 O 7\n1 2 R 8\nSample Input 3:\n2 3\n1 2 O 1\n1 2 R 1\n1 2 O 2\n1 2 R 2\nSample Output 3:\n1\n''') == '1'\nassert solution('''\n3 3\n1 2 O 1\n1 2 R 1\n1 2 O 2\n1 2 R 2\nSample Input 4:\n3 5\n1 2 O 1\n1 2 R 1\n1 2 O 2\n1 2 R 2\n1 2 O 3\n1 2 R 3\nSample Output 4:\n9\n''') == '9'\nassert solution('''\n3 3\n1 2 O 1\n1 2 R 1\n1 2 O 2\n1 2 R 2\nSample Input 5:\n3 5\n1 2 O 1\n1 2 R 1\n1 2 O 2\n1 2 R 2\n1 2 O 3\n1 2 R 3\nSample Output 5:\n10\n''') == '10'"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5\\n1 2 1 2 1\\n4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '10'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1 2 1\\n4') == '10'\nassert solution('2 5\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '20'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 5\\n\"\n    \"1 2 1 2 1\\n\"\n    \"4\\n\"\n    \"1 2 R 6\\n\"\n    \"1 2 O 3\\n\"\n    \"2 1 O 3\\n\"\n    \"1 2 R 5\\n\"\n) == \"10\"\nprint(solution(\n    \"2 5\\n\"\n    \"1 2 1 2 1\\n\"\n    \"4\\n\"\n    \"1 2 R 6\\n\"\n    \"1 2 O 3\\n\"\n    \"2 1 O 3\\n\"\n    \"1 2 R 5\\n\"\n))"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1 2 1 2 1\\n4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n\") == \"10\"\nassert solution(\"2 5\\n1 2 1 2 1\\n4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n\") == \"8\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3\\n0 1\\n1 2\\n2 3') == '1'\nassert solution('9 8\\n0 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9') == '1'\nassert solution('3 2\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('2 1\\n1 2') == '2'\nassert solution('1 3\\n3 1\\n1 2') == '3'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n1 2 3') == '1'\nassert solution('6 6\\n0 1 2 3 4 5\\n0 1 3 4\\n0 3 2 1\\n0 2 1 3\\n0 1 3 2\\n0 2 1\\n0 3\\n1 2 3 4 5\\n2 3 4 5 1\\n1 2 3 5 4\\n1 3 4 5 2\\n3 4 5 2 1\\n2 3 4 1 5\\n1 3 5 4 2\\n3 4 1 2 5\\n2 4 5 1 3\\n1 5 3 4 2\\n3 4 1 5 2\\n2 5 1 4 3\\n1 5 3\\n1 4\\n0\\n') == '6'\nassert solution('4 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n') == '1'"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n1 2\n2 3\n''') == \"1\"\nassert solution('''\n4 4\n1 2\n2 3\n3 4\n''') == \"2\"\nassert solution('''\n4 3\n0 1\n1 2\n2 3\n''') == \"1\"\nassert solution('''\n3 3\n0 1\n1 2\n2 3\n''') == \"2\"\nassert solution('''\n10 10\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n0 11\n1 12\n2 13\n3 14\n4 15\n5 16\n6 17\n7 18\n8 19\n9 20\n10 21\n11 22\n12 23\n13 24\n14 25\n15 26\n16 27\n17 28\n18 29\n19 30\n20 31\n21 32\n22 33\n23 34\n24 35\n25 36\n26 37\n27 38\n28 39\n29 40\n30 41\n31 42\n32 43\n33 44\n34 45\n35 46\n36 47\n37 48\n38 49\n39 50\n40 51\n41 52\n42 53\n43 54\n44 55\n45 56\n46 57\n47 58\n48 59\n49 60\n50 61\n51 62\n52 63\n53 64\n54 65\n55 66\n56 67\n57 68\n58 69\n59 70\n60 71\n61 72\n62 73\n63 74\n64 75\n65 76\n66 77\n67 78\n68 79\n69 80\n70 81\n71 82\n72 83\n73 84\n74 85\n75 86\n76 87\n77 88\n78 89\n79 90\n80 91\n81 92\n82 93\n83 94\n84 95\n85 96\n86 97\n87 98\n88 99\n89 100\n''') == \"2\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '1'\nassert solution('4 3') == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4\\n0 1\\n1 2\\n2 3') == '1'\nassert solution('4 4\\n0 1\\n1 2\\n2 3\\n3 4') == '2'\n\nfrom collections import deque\nfrom collections import defaultdict"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == \"1\"\n\"\"\""
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 0') == '1'\nassert solution('4 3\\n0 1\\n1 2\\n2 3') == '4'"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 1\n0 1\n1 2\n2 3\n3 4\n''') == '4'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n0 1\n1 2\n2 3\n3 0''') == '1'\nassert solution('''\n5 6\n0 1\n1 2\n2 3\n3 4\n4 0\n''') == '5'\nassert solution('''\n4 3\n0 1\n1 2\n2 3\n3 0\n4 0\n''') == '2'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '0.333333333333'\nassert solution('6') == '0.909090909091'\n\"\"\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0.962962962963'"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0.1'\nassert solution('12') == '0.12345678901234567890'"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0.962962962963'\nassert solution('2') == '0.849837070958'\n\nclass Solution:\n    def solution(self, a):\n        return len(set(a)) == len(a)"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2\n2 1\n2 3\n3 1''') == '0.962962962963'\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '0.962962962963'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0.33333'\nassert solution('4') == '0.16667'\nassert solution('12') == '0.16667'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"0.962962962963\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0.962962962963'\n\n\"\"\"\nfrom math import exp\n\nN = int(input())\nprint('%.8f' % (exp(1) ** (N) / (exp(1) ** N - 1)))\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '0.962962962963'\nassert solution('10000') == '0.73770751198'"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '0 0\\n40000000 0\\n0 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '2 0\\n4 0\\n4 4\\n3 0\\n3 4\\n'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0 0'\nassert solution('5') == '0 0 1'\nassert solution('10') == '0 0 1 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0 0'\nassert solution('2') == '0 40000000'\nassert solution('3') == '40000000 0'\n\n\nimport sys\nfrom collections import Counter\n\nN = int(input())"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0 0\\n40000000 0'\nassert solution('3') == '0 0 40000000'\nassert solution('4') == '0 40000000 0 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0 0\\n40000000 0\\n0 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '0 0\\n40000000 0\\n0 40000000\\n'\nassert solution('1000') == '0 0\\n40000000 0\\n0 40000000\\n'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0 0\\n'\nassert solution('4') == '40000000 0\\n'\nassert solution('5') == '0 40000000\\n'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1000000 1000000\n0 1000000\n''') == '0 0\\n40000000 0\\n0 40000000\\n'''\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '0 0\\n' * 5\nassert solution('3') == '0 0\\n' * 3"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"1 1 1 1\") == \"impossible\"\nassert solution(\"6 8 7 1\") == \"2\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5 5 2') == '1'\nassert solution('4 6 8 8') == '2'\nassert solution('3 4 7 5') == '0'"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\nprint(solution())"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('4 4 4 4') == '0'\nassert solution('3 5 5 2 4') == '3'\n\"\"\"\nimport sys"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('12 3 4 5') == '1'\nassert solution('-12 3 4 5') == 'impossible'\nassert solution('100 2 3 4 5') == 'impossible'"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('4 4 4 4') == '2'\nassert solution('2 3 4 4') == 'impossible'\n'''\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('2 4 3 8') == '1'\nassert solution('12 13 14 19') == 'impossible'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 5 5 2\"\n) == \"1\"\n\nassert solution(\n    \"3 5 5 2 8\"\n) == \"impossible\"\n\nassert solution(\n    \"4 5 5 2 4 4\"\n) == \"2\"\n\nassert solution(\n    \"0 0 0 0 0\"\n) == \"impossible\"\n\nassert solution(\n    \"0 1 2 3\"\n) == \"impossible\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 5 2') == \"1\"\nassert solution('2 8 5 2') == \"1\"\nassert solution('1 2 3 4') == \"Impossible\"\nassert solution('2 2 2') == \"2\"\nassert solution('2 2 3') == \"2\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3 5 5 2\") == \"2*5-3+2\"\nassert solution(\"1 4 8 4 4\") == \"1*4*8*4*4\"\nassert solution(\"5 2 1 4\") == \"5*2+1*4\"\nassert solution(\"1 4 8 4 4\") == \"1*4*8*4*4\"\nassert solution(\"5 2 1 4\") == \"5*2+1*4\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '2'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 3 5 5') == '2'\nassert solution('10000000000 5') == '10000000000'\nassert solution('15 10 10 10') == '15'\nassert solution('1000000000000000 20') == '1000000000000000'\nassert solution('1000000000000000 20') == '1000000000000000'"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"20 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == \"2\"\nassert solution(\"10 0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == \"1.6\"\nassert solution(\"10 -20 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == \"0\"\nassert solution(\"4 3 3 3\\n0 0 0\\n0 0 0\\n0 0 0\") == \"2\""
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"20 3 5 5\") == \"2\"\nassert solution(\"2 2 3\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    20 3 5 5\n    0 0 0\n    0 -10 0\n    30 0 0\n    0 0 0\n    \"\"\") == \"2\"\nassert solution(\n    \"\"\"\n    20 3 5 5\n    -4 0 0\n    0 0 0\n    -10 0 0\n    0 0 0\n    \"\"\") == \"0\"\nassert solution(\n    \"\"\"\n    20 3 5 5\n    0 0 0\n    0 -10 0\n    -30 0 0\n    0 0 0\n    \"\"\") == \"0\"\nassert solution(\n    \"\"\"\n    20 3 5 5\n    0 0 0\n    0 -10 0\n    0 0 0\n    30 0 0\n    \"\"\") == \"3\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0\nSample Input:\n20 3 5 5\n-2 -3 0\n-4 -1 0\n-1 -2 0\n-6 0 0\nSample Output:\n2\n''') == '1.5000000000000004'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 1 0\") == \"2\"\nassert solution(\"6 2 0\") == \"0\"\nassert solution(\"6 4 0\") == \"2\"\nassert solution(\"6 4 0\") == \"0\"\nassert solution(\"8 4 0\") == \"2\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 5\\n0 0 0\\n30 0 0\\n0 0 0\\n0 0 0') == '2'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('20 3 5 5') == '2'\nassert solution('6 1 2') == '1'\n\n'''"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 5') == '2'\nassert solution('5 5 0') == '0'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('123') == '12 14'\nassert solution('124') == '12 14'\nassert solution('12345') == '12 14'\nassert solution('123456') == '12 14'\nassert solution('1234567') == '12 14'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '10'\nassert solution('12') == '12'\nassert solution('13') == '14'\nassert solution('14') == '14'\nassert solution('-14') == '-14'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('13') == '12 14'\nassert solution('123456789') == '123456789'\nassert solution('0') == '0'\nassert solution('-123') == '-123'\nassert solution('-123456789') == '-123456789'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('13') == '12 14'\nassert solution('111') == '11 12'"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('10') == '10'\nassert solution('12') == '11'\nassert solution('1011') == '10'\nassert solution('100100') == '101'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"5 7\"\nassert solution(\"6 7\") == \"7 6\"\nassert solution(\"5 9\") == \"9 5\"\nassert solution(\"10 5\") == \"5 10\"\nassert solution(\"8 3\") == \"8 7\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 4') == '1 2'\nassert solution('5\\n6 2 3 9 8') == '6 8 9'\nassert solution('0\\n0') == '0'\n'''\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '10'\nassert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('13') == '14'\nassert solution('22') == '21'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"11\"\nassert solution(\"1101\") == \"1 100\"\nassert solution(\"1000000000\") == \"1 100000000\"\nassert solution(\"000010000\") == \"1 1000000\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 0 0') == '0'\nassert solution('1 0 1') == '1'\nassert solution('3 0 1') == '1'\nassert solution('3 0 0') == '0'\nassert solution('3 0 1') == '2'"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n0 0 0\n0 0 1\n0 0 0\n0 0 0\n''') == '0'\nassert solution('''\n4\n0 0 1\n0 1 0\n0 1 0\n0 0 1\n''') == '1'\nassert solution('''\n4\n0 0 1\n0 1 0\n0 0 0\n0 0 1\n''') == '3'\nassert solution('''\n4\n0 0 1\n0 1 0\n1 0 0\n0 0 1\n''') == '2'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('9\\n2 2 2\\n2 0 0\\n2 0 1\\n3 2 1\\n3 2 1\\n') == '1'\nassert solution('3\\n1 0 0\\n1 0 1\\n1 0 1\\n') == '2'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('5\\n1 1 0\\n1 1 1\\n3 1 1\\n3 1 0\\n3 1 1\\n') == '3'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '0'\nassert solution('1') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 0 0') == '1'\nassert solution('3\\n1 0 1') == '0'\nassert solution('4\\n3 0 0') == '0'\nassert solution('6\\n3 0 1') == '2'\nassert solution('10\\n3 0 1') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '1'\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO(input())\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n3 0 0\\n3 0 1') == '1'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n3 0 0\\n3 0 1') == '2'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n3 0 0\\n3 0 1') == '3'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n3 0 0\\n3 0 1') == '4'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n\") == \"0\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"35\"\nassert solution(\"5\\n2 2 2 2 2 2\\n2 2 2 2 2 2\\n2 2 2 2 2 2\\n2 2 2 2 2 2\\n2 2 2 2 2 2\\n\") == \"13\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"0\"\nassert solution(\"5\\n1 2 1 2 1 2\\n1 2 1 2 1 2\\n1 2 1 2 1 2\\n1 2 1 2 1 2\\n1 2 1 2 1 2\\n\") == \"13\"\n\"\"\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 3\n1 2\n3 4\n3 2\n2 1\n''') == '2 2\\n1 3\\n2 1\\n2 1\\n'''\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == '1 2\\n2 1\\n2 3\\n3 2'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 3]) == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n1 1\n1 2\n2 3\n\"\"\") == \"\"\"\n1 1\n2 2\n1 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1 1\\n\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([2, 3]) == \"1 1\\n2 2\"\nassert solution([5, 3]) == \"2 1\\n1 2\\n1 3\\n2 1\\n2 2\""
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\nassert solution('5 5') == '1 2 4 1 4\\n2 1 3 2\\n1 3 4 1\\n2 4 3 2\\n1 4 1 2'\n\"\"\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == \"3.33333333\"\nassert solution(\"3 4\") == \"1.25\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n0 10 1\n0 10 1\n''') == '3.33333333'\nassert solution('''\n2\n0 10 1\n0 10 1\n''') == '3.33333333'\nassert solution('''\n2\n0 10 1\n1 1 1\n''') == '4.000000000'\nassert solution('''\n2\n0 10 1\n1 1 1\n''') == '2.416666667'\nassert solution('''\n2\n1 10 1\n1 1 1\n''') == '4.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 10\n0 10 1\n0 10 1\n0 10 1\n\"\"\") == \"3.33333333\"\nassert solution(\"\"\"\n2 2\n0 0\n1 1\n\"\"\") == \"1.0\"\nassert solution(\"\"\"\n2 2\n0 1\n1 1\n\"\"\") == \"1.0\""
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 10\\n0 10 1\") == \"3.33333333\"\nassert solution(\"3 10\\n0 10 1\\n0 10 1\") == \"3.33333333\"\nassert solution(\"5 10\\n0 10 1\\n0 10 1\\n0 10 1\\n0 10 1\") == \"3.33333333\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5 1\") == \"4.0\"\nassert solution(\"2 2 1\") == \"1.0\"\nassert solution(\"3 4 3\") == \"2.0\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 4\n0 10 1\n0 10 1\n''') == '3.33333333'\nassert solution('''\n2 2\n1 1\n''') == '2.5'\nassert solution('''\n3 4\n0 10 1\n0 10 1\n0 10 1\n''') == '1.0'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n0 10 1\n0 10 1\n''') == '3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2.5\"\nassert solution(\"2 100\") == \"5.5\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"0.5\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"4 1\") == \"1.33333333\"\nassert solution(\"3 10\") == \"0.6\"\nassert solution(\"4 10\") == \"0.6\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n0 10 1\n0 10 1\n0 10 1''') == '3.33333333'\nassert solution('''3\n0 10 1\n0 10 1\n0 10 1''') == '3.33333333'\nassert solution('''2\n0 10 1\n0 10 1''') == '1.0'\nassert solution('''2\n0 10 1\n0 10 1''') == '0.0'\nassert solution('''10\n1 10 1\n1 10 1\n1 10 1''') == '1.0'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '3\\n'\n    '3 3 2\\n'\n) == '1'\n\nprint(\n    solution(\n        '10\\n'\n        '4 1 2 1 2\\n'\n    )\n)\n\nassert print(\n    solution(\n        '10\\n'\n        '4 1 2 1 2\\n'\n    )\n) == '3'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('10') == '3'\nassert solution('1000000000') == '977'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n3 3 2') == '1'\nassert solution('1\\n4 4 4') == '0'\nassert solution('4\\n2 2 4 3') == '1'\nassert solution('6\\n3 1 5 2 3 2') == '1'"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3 3 2\\n') == '1'\nassert solution('3\\n1 2 3\\n') == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\n2 1 2\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n2\n3 3 2\n\"\"\") == \"2\""
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('10') == '1'\nassert solution('9') == '0'\n\"\"\""
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"2 3 3\") == \"1\"\nassert solution(\"2 3 3 4\") == \"2\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n3 3 2\n''') == '1'\nassert solution('''\n10\n1 1 2 1 3 3 1 1 1\n''') == '10'\nassert solution('''\n5\n6 1 1 3 2\n''') == '4'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 3 2\\n') == '1'\nassert solution('2\\n1 2 3\\n') == '1'\nassert solution('3\\n1 1 1\\n') == '2'\nprint('\"Run\" is good for you!')"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 1') == '2'\nassert solution('4 4') == '5'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\nabba\\n\") == \"2\"\nassert solution(\"2 1\\nabba\\n\") == \"3\"\nassert solution(\"3 5\\naaaa\\nabc\\n\") == \"4\"\nassert solution(\"3 10\\ncat\\ndog\\n\") == \"5\"\nassert solution(\"1 2\\ncat\\ndog\\n\") == \"3\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\naba\n''') == '3'\nassert solution('''\n4\naba\n''') == '2'"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2\naba\nb\na\nb\n''') == '2'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\nabba\") == \"2\"\nassert solution(\"2 0\\nabb\") == \"1\"\nassert solution(\"2 2\\nab\") == \"2\"\nassert solution(\"2 2\\nab\") == \"2\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == '2'"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abba') == '2'"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '2'\nassert solution('2 1') == '1'\nassert solution('3 2') == '2'\nassert solution('4 3') == '3'\nassert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\nabba\n''') == '2'\nassert solution('''\n5\nabbabbbabbb\n''') == '4'\nassert solution('''\n5\naaaaaaa\n''') == '3'\n'''\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''\n    5 6\n    1 2\n    2 3\n    2 4\n    3 4\n    '''\n    ) == '3'\nassert solution(\n    '''\n    4 6\n    1 2\n    2 3\n    2 4\n    3 4\n    '''\n    ) == '3'\n\nassert solution(\n    '''\n    1 1\n    2 2\n    '''\n    ) == '0'\n\nassert solution(\n    '''\n    5 6\n    1 2\n    2 3\n    2 4\n    3 4\n    '''\n    ) == '3'\n\nassert solution(\n    '''\n    4 6\n    1 2\n    2 3\n    2 4\n    3 4\n    '''\n    ) == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 2') == '3'\nassert solution('4 5') == '4'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == \"2\"\nassert solution('1 2') == \"2\"\nassert solution('1 2') == \"2\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '2'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2\n2 3\n2 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 3\n1 2\n3 4\n3 5\n5 1\n5 2\n5 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 4\n1 2\n4 3\n5 4\n5 4\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5 5\n2 3\n5 4\n1 5\n5 4\n1 3\n3 2\n4 5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5 4\n1 2\n4 3\n4 5\n5 1\n\"\"\") == \"4\""
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '5'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 2\\n2 3\\n2 4\\n') == '3'\nassert solution('10 4\\n1 2\\n2 4\\n2 5\\n3 4\\n3 6\\n4 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n') == '3'\nassert solution('1 2\\n2 3\\n3 4\\n4 5\\n') == '1'\nassert solution('1 1\\n2 3\\n3 4\\n4 5\\n') == '2'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '3'\nassert solution('3 3') == '3'\nassert solution('10 10') == '10'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 0\n0 1\n''') == '0'\nassert solution('''\n2\n1 0\n0 1\n''') == '1'\nassert solution('''\n3\n1 0\n0 1\n1000 1\n1 3\n2 3\nSample Output:\n0\n1\n0\n''') == '0'\nassert solution('''\n3\n1 0\n0 1\n1000 1\n1 3\n2 3\nSample Output:\n1\n1\n0\n''') == '1'\nassert solution('''\n3\n1 0\n0 1\n1000 1\n1 3\n2 3\nSample Output:\n1\n1\n0\n''') == '0'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '1'\nassert solution('''3 2\n1 0\n0 1\n1 1\n2 3\n''') == '0'\nassert solution('''3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '0'\nassert solution('''1 2\n3\n2\n''') == '1'\nassert solution('''3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '0'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3\\n1 2\\n2 3\\n1 3') == '1\\n0\\n'\nassert solution('2\\n3\\n1 4\\n2 4\\n1 3\\n2 3\\n1 5\\n2 5\\n1 6\\n2 6') == '1\\n1\\n'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n1 0\n0 1\n1 2\n2 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2\n1 0\n0 1\n1 1\n2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"2\""
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n1\n1\n1\n1\n2\n3\n3\n2\n1\n1\n2\n1\n3\n2\n1\n2\n1\n1\n2\n1\n1\n3\n2\n1\n1\n1\n3\n2\n2\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n0 1\\n1000 1\\n1 3\\n2 3\\n') == '1'\nassert solution('1 2\\n0 1\\n0 1\\n1000 1\\n1 3\\n2 3\\n') == '1'\nassert solution('1 2\\n0 1\\n1 1\\n1000 1\\n1 3\\n2 3\\n') == '0'\n\n--Sample Tests\nTest 1\nTest 1\nprint(solution(\"1 2\\n0 1\\n1000 1\\n1 3\\n2 3\\n\"))\nExpected Output\n1\n\nTest 2\nTest 2\nprint(solution(\"1 2\\n0 1\\n0 1\\n1000 1\\n1 3\\n2 3\\n\"))\nExpected Output\n0\n\nTest 3\nTest 3\nprint(solution(\"1 2\\n0 1\\n1 1\\n1000 1\\n1 3\\n2 3\\n\"))\nExpected Output\n1"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 2\n0 1\n3 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 3\n0 1\n1 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n4\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('3\\n4\\n0 3\\n1 2\\n2 3') == '1'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 3\n1 1\n1 2\n3 3\n1 4\n2 3\n2 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '1\\n3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3'\n    ) == '7'\n\"\"\"\n\nimport sys\nimport io\nsys.stdout = buffer = io.StringIO()\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n3\n2\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n5\n2\n1\n3\n1\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n3\n1 2\n2 1\n3 2\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n2\n1 2\n2 1\n\"\"\") == \"2\""
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3') == '7'\n\nassert solution('1\\n1\\n1') == '1'\n\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n''') == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n''') == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"7\""
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n\"\"\") == \"7\"\n\"\"\""
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"7\"\n\n'''"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == \"20\"\nassert solution(\"5 3\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\\nlinearalg11 40\\nlinearalg12 50\") == \"50\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '20'\nassert solution('1 10') == '10'\nassert solution('1 20') == '10'\nassert solution('1 10 2') == '18'\nassert solution('1 10 20') == '18'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"20\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"20 20\") == \"20\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '20'\nassert solution('10 1') == '10'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100') == '20'"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"20\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"20\"\nassert solution(\"5 10\") == \"10\"\nassert solution(\"5 20\") == \"20\"\nassert solution(\"6 20\") == \"20\"\nassert solution(\"6 5\") == \"5\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '20'\nassert solution('5 4') == '15'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(r\"\"\"5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100\"\"\") == \"20\"\n\nassert solution(r\"\"\"5 3\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\ncalculus3 30\nhonorsanalysis1 50\nhonorsanalysis2 100\"\"\") == \"30\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100') == '20'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 2\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"3 4 1\") == \"4\"\nassert solution(\"4 1 2\") == \"3\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4') == '6'\nassert solution('2 2 2') == '3'\nassert solution('1 2 2') == '2'\nassert solution('3 4 1') == '4'\nassert solution('4 1 2') == '4'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\nassert solution('''3 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\nassert solution('''10 1\n1 9 2\n9 2 1\n3 1 5\n4 8 5\n2 6 7\n3 8 8\n5 7 6\n7 6 5\n8 1 2\n8 3 4\n2 6 8\n6 5 5\n4 5 3\n1 3 2\n4 5 6\n3 6 4\n3 5 3\n3 4 6\n2 5 2\n5 5 2\n6 7 1\n4 1 5\n6 5 2\n2 3 3\n5 2 4\n5 7 5\n''') == '11'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"3\\n\"\n) == \"6\"\n\nassert solution(\n    \"3\\n\"\n    \"1 2 2\\n\"\n    \"2 3 4\\n\"\n    \"3 4 1\\n\"\n) == \"8\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n\"\"\") == \"6\"\n\"\"\""
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 2') == '1'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n') == '6'\nassert solution('10 3\\n2 3 1\\n1 2 3\\n3 4 5\\n1 5\\n4 2\\n6 7 8\\n1 8\\n3 7\\n2 1 4\\n8 9\\n3 5\\n1 6\\n5 7\\n4 8\\n9 10\\n2 10\\n8 2\\n2 5\\n9 4\\n4 1\\n3 3\\n4 8\\n7 5\\n3 10\\n1 1\\n9 6\\n8 10\\n6 1\\n5 1\\n1 6\\n1 7\\n5 9\\n1 4\\n4 6\\n9 3\\n1 3\\n3 4\\n2 7\\n5 8\\n1 2\\n9 1\\n8 3\\n5 8\\n1 4\\n5 9\\n8 5\\n3 8\\n3 7\\n4 3\\n5 4\\n7 4\\n7 5\\n2 1\\n4 4\\n5 5\\n3 7\\n1 7\\n2 6\\n4 2\\n2 5\\n4 2\\n2 6\\n4 3\\n4 2\\n8 7\\n2 2\\n7 5\\n5 2\\n7 2\\n2 7\\n2 5\\n7 8\\n1 5\\n1 2\\n5 8\\n4 9\\n2 8\\n3 5\\n4 1\\n1 1\\n4 1\\n3 3\\n2 3\\n2 1\\n5 7\\n3 8\\n2 1\\n1 4\\n9 5\\n1 4\\n4 5\\n2 4\\n1 1\\n3 3\\n5 1\\n5 2\\n5 1\\n4 1\\n5 9\\n4 8\\n1 6\\n3 8\\n2 3\\n3 7\\n2 1\\n1 3\\n5 6\\n2 6\\n7 4\\n3 4\\n6 4\\n4 3\\n6 7\\n7 1\\n2 6\\n3 4\\n3 4\\n3 7\\n3 3\\n1 3\\n4 6\\n3 8\\n4 3\\n2 1\\n4 4\\n2 1\\n5 2\\n5 1\\n5 5\\n4 2\\n5 8\\n8 4\\n5 2\\n1 3\\n5 3\\n3 2\\n3 8\\n2 6\\n4 8\\n6 8\\n2 6\\n1 3\\n5 1\\n1 3\\n2 2\\n2 3\\n4 1\\n1 2\\n3 3\\n3 2\\n1 8\\n4 6\\n3 3\\n5 5\\n2 5\\n1 4\\n4 6\\n8 6\\n2 3\\n3 4\\n5 2\\n1 2\\n4 8\\n4 4\\n5 3\\n5 4\\n2 8\\n1 1\\n1 3\\n2 2\\n3 4\\n2 3\\n5 8\\n1 1\\n2 3\\n2 4\\n2 4\\n4 4\\n4 3\\n5 5\\n1 4\\n3 7\\n4 5\\n1 4\\n4 6\\n4 6\\n1 7\\n2 2\\n1 5\\n5 7\\n3 3\\n2 6\\n4 6\\n5 8\\n5 4\\n1 6\\n2 5\\n3 3\\n2 4\\n6 4\\n4 1\\n1 3\\n2 7\\n1 3\\n2 4\\n3 3\\n3 4\\n4 3\\n3 3\\n4 7\\n4 6\\n4 2\\n2 6\\n2 7\\n3 1\\n2 7\\n5 7\\n3 1\\n2 6\\n2 7\\n3 3\\n2 4\\n3 4\\n4 1\\n2 3\\n1 2\\n5 3\\n4 3\\n4 3\\n1 5\\n2 4\\n2 3\\n5 6\\n3 7\\n5 4\\n1 4\\n4 5\\n2 3\\n1 1\\n2 6\\n1 7\\n4 6\\n5 1\\n2 2\\n4 6\\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n3\n1 3\n2 4\n2''') == '7'\nassert solution('''5\n4\n1 2 1\n2 3 1\n3 4 1\n4 1 2\n3''') == '4'\nassert solution('''6\n3\n2 4\n3 4\n3 4\n3 4\n3''') == '3'\nassert solution('''9\n4\n1 4\n1 2\n1 3\n1 5\n3 4\n2 4\n2 5\n3 4\n5 4\n4 3\n4 5\n5 4\n''') == '9'\nassert solution('''5\n5\n1 4\n2 4\n3 4\n3 4\n''') == '6'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 4\\n\"\n    \"1 2 2\\n\"\n    \"2 3 4\\n\"\n    \"3 4 1\\n\"\n    \"4 1 2\\n\"\n    \"3\\n\"\n    \"1 4 2\\n\"\n    \"3 3 3\\n\"\n    \"4 3 6\\n\") == \"6\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('5 1 2') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1') == '2'\nassert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1') == 'impossible'\nassert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1') == 'impossible'"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 3 3\n1\n1 1\n2\n1 2\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == '2'\nassert solution('1 1') == '2'\nassert solution('2 2') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1') == 'impossible'\nassert solution('2 2 2\\n2\\n2\\n1 2\\n1 1\\n2 1\\n1 2') == 'impossible'\nassert solution('2 2 2\\n2\\n2\\n1 2\\n1 1\\n1 2') == 'impossible'\nassert solution('3 3 3\\n1\\n1\\n1 2\\n1 1\\n2 1\\n1 1\\n1 1') == '2'\nassert solution('3 3 3\\n1\\n1\\n1 2\\n1 1\\n2 1\\n1 1\\n1 1') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1\\n2\\n3\\n1 2\\n2 3 1\") == \"2\"\nassert solution(\"5 3 5\\n6\\n4\\n3\\n1 2\\n3\\n5\\n\") == \"impossible\"\nassert solution(\"3 3 2\\n3\\n4\\n4\\n\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 1 2\n3\n3\n1 1\n2 2\n1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 1 2\n3\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1') == '2'\nassert solution('3 2 1\\n2\\n1 1\\n1 2\\n3 1') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 1\") == \"2\"\nassert solution(\"3 1 1\") == \"impossible\"\nassert solution(\"3 1 1\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1 1\") == \"2\"\nassert solution(\"3 2 1\") == \"impossible\"\nassert solution(\"3 3 1\") == \"impossible\"\nassert solution(\"2 3 1\") == \"2\"\nassert solution(\"3 3 3\") == \"impossible\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"500.00\"\nassert solution(\"3\") == \"1000.00\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == '500.00'\nassert solution('''\n2\n100 300\n300 400\n''') == '300.00'\nassert solution('''\n2\n200 400\n400 500\n''') == '400.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n250 250\\n250 750') == '500.00'\nassert solution('1\\n1 1') == '1.00'\nassert solution('2\\n500 500\\n500 500') == '200.00'"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n100 100') == '100.00'\nassert solution('3\\n50 50 60\\n80 80 80\\n50 50 50\\n50 50 60') == '500.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n250 250\n250 750''') == '500.00'\nassert solution('''2\n250 250\n250 500''') == '1000.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"500.00\"\nassert solution(\"12\") == \"750.00\""
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n250 250\\n250 750\\n\") == \"500.00\"\nassert solution(\"100\\n50 50\\n10 10\\n\") == \"50.00\""
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == '500.00'\nassert solution('''\n1\n100 100\n''') == '200.00'\n'''\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n250 250\\n250 750') == '500.00'\nassert solution('4\\n0 1\\n10 10\\n100 10\\n1000 1000') == '1000.00'\nassert solution('1000\\n0 1000') == '1000.00'\n\"\"\"\nimport math\n\nn = int(input())\nr = [int(x) for x in input().split()]\n\ng = 0\nfor i in range(n):\n    d = math.sqrt((r[i][0]**2)+(r[i][1]**2))\n    g += d\n\nprint(g)"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '500.00'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 1') == '1'\nassert solution('5 2') == '1'\nassert solution('3 2') == '1'\nassert solution('5 3') == '2'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\nassert solution([2, 3, 2, 100, 10, 100, 1, 10]) == '0'"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 2') == '1'\nassert solution('2 3') == '2'\n'''\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1\\n3 2\\n4 5\\n2 4') == '0'\nassert solution('5 2\\n2 5\\n3 7\\n1 4\\n4 9') == '0'\nassert solution('5 5\\n1 4\\n2 6\\n1 3\\n4 5') == '10'\nassert solution('5 5\\n1 4\\n2 6\\n1 3\\n4 5\\n2 6') == '10'\nassert solution('5 5\\n1 4\\n2 6\\n1 3\\n4 5\\n3 6') == '5'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n2 100 10\\n100 1 10') == '0'\nassert solution('3 5\\n2 100 20\\n100 1 20\\n100 5 20\\n100 10 20\\n200 1 20\\n200 5 20\\n200 10 20') == '-3'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '0'\nassert solution('10 20') == '10'\n\n---Input Format---\nThe first line contains the number of test cases, $T$. T test cases follow. Each test case consists of a single line containing $N$ integers separated by a single space.\n\nThe second line contains $M$ integers separated by a single space.\n\nEach of the next $N$ lines contains $M$ integers, each.\n\n---Output Format---\nFor each test case, output $T$ integers, each separated by a single space.\n\nIf $T=0$, output $0$.\n\nSample Output 1:\n10 20\n10 0\n10\nSample Output 2:\n10 2\n10 0\n10\nSample Output 3:\n10 20\n10 10\n10 20\nSample Output 4:\n10 2\n10 10\n10 20\nSample Output 5:\n10 0\n10 10\n10 20\nSample Output 6:\n10 20\n10 20\nSample Output 7:\n0\n0\nSample Output 8:\n0\n0\n0\n\"\"\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\n2 100 10\\n100 1 10') == '0'\nassert solution('2 3\\n2 100 10\\n100 1 100') == '3'\nassert solution('2 3\\n2 100 10\\n100 1 100\\n100 1 100') == '3'\nassert solution('2 3\\n2 100 10\\n100 1 100\\n100 1 100\\n100 1 100') == '3'\nassert solution('2 3\\n2 100 10\\n100 1 100\\n100 1 100\\n100 1 100') == '3'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\n2 100 10\\n100 1 10\\n') == '0'"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3') == '0'\nassert solution('2 1') == '1'\nassert solution('3 2') == '3'\nassert solution('3 4') == '4'\nassert solution('4 3') == '4'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"0\", \"Wrong answer!\"\nassert solution(\"2 2\") == \"6\", \"Wrong answer!\"\nprint(\"Solution: nice job!\")\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n''') == '2'\nassert solution('''\n4 2 5 4\n1 1 1 1\n2 2 2 2\n3 3 3 3\n''') == '1'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('80 50 3 2') == '2'\nassert solution('75 5 25 20 50 35') == '4'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35') == \"2\"\nassert solution('80 50 3 2\\n50 5 25 20 50 35') == \"2\"\nassert solution('80 50 3 2\\n20 50 35') == \"2\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 2 2') == '2'\nassert solution('4 4 4 4') == '4'\nassert solution('8 4 8 4') == '3'\nassert solution('8 8 8 8') == '8'\nassert solution('8 4 8 8') == '2'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"50 50 3 2\") == \"2\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('80 50 3 2') == '2'\nassert solution('75 5 25 20 50 35') == '1'\nassert solution('20 5 25 10 50 35') == '1'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2 3 2 1\") == \"2\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '2'\nassert solution('100 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '3'\nassert solution('10 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '1'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '2'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == 'A...'\nassert solution('3 4') == 'AAAA'\nassert solution('5 5') == '...AA'\nassert solution('6 6') == '....AA'\nassert solution('7 7') == 'BBBBBB'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4\\n2211\\n1112\\n1112\\n') == 'AAAA\\n...A\\n....\\n...C'\nassert solution('4 3\\n1111\\n1112\\n1112\\n') == 'AABB\\n...A\\n...B\\n...C'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAABBBB'\nassert solution('3 4\\n1112\\n2211\\n1112') == '...AA'\nassert solution('3 4\\n1112\\n2211\\n2211') == 'AABBBB'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAA\\n...A\\n....\\n\"\nassert solution(\"3 4\\n2211\\n1112\\n1112\") == \"BBBB\\nBBBB\\nBBBB\\n\"\nassert solution(\"3 4\\n2211\\n1112\\n1111\") == \"impossible\"\nassert solution(\"3 4\\n2211\\n1112\\n1112\") == \"BBBB\\nBBBB\\nBBBB\\n\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAA\\nBBBB\\n...B\\n\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 4\n2211\n1112\n1112\n''') == 'AAAA'\nassert solution('''\n4 4\n1111\n1112\n1112\n''') == 'AAAA'\nassert solution('''\n6 5\n1111\n1112\n1112\n''') == 'AAAA'\nassert solution('''\n7 3\n1111\n1112\n1112\n''') == 'AAAA'\nassert solution('''\n1 1\n1111\n1112\n1112\n''') == 'AAAA'"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\n...A\\n....'\n\nassert solution('3 5\\n1221\\n1112\\n1112\\n1111\\n1111') == 'AAAA\\n...A\\n...BB\\nBBBB\\n...C\\nCCCC'\n\nassert solution('3 3\\n1112\\n1112\\n1111\\n1111') == 'impossible'\n\nassert solution('5 5\\n12345\\n1234\\n54321\\n12345\\n12345') == 'AAAA\\n...A\\n...AA\\nAAAB\\nAAAB\\nAAAA'\n\nassert solution('10 10\\n12345\\n12345\\n12345\\n12345\\n12345\\n12345\\n12345\\n12345\\n12345\\n12345') == 'ABAB\\nABAB\\nABAB\\nABAB\\nABAB\\nABAB\\nABAB\\nABAB\\nABAB\\nABAB'\n\nimport itertools\nimport math\nimport re\n\nwith open('input.txt') as f:\n    n, m = map(int, f.readline().split())\n    languages = []\n    for i in range(n):\n        languages.append([int(x) for x in re.findall(r'\\d+', f.readline().strip())])"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == 'AAABBB\\nAAA.B\\nBBBB\\n.A.\\n..C\\nCCCC'\n\"\"\""
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 5\n1222\n1112\n1112\n1112\n1112\n''') == 'AAAA'\nassert solution('''\n3 4\n2211\n1112\n1112\nSample Output:\nBBBB\n...B\n....\n\nBB..\nBBBB\n...B\n\n....\n...C\nCCCC\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 4\n2211\n1112\n1112\n\"\"\") == \"AAAABBBB\"\nassert solution(\"\"\"\n3 4\n1111\n1112\n1111\n\"\"\") == \"AAAABBBB\"\nassert solution(\"\"\"\n3 4\n1111\n1111\n1111\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n2 3\n1112\n1112\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n4 4\n1111\n1111\n1111\n1111\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 3') == '4'\nassert solution('4 3 1') == '5'\nassert solution('5 3 1') == '2'\nassert solution('3 1 3') == '4'\nassert solution('4 3 1') == '5'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 3 2\\n2 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3') == '9'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '4'\nassert solution('4 3 1 2 1 3') == '3'\nassert solution('1 4 1 2 1 3') == '5'\nassert solution('3 4 1 2 1 3 2') == '7'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 1 3 3\"\n) == \"9\"\nassert solution(\n    \"3 4 1 2 3 2\"\n) == \"7\"\nassert solution(\n    \"4 3 1 2 1\"\n) == \"6\"\nassert solution(\n    \"1 4 1 2 1 3\"\n) == \"5\"\nprint(solution(\"4 3 1 2 1\"))\n\nSample Input:\n3 1 3 3\n1 4 1 2 3\n4 3 1 2 1\n1 4 1 2 1 3\nSample Output:\n13\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"9\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 4 5 3 2 1\") == \"3\"\nassert solution(\"1 2 3 4 5 3 2 1 3 2\") == \"3\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 3 3') == \"9\"\nassert solution('1 2 2 3') == \"3\"\nassert solution('1 2 2 3 4 3 2') == \"5\"\nassert solution('1 2 2 3 4 3 2 3 4 3 2') == \"7\"\nassert solution('1 2 2 3 4 3 2 3 4 3 2') == \"7\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1 1\n4 3 1 2 3 2\n1 4 1 2 1 3\n\"\"\") == \"9\"\n\nassert solution(\"\"\"\n2 2 2\n3 1 1\n2 3 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n2 2 2\n2 1 1\n1 3 3\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n2 2 2\n2 1 1\n3 1 2 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '9'\nprint(solution('''4 4 4 4\n3 3 1 3 3\n1 3 1 3 3\n1 1 2 2 1\n3 1 1 1 2\n3 2 2 1 1\n1 2 3 2 3\n1 1 2 1 2\n1 3 3 3 3\n1 3 1 3 3\n1 2 1 2 3\n1 3 3 2 3\n1 4 2 3 2\n1 4 4 2 2\n1 3 2 3 2\n1 1 2 1 2\n1 3 1 2 1\n1 1 2 2 1\n3 1 1 1 2\n3 3 2 1 1\n3 1 1 1 1\n3 2 2 1 2\n3 2 1 1 1\n3 1 1 3 2\n3 1 2 3 2\n3 1 1 3 2\n3 3 2 1 3\n3 2 1 1 3\n3 2 3 2 3\n3 1 2 2 3\n3 1 2 3 3\n3 1 1 2 3\n3 2 3 3 3\n2 2 3 2 3\n1 1 1 2 1\n1 3 3 3 3\n2 2 3 2 3\n1 3 3 3 3\n3 3 3 3 3\n''')) == '25')\nassert solution('''3 1 3 2\n1 3 1 3 2\n3 2 3 1 1\n1 2 3 1 3\n3 1 1 1 3\n1 3 2 3 3\n3 1 3 2 3\n''') == '0'\nassert solution('''4 4 4 4\n3 3 1 3 3\n1 3 1 3 3\n1 1 2 2 1\n3 1 1 1 2\n3 2 2 1 1\n1 2 3 2 3\n1 1 2 1 2\n1 3 3 3 3\n1 3 1 3 3\n1 2 1 2 3\n1 3 3 2 3\n1 4 2 3 2\n1 4 4 2 2\n1 3 2 3 2\n1 1 2 1 2\n1 3 1 2 1\n1 1 2 2 1\n3 1 1 1 2\n3 3 2 1 1\n3 1 1 1 2\n3 2 2 1 1\n3 2 1 1 1\n3 1 1 3 2\n3 1 2 3 2\n3 1 1 3 2\n3 3 2 1 3\n3 2 1 1 3\n3 2 3 2 3\n3 1 2 3 2\n3 1 1 2 3\n3 2 3 1 2\n3 2 1 1 3\n3 2 2 3 3\n3 1 1 1 2\n3 1 1 3 2\n3 1 2 3 2\n3 1 1 3 2\n3 2 2 3 3\n3 1 2 1 3\n3 2 1 1 1\n3 1 1 3 2\n3 3 2 1 3\n3 1 1 1 3\n3 2 2 1 3\n3 1 1 1 1\n3 2 2 3 2\n3 2 1 1 3\n3 2 2 1 1\n3 2 3 1 2\n3 2 1 1 1\n3 2 2 3 3\n3 1 1 3 3\n3 1 1 1 3\n3 1 2 3 2\n3 2 2 3 2\n3 1 1 3 2\n3 2 1 1 3\n3 1 1 1 3\n3 2 2 3 3\n3 1 1 2 2\n3 1 1 1 1\n3 2 2 1 2\n3 1 1 1 1\n3 2 2 1 2\n3 1 1 1 1\n3 2 1 2 1\n3 1 1 1 1\n3 1 2 1 3\n3 1 2 3 3\n3 2 2 1 3\n3 1 1 3 3\n3 2 1 1 3\n3 2 3 2 3\n3 1 2 2 3\n3 1 1 1 3\n3 1 3 2 3\n3 2 1 3 2\n3 2 1 1 3\n3 2 3 1 3\n3 1 1 1 1\n3 2 1 1 2\n3 1 2 3 2\n3 2 1 1 1\n3 1 1 1 3\n3 1 1 2 1\n3 1 1 1 1\n3 2 2 2 3\n3 1 1 2 1\n3 1 1 1 1\n3 2 1 2 1\n3 2 1 1 3\n3 1 1 1 1\n3 1 1 1 1\n3 2 1 1 2\n3 1 1 2 2\n3 2 3 3 2\n3 1 1 1 2\n3 1 2 2 2\n3 1 1 3 1\n3 2 2 1 3\n3 1 1 1 2\n3 1 2 1 2\n3 2 2 3 2\n3 1 1 1 1\n3 2 1 1 3\n3 2 3 1 3\n3 2 2 2 3\n3 2 1 1 1\n3 1 1 2 2\n3 1 1 3 3\n3 1 3 3 3\n3 3 3 3 3\n3 1 3 3 3\n3 1 1 1 2\n3 1 1 3 2\n3 1 2 1 3\n3 1 1 1 2\n3 1 1 1 1\n3 1 3 3 2\n3 1 3 2 3\n3 2 2 2 3\n3 1 1 1 3\n3 2 1 1 2\n3 2 2 3 3\n3 1 1 3 3\n3 2 2 3 3\n3 1 2 3 3\n3 1 1 3 3\n3"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1') == \"1\"\nassert solution('3 3 3 3') == \"6\"\nassert solution('3 4 1 2 3 2') == \"12\"\nassert solution('4 3 1 2 1 3') == \"13\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '12'\nassert solution('4 3 1 2 1') == '7'\nassert solution('1 4 1 2 1 3') == '12'\nassert solution('3 1 1 2 1') == '1'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5') == '20.396078'\nassert solution('1\\n5\\n0\\n1\\n0\\n1\\n1\\n1\\n0\\n1\\n1\\n1') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5''') == '20.396078'\nassert solution('''6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5''') == '10.142857'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '20.396078'\n\nassert solution('''\n7 5 2 2\n2 6 9\n1 3 4\n0 5 6\n7 3\n1 1\n0 3\n2 1\n3 1\n''') == '10.061110'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 2 2 8\") == \"20.396078\"\nassert solution(\"2 1 1 1\") == \"IMPOSSIBLE\"\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 2 2 8\") == \"20.396078\"\nassert solution(\"0 0 6\") == \"20.396078\"\nassert solution(\"3 4 7\") == \"impossible\"\nassert solution(\"0 8 8\") == \"20.396078\"\nassert solution(\"6 8 8\") == \"20.396078\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '20.396078'\nassert solution('''\n1 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('0 0 6') == '20.396078'\nassert solution('3 4 7') == '17.1875'\nassert solution('6 8 8') == '17.1875'\nassert solution('6 0 6') == '17.1875'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 2 2 8\") == \"20.396078\"\nassert solution(\"5 5 5 5\") == \"1\""
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('0 0 6') == '0.000000'\nassert solution('3 4 7') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n\"\"\") == \"20.396078\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abca\") == \"b\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"c\"\nassert solution(\"nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"w\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"z\"\nassert solution(\"abc\") == \"\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abca') == 'a'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1 8') == 'a'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n') == 'c'\nassert solution('abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n') == 'e'\nassert solution('abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n') == 'r'\n'''\n\n\n'''"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abca') == 'c'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'd'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'z'\nassert solution('aa') == 'a'\nassert solution('bb') == 'b'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n\"\"\"\n) == \"a\"\nassert solution(\n    \"\"\"abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n10\n2\n1 8\n\"\"\"\n) == \"b\"\nassert solution(\n    \"\"\"abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n5\n1\n2\n1 4\n\"\"\"\n) == \"c\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abca\") == \"b\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"c\"\nassert solution(\"nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"z\"\nassert solution(\"abca\") == \"b\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"c\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"b\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"c\"\n\nSample Input:\nnmn\nkzqxl\n5\n3\n3 1\nSample Output:\nn\nm\nz\nq\nx\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abca') == 'b'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'c'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'z'\nassert solution('aa bb cc dd ee ff gg hh ii jj kk ll mm') == 'b'\n\"\"\"\nfrom sys import setrecursionlimit\nsetrecursionlimit(11000)\nimport sys\nimport bisect\nfrom collections import defaultdict"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nabc\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'bc'\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'bc'\nassert solution('''\nbcbcbcba\nabcabcbcba\nbcbcbcba\nabcabcbcba\nbcbcbcba\nabcabcbcba\nbcbcbcba\nabcabcbcba\nbcbcbcba\nbcbcbcba\n''') == 'bc'\nassert solution('''\nabcb\nbc dc da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'b'\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'b'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'b'\n\nassert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n2\n1\n1 6\n''') == 'c'\n\nassert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n4\n3\n3 7\n''') == 'f'\n\nassert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n5\n4\n1 4\n''') == 'h'\n\nassert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n6\n5\n1 1\n''') == 'a'"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('robot') == '12'\nassert solution('hobit') == '10'\nassert solution('hobotnica') == '16'\nassert solution('rakija') == '7'\nassert solution('barbarana') == '11'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"1210\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n\n\"\"\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"12\""
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '12'\nassert solution('4') == '7'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"robot\") == \"12\"\n\nassert solution(\"hobit\") == \"16\"\n\nassert solution(\"hobi\") == \"10\"\n\nassert solution(\"hobit\") == \"7\""
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '12'\nassert solution('2') == '10'\nassert solution('1') == '9'\n\"\"\""
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('robot') == '12'\nassert solution('hobotnica') == '16'\nassert solution('robi') == '10'\nassert solution('hobi') == '7'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"1\"\nassert solution(\"4\\n5\\n6\\n7\\n\") == \"3\"\nassert solution(\"8\\n9\\n10\\n11\\n\") == \"2\"\nassert solution(\"12\\n13\\n14\\n15\\n\") == \"1\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nAASZGRKATBZCN\n''') == 'AASZGRKATBZCN'\n\nassert solution('''\nAASZGRKATBZCN\n''') == 'AASZGRKATBZCN'\n\nassert solution('''\nAASZGRKATBZCN\n''') == 'AASZGRKATBZCN'\n\nassert solution('''\nAASZGRKATBZCN\n''') == 'AASZGRKATBZCN'\n\nassert solution('''\nAASZGRKATBZCN\n''') == 'AASZGRKATBZCN'"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n14 4\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\nassert solution(\n'''\n100 100\nRADIO PAD\n''') == 'RADIO PAD'\n'''\nassert solution(\n'''\n3311\n1234\n''') == '1234'\n'''\n\n'''\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\nJQ IRKEYFG EXQ''') == 'THIS IS A TEST'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\\n\") == \"THIS IS A TEST\"\nprint(solution(\"14 4\\nJQ IRKEYFG EXQ\\n\"))\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 4\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\n\nassert solution('''\n5 5\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\n\nassert solution('''\n6 4\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\n\nassert solution('''\n6 5\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\n\nassert solution('''\n10 5\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('15 5\\nA BCDBCJGKHLJ') == 'A BCDBCJKHL'\nassert solution('15 3\\nA BCD') == 'ABCD'\nassert solution('8 9\\nABCABCABC') == 'ABCABCABC'\nassert solution('15 9\\nABCABCABC') == 'ABCABCABC'\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''14 4\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\nassert solution('''14 6\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\n\n'''\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\n'''\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"THIS IS A TEST\"\n\nSample Input:\n10 4\nJQ IRKEYFG EXQ\nSample Output:\nWALLETTSI\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('12 4\\n'\n                 'ABC') == 'ABC'\n\nassert solution('12 3\\n'\n                 'ABCD') == 'ABCD'\n\nassert solution('15 4\\n'\n                 'ABCDEABCDEABCDE') == 'ABCDEABCDEABCDE'\n\"\"\"\n\nimport sys\nimport math\n\nn, x = int(sys.stdin.readline()), int(sys.stdin.readline())\n\nst = sys.stdin.readline()\n\ngrid = []\nfor _ in range(n):\n    grid.append(st[:x])\n    st = st[x:]"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2.6') == '135'\nassert solution('1.5') == '135135'\nassert solution('100.8') == '5100'\nassert solution('3.9') == '35131415'\nassert solution('1.5') == '135135'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2.6\n''') == '135'\nassert solution('''\n5776\n''') == '76'\nassert solution('''\n5.6\n''') == '5'\nassert solution('''\n5.6\n''') == '5'\n'''"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2.6\") == \"135\"\nassert solution(\"5\") == \"210\"\n\nn = int(stdin.strip())\nl = []\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1.0\") == \"1\"\nassert solution(\"2.6\") == \"135\"\nassert solution(\"4545.6\") == \"544554\"\nassert solution(\"95555.6\") == \"955555\"\nassert solution(\"2.6\") == \"135\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2.6') == '135'\nassert solution('5.0') == '270270'\nassert solution('8.0') == 'No solution'\nassert solution('-5.0') == 'No solution'\nassert solution('-7.0') == 'No solution'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2.6') == '135\\n270\\n135135'\nassert solution('2.6') == '135\\n270\\n135135'\n\"\"\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2.6') == '135'\nassert solution('0.6') == '0'\nassert solution('45.6') == '0'\nassert solution('0.0') == '0'\nassert solution('1000.1') == '0'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2.6') == '135'\nassert solution('5.6') == '270'\nassert solution('4.6') == '270270'\nassert solution('2.6.7') == '135135'\nassert solution('3.6.7') == '270270'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2.6') == '135'\nassert solution('1.6') == '135'\nassert solution('0.6') == '135'\nassert solution('0.0') == '135'\nassert solution('-0.6') == '135'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3.9\n10.7\n17.5\n10\n''') == '''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n') == '4'\nassert solution('10\\n-3 -1\\n1 1\\n3 2\\n5 2\\n7 5\\n9 2\\n2 5\\n4 4\\n2 5\\n4 4\\n1 2\\n6 5\\n3 1\\n6 5\\n5 2\\n5 2\\n5 4\\n5 5\\n5 2\\n4 4\\n5 5\\n2 2\\n5 2\\n5 2\\n3 1\\n3 5\\n2 5\\n2 5\\n3 4\\n2 5\\n3 4\\n3 4\\n4 2\\n2 5\\n3 4\\n3 4\\n5 5\\n5 2\\n5 4\\n4 5\\n4 2\\n5 3\\n3 3\\n4 5\\n4 5\\n4 5\\n3 4\\n5 5\\n5 5\\n3 5\\n3 5\\n4 3\\n4 4\\n4 5\\n4 5\\n5 5\\n4 4\\n5 5\\n5 5\\n4 5\\n3 5\\n3 5\\n3 5\\n3 5\\n2 4\\n5 5\\n5 2\\n4 4\\n5 2\\n4 4\\n4 4\\n5 5\\n5 2\\n5 2\\n3 4\\n5 2\\n4 4\\n3 2\\n5 3\\n5 2\\n5 2\\n3 2\\n5 3\\n5 2\\n4 4\\n4 5\\n5 2\\n5 2\\n3 4\\n4 4\\n5 3\\n4 2\\n4 3\\n4 4\\n5 3\\n4 5\\n5 2\\n5 5\\n4 4\\n5 5\\n4 4\\n4 5\\n4 4\\n4 5\\n3 5\\n5 4\\n5 2\\n4 5\\n5 5\\n5 5\\n5 4\\n4 5\\n5 2\\n5 2\\n5 2\\n4 5\\n5 3\\n5 2\\n4 5\\n5 4\\n4 5\\n5 4\\n5 5\\n4 4\\n4 5\\n5 5\\n5 5\\n5 2\\n4 5\\n5 4\\n4 5\\n4 5\\n4 5\\n5 2\\n4 4\\n5 5\\n4 4\\n5 5\\n5 2\\n5 2\\n5 5\\n4 4\\n5 4\\n4 5\\n4 5\\n4 5\\n5 2\\n4 4\\n5 5\\n5 5\\n5 5\\n5 2\\n5 2\\n5 5\\n4 4\\n5 5\\n5 5\\n5 5\\n4 4\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\nassert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '1'\nassert solution('''\n4\n1 2\n3 4\n5 6\n7 8\n9 10\n2 4\n3 6\n4 8\n5 10\n6 8\n7 7\n''') == '0'\nassert solution('''\n4\n0 1\n3 4\n5 6\n7 8\n9 10\n1 2\n2 4\n3 6\n4 8\n5 10\n6 8\n7 7\n''') == '1'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4'\n\nsample_input = '''3\n1 2\n3 4\n6 5\n7 6\n'''\n\nassert solution(sample_input) == '0'"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\"\n    ) == \"4\"\nassert solution(\n    \"5\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\"\n    ) == \"0\"\nassert solution(\n    \"10\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\"\n    ) == \"5\"\nassert solution(\n    \"100\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\"\n    ) == \"0\"\nassert solution(\n    \"1000\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\"\n    ) == \"1\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '4'\nassert solution('3 4 1 2 3') == '2'\nassert solution('8 3 1 5 3 7 2 6 1 5 2 6 2 4') == '3'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n3 4\n0 5\n1 3\n1 2\n3 6\n2 5\n4 4\n0 1\n3 7\n4 5\n6 5\n7 8\n9\n1 2\n2 4\n1 5\n3 6\n4 4\n4 5\n4 7\n3 8\n5 2\n6 6\n0 3\n2 8\n0 4\n0 7\n1 9\n4 8\n3 2\n5 6\n''') == '4'\n\nassert solution('''\n3\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\nSample Output:\n0\n''') == '0'\n\nassert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '1'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\nassert solution(stdin='5\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n') == '4'"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '4'\nassert solution('2\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3') == '0'\nassert solution('3\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3') == '2'\nassert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '2'\nassert solution('5\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3') == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\n'''"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\nassert solution('5\\n1 2\\n2 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"0.0000000 0.0000000\"\nassert solution(\"1 3\") == \"1.0000000 0.0000000\"\nassert solution(\"1 4\") == \"-1.0000000 0.0000000\"\nassert solution(\"1 5\") == \"0.0000000 1.0000000\"\n\"\"\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'''\n\n5\n1 3\n3 1\n1 2\n1 4\n1 5\nSample Output:\n-1.0000000 -0.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n1.0000000 -1.0000000\n1.0000000 1.0000000\n1.0000000 0.0000000\n1.0000000 0.0000000\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2\n1 3\n1 4\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('7\\n5 3\\n3 2\\n1 2\\n1 5\\n6 1\\n5 6\\n3 2\\n3 6\\n3 4\\n5 6\\n') == '2.957422 0.957422\\n-2.957422 0.957422\\n-2.957422 0.957422\\n-2.957422 0.957422\\n-2.957422 0.957422\\n0.957422 -2.957422\\n-0.957422 -2.957422\\n0.957422 -2.957422\\n-0.957422 -2.957422\\n0.957422 -2.957422\\n-0.957422 -2.957422\\n-0.957422 -2.957422'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\na*a\na*a\n''') == '2'\nassert solution('''\n3\naaa\nabc\naba\na*a\naaa*\n*aaa\n''') == '3'\n''')"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n1\\n3\\n2\\n\") == \"1\"\nassert solution(\"3\\n10\\na\\nbbb\\n\\nccc\\n\") == \"3\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '5\\n'\n    'aa\\n'\n    'aa\\n'\n    'aa\\n'\n    'a*'\n    ) == '2'\nassert solution(\n    '5\\n'\n    'a\\n'\n    'a\\n'\n    'a\\n'\n    'a*'\n    ) == '2'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '2'\nassert solution('1 1') == '1'\nassert solution('2 4') == '0'\nassert solution('3 3 2') == '1'\nassert solution('3 3 1') == '0'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2\\n1\\n1\\n'\nassert solution('4 3') == '4\\n2\\n1\\n1\\n'\nassert solution('10 7') == '4\\n4\\n3\\n2\\n3\\n2\\n2\\n2\\n1\\n1\\n'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\naaa\\nabc\\naba\\na*a\\naaa*') == '2\\n1\\n1'\n\nassert solution('3 3\\naba\\nabc\\naaa\\na*a\\naaa*') == '1\\n1\\n1'\n\nassert solution('4 3\\naba\\nabc\\nabc\\na*a\\naaa*') == '2\\n1\\n1'\n\nassert solution('4 3\\nab\\nabc\\nabc\\na*a\\naaa*') == '1\\n1\\n1'\n\nassert solution('4 3\\n*a\\n*a\\nabc\\nabc\\na*a\\naaa*') == '1\\n1\\n1'"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '2'\nassert solution('5 1') == '1'\n\nfrom collections import deque\nfrom itertools import combinations\n\nclass Graph:\n\n    def __init__(self, graph_dict={}):\n        self.graph_dict = graph_dict\n        self.visited = set()\n        self.final_path = []\n\n    def add_vertex(self, node):\n        self.graph_dict[node] = []\n        \n    def add_edge(self, from_node, to_node, cost = 1):\n        self.graph_dict[from_node].append((to_node, cost))\n\n    def bfs_traverse(self, start_node):\n        queue = deque()\n        self.visited = set()\n        self.visited.add(start_node)\n        queue.append(start_node)\n\n        while queue:\n            node = queue.popleft()\n            nodes_to_visit = self.graph_dict[node]\n            for adjacent_node, cost in nodes_to_visit:\n                if adjacent_node not in self.visited:\n                    self.visited.add(adjacent_node)\n                    self.final_path.append(adjacent_node)\n                    queue.append(adjacent_node)"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\naaa\\nabc\\naba\\n*aaa\\naaa*\\n*aaa\") == \"2\"\nassert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa\") == \"1\"\nassert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa\\n*\") == \"1\"\nassert solution(\"3 3\\nabc\\naba\\n*aaa\\n*aaa\\n*aaa\\n*aaa\") == \"0\"\nassert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa\\n*a*a\") == \"1\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\naba\naa\n''') == '2', \"First\"\nassert solution('''\n1\naaa\naa\n''') == '1', \"Second\"\nassert solution('''\n2\naaa\naba\na*a\n''') == '3', \"Third\"\nassert solution('''\n2\naba\naba\na*a\n''') == '1', \"Fourth\"\nassert solution('''\n5\naaa\naaa\naaa\naaa\naaa\n''') == '1', \"Fifth\"\n\"\"\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\nSample Input 2:\n6\n*\n*a\nab*\n*a*\n*a*a\n*b*b\n*a*a*a\nSample Output 2:\n2\n3\n2\n1\n1\n2\n''') == '''2\n1\n2\n1\n1\n2\n'''\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2\\nOX\\nOX\\nOX\\nOX\\nOX\\nOO\\nXO\\nOO') == '1'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO') == '0'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 2\nOX\nOX\nOX\nOX\n''') == '1'\n\nassert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '1'\n\nassert solution('''\n4 2\nXO\nOX\nXO\nOX\n''') == '0'\n\nassert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOX\n''') == '0'\n\nassert solution('''\n4 2\nXO\nOX\nXO\nOX\n''') == '1'"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == \"1\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\nassert solution(\"1\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"0\"\nassert solution(\"1\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"0\"\nassert solution(\"1\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\nassert solution(\"1\\nXO\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4') == '1'\nassert solution('1\\n1\\n1\\n1') == '0'\nassert solution('1\\n1\\n2\\n1') == '0'\nassert solution('1\\n1\\n2\\n2') == '1'\nassert solution('1\\n2\\n2\\n2') == '0'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '0'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '0'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '0'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '1', 'Sample Test 1'\nassert solution('''\n4 3\nOXX\nOOO\nOXX\nXOO\n''') == '0', 'Sample Test 2'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"4 4\") == \"0\""
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '1'\nassert solution('''\n4 3\nXOO\nXOX\nOOX\nOOX\n''') == '0'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n2 0\n0 2\n-2 0\n0 -2\n''') == '16'\nassert solution('''\n5\n0 0\n-0 0\n0 0\n0 -0\n-0 0\n''') == '2'\nassert solution('''\n7\n0 0\n0 2\n0 -2\n2 0\n-2 0\n-2 2\n2 -2\n''') == '16'\nassert solution('''\n8\n0 0\n0 2\n0 -2\n2 0\n-2 0\n-2 2\n2 -2\n2 2\n''') == '32'\nassert solution('''\n5\n-2 0\n0 -2\n0 2\n2 0\n-2 0\n''') == '10'\n'''\n<Your Task>\nYou don't have to print anything. Just return the correct answer.\n'''\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 0\n0 2\n-2 0\n0 -2''') == '16'\n\nassert solution('''10\n1 1\n1 -1\n1 -1\n2 0\n-2 0\n-2 0\n1 -1\n-1 1\n-1 -1''') == '33'\n\nassert solution('''10\n1 1\n1 -1\n2 0\n-2 0\n-2 0\n1 -1\n-1 1\n-1 -1''') == '33'\n\nassert solution('''10\n1 1\n1 -1\n2 0\n-2 0\n-2 0\n1 -1\n-1 1\n-1 -1''') == '0'\n\nassert solution('''10\n0 1\n1 -1\n0 -1\n2 0\n-2 0\n-2 0\n1 -1\n-1 1\n-1 -1''') == '11'"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"16\""
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 0\\n0 2\\n-2 0\\n0 -2') == '16'\nassert solution('4\\n0 2\\n0 -2\\n-2 0') == '4'\nassert solution('10\\n0 2\\n0 -2\\n-2 0\\n0 2\\n0 -2\\n0 2') == '30'\nassert solution('1\\n0 2\\n0 -2\\n-2 0') == '2'\nassert solution('2\\n0 2\\n0 -2\\n-2 0') == '1'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 0') == '16'\nassert solution('0 2') == '16'\nassert solution('-2 0') == '16'\nassert solution('0 -2') == '16'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '16'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n3 0\\n0 3\\n-2 0') == '16'\nassert solution('4\\n0 1\\n1 3\\n3 4\\n-1 0') == '1'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n2 0\n0 2\n-2 0\n0 -2\nSample Output:\n16\n''') == '16'\nassert solution('''\n10\n-9 -6\n-10 0\n-7 0\n10 0\n-3 5\n8 0\n-9 0\n-8 5\n0 7\n-2 -6\n-8 -10\n-9 -5\nSample Output:\n256\n''') == '256'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0') == '4'\nassert solution('0 2') == '4'\nassert solution('-2 0') == '4'\nassert solution('0 -2') == '4'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '16'\nprint(solution())"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 10 50\n8 8 2 -2\n''') == '80'\nassert solution('''\n5 5 4 5\n5 2 5 2 -2\n''') == '80'\nassert solution('''\n5 5 5\n10 2 5 2 -2\n''') == '80'\nassert solution('''\n5 5 5\n5 2 5 2 -2\n''') == '80'\nassert solution('''\n10 10 10\n10 5 10 5 -2\n''') == '180'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 10 50\n8 8 2 -2\n''') == \"80\"\nassert solution('''\n2 10 10 50\n1 1 1 1 1 1 1\n''') == \"66\"\nassert solution('''\n3 2 1\n1 1\n''') == \"1\"\nassert solution('''\n100 6\n1 1 2 3 2 1\n''') == \"100\"\nassert solution('''\n3 3\n1 1 1\n''') == \"2\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n4 10 50\n8 8 2 -2\n\"\"\") == \"80\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 2 1') == '80'\nassert solution('4 3 2 -1') == '80'\nassert solution('5 1 -2 3 -3 4') == '119'\nassert solution('5 -3 1 -2 3 -3 4') == '119'\nassert solution('5 -3 1 2 3 4') == '119'\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5 10 50') == '80'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '6'\nassert solution('1 1 1 1 1 1 1 1') == '2'\nassert solution('5 4 3 2 1') == '3'\nassert solution('10 10 10 10') == '10'\nassert solution('100 100 100 100') == '200'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '4 10 50\\n'\n    '8 8 2 -2\\n'\n    '') == '80'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 5 2') == '3'\nassert solution('4 2 5 2') == '5'\nassert solution('4 3 3 2') == '4'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 10 50\\n8 8 2 -2') == \"80\"\nassert solution('5 4 3\\n5 -2 2 4 5\\n5 3 4 3 5\\n5 4 5 2 4 5\\n5 5 5 4 4 5\\n5 3 2 3 5 2\\n5 3 4 4 5 3\\n4 5 3 3 5 3\\n5 4 3 3 5 4\\n4 5 4 3 5 5\\n5 3 4 3 5 4\\n4 3 4 4 5 3\\n4 5 2 2 3 4\\n4 5 3 4 5 3\\n5 3 4 5 2 4\\n4 5 4 5 4 4\\n5 3 2 3 4 5\\n5 2 3 2 3 4\\n5 2 4 4 5 2\\n5 3 4 3 5 2\\n5 2 2 4 4 5\\n5 2 3 4 5 3\\n4 3 2 4 5 3\\n5 2 5 5 4 4\\n5 2 4 4 4 5\\n5 2 5 4 5 4\\n5 2 4 4 5 5\\n5 2 4 5 5 5\\n4 5 5 5 5 5') == \"96\"\n\"\"\"\n\nn, c, r = map(int, input().split())\ns = list(map(int, input().split()))"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2 2\n2 0 0\n''') == '2\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n\"\"\") == \"3.000000000\"\n\"\"\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 8') == '3.000000000'\n\"\"\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3') == '3.000000000'\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n4 5\\n6 7') == '3.000000000'\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n4 5\\n6 7\\n9 8') == '3.000000000'\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n4 5\\n6 7\\n9 8\\n11 12') == '5.000000000'\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n4 5\\n6 7\\n9 8\\n11 12\\n7 8') == '7.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6''') == '3.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3.000000000\""
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n\"\"\") == \"3.000000000\"\nassert solution(\n    \"\"\"\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n\"\"\") == \"5.000000000\"\nassert solution(\n    \"\"\"\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n8 7\n\"\"\") == \"4.000000000\"\nassert solution(\n    \"\"\"\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n\"\"\") == \"5.000000000\"\nassert solution(\n    \"\"\"\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n8 7\n\"\"\") == \"9.000000000\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1') == '3.000000000'\nassert solution('1 8\\n0 0 10 10\\n5 1\\n3') == '3.000000000'\nassert solution('2 3\\n10 10\\n1 1') == '5.000000000'\nassert solution('2 3\\n10 10\\n1 1\\n2') == '5.000000000'\nassert solution('1 5\\n10 10\\n5 5') == '6.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 8') == '3.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('1 100') == '4.000000000'\n\nstdin = \"\"\"\n5 8\n5 1\n3 5\n2 1\n9 6\n8 9\n7 8\n\"\"\"\nassert solution(stdin) == '4.000000000'"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\nassert solution([[0, 1, 0, 0], [1, 2], [2, 3], [2, 4]]) == \"1\""
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 2\n0 2\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2\n0 1\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 5\n0 0 0 0 0\n1 1\n2 0\n2 0\n3 3\n3 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4 5\n0 0 0 0 0\n1 1\n2 2\n2 3\n3 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 5\n0 0 0 0 0\n1 1\n2 2\n2 3\n3 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n3 3\n1 1\n2 2\n1 1\n\"\"\") == \"1\"\n\nassert solution(r\"\"\"\n5 5\n0 1 0 0 0\n1 1\n2 2\n3 3\n3 4\n\"\"\") == \"3\"\n\nassert solution(r\"\"\"\n4 5\n0 1 1 0 0\n1 2 1 1\n2 3 1 1\n2 4 1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 1\n0 1 0 0\n1 2\n2 3\n2 4\n2 3\n''') == '1', 'first'\nassert solution('''\n4 1\n0 1 0 0\n1 2\n2 3\n2 4\n''') == '1','second'\nassert solution('''\n3 5\n0 1 0 0\n1 2\n2 3\n2 4\n2 5\n''') == '2', 'third'\nassert solution('''\n4 4\n0 1 0 0\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == '3', 'fourth'\nassert solution('''\n5 5\n0 1 0 0\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n''') == '1', 'fifth'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1'\nassert solution('2 4') == '2'\nassert solution('3 4') == '1'"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 3\n1 2\n1 3\n2 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3\n0 1 0 0\n1 2\n1 3\n2 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 4\n0 0 1 1 0\n1 0 0 0\n1 1\n0 1\n2 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n6 5\n0 0 1 1 0 0\n0 0 0 0 0\n1 0 0 0 0\n0 0 0 1 0\n0 1\n1 1\n1 1\n1 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10 4\n1 1 1 1 1 1 1 1 1 1 1 1\n1 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\") == \"6.283185\"\nassert solution(\"10 5\\n0 0 1\\n0 0 2\\n1 0 3\\n1 1 4\\n1 1 5\\n0 0 6\\n0 1 7\\n0 1 8\\n0 1 9\\n0 2 10\\n1 2 11\\n1 2 12\\n1 2 13\\n0 2 14\\n0 2 15\\n1 3 16\\n1 3 17\\n1 3 18\\n0 3 19\\n1 4 20\\n1 4 21\\n1 4 22\\n0 4 23\\n0 4 24\\n1 5 25\\n1 5 26\\n1 5 27\\n0 5 28\\n0 5 29\\n1 6 30\\n1 6 31\\n1 6 32\\n0 6 33\\n0 6 34\\n1 7 35\\n1 7 36\\n1 7 37\\n0 7 38\\n0 7 39\\n1 8 40\\n1 8 41\\n1 8 42\\n0 8 43\\n0 8 44\\n1 9 45\\n1 9 46\\n1 9 47\\n0 9 48\\n0 9 49\\n1 10 50\\n1 10 51\\n1 10 52\\n0 10 53\\n0 10 54\\n1 11 55\\n1 11 56\\n1 11 57\\n0 11 58\\n0 11 59\\n1 12 60\\n1 12 61\\n1 12 62\\n0 12 63\\n0 12 64\\n1 13 65\\n1 13 66\\n1 13 67\\n0 13 68\\n0 13 69\\n1 14 70\\n1 14 71\\n1 14 72\\n0 14 73\\n0 14 74\\n1 15 75\\n1 15 76\\n1 15 77\\n0 15 78\\n0 15 79\\n1 16 80\\n1 16 81\\n1 16 82\\n0 16 83\\n0 16 84\\n1 17 85\\n1 17 86\\n1 17 87\\n0 17 88\\n0 17 89\\n1 18 90\\n1 18 91\\n1 18 92\\n0 18 93\\n0 18 94\\n1 19 95\\n1 19 96\\n1 19 97\\n0 19 98\\n0 19 99\\n1 20 100\\n1 20 101\\n1 20 102\\n0 20 103\\n0 20 104\\n1 21 105\\n1 21 106\\n1 21 107\\n0 21 108\\n0 21 109\\n1 22 110\\n1 22 111\\n1 22 112\\n0 22 113\\n0 22 114\\n1 23 115\\n1 23 116\\n1 23 117\\n0 23 118\\n0 23 119\\n1 24 120\\n1 24 121\\n1 24 122\\n0 24 123\\n0 24 124\\n1 25 125\\n1 25 126\\n1 25 127\\n0 25 128\\n0 25 129\\n1 26 130\\n1 26 131\\n1 26 132\\n0 26 133\\n0 26 134\\n1 27 135\\n1 27 136\\n1 27 137\\n0 27 138\\n0 27 139\\n1 28 140\\n1 28 141\\n1 28 142\\n0 28 143\\n0 28 144\\n1 29 145\\n1 29 146\\n1 29 147\\n0 29 148\\n0 29 149\\n1 30 150\\n1 30 151\\n1 30 152\\n0 30 153\\n0 30 154\\n1 31 155\\n1 31 156\\n1 31 157\\n0 31 158\\n0 31 159\\n1 32 160\\n1 32 161\\n1 32 162\\n0 32 163\\n0 32 164\\n1 33 165\\n1 33 166\\n1 33 167\\n0 33 168\\n0 33 169\\n1 34 170\\n1 34 171\\n1 34 172\\n0 34 173\\n0 34 174\\n1 35 175\\n1 35 176\\n1 35 177\\n0 35 178\\n0 35 179\\n1 36 180\\n1 36 181\\n1 36 182\\n0 36 183\\n0 36 184\\n1 37 185\\n1 37 186\\n1 37 187\\n0 37 188\\n0 37 189\\n1 38 190\\n1 38 191\\n1 38 192\\n0 38 193\\n0 38 194\\n1 39 195\\n1 39 196\\n1 39 197\\n0 39 198\\n0 39 199\\n1 40 200\\n1 40 201\\n1 40 202\\n0 40 203\\n0 40 204\\n1 41 205\\n1 41 206\\n1 41 207\\n0 41 208\\n0 41 209\\n1 42 210\\n1 42 211\\n1 42 212\\n0 42 213\\n0 42 214\\n1 43 215\\n1 43 216\\n1 43 217\\n0 43 218\\n0 43 219\\n1 44 220\\n1 44 221\\n1 44 222\\n0 44 223\\n0 44 224\\n1 45 225\\n1 45 226\\n1 45 227\\n0 45 228\\n0 45 229\\n1 46 230\\n1 46 231\\n1 46 232\\n0 46 233\\n0 46 234\\n1 47 235\\n1 47 236\\n1 47 237\\n0 47 238\\n0 47 239\\n1 48 240\\n1 48 241\\n1 48 242\\n0 48 243\\n0 48 244\\n1 49 245\\n1 49 246\\n1 49 247\\n0 49 248\\n0 49 249\\n1 50 250\\n1 50 251\\n1 50 252\\n0 50 253\\n0 50 254\\n1 51 255\\n1 51 256\\n1 51 257\\n0 51 258\\n0 51 259\\n1 52 260\\n1 52 261\\n1 52 262\\n0 52 263\\n0 52 264\\n1 53 265\\n1 53 266\\n1 53 267\\n0 53 268\\n0 53 269\\n1 54 270\\n1 54 271\\n1 54 272\\n0 54 273\\n0 54 274\\n1 55 275\\n1 55 276\\n1 55 277\\n0 55 278\\n0 55 279\\n1 56 280\\n1 56 281\\n1 56 282\\n0 56 283\\n0 56 284\\n1 57 285\\n1 57 286\\n1 57 287\\n0 57 288\\n0 57 289\\n1 58 290\\n1 58 291\\n1 58 292\\n0 58 293\\n0 58 294\\n1 59 295\\n1 59 296\\n1 59 297\\n0 59 298\\n0 59 299\\n1 60 300\\n1 60 301\\n1 60 302\\n0 60 303\\n0 60 304\\n1 61 305\\n1 61 306\\n1 61 307\\n0 61 308\\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"0.0\"\nassert solution(\"2 3\") == \"1.5707963267949\"\nprint('Done!')\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('10 0 0') == '9.828137'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '0.36'\nassert solution('3 4') == '1.46'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"6.283185\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('1 1') == '0'"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"6.283185\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('1 2') == '0.015826'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n1 2\n0 1\n1 0''') == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n1 1\\n0 0\\n1 1\\n2 2\\n') == '6.283185'\nassert solution('2\\n1 2\\n0 0\\n0 1\\n2 2\\n1 1\\n0 0\\n0 2\\n') == '3.14159265358979'\n\n'''\n\n'''\n---------------------------------------------------------\nSolution by AlgoExpert (Sliding Window)\n---------------------------------------------------------\n\nTime Complexity: O(N + M)\nSpace Complexity: O(N + M)\n'''"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1 2'\nassert solution('3') == '1 2 3'"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"1 2 3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1 2'\nassert solution('10') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1 2 3\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n2 3\n''') == '1 2 3', solution('''1\n2 3\n''')"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n') == '1 2 3'\nassert solution('2\\n4\\n6\\n') == '4 2 3 6'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1 2 3'\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '1 2 3'\ninput = \"\"\"\n2\n\"\"\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 2 3 4') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1'\nassert solution('''\n5 6\n1 2\n1 3\n1 4\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n''') == '2'\nassert solution('''\n5 6\n1 2\n1 3\n1 4\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n''') == '2'\nassert solution('''\n5 6\n1 2\n1 3\n1 4\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n''') == '3'\nassert solution('''\n5 6\n1 2\n1 3\n1 4\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n''') == '3'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1'\n\nassert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2'\n\nassert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n\nassert solution('''\n4 4\n1 2\n2 3\n1 4\n3 4\n''') == '1 2 3 4'"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\n1 2\n1 3\n2 4\n3 4''') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n3 4\n''') == '1 1 2 3 4'\n\nassert solution('''\n2\n1 2\n1 3\n''') == '1 1 2 3'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 4 2 3') == '1 2 3 4'\nassert solution('1 1 1 3') == '3'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\nassert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\nassert solution('''\n5 5\n1 2\n1 3\n2 4\n3 4\n4 5\n''') == '1 2 3 4 5'\nassert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\nassert solution(\"\"\"\n5 5\n1 2\n2 3\n3 4\n4 5\n\"\"\") == '3 1 2 4'"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4') == '1'\nassert solution('10 8') == '10 9 12 17 20 24'\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1\"\nassert solution(\"2 2\\n1 2\\n1 2\") == \"2\"\nassert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"7 8\\n3 4\\n2 4\\n1 5\\n5 4\\n2 6\\n6 5\\n6 4\\n7 5\\n6 5\\n5 6\") == \"6\"\nassert solution(\"6 6\\n1 5\\n1 2\\n2 5\\n2 3\\n3 5\\n3 4\\n4 5\") == \"3\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 2\\n1 2\") == \"1\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2\\n1 3') == '1'\nassert solution('10\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\\n0 8\\n0 9\\n0 10\\n') == '10'"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\"\n\"\"\"\n\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.graph = []\n\n    def add_edge(self, u, v):\n        self.graph.append((u, v))\n        self.graph.append((v, u))\n\n    def find_set(self, x):\n        if x == self.parent[x]:\n            return x\n        else:\n            self.parent[x] = self.find_set(self.parent[x])\n            return self.parent[x]\n\n    def is_connected(self, u, v):\n        return self.find_set(u) == self.find_set(v)\n\n    def union(self, u, v):\n        u_root = self.find_set(u)\n        v_root = self.find_set(v)\n\n        if u_root == v_root:\n            return\n\n        if self.size[u_root] > self.size[v_root]:\n            u_root, v_root = v_root, u_root\n\n        self.parent[u_root] = v_root\n\n        if self.size[u_root] == self.size[v_root]:\n            self.size[v_root] += 1\n\n    def size(self):\n        return self.n - 1 + self.n\n\n    def maximum_independent_set(self):\n        self.parent = [i for i in range(self.n)]\n\n        for v in range(self.n):\n            for u, v in self.graph:\n                if self.is_connected(u, v):\n                    self.union(u, v)\n\n        return self.n - 1\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1\n1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 6\n1 2\n1 3\n1 4\n2 4\n3 5\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n8 3\n1 2\n1 3\n1 5\n2 4\n3 4\n3 6\n4 5\n4 6\n5 6\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6 7\n1 2\n1 3\n1 4\n2 4\n3 4\n4 5\n4 6\n5 6\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n9 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 4\n3 4\n4 5\n4 6\n5 6\n6 7\n\"\"\") == \"3\""
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\n1 2\n''') == '1', \"Should return a single integer: 1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1\\n1 2\\n') == '1'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '45'\nassert solution('3') == '18'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '45'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '45'\nassert solution('3') == '105'\nprint(\"You passed the test!\")\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '45'\nassert solution('1000') == '132781635942603573412986914583313145833145833145833166611794801552807339409224030028388635791359357913593579135936604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732604732"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"16\"\nassert solution(\"3\") == \"10\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"45\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('5') == '10'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '45'\nassert solution('3') == '15'\nassert solution('4') == '12'\nassert solution('5') == '45'\nassert solution('6') == '84'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"12\"\nassert solution(\"8\") == \"64\"\nassert solution(\"9\") == \"216\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '10'"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '45'\n\nfrom math import log\nn=int(input())\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"5 20 20\") == \"4\"\nassert solution(\"100 100\") == \"100\"\nassert solution(\"5 3\") == \"5\"\nassert solution(\"10 5\") == \"10\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('7 11 9 12 2') == '5'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('7 11 9 12 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 20 20\\n7 11 9 12 2') == '4'\nassert solution('1 1\\n3') == '0'"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 20 20\\n\"\n    \"7 11 9 12 2\"\n) == \"4\"\n\nstdin = \"\"\"\n5 20 20\n20 14 2\n\"\"\"\nassert solution(stdin) == \"3\"\n\nstdin = \"\"\"\n5 20 20\n5 20 2\n\"\"\"\nassert solution(stdin) == \"3\"\n\nstdin = \"\"\"\n5 20 20\n3 20 2\n\"\"\"\nassert solution(stdin) == \"1\"\n\nstdin = \"\"\"\n5 20 20\n4 20 2\n\"\"\"\nassert solution(stdin) == \"2\"\n\nstdin = \"\"\"\n5 20 20\n4 20 2\n\"\"\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 20 20\n7 11 9 12 2\n''') == '4'\nassert solution('''\n6 10 10\n6 2 1 3 4 1\n''') == '6'\nassert solution('''\n8 10 10\n6 2 1 3 4 1\n''') == '6'\nassert solution('''\n10 10 10\n6 2 1 3 4 1\n''') == '6'\nassert solution('''\n3 20 20\n3 5 7 9\n''') == '2'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 20 20') == '4', \"Wrong answer\"\nassert solution('15 17 13 6 4 2 5 6 9 10 11 12 12 13 14 5 5 7 7 8 8 9 9 10 11 12 13 14 15 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 1012 1013 1014 1015 1016 1017"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('7 11 9 12 2') == '2'\nprint('Congratulations! All test cases passed')\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings') == '2'\n\nassert solution('2 3\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings') == '3'\n\nassert solution('5 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\nsarah 1 harrypotter1') == '5'\n\nassert solution('5 3\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\nsarah 1 harrypotter1') == '5'\n\nassert solution('5 4\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\nsarah 1 harrypotter1') == '5'"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2'\nassert solution('kenny 1 harrypotter1') == '1'\nassert solution('charlie 1 lordoftherings') == '1'\nassert solution('jenny 1 harrypotter1') == '1'\nassert solution('laura 1 lordoftherings') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings''') == \"2\"\nassert solution('''1\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings''') == \"1\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\njenny 1 harrypotter1\nlaura 1 lordoftherings\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\nkenny 1 harrypotter1\njenny 1 harrypotter1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '2'\nassert solution('1 2\\ncharlie 1 harrypotter1\\ncharlie 1 harrypotter1\\nlaura 1 harrypotter1\\nlaura 1 harrypotter1\\n') == '3'\nassert solution('1 1\\ncharlie 1 harrypotter1\\ncharlie 1 harrypotter1\\njenny 1 harrypotter1\\nlaura 1 harrypotter1\\n') == '2'"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\nassert solution('''\n5 5\nharrypotter1 harrypotter1 harrypotter1 harrypotter1\ncharlie 1 harrypotter1 harrypotter1\nkenny 1 harrypotter1 harrypotter1\nlaura 1 harrypotter1 harrypotter1\n''') == '2'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2'\nassert solution('2 2') == '2'"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\nx\nx\n''') == '1'\n\nassert solution('''\n2\nharrypotter1\nharrypotter2\nharrypotter3\nharrypotter4\nharrypotter5\nharrypotter6\nharrypotter7\nharrypotter8\nharrypotter9\nharrypotter10\nharrypotter11\nharrypotter12\nharrypotter13\nharrypotter14\nharrypotter15\nharrypotter16\nharrypotter17\nharrypotter18\nharrypotter19\nharrypotter20\nlaura1\nlaura2\nlaura3\nlaura4\nlaura5\nlaura6\nlaura7\nlaura8\nlaura9\nlaura10\nlaura11\nlaura12\nlaura13\nlaura14\nlaura15\nlaura16\nlaura17\nlaura18\nlaura19\nlaura20\njenny1\njenny2\njenny3\njenny4\njenny5\njenny6\njenny7\njenny8\njenny9\njenny10\njenny11\njenny12\njenny13\njenny14\njenny15\njenny16\njenny17\njenny18\njenny19\njenny20\ncharlie1\ncharlie2\ncharlie3\ncharlie4\ncharlie5\ncharlie6\ncharlie7\ncharlie8\ncharlie9\ncharlie10\ncharlie11\ncharlie12\ncharlie13\ncharlie14\ncharlie15\ncharlie16\ncharlie17\ncharlie18\ncharlie19\ncharlie20\nkenny1\nkenny2\nkenny3\nkenny4\nkenny5\nkenny6\nkenny7\nkenny8\nkenny9\nkenny10\nkenny11\nkenny12\nkenny13\nkenny14\nkenny15\nkenny16\nkenny17\nkenny18\nkenny19\nkenny20\n''') == '1'"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"4 3\") == \"2\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\nassert solution('''\n2 3\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\nassert solution('''\n2 4\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\nassert solution('''\n2 5\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\n'''\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"2 1\"\nassert solution(\"01\") == \"2 1\"\nassert solution(\"000\") == \"2 1\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"2 1\"\nassert solution(\"01\") == \"2 1\"\nassert solution(\"0101\") == \"3 2\"\nassert solution(\"010101\") == \"3 2\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n01\n1\n1\n0\n''') == '2 1'\nassert solution('''\n1\n1\n0\n0\n0\n''') == '2 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n1\n0\n0\n1\n1\n0\n0\n1\n1\n0\n0\n1\n1\n0\n1\n1\n0\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n0\n1\n1\n0\n1\n1\n0\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1 2'\nassert solution('01') == '1 2'\nassert solution('00') == '0 1'\nassert solution('01 0') == '1 2'\nassert solution('01 0 0') == '2 2'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n010') == '1 2'"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n01\n1 0\n1 0 1\n1 0 1 1\n1 0 1 1 1\n1 0 1 1 1 1\n1 0 1 1 1 1 1\n1 0 1 1 1 1 1 1\n1 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1 1'\nassert solution('10') == '1 1'\nassert solution('1000') == '1 1'\nassert solution('01') == '1 1'\nassert solution('001') == '1 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '1 2'\nassert solution(input()) == '1 3'\nassert solution(input()) == '1 4'\nassert solution(input()) == '1 5'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '2 1'\nassert solution('1\\n01') == '2 1'\n\"\"\"\n\nfrom bisect import bisect_left"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '4 3'\nassert solution('3 2') == '2 3'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 1\") == \"2 2\\n1 1\\n\"\nassert solution(\"5\\n4 1\\n4 3\\n2 2\\n1 1\\n3 2\\n1 1\\n3 1\") == \"5 4\\n2 1\\n3 1\\n4 3\\n2 2\\n1 1\\n3 2\\n1 1\\n3 1\"\nassert solution(\"5\\n4 1\\n4 3\\n2 2\\n1 1\\n3 2\\n1 1\\n3 1\") == \"5 4\\n2 3\\n1 1\\n3 2\\n1 1\\n3 1\"\nassert solution(\"6\\n5 1\\n4 1\\n4 3\\n2 2\\n1 1\\n3 2\\n1 1\\n3 1\") == \"5 4\\n2 2\\n1 2\\n3 2\\n1 1\\n3 1\"\nassert solution(\"6\\n5 1\\n4 1\\n4 3\\n2 2\\n1 1\\n3 2\\n1 1\\n3 1\") == \"5 4\\n2 2\\n1 2\\n3 2\\n1 1\\n3 1\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '7'\nassert solution('4') == '7'\n\nassert solution('5') == '7'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 1') == '2 2'\nassert solution('10 5') == '12'\nassert solution('10 5') == '12'\nassert solution('10 10') == '1212'\nassert solution('4 4') == '1 2 1 2'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5 3\n1 1\n2 1\n1 2\n2 1\n1 1\n\"\"\"\n) == \"4 3\"\nassert solution(\n\"\"\"\n3 1\n1 1\n2 1\n2 2\n\"\"\"\n) == \"2 2\""
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '4 3'\nassert solution('2') == '2'"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\", \"Empty\"\nassert solution(\"1\\n2\") == \"\", \"Empty\"\nassert solution(\"1\\n2\\n3\") == \"\", \"Empty\"\nassert solution(\"1\\n2\\n3\\n4\") == \"\", \"Empty\"\n\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"\", \"Empty\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3 1 2'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'atk pango glib2 gtk2'\nassert solution(input()) == 'emacs xorg-x11 lisp freetype pcre grep'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 'cannot be ordered'\n\"\"\"\nfrom collections import deque\n\npackages = {}"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == output\nprint(solution(input))\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\npango\\nzlib\\ngtk2\\nvim-X11\\n'''\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"atk\\nfreetype\\nglibattr\\nglib2\\nxorg-x11-libs\\npango\\nzlib\\nlibjpeg\\npcre\\nfreetype\\nlisp\\nemacs\\n0\\n\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\npango\\ngtk2\\nvim-common\\nxorg-x11-libs\\npangotex\\nzlib\\n'''\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs''') == 'atk'\n\nassert solution('''1\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs''') == 'zlib'\n\nassert solution('''1\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs''') == 'gtk2'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'atk \\n gtk2 \\n lisp \\n grep \\n libattr \\n libjpeg \\n pcre \\n freetype \\n xorg-x11-libs \\n pango \\n zlib'\n\n\"\"\""
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == 'atk'\nassert solution('15') == 'freetype'\nassert solution('30') == 'glib2'\nassert solution('100') == 'cannot be ordered'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\nlibattr\nvim-common\ngtk2 libattr\nvim-common\natk\npango glib2\nglib2\n''') == 'atk'\nassert solution('''\n14\nlibattr\nvim-common\ngtk2 libattr\nvim-common\natk\npango glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs freetype\nfreetype\ngrep freetype\nfreetype\npcre\npcre\npcre\n''') == 'pcre'\nassert solution('''\n4\nfreetype\natk\nlibattr\n''') == 'freetype'\nassert solution('''\n13\nglib2\natk\npango\n''') == 'atk'\nassert solution('''\n16\natk\nfreetype\nglib2\nlibjpeg\npango\npcre\n''') == 'pcre'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('32 20') == '16'\nassert solution('30 20') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('32 20') == '16'\nassert solution('9220') == '10'\nassert solution('8080') == '10'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''32 20''') == '16'\nassert solution('''0 2''') == '2'\nassert solution('''10 2''') == '10'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4\") == \"16\"\nassert solution(\"3 10\") == \"10\"\nassert solution(\"10 20\") == \"16\""
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"16\"\nassert solution(\"4 20\") == \"20\"\nassert solution(\"4 100\") == \"16\"\nassert solution(\"4 200\") == \"16\"\nassert solution(\"4 300\") == \"16\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('32 20') == '16'\nassert solution('0 4') == '2'\nassert solution('0 5') == '2'\nassert solution('1 2') == '2'\nassert solution('8 2') == '8'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''32 20''') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('32 20') == '16'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n..#.#\\n#..#.\") == \"5 13\"\nassert solution(\"4 4\\n#####\\n#.##.\\n###.#\") == \"1 1\"\nassert solution(\"4 4\\n###.#\\n##...\\n...##\") == \"0 1\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == '5 13'\nassert solution('3 2') == '1'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 4\n....\n.#.#\n....\n''') == '5 13'\n\nassert solution('''\n5 10\n.####\n###.\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 5\n....\n.#.#\n...#\n...#\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n    5 4\n    ....\n    ...#\n    #..#\n    ....\n    '''\n) == '13'\nassert solution(\n    '''\n    5 4\n    ....\n    #.#.\n    ..#.\n    ....\n    '''\n) == '13'\n'''\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n...#...\\n....#..\\n#.#.##') == '13 13'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"5 13\"\nassert solution(\"5 5\") == \"7 24\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1\n.\n.\n\n''') == '1'\n\nassert solution('''\n2 1\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r\"\"\"3\n1 2 5 1\n2 3 3 1\n3 1? 0\n\"\"\") == \"5\"\n\nassert solution(r\"\"\"2\n2 3 1\n3 3 1\n3 1? 0\n\"\"\") == \"5\"\n\nassert solution(r\"\"\"1\n? 1 1\n?? 0\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '5'\nassert solution('2 4') == '1'\n\n-----Hints-----\nUse a nested for loop to iterate through all of the stations that are connected to the central station (station number 1).\nUse a dictionary to keep track of the minimum possible length for each tunnel. Then, iterate over the tunnels and find the minimum possible length for each.\nUse a counter to iterate through all of the possible lengths and find the minimum.\n\n'''"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n10 5\n1 5 2 2 2 1 5 1 1 1\n3 3 3 3 3 3 1 3 1 1\n4 4 4 4 4 4 4 4 4 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n10 4\n1 5 2 2 2 1 5 1 1 1\n3 3 3 3 3 3 3 1 3 1\n4 4 4 4 4 4 4 4 4 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\n\nassert solution('''\n10 10\n3 7 10 6 9 1 2 7 8 5 3 4\n10 6 9 8 5 4 2\n''') == '15'\n\nassert solution('''\n10 10\n2 9 7 4 6 8 10 3 5 2 1\n1 6 9 8 5 4 2\n''') == '13'\n\nassert solution('''\n10 10\n9 8 7 4 5 6 10 3 2 1\n1 6 9 8 5 4 2\n''') == '8'\n\nassert solution('''\n10 10\n9 7 4 5 6 8 10 3 2 1\n1 6 9 8 5 4 2\n''') == '8'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '5'\nassert solution('3 3') == '5'\nassert solution('3 3') == '5'\nassert solution('1 2 3') == '3'\nassert solution('2 3') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3') == '5'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3\\n-1 0\\n-1 1') == '0'\nassert solution('2 3\\n-1 0\\n-1 1') == '1'\nprint('\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!')\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '0'\nassert solution('10 2') == '10'\n\n'''"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n-1 -1\") == \"0\"\nassert solution(\"1 2\\n-1 0\") == \"1\"\nassert solution(\"1 1\\n-1 0\") == \"0\"\nassert solution(\"1 1\\n-1 0\") == \"0\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '0'\nassert solution('1 10') == '10'\nassert solution('2 5') == '2'\nassert solution('4 9') == '3'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n-1 0\n-1 1\n0 1\n''') == '0'\n\nassert solution('''\n5 6\n-1 0\n-1 1\n-1 2\n0 1\n1 2\n0 3\n0 4\n''') == '3'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 3\\n-1 0\\n-1 1\\n0 1\\n\"\n) == \"0\"\nassert solution(\n    \"5 5\\n-1 -1\\n-1 -1\\n0 -1\\n-1 -1\\n1 -1\\n\"\n) == \"4\"\nassert solution(\n    \"5 5\\n-1 -1\\n-1 -1\\n0 -1\\n-1 -1\\n1 -1\\n\"\n) == \"3\"\nassert solution(\n    \"5 5\\n-1 -1\\n-1 -1\\n0 -1\\n-1 -1\\n1 -1\\n\"\n) == \"4\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == output"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 3\n-1 0\n-1 1\n0 1\n''') == '3'\nassert solution('''2 3\n-1 0\n-1 1\n0 1\n''') == '0'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '0'\nassert solution('2 4') == '3'\nassert solution('4 5') == '3'\n\n---\nSample Input:\n2 3\n0 0\n0 1\n0 2\n1 2\nSample Output:\n0\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('9 6 2 4') == '6'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n9 6 2 4') == '6'\nassert solution('2\\n9 6 2 4') == '2'\nassert solution('3\\n9 6 2 4') == '1'\nassert solution('4\\n9 6 2 4') == '1'\nassert solution('5\\n9 6 2 4') == '0'\nprint('\"Run\" is good. How is \"Check\"?')\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '6'\nassert solution('10') == '5'\nassert solution('100') == '50'\nassert solution
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n9 6 2 4\") == \"6\"\nassert solution(\"4\\n9 9 9 9\\n\") == \"1\"\nassert solution(\"10\\n1 2 3 4 5\\n\") == \"5\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n''') == '6'\n\nassert solution('''\n3\n1 2 3\n''') == '3'\n\nassert solution('''\n100\n
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"4\\n9 6 2 4\"\n    ) == \"6\"\nassert solution(\n    \"1\\n1\"\n    ) == \"1\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n2\n3\n4''') == '6'\nassert solution('''5\n7\n8\n9\n10''') == '12'\nassert solution('''15\n16\n17\n18\n19''') == '20'"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n9 6 2 4\\n') == '6'\nassert solution('5\\n1 1 3 1 5\\n') == '7'\nassert solution('10\\n1 1 1 1 1 1 1 1\\n') == '10'\nassert solution('50\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n') == '8'\nassert solution('100\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n') == '8'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '1'\nassert solution('9') == '2'\nassert solution('6') == '2'\nassert solution('2') == '2'\nassert solution('4') == '1'\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO(input())"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 1 2\n1 1\n''') == '2.000000'\nprint(solution('''\n3 3 1 2\n1 1\n'''))\nassert solution('''\n1 1\n1 1\n''') == '0.0'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('1 3 1 3 2') == '1.000000'\nassert solution('0 0 0 0 0') == '0.000000'\nprint(f\"You passed {len(tests)} tests!\")\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"2 5 1\") == \"2.000000\"\nassert solution(\"2 5 10\") == \"4.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1 3 2') == '2.000000'\nassert solution('5 1 1') == '2.000000'\nassert solution('5 1 1') == '4.999999'\n\"\"\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1 1 3 2\n2 5 1\n''') == '2.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 1 1 3 2''') == '2.000000'\nassert solution('''2 5 1''') == '3.000000'"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"5 1 5 1 1\") == \"5.000000\"\nassert solution(\"5 1 1 1 2\") == \"5.000000\"\n\"\"\""
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '1.000000'\n\"\"\"\nimport math\n\nx_s, y_s, s_s, r_i, r_f = map(int, input().split())\nx_a, y_a, s_a = map(int, input().split())\n\nx = abs(x_s - x_a)\ny = abs(y_s - y_a)\n\ndistance = math.sqrt((x_s - x_a) ** 2 + (y_s - y_a) ** 2)\nr_f_ = r_i * (1 - math.sqrt(s_s / distance))\nr_f = math.ceil(r_f_)\n\nassert r_i >= r_f"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 3 2\") == \"2.000000\"\nassert solution(\"1 1 1 3 2\") == \"3.000000\""
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 1 1 3 2\n2 5 1\n\"\"\") == \"2.000000\"\nprint(solution(\"\"\"\n2 1 1 3 2\n2 5 1\n\"\"\") == \"2.000000\")"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '96'\nassert solution('3') == '22'\nassert solution('4') == '9'\nassert solution('5') == '0'"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\\n') == '96'\nassert solution('5\\n2 3\\n1 4\\n1 2\\n1 5\\n2 4\\n3 5\\n') == '14'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4') == '96'\nassert solution('3\\n1 2\\n2 3\\n4') == '56'\nassert solution('3\\n1 2\\n1 3\\n1 4') == '15'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == \"96\"\nassert solution('''\n2\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == \"96\"\n'''"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"96\"\nassert solution(\"3\") == \"48\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == '96'\nassert solution('''\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == '97'\n'''\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n\"\"\") == \"96\", \"First\"\nassert solution(\"\"\"\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n\"\"\") == \"96\", \"Second\""
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == '96'\nprint('PASS')"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3,1,2]) == \"96\"\nassert solution([4,1,2]) == \"15\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == '96'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '3'\nassert solution('1\\n1\\n') == '1'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\\n2\\n\") == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1,0\") == \"1\"\nassert solution(\"3,4,5,2,2,3\") == \"6\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('10\\n0 0\\n0 1\\n1 0\\n1 1\\n0 0\\n1 0\\n0 1\\n0 2\\n0 3\\n') == '9'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n0 0 1 1 1\\n1 0') == '3'\nassert solution('6\\n0 0 1 1 1\\n1 0') == '4'\nassert solution('6\\n0 0 1 1 1\\n1 0') == '4'\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0 0\n0 1\n1 0\n1 1\n''') == '3'\n\nassert solution('''\n10\n1 1\n0 2\n1 2\n0 3\n1 3\n2 4\n2 5\n3 6\n4 7\n5 8\n''') == '5'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n0\\n0\\n1\\n1\") == \"3\"\nassert solution(\"3\\n0 1\\n0 1\\n0 2\\n\") == \"5\"\n\nNote: This is a sample test; you will have to write your own\nsolution.\n\"\"\""
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n0 0\n0 1\n1 0\n1 1''') == '3', \"sample test 1 failed\"\nassert solution('''5\n0 0\n0 1\n1 0\n1 1\n2 0\n2 1''') == '3', \"sample test 2 failed\"\nassert solution('''10\n0 0\n0 1\n1 0\n1 1\n2 0\n2 1\n3 0\n3 1\n4 0\n4 1\n5 0\n5 1\n6 0\n6 1\n7 0\n7 1\n8 0\n8 1\n9 0\n9 1''') == '8', \"sample test 3 failed\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('10\\n0 0\\n0 1\\n1 0\\n1 1\\n0 1\\n0 2\\n1 1\\n1 1\\n1 0\\n0 2\\n1 1\\n1 1') == '8'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"10\"\nprint(solution())\nassert solution() == \"10\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '10'\nassert solution('3') == '10'\nassert solution('2') == '9'\nassert solution('1') == '9'\nassert solution('5') == '10'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2 8\n3 1\n1 4\n''') == '10 10 9'\nprint(\"Solution = \", solution('''3\n2 8\n3 1\n1 4\n'''))\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '10\\n10\\n10\\n'\nassert solution('2\\n5\\n6\\n4\\n') == '10\\n10\\n8\\n'\nassert solution('3\\n4\\n5\\n1\\n2\\n3\\n') == '10\\n10\\n10\\n'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 8') == '10'\nassert solution('3 1') == '10'\nassert solution('1 4') == '9'\nassert solution('2 5') == '3'"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3 2\\n4 1') == '9'\nassert solution('3\\n6 3\\n8 2\\n4 1\\n7 5\\n1 4') == '10'\nassert solution('8\\n9 2\\n10 4\\n7 2\\n1 6') == '12'\nassert solution('2\\n1 1\\n1 1') == '1'\nassert solution('1\\n1 1') == '1'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"10\\n10\\n9\""
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10 10 9\""
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n2 8\n3 1\n1 4\n''') == '10'\n\n'''"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n1\n2\n\"\"\") == \"10\"\nassert solution(\"\"\"\n2\n1\n1\n\"\"\") == \"10\"\nassert solution(\"\"\"\n2\n2\n2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\n2\n2\n\"\"\") == \"0\""
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n.. #.\\n...\\n...\\n#JF#') == 'IMPOSSIBLE'\nassert solution('4 4\\n#####\\n###.\\n#####\\n#####\\n#JF#') == '3'\nassert solution('5 5\\n#####\\n###.\\n#####\\n#####\\n#JF#') == '4'\nassert solution('4 4\\n###.\\n#JF#') == '2'\nassert solution('4 4\\n###.\\n#####\\n#JF#') == '0'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\\n\") == \"IMPOSSIBLE\"\nassert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\\nF.F#\\n\") == \"3\"\nassert solution(\"4 4\\n####\\n#F#\\n#..#\\n#..#\\nF#F\\n\") == \"4\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"IMPOSSIBLE\"\nassert solution(\"2 2\") == \"IMPOSSIBLE\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"5 4\") == \"4\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n####\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5\\n####\\n#..\\n#..\\n') == 'IMPOSSIBLE'\nassert solution('2 3\\n.J.\\n.J\\n') == '4'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"IMPOSSIBLE\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"5 5\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5\\n###\\n#####') == 'IMPOSSIBLE'\nassert solution('5 5\\n#####\\n#JF#\\n#####') == '4'\nassert solution('5 5\\n#####\\n#.F#\\n#####') == '3'\nassert solution('5 5\\n#####\\n#JF#\\n#####') == '0'\nassert solution('5 5\\n#####\\n#JF#\\n#####') == '0'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"IMPOSSIBLE\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"6 2\") == \"2\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4\\n####\\n#JF#\\n#..#\\n#..#') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"4 4\") == \"3\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 2') == '0.3333333333'\nassert solution('10 1 1') == '0.00694917182'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 2') == '0.3333333333'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 2') == '0.3333333333'\nassert solution('1 1 2') == '0.3333333333'\nassert solution('4 1 2') == '0.166666666667'\nassert solution('1 1 2') == '0.5'\nprint(\"You passed all tests!\")\n\n'''"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 2') == '0.3333333333'\nassert solution('3 6 2') == '0.3030303030'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 2\\n2\\n1 1') == '0.3333333333'\nassert solution('2 3 1\\n4\\n5 6\\n7') == '0.2857142857'\nassert solution('3 4 1\\n8\\n3 1\\n2') == '0.2222222222'\nassert solution('1 1 1\\n4\\n1 1\\n2') == '0.1333333333'\nassert solution('1 1 1\\n4\\n1 1\\n2\\n2\\n2\\n2') == '0.0625'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 2') == '0.3333333333'\n\nIn this problem, we\u2019re going to fix the problem of the above problem, allowing us to solve it in less than linear time. The time complexity of the solution is O(n + m).\n\nGiven the current health of all minions and the health of the opponent\u2019s minions, determine the probability that the Explosion removes all the opponent\u2019s minions.\n\nFor example, suppose that n = 3, m = 1, d = 4.\n\n|---_   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _|\n|   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n| 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n|   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n| 2 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n|   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n| 3 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n|   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n| 4 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n|   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n| 5 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n|   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n| 6 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n|   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n| 7 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n|   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n| 8 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2\") == \"0.3333333333\"\nassert solution(\"1 1 2\") == \"0.3333333333\"\nassert solution(\"1 1 1\") == \"0.3333333333\"\nassert solution(\"1 1 1 1\") == \"0.3333333333\"\nassert solution(\"1 1 1 1 1\") == \"0.3333333333\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == '0.3333333333'\nassert solution('1 1 1') == '1.0'\n\nSample Input 2:\n3 1 1\n1\n1 1\nSample Output:\n0.5\n\"\"\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 2\\n2\\n1 1') == '0.3333333333'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n1\n*''') == '1023'\nassert solution('''\n4\n1\n1\n1\n1\nSample Output:\n1\n''') == '1'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1\n1\n1\"\"\") == \"1023\"\nassert solution(\"\"\"1\n11\n11\"\"\") == \"1023\"\nassert solution(\"\"\"1\n11001000\n11001000\"\"\") == \"1010011\"\nassert solution(\"\"\"1\n11001000\n11001000\"\"\") == \"1010011\"\nassert solution(\"\"\"1\n11001000\n11001000\"\"\") == \"1010011\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('1\\n111') == '1'\nassert solution('1\\n101') == '1'\nassert solution('1\\n110111') == '1'\nassert solution('1\\n1101110111') == '1'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '1\\n1001001001001\\n11000000001000000\\n1111110000000011'\n) == '1023'\n\n\"\"\"\n\n\"\"\"---SOLUTION---\"\"\"\nn = int(input())\np = input()\n\ns = input()"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1\") == \"1024\"\nassert solution(\"10\\n0*\") == \"1024\"\nassert solution(\"10\\n11\") == \"1023\"\nassert solution(\"100\\n101\") == \"101\"\nassert solution(\"100\\n011\") == \"102\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n1*1\n101\n1010\n10111\n110000\n111100\n''') == '1023'\n\nassert solution('''\n7\n1*1\n101\n1010\n10111\n110000\n111100\n1100011\n1101000\n''') == '1042'\n\nassert solution('''\n14\n1*1\n101\n1010\n10111\n110000\n111100\n1100011\n1101000\n11000101\n11010000\n110101011\n1101010001\n1101010101\n110101010\n1101010110\n1101010111\n1101010101\n1101010101\n110101010\n1101010110\n1101010111\n1101010101\n110101010\n''') == '1678'\n\nassert solution('''\n4\n1*1\n101\n1010\n''') == '0'\n\nassert solution('''\n6\n1*1\n101\n1010\n10111\n110000\n111100\n1100011\n1101000\n11000101\n11010000\n''') == '1'"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1023'\n\ninput = '\\n'.join([\n    '3',\n    '1*1',\n])"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1023'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n111\n10''') == '1023'\nassert solution('''5\n1*,1,*1,1,1\nSample Output:\n1023''') == '1023'\nassert solution('''30\n10*1,10*,1,10,1,10,1,1,10,10,10\nSample Output:\n10239''') == '10239'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1') == '1023'\nassert solution('2') == '20'\nassert solution('1\\n1\\n*') == '1023'\nassert solution('2\\n1\\n*') == '1023'\nassert solution('2\\n1\\n1') == '20'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '6'\n\n------------------\n\n-----Explanation-----\nThe main idea is to use a recursive function to calculate the value.\nWe set the initial values of $F_1$ and $F_2$ to 0 and 1 respectively.\n\nFor $i \\ge 2$, $F_i = F_{i-1} + F_{i-2}$.\n\nFor $i \\ge 2$, $F_0 = F_{0, 1} + F_{0, 2}$.\n\nFor $i, j \\ge 1$, $F_{i, j} = F_{i-1, j} + F_{i, j-1}$.\n\nFor $i, j \\ge 1$, $F_i = F_0 + F_i, F_i = F_1 + F_i$.\n\nTherefore, the value of $F_2$ is equal to $6$.\n\n=======\n\n-----Input-----\nThe input consists of only a single line, containing $2$ integers $x$ and $y$ $(0 < x, y < 10^6)$.\n\n-----Output-----\nPrint a single integer\u00a0\u2014 the value of $F_{x, y}$, modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input:\n2 2\nSample Output:\n6\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '6'\nassert solution('5 4') == '8'"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"6\""
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 2\") == \"6\"\nassert solution(\"0 1\") == \"0\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"2 2\") == \"5\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 3') == '7'\nassert solution('5 5') == '14'\n\n'''"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 0\") == \"0\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '6'\nassert solution('1 1') == '2'\nassert solution('2 1') == '4'\nassert solution('1 2') == '3'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string()) == '6'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"6\", 'Your solution is wrong!'\nassert solution(\"2 2\") == \"6\", 'Your solution is wrong!'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"1 0\"\"\") == \"1\"\nassert solution(\"\"\"3 0\"\"\") == \"4\"\nassert solution(\"\"\"1 1\"\"\") == \"6\"\nassert solution(\"\"\"9 9\"\"\") == \"1\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n') == '2930'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n\\n') == 'Impossible'\nassert solution('10\\n7\\n14\\n5\\n4\\n8\\n\\n') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nassert solution('1000 2000 7\\n1000\\n480\\n500\\n550\\n1000\\n1400\\n1500') == 'Impossible'\nassert solution('1\\n2\\n3\\n4\\n5') == 'Impossible'\nprint(\"You're doing it! \ud83c\udf89\ud83c\udf89\ud83c\udf89\ud83c\udf89\ud83c\udf89\")\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == '2930'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == 'Impossible'\nassert solution('1') == 'Impossible'\nassert solution('2') == '12'\nassert solution('3') == '30'\nassert solution('4') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == '2930'\n\"\"\"\nimport math"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == \"2930\"\nassert solution('1000 2000 5\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == \"Impossible\"\nassert solution('1000 2000 3\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == \"3050\"\nassert solution('1000 2000 4\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'Impossible'\nassert solution([100, 480, 500, 550, 1000, 1400, 1500]) == '2930'\nassert solution([100, 100, 100, 100]) == 'Impossible'\nassert solution([1000, 1000, 1000, 1000]) == 'Impossible'\nassert solution([100, 100, 100, 100, 100, 100]) == 'Impossible'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\nSample Output:\n2930\n''') == '2930'\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\nSample Output:\nImpossible\n''') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000 2000 7\\n100') == '2930'\nassert solution('1000 2000 7\\n100\\n1000') == 'Impossible'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 1 3\n0\n0\n0\n1\n2\n''') == '1'\n\nassert solution('''\n4 1 3\n1\n1\n1\n1\n1\n1\n''') == '2'\n\nassert solution('''\n4 1 3\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\nassert solution(\"1 2 3\") == '2'\n\n\"\"\"\nimport math\nn, c, a, b = map(int, input().split())"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('0 0 0') == '0'\nassert solution('1 0 1 2') == '1'\nassert solution('0 0 1 0') == '1'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('4 5 6') == '1'"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('2') == '1'\nassert solution('2 2') == '2'\nassert solution('3') == '1'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '2'\n\n----------------------------------\n\nTo solve this challenge, we need to use some extra tools. The first of the tools is the monkey. We introduce the monkey to the cloud, so that it can be used to store and retrieve objects. The monkey is contained in a fast USB drive and we can bring it to the cloud, so that it can be used to store objects in a cache.\n\n---\n\nIn an optimal solution, we should have a cache of size $c$, and a large amount of RAM, and there should be a monkey in charge of all of that. We\u2019ll go ahead and give you a hint.\n\nLet\u2019s say, that we have $n$ objects. We also have $n$ bytes of RAM and we need to store all the $n$ objects. If we were to store each object in the cache, we would need to store $n$ * $n$ * $n$ bytes.\n\nLet\u2019s see what is the cost of storing a single object in the cache. We use two operations:\n\n- Placing the object into the cache. We need to allocate a fixed amount of RAM to store it. So, we need to allocate $c$ bytes.\n- Getting the object out of the cache. We need to allocate $c$ bytes of RAM to retrieve the object.\n\nIf we are storing only one object in the cache, then the cost of retrieving it is $c$. So, in order to get a good solution, we need to allocate enough RAM to store all the objects.\n\nWe can implement this in python, using the Python module called're'. However, we can write it directly in python, by using simple mathematical operations. This approach is called the *Mathematical Formula* of Least Cost of Storing Objects in a Cache.\n\nFirst, we need to determine the maximum number of objects which can be stored in the cache, as the cache is full of objects when this number is reached. So, we need to determine the max $c$ such that we can store $n$ objects.\n\nWe can write the mathematical formula as,\n\n$$\\max{ c } \\leq \\frac{n}{c} $$\n\nThis formula can be rewritten as,\n\n$$\\max{ c } = \\frac{\\sqrt{n}}{\\sqrt{c}}$$\n\nIn the above equation, $n$ is the number of objects, $c$ is the capacity of the cache, and $\\sqrt{n}$ is the square root of $n$. The square root of $n$ is the number of objects which can be stored in the cache. So, if we are to get $n$ objects, then we need to store $c$ objects. If we are to store $c$ objects, then we need to store $n$ objects.\n\nSo, the formula can be rewritten as,\n\n$$\\max{c} = \\frac{n}{c}$$\n\n$$\\max{c} = \\frac{sqrt{n}}{sqrt{c}}$$\n\n$$\\max{c} = \\frac{sqrt(n)}{c}$$\n\n$$\\max{c} = \\frac{\\sqrt{n}}{c}$$\n\n$$\\max{c} = \\frac{1}{c}$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = \\frac{1}{c}$$\n\n$$\\max{c} = \\frac{1}{c}$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$\\max{c} = 1$$\n\n$$"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 3\n0\n0\n1\n''') == \"2\"\nassert solution('''\n10 11 12\n5\n7\n10\n''') == \"1\"\nassert solution('''\n10 20 30\n5\n15\n''') == \"2\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('10 4 2') == '0'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"2 2 1\") == \"1\"\nassert solution(\"3 3 2\") == \"1\""
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\"\"\") == \"10\"\nassert solution(\"\"\"\n1 1\n1 2\n1 2\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 1\n1 2\n1 2\"\"\") == \"0\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2''') == '10'\nassert solution('''3\n2 2\n-1 -2 -1\n5 4 -5\n2 2''') == '0'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\") == \"10\"\nprint(solution(input()))\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '10'\nassert solution('3 3') == '10'"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"10\"\n\nSample Input:\n2\n-5 -1\n4 1\nSample Output:\n7\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n6\n-10 20 -10\n-10 -20 -10\n-10 -20 -10\n-10 20 -10\n-10 -20 -10\n-10 -20 -10\n\"\"\"\n    ) == \"50\"\n\nassert solution(\n\"\"\"\n4\n-4 -4 -4\n-4 -4 -4\n-4 -4 -4\n-4 -4 -4\n\"\"\"\n    ) == \"2\"\n\nassert solution(\n\"\"\"\n3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n\"\"\"\n    ) == \"12\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '8'\nassert solution('3') == '68'\nassert solution('4') == '180'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2''') == '30'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '10'\nassert solution('5 3 -5') == '10'\nassert solution('5 4 -5') == '2'\nassert solution('3 3') == '10'\nassert solution('5 4 -5') == '2'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 5\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2''') == '10'\nassert solution('''5 5\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2''') == '30'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3100\""
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"3100\"\nassert solution(\"4 3\") == \"3100\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3300'\nassert solution('''\n5 4\n1 2 3000\n2 3 4000\n3 4 5000\n3\n1 4 1000\n1 2 3000\n2 3 4000\n''') == '36000'\nassert solution('''\n5 1\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 1000\n1 2 3000\n2 3 4000\n''') == '3300'\nassert solution('''\n5 2\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 1000\n1 2 3000\n2 3 4000\n''') == '3600'\nassert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 1000\n3 5 1000\n''') == '3600'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 1000\\n1 2 1000\\n2 3 1000\\n2') == '3100'\nassert solution('2 3 1000\\n2 3 1000\\n1 2 1000\\n1') == '10000'\nassert solution('1 4 1000\\n2 5 500\\n4 5 500\\n1 4 1000\\n1') == '15000'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\", \"Test Case 1\"\nassert solution(\"2 5\") == \"\", \"Test Case 2\"\nassert solution(\"4 4\") == \"\", \"Test Case 3\""
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '3100'\nassert solution('1 2 1000') == '1000'\nassert solution('2 3 1000') == '1000'\nassert solution('4 5 500') == '3500'\nassert solution('2') == '1000'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1100'\nassert solution('4 1') == '1000'\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\") == \"3100\"\nassert solution(\"4 5\\n1 2 100\\n3 2 200\\n4 5 200\\n2\") == \"18000\"\nassert solution(\"3\\n1 2\\n3 2\\n4 5\\n2\") == \"12000\"\nassert solution(\"6\\n1 3\\n2 4\\n3 5\\n4 6\\n5\") == \"15000\"\nassert solution(\"1 2\\n4 5\\n6 7\\n5\\n4 3\\n3\") == \"20000\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"10000\"\nassert solution(\"5 3\") == \"15000\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"0 0\") == \"1\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2, 1, 0, 1]) == \"0\"\nassert solution([1, 1, 0, 0]) == \"1\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '0'\n\nassert solution('2 1') == '1'\n\nassert solution('2 5') == '1'\n\nassert solution('3 2') == '0'\n\nassert solution('5 2') == '3'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 1\n0 1\n''') == '0'\nassert solution('''10 10\n0 0\n1 1\n0 2\n0 3\n0 4\n0 5\n1 6\n2 7\n4 8\n6 9\n5 10\n3 11\n4 12\n3 13\n4 14\n5 15\n6 16\n7 17\n6 18\n''') == '19'\nassert solution('''5 3\n1 1\n2 2\n3 3\n4 4\n5 5\n2 2\n''') == '4'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1\n0 1\n''') == '0'\nassert solution('''4 3\n0 0 0 1\n1 1 1 1\n1 1 1 1\n0 1 0 0\n''') == '4'\nassert solution('''3 3\n0 0 0\n1 1 1\n1 1 1\n0 1 0\n''') == '5'\nassert solution('''8 8\n0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n''') == '13'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 4\n0 1\n0 2\n2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 2\n0 1\n0 2\n2 3\n0 4\n4 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 1\n0 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 4\n0 1\n0 2\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 5\n0 1\n0 2\n0 3\n0 4\n0 5\n1 4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([2,1]) == \"0\""
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\n0 1\n''') == '0'\nassert solution('''\n2 2\n0 1 0\n''') == '1'\nassert solution('''\n2 3\n0 1 0\n0 1 0\n''') == '2'\nassert solution('''\n2 4\n0 1 0 0\n0 1 0 0\n0 1 0 0\n''') == '1'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n1 0\n2 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n7\n0 0\n1 0\n1 2\n2 1\n3 2\n3 4\n5 3\n6 5\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 10') == '10'\nassert solution('10 1') == '1'\n\"\"\""
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 10') == '10'"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"10\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 4') == '2'\nassert solution('0 -1') == '1'\n\"\"\""
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 10') == '10'\n\"\"\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 10') == '10'\nassert solution('5 5') == '1'\n\"\"\""
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 10') == '10'\n\nassert solution('1 3') == '2'\n\nassert solution('1 11') == '2'\n\nassert solution('1 200') == '200'\n\nassert solution('1 200') == '200'"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 2') == '11'\n\"\"\"\n\nx, y = map(int, input().split())"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"2 5\") == \"1\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 100') == '95'\nassert solution('1 50000') == '195'\nassert solution('1 100000') == '10000'\nassert solution('1 100000') == '9500'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n0 0\\n1 0\\n0 1\") == \"1\"\nassert solution(\"1 1\\n0 0\\n0 0\") == \"0\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n0 0\n1000 0\n0 1000\n1000 1000\n500 50\n500 -50\n''') == '0'\nassert solution('''\n10\n1000 1000\n500 50\n500 -50\n''') == '1'\nassert solution('''\n10\n0 0\n1000 0\n500 -500\n''') == '1'\nassert solution('''\n10\n0 0\n1000 0\n500 500\n''') == '2'\nassert solution('''\n10\n0 0\n1000 0\n500 -500\n''') == '2'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('3') == '0'"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == '0'"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\nassert solution('2\\n0 0\\n-1 0\\n0 -1\\n1 1\\n-1 -1') == '1'\nassert solution('3\\n0 0\\n1 1\\n-1 -1\\n2 2') == '3'\nassert solution('3\\n0 0\\n1 2\\n1 2\\n2 1\\n2 0') == '1'"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\nassert solution('2\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '1'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 0\n1000 0\n0 1000\n1 1\n''') == '2', \"First\"\nassert solution('''\n4\n0 0\n1000 0\n0 1000\n1000 1000\n''') == '1', \"Second\"\nassert solution('''\n5\n0 0\n100 0\n0 100\n500 0\n100 500\n''') == '3', \"Third\"\nassert solution('''\n10\n10 0\n-10 0\n0 10\n-10 10\n-100 0\n-100 -10\n0 -100\n-100 -100\n''') == '4', \"Fourth\"\nassert solution('''\n10\n0 0\n1000 0\n0 1000\n1000 1000\n''') == '1', \"Fifth\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0'\nSample Input:\n4\n0 0\n-1000 0\n0 -1000\n-1000 -1000\nSample Output:\n1\n\n---\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == \"0\"\nassert solution(open(\"input-test.txt\", \"r\").read()) == \"1\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n0 1 0.5\n1 1 0.5\n0 2 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0 1 0.5\n0"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n0 1 0.5') == '0.500000000 1.000000000'\nassert solution('2 1\\n0 1 0.5\\n0 1 0.5') == '0.500000000 1.000000000'\nprint(solution(input()))\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n0 1 0.5') == '0.500000000 1.000000000'\nassert solution('10 3\\n0 1 0.1 0.3 0.4 0.6 0.8 0.9 0.2 0.5 0.7 0.8 0.7 0.9 0.9') == '0.2 0.4 0.6 0.8 0.7 0.9 -1'"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\n0.5 0.5 0.25\\n1 2 0.25\\n0 0.25') == '0.25 0.25 0.25'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1 0.5') == '0.500000000 1.000000000'\nassert solution('2 2 3.5 3.3 0.4 0.3') == '0.799999998 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '0.500000000 1.000000000'\nassert solution('2 1.5') == '0.500000000 1.000000000'"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1\n0 1 0.5\n''') == '0.500000000 1.000000000', 'First'\nassert solution('''\n2 1\n0 2 0.5\n''') == '0.500000000 1.000000000', 'Second'\nassert solution('''\n2 1\n0 2 0.5\n''') == '0.500000000 1.000000000', 'Third'\nassert solution('''\n2 1\n0 2 0.5\n''') == '0.500000000 1.000000000', 'Fourth'\nassert solution('''\n2 1\n0 1 0.5\n''') == '0.500000000 1.000000000', 'Fifth'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0.500000000 1.000000000', solution('1 1')\nassert solution('5 1') == '0.500000000 1.000000000', solution('5 1')\nassert solution('4 1') == '0.500000000 1.000000000', solution('4 1')\nassert solution('10 1') == '0.500000000 1.000000000', solution('10 1')\nassert solution('8 1') == '0.500000000 1.000000000', solution('8 1')\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 1\n0 1 0.5\n''') == '0.500000000 1.000000000'"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '0.500000000 1.000000000'"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10\n''') == '7'\nassert solution('''\n8\n10 4\n5 4\n6 4\n10 4\n1 1\n5 1\n2 5\n1 5\n1 4\n10 2\n9 1\n10 10\n10 5\n''') == '11'\nassert solution('''\n6\n1 5\n2 2\n3 3\n2 5\n2 4\n4 2\n1 1\n4 5\n4 1\n''') == '7'\nassert solution('''\n5\n1 1\n2 2\n4 3\n5 2\n5 4\n''') == '4'\n\nprint(solution('''\n10\n3 5\n4 3\n5 3\n4 5\n5 3\n6 5\n1 4\n2 4\n4 2\n6 4\n'''))\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"7\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1\n2 2\n3 3''') == '1'\nassert solution('''15\n2 3\n4 2\n3 5\n8 4\n9 5\n8 7\n7 9\n8 2\n6 5\n3 6\n3 4\n7 6\n4 7\n4 5\n5 8\n2 6\n5 5\n5 8\n6 4\n6 7\n6 2\n1 5\n3 3\n4 4\n3 6\n4 8\n3 3\n2 4\n4 4\n2 4\n2 3\n2 4\n4 3\n2 3\n3 4\n2 4\n4 4\n1 4\n2 4\n3 3\n3 2\n2 3\n1 3\n4 3\n1 3\n2 3\n3 4\n3 5\n4 5\n4 5\n2 2\n1 2\n3 2\n2 3\n3 2\n2 3\n2 4\n1 4\n3 3\n3 4\n4 5\n4 5\n4 5\n2 3\n3 5\n4 4\n4 4\n4 4\n3 2\n3 4\n3 3\n3 2\n4 5\n1 2\n1 2\n2 4\n2 5\n2 4\n3 2\n2 4\n3 4\n2 5\n3 4\n3 4\n3 5\n1 5\n1 4\n1 4\n1 2\n2 3\n2 4\n3 2\n2 4\n2 4\n3 4\n1 3\n1 2\n3 4\n3 4\n1 4\n2 4\n2 5\n3 4\n1 5\n2 4\n3 4\n3 4\n3 5\n2 4\n1 2\n1 2\n3 3\n4 3\n3 4\n3 4\n2 3\n2 2\n2 4\n3 2\n4 4\n2 5\n2 4\n2 4\n3 3\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n3 3\n2 3\n2 4\n1 4\n1 4\n1 4\n2 4\n1 4\n3 5\n3 5\n3 5\n3 5\n2 3\n3 3\n2 4\n3 5\n3 5\n3 5\n3 5\n3 5\n2 4\n3 5\n2 5\n3 5\n3 5\n2 4\n2 4\n2 4\n3 4\n2 5\n1 5\n2 4\n1 4\n2 4\n2 4\n2 4\n2 4\n1 4\n2 5\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10') == '7'\nprint(solution(*stdin.split()))\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\\n\") == \"0\\n\"\nassert solution(\"2\\n1 1\") == \"1\\n\"\nassert solution(\"2\\n4 1\") == \"0\\n\"\nassert solution(\"2\\n1 5\") == \"2\\n\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1\\n4 1') == '5'\nassert solution('10\\n1 1\\n10 10') == '10'\nassert solution('10\\n1 5\\n10 10') == '10'\nassert solution('10\\n1 10\\n10 10') == '9'\nassert solution('10\\n1 10\\n10 10') == '10'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10\n''') == '7'\n\nassert solution('''\n5\n1 1\n4 1\n1 2\n10 10\n7 10\n''') == '7'\n\nassert solution('''\n1\n1 1\n''') == '1'\n\nassert solution('''\n4\n1 1\n4 1\n1 5\n10 10\n7 10\n''') == '7'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10''') == '7'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n3\n2 1\n2 5\n1 5\n\"\"\"\n) == \"7\"\n\nassert solution(\n    \"\"\"\n1\n4 1\n1 5\n10 10\n7 10\n\"\"\"\n) == \"7\"\n\nassert solution(\n    \"\"\"\n4\n2 1\n2 5\n1 5\n1 1\n\"\"\"\n) == \"7\"\n\nassert solution(\n    \"\"\"\n1\n4 1\n1 5\n10 10\n4 1\n\"\"\"\n) == \"8\"\n\nassert solution(\n    \"\"\"\n1\n2 3\n1 5\n1 8\n\"\"\"\n) == \"8\""
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8') == '7'"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '9-b'\nassert solution('5') == '8-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '9-b'\nassert solution('''\n1\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\nSample Input:\n3\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\nSample Output:\n9-b\n8-a\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n\"\"\") == \"9-b\"\n\nassert solution(\"\"\"\nb a\n2-b 5-b\n0\n\"\"\") == \"8-a\"\n\nassert solution(\"\"\"\nab ab\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n\"\"\") == \"9-b\"\n\nassert solution(\"\"\"\na b\n2-b 5-b\n3-a 2-b\n2\naba\nbba\n\"\"\") == \"8-a\"\n\nassert solution(\"\"\"\n1\nab ab\n2-b 5-b\n3-a 2-b\n2\naba\nbba\n\"\"\") == \"7-a\""
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\n''') == '9-b'\nassert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\n''') == '8-a'\nassert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\n''') == '5-b'\n'''"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '9-b'\nassert solution('''\na b\na b\n2\naba\nbba\n''') == '8-a'\nassert solution('''\na b\n3-b 5-b\n6-a 2-b\n0\naba\nbba\n''') == '6-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\naba') == 'ba'\nassert solution('2\\nbab') == 'a'\nassert solution('1\\nb') == 'b'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'a'\nassert solution('2') == 'a'\nassert solution('3') == 'b'\nassert solution('4') == 'b'\nassert solution('5') == 'a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\"\"\") == \"8-a\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n\") == \"9-b\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0\") == \"9-b\"\nassert solution(\"2\\nab\\n6-a 2-b\\n3-b 5-b\\n5-b 6-a\\n6-a 2-b\\n0\") == \"8-a\"\n\n-----Hints-----\n* (**) Convert the ** characters into pairs.\n* (**) Consider the sequence abba, with time taken for each of the three pieces $a$ and $b$, the sequence abb, with time taken for the three pieces $a$, $b$ and $b$, and the sequence ab, with time taken for the three pieces $a$ and $b$ and $b$.\n* (**) The problem is a binary knapsack problem. We have $n$ sets of symbols and a weight cap. The problem can be solved by distributing the symbols into sets and assigning weights to each set.\n* (**) The capacity of the knapsack is the sum of the weights of the sets.\n* (**) The minimum time for a piece of type $c$ is the maximum of the minimum time for a piece of type $a$ or for a piece of type $b$, or for a piece of type $c$ with the same type as a piece of type $a$, or for a piece of type $c$ with the same type as a piece of type $b$.\n* (**) If the minimum time is larger than the result, return that result.\n* (**) It may be useful to count up to $k$ total symbols in some block.\n* (**) Each time a piece is assembled, the next piece must be assembled with the same symbols, so the first piece should be a piece of type $a$, second should be a piece of type $b$, and the third should be a piece of type $c$. Thus, the first set of symbols $c$ is the final result.\n* (**) Each set of symbols can be formed in any order, so the final result may be formed in any order.\n* (**) The computation time is $n \\cdot k \\cdot k$ where $n$ is the number of pieces in the sequence, $k$ is the number of types of pieces, and $k$ is the number of types of pieces in each set.\n* (**) Because the computation time can be reduced to $n \\cdot k$, the minimum cost is the minimum value of $k$ over all combinations of $n$ sets of symbols.\n* (**) Note that the first two lines of code in the main loop must be excluded.\n* (**) To simulate the time required for each line, the cost of each line in the table is *subtracted from the minimum cost* and added to the minimum time.\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '3246R3246'\nassert solution('2') == '3246R3246'\nassert solution('3') == '3246U3246'\nassert solution('4') == '3246D3246'\nassert solution('5') == '3246U3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n') == ''\nassert solution('1\\n2\\n3\\n4\\n') == '3246'\n\n------------------------------------------------------------------------------------------------------------------------\n\n--Explaination--\n\nWrite a solution that uses only the digits 2-9 and 6-8.\n\nFor digit 2-9, press the next number of the word.\nFor digit 6-8, press the previous number of the word.\n\nSo, the solution should be to write the correct number of digits to output.\n\nFor example, if we want to type \u201cfirst\u201d, we would have to press\nthe number 7 on \u201c3246\u201d. We then want to press the number 3 on the next word, so we have to press\nthe number 6 on the word \u201cecho\u201d. After the first press, the number 4 on the next word,\nwe want to press the number 1 on the word \u201cechoecho\u201d, which means we should press the number 9 on the next word. And so on.\n\nSo, the total number of keypresses is 1 + (4 * 2) + (2 * 2) + 1 = 12.\n\nSo, the correct keypresses to type the word \u201cfirst\u201d is:\n\nFirst press the number 2 on the next word.\nThen press the number 6 on the word \u201cecho\u201d.\nThen press the number 2 on the word \u201cechoecho\u201d.\nThen press the number 1 on the next word.\n\nSo, the number of keypresses is 3 + 4 + 2 + 1 = 9.\n\nSince the number of keypresses is over the limit of $2^32$, which is $2^{32}$, we want to find a lower limit for our keypresses, then we can output the solution with the least keypresses.\n\n--Example--\n\nSample Input:\n2\necho\necho1\necho5\necho6\n\nSample Output:\n1\n2\n2\n\n--Explaination--\n\nWrite a function, which takes in the integer $n$ and returns the least number of keypresses needed to type all $n$ words using the dictionary.\n\nIf there is no way to type all $n$ words using the dictionary, return -1.\n\nThe number of keypresses can never exceed $2^32$, so return -1 if $n$ exceeds this limit.\n\n--Thinking--\n\nThe idea is to just write the keypresses.\n\n--Solutions--\n\n------------------------------------------------------------------------------------------------------------------------\n\nWrite a solution that uses the same idea as above.\n\nWrite a function that takes in the dictionary and an integer n and returns the number of keypresses needed to type all n words using the dictionary.\n\nNote that the number of keypresses can never exceed $2^32$, so return -1 if n exceeds this limit.\n\n--Explaination--\n\nThis is exactly the same as the previous solution. The only difference is that we will be only using the digits 2-9 and 6-8.\n\n--Explaination--\n\nWrite a function that takes in the dictionary and an integer n and returns the number of keypresses needed to type all n words using the dictionary.\n\nNote that the number of keypresses can never exceed $2^32$, so return -1 if n exceeds this limit.\n\n--Example--\n\nSample Input:\n{'abcdefg': 1, 'bcd': 2, 'cde': 3, 'efg': 4, 'fgh': 5}\n2\nSample Output:\n1\n2\n\n--Explaination--\n\nThe keypresses used in the example is:\n\nFirst press the number 2 on the next word.\nThen press the number 6 on the word \u201cabcdefg\u201d.\nThen press the number 2 on the word \u201cbcd\u201d.\nThen press the number 3 on the word \u201ccde\u201d.\nThen press the number 4 on the word \u201cefg\u201d.\nThen press the number 5 on the word \u201cfgh\u201d.\n\nSo, the number of keypresses is 1 + (2 * 2) + 2 + 3 = 6.\n\nWrite a function that takes in the dictionary and an integer n and returns the number of keypresses needed to type all n words using the dictionary.\n\nNote that the number of keypresses can never exceed $2^32$, so return -1 if n exceeds this limit.\n\n--Example--\n\nSample Input:\n{'abcdefg': 1, 'bcd': 2, 'cde': 3, 'efg': 4, 'fgh': 5}\n2\nSample Output:\n1\n2\n\n--Explaination--\n\nThe keypresses used in the example is:\n\nFirst press the number 2 on the next word.\nThen press the number 6 on the word \u201cabcdefg\u201d.\nThen press the number 2 on the word \u201cbcd\u201d.\nThen press the number 3 on the word \u201ccde\u201d.\nThen press the number 4 on the word \u201cefg\u201d.\nThen press the number 5 on the word \u201cfgh\u201d.\n\nSo, the number of keypresses is 1 + (2 * 2) + 2 + 3 = 6.\n\nWrite a function that takes in the dictionary and an integer n and returns the number of keypresses needed to type all n words using"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\necho\\necho\") == \"3246R3246\"\nassert solution(\"1\\necho\\necho\\necho\\necho\\necho\") == \"3260R3260R3260R3260R3260\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"3246\"\nassert solution(\"2\") == \"3246\"\nassert solution(\"3\") == \"3246\"\nassert solution(\"4\") == \"3246\"\nassert solution(\"5\") == \"3246\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3246R3246'\nassert solution('4') == '4255D45D'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"6\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '3246'\nassert solution('2') == '3246'\nassert solution('3') == '3246'\nassert solution('4') == '3246'\nassert solution('5') == '3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"3246\"\nassert solution(\"2\") == \"3246R3246\"\n\n'''"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n3\n1\n2\n3\n2\n1\n1\n1\n\"\"\") == \"\"\"2\"\"\".strip()\n\nassert solution(\"\"\"\n3\n3\n1\n2\n3\n2\n1\n1\n1\n\"\"\") == \"\"\"3\"\"\".strip()\n\nassert solution(\"\"\"\n1\n3\n3\n2\n3\n2\n1\n1\n1\n\"\"\") == \"\"\"3\"\"\".strip()\n\nassert solution(\"\"\"\n1\n3\n3\n2\n3\n2\n1\n1\n1\n\"\"\") == \"\"\"0\"\"\".strip()\n\nassert solution(\"\"\"\n1\n3\n3\n2\n3\n2\n1\n1\n1\n\"\"\") == \"\"\"0\"\"\".strip()"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\nB\n1\nB\n2\nA\n3\n\"\"\") == \"BAD\"\n\nassert solution(\"\"\"\n1\nA\n1\nA\n2\nB\n3\n\"\"\") == \"AUG\"\n\nassert solution(\"\"\"\n1\nB\n2\nC\n3\n\"\"\") == \"AUG\"\n\nassert solution(\"\"\"\n1\nB\n3\nD\n4\n\"\"\") == \"BAD\"\n\nassert solution(\"\"\"\n1\nB\n3\nE\n4\n\"\"\") == \"BAD\""
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1\n1 2\n1 3''') == 'YES'\nassert solution('''3 2\n1 2\n1 3''') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"YES\"\nassert solution(\"4 1\") == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"3 2\") == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1\n1 2\n1 3''') == 'YES'\nassert solution('''2 3\n1 2\n1 2''') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == 'YES'\nassert solution('2 2') == 'NO'"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3'\nassert solution('2 1') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"YES\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"5 1\") == \"YES\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 1\n1 2''') == 'NO'\nassert solution('''3 1\n1 3''') == 'YES'\nassert solution('''3 1\n1 3\n1 1''') == 'YES'\nassert solution('''3 1\n1 3\n1 2''') == 'YES'\nassert solution('''3 3\n1 1\n2 2\n2 3''') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"YES\"\nassert solution(\"3 1\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"5 2\") == \"YES\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == 'YES'\nassert solution('5 1') == 'NO'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '176'\nassert solution('2') == '58'\nassert solution('3') == '30'"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '18'\nassert solution('10') == '42'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"111\", \"Normal test\"\nassert solution(\"5\") == \"1204\", \"Special test\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('6') == '176'\nassert solution('1000000') == '4194304'\nassert solution('11111111111111111111111111111') == '18446744073709551615'\nprint('All tests passed')"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"276\"\nassert solution(\"4\") == \"496\"\nassert solution(\"2\") == \"176\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"9\") == \"176\"\nassert solution(\"1\") == \"176\"\nassert solution(\"6 6\") == \"176\"\nassert solution(\"333333\") == \"176\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333''') == '176'\nassert solution('''7\n1\n5 5\n111111\n222222\n333333\n4 4\n4 4\n4 4\n4 4''') == '224'\nassert solution('''8\n1\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4''') == '72'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"3\n3\n5 5\n33333\n33333\n33333\n33333\n33333\n\"\"\") == \"176\"\n\nassert solution(r\"\"\"7\n1\n7\n111111\n111111\n111111\n111111\n111111\n111111\n\"\"\") == \"195\"\n\nassert solution(r\"\"\"5\n1\n10\n101\n101\n101\n\"\"\") == \"81\"\n\nassert solution(r\"\"\"4\n3\n4\n11111\n111111\n111111\n\"\"\") == \"66\"\n\nassert solution(r\"\"\"2\n1\n2\n1111\n1111\n1111\n\"\"\") == \"16\""
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n1\n2\n2\n2\n1\n3\n3\n2\n2\n2\n2\n1\n1\n1\n''') == '177'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '9'\nassert solution('6') == '37'\nassert solution('1') == '18'\nassert solution('6') == '96'\nassert solution('6') == '94'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '12'\nassert solution('123') == '123'\nassert solution('9999') == '999'\nassert solution('12345') == '123'\nassert solution('123445') == '1234'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"12\") == \"012\"\nassert solution(\"100\") == \"012\"\nassert solution(\"12345\") == \"012345\"\nassert solution(\"1234\") == \"01234\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('999') == '999'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '12'\nassert solution('5') == '12'\n\"\"\""
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n''') == '12'\nassert solution('''\n10\n''') == '10'\nassert solution('''\n1\n''') == '1'\nassert solution('''\n20\n''') == '2'\nassert solution('''\n1010\n''') == '101'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12') == '012'\nassert solution('1234') == '1234'\nassert solution('12345') == '12345'\nassert solution('123456') == '123456'\nassert solution('1234567') == '1234567'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '012'\nassert solution('7') == '07'\nassert solution('16') == '016'\nassert solution('1234') == '123'\nassert solution('8') == '08'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4') == '4'\nassert solution('5') == '12'\nassert solution('7') == '7'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\", \"Test #1: Empty string\"\nassert solution(\"123456789101112131415161718\") == \"1234567\", \"Test #2: Single digit\"\nassert solution(\"12345678910111213141516171899\") == \"123456789\", \"Test #3: Three digits\"\nassert solution(\"1234\") == \"123\", \"Test #4: Single digit with trailing zeroes\"\nassert solution(\"1234000\") == \"1234\", \"Test #5: Single digit with trailing zeroes and trailing zeroes\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '12'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == '?', 'Should be \"?\"'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '?'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 1\n((()\n480\n617\n-570\n928\n''') == '?', 'Should be a question mark'\n\nassert solution('''\n4 1\n(())\n480\n617\n-570\n928\n''') == '?', 'Should be a question mark'\n\nassert solution('''\n4 1\n((()\n480\n617\n-570\n928\n''') == '?', 'Should be a question mark'\n\nassert solution('''\n4 1\n((()\n480\n617\n-570\n928\n''') == '?', 'Should be a question mark'\n\nassert solution('''\n4 1\n(((\n480\n''') == '?', 'Should be a question mark'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 1\n((()\n480\n617\n-570\n928\n''') == '?', 'Not Correct Answer'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 1') == '?', \"Test 1 Failed\"\nassert solution('4 2') == '?', \"Test 2 Failed\"\nassert solution('4 3') == '?', \"Test 3 Failed\"\nassert solution('4 4') == '480', \"Test 4 Failed\"\nassert solution('4 5') == '?', \"Test 5 Failed\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"??\"\nassert solution(\"2 2\") == \"??\"\nassert solution(\"5 3\") == \"??\"\nassert solution(\"10 10\") == \"??\"\nassert solution(\"3 1\") == \"480\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n(((()((((()((((()((((()())))))))))))))))))\n''') == '?', 'Too difficult'\n\nassert solution(\n'''\n(((((((()((((()((((()((((()())))))))))))))))))\n''') == '480', 'Easy'\n\nassert solution(\n'''\n(((((((()(((((()()))))))))\n''') == '?', 'Too difficult'\n\nassert solution(\n'''\n(((((((()(((((()(((((())))))))))))))))))\n''') == '480', 'Easy'\n\nassert solution(\n'''\n(((((((()(((((()()))))))))))))\n''') == '480', 'Easy'"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"??\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == '?', \"Should be '?'\"\nSample Input:\n5 2\n(())\n7\n1\n-1\n100\nSample Output:\n2\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"??\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12') == '5 6\\n7 8 9 10 11 12 13'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n3 1 3 5\n2 2 4\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '2 4'\nassert solution('''\n4\n3 1 3 5\n2 2 4\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == 'None'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\\\n3\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\nSample Output:\n2 4\n5 6\n7 8 9 10 11 12 13\n''') == '2 4\\n5 6\\n7 8 9 10 11 12 13\\n'''\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('13') == '1 2 3 4 5 6 7 8 9 10 11 12 13'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n2 1 3 5\n3 1 3 6\n2 2 4\n3 1 3 6\n2 2 4\n3 1 3 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n\"\"\") == \"none\"\n\nassert solution(\"\"\"\n4\n2 1 3 5\n3 1 3 6\n2 2 4\n3 1 3 6\n2 2 4\n3 1 3 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n\"\"\") == \"2 4 5 6 7 8 9 10 11 12 13\"\n\nassert solution(\"\"\"\n10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n2 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 3\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n4 4\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n6 6\n6 7\n6 8\n6 9\n6 10\n7 7\n7 8\n7 9\n7 10\n8 8\n8 9\n8 10\n9 9\n9 10\n10 10\n\"\"\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n') == '2 4\\n5 6\\n7 8 9 10 11 12 13\\n'\nprint(solution(input()))\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n12\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\nSample Output:\n2 4\n5 6\n7 8 9 10 11 12 13\n\"\"\") == \"5 6\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\nSample Output:\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\\n\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n') == '5 6\\n7 8 9 10 11 12 13'\nassert solution('20\\n1 1 2\\n4 4 5\\n5 3 5\\n6 6 6\\n6 6 6\\n7 7 7\\n7 7 7\\n7 7 7\\n7 8 8\\n7 8 8\\n7 8 8\\n7 9 9\\n7 9 9\\n7 9 9\\n') == '1 2\\n3 5\\n5 6\\n7 9\\n9 8\\n8 7\\n7 7\\n7 6\\n7 5\\n5 7\\n7 5\\n7 6\\n6 7\\n6 7\\n6 7\\n6 8\\n6 8\\n6 8\\n6 9\\n6 9\\n6 9\\n6 10\\n6 10\\n6 10\\n'\nassert solution('20\\n1 1 2\\n4 4 5\\n5 3 5\\n6 6 6\\n6 6 6\\n7 7 7\\n7 7 7\\n7 7 7\\n7 8 8\\n7 8 8\\n7 8 8\\n7 9 9\\n7 9 9\\n7 9 9\\n') == '1 2\\n3 5\\n5 6\\n7 9\\n9 8\\n8 7\\n7 7\\n7 6\\n7 5\\n5 7\\n7 5\\n7 6\\n6 7\\n6 7\\n6 7\\n6 8\\n6 8\\n6 8\\n6 9\\n6 9\\n6 9\\n6 10\\n6 10\\n6 10\\n6 11\\n6 11\\n6 11\\n6 12\\n6 12\\n6 12\\n6 13\\n6 13\\n6 13\\n6 14\\n6 14\\n6 14\\n6 15\\n6 15\\n6 15\\n6 16\\n6 16\\n6 16\\n6 17\\n6 17\\n6 17\\n6 18\\n6 18\\n6 18\\n6 19\\n6 19\\n6 19\\n6 20\\n6 20\\n6 20\\n'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '5 6 7 8 9 10 11 12 13':\n    print('Correct')\nelse:\n    print('Wrong')\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"35 39 36 27 29\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n\"\"\"\n) == \"\"\"35 39 36 27 29\"\"\"\nassert solution(\n    \"\"\"\n100 100\n1 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n\"\"\"\n) == \"\"\"929 847\"\"\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n'''\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"35 39 36 27 29\"\nassert solution(\"10 10\") == \"731 761 763 773 781 783 787 793 797\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"35 39 36 27 29\""
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '35 39 36 27 29'\nassert solution('''\n2 3\n1 4 8\n3 5 4\n''') == '10 18 20 20'\nassert solution('''\n4 3\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '7 19 9 19'\nassert solution('''\n3 1\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '9 16 9 16'\nassert solution('''\n3 2\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '7 16 9 16'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n\"\"\") == \"\"\"35 39 36 27 29\"\"\"[1:]"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '''\n35 39 36 27 29'''\n\nassert solution('''\n3\n1 2\n1 4\n2 3\n''') == '''\n27 36'''\n\nassert solution('''\n4\n1 2\n1 3\n1 4\n2 3\n''') == '''\n36 27 29'''\n\nassert solution('''\n7\n1 2 3 4 5 6\n1 2 3 6 5 4\n1 3 4 2 5 6\n1 3 4 5 6 2\n1 4 5 2 3 6\n1 4 5 6 3 2\n1 5 6 2 3 4\n''') == '''\n35 39 36 27 29'''\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5') == '35 39 36 27 29'"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 1') == '0 672'\nassert solution('1 2 3') == '1 0 0'\nassert solution('3 3 0') == '1 0 0'\nassert solution('2 2 3') == '1 0 0'\nassert solution('1 2 2') == '0 672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n2 1 2 3 1') == '0 672'\nassert solution('3 4\\n4 3 2 4') == '1 1026'\nassert solution('4 4\\n4 3 2 4') == '0 672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '0 672'\nassert solution('2 4') == '1 2 1'\n\"\"\""
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5 2 1\") == \"1 4\"\nassert solution(\"1 2 3\") == \"0 4\"\n\"\"\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n3 2 1') == '0 672'\nassert solution('1 4\\n2 3') == '0 14'\nassert solution('2 2\\n3 3') == '1 4'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4\n2 1 2 3\n''') == '0 5'\n\nassert solution('''\n4 3\n3 2 1 4\n''') == '0 5069'\n\nassert solution('''\n5 7\n5 7 9 2 4\n''') == '0 5175'\n\nassert solution('''\n6 7\n6 4 5 7 6 4 6\n''') == '0 5071'\n\nassert solution('''\n8 1\n6 7 1 3 3 3 1 4 1\n''') == '0 933'"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n3 2 1\n''') == '0 672'\nassert solution('''\n3 2\n1 3 4\n''') == '2 873'\nassert solution('''\n3 4\n1 3 4 5 6\n''') == '0 1666'\nassert solution('''\n3 4\n1 3 4 5 6\n''') == '2 527'\nassert solution('''\n2 1\n3 2 1\n''') == '0 270'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3, 2, 1]) == \"0 672\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '0 672'\nassert solution('3 3') == '0 672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 2 1\n''') == '0 672'\nassert solution('''\n3 4\n3 1 1 1\n''') == '0 672'\nassert solution('''\n3 5\n1 1 1 1 1\n''') == '0 1703'\n''')\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n') == '2.500000'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\nassert solution('3 2 100\\n1 10 10\\n2 10 5\\n2 20 35\\n2 40 50') == 'Impossible'\nassert solution('3 1 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == 'Impossible'"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 5 100\\n\"\n    \"0 10 10\\n\"\n    \"1 10 5\\n\"\n    \"1 20 35\\n\"\n    \"2 2 18\\n\"\n    \"2 40 50\\n\"\n) == \"2.50000\"\nprint(solution(\n    \"4 5 100\\n\"\n    \"0 10 10\\n\"\n    \"1 10 5\\n\"\n    \"1 20 35\\n\"\n    \"2 2 18\\n\"\n    \"2 40 50\\n\"\n))\nassert solution(\n    \"4 5 100\\n\"\n    \"0 10 10\\n\"\n    \"1 10 5\\n\"\n    \"1 20 35\\n\"\n    \"2 2 18\\n\"\n    \"2 40 50\\n\"\n) == \"Impossible\"\nprint(solution(\n    \"4 5 100\\n\"\n    \"0 10 10\\n\"\n    \"1 10 5\\n\"\n    \"1 20 35\\n\"\n    \"2 2 18\\n\"\n    \"2 40 50\\n\"\n))\nassert solution(\n    \"4 5 100\\n\"\n    \"0 10 10\\n\"\n    \"1 10 5\\n\"\n    \"1 20 35\\n\"\n    \"2 2 18\\n\"\n    \"2 40 50\\n\"\n) == \"2.50000\"\nprint(solution(\n    \"4 5 100\\n\"\n    \"0 10 10\\n\"\n    \"1 10 5\\n\"\n    \"1 20 35\\n\"\n    \"2 2 18\\n\"\n    \"2 40 50\\n\"\n))\nassert solution(\n    \"4 5 100\\n\"\n    \"0 10 10\\n\"\n    \"1 10 5\\n\"\n    \"1 20 35\\n\"\n    \"2 2 18\\n\"\n    \"2 40 50\\n\"\n) == \"Impossible\"\nprint(solution(\n    \"4 5 100\\n\"\n    \"0 10 10\\n\"\n    \"1 10 5\\n\"\n    \"1 20 35\\n\"\n    \"2 2 18\\n\"\n    \"2 40 50\\n\"\n))\nassert solution(\n    \"4 5 100\\n\"\n    \"0 10 10\\n\"\n    \"1 10 5\\n\"\n    \"1 20 35\\n\"\n    \"2 2 18\\n\"\n    \"2 40 50\\n\"\n) == \"2.50000\"\nprint(solution(\n    \"4 5 100\\n\"\n    \"0 10 10\\n\"\n    \"1 10 5\\n\"\n    \"1 20 35\\n\"\n    \"2 2 18\\n\"\n    \"2 40 50\\n\"\n))\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == '2.50000'\nassert solution('''\n5 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"Impossible\"\nassert solution(\"1\\n2\") == \"1\"\nassert solution(\"1\\n2\\n3\") == \"2\"\nassert solution(\"1\\n2\\n3\\n4\") == \"2\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"2\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == \"2.500000\"\nprint(solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n'''))\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5 100\") == \"2.500000\"\nassert solution(\"4 5 0\") == \"Impossible\"\nassert solution(\"5 5 100\") == \"2.500000\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n-----Input-----\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n\n-----Output-----\n2.500000\n''') == '2.500000'\nassert solution('''\n-----Input-----\n3 2 100\n0 0 0\n1 0 2\n2 0 5\n\n-----Output-----\nImpossible\n''') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == \"2.500000\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == 'Impossible'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\\n\"\n    \"5 3 4\"\n    ) == \"3\"\nassert solution(\n    \"3\\n\"\n    \"5 2 4\"\n    ) == \"4\"\nassert solution(\n    \"3\\n\"\n    \"5 1 4\"\n    ) == \"5\"\nassert solution(\n    \"3\\n\"\n    \"5 3 2\"\n    ) == \"5\"\nassert solution(\n    \"5\\n\"\n    \"5 1 4 2\"\n    ) == \"5\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n5 3 4\n''') == '3'\nassert solution('''\n1\n3\n''') == '0'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5 3 4\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n5 3 4') == '3'\nassert solution('10\\n3 2 9 1 5 6 8 7 4 4') == '8'\nassert solution('1000000000\\n9999999999 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n5 3 4\\n') == '3'\nassert solution('4\\n10 2 7 5\\n') == '3'\nassert solution('4\\n3 4 4\\n') == '4'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5 3 4\") == \"3\"\nassert solution(\"6\\n7 8 9 10 11 12\") == \"5\"\nassert solution(\"12\\n7 8 9 10 11 12 13 14 15 16 17\") == \"7\"\nassert solution(\"6\\n7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"7\"\nassert solution(\"6\\n7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"10\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n5 3 4') == '3'\nassert solution('2\\n1 1 1') == '2'\nassert solution('2\\n2 2 2') == '1'\nassert solution('2\\n1 1 1') == '2'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2 3 4\") == \"1\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1 1\n2 2 1\n4 4 2\n4 4 2''') == '4'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"4 5 7\") == \"14\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1') == '2'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1 1') == '2'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 1') == '2'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == stdout_string\n\"\"\"\n\nN, X, Y = (int(input()) for _ in range(3))\n\nans = (X * (X-1) + (Y * (Y-1) + 2 * N * (N-1) ) ) % 1000000007\n\nprint(ans)\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 1') == '2'\nassert solution('10 1 10') == '6'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"3 1 3\") == \"7\"\nassert solution(\"4 4 4\") == \"84\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == \"2\""
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1 1 1\") == \"2\"\nassert solution(\n    \"4 2 2\") == \"6\"\nassert solution(\n    \"10 10 10\") == \"220\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 3 5\\n\") == \"7\"\nassert solution(\"1 3 5\\n2 3 5\\n1 3 5\\n\") == \"7\"\nassert solution(\"3\\n3 5 6\") == \"3\"\nassert solution(\"0\\n0\") == \"1\"\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 5') == '7'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4 9\\n') == '11'\nassert solution('2 5 4 1 3 6 7\\n') == '23'\nassert solution('3 5 3 4 7 8 1 2 6\\n') == '19'\nassert solution('1\\n') == '1'"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"7\"\nassert solution(\n        [\n            \"1\",\n            \"3\",\n            \"5\"\n        ]\n    ) == \"7\"\nassert solution(\n        [\n            \"4\",\n            \"3\",\n            \"2\",\n            \"1\"\n        ]\n    ) == \"5\"\nassert solution(\n        [\n            \"100\",\n            \"101\",\n            \"1\",\n            \"1\"\n        ]\n    ) == \"100\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"7\""
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"-1 2 -3\") == \"0\"\nassert solution(\"1 1 2 2 3 3\") == \"3\""
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == \"2\""
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '1'\nassert solution('3\\n') == '6'\nassert solution('4\\n') == '3'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '5'\nassert solution('1') == '3'\nassert solution('5') == '7'\n'''\n\n'''\nSAMPLE INPUT:\n\n6\n1 3 5 7 8 9\nSAMPLE OUTPUT:\n\n7\n'''\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == '''\njohn jets\nruth rockets'''\n\nassert solution('''\n1\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nruth platypus 1 rockets\n''') == '''\nruth rockets'''\n\nassert solution('''\n1\nplatypus 2 rockets\n''') == '''\nplatypus rockets'''\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1\n''') == '''\njohn jets\nruth rockets\n'''\nassert solution('''\n3\nfred dinosaur 2\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\n''') == '''\njohn rhinocerous rockets\nruth platypus 1\n'''\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'john jets'\nassert solution(input()) == 'ruth rockets'\nassert solution(input()) == 'ruth jets'"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"Impossible.\"\nassert solution(\"2\") == \"john jets\"\nassert solution(\"4\") == \"ruth rockets\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1\n''') == '''\nfred jets\njohn jets\nruth rockets\n'''\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n1\n2\n3\n1\n\"\"\") == \"\"\"\n3\n3\n\"\"\", \"\"\"\n1\n1\n2\n2\n1\n\"\"\")\nassert solution(\"\"\"\n2\n2\n2\n2\n\"\"\") == \"\"\"\nImpossible\nImpossible\n\"\"\", \"\"\"\n2\n1\n1\n\"\"\")"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n11\nanna billiams 3 darkrose\nanna billiams 4 darkrose\nanna billiams 4 darkrose\nharry dunce 3 darkrose\nharry dunce 4 darkrose\nharry dunce 4 darkrose\n''') == 'anna billiams darkrose darkrose darkrose darkrose'\nassert solution('''2\n4\ndavid brown 4 darkrose\ndavid brown 4 darkrose\nharry dunce 4 darkrose\nharry dunce 4 darkrose\n''') == 'david brown darkrose darkrose darkrose'\nassert solution('''1\n3\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1\n''') == 'fred dinosaur jets'\nassert solution('''2\n2\ndavid brown 4 darkrose\ndavid brown 4 darkrose\nharry dunce 4 darkrose\nharry dunce 4 darkrose\n''') == 'david brown darkrose darkrose darkrose darkrose'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets') == 'john jets\\nruth rockets'\nassert solution('5\\n2\\nfred dinosaur 2 jets\\njohn rhinocerous 2 jets\\nmary rhinocerous 2 jets\\nruth platypus 1 rockets') == 'john jets\\nmary rhinocerous jets\\nruth rockets'"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"Impossible.\\n\"\nassert solution(\"4\") == \"john jets\\n\"\nassert solution(\"5\") == \"ruth rockets\\n\"\nassert solution(\"6\") == \"mary rhinocerous jetsons\\n\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"Impossible\"\nassert solution(\"3\") == \"Impossible\"\nassert solution(\"4\") == \"Impossible\""
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1 2 1\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2\n4 3\n-10 9\n-2 3\n\"\"\") == \"1 2 1\"\nassert solution(\"\"\"\n1\n3\n-10 9\n\"\"\") == \"1 1 1\"\nassert solution(\"\"\"\n1\n2\n-10 9\n\"\"\") == \"2 1 1\"\nassert solution(\"\"\"\n1\n3\n-10 9\n\"\"\") == \"2 1 1\"\nassert solution(\"\"\"\n2\n1\n2\n\"\"\") == \"0 0 0\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"2 1 1 1\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 3\") == \"1 2\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n4 3\n-10 9\n-2 3\n''') == '1 2 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"1\\n1\") == \"2\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n4 3\n-10 9\n-2 3''') == '1 2 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n4 3\\n-10 9\\n-2 3') == '1 2 1'\nassert solution('3\\n1 10\\n3 -5') == '2 1'"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    1 2\n    -10 9\n    -2 3\n''') == '1 2 1'"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n-1 5\n-2 3\n''') == '3 1 2'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1 7\n3 2 3\n5 1 4\n6 10 10''') == '2.125'\nassert solution('''1\n1 7\n3 2 3\n5 1 4\n6 10 10''') == '1.667'\nassert solution('''2\n3 2 3\n5 1 4\n6 10 10''') == '2.167'\nassert solution('''2\n3 2 3\n5 1 4\n6 10 10''') == '1.667'\nassert solution('''10\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 9 8\n7 3 2\n7 5 6\n8 1 2\n8 4 9\n9 7 6\n9 1 2\n9 5 8\n10 1 4\n10 6 7\n10 8 9''') == '4.85714285714'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 7\") == \"2.125\"\nassert solution(\"3 2 3\") == \"2\"\nassert solution(\"5 1 4\") == \"4\"\nassert solution(\"6 10 10\") == \"4\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 1 7\n3 2 3\n5 1 4\n6 10 10''') == '2.125'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2.125'\nassert solution('3') == '2.125'\nassert solution('3') == '2.125'\n'''"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125'\nassert solution('''\n5\n1 1 6\n2 2 4\n4 4 6\n6 6 7\n''') == '3.0'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"\n7\n3 4 3\n5 1 2\n6 9 8\n7 7 7\n4 1 2\n2 3 5\n1 1 2\n2 2 4\n7 1 3\n2 3 7\n2 5 4\n3 1 4\n\"\"\") == \"2.125\"\nassert solution(r\"\"\"\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 7 7\n4 1 2\n2 3 5\n1 1 2\n2 2 4\n7 1 3\n2 3 7\n2 5 4\n3 1 4\n\"\"\") == \"2.112\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 1 7\n3 2 3\n5 1 4\n6 10 10\nSample Output:\n2.125\n''') == '2.125'\nassert solution('''\n9\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 7 7\n8 8 8\n9 9 9\nSample Output:\n2.25\n''') == '2.25'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 7\") == \"2.125\"\nassert solution(\"4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\nassert solution(\"1\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\nassert solution(\"2\\n1 1 7\") == \"2.125\"\nassert solution(\"3\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\", \"def\", \"solution\"]\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"abc\") == \"a\"\nassert solution(\"a.c\") == \"a.c\"\nassert solution(\"*.*\") == \"*.*\"\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"*.*\") == ['main.c', 'a.out', 'def','solution','readme']\n\n\n'''"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\", \"readme\"]\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\nassert solution(\"*\") == []\nassert solution(\"a\") == []\nassert solution(\"a.b.c\") == []\nassert solution(\"*.py\") == [\"main.py\"]\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"*.*\") == \"main.c\\n\" + \"a.out\\n\"\nassert solution(\"*.c\") == \"main.c\\n\"\nassert solution(\"*.py\") == \"\"\n\"\"\""
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == ['main.c']\nassert solution(input()) == ['a.out']\nassert solution(input()) == ['readme']\n\"\"\"\nimport re\n\npattern = r\"^\\w*$\"\npattern = re.compile(pattern)\n\nn = int(input())\ndirectory = {}\nfor i in range(n):\n    name = input()\n    match = pattern.match(name)\n    if match:\n        directory[name] = 1\n\nfor name, val in directory.items():\n    if val == 1:\n        print(name)"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n*.*\n3\nfoo.c\nbar.c\nbaz.c\n''') == 'foo.c, bar.c, baz.c'\n\"\"\"\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == [\"main.c\", \"a.out\", \"readme\"]\nSample Input 2:\n*.*\n8\na.out\na.c\ny.out\nREADME\nmain.c\n*.c\nREADME\nSample Output 2:\nmain.c\na.c\nREADME\ny.out\nSample Input 3:\n*.*\n8\na.out\nmain.c\n*.c\nREADME\nSample Output 3:\nmain.c\n*.*\nSample Input 4:\n*.c\n8\na.out\nmain.c\nREADME\nSample Output 4:\nmain.c\na.out\nSample Input 5:\n*.c\n8\nmain.c\nREADME\nSample Output 5:\nmain.c\na.out\nSample Input 6:\n*.c\n8\nREADME\nSample Output 6:\n[]\n\n\"\"\"\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input()) =='main.c\\na.out\\nreadme'\nassert solution(other_input()) =='main.c\\na.out\\nreadme\\ndef solution(stdin: str) -> str:\\n    pass\\n\\nassert solution(sample_input()) =='main.c\\na.out\\nreadme'\nassert solution(other_input()) =='main.c\\na.out\\nreadme\\ndef solution(stdin: str) -> str:\\n    pass\\n\\nassert solution(sample_input()) =='main.c\\na.out\\nreadme'\n\"\"\"\n\nimport re\n\nsample_input = \"\"\"\n*.*\n4\nmain.c\na.out\nreadme\nyacc\n\"\"\"\n\nother_input = \"\"\"\n*.*\n4\nmain.c\na.out\nreadme\nyacc\n\"\"\"\n\nsample_output = \"\"\"\nmain.c\na.out\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '0.500000'\nassert solution('1 2') == '0.250000'\nassert solution('1 3') == '0.125000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0.500000'\n\nSample Input:\n5 100\n0.500000 0.500000 0.500000 0.500000 0.500000\nSample Output:\n0.5\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\nn_list, m_list = list(map(float, input().split())), list(map(float, input().split()))\n\nx = 0\nfor i in range(n + m - 1):\n    x += math.log(n_list[i]) - math.log(m_list[i])\nx = math.exp(x)\nprint(x)"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1\\n0.500000\\n') == '0.500000'\nassert solution('100 100\\n0.500000\\n') == '0.500000'\nassert solution('10 10\\n0.500000\\n') == '0.500000'\nassert solution('1 1\\n0.500000\\n') == '0.500000'\nassert solution('0.5\\n0.500000\\n') == '0.500000'\n\"\"\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '0.5'\n'''\n\nN, M = map(int,input().split())\n\np = list(map(float,input().split()))\n\nprint('{:.6}'.format(p[N]*M/p[M]))\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\nassert solution('1 2\\n0.500000 0.500000') == '0.500000'\nassert solution('1 2\\n0.502000 0.502000') == '0.500000'\nassert solution('1 2\\n0.500001 0.500001') == '0.500001'\nassert solution('1 2\\n0.500000 0.500000 0.500000 0.500000') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\nprint('Almost done! Go ahead and Check!')\n\"\"\"\n\n\nclass Solution:\n    def solve(self, N, M):\n        return \"{:.6f}\".format(1 - ((N + M - 1) / (M + N))**M)\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n0.500000\\n0.500000\\n0.500000\\n0.500000\\n0.500000\\n') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\n\"\"\"\n\nfrom math import *\n\nn,m = map(int, input().split())\na,b = map(float, input().split())\np = 0\nfor i in range(n,m+1):\n    p += 1/(i) - sqrt(1/(2*i) -1)\nprint('{:.10f}'.format(p))\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n20 3\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0."
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0 49.5') == '-0.6'\nassert solution('1.5 1.9') == '0.3'\nassert solution('1.8 0.8') == '-0.3'\n\nimport math\n\nx, p = map(float, input().split())\nprint(f'{math.ceil(x*p)}')\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 49.9') == '0.0'"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0 49.9\n''') == '0.0'\nassert solution('''\n1 1.0\n''') == '-0.9'\nassert solution('''\n1 0.9\n''') == '-0.9'\nassert solution('''\n0 0.9\n''') == '0.0'\nassert solution('''\n-1 0.9\n''') == '0.9'\n\n''') == '-0.9'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('50 49.9') == '0.0'"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"0.0\""
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('10 0.1') == '10.0'\nassert solution('10 49.9') == '-49.9'\nassert solution('49.9 0.1') == '-49.9'\n\nstdin = input()\nprint(f'{int(float(stdin)):.3f}')"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0.5 49.9') == '0.0'\nassert solution('0.55 49.9') == '0.0'\nassert solution('0.5 55.9') == '0.0'\nassert solution('0.55 55.9') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1.9\n10.0''') == '1.9'\n\nassert solution('''0\n1.0''') == '1.0'\n\nassert solution('''19\n98.9''') == '4.8'\n\nassert solution('''20\n50.9''') == '4.9'\n\nassert solution('''6\n13.2''') == '0.0'"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1.1') == '0.10000000000000004'\nassert solution('0.1') == '0.1'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\\n\") == \"4 1\\n2 1\\n3 2\\n1 3\\n\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"5 1\\n2 1\\n3 2\\n4 5\\n1 4\\n\""
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 3\\n3 1') == '1 2\\n3 1'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"3 1\") == \"1 2\"\nassert solution(\"3 1\") == \"2 3\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2') == '1 1'\nassert solution('2\\n3 4') == '1 2'\nassert solution('2\\n3 4') == '3 3'\nassert solution('2\\n3 4') == '2 2'\nassert solution('2\\n1 2') == '2 1'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n2 3') == '1 2\\n2 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2\n2 3\n3 1\n4 1''') == '1 2\\n2 3\\n3 1\\n4 1'\nassert solution('''3\n1 2\n2 3\n1 3''') == '1 2\\n2 3\\n3 1'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 1\\n4 1') == '4 1\\n2 1\\n3 2\\n1 3'"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2\n2 3\n3 1\n4 1''') == '4 1'\nassert solution('''5 4\n1 2\n2 3\n3 4\n4 1\n4 5''') == '1 4'\nassert solution('''3 2\n1 2\n1 3\n2 1''') == '1 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n4\n\"\"\") == \"\"\"\n1 2\n2 3\n3 4\n4 1\n\"\"\"[1:-1]\n\nassert solution(\"\"\"\n3\n1\n2\n3\n\"\"\") == \"\"\"\n1 2 3\n1 2 3\n\"\"\"[1:-1]\n\nassert solution(\"\"\"\n3\n2\n2\n3\n\"\"\") == \"\"\"\n1 2 3\n2 3\n\"\"\"[1:-1]\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''5 1\n2 1\n3 2\n1 3\n4 5'''"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\") == \"1\"\nassert solution(\"10 3\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\") == \"0\"\nassert solution(\"2 5\\n2 1 3 2 1 3\") == \"1\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\") == \"0\"\nassert solution(\"1 1\\n1 1\") == \"1\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '3'\nassert solution('10 6') == '12'\nassert solution('13 6') == '13'\nassert solution('1000 8') == '1000'\nassert solution('1000 8') == '1000'\n\"\"\"\n\nfrom functools import reduce\nfrom operator import mul\nfrom functools import reduce\nfrom operator import mul\nfrom functools import reduce\n\nm = int(input())\nn = list(map(int, input().split()))\nn = list(map(lambda x: x / (sum(n) / len(n)), n))"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n) == \"1\"\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    \"6 5\\n\"\n    \"2 1 6 3 5 3\\n\"\n    \"1 2 5 3 5\"\n))\nprint(solution(\n    "
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3') == '1'\nassert solution('3 1\\n1 2 5 3') == '2'\nassert solution('3 2\\n1 2 5 3') == '0'\nassert solution('6 5\\n1 2 5 3 4\\n1 2 5 3') == '0'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 1\n4 1\n4 1''') == '1'\nassert solution('''8 1\n6 1\n3 2\n4 3\n6 3\n4 3''') == '0'\nprint('You passed all tests!')\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n6 5\n2 1 6 3 5 3\n1 2 5 3 5\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n6 5\n2 1 6 3 5 3\n1 2 5 3 5\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '1'\nassert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\\n4 3 1 6 2\\n5 3 2 2 5\\n6 6 5 6 4 3\\n4 3 1 6 2\\n5 3 2 2 5\\n6 6 5 6 4 3\\n') == '2'\nassert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\\n4 3 1 6 2\\n5 3 2 2 5\\n6 6 5 6 4 3\\n') == 'forever'"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\") == \"1\"\nassert solution(\"6 5\\n1 2 5 3 5\\n2 3 4 5\") == \"2\"\nassert solution(\"6 5\\n1 2 5 3 5\\n2 3 5 5\") == \"0\"\nassert solution(\"6 5\\n1 2 5 3 5\\n2 4 5 5\") == \"1\"\nassert solution(\"6 5\\n1 2 5 3 5\\n3 4 5 5\") == \"0\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\n2 1 6 3 5 3') == '0'\nassert solution('8 5\\n2 1 5 3 5 3 2 5 3\\n1 2 3 4 5') == '1'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3') == '1'\nassert solution('6 5\\n1 2 5 3 5\\n1 2 3') == '2'\nassert solution('6 5\\n2 1 5 3 5\\n1 2 3\\n1 2 5') == '4'\nassert solution('6 5\\n2 1 5 3 5\\n1 2 3\\n1 2 5\\n1 1 5') == '2'"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 1 10\n0 1 1 2 6\n''') == '3'\nassert solution('''\n2 1 10\n1 2 3 4 5\n''') == '10'\n'''\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 1 1 2 6\n''') == '3'\nassert solution('''\n2\n1 1 1 2 6\n''') == '4'\n''')"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 10') == '3'\nassert solution('2 3 10') == 'impossible'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'\nassert solution('2 3 10\\n0 1 5 2 6\\n1 3 4 5 6') == 'impossible'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 10\") == \"3\"\nassert solution(\"2 5 1 2 1 5 3 4 6 2 3\") == \"3\"\nassert solution(\"4 6 1 2 1 5 3 4 6 2 3\") == \"4\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 1 10\n0 1 1 2 6''') == '3'\nassert solution('''2 1 100\n0 1 1 2 6''') == 'impossible'\nassert solution('''2 1 10\n0 1 1 2 5''') == 'impossible'\nassert solution('''2 1 10\n0 1 1 2 5''') == '3'\nassert solution('''2 1 10\n0 0 1 1 2 5''') == 'impossible'\n''')\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'\nassert solution('2 1 10\\n0 1 1 2 4\\n') == '3'\nassert solution('2 1 10\\n0 1 1 2 7\\n') == 'impossible'"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 10') == '3'\nassert solution('2 2 2 1 2') == '3'\nassert solution('5 10 10 5 5') == '10'"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 10\") == \"3\"\nassert solution(\"0 1 1 2 6\") == \"impossible\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 10\\n0 1 1 2 6') == '3'\nassert solution('1 10 20\\n3 5 6 2') == 'impossible'\nassert solution('2 10 20\\n0 1 1 2 3') == '1'\nassert solution('2 1 10\\n0 1 1 2 3') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('5') == '1 2 3 4 5'\n\n---Input---\nThe input consists of:\n - A single line with two integers $n, m$ (1 \\le n \\le 10^5, 1 \\le m \\le 10^6)\n - A single line with $m$ integers $a_1, a_2, \\ldots, a_m$\n\n--Output--\nA single line with the maximum number of integers in $a_1, a_2, \\ldots, a_m$. In the case that there are no solutions, output any one of them.\n\nSample Output\n10"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\n4\\n') == '4\\n1 2'\n\"\"\"\n\ninput_a = stdin.readline()\nn, c = (int(x) for x in input_a.split())\n\nfor _ in range(n):\n    d, s = (int(x) for x in stdin.readline().split())\n    if d + s < c:\n        print(1)\n        print(1, 2)\n    else:\n        print(2)\n        print(*[i + 1 for i in range(2)])"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n99 1\n1 99\n1 2\n''') == '2 1'\nassert solution('''\n1\n99 1\n1 99\nSample Output:\n0\n''') == '0'\nassert solution('''\n1\n99 1\n1 2\n''') == '1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 100\\n99 1\\n1 99') == '2\\n1 2'\nassert solution('1 100\\n99 1\\n2 99') == '2'\nassert solution('1 10\\n100 99\\n2 99') == '2'\nassert solution('4 100\\n3 1\\n2 2\\n4 1') == '3 4'\nassert solution('5 100\\n5 1\\n4 2\\n2 3\\n1 2\\n3 2') == '4 5'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 100\n99 1\n1 99''') == '2'\nassert solution('''1 1\n1 2''') == '1 2'\nassert solution('''8 20\n5 10\n3 9\n7 16\n12 25\n2 12\n10 20\n1 11\n6 14\n13 14\n8 20\n7 26''') == '7 11'\nassert solution('''2 100\n99 1\n1 99''') == '2'\nassert solution('''1 1\n1 2''') == '1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 6\n1 6\n2 5\n3 4\n1 10\n2 3\n4 7\n6 9\n\"\"\") == \"2 1 2 1\"\n\nassert solution(\"\"\"\n4 5\n1 4\n2 1\n3 2\n3 1\n\"\"\") == \"2 1 2 1\"\n\nassert solution(\"\"\"\n1 100\n1 1\n\"\"\") == \"1\""
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([\n    \"2 100\",\n    \"99 1\",\n    \"1 99\",\n]) == \"2\\n1 2\"\n\"\"\"\n\nimport itertools\n\nn, c = map(int, stdin.split())\n\napp_sizes = sorted([int(x) for x in stdin.split()], reverse=True)\napp_sizes = [(x, y) for x, y in itertools.izip_longest(app_sizes, app_sizes, fillvalue=app_sizes[0])]\napp_sizes = sorted(app_sizes, key=lambda x: x[1] - x[0])\n\ncount = 0\norder = []\nfor d, s in app_sizes:\n    if count < c:\n        order.append(d)\n        count += 1\n    else:\n        break\n\nprint(len(order))\nprint(*order)\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 100\\n99 1\\n1 99\\n') == '2\\n1 2'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n99 1\n99 1\n1 99\n''') == '1 2'\n\nassert solution('''\n3\n99 1\n1 99\n1 99\n''') == '1 2'\n\nassert solution('''\n2\n99 1\n1 99\n''') == '1 2'\n\nassert solution('''\n2\n99 1\n1 99\n''') == '1 2'\n\nassert solution('''\n1\n1\n''') == '1'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 100') == '1 2'\nassert solution('99 1') == '1 2'\nassert solution('1 99') == '2 1'\nassert solution('1 99') == '1 2'"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"H\\nT\\n0.5\") == \"0.5\", \"Should be 0.5\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"H\\nT\\n0.5\") == \"0.5\", f\"actual={solution(stdin)}!~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nH\nT\n0.5\n''') == '0.5'\nassert solution('''\nH\nT\n0.01\n''') == '0.01'\nassert solution('''\nH\nT\n0.001\n''') == '0.001'\nassert solution('''\nH\nT\n0.0001\n''') == '0.0001'\nassert solution('''\nH\nT\n0.00001\n''') == '0.00001'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\nassert solution('H\\nT\\n0.01') == '0.1'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\nassert solution('H\\nT\\n1.0') == '1.0'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\nassert solution('H\\nT\\n0.03') == '0.0'\n\"\"\""
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\nGon has picked a string:\nH\nKillua has picked a string:\nT\n50.0\n\"\"\") == \"0.5\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n\") == \"1 3 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '8'\n\nprint(solution('3'))\nassert sorted(list(map(int, input().split()))) == [1, 3, 5, 7, 9, 11, 13, 15]\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"8 1 3 5 7 9 11 13 15\"\n\nassert solution(\"6\") == \"1 3 5 7 9 11 13 15\"\n\nassert solution(\"9\") == \"1 3 5 7 9 11 13 15\"\n\nassert solution(\"10\") == \"1 3 5 7 9 11 13 15\"\n\nassert solution(\"11\") == \"1 3 5 7 9 11 13 15\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '8 1 3 5 7 9 11 13 15'\nassert solution('4') == '7 5 8 1 12 13 14 15'\n\"\"\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '8 1 3 5 7 9 11 13 15'\nprint(solution(input()))"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"8 1 3 5 7 9 11 13 15\"\nassert solution(\"4\") == \"4 1 2 6 8\"\nassert solution(\"5\") == \"1 2 3 4 5 6 7 8 9 10 11 12\"\nassert solution(\"6\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '8\\n1 3 5 7 9 11 13 15'\nassert solution('3') == '1\\n3\\n5\\n7\\n9\\n11\\n13\\n15'"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(r\"2\") == \"2 1\"\nassert solution(r\"7\") == \"7 1 8 9 10 11 12 13\"\nassert solution(r\"9\") == \"8 1 9 10 11 12 13 14 15\"\nassert solution(r\"18\") == \"17 1 18 19 20 21 22 23 24\"\nassert solution(r\"24\") == \"23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '8 1 3 5 7 9 11 13 15'\nassert solution('17') == '15 1 3 5 7 9 11 13 15 17'\nassert solution('30') == '24 1 3 5 7 9 11 13 15 17 20 21 22 23'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '3'\nassert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '1'\nassert solution('''2\n1\n3''') == '1'\nassert solution('''3\n1\n3\n1''') == '0'\nassert solution('''1\n1\n3\n1''') == '1'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"1 3 5 7\") == \"1\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3 5 7\\n2 2') == '0'\nassert solution('4\\n1 3 5 7\\n2 2') == '1'\nassert solution('4\\n1 3 5 7\\n2 5') == '0'\nassert solution('4\\n1 3 5 7\\n2 7') == '1'\nassert solution('3\\n1 3 5 7\\n2 2') == '3'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '0'\nassert solution('1\\n1') == '1'\nassert solution('5\\n4 3 2 1\\n4\\n3 2\\n1 2') == '0'\nassert solution('2\\n1 1\\n0\\n1') == '1'\nassert solution('3\\n1 3 5 7\\n3\\n2 2') == '1'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '3'\nassert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5\nSample Output:\n4\n1\n0\n1''') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '3'\nassert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '1'\nassert solution('''5\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '1'\nassert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '0'\nassert solution('''5\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3\\n1\\n0\\n'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3 5 7\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 5\") == \"1\"\nassert solution(\"1 5\") == \"1\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 3 5 7\") == \"3\"\nassert solution(\"4\\n1 3 5 7\") == \"1\"\nassert solution(\"5\\n1 3 5 7\") == \"0\"\nassert solution(\"6\\n1 3 5 7\") == \"4\"\nassert solution(\"7\\n1 3 5 7\") == \"3\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\\n') == '3\\n1\\n0\\n'\nassert solution('8\\n1 2 3 5 6 7 8\\n5\\n5\\n4\\n1\\n2\\n4\\n') == '1\\n'\nassert solution('1\\n') == '0\\n'\nassert solution('1\\n') == '0\\n'\nassert solution('1\\n') == '0\\n'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 -2 0') == '0'\nassert solution('1 1 0 0') == '0'\nassert solution('2 3 2 1 1') == '3'\nassert solution('5 2 3 1 4 5') == '5'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0'\nassert solution(\"\"\"2 1\n1 1 -2 0\nSample Input 2:\n1 1\n1 1 -2 0\nSample Output 2:\n0\n\"\"\") == '0'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1\n1 1 -2 0\n''') == '0'\nassert solution('''\n1 1\n1 1 1\n''') == '1'\nassert solution('''\n4 1\n1 1 -2 0\n1 1 -2 0\n1 2 -2 0\n1 1 -2 0\n''') == '1'\nassert solution('''\n2 1\n1 1 2\n''') == '1'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 1\n1 1 -2 0\n\"\"\") == \"0\"\nprint(solution(open(\"test.txt\")))"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\nassert solution('1\\n0 1 -2 0\\n') == '1'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 -2 0') == '0'"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0'\nassert solution('''\n2 1\n1 1 -2 0\nSample Input:\n10 2\n2 3 -2 -1\nSample Output:\n5\n''') == '5'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 1 -2 0') == \"0\"\nassert solution('2 2\\n1 1 -2 0\\n2 2 -3 0') == \"0\"\nassert solution('3 4\\n1 1 -2 0\\n2 2 -3 0\\n3 2 -1 0') == \"3\""
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '194'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n20\\n20 20\\n') == \"194\"\nassert solution('3\\n2020 10\\n') == \"30\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"7\"\nassert solution(\"2\") == \"29\"\nassert solution(\"1\") == \"30\"\nassert solution(\"0\") == \"0\""
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '194'\n\nprint(solution('''\n2\n3 10\n10 1\n10 3\n10 2\n10 4\n10 5\n9 10\n10 1\n10 3\n10 2\n10 4\n10 5\n10 1\n10 3\n10 2\n10 4\n10 5\n'''))\n\nassert solution('''\n2\n1 2\n10 1\n10 1\n''') == '8'\n\nprint(solution('''\n3\n1 2\n10 1\n10 2\n10 3\n'''))\n\nassert solution('''\n2\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '194'\n\nprint(solution('''\n5\n2018 13 18\n2019 10 1\n2020 10 5\n2020 10 17\n2020 10 30\n'''))\n\nassert solution('''\n5\n2018 13 18\n2019 10 1\n2020 10 5\n2020 10 17\n2020 10 30\n''') == '858'\n\nprint(solution('''\n4\n2018 13 18\n2019 10 1\n2020 10 5\n2020 10 17\n'''))\n\nassert solution('''\n4\n2018 13 18\n2019 10 1\n2020 10 5\n2020 10 17\n''') == '2936'"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '194'\nassert solution('1') == '2'\nassert solution('0') == '0'\nassert solution('10') == '194'\nassert solution('19') == '1'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '196'\nassert solution('2') == '197'\nassert solution('3') == '195'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '194'\nassert solution('1') == '-1'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"38\"\nassert solution(\"2\") == \"24\"\nassert solution(\"3\") == \"0\""
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '194'\nassert solution('3') == '17'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '194'\nassert solution('3') == 'None'\nassert solution('1') == 'None'\nassert solution('4') == 'None'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 1 1 2 1\n''') == 'negative-infinity -5'\nassert solution('''\n1 0 2 -4 1\n''') == '0 -1'\nassert solution('''\n2 1 1 -1\n''') == 'infinity -1'\nassert solution('''\n3 3 1 2 1\n''') == '3 -3'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '5 12.5 -5 -5 0 -5 -5 -5 -5'\nassert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '-5 -5 -5 -5 -5 -5 -5 -5 -5'\n''') == '5 12.5 0 -5 -5 -5 -5 -5 -5 -5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0''') == 'negative-infinity 0"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == 'negative-infinity 0\n'''\n\n######################################################################################################################################################\n######################################################################################################################################################\n######################################################################################################################################################\n######################################################################################################################################################\n######################################################################################################################################################\n######################################################################################################################################################"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"6 10 10 10 10 0\") == \"6 12.5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == '5 12.5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"5 12.5\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10 10 10 10 0') == '5 12.5'\nassert solution('6 10 10 10 10 0') == '6 12.5'\nassert solution('6 10 10 10 10 0') == '6 12.5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10 10 10 10 0') == \"negative-infinity 0\"\nassert solution('5 10 10 5 10 0') == \"5 12.5\"\nassert solution('6 10 10 10 10 0') == \"negative-infinity -5\"\nassert solution('0.00 0.00 0.00 0.00 0.00') == \"negative-infinity -5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == '5 12.5'\nassert solution('6 10 10 10 10 0') == '6 12.5'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4') == '2'\nassert solution('3 1') == 'IMPOSSIBLE'\nassert solution('4 4') == '2'\nassert solution('3 1') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000') == '2'\nprint(solution(''))"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == 'IMPOSSIBLE'\nassert solution('4 4') == '2'\nassert solution('5 5') == '3'\nprint('Tests passed')\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n100 30000\n200 20000\n300 10000\n''') == '2'\n\nassert solution('''\n1\n10\n3 1\n5 1\n2 2\n2 2\n5 1\n''') == '1'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([4, 30000, 20000, 0, 50, 10000, 20000, -40000]) == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000') == '2'\nassert solution('100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n\"\"\"\nt = int(input())\nfor i in range(t):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    k = 0\n    for i in range(n-1):\n        if abs(x[i]-x[i+1]) <= x[i+1] and abs(a[i]-a[i+1]) <= a[i+1]:\n            k += 1\n    print(k)\n\"\"\"\n\n\"\"\"\nQ15: Phone Number Length\n\nQ: Given a string containing digits from 0-9, find the length of the longest phone number it can be made. The number can be made by concatenating three letters from any of the 10 digits in order, starting with the leftmost one.\n\nInput:\nThe first line contains an integer T, the number of test cases. Then T test cases follow, each test case contains an integer N which denotes the length of the string.\n\nOutput:\nPrint the length of each phone number in a newline.\n\n----\nSample Input 1:\n3\n20\n43\nSample Output 1:\n12\nSample Input 2:\n4\n1\n101\nSample Output 2:\n3\nSample Input 3:\n2\n33\nSample Output 3:\n3\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n\nassert solution('''\n1 1\n1\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n2 3\n5 20000\n1 20000\n2 10000\n3 5000\n''') == '2'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\""
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2'\nassert solution('5 1\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12') == '20 -1'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n''') == '345 2'\nprint('PASSED')"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100''') == '345 2\\nrotS 2 1\\nnegR 2'\nassert solution('''3\n1 -2\n-8 0\n11 4''') == '345\\nrotS 2\\nnegR 2'\nassert solution('''2\n-1 -1''') == '1\\nrotS 1\\nnegR 1'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"\"\"345 2\"\"\"\nassert solution(\"\"\"\n5 5\n1 1 1 1 1\n1 2 1 1 1\n1 3 1 1 1\n1 4 1 1 1\n1 5 1 1 1\n\"\"\") == \"\"\"160 2\"\"\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 4\n1 2\n3 4\n5 6\n\"\"\") == \"345 2\"\nassert solution(\"\"\"\n2 4\n1 2\n3 4\n5 6\n\"\"\") == \"rotS 2 1\"\nassert solution(\"\"\"\n2 4\n1 2\n3 4\n5 6\n\"\"\") == \"negR 2\"\nassert solution(\"\"\"\n2 4\n1 2\n3 4\n5 6\n\"\"\") == \"rotS 2 1\"\nassert solution(\"\"\"\n2 4\n1 2\n3 4\n5 6\n\"\"\") == \"rotR 2 1\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n3 -2 5\n-8 0 -4\n11 4 0 100\n\"\"\") == \"345 2 rotS 2 1 negR 2\"\n\nassert solution(\"\"\"\n5\n-1 2 3 4 5\n-1 2 -3 4 5\n-1 2 3 -4 5\n-1 2 3 4 -5\n-1 2 -3 4 -5\n\"\"\") == \"6 rotS 2 2 rotS 1 negR 1 negR 1 negR 1\"\n\nassert solution(\"\"\"\n2\n-5 1\n1 3\n\"\"\") == \"2 rotS 2 2 rotS 1 negR 1 negR 1 negR 1\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\"\n\nassert solution(\"\"\"\n5 7\n1 2 3 4 5 6 7 8\n8 7 6 5 4 3 2 1\n\"\"\") == \"1014 4\"\n\nassert solution(\"\"\"\n3 4\n1 2 3\n4 5 6\n7 8 9\n\"\"\") == \"103 6\"\n\nassert solution(\"\"\"\n3 4\n1 2 3\n4 5 6\n7 8 9\n\"\"\") == \"103 6\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nnegR 2\\nrotR 2 1\\nnegR 2\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nnegR 2\\nnegR 2\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nnegR 2\\nnegR 2\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nnegS 2 1\\nnegS 2 1\\nrotS 2 1\\nnegS 2 1\\nnegS 2 1\\nrotS 2 1\\nrotS 2 1\\nnegS 2 1\\nnegS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2 1\\nrotS 2"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\\n') == '345 2'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n3 3 1\n''') == '0.5'\nassert solution('''\n3 3\n3 3 1\n''') == '0.5'\n\nassert solution('''\n3 3\n1 3 2\n''') == '0.75'\n\nassert solution('''\n6 6\n5 1 2 3 4 5\n''') == '1.25'\n\nassert solution('''\n12 2\n4 5 1 3 4 6 1 5 6 8 2 7 8\n''') == '2.5'"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '0.5'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2\n3 1 1\n''') == '0.5'\n\nassert solution('''4 3\n5 1 1 1\n''') == '1.3333333333333333'\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\n1 2 1') == '0.5'\nassert solution('2 2\\n1 2 2') == '2.5'\nassert solution('3 3\\n3 2 1') == '1'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '0.5'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n3 1 1\n''') == '0.5'\nassert solution('''\n5 5\n1 2 1\n''') == '0.5714285714285714'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input) == \"0.5\"\nassert solution(input) == \"0.5\""
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n3 1 1\n''') == '0.5'\n\n'''\n------Task------\n[97] Find Peak Element\n\nA peak element is an element that is greater than its neighbors.\n\nGiven an input array nums, where nums[i] represents the value of the ith element in an array, return the **index** of the peak element, if you found more than one, return the **index** of the **smallest** peak element.\n\nYou may imagine that nums[-1] = nums[n] = -\u221e.\n\nExample 1:\n\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.\n\nExample 2:\n\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n\nNote:\nYour solution should be in logarithmic complexity.\n'''\n\nfrom typing import List\n\nclass Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        # Time: O(n) | Space: O(1)\n        low = 0\n        high = len(nums) - 1\n\n        while low <= high:\n            mid = low + (high - low) // 2\n\n            if (mid == 0 or nums[mid - 1] < nums[mid]) and (mid == len(nums) - 1 or nums[mid + 1] < nums[mid]):\n                return mid\n            elif nums[mid - 1] < nums[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '0.5'\nassert solution('3 1 1') == '0.5'"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n3 2 1\\n') == '0.5'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9''') == '1 4 5 2 6 7 7 8 9 6 8 5 9'\nassert solution('''13 6\n1 4\n4 1\n2 5\n1 8\n6 3\n5 2\n3 5\n4 6\n6 8\n8 4\n7 3\n6 9\n8 5\n5 2\n4 6\n3 7\n3 1\n9 3\n6 7\n8 1\n2 7\n4 4\n1 5\n7 6\n6 4\n1 1\n5 5\n3 6\n7 1\n4 7\n1 9\n8 4\n2 1\n1 7\n4 6\n5 8\n6 5\n8 7\n5 6\n8 7\n6 2\n3 6\n5 5\n7 4\n2 7\n2 9\n3 4\n1 9\n5 5\n1 6\n3 4\n4 7\n8 2\n7 7\n6 1\n5 9\n7 1\n2 5\n5 8\n3 3\n2 8\n3 2\n1 8\n1 9\n3 1\n5 9\n8 4\n6 5\n3 6\n1 3\n1 6\n7 8\n6 7\n4 5\n8 2\n7 2\n6 4\n2 9\n5 3\n4 7\n4 3\n1 9\n6 6\n2 8\n1 4\n1 2\n4 6\n4 5\n2 6\n1 3\n1 5\n6 5\n5 6\n6 3\n5 1\n1 8\n8 3\n4 2\n2 1\n1 8\n3 6\n5 8\n4 7\n2 4\n8 2\n8 4\n5 4\n5 4\n7 3\n3 7\n1 2\n2 7\n3 4\n1 7\n7 5\n2 9\n3 2\n5 5\n5 6\n3 4\n6 1\n5 5\n7 8\n7 3\n5 2\n8 2\n1 8\n5 9\n6 4\n2 9\n1 8\n3 4\n5 4\n3 9\n6 4\n4 1\n1 2\n4 5\n5 3\n7 3\n1 5\n1 7\n5 2\n2 2\n1 3\n1 2\n3 1\n2 6\n1 4\n2 7\n8 3\n2 7\n1 5\n2 3\n3 9\n2 2\n3 9\n8 5\n4 6\n1 4\n2 5\n1 3\n3 6\n6 5\n1 8\n4 2\n4 3\n4 6\n5 2\n1 2\n3 3\n4 6\n1 2\n1 4\n5 4\n7 3\n5 5\n4 4\n1 5\n3 8\n5 3\n2 2\n2 5\n2 6\n3 7\n1 4\n1 7\n4 2\n3 7\n3 7\n5 1\n1 4\n2 2\n5 5\n5 4\n5 5\n4 1\n2 7\n7 1\n2 5\n3 2\n4 2\n5 3\n1 5\n1 7\n6 4\n4 6\n6 6\n4 4\n5 5\n1 6\n2 7\n3 6\n6 7\n1 5\n2 4\n7 7\n6 5\n7 5\n2 3\n5 6\n7 2\n5 4\n7 2\n6 4\n4 2\n4 1\n5 2\n5 5\n7 3\n1 1\n4 4\n6 5\n8 6\n3 4\n1 4\n1 5\n6 6\n5 3\n6 7\n2 5\n3 4\n6 4\n2 6\n3 3\n6 4\n5 7\n2 3\n6 4\n8 4\n5 4\n2 5\n3 7\n2 6\n1 1\n3 5\n4 7\n2 4\n3 1\n4 8\n1 4\n2 6\n4 6\n2 8\n4 2\n4 3\n2 4\n2 7\n1 4\n2 4\n3 4\n3 5\n4 1\n5 1\n4 4\n2 5\n1 4\n2 6\n4 5\n2 7\n3 4\n4 1\n4 4\n2 5\n3 6\n4 6\n6 5\n6 4\n1 4\n2 6\n4 3\n4 4\n3 7\n2 4\n7 4\n2 4\n6 4\n3 4\n3 6\n2 4\n5 5\n3 2\n2 8\n3 4\n4 4\n2 4\n5 5\n1 7\n5 3\n2 5\n2 5\n6 5\n1 7\n1 4\n3 2\n1 6\n3 8\n1 4\n1 2\n3 6\n6 6\n3 8\n4 2\n1 4\n2 6\n2 7\n3 2\n1 1\n1 1\n2 1\n1 2\n2 3\n1 1\n2 5\n3 4\n3 4\n4 5\n4 4\n5 4\n4 5\n4 6\n5 7\n5 5\n4 3\n4 5\n4 5\n4 3\n1 4\n2 5\n5 4\n4 6\n2 3\n1 4\n3 2\n5 3\n5 2\n2 5\n5 3\n5 3\n1 6\n2 7\n1 8\n3 5\n3 7\n6 5\n1 5\n3 4\n2 7\n1 4\n3 8\n4 6\n3 7\n5 4\n3 7\n3 7\n6 7\n2 7\n3 2\n4 5\n2 5\n2 5\n3 4\n1 7\n2 2\n1 4\n1 3\n2 2\n4 4\n1 4\n3 4\n2 4\n3 4\n3 4\n4 5\n4 4\n4 5\n1 4\n3 4\n1 1\n3 4\n2 5\n4 1\n1 4\n2 5\n2 5\n1 4\n2 5\n4 2\n2 5\n1 4\n1 5\n2 7\n5 5\n4 3\n1 3\n2 7\n2 3\n4 7\n2 2\n1 5\n5 5\n2 3\n2 5\n5 5\n3 4\n4 6\n2 4\n2 5\n4 4\n2 6\n5 4\n4 4\n4 4\n4 4\n4 4\n5 6\n5 5\n4 5\n1 4\n1 5\n2 5\n4 5\n1 7\n1 4\n3 2\n2 1\n1 4\n3 4\n5 3\n5 5\n4 4\n4 5\n1 2\n3 7\n2 4\n4 6\n1"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '2 1 3 7 4 6 8 9 5'\n\nassert solution('''\n6 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 5 2 4 6 7 8 9'\n\nassert solution('''\n7 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 5 2 4 6 7 8 9'\n\nassert solution('''\n4 5\n1 4\n1 5\n2 6\n2 7\n3 8\n3 9\n4 8\n4 9\n''') == '4 1 2 3 4 8 9'\n\nprint(solution('''\n5 5\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n'''))\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 3\") == \"2 3\"\nassert solution(\"2 3\") == \"1 2 3\"\nassert solution(\"2 3\") == \"1 2 3\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"\"\"\n1 4 5\n2 6 7\n3 8 9\n\"\"\"\n\nassert solution(\"\"\"\n1 2\n2 3\n3 4\n\"\"\") == \"\"\"\n1 2\n2 3\n3 4\n\"\"\"\n\nassert solution(\"\"\"\n7 12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n\"\"\") == \"\"\"\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n\"\"\"\n\nassert solution(\"\"\"\n5 12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n\"\"\") == \"\"\"\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n\"\"\"\n\nassert solution(\"\"\"\n5 13\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n\"\"\") == \"\"\"\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n\"\"\""
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '''\n1 4 5\n2 6 7\n'''\nassert solution('''\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '''\n1 4 5\n2 6 7\n'''\nassert solution('''\n5 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '''\n2 6 7\n3 8\n3 9\n8 9\n'''\nassert solution('''\n3 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '''\n1 4 5\n2 6 7\n3 8 9\n'''\nassert solution('''\n3 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n''') == '''\n1 4 5\n2 6 7\n'''\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 2\n1 2\n2 3\n1 4\n3 4''') == '2 4'\nassert solution('''3 5\n1 2\n3 5\n2 4\n4 6''') == '2 4'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 13\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 6 7 8 9'\nassert solution('''\n12 13\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n7 8\n''') == '1 4 5 6 7 8 9 6 8'\nassert solution('''\n13 16\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n7 8\n''') == '1 4 5 6 7 8 9 6 8'\nassert solution('''\n5 16\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n7 8\n''') == '1 4 5 6 7 8 9 6 8'\nassert solution('''\n8 14\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n7 8\n''') == '1 4 5 6 7 8 9 6 8'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 8') == '2 6 7'\nassert solution('9 11') == '1 4 5'"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1 4 5 2 6 7 3 8 9'\nassert solution() == '1 4 5 6 7 2 8 9 3'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '1 4 5\\n2 6 7\\n3 8 9\\n'\nassert solution('4 8\\n4 2\\n5 2\\n1 2\\n1 4\\n3 4\\n5 5\\n3 4\\n1 2\\n2 4\\n5 2\\n') == '1 4\\n2 4\\n3 4\\n'"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"11 2\") == \"1350\"\nassert solution(\"12000\") == \"10800\"\nassert solution(\"9000\") == \"9000\"\nassert solution(\"4500\") == \"18000\"\nassert solution(\"10000\") == \"10000\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11 2\") == \"13500\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 2\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n1 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    11 2\n    12000\n    9000\n    4500\n    10000\n    12000\n    11000\n    12000\n    18000\n    10000\n    9000\n    12000\n''') == '13500', f\"actual: {solution('''11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000''')}\"\n\nassert solution('''\n    11 2\n    12000\n    9000\n    4500\n    10000\n    12000\n    11000\n    12000\n    18000\n    10000\n    9000\n    12000\n''') == '13500', f\"actual: {solution('''11 2\\n12000\\n9000\\n4500\\n10000\\n12000\\n11000\\n12000\\n18000\\n10000\\n9000\\n12000''')}\"\n\"\"\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2') == '110', \"Too many cars\"\nassert solution('2 5') == '900', \"Too little cars\"\nassert solution('20 100') == '18800', \"Not enough time\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000''') == '13500', f'''Solution failed: {solution(stdin)}'''\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('11 2') == '13500'\nassert solution('12000') == '13500'\nassert solution('9000') == '9000'\nassert solution('12000') == '9000'\nassert solution('11000') == '11000'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 2\n12000\n9000\n4500\n10000\n''') == '13500'\nassert solution('''\n2 1\n4500\n9000\n''') == '19500'\n''')\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    11 2\n    12000\n    9000\n    4500\n    10000\n    12000\n    11000\n    12000\n    18000\n    10000\n    9000\n    12000\n''') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"13500\""
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 16') == 'Hot cross buns! =\\nHot cross buns! =\\n'\n\nassert solution('3 3') == 'Hot_cross_buns! =\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot_cross____buns!\\nHot_cross____buns!\\n'\n\nassert solution('1') == 'One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 16\\nHot cross buns! = Hot cross buns! =\\n4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n2 2 2 2 2 2 2 2 2 4 4 4 4\\n') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n_____________Hot_cross_buns!_=\\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n\\nHot_cross_buns!_="
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 16\") == \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n\" + \\\n                         \"____________________Hot_cross_buns!_=\\n\" + \\\n                         \"One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n\" + \\\n                         \"Hot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n\" + \\\n                         \"def solution(stdin: str) -> str:\""
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 15') == '_15_'\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\nHot cross buns! =\nHot cross buns! =\n''') == '''\nHot_cross_buns!_=__Hot_cross_buns!_=\n'''\n\nassert solution('''\n2 2\nHot cross buns! =\nHot cross buns! =\n''') == '''\nHot_cross_buns!_=___Hot_cross_buns!_=\n'''\n\nassert solution('''\n4 4\nHot cross buns! =\nHot cross buns! =\nHot cross buns! =\nHot cross buns! =\n''') == '''\nHot_cross_buns!_=________Hot_cross_buns!_=\n'''\n\nassert solution('''\n4 4\nHot cross buns! =\nHot cross buns! =\nHot cross buns! =\nHot cross buns! =\n''') == '''\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________Hot_cross_buns!_=\n'''\n\nassert solution('''\n2 2\nHot cross buns! =\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\nHot cross buns! =\n''') == '''\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________Hot_cross_buns!_=\n'''"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 16') == 'Hot cross buns! = Hot cross buns! =\\n' + \\\n                            '4 4 4 4 4 4 4 4\\n' + \\\n                            'One a pen- ny, Two a pen- ny, Hot cross buns! =\\n' + \\\n                            '2 2 2 2 2 2 2 2 4 4 4 4\\n'\n\nassert solution('2 16') == 'Hot cross buns! = Hot cross buns! =\\n' + \\\n                            '4 4 4 4 4 4 4 4\\n' + \\\n                            'One a pen- ny, Two a pen- ny, Hot cross buns! =\\n' + \\\n                            '2 2 2 2 2 2 2 2 4 4 4 4\\n'\n\nassert solution('3 7') == 'Hot cross buns! = Hot cross buns! =\\n' + \\\n                            '4 4 4 4 4 4 4 4\\n' + \\\n                            'One a pen- ny, Two a pen- ny, Hot cross buns! =\\n' + \\\n                            '2 2 2 2 2 2 2 2 4 4 4 4\\n'\n\nassert solution('4 2') == 'Hot cross buns! = Hot cross buns! =\\n' + \\\n                            '4 4 4 4 4 4 4 4\\n' + \\\n                            'One a pen- ny, Two a pen- ny, Hot cross buns! =\\n' + \\\n                            '2 2 2 2 2 2 2 2 4 4 4 4\\n'\n\nassert solution('6 7') == 'Hot cross buns! = Hot cross buns! =\\n' + \\\n                            '4 4 4 4 4 4 4 4\\n' + \\\n                            'One a pen- ny, Two a pen- ny, Hot cross buns! =\\n' + \\\n                            '2 2 2 2 2 2 2 2 4 4 4 4\\n'"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4\n''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_='"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 16\\nHot cross buns! =\\n 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\") == \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\ndef solution(stdin: str) -> str:\\n\\tpass\\n\\nassert solution('2 16\\nHot cross buns! =\\n 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n 2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2') == \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\ndef solution(stdin: str) -> str:\\n\\tpass\\n\\nassert solution('2 16\\nHot cross buns! =\\n 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n 2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2') == \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\ndef solution(stdin: str) -> str:\\n\\tpass\\n\\nassert solution('2 16\\nHot cross buns! =\\n 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n 2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2') == \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\ndef solution(stdin: str) -> str:\\n\\tpass\\n\\nassert solution('2 16\\nHot cross buns! =\\n 4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n 2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2 2') == \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\ndef solution(stdin: str) -> str:\\n\\tpass\\n\\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 16') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n\\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n'\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 16') == 'Hot_cross_buns!=\\nHot_cross_buns!=\\n'\n\nassert solution('4 4 4 4 4 4 4 4') == 'One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\n\n\nSample Input:\n10 5\ng f o r w r t c o\n3 2 3 2 2 2 2 2 3\n2 2 2 2 2 2 2 2 2 2 2 2\n1 2 3 4 5\n5 6 7 8 9\n9 8 7 6 5\n4 4 4 4 4 4 4\n2 2 2 2 2 2 2 2 2 2 2\n4 4 4 4 4 4 4 4\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\nSample Output:\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_\ng_f_or_w_r_t_c_o_"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('3 2 1') == '11'\nassert solution('3 4 1') == '70'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\\n') == '33'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\n\nassert solution('''5 3 4 1\n2 4 8 7\n2 4 5 5\n3 3 5 5\n3 3 5 5\n''') == '15'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\") == \"33\"\nassert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\") == \"33\"\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\n\nassert solution('''4 4\n1 1 1\n2 3 2\n3 4 3\n4 4 2\n1 4 3\n2 3 4\n''') == '9'\n\nassert solution('''6 6\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n''') == '66'\n\nassert solution('''5 4\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n1 4 3\n2 3 4\n3 4 5\n4 4 6\n''') == '9'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n4 5\n3 1 5 2\n2 3 5 4\n2 2 3 4\n2 5 4 3\n1 2 3 4\n''') == '42'\nassert solution('''\n5 1\n1 2 1\n2 2 1\n3 2 1\n3 3 1\n4 2\n''') == '36'\nassert solution('''\n10 1\n1 2 5\n2 2 4\n2 3 4\n3 3 2\n4 2 4\n4 3 2\n4 4 2\n4 5 2\n5 5 2\n6 5 4\n5 6 5\n6 6 4\n6 7 4\n6 8 4\n6 9 4\n7 4 2\n7 5 2\n7 6 2\n7 7 2\n7 8 2\n7 9 2\n8 2 4\n8 3 2\n8 4 2\n8 5 2\n8 6 2\n8 7 2\n8 8 2\n8 9 2\n9 2 6\n9 3 2\n9 4 2\n9 5 2\n9 6 2\n9 7 2\n9 8 2\n9 9 2\n10 2\n10 3\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10\n11 2\n11 3\n11 4\n11 5\n11 6\n11 7\n11 8\n11 9\n11 10\n12 2\n12 3\n12 4\n12 5\n12 6\n12 7\n12 8\n12 9\n12 10\n12 11\n12 12\n13 2\n13 3\n13 4\n13 5\n13 6\n13 7\n13 8\n13 9\n13 10\n13 11\n13 12\n13 13\n14 2\n14 3\n14 4\n14 5\n14 6\n14 7\n14 8\n14 9\n14 10\n14 11\n14 12\n14 13\n15 2\n15 3\n15 4\n15 5\n15 6\n15 7\n15 8\n15 9\n15 10\n15 11\n15 12\n15 13\n15 14\n15 15\n''') == '226'\nassert solution('''\n13 2\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n2 6 1\n2 7 1\n2 8 1\n2 9 1\n2 10 1\n2 11 1\n2 12 1\n2 13 1\n2 14 1\n2 15 1\n3 2 1\n3 3 1\n3 4 1\n3 5 1\n3 6 1\n3 7 1\n3 8 1\n3 9 1\n3 10 1\n3 11 1\n3 12 1\n3 13 1\n3 14 1\n3 15 1\n4 2 1\n4 3 1\n4 4 1\n4 5 1\n4 6 1\n4 7 1\n4 8 1\n4 9 1\n4 10 1\n4 11 1\n4 12 1\n4 13 1\n4 14 1\n4 15 1\n5 2 1\n5 3 1\n5 4 1\n5 5 1\n5 6 1\n5 7 1\n5 8 1\n5 9 1\n5 10 1\n5 11 1\n5 12 1\n5 13 1\n5 14 1\n5 15 1\n6 2 1\n6 3 1\n6 4 1\n6 5 1\n6 6 1\n6 7 1\n6 8 1\n6 9 1\n6 10 1\n6 11 1\n6 12 1\n6 13 1\n6 14 1\n6 15 1\n7 2 1\n7 3 1\n7 4 1\n7 5 1\n7 6 1\n7 7 1\n7 8 1\n7 9 1\n7 10 1\n7 11 1\n7 12 1\n7 13 1\n7 14 1\n7 15 1\n8 2 1\n8 3 1\n8 4 1\n8 5 1\n8 6 1\n8 7 1\n8 8 1\n8 9 1\n8 10 1\n8 11 1\n8 12 1\n8 13 1\n8 14 1\n8 15 1\n9 2 1\n9 3 1\n9 4 1\n9 5 1\n9 6 1\n9 7 1\n9 8 1\n9 9 1\n9 10 1\n9 11 1\n9 12 1\n9 13 1\n9 14 1\n9 15 1\n10 2 1\n10 3 1\n10 4 1\n10 5 1\n10 6 1\n10 7 1\n10 8 1\n10 9 1\n10 10 1\n10 11 1\n10 12 1\n10 13 1\n10 14 1\n10 15 1\n11 2 1\n11 3 1\n11 4 1\n11 5 1\n11 6 1\n11 7 1\n11 8 1\n11 9 1\n11 10 1\n11 11 1\n11 12 1\n11 13 1\n11 14 1\n11 15 1\n12 2 1\n12 3 1\n12 4 1\n12 5 1\n12 6 1\n12 7 1\n12 8 1\n12 9 1\n12 10 1\n12 11 1\n12 12 1\n12 13 1\n12 14 1\n12 15 1\n13 2 1\n13 3 1\n13 4 1\n13 5 1\n13 6 1\n13 7 1\n13 8 1\n13 9 1\n13 10 1\n13 11 1\n13 12 1\n13 13 1\n13 14 1\n13 15 1\n14 2 1\n14 3 1\n14 4 1\n14 5 1\n14 6 1\n14 7 1\n14 8 1\n14 9 1\n14 10 1\n14"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '''\n    3 2 1\n    1 2 10\n    1 4 6 6\n    1 6 10 5\n    2 10 30 33\n    ''') == '33'\n    assert solution(\n    '''\n    1 3 2\n    1 4 5 6\n    1 5 6 7\n    1 6 7 8\n    ''') == '25'\n    '''\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\nassert solution('3 3 1\\n3 1 10\\n3 2 10\\n1 2 10\\n2 10 30\\n3 10 60\\n') == '60'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('3 2 1') == '33'\nassert solution('3 2 1') == '33'\nassert solution('3 2 1') == '33'\nassert solution('3 2 1') == '33'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n20 15 10\\n7 7\\n30 0') == '405'"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n20 15 10\n7 7\n30 0\n''') == '405'\nassert solution('''3\n100 200 50\n0 0\n1 1\n''') == '400'\nassert solution('''3\n100 100 100\n0 0\n1 1\n''') == '401'\nassert solution('''3\n20 10 20\n7 7\n30 0\n''') == '405'\nassert solution('''3\n20 15 10\n7 7\n30 0\n''') == '405'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n30 20 10\\n7 7\\n30 10') == \"405\"\nassert solution('7\\n7 10\\n7 15\\n0 1\\n0 2\\n0 4\\n0 5\\n1 3\\n1 4\\n1 5\\n2 3\\n2 4\\n2 5') == \"897\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n20 15 10\\n7 7\\n30 0') == '405'\nassert solution('100\\n1 2 3 4 5 6 7 8 9 10\\n8 9 10 11 12 13 14 15 16 17 18 19 20\\n16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\\n28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59\\n58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100') == '8861'\nassert solution('100\\n1 2 3 4 5 6 7 8 9 10\\n8 9 10 11 12 13 14 15 16 17 18 19 20\\n16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\\n28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59\\n58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100') == '15825'\nassert solution('2\\n4 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6\\n4 5 6 7 8\\n8 5\\n3 6\\n5 6"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"405\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    3\n    20 15 10\n    7 7\n    30 0\n''') == '405'\n'''\n\n##############################################################################\n##########   SOLUTION WRITTEN BY RASH MANIAN   #############################\n##############################################################################\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '5'\nassert solution('3') == '10'\nassert solution('4') == '40'\nassert solution('5') == '100'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n20 15 10\n7 7\n30 0\"\"\") == \"405\"\nassert solution(\"\"\"3\n20 15 10\n7 7\n30 0\"\"\") == \"405\"\nassert solution(\"\"\"3\n100 20 10\n7 7\n30 0\"\"\") == \"400\"\nassert solution(\"\"\"1\n100 100\n100 100\"\"\") == \"0\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n5\n11 13 20 15\n7 7\n1 1\n3 3\n2 2\n\"\"\") == \"336\"\nassert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3\\n\"\n    \"20 15 10\\n\"\n    \"7 7\\n\"\n    \"30 0\\n\"\n) == \"405\"\nprint(solution(input()))\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4\\n1 2 4 7\\n\"\n) == \"28 4 21 14.0\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n\") == \"28.0\"\nassert solution(\"2\\n\") == \"4.0\"\nassert solution(\"3\\n\") == \"4.0\"\nassert solution(\"4\\n\") == \"4.0\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '28 4 21 14.0'\nassert solution('2') == '28 4 21 14.0'\nassert solution('3') == '28 4 21 14.0'\nassert solution('4') == '28 4 21 14.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 3\n4\n1 3 2\n3 4\n2 3''') == '28 4 21 14.0'\n'''\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"5\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'\n\"\"\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"28 4 21 14.0\"\n'''\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 2 4 7\n''') == '28 4 21 14.0'"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n4\n1 2 4 7\n''') == '28 4 21 14.0'\nassert solution(\n'''\n2\n1 2\n''') == '4 4 4 4'\nassert solution(\n'''\n4\n1 1 1 1\n''') == '1 1 1 1'\nassert solution(\n'''\n4\n2 1 2 1\n''') == '2 1 2 1'\n\nassert solution(\n'''\n4\n1 1 2 1\n''') == '1 1 2 1'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == 'no\\n'\nassert solution('4 2') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n'\nassert solution('2 2') == 'no\\n'\nassert solution('5 5') == 'yes\\n1 2 3 4 5\\n2 3 4 5 1\\n3 4 5 1 2\\n4 5 1 2 3\\n5 1 2 3 4\\n'\nassert solution('1 1') == 'yes\\n1\\n'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n'''\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4\\n2 3 4 1\\n') == '2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n1 2 3 4'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\\n\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n2 3 4 1 5\n3 4 1 2 5\n4 1 2 3 5\n5 1 2 3 4\n''') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n5 1 2 3 4'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n'\nassert solution('4 2\\n2 3 4 1\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n') == 'yes\\n2 3 4 1\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n'\nassert solution('4 2\\n2 3 4 1\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n') == 'no\\n'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\\n\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'\nassert solution('3 5 6 7 8\\n2 5 6 7 8\\n1 4 5 6 7\\n8 5 1 4\\n7 6 5 8\\n2 6 5 1\\n5 7 6 2\\n1 8 6 7\\n4 5 7 8\\n7 5 1 2\\n6 8 7 5\\n3 6 1 5\\n') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\nassert solution(\"4 5\\n2 1 3 4 5\\n3 1 4 5 2\\n4 1 5 2 3\\n5 1 2 3 4\") == \"yes\\n1 2 3 4 5\\n2 3 4 5 1\\n4 1 5 2 3\\n5 1 2 3 4\""
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2 3\n2 3 4\n3 4 1\n''') == 'yes'\nassert solution('''\n3\n1 2 3\n2 3 4\n3 4 1\n''') == 'no'\nassert solution('''\n4\n2 4 1 2\n3 4 1 2\n2 4 1 3\n1 3 2 4\n''') == 'no'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000000'\nprint(solution('5\\n10 10 -10 -4 10'))\nprint(solution('5\\n10 1 2 3 4 5'))\nprint(solution('5\\n1 2 3 4 5'))\nprint(solution('5\\n10 10 10 10 10'))\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '10.000000000'\nassert solution('1') == '0.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '10.000000000'\nassert solution('10') == '10.000000000'\nassert solution('10 10 -10 -4 10') == '10.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0.0\"\nassert solution(\"2\") == \"10.0\"\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n10 10 -10 -4 10') == '10.000000000'\nprint('Test passed')\nprint(solution('1\\n10 10 -10 -4 10'))\nprint('Test passed')\nprint(solution('1\\n-10 10 -10 -4 10'))\nprint('Test passed')\nprint(solution('2\\n10 10 -10 -4 10'))\nprint('Test passed')\nprint(solution('1\\n-10 -10 -4 10'))\nprint('Test passed')\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0.0'"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n10 10 -10 -4 10\n10 10 -10 -4 10\n10 10 -10 -4 10''') == \"10.000000000\"\nassert solution('''4\n-4 -5 6 -6\n-5 -4 3\n-4 3 7\n-4 3 7''') == \"3.750000\"\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n10 10 -10 -4 10''') == '10.000000000'\nassert solution('''1\n1''') == '1.0'\n\n'''"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0.0'\nassert solution('2') == '10.000000000'\nassert solution('3') == '10.000000000'\nassert solution('4') == '10.000000000'\nassert solution('5') == '10.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n10 10 -10 -4 10''') == '10.0'\nassert solution('''4\n-1 2 4''') == '4.0'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('5') == 3\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"1\"\n\nSample Input 2:\n4\n30\n3\n2\n13\nSample Output 2:\n0\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n30\\n3\\n2\\n45\\n\") == \"1\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"5\") == 2\nassert solution(\"10\") == 5\nassert solution(\"1\") == 0\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"10\") == \"8\"\nassert solution(\"300\") == \"1198\"\nassert solution(\"20\") == \"1198\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n30\n3\n2\n45\n''') == \"1\", 'wrong'\nassert solution('''\n8\n1\n2\n3\n4\n5\n6\n7\n8\n''') == \"5\", 'wrong'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('10') == '4'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'\nassert solution('1000\\n1000000000000\\n11000000000000\\n12000000000000\\n13000000000000\\n14000000000000\\n15000000000000\\n16000000000000\\n17000000000000\\n18000000000000\\n19000000000000\\n') == '10490574747898635'\n\"\"\""
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n3\n2\n45\n''') == '1'\nassert solution('''\n1\n1\n1\n1\n''') == '10'\nassert solution('''\n1\n1\n1\n1\n''') == '10'\nassert solution('''\n1\n2\n1\n1\n''') == '11'\nassert solution('''\n1\n1\n1\n1\n''') == '10'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n4') == 1\nassert solution('1\\n2\\n3\\n4') == 1\nassert solution('1\\n2\\n3\\n4') == 2\nassert solution('1\\n2\\n3\\n4') == 2\nassert solution('1\\n2\\n3\\n4') == 2\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 6 3.0 0.66\") == \"0.000000000 1.360000000\"\nassert solution(\"6 6 4.0 0.66\") == \"0.000000000 1.000000000\"\nassert solution(\"6 6 3.0 0.66\") == \"0.000000000 1.000000000\"\nassert solution(\"6 6 2.0 0.66\") == \"0.000000000 1.000000000\"\nassert solution(\"6 6 3.0 0.66\") == \"0.000000000 1.000000000\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\nSample Output:\n0.000000000 1.360000000\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897''') == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3''') == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n\"\"\") == '0.000000000 1.360000000'\nassert solution(\n\"\"\"10 10 3.0 0.0\n4 6 1\n5 7 1\n7 8 2\n1 9 1\n8 10 2\n6 9 2\n10 8 4\n3 9 5\n2 9 5\n7 8 4\n5 9 5\n1 8 5\n9 6 5\n5 6 5\n3 8 5\n6 4 5\n5 2 5\n4 7 5\n4 4 5\n6 4 5\n1 5 4\n4 3 5\n3 4 5\n2 4 5\n1 4 5\n1 3 5\n2 5 5\n2 5 5\n3 4 5\n3 4 5\n3 5 5\n\"\"\") == '0.000000000 -1.000000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.360000000\"\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.000000000\"\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 -1.000000000\"\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 0.360000000\"\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 0.000000000\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000'\nassert solution('4 4 3.0 0.66\\n4 4 8\\n3 4 1\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 -1.000000000'\nassert solution('10 4 3.0 0.66\\n1 4 8\\n2 4 8\\n4 6 1\\n4 5 5\\n3 6 1\\n4 5 5\\n3 5 3\\n') == '0.000000000 -0.360000000'\n\n'''\n\n\nclass Node:\n    def __init__(self, pos, id, flow, capacity):\n        self.pos = pos\n        self.id = id\n        self.flow = flow\n        self.capacity = capacity\n\n    def __repr__(self):\n        return repr((self.pos, self.id, self.flow, self.capacity))\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\nSample Output:\n0.000000000 1.360000000\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n''') == '1.0360000000 -0.360000000'\n\nassert solution('''\n6 6 2.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\nSample Output:\n0.000000000 1.360000000\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n''') == '1.0360000000 -0.360000000'\n\nassert solution('''\n4 2 6.0 0.66\n1 2 1\n2 3 1\n3 4 1\n1 3 3\n2 2 1\n3 2 2\nSample Output:\n0.000000000 -1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.000000000 -0.360000000\n0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n-0.880000000 0.360000000\n-0.880000000 -0.360000000\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 6 3.0 0.66\") == \"0.000000000 1.360000000\"\nassert solution(\"2 4 8\") == \"0.000000000 1.000000000\"\nassert solution(\"4 6 1\") == \"0.000000000 1.000000000\"\nassert solution(\"3 6 1\") == \"0.000000000 -1.000000000\"\nassert solution(\"4 5 5\") == \"0.880000000 0.000000000\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 6 3.0 0.66') == '0.000000000 1.360000000'\nassert solution('2 4 8') == '0.000000000 1.000000000'\nassert solution('4 6 1') == '0.000000000 1.000000000'\nassert solution('3 6 1') == '0.000000000 1.000000000'\nassert solution('4 5 5') == '0.000000000 0.360000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\\n'"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2') == '4'\nassert solution('2\\n1 1\\n2 2') == '1'\n\nsolution([4, 0, 0, 3, 3, 3, 2, 2, 1, 1, 2, 2])\nsolution([2, 1, 2])\nsolution([])\nsolution('1\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2')\n'''\nimport math"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2''') == '4'\nassert solution('''5\n0 0\n0 4\n4 4\n4 0\n2\n1 1\n2 2\n3 1\n4 1''') == '1'\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430:\n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 $K$, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u0434:"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '1'\n\nSample Input:\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\nSample Output:\n4\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '4'\nassert solution('''\n2\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n1\n''') == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4'\n\nSample Input:\n4\n2\n1 1\n3 3\n1 2\nSample Output:\n3\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '4'\nassert solution('''\n4\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '5'\n'''\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3\"\n) == \"1\"\nassert solution(\n    \"4\"\n) == \"2\"\n\"\"\""
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n0 0\\n0 3\\n3 3\\n3 0\\n2\") == \"4\"\nassert solution(\"2\\n1 1\\n2 2\\n\") == \"3\"\nassert solution(\"2\\n1 2\\n1 3\\n2 2\\n2 3\") == \"2\"\nassert solution(\"1\\n1 1\\n2 2\\n3 3\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == \"4\"\nassert solution('''\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == \"2\"\n\n'''\nsolution('''\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == \"2\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\n\"\"\") == \"2 3 1\"\n\nassert solution(\"\"\"\n5 3\n0 0 0\n1 0 0\n2 1 0\n3 2 0\n\"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n7 1\n0 0 1\n1 0 0\n0 1 1\n2 1 0\n3 0 0\n4 0 0\n5 2 0\n6 0 0\n\"\"\") == \"6 2\""
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"2 3 1\"\nassert solution(\"4 0\") == \"0 0 0 1\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1 0 1\") == \"1\"\nassert solution(\"1 0 1 2\") == \"1\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 0\n0 1\n0 2\n0 3\n''') == '2 3 1'\nassert solution('''\n1 0\n0 1\n''') == '1'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 0\n0 1\n0 2\n0 3\n''') == '3 2 1'\n\nassert solution('''\n4 0\n0 1\n0 2\n0 3\n''') == '2 1 0'\n\nassert solution('''\n5 0\n0 1\n0 2\n0 3\n0 4\n''') == '3 3 2'\n\nassert solution('''\n5 0\n0 1\n0 2\n0 3\n0 4\n''') == '2 2 0'\n\nassert solution('''\n7 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n''') == '5 3 1'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n6 0\n0 1\n0 2\n0 3\n0 4\n0 5\n1 4\n2 3\n2 5\n3 5\n4 2\n4 5\n5 2\n5 3\n5 5\n\"\"\") == \"2 3 5 1 4\"\nassert solution(\"\"\"\n1 0\n0 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 0\n0 1\n0 2\n0 3\n0 4\n1 4\n2 3\n3 4\n\"\"\") == \"3 4\"\nassert solution(\"\"\"\n6 0\n0 1\n0 2\n0 3\n0 4\n0 5\n1 4\n2 3\n2 5\n3 5\n4 2\n4 5\n5 2\n5 3\n5 5\n\"\"\") == \"2 4\"\nassert solution(\"\"\"\n1 0\n0 2\n0 3\n0 4\n0 5\n1 4\n2 3\n3 4\n\"\"\") == \"2 3 4\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 0\n0 1\n0 2\n0 3\n''') == '2 3 2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"2\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"8 1\") == \"3\"\nassert solution(\"8 0\") == \"0\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 0\\n1 2\\n0 1\") == \"3 2\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1 2\\n2 0\\n3 2') == '2\\n2 1\\n3 2'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 0 0\\n0 1.5 0\") == \"ok\"\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1 1 0\n2 1 1.5\n3 1 1 1.5\n4 1 1 2.5\n5 1 2 0\n6 1 2 1.5\n7 1 2 1 1.5\n8 1 2 2.5\n9 1 3 0\n10 1 3 1.5\n11 1 3 1 1.5\n12 1 3 2.5\n13 1 4 0\n14 1 4 1.5\n15 1 4 1 1.5\n16 1 4 2.5\n17 1 5 0\n18 1 5 1.5\n19 1 5 1 1.5\n20 1 5 2.5\n21 1 6 0\n22 1 6 1.5\n23 1 6 1 1.5\n24 1 6 2.5\n25 1 7 0\n26 1 7 1.5\n27 1 7 1 1.5\n28 1 7 2.5\n29 1 8 0\n30 1 8 1.5\n31 1 8 1 1.5\n32 1 8 2.5\n33 1 9 0\n34 1 9 1.5\n35 1 9 1 1.5\n36 1 9 2.5\n37 1 10 0\n38 1 10 1.5\n39 1 10 1 1.5\n40 1 10 2.5\n41 1 11 0\n42 1 11 1.5\n43 1 11 1 1.5\n44 1 11 2.5\n45 1 12 0\n46 1 12 1.5\n47 1 12 1 1.5\n48 1 12 2.5\n49 1 13 0\n50 1 13 1.5\n51 1 13 1 1.5\n52 1 13 2.5\n53 1 14 0\n54 1 14 1.5\n55 1 14 1 1.5\n56 1 14 2.5\n57 1 15 0\n58 1 15 1.5\n59 1 15 1 1.5\n60 1 15 2.5\n61 1 16 0\n62 1 16 1.5\n63 1 16 1 1.5\n64 1 16 2.5\n65 1 17 0\n66 1 17 1.5\n67 1 17 1 1.5\n68 1 17 2.5\n69 1 18 0\n70 1 18 1.5\n71 1 18 1 1.5\n72 1 18 2.5\n73 1 19 0\n74 1 19 1.5\n75 1 19 1 1.5\n76 1 19 2.5\n77 1 20 0\n78 1 20 1.5\n79 1 20 1 1.5\n80 1 20 2.5\n81 1 21 0\n82 1 21 1.5\n83 1 21 1 1.5\n84 1 21 2.5\n85 1 22 0\n86 1 22 1.5\n87 1 22 1 1.5\n88 1 22 2.5\n89 1 23 0\n90 1 23 1.5\n91 1 23 1 1.5\n92 1 23 2.5\n93 1 24 0\n94 1 24 1.5\n95 1 24 1 1.5\n96 1 24 2.5\n97 1 25 0\n98 1 25 1.5\n99 1 25 1 1.5\n100 1 25 2.5\n101 1 26 0\n102 1 26 1.5\n103 1 26 1 1.5\n104 1 26 2.5\n105 1 27 0\n106 1 27 1.5\n107 1 27 1 1.5\n108 1 27 2.5\n109 1 28 0\n110 1 28 1.5\n111 1 28 1 1.5\n112 1 28 2.5\n113 1 29 0\n114 1 29 1.5\n115 1 29 1 1.5\n116 1 29 2.5\n117 1 30 0\n118 1 30 1.5\n119 1 30 1 1.5\n120 1 30 2.5\n121 1 31 0\n122 1 31 1.5\n123 1 31 1 1.5\n124 1 31 2.5\n125 1 32 0\n126 1 32 1.5\n127 1 32 1 1.5\n128 1 32 2.5\n129 1 33 0\n130 1 33 1.5\n131 1 33 1 1.5\n132 1 33 2.5\n133 1 34 0\n134 1 34 1.5\n135 1 34 1 1.5\n136 1 34 2.5\n137 1 35 0\n138 1 35 1.5\n139 1 35 1 1.5\n140 1 35 2.5\n141 1 36 0\n142 1 36 1.5\n143 1 36 1 1.5\n144 1 36 2.5\n145 1 37 0\n146 1 37 1.5\n147 1 37 1 1.5\n148 1 37 2.5\n149 1 38 0\n150 1 38 1.5\n151 1 38 1 1.5\n152 1 38 2.5\n153 1 39 0\n154 1 39 1.5\n155 1 39 1 1.5\n156 1 39 2.5\n157 1 40 0\n158 1 40 1.5\n159 1 40 1 1.5\n160 1 40 2.5\n161 1 41 0\n162 1 41 1.5\n163 1 41 1 1.5\n164 1 41 2.5\n165 1 42 0\n166 1 42 1.5\n167 1 42 1 1.5\n168 1 42 2.5\n169 1 43 0\n170 1 43 1.5\n171 1 43 1 1.5\n172 1 43 2.5\n173 1 44 0\n174 1 44 1.5\n175 1 44 1 1.5\n176 1 44 2.5\n177 1 45 0\n178 1 45 1.5\n179 1 45 1 1.5\n180 1 45 2.5\n181 1 46 0\n182 1 46 1.5\n183 1 46 1 1.5\n184 1 46 2.5\n185 1 47 0\n186 1 47 1.5\n187 1 47 1 1.5\n188 1 47 2.5\n189 1 48 0\n190 1 48 1.5\n191 1 48 1 1.5\n192 1 48 2.5\n193 1 49 0\n194 1 49 1.5\n195 1 49 1 1.5\n196 1 49 2.5\n197 1 50 0\n198 1 50 1.5\n199 1 50 1 1.5\n200 1 50 2.5\n201 1 51 0\n202 1 51 1.5\n203 1 51 1 1.5\n204 1 51 2.5\n205 1 52 0\n206 1 52 1.5\n207 1 52 1 1.5\n208 1 52 2.5\n209 1 53 0\n210 1 53 1.5\n211 1 53 1 1.5\n212 1 53 2.5\n213 1 54 0\n214 1 54 1.5\n215"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n0 0 0\n0 1.5 0\n\"\"\") == \"ok\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([0, 0, 0]) == 'ok'\nassert solution([0, 1.5, 0]) == 'crash'\nassert solution([0, 0, 2]) == 'crash'\nassert solution([0, -1.5, 0]) == 'crash'\nassert solution([0, 0, -1]) == 'crash'\n\nimport sys\nimport io\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n0 0 0') == 'ok'\nassert solution('2\\n0 0 0\\n0 1.5 0') == 'crash'\n\n\nSample Input:\n3\n0 0 0\n0 0 0\n0 1.5 0\nSample Output:\ncrash\n\"\"\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([0,0,0]) == 'ok'\nassert solution([0,1.5,0]) == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n0 0 0\\n0 1.5 0') == 'ok'\nassert solution('4\\n0 0 1.5 0\\n0 1.5 1.5 0\\n0 1.5 1.5 1.5\\n0 1.5 1.5 1.5 1.5') == 'ok'\nprint('Runtime: {} ms'.format(round(((time() - start) * 1000), 1)))"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n0 1\n''') == 'ok'\n\nassert solution('''\n2\n0 0 0\n0 1.5 0\n''') == 'crashed'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n0 0 0\n0 1.5 0\n''') == 'ok'\n\nassert solution('''\n3\n0 0 0\n0 1.5 0\n0 2 0\n''') == 'ok'\n\nassert solution('''\n3\n0 0 0\n0 1.5 0\n0 2 0\n''') == 'ok'\n\nassert solution('''\n4\n0 0 0\n0 1.5 0\n0 2 0\n0 3 0\n''') == 'ok'\n\nassert solution('''\n4\n0 0 0\n0 1.5 0\n0 2 0\n0 3 0\n''') == 'ok'"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n3\n0 1\n0 2\n0 3\n0 4''') == '2'"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4') == '2'\nassert solution('3 10') == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4') == '2'\nassert solution('5 5') == '3'"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 4\") == \"2\"\nassert solution(\"10 10\") == \"14\"\nassert solution(\"20 15\") == \"14\"\nassert solution(\"20 16\") == \"15\"\nassert solution(\"20 17\") == \"16\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4''') == \"2\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4''') == '2'\nassert solution('''10 3\n0 1\n0 3\n1 2\n2 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23\n22 24\n23 25\n24 26\n25 27\n26 28\n27 29\n28 30\n29 31\n30 32\n31 33\n32 34\n33 35\n34 36\n35 37\n36 38\n37 39\n38 40\n39 41\n40 42\n41 43\n42 44\n43 45\n44 46\n45 47\n46 48\n47 49\n48 50\n49 51\n50 52\n51 53\n50 54\n49 55\n48 56\n47 57\n46 58\n45 59\n44 60\n43 61\n42 62\n41 63\n40 64\n39 65\n38 66\n37 67\n36 68\n35 69\n34 70\n33 71\n32 72\n31 73\n30 74\n29 75\n28 76\n27 77\n26 78\n25 79\n24 80\n23 81\n22 82\n21 83\n20 84\n19 85\n18 86\n17 87\n16 88\n15 89\n14 90\n13 91\n12 92\n11 93\n10 94\n9 95\n8 96\n7 97\n6 98\n5 99\n4 100\n3 101\n2 102\n1 103''') == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '2'\n\nassert solution('5 3\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '4'\n\nassert solution('6 6\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '2'\n\nassert solution('2 5\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '1'\n\nassert solution('5 5\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '4'"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == '2'\nassert solution('5 10\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == '1'\nassert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == '4'\nassert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == '2'"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3 4 2\nA B C\nD E F\n1 A E\n1 A C\n1 B D\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\n\"\"\""
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\n\nassert solution('''\n2 2 2 2\nC D\nE F\n1 A E\n1 A C\n1 B D\n''') == '3'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 3 2 3\nA B C\nD E F\nG H I\nJ K L\nM N O\nP Q R S\nT U V\nW X Y Z\n''') == \"2\"\nassert solution('''\n10 3 3 3\nA B C\nD E F\nG H I\nJ K L\nM N O\nP Q R S\nT U V\nW X Y Z\n''') == \"1\"\nassert solution('''\n2 1 2 1\nA B\nC D\n''') == \"2\"\nassert solution('''\n3 3 3 3\nA B C\nD E F\nG H I\nJ K L\nM N O\nP Q R S\nT U V\nW X Y Z\n''') == \"3\""
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\nassert solution('''\n3 5 3 3\nA B C\nD E F\nG H I\n3 A E G\n3 A C E\n3 B D F\n''') == '1'\nassert solution('''\n8 4 2 3\nA B C\nD E F\nG H I\nJ K L\nM N\nO P\nQ R\nS T\nU V\n''') == '0'\nassert solution('''\n8 3 3 3\nA B C\nD E F\nG H I\nJ K L\nM N\nO P\nQ R\nS T\nU V\n''') == '1'\nassert solution('''\n10 3 2 3\nA B C\nD E F\nG H I\nJ K L\nM N\nO P\nQ R\nS T\nU V\n''') == '3'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == \"2\"\nassert solution('''\n6 4 4 4\nA B C D E\nF G H I J\nK L M N O\nP Q R S T\nU V W X Y\nZ Y Z Z\n''') == \"3\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 3 3 3\") == \"2\"\nassert solution(\"10 3 10 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1 2 3\"\nassert solution(\"5\") == \"1 2 3 4 5\"\nassert solution(\"10\") == \"1 2 3 4 5 6 7 8 9\"\nassert solution(\"15\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1 2 3'\nassert solution('4') == '1 2 3 4'\nassert solution('9') == '1 2 3 4 5 6 7 8 9'\nassert solution('15') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n\n'''\n\n'''\nwith open(\"input.txt\") as f:\n    lines = f.readlines()\n\n    for line in lines:\n        print(solution(line))\n'''"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\nassert solution('4') == '0'\nassert solution('5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\nYYY\nNYY\nYNY\n\"\"\") == \"2 1 2\"\n\nassert solution(\"\"\"\n1\nYYY\nNYY\nYNY\n\"\"\") == \"1 1 1\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nYYY\\nYNY\\n') == '2 1 2'\nassert solution('1\\nYYY\\nYYY\\n') == '3 1 2'\nassert solution('3\\nYYY\\nYYY\\n') == '2 2 1'"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\nYYY\\nNYY\\nYNY\") == \"2 1 2\"\nassert solution(\"3\\nYYY\\nNYY\\nYNY\") == \"3 1 2\"\nassert solution(\"3\\nYYY\\nNYY\\nYNY\") == \"4 1 2 3\"\nassert solution(\"3\\nYYY\\nNYY\\nYNY\") == \"5 1 2 3 4\"\nassert solution(\"3\\nYYY\\nNYY\\nYNY\") == \"6 1 2 3 4 5\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\nYYY\\nNYY\\nYNY') == '2 1 2'\nassert solution('5\\nYYY\\nNYY\\nYNY\\nYYY\\nYYY') == '1 2 3 4 5'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n0\nYYY\nNYY\nYNY\n''') == '1 2 3'\nassert solution(\n'''\n3\nYYY\nNYY\nYNY\n''') == '2 1 2'\n''')\n\n\"\"\""
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"YYY\") == \"2\"\nassert solution(\"NYY\") == \"1 2\"\nassert solution(\"YNY\") == \"1 2 3\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nY\nY\nY\n''') == '3'\nassert solution('''\nY\nY\nY\nY\nY\n''') == '4'\nassert solution('''\nY\nY\nY\nN\n''') == '2'\nassert solution('''\nY\nY\nY\nY\nY\nN\n''') == '3'\n''')"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '5'\nassert solution('3') == '4'\nassert solution('10') == '0'\nassert solution('-10') == '5'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1\\n1 2\\n2 1\\n') == '0\\n'\nassert solution('3\\nx..\\n...\\n') == '5\\n'\nassert solution('3\\n.x.\\n.x.\\n.x.\\n') == '0\\n'\nassert solution('3\\n.x.\\n.x.\\n') == '5\\n'\nassert solution('1\\n') == '4\\n'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\nx.x.x.x.x.x.x\\n.x.x.x.x.x.x.x.x\\n.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x\\n.x.x.x.x.x.x.x.x.x') == '4 0 5 0'"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\") == \"4 0 5\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '0'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2''') == '4\\n0\\n5\\n'\n\nassert solution('''5 5\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx''') == '2\\n0\\n4\\n0\\n'\n\nassert solution('''100 5\nxxxxxxxx\nxxxxxxx\nxxxxxxx\nxxxxxxx\nxxxxxxx\nxxxxxxx\nxxxxxxx\nxxxxxxxx\nxxxxxxx\nxxxxxxx\nxxxxxxx\nxxxxxxx\nxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\nxxxxxxxx\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\nx..\\n...\\n...') == '4\\n0\\n5\\n'\nprint('Solution: %s' % solution(*(stdin.split())))\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '4'\nassert solution('5 3') == '5'\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"1 0 3 2\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"1 1\""
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1.000 0.000'\nassert solution('1 2 3') == '1.000 2.000'"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n5\n3\n4\n5 3\n''') == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n1\\n3') == '4.114 -2.842'\nassert solution('2\\n10\\n2\\n8') == '6.297 -0.784'\nassert solution('3\\n2\\n5\\n3') == '1.118 2.037'\n\nSample Input:\n2\n3\n1\n3\nSample Output:\n1.118 2.037\n0.000 0.000\n\"\"\"\n\n\nfrom math import sqrt\nimport sys\nfrom functools import reduce\nfrom collections import defaultdict, deque\nfrom itertools import permutations, combinations\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n3\") == \"1.118 2.037\\n5.000 3.000\\n4.114 -2.842\\n6.297 -0.784\\n\"\nassert solution(\"10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n\") == \"10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000\\n10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000\\n10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000\\n\"\nassert solution(\"10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n\") == \"10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000\\n10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000\\n10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000 10.000\\n\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1.200 0.000\"\nassert solution(\"1\") == \"1.000 -0.000\"\nassert solution(\"3\") == \"0.000 -0.000\"\nassert solution(\"2 5 3\") == \"1.000 -2.000\"\nassert solution(\"3\") == \"0.000 -0.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1.118 2.037'\nassert solution('3') == '1.118 2.037'\nassert solution('3') == '1.118 2.037'\nassert solution('3') == '1.118 2.037'\nassert solution('3') == '1.118 2.037'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1.118 2.037'\nassert solution('3') == '1.118 2.037'\n\ninput()\n3\n5\n3\n4\n5 3\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n5\n3\n4\n5 3\n\"\"\") == \"4.114 -2.842\"\nassert solution(\"\"\"\n2\n10\n7.5\n9\n1.5\n\"\"\") == \"10.0 -2.0\"\n\nassert solution(\"\"\"\n1\n1\n2\n3\n\"\"\") == \"2.0\"\n\nassert solution(\"\"\"\n1\n2\n3\n4\n\"\"\") == \"2.0\"\n\nassert solution(\"\"\"\n1\n2\n3\n4\n\"\"\") == \"2.0\""
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '4.118 -2.842'\nassert solution('2') == '1.118 2.037'\nassert solution('3') == '4.114 -2.842'\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2.061 -0.541'\nassert solution('3') == '1.746 -2.937'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"4 5\n2 3 5 7\n2\n3\n5\n6\n8\"\"\"\n) == \"13\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5') == '3'\nassert solution('5 5') == '5'\nassert solution('2 3 5 7') == '5'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 5 7\") == \"5\"\nassert solution(\"2\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"5 5\") == \"0\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n\"\"\") == \"13\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n') == '13'\nassert solution('5 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n') == '10'"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\") == \"5\"\nassert solution(\"4 5\\n2 3 5 7\\n3\\n6\\n5\\n7\") == \"10\"\nassert solution(\"4 5\\n2 3 5 7\\n3\\n6\\n5\\n7\\n3\\n3\") == \"6\"\nassert solution(\"4 5\\n2 3 5 7\\n3\\n8\\n5\\n7\\n3\\n3\") == \"13\"\nassert solution(\"4 5\\n2 3 5 7\\n3\\n10\\n5\\n7\\n3\\n3\") == \"13\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 5 7') == '3'\nassert solution('4 5') == '5'\nassert solution('6 4') == '7'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 5 7\\n2\\n3\\n5\\n6') == '8\\n13\\n'\nassert solution('5 5 7 5 7\\n2\\n3\\n5\\n6') == '8\\n13\\n'\nassert solution('10 10 9 10\\n2\\n3\\n5\\n6') == '10\\n13\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '7\\n'\nassert solution('3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '8\\n'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '13'\nassert solution('''1\n1\n2\n''') == '0'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\") == \"5\\n8\\n10\"\nassert solution(\"4 5\\n2 3 5 7\\n2\\n3\") == \"3\\n5\\n10\"\nassert solution(\"4 5\\n2 3 5 7\\n2\\n3\") == \"5\\n8\\n10\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 4\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n\"\"\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '1'\nassert solution('6 2\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5') == '2'\nassert solution('4 2\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5') == '3'\nassert solution('9 2\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n3 6\\n3 7\\n4 8\\n4 9') == '3'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n\") == \"0\"\nassert solution(\"7 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n\") == \"1\"\nassert solution(\"8 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n\") == \"2\"\nassert solution(\"9 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n\") == \"3\"\nassert solution(\"10 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n\") == \"4\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('15 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n0 7\\n1 6\\n2 7\\n3 6\\n4 6\\n5 6') == '1'"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n''') == '0'\nassert solution('''\n6 5\n0 1\n1 2\n1 3\n1 4\n1 5\n1 2 5 \n''') == '1'\n''')"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\nassert solution('5 0 0\\n2 3\\n2 1\\n2 5\\n3 4\\n3 5\\n0 1\\n1 2 5\\n2 1 5') == '0'"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n2 3\") == \"0\"\nassert solution(\"6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\") == \"2\""
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 1') == '0'\nassert solution('4 5 1 5 2') == '0'\nassert solution('7 1 4 7 2 6') == '4'\n\n-- Stretch Goal --\nWhat if we could map each pig to a single vertex of a graph?\n\nOur solution will still work, but we can still explore a new space more efficiently.\n\nIn our solution, we only examine each pig once. We can count the number of times each pig appears in the input.\n\n---\n\nIf we can map each pig to a single vertex of a graph, we can use a similar approach to count the number of times each pig appears in the input. We can incrementally incrementally build the graph.\n\nIf we can create a graph with only one vertex per pig, we can just add edges from each vertex to all of the other vertices.\n\nIf we can create a graph with only one edge per pig, we can incrementally add a single edge from any vertex to any other vertex.\n\n---\n\nExample:\n\n1 2\n2 3\n2 4\n1 5\n1 2 5\n\nFirst, we create the graph.\n\n0 1\n1 2\n2 3\n2 4\n1 5\n\nThen we count the number of times each pig appears in the input, and incrementally add edges from any vertex to all of the other vertices.\n\n0 1\n0 1\n0 1\n1 2\n1 2\n1 2\n1 3\n1 2\n1 3\n1 4\n1 5\n\nFinally, we decrementally remove the edges.\n\n0 1\n0 2\n1 3\n2 4\n1 5\n\n-----\n\nWhen we count the number of times each pig appears in the input, we can use the\nfollowing helper function:\n\n    def pig_counter(pigs, vertex_to_pig):\n        vertex_to_pig[vertex] = pig_count\n        vertex_count += 1\n\n    We can incrementally add an edge to our graph from any vertex to any other vertex. To add an edge from any vertex to any other vertex, we can:\n\n        for pig, vertex in enumerate(vertex_to_pig):\n            for connected_vertex in graph[vertex]:\n                if connected_vertex!= vertex:\n                    graph[vertex].append(connected_vertex)\n                    graph[connected_vertex].append(vertex)\n\n    We can also decrementally remove the edges. If we remove an edge from any vertex, we can count the number of times each pig appears in the input and decrementally decrementally remove the edges from that vertex.\n\n        vertex_to_pig[vertex] -= 1\n\n        for connected_vertex in graph[vertex]:\n            graph[vertex].remove(connected_vertex)\n\n        graph[vertex] = None\n\n        vertex_to_pig[vertex] = None\n\n\n'''\nfrom collections import defaultdict\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pig_count, graph = self.count_pigs(stdin)\n        vertex_to_pig = self.make_graph(graph)\n        for vertex in vertex_to_pig:\n            vertex_to_pig[vertex] -= 1\n        \n        return self.get_output(vertex_to_pig, pig_count)\n\n    def count_pigs(self, stdin: str) -> (int, defaultdict):\n        pig_count = 0\n        graph = defaultdict(list)\n        for pig, vertex in enumerate(stdin.strip().splitlines()):\n            pig_count += 1\n            vertex = int(vertex)\n            vertex_to_pig = {}\n            for connected_vertex in graph[vertex]:\n                vertex_to_pig[connected_vertex] = vertex_to_pig.get(connected_vertex, 0) + 1\n            graph[vertex] = vertex_to_pig\n            vertex_to_pig[vertex] = vertex_to_pig.get(vertex, 0) + 1\n        \n        return pig_count, graph\n\n    def make_graph(self, graph: dict):\n        vertex_to_pig = {}\n        for vertex in graph:\n            vertex_to_pig[vertex] = len(graph[vertex])\n        return vertex_to_pig\n\n    def get_output(self, vertex_to_pig: dict, pig_count: int):\n        pig_map = {i: 0 for i in range(1, pig_count + 1)}\n        for vertex in vertex_to_pig:\n            pig_map[vertex_to_pig[vertex]] += 1\n        \n        output = ''\n        for vertex in pig_map:\n            output += '{} '.format(vertex)\n        \n        return output\n\n'''\nSolution from LeetCode\n\n'''"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '0'\nassert solution('6 3') == '0'\nassert solution('6 3') == '0'\nassert solution('3 2') == '1'\nassert solution('10 1 10 2 3 6 9') == '2'\n\nstdin = \"\"\"\n10 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5\n\"\"\"\n\nsolution(stdin)\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n6 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 7\n0 1\n1 2\n2 3\n3 4\n0 3\n1 4\n2 3 \n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 5\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 3\n0 1\n1 2\n2 3\n2 4\n1 5\n0 3\n0 4\n1 5 \n\"\"\") == \"1\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n') == '106\\n107\\n71\\n'\nassert solution('5 3\\n10 20 50 70\\n3 1 L1 C1\\n1 2 U1 C1\\n3 3 U1 C1\\n5 2 U1 C1\\n3 4 L1 C1\\n2 4 U1 C1\\n5 1 L1 C1\\n4 2 U1 C1\\n1 4 L1 C1\\n4 1 U1 C1\\n3 2 L1 C1\\n5 3 U1 C1\\n5 1 U1 C1\\n4 3 L1 C1\\n2 2 L1 C1\\n2 5 U1 C1\\n3 2 U1 C1\\n1 3 L1 C1\\n3 5 L1 C1\\n1 1 L1 C1\\n2 1 U1 C1\\n4 3 U1 C1\\n3 2 L1 C1\\n2 1 L1 C1\\n1 1 U1 C1\\n3 5 L1 C1\\n2 1 U1 C1\\n1 5 L1 C1\\n1 5 U1 C1\\n2 4 U1 C1\\n1 4 L1 C1\\n2 4 U1 C1\\n2 4 L1 C1\\n1 1 U1 C1\\n1 1 L1 C1\\n3 4 U1 C1\\n3 1 L1 C1\\n3 1 U1 C1\\n2 4 L1 C1\\n2 1 U1 C1\\n2 2 U1 C1\\n2 5 L1 C1\\n2 3 U1 C1\\n2 2 L1 C1\\n2 2 U1 C1\\n3 2 U1 C1\\n3 1 L1 C1\\n3 2 U1 C1\\n2 2 U1 C1\\n2 2 L1 C1\\n1 2 U1 C1\\n1 3 L1 C1\\n2 1 U1 C1\\n3 1 L1 C1\\n3 4 U1 C1\\n2 1 L1 C1\\n3 1 U1 C1\\n5 3 U1 C1\\n1 4 L1 C1\\n3 1 L1 C1\\n5 3 U1 C1\\n1 5 U1 C1\\n1 4 L1 C1\\n2 5 U1 C1\\n1 1 L1 C1\\n3 4 U1 C1\\n1 4 U1 C1\\n2 2 U1 C1\\n1 2 L1 C1\\n1 1 U1 C1\\n3 5 U1 C1\\n1 1 L1 C1\\n4 4 U1 C1\\n1 3 U1 C1\\n3 4 L1 C1\\n3 4 U1 C1\\n5 2 U1 C1\\n3 4 L1 C1\\n1 2 L1 C1\\n2 1 U1 C1\\n5 3 U1 C1\\n3 5 U1 C1\\n2 1 U1 C1\\n5 2 U1 C1\\n2 1 L1 C1\\n2 4 U1 C1\\n3 2 L1 C1\\n1 4 U1 C1\\n1 4 L1 C1\\n1 1 L1 C1\\n2 1 U1 C1\\n3 1 L1 C1\\n3 2 U1 C1\\n1 4 U1 C1\\n2 1 L1 C1\\n1 1 L1 C1\\n1 1 U1 C1\\n1 1 L1 C1\\n2 1 U1 C1\\n1 1 L1 C1\\n3 5 U1 C1\\n2 5 L1 C1\\n1 4 L1 C1\\n3 4 U1 C1\\n2 1 L1 C1\\n4 4 U1 C1\\n3 2 L1 C1\\n1 4 L1 C1\\n1 1 L1 C1\\n1 5 U1 C1\\n2 4 U1 C1\\n1 1 U1 C1\\n2 5 U1 C1\\n1 1 L1 C1\\n2 1 L1 C1\\n3 1 U1 C1\\n3 1 L1 C1\\n2 2 U1 C1\\n1 5 L1 C1\\n3 1 L1 C1\\n5 3 U1 C1\\n2 3 U"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '107'\nassert solution('3 1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '107'\nassert solution('3 1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '107'\nassert solution('3 1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '107'\nassert solution('3 1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '107'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '107'"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1''') == '107'\nassert solution('''3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1''') == '106'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"106\\n107\\n71\\n\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '106\\n107\\n71'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\nSample Input:\n3 2\n15 16 5 L1\n3 5 C1\n7 L1 U1 L1\nSample Output:\n6\n5\n0\n''') == '3 1\\n13\\n21\\n'''\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1') == '106'\nassert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '107'\nassert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '71'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '106\\n107\\n71'"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '107'\nassert solution('''3 3\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '106'"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('AA') == '51'\nassert solution('AB') == '0'\nassert solution('AAAAA') == '5'\nassert solution('AAAB') == '2'\nassert solution('ABABA') == '1'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AA\") == \"1\"\nassert solution(\"AAA\") == \"2\"\nassert solution(\"ABA\") == \"1\"\nassert solution(\"BAB\") == \"0\""
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('AA') == '51'\nassert solution('BB') == '0'\nassert solution('CC') == '0'\n\"\"\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"AA\") == \"51\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"51\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"AA\") == \"51\"\nassert solution(\"AA\") == \"51\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"AA\") == \"51\""
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"AA\") == \"2\"\nassert solution(\"AAAA\") == \"12\"\nassert solution(\"AAAAAAAAAAAA\") == \"4769648876\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    AA\n    ''') == '51'"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"A\") == \"1\"\nassert solution(\"AA\") == \"51\"\nassert solution(\"AAAA\") == \"104\"\nassert solution(\"BBBB\") == \"44\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"no ties\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"2 1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"1 2\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"1 2\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n1 2\n2 3\n3 2\n\"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n3\n2 1 5 7 4\n2 1 5 7 4\n1 2 3 5 6\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'no ties'\nassert solution(\"\"\"\n1 2 3\n2 2\n\"\"\") == '1 2'\nassert solution(\"\"\"\n1 2 3\n2 3\n\"\"\") == '1 2'\n\nassert solution(\"\"\"\n3 5\n5 3\n8 8\n4 4\n\"\"\") == '3 5'"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"no ties\"\nassert solution(\"2\") == \"no ties\"\nassert solution(\"3\") == \"no ties\"\nassert solution(\"4\") == \"no ties\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1 2\"\nassert solution(\"2\\n3\\n4\\n5\\n6\\n7\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'no ties'\nassert solution('5') == 'no ties'\nassert solution('10') == 'no ties'\nassert solution('8') == 'no ties'\nassert solution('20') == 'no ties'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n\"\n) == \"1 2\"\n\nassert solution(\n    \"3\\n14 23 39 59 63\\n8 17 35 55 61\\n15 26 42 53 71\\n10 25 31 57 64\\n6 20 44 52 68\\n\"\n) == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71') == '1 2'\nassert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n13 57 70 11 24') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"no ties\"\nassert solution(\"3\") == \"no ties\"\nassert solution(\"4\") == \"no ties\"\nassert solution(\"5\") == \"no ties\"\nassert solution(\"6\") == \"no ties\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"no ties\"\nassert solution(\"3\") == \"1 2\"\nassert solution(\"4\") == \"no ties\"\nassert solution(\"6\") == \"1 3\"\nassert solution(\"7\") == \"1 3\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '0'\nassert solution(\n'''\n3\n3 1 2\n1 2 3\n1 2 3\n''') == '2'\nassert solution(\n'''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '4'\n\n'''\n\nSample Input:\n'''\n\nSample Output:\n\n'''\n\n'''\n\n##############\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3\\n') == '0'\nassert solution('3\\n3 2 1\\n1 2 3\\n1 2 3\\n') == '2'\nassert solution('3\\n3 2 1\\n1 2 3\\n1 2 3\\n') == '0'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('5') == '1'\n'''\n\nn = int(input())\n\ncamel_id = 1\ncamel_camel_id = 1\n\nfor line in stdin.split('\\n'):\n    if camel_id < n:\n        if camel_camel_id == camel_id:\n            camel_camel_id = 1\n        else:\n            camel_camel_id += 1\n    else:\n        break\n\nprint(camel_camel_id - 1)"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n3 2 1\\n1 2 3\\n1 2 3') == '0'\nassert solution('2\\n5 4 1\\n3 4 1\\n1 4 1') == '1'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '0'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '0'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('10') == '6'\nassert solution('50') == '31'\n\n'''\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\n\nassert solution('2') == '2'\n\nassert solution('3') == '3'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3') == '0'\nassert solution('3\\n3 3 1\\n1 2 3\\n1 2 3') == '2'\nassert solution('3\\n3 1 2 3\\n1 2 3\\n1 2 3') == '4'\nassert solution('2\\n1 2 3\\n1 2 3') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '0.4'\nassert solution('6 2 3') == '0.2'\nassert solution('10 2 3') == '0.171428571429'\nassert solution('16 3 4') == '0.228571428571'"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.5 0.5 0.428571428571 0.6 0.3 0.7 0.0 0.2 0.0'\nprint(solution('''2\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n'''))\n\n'''\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\") == \"0.4\\n0\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3\\n6 2 3') == '0.2\\n0'\nassert solution('5\\n1 2 3\\n10 2 3') == '0.171428571429\\n0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n5 2 3\\n3 3 4\\n10 2 3') == '0.4\\n0.2'\nassert solution('1\\n4 2 3\\n5 3 4\\n10 2 3') == '0.2\\n0.2'\nassert solution('3\\n4 2 3\\n5 3 4\\n10 2 3') == '0.171428571429\\n0.228571428571'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\\n\") == \"0.4\\n0\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 3') == '0.5'\nassert solution('1 2 3') == '0.4'\nassert solution('1 10 3') == '0.2083333333333'\nprint('all tests passed')\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '0.4'\nassert solution('6 2 3') == '0'\nassert solution('10 2 3') == '0.2'\nassert solution('16 3 4') == '0.171428571429'"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0.4\\n0.2'\nassert solution('4') == '0.171428571429\\n0'\nassert solution('20') == '0.371645569619\\n0'\nprint('Check passed')\n\n\"\"\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n10 1 1 3\\n1 10 5 1\\n2 1 1 1\\n4 3 2 3') == '0.0\\n0.2\\n0.571428571429\\n0.428571428571\\n0.263157894737'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1 + 1 = 2\"\nassert solution(\"4\") == \"3 + 3 = 6\"\nassert solution(\"5\") == \"4 * 4 = 16\"\nassert solution(\"6\") == \"5 - 5 = 0\"\nassert solution(\"7\") == \"6 - 6 = 0\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\") == \"1 + 2 = 3\"\nassert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"3 * 3 = 9\\n4 - 5 = -1\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n3 4\n5 6\n7 8''') == '2 + 4 = 6\\n3 * 3 = 9\\n7 - 8 = 5'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"5\\n1 3\\n3 4\\n4 5\\n3 5\\n\") == \"1 + 3 = 4\\n3 * 3 = 9\\n4 - 5 = -1\\n3 + 5 = 8\\n4 - 5 = -2\""
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 3\\n2 3\\n3 4\\n5 6\") == \"2 + 3 = 5\\n3 * 3 = 9\\n4 - 5 = -1\\n5 - 5 = 5\"\nassert solution(\"2\\n1 2\\n2 2\\n3 3\\n4 4\\n5 5\") == \"2 + 2 = 4\\n3 * 3 = 9\\n4 - 5 = -1\\n5 - 5 = 5\"\nassert solution(\"2\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == \"impossible\"\nassert solution(\"1\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == \"impossible\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('6\\n-2 2\\n-5 -3\\n-4 4\\n-7 -7\\n1 1') == '-2 + 2 = 5\\n-5 - 3 = 2\\n-4 + 4 = 8\\n-7 - 7 = 0'\nassert solution('10\\n1 5\\n3 3\\n4 5\\n-1 -6\\n7 -7') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n7 - 7 = 0'\nassert solution('15\\n1 2\\n3 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12') == '1 + 2 = 3\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n7 - 7 = 0\\n8 - 8 = 0\\n9 + 9 = 8\\n10 - 10 = 0\\n11 - 11 = 0\\n12 - 12 = 0'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('2\\n1\\n3 3\\n4 5\\n-1 -6') == 'impossible'\nassert solution('3\\n1\\n3 3\\n4 5\\n-1 -6') == 'impossible'\nassert solution('5\\n1\\n3 3\\n4 5\\n-1 -6') == 'impossible'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1 + 5 = 6\"\nassert solution(\"4\") == \"3 * 3 = 9\"\nassert solution(\"5\") == \"4 - 5 = -1\"\nassert solution(\"10\") == \"impossible\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n\"\nassert solution(\"3\\n3\\n3\\n3\\n\") == \"impossible\\n\"\nassert solution(\"100\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n17 18\\n19 20\\n21 22\\n23 24\\n25 26\\n27 28\\n29 30\\n31 32\\n33 34\\n35 36\\n37 38\\n39 40\\n41 42\\n43 44\\n45 46\\n47 48\\n49 50\\n51 52\\n53 54\\n55 56\\n57 58\\n59 60\\n61 62\\n63 64\\n65 66\\n67 68\\n69 70\\n71 72\\n73 74\\n75 76\\n77 78\\n79 80\\n81 82\\n83 84\\n85 86\\n87 88\\n89 90\\n91 92\\n93 94\\n95 96\\n97 98\\n99 100\\n\") == \"2 * 9 = 36\\n6 + 7 = 13\\n3 * 2 = 6\\n5 + 1 = 6\\n6 - 4 = 2\\n18 * 2 = 36\\n-5 - 4 = 6\\n6 - 5 = -1\\n6 * 8 = 72\\n8 - 4 = 6\\n6 + 9 = 11\\n3 * 4 = 12\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n\"\"\"\n) == \"4\\n1\\n4\\n6\\n\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n4\n1 4\n3 3\n4 1\n5 1\n\"\"\"\n    ) == \"4 1\"\nassert solution(\n\"\"\"\n3\n1 1\n1 1\n1 1\n\"\"\"\n    ) == \"0\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\") == \"4\\n1\\n4\\n6\\n0\""
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '1\\n0\\n4\\n0\\n0\\n'\nassert solution('1 4') == '1\\n0\\n0\\n0\\n0\\n'"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3') == '4'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3') == '0'\nassert solution('5 3') == '4'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"1\\n4\\n\"\nassert solution(\"1 2\") == \"1\\n2\\n\"\nassert solution(\"10 10\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"4\\n1\\n4\\n6\\n0\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '4'\nassert solution('5 2') == '1'\nassert solution('5 3') == '4'\nassert solution('1 2') == '0'\nassert solution('3 4') == '2'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\") == \"4\\n1\\n4\\n6\\n0\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 2\\n4 2\\n4 1\\n3 2\\n3 2\\n\") == \"3\\n1\\n3\\n1\""
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '4'"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"4\""
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '4'\nassert solution('1 2 3 4') == '4'\nassert solution('2 4 5 3') == '3'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4 5') == '3'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5 6') == '7'\n\nstdin = '3 7 4 2 1 5 1 3 4 5 2'\nstdout = '0'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5') == '4'\nassert solution('1 2 3 4 5 4') == '3'\nassert solution('1 2 3 4 4 5 3') == '2'\nassert solution('1 1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 3''') == '2'\nassert solution('''4\n1 2 3 4''') == '5'\nassert solution('''5\n1 2 3 4 5''') == '7'\nassert solution('''6\n1 2 3 4 5 6''') == '7'\nassert solution('''7\n1 2 3 4 5 6 7''') == '8'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4\\n1 2 3 4\\n\") == \"4\"\nassert solution(\n    \"5\\n1 2 3 4 5\\n\") == \"5\"\n\nprint(solution(\n    \"1\\n-1 1\\n3 4\\n2 3\\n4 5\\n3 4\\n4 2\\n4 3\\n4 1\\n4 5\\n3 4\\n1 2\\n1 3\\n2 4\\n4 2\\n2 3\\n4 3\\n2 4\\n3 3\\n4 4\\n3 4\\n3 5\\n1 1\\n4 4\\n4 1\\n2 2\\n2 3\\n2 4\\n1 5\\n4 1\\n4 2\\n1 1\\n1 2\\n4 1\\n2 1\\n3 3\\n2 4\\n2 5\\n1 4\\n3 4\\n4 1\\n4 4\\n4 4\\n4 5\\n1 3\\n2 3\\n1 4\\n2 2\\n3 4\\n1 1\\n1 4\\n1 5\\n2 4\\n3 2\\n2 5\\n3 4\\n4 2\\n4 4\\n5 1\\n1 3\\n4 5\\n4 3\\n4 4\\n5 1\\n4 5\\n1 5\\n2 3\\n3 4\\n3 1\\n3 4\\n1 4\\n5 4\\n4 4\\n5 4\\n1 4\\n4 1\\n4 5\\n4 5\\n2 4\\n4 5\\n1 5\\n5 2\\n4 2\\n5 3\\n2 3\\n3 4\\n5 3\\n3 5\\n4 4\\n4 3\\n4 5\\n4 2\\n4 5\\n4 2\\n5 3\\n2 4\\n3 5\\n5 5\\n5 4\\n2 5\\n3 4\\n5 4\\n3 3\\n5 5\\n3 5\\n5 5\\n1 2\\n2 3\\n2 1\\n2 4\\n2 5\\n2 4\\n3 3\\n4 3\\n4 4\\n4 1\\n4 5\\n3 3\\n4 5\\n3 1\\n3 4\\n4 4\\n5 5\\n2 4\\n4 3\\n4 1\\n4 4\\n4 3\\n4 5\\n2 4\\n3 4\\n4 3\\n4 5\\n2 5\\n2 4\\n4 2\\n4 4\\n4 1\\n3 4\\n1 1\\n4 4\\n4 1\\n4 4\\n4 3\\n4 1\\n1 3\\n1 2\\n1 5\\n4 4\\n4 5\\n4 3\\n1 3\\n4 4\\n5 2\\n4 2\\n1 3\\n4 1\\n5 4\\n4 2\\n3 3\\n2 4\\n4 1\\n4 2\\n3 4\\n1 3\\n5 3\\n4 5\\n4 2\\n4 5\\n4 3\\n4 4\\n5 5\\n2 5\\n5 4\\n4 4\\n4 5\\n2 4\\n4 1\\n3 4\\n5 4\\n4 2\\n1 4\\n2 5\\n4 3\\n3 3\\n4 4\\n4 4\\n5 4\\n2 3\\n2 5\\n5 2\\n3 5\\n4 3\\n5 3\\n1 3\\n3 5\\n1 4\\n5 5\\n4 4\\n4 2\\n4 5\\n2 4\\n3 3\\n3 4\\n1 5\\n2 3\\n5 5\\n3 4\\n5 5\\n4 5\\n2 4\\n1 3\\n4 5\\n5 4\\n1 4\\n4 4\\n4 4\\n4 5\\n4 5\\n3 4\\n3 4\\n4 2\\n4 4\\n3 4\\n4 2\\n4 4\\n4 4\\n1 5\\n4 5\\n5 5\\n4 3\\n4 5\\n4 4\\n5 4\\n4 5\\n4 3\\n4 4\\n4 4\\n4 5\\n3 5\\n4 3\\n5 4\\n4 4\\n4 5\\n5 4\\n4 4\\n4 4\\n4 5\\n5 5\\n5 5\\n5 5\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == \"4\"\nassert solution('1 2 3') == \"3\"\nassert solution('5 3 2') == \"4\"\nassert solution('3 4 5 6') == \"6\""
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 30 20\n10 20''') == '2'"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 31 2\n20 60\n50 90\n''') == '4 3'\nassert solution('''\n1 31 2\n20 60\n50 90\n''') == '0 0'\nassert solution('''\n2 6\n2 3\n2 4\n2 5\n1 3\n1 4\n1 5\n''') == '1 3 1'\nassert solution('''\n5 9\n5 8\n5 7\n4 9\n4 8\n4 7\n5 8\n5 7\n4 8\n5 7\n4 9\n5 8\n5 7\n''') == '1 1 1'\nassert solution('''\n4 7\n3 4\n2 5\n1 3\n1 4\n1 5\n2 4\n2 5\n''') == '1 1 1'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 30 2') == '4 3'\nassert solution('20 60') == '5 1'\nassert solution('50 90') == '3 3'"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '0 1'\nassert solution('1 32 2') == '1 32'\nassert solution('1 30 30') == '1 30'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 31 2\n20 60\n50 90\n''') == '4 3'\nassert solution('''\n1 1 1\n2 2\n3 3\n''') == '1 2'\nassert solution('''\n1 2 1\n2 2\n3 3\n''') == '1 3'\nassert solution('''\n3 5 1\n2 5\n3 5\n''') == '2 4'\nassert solution('''\n5 9 2\n3 3\n4 2\n1 2\n5 1\n''') == '0 2'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 31 2') == '4 3'\nassert solution('20 60') == '2 1'\nassert solution('50 90') == '0 1'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4 3'\nassert solution('1 20') == '4 3'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 31 2\n20 60\n50 90\n''') == '4 3'\n\"\"\"\nimport math"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 30 1\n20 60\n50 90''') == '4 3'\nassert solution('''10 20 3\n20 60\n50 90''') == '4 3'\nassert solution('''20 50 20\n20 60\n50 90''') == '6 3'\nassert solution('''20 50 20\n20 60\n50 90''') == '7 3'\nassert solution('''20 50 20\n20 60\n50 90''') == '6 3'\n'''\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 31 2') == '4 3'\nassert solution('20 60') == '1 2'\nassert solution('20 50 90') == '2 3'\nassert solution('50 90') == '0 1'\nassert solution('50 90') == '1 2'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 5 2\n1 1\n2 1\n2 2\n1 2\n1 1\n2 2\n1 3\n2 3''') == '6'\nprint(solution('''4 5 2\n1 1\n2 1\n2 2\n1 2\n1 1\n2 2\n1 3\n2 3'''))\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"2 2 2\") == \"6\""
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '3'\nassert solution('2 2 1') == '6'\nassert solution('3 2 1') == '1'\nassert solution('4 2 1') == '0'\nassert solution('5 2 1') == '1'\n\n--\nSample Input:\n3 4 1\nSample Output:\n5\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2 1\n2 1\n''') == '3'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2 1''') == '3'\nassert solution('''2 2 1''') == '6'\nassert solution('''3 3 1''') == '6'\nassert solution('''3 2 5''') == '5'\nassert solution('''3 5 1''') == '4'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2 1\n3\n4\n7\n10\n5''') == \"3\"\nassert solution('''5 2 1\n5\n3\n7\n10\n5''') == \"6\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\") == \"3\"\nassert solution(\"2 2 1\") == \"6\"\nassert solution(\"3 3 1\") == \"7\"\nassert solution(\"4 4 1\") == \"7\"\nassert solution(\"5 5 1\") == \"8\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 2 1\"\"\") == \"3\"\nassert solution(\"\"\"4 4 1\"\"\") == \"6\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2 1\") == \"3\"\nassert solution(\"3 3 1\") == \"9\""
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1341 2412 1200 3112 2391\\n') == '3 1'\nassert solution('5\\n4112 2412 1200 3112 2391\\n') == '3 1'\nassert solution('5\\n
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1341\\n2412\\n1200\\n3112\\n2391\\n') == '3 1'\n\n\"\"\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1341 2412 1200 3112 2391') == '3 1'"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1341\n2412\n1200\n3112\n2391\n\"\"\") == \"2 1\"\nassert solution(\"\"\"\n4\n1341\n2412\n1200\n3112\n2391\n\"\"\") == \"2 2\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 1 1 1 1 1 1\") == \"\"\nassert solution(\"1 1 1 1 1 1 1 2 2 2 2 2\") == \"\"\nassert solution(\"1 2 1 2 2 2 2 1 2 1 1\") == \"\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"5\\n\"\n    \"1341 2412 1200 3112 2391\"\n) == \"3 1\"\nassert solution(\n    \"3\\n\"\n    \"1234 5678\"\n) == \"0 1\"\nassert solution(\n    \"3\\n\"\n    \"1234 5678 6789\"\n) == \"1 0\"\nassert solution(\n    \"3\\n\"\n    \"12345 6780\"\n) == \"0 1\"\nassert solution(\n    \"3\\n\"\n    \"1\"\n) == \"0 1\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\\n\") == \"1 2\"\nassert solution(\"3\\n1 2 3\\n\") == \"2 1\"\nassert solution(\"4\\n1 2 3 4\\n\") == \"3 2\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '5\\n1341 2412 1200 3112 2391\\n3 1'\n) == '1 2'\n\"\"\"\n\nn = int(input())\n\npillar_values = []\n\nfor _ in range(n):\n    pillar_values.append(int(input()))\n\npillar_values.sort()\n\ncount = 0\n\nfor i in range(n-1):\n    if pillar_values[i+1] > pillar_values[i] + 20000:\n        count += 1\n\nprint(count)\nprint(pillar_values[count])\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '0'\nassert solution('1') == '0'"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1341 2412 1200 3112 2391\") == \"3 1\"\nassert solution(\"1\\n1341 2412 1200 3112 2391\") == \"0 0\"\nassert solution(\"5\\n1341 2412 1200 3112 2391\") == \"2 1\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 2') == '2'\nassert solution('4 4') == '0'\nassert solution('5 5') == '1'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 20\") == \"6\"\nassert solution(\"3 5\") == \"7\"\nassert solution(\"1 3 7\") == \"7\"\nassert solution(\"2 1 1\") == \"3\"\nassert solution(\"2 3 2\") == \"5\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\nassert solution('''\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '4'\nassert solution('''\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '5'\nassert solution('''\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '5'\nassert solution('''\n5 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '4'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n    3 5\n    1 3 7\n    2 1 1\n    2 3 2\n    2 3 5\n    3 2 4\n\"\"\") == \"6\"\nassert solution(\"\"\"\n    1 5\n    1 2 1\n    1 4 3\n    1 5 4\n\"\"\") == \"5\"\nassert solution(\"\"\"\n    1 2\n    1 3 1\n    1 5 1\n    1 6 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n    3 5\n    1 2 1\n    1 3 1\n    1 4 1\n    1 5 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n    1 5\n    1 2 2\n    1 4 1\n    1 6 2\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"5 9\") == \"8\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '6'\nassert solution('5 5\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '2'\nassert solution('5 5\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '2'\nassert solution('5 5\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '2'\nassert solution('5 5\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '3'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"0\""
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\nassert solution('''\n1 1\n1 1\n1 1\n''') == '0'\nassert solution('''\n3 2\n2 2\n2 2\n''') == '1'\nassert solution('''\n4 6\n2 1 3\n1 2 4\n2 3 2\n3 4 4\n''') == '2'\n'''\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 ab b\") == \"0 1\"\nassert solution(\"2 cd b\") == \"-1 0\"\nassert solution(\"5 a b c d e\") == \"0 1 1 1 1 0\"\nassert solution(\"2 c d e\") == \"0 -1 1 0 -1 1\"\nassert solution(\"3 e f d\") == \"0 0 1 0 1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 ab b\\n1 b\") == \"0 1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 ab b\\n1 b') == '0 1'\nassert solution('1 a') == '-1 -1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0 1'\n\"\"\"\n\n\nclass Node(object):\n\n    def __init__(self, v):\n        self.val = v\n        self.left = None\n        self.right = None"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 ab b\") == \"0 1 -1 -1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 ab b\n1 b''') == '0 1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\nab b\n1 b\n\"\"\") == \"0 1\"\nassert solution(\"\"\"\n2\na\n1 b\n\"\"\") == \"-1 0\"\nassert solution(\"\"\"\n10\nab b\n1 a\n4 c\n0 d\n\"\"\") == \"0 -1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '2 ab b\\n1 b') == '0 1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 ab b\\n1 b') == '0 1\\n-1 0'\nassert solution('20 ab b\\n10 b\\n20 ab\\n10 ab') == '0 1\\n-1 0\\n0 0\\n2 2\\n-1 0\\n-1 0'"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 ab b\n1 b\n''') == '0 1'\n'''\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\") == \"1\\n2\"\n\nassert solution(\"3 3\\n1 1 2\\n1 1 2\\n2\") == \"3\\n2\""
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"1\\n3\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input) == '1'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 4\n1 1 2\n2\n1 1 2\n2\n\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"\n2 5\n1 1 2\n2\n1 1 2\n2\n\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"\n2 8\n1 1 2\n2\n1 1 2\n2\n\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"\n2 16\n1 1 2\n2\n1 1 2\n2\n\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"\n1 10\n1 1 2\n1\n1 1 2\n2\n\"\"\") == \"\"\"2\"\"\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4\\n1 1 2\\n2\\n1 1 2\\n2') == '3'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 4\n1 1 2\n2\n1 1 2\n2\n''') == '1\\n3\\n'\n\n'''"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\") == \"1\"\nassert solution(\"2 4\\n1 1 2\\n2\\n2\\n3\") == \"3\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4\") == \"1\\n3\"\nassert solution(\"1 1 2\") == \"0.5\\n2\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n1 1\n2\n1 1 2\n2\n''') == '1'\nassert solution('''\n3\n1 1 1\n2\n1 1 1\n3\n''') == '1'\nassert solution('''\n5\n1 1 1 1\n2\n1 1 1 1\n3\n''') == '1'\nassert solution('''\n6\n1 1 1 1 1\n2\n1 1 1 1 1\n3\n''') == '2'\nassert solution('''\n7\n1 1 1 1 1 1\n2\n1 1 1 1 1 1\n3\n''') == '3'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n0 5 2\n5 0 4\n2 4 0\n''') == '7'\nassert solution('''\n4\n0 4 2 5\n0 4 2 5\n2 4 0 5\n''') == '10'\n''')\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    5\n    0 5 2\n    5 0 4\n    2 4 0\n    ''') == '7'\nassert solution('''\n    4\n    0 1 1\n    2 3 0\n    1 2 3\n    3 4 2\n    ''') == '8'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0 5 2\n5 0 4\n2 4 0\n''') == '7', 'Wrong'\nassert solution('''\n2\n0 0 0\n2 2 2\n''') == '1', 'Wrong'\n''')\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 5 2\n5 0 4\n2 4 0\n''') == '7'\nassert solution('''\n3\n0 5 2\n5 0 4\n2 4 0\n''') == '7'\nassert solution('''\n3\n0 5 2\n5 0 4\n3 4 0\n''') == '10'\nassert solution('''\n1\n0 1 2\n1 0 3\n''') == '3'\nassert solution('''\n2\n0 5 2\n5 0 4\n3 4 0\n''') == '5'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '3\\n'\n    '0 5 2\\n'\n    '5 0 4\\n'\n    '2 4 0\\n'\n) == '7'\nassert solution(\n    '2\\n'\n    '0 1\\n'\n    '1 0\\n'\n) == '0'\nassert solution(\n    '1\\n'\n    '0\\n'\n    '0\\n'\n    '0\\n'\n) == '0'\nassert solution(\n    '2\\n'\n    '0 1\\n'\n    '1 0\\n'\n) == '1'\nassert solution(\n    '1\\n'\n    '0\\n'\n    '0\\n'\n) == '0'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n0 5 2\\n5 0 4\\n2 4 0') == '7'\nassert solution('3\\n0 5 2\\n5 0 4\\n2 4 0\\n1 1 1') == '8'\nassert solution('3\\n0 5 2\\n5 0 4\\n2 4 0\\n1 1 1\\n1 1 1') == '12'\nassert solution('1\\n1') == '1'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2 0') == '3'\nassert solution('5 0 4') == '7'\nassert solution('2 4 0') == '3'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n2 4 0\n4 0 3\n5 4 3\n3 1 1\n4 2 2\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n6\n0 0 0 0 0 0\n1 0 1 0 0\n1 1 0 1 0\n0 1 0 1 0\n0 0 1 0 0\n0 0 0 0 0\n\"\"\") == \"15\"\n\nassert solution(\"\"\"\n3\n0 2 3\n1 2 1\n2 3 1\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n5\n0 5 2\n5 0 4\n2 4 0\n4 0 3\n5 4 3\n3 1 1\n4 2 2\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n3\n0 5 2\n5 0 4\n2 4 0\n\"\"\") == \"15\""
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n0 5 2\n5 0 4\n2 4 0\n''') == '7'\n\n'''\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 1 3\n2 1 2\n1 2 1\n3 4\n''') == '6'\nassert solution('''\n4\n0 1 3\n2 1 2\n1 2 1\n3 4\n''') == '8'\nassert solution('''\n4\n1 3 0\n2 2 2\n0 2 1\n3 1\n''') == '7'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('55\\n') == '8'\nassert solution('1\\n') == '1'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n7 8 9\") == \"8\"\nassert solution(\"1\\n1\") == \"1\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\n\"\"\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1099511627776') == \"8\"\n\"\"\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('1099511627776') == '9'\nassert solution('100000000') == '9'\nassert solution('99999999') == '9'\nassert solution('9') == '8'\n\ninput\nint X;\nint A[] = {10,20,30,40,50,60,70,80,90,100};\nint k = 4;\n\noutput\nint k = 8;"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2147483647') == '8'"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1099511627776\") == \"8\"\nassert solution(\"123456789101112131415161718192021\") == \"21\"\nassert solution(\"123456789101112131415161718192021\") == \"21\"\nassert solution(\"123456789101112131415161718192021\") == \"21\"\nassert solution(\"123456789101112131415161718192021\") == \"21\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4') == '4'\nassert solution('1099511627776') == '8'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1099511627776\") == \"8\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1099511627776') == '8'"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '2'\nassert solution('100 100') == '1'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\nx..\n.x.\nx.x\n''') == '2'\nassert solution('''\n3 3\n.x.\n.x.\nx.x\n''') == '0'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\nx.\\n.x.') == '2'\nassert solution('7 7\\nx.x.x.x.x.x.x.\\nx.x.x.x.x.x.x.\\nx.x.x.x.x.x.x.\\nx.x.x.x.x.x.x.\\nx.x.x.x.x.x.x.\\nx.x.x.x.x.x.x.\\nx.x.x.x.x.x.x.\\nx.x.x.x.x.x.x.\\nx.x.x.x.x.x.x.') == '4'\n\"\"\"\n\n\"\"\"\nIdea: for each point, if it is an x, count it\n    if it is a., count it twice\n    else count it once\nreturn min(count, count * 2)\n\"\"\""
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n.x.\nx.x\nx.x\n''') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2'\nassert solution('5 1') == '1'\nassert solution('5 1') == '0'\nassert solution('5 10') == '1'\nassert solution('5 10') == '0'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\nx..\n.x.\nx.x\n''') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\nx..\n.x.\nx.x\n''') == '2'"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 3') == '3'\nassert solution('7 7') == '4'\nassert solution('5 5') == '2'\nassert solution('15 7') == '4'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"x.x.x\") == \"2\"\nassert solution(\"x..x.x\") == \"1\"\nassert solution(\"x.x..x\") == \"1\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"10 10\") == \"10\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '9\\n-1\\n5\\n6\\n'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n') == '9\\n-1\\n5\\n6\\n'\nprint('all tests passed')\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\"\n) == \"9\"\nassert solution(\n\"\"\"\n3\n1 2 1\n1 0 1\n1 1 1\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"9 6 -1\""
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"9\"\nassert solution(\"\"\"\n3\n1 1 2\n2 2 2\n3 3 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n\") == \"9\\n-1\\n5\\n6\\n\"\nassert solution(\"4\\n1 3 2\\n3 0 0\\n2 4 4\\n5 3 0\\n\") == \"5\\n-1\\n\"\nassert solution(\"3\\n1 3 2\\n2 5 2\\n3 0 0\\n\") == \"6\\n\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n3 2\n2 5 2\n4 2 4\n5 3 0\n''') == '9'\nassert solution('''\n2\n1 2\n2 3\n''') == '-1'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n') == '9\\n-1\\n5\\n6\\n'\nassert solution('3\\n0 0 0\\n1 2 1\\n2 3 2\\n') == '5\\n-1\\n5\\n4\\n'\nassert solution('10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"2\") == \"9\"\nassert solution(\"2\") == \"-1\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20') == '91'"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"2\""
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '91'\nassert solution('7') == '854'\n\n\"\"\"\n\nn = int(input())\nlevels = []\nfor _ in range(n):\n    x, s = map(int, input().split())\n    levels.append((x, s))\n\nitems = []\nfor _ in range(n+1):\n    items.append([])\n\nfor i in range(n):\n    x, s = levels[i]\n    items[x].append(i)\n\nitem_a = []\nfor i in range(n+1):\n    item_a.append([])\n\nfor i in range(n+1):\n    for j in range(i+1, n+2):\n        item_a[i].append(j)\n\nfor i in range(n+1):\n    if i not in item_a[i]:\n        item_a[i].append(i)\n    if i not in item_a[n+1]:\n        item_a[n+1].append(i)\n\nans = 0\nfor i in range(n):\n    x, s = levels[i]\n    if s < 10**9:\n        x_items = items[x]\n        for j in x_items:\n            if j not in item_a[i]:\n                item_a[i].append(j)\n        for j in item_a[i]:\n            if j not in x_items:\n                x_items.append(j)\n        x_items.sort()\n        for j in x_items:\n            if j not in item_a[i]:\n                item_a[i].append(j)\n        ans += item_a[i][-1] - item_a[i][0]\nprint(ans)\n\n\"\"\"\n    for i in range(n):\n        x, s = levels[i]\n        if s < 10**9:\n            x_items = items[x]\n            for j in x_items:\n                if j not in item_a[i]:\n                    item_a[i].append(j)\n            for j in item_a[i]:\n                if j not in x_items:\n                    x_items.append(j)\n            x_items.sort()\n            for j in x_items:\n                if j not in item_a[i]:\n                    item_a[i].append(j)\n            ans += item_a[i][-1] - item_a[i][0]\n\n\"\"\""
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20') == '91'\n\nassert solution('5\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\\n1 1 95 95 95 10\\n3 1 95 95 95 10\\n1 1 95 50 30 20') == '1450'\n\nassert solution('6\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\\n1 1 95 95 95 10\\n3 1 95 95 95 10\\n1 1 95 50 30 20') == '2910'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0'\nassert solution('1 2 3') == '0'\nassert solution('1 2') == '0'\nassert solution('1') == '0'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == \"91\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n1 1 40 30 20 10\\n3 1 95 95 95 10') == '91'"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '2\\n'\n    '1 1 40 30 20 10\\n'\n    '3 1 95 95 95 10\\n'\n    '2 1 95 50 30 20\\n'\n    ) == '91'\n'''\n\nn = int(input())\n\nnumbers = []\n\nfor i in range(n):\n    numbers.append(list(map(int, input().split())))\n\nnumbers.sort(key=lambda x: x[0])\n\nfor i in range(n-1):\n    if numbers[i][1] > numbers[i+1][1]:\n        break\n    else:\n        numbers[i][1] = numbers[i+1][1]\n\nfor i in range(n):\n    print(numbers[i][1])\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == \"91\"\n\n---Input---\n4\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n4 1 4 4 0 1\nSample Output:\n131"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\nassert solution(\"\"\"10\n3\n4 1 1 9 9\n3 4 4 4 4\n5 4 2 2 2\n4 5 3 3 3\n3 5 4 4 4\n2 5 3 3 3\n1 5 1 1 1\n\"\"\") == \"24\"\nassert solution(\"\"\"1\n1 1 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"8\n1 1 1 1 1 1 1 1\n\"\"\") == \"8\"\nassert solution(\"\"\"10\n
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '2\\n'\n    '15 20\\n'\n    '0\\n'\n    '1 1\\n'\n) == '15'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '15'\nassert solution('15 20') == '20'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n0 2\n0\n1 2\n\"\"\") == \"15\"\nassert solution(\"\"\"\n2\n0 1\n0\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n0 2\n1\n0 3\n\"\"\") == \"3\"\n\"\"\"\n\n\"\"\"\nfrom typing import List\nimport collections\n\nT = int(input())\nfor i in range(T):\n    n, *s = list(map(int, input().split()))\n    s2 = [0] + list(s) + [0]\n    costs = [0] * len(s2)\n    d = collections.defaultdict(list)\n    for i in range(1, len(s2)):\n        d[s2[i]].append(i - 1)\n    for i in range(len(s2) - 2, -1, -1):\n        if s2[i] == 0:\n            continue\n        for nxt in d[s2[i]]:\n            costs[i] = costs[i] + costs[nxt]\n        d[s2[i]].clear()\n    print(min(costs))\n\"\"\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n20 20\n0\n1 1\n\"\"\") == \"15\"\n\nassert solution(\"\"\"\n4\n40 20\n2\n1 1\n\"\"\") == \"41\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"15\""
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n15 20\\n0') == '15'\nassert solution('3\\n4 1\\n1 3\\n2 3\\n3 1\\n0') == '4'\nassert solution('6\\n6 6 6 6 6\\n0 0 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n0') == '0'\nassert solution('20\\n20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '15'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n15 20\\n0') == '15'\nassert solution('5\\n15 20\\n0 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20') == '30'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '15'\nassert solution('2') == '20'\nassert solution('1') == '10'"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '15'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n\"\"\") == \"impossible\"\n\nassert solution(\n\"\"\"\n5 4\n3 2 639\n2 5 283\n1 4 716\n3 4 98\n\"\"\") == \"716\"\n\nassert solution(\n\"\"\"\n5 4\n3 2 639\n2 5 283\n1 4 716\n3 4 98\n\"\"\") == \"716\"\n\nassert solution(\n\"\"\"\n5 4\n3 2 639\n2 5 283\n1 4 716\n3 4 98\n\"\"\") == \"716\"\n\nassert solution(\n\"\"\"\n5 4\n3 2 639\n2 5 283\n1 4 716\n3 4 98\n\"\"\") == \"impossible\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == 'impossible'\nassert solution('5 4') == '500'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 1, 375]) == 'impossible'\nassert solution([2, 5, 283]) == '3750'\nassert solution([1, 4, 716]) == '3750'\nassert solution([3, 4, 98]) == '3750'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4\\n3 1 375') == 'impossible'\nassert solution('2 5 283\\n1 4 716\\n3 4 98') == '1000000'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n3 1 375') == 'impossible'\nassert solution('5 2\\n1 3 13') == '28'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\nassert solution('10 2\\n6 5 10 1\\n3 1 5 6\\n7 8 1 2\\n5 4 1 9\\n5 6 7 8\\n9 8 9 9\\n4 4 4 4') == '5'\nassert solution('8 3\\n4 5 3 4\\n5 1 1 1\\n2 2 2 2\\n1 1 1 1\\n1 2 2 2\\n2 1 1 1\\n2 1 1 1') == 'impossible'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\nassert solution('5 5\\n1 2 4\\n3 4 1\\n5 6 3\\n1 5 5\\n2 4 5') == 'impossible'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\\n') == 'impossible'\nprint('Test passed')"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4\\n3 1 375') == \"impossible\"\nassert solution('10 3\\n3 2 876\\n1 4 716') == \"impossible\"\nassert solution('10 4\\n1 2 939\\n3 4 98\\n5 4 716') == \"6199\"\nassert solution('200 400\\n1 2 939\\n3 4 98\\n5 4 716') == \"200400\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible', 'test_case1 failed'\nassert solution('5 7\\n2 1 7\\n1 3 7\\n3 4 7\\n4 5 7') == 'impossible', 'test_case2 failed'\nassert solution('5 4\\n3 1 679\\n2 5 356\\n1 4 716\\n3 4 98') == '1000', 'test_case3 failed'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('20') == '12.99999999'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2.000000000'\nassert solution('5') == '1.90697226'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('100') == '1.000000000'\nassert solution('1000') == '1.000000000'\n'''\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1.000000000'"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '2.000000000'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '3.0'"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\nI10\nO10\nI10\nO9\n''') == '4.000000000'\nassert solution('''2\nI1\nI2\nO9\n''') == '2.000000000'\n\n---Input Specifications---\nInput contains:\n\nAn integer $N$\n\n---Output---\nOutput must be:\n\nA float $Z$\n\nwhere $Z$ is an approximation of the expected number of turns needed to finish the game.\n\n'''\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6\n1 2\n2 4\n4 5\n5 6\n3 6\n1 2\n2 4\n4 5\n5 6\n''') == \"1.000000000\"\nassert solution('''\n6\n1 2\n2 4\n4 5\n5 6\n3 6\n1 2\n1 5\n2 4\n2 5\n4 5\n5 6\n''') == \"2.500000000\"\nassert solution('''\n6\n1 2\n2 4\n4 5\n5 6\n3 6\n1 2\n1 5\n2 4\n2 5\n4 5\n5 6\n''') == \"2.500000000\"\nassert solution('''\n5\n1 2\n2 3\n3 5\n4 5\n5 6\n''') == \"3.300000000\"\nassert solution('''\n5\n1 2\n2 3\n3 5\n4 5\n5 6\n''') == \"3.300000000\"\n'''\n\nimport sys\nimport math\nfrom collections import defaultdict\n\nn = int(input())"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '1.959194442'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1.0\"\nassert solution(\"5\") == \"5.0\"\nassert solution(\"10\") == \"10.0\"\nassert solution(\"20\") == \"20.0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100 3 10') == '115'\nassert solution('15 99 98') == '148.5'\nassert solution('40 3 2') == '59.5'\nassert solution('90 10 9') == '105.5'\nprint('All test cases passed!')"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100 3 10') == \"115.000000000\"\nassert solution('15 99 98') == \"117.500000\"\nassert solution('40 3 2') == \"125.200000\"\nassert solution('90 10 9') == \"125.000000\"\nassert solution('0 0 0') == \"0\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1 1\n3 5 3\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n1 5 1\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 2 4') == '0.83333333333333335'\nassert solution('6 2 4') == '2.83333333333333334'\nassert solution('6 2 4') == '0.83333333333333335'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n    10 3 10\n    15 99 98\n    40 3 2\n    90 10 9\n    '''\n) == '115.000000000'\n\nassert solution(\n    '''\n    10 3 10\n    15 99 98\n    40 3 2\n    '''\n) == '115.000000000'\n\nassert solution(\n    '''\n    10 1 10\n    15 99 98\n    40 3 2\n    '''\n) == '118.0000000000'\n\nassert solution(\n    '''\n    10 5 100\n    15 99 98\n    40 3 2\n    '''\n) == '106.0000000000'\n\nassert solution(\n    '''\n    10 2 5\n    15 99 98\n    40 3 2\n    '''\n) == '107.0000000000'"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\nassert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '135.000000000'\nassert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '168.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\nassert solution('''\n1 100 1\n1 1 1\n''') == '0.0000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 10') == '115.000000000'\nassert solution('15 99 98') == '115.000000000'\nassert solution('40 3 2') == '88.000000000'\nassert solution('90 10 9') == '90.000000000'\nprint('ALL TEST CASES PASSED')"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n100 3 10\\n15 99 98\\n40 3 2\\n90 10 9') == '115.000000000'\nassert solution('5\\n2 1 3 4\\n4 4 1 1\\n3 2 5 2') == '5.000000000'\nassert solution('10\\n10 20 10 20 10 20 10 20\\n20 20 10 10 10 20 20 10 20\\n10 20 10 10 10 20 20 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10 10 10 20 20 10 10 10 20\\n20 20 10 10 10 20 20 10 10 10 20\\n10 20 10"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 1 1\n2 3 3\n3 3 2\n\"\"\") == \"115.000000000\"\nassert solution(\"\"\"\n10 3 2\n10 10 10\n10 9 9\n9 9 9\n9 8 8\n8 8 8\n8 7 7\n7 7 7\n7 6 6\n6 6 6\n6 5 5\n5 5 5\n5 4 4\n4 4 4\n4 3 3\n3 3 3\n3 2 2\n2 2 2\n2 1 1\n1 1 1\n1 1 1\n\"\"\") == \"102.900000\"\nassert solution(\"\"\"\n10 3 2\n10 10 10\n10 9 9\n9 9 9\n9 8 8\n8 8 8\n8 7 7\n7 7 7\n7 6 6\n6 6 6\n6 5 5\n5 5 5\n5 4 4\n4 4 4\n4 3 3\n3 3 3\n3 2 2\n2 2 2\n2 1 1\n1 1 1\n1 1 1\n\"\"\") == \"101.900000\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\nassert solution('2\\n100 100 100\\n100 100 100') == '200.0000000000001'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n1 1\\n2 2') == '199.500000'\nassert solution('10\\n1 1\\n1 1') == '199.500000'\nassert solution('10\\n0 0\\n1 2') == '199.5000000'\nassert solution('1\\n3\\n0 2\\n2 0') == '203.5000000'\nassert solution('1\\n3\\n0 2\\n2 0.5') == '203.5000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n100 1 1\n100 1 1.5\n''') == '199.500000'\nassert solution('''2\n500 100 100\n500 100 1\n''') == '599.990000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"2\\n100 1 1\\n100 1 1.5\") == \"199.5\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n100 1 1\\n100 1 1.5') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.5'\nassert solution('1\\n-5.1 1\\n1 2') == '4.9'\nassert solution('2\\n1 1 1.5\\n1 1.5') == '2.0'\n\n'''"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n10 1 1\\n100 1 1\\n100 1 1.5\") == \"199.500000\"\nassert solution(\"10\\n1 1 1\\n100 1 1\\n100 1 1.5\") == \"199.500000\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5\\n') == '199.500000'"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '2\\n'\n    '100 1 1\\n'\n    '100 1 1.5\\n'\n    ) == '199.500000'"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12''') == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3\\n1 2 3 4 5 6 7 8 9 10 11 12') == '1'\nassert solution('2 3\\n1 3 4 5 6 7 8 9 10 11 12') == '2'"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"2\"\ninput_string = '2 3\\n1 2 3 4 5 6 7 8 9 10 11 12'\nprint(solution(input_string))\n'''"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"2 3\"\n    \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    ) == \"1\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n2 5\n6 8 9 10 11 12\n''') == '2'\n'''\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3') == '1'\nassert solution('2 3') == '2'\nassert solution('3 3') == '0'\n\n---Input---\n4 5\n6 6 5 5 4 4 4 5 5 3 3 5 5 4 4 4 5 5 5 4 4 5 5 5 4 4 4 5 5\n---Output---\n1\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == '1'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(None) == \"0\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 2\") == \"8\""
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == \"1\""
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n--- Sample Case 1 ---\n\nP = 13\nN_1 = 3\nN_5 = 2\nN_10 = 1\nN_25 = 1\n\n--- Sample Case 2 ---\n\nP = 10\nN_1 = 3\nN_5 = 2\nN_10 = 1\nN_25 = 1\n''') == '5'\n\nassert solution('''\n--- Sample Case 1 ---\n\nP = 13\nN_1 = 3\nN_5 = 2\nN_10 = 1\nN_25 = 1\n\n--- Sample Case 2 ---\n\nP = 10\nN_1 = 3\nN_5 = 2\nN_10 = 1\nN_25 = 1\n''') == 'Impossible'"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"5\n1\n1\n2\n2\n1\"\"\") == \"Impossible\"\n\nassert solution(r\"\"\"8\n1\n1\n2\n2\n3\n3\n4\n4\n1\"\"\") == \"2\"\n\nassert solution(r\"\"\"8\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n1\"\"\") == \"Impossible\"\n\nassert solution(r\"\"\"8\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n6\n6\n1\"\"\") == \"Impossible\"\n\nassert solution(r\"\"\"8\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n6\n6\n7\n7\n1\"\"\") == \"7\""
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n3 2 1 1') == 'Impossible'\nassert solution('13\\n3 2 1 1') == '5'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'Impossible'\nassert solution('2') == '5'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'Impossible'\n\"\"\"\n\nP = int(input())\nN_1, N_5, N_10, N_25 = map(int, input().split())\n\ncoins = {\n    1:N_1,\n    5:N_5,\n    10:N_10,\n    25:N_25\n}\n\ncoins_copy = coins.copy()\n\nfor i in range(1, P+1):\n    for j in range(1, i):\n        if j in coins:\n            if i > j:\n                if i in coins_copy:\n                    coins_copy[i] = max(coins[i], coins_copy[i])\n                else:\n                    coins_copy[i] = max(coins_copy[i], coins[j])\n\nprint(max(coins_copy.values()))\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1 1\") == \"5\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 2 1 1\") == \"5\"\nassert solution(\"10\\n3 2 1 1\") == \"Impossible\"\nassert solution(\"20\\n3 2 1 1\") == \"5\"\nassert solution(\"15\\n3 2 1 1\") == \"3\"\nassert solution(\"50\\n3 2 1 1\") == \"4\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('13\\n3 2 1 1') == '5'\nassert solution('37\\n3 5 1 3') == 'Impossible'\n\"\"\""
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n3 2 1 1\") == \"Impossible\"\nassert solution(\"5\\n3 2 1 1\") == \"Impossible\"\nassert solution(\"10\\n3 2 1 1\") == \"2\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\\n3 2 1 1\") == \"Impossible\"\nassert solution(\"10\\n3 5 1 1\") == \"5\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\nprint(solution(input()))\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''aabcad\naba\nacd''') == 'yes'\n\nassert solution('''aba\naba\naba''') == 'yes'\n\nassert solution('''abca\nabca\nabc''') == 'yes'\n\nassert solution('''aabcad\naba\nacd\nabc''') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\naabcad\naba\nacd\n''') == 'yes'\nassert solution('''\n\naa\naa\n''') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 'yes'\n\"\"\""
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\naabcad\naba\nacd\n''') == 'yes', 'First solution is wrong!'\nassert solution('''\nbaca\ncbd\ncdd\n''') == 'no', 'Second solution is wrong!'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\n\n'''\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\n\nassert solution('''\n10 20 30\n7 2 3 4 5 6\n5 7 9 10 1 2 3\n8 9 10 11 12 13 14\n11 12 13 14 15 16 17\n12 13 14 15 16 17 18\n12 13 14 15 16 17 18 19\n12 13 14 15 16 17 18 19 20\n''') == '19'\n\nassert solution('''\n5 5 20\n10 2 1 5 3\n3 4 6 7 8\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\n\nassert solution('''\n20 40\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n17 18 19 20 21 22 23 24 25 26 27 28 29 30\n14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n7 6 5 4 3 2 1\n4 3 2 1 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n10 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n9 8 7 6 5 4 3 2 1\n5 4 3 2 1 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n17 18 19 20 21 22 23 24 25 26 27 28 29 30\n14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n10 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n8 7 6 5 4 3 2 1\n4 3 2 1 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n10 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n7 6 5 4 3 2 1\n3 4 2 1 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n17 18 19 20 21 22 23 24 25 26 27 28 29 30\n14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n10 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n8 7 6 5 4 3 2 1\n5 4 3 2 1 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n17 18 19 20 21 22 23 24 25 26 27 28 29 30\n14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n10 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n9 8 7 6 5 4 3 2 1\n5 4 3 2 1 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n10 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n8 7 6 5 4 3 2 1\n4 3 2 1 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n17 18 19 20 21 22 23 24 25 26 27 28 29 30\n14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n10 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n9 8 7 6 5 4 3 2 1\n5 4 3 2 1 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n17 18 19 20 21 22 23 24 25 26 27 28 29 30\n14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n10 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n8 7 6 5 4 3 2 1\n3 4 2 1 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n11 12 13 14 15"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == \"5\"\nassert solution('''4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == \"5\"\n''')"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '5'"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\nassert solution(\"1 2 3 4\\n1 1 1 2\\n2 2 3 4\\n3 2 4 5\\n3 3 4 1\\n4 2 5 3\\n2 2 4 5\\n3 2 4 1\\n4 3 4 2\\n4 1 4 3\\n\") == \"12\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\n\nassert solution(\"4 5 1\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 10') == '5'\nassert solution('3 2') == '2'\nassert solution('3 1 1 6') == '6'\nassert solution('3 4 7 10') == '10'\nassert solution('2 4 3 5') == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 5 same\n3 4 same\n''') == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same') == '4'\n\"\"\"\nimport sys\nfrom math import factorial\nn, m = map(int, input().split())\nmy_list = list(map(int, input().split()))\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same\\n') == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\nassert solution('''\n5 2\n2 4 different\n3 5 different\n''') == '2'\n'''"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4'\nassert solution('5 2\\n2 4 same\\n3 5 same\\n') == '4'"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '4'\nassert solution('10 5') == '2'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2\\n2 4 same') == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\nassert solution('''\n5 2\n2 4 same\n3 6 same\n''') == '1'\nassert solution('''\n5 2\n2 5 same\n3 5 same\n''') == '0'\n'''\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same\\n') == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"6 2\") == \"0\"\nassert solution(\"7 2\") == \"1\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n0 1\n0 2\n3 4\n3 5\n''') == '3'\nassert solution('''\n3 7\n1 5\n3 6\n5 7\n''') == '4'\nassert solution('''\n5 7\n1 5\n3 6\n5 7\n3 8\n1 9\n''') == '3'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 4\n0 1\n0 2\n3 4\n3 5\nSample Output:\n4\n''') == '4'\nassert solution('''\n5 7\n0 0\n0 1\n1 2\n2 3\n0 0\n0 2\n2 3\nSample Output:\n5\n''') == '3'\nassert solution('''\n3 4\n0 0\n0 1\n1 2\n0 2\nSample Output:\n2\n''') == '2'\nassert solution('''\n9 3\n0 0\n1 1\n1 2\n1 3\n0 1\n0 2\n0 3\n0 4\n1 4\nSample Output:\n0\n''') == '0'\nassert solution('''\n9 4\n0 0\n1 1\n1 2\n1 3\n0 0\n0 2\n0 3\n0 4\n1 4\nSample Output:\n5\n''') == '5'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n0 1\\n0 2') == '3'\nassert solution('6\\n4\\n0 1\\n0 2\\n3 4\\n3 5') == '2'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"6 4\\n0 1\\n0 2\\n3 4\\n3 5\"\n) == \"3\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 4\\n0 1\\n0 2\\n3 4\\n3 5\") == \"3\"\nassert solution(\"1 2\\n2 1\\n2 1\") == \"1\"\nassert solution(\"2 3\\n3 2\\n2 5\\n5 4\") == \"2\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '2'\nassert solution('10 5') == '5'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n0 1\\n0 2\\n3 4\\n3 5') == '3'\nassert solution('7\\n0 1\\n0 2\\n3 4\\n3 5\\n6 6') == '2'\nassert solution('6\\n0 1\\n0 2\\n3 4\\n3 5\\n6 6') == '2'\nassert solution('7\\n0 1\\n0 2\\n3 4\\n3 5\\n6 6') == '3'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([\n    \"6 4\",\n    \"0 1\",\n    \"0 2\",\n    \"3 4\",\n    \"3 5\",\n]) == \"3\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n0 1\\n0 2\\n3 4\\n3 5') == '3'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '9.0'\nassert solution('15') == '45.0'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 4\n2 2\n4 1\n3 5\n5 3\n''') == '9.0'\nassert solution('''\n5\n1 4\n2 2\n4 1\n3 5\n5 3\n''') == '6.5'\nassert solution('''\n5\n1 4\n2 2\n4 1\n3 5\n5 3\n''') == '2.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR\") == \"9.0\\n6.5\\n2.5\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"9.0\"\nassert solution(\"1 4\") == \"6.5\"\nassert solution(\"2 2\") == \"2.5\"\nassert solution(\"4 1\") == \"2.5\"\nassert solution(\"3 5\") == \"2.5\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"9.0\""
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5'\n\"\"\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == \"6.5\"\nassert solution('6') == \"3.0\""
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"8.0\\n5.0\\n3.5\\n2.5\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '9.0'"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == \"9.0\"\nassert solution('4') == \"6.5\"\nassert solution('3') == \"2.5\"\nassert solution('5') == \"9.0\"\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\nassert solution('''\n4 2 3\nR 3 1\nB 1 2\nB 3 1\nR 2 1\n''') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\nassert solution('''\n2 2 2\nR 1 2\nR 3 2\n''') == '0'\n''')\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 2\\nB 1 2\\nB 2 3\\nR 3 1') == '1'\nassert solution('5 5 3 2\\nB 1 2\\nB 2 3\\nR 3 1\\nB 4 5\\nB 5 2\\nR 1 4\\nB 4 1\\nR 5 3\\nR 3 1\\nR 5 3\\nB 4 3\\nR 1 3\\nR 2 3\\nB 1 5\\nR 5 2\\nR 4 2\\nB 5 1\\nR 2 4\\nB 3 4\\nB 4 1\\nB 3 4\\nR 3 4') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 2\\nB 1 2\\nB 2 3\\nR 3 1\\n') == '1'\nassert solution('3 5 2\\nB 1 2\\nR 3 1\\nB 2 3\\nR 3 1\\nR 3 2\\n') == '1'\nassert solution('6 5 3\\nR 3 1\\nB 2 3\\nR 3 1\\nB 2 3\\nR 3 1\\nR 3 2\\n') == '1'\nassert solution('6 5 3\\nR 3 1\\nB 2 3\\nR 3 1\\nB 2 3\\nR 3 1\\nB 2 3\\nR 3 2\\n') == '0'"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n'.join([\n    '3 3 2',\n    'B 1 2',\n    'B 2 3',\n    'R 3 1',\n])) == '1'\n\"\"\"\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 5 1\nR 1 2\nR 3 4\nR 1 3\nB 2 4\nB 3 5''') == '1'\nassert solution('''5 5 2\nB 1 2\nB 2 3\nR 3 1\nB 3 4\nR 4 5''') == '0'\nassert solution('''3 3 1\nB 1 2\nB 2 3\nR 3 1''') == '1'\nassert solution('''4 3 2\nB 1 2\nB 2 3\nR 3 1\nB 3 4\nR 4 5''') == '0'\nassert solution('''4 3 1\nR 1 2\nR 3 4\nR 1 3\nB 2 4\nB 3 5''') == '1'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\n'''"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\nassert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\n\nassert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '0'\n\nassert solution('''\n5 3 2\nB 1 2\nB 2 3\nR 3 1\nR 3 2\nR 2 1\nR 1 4\nB 3\n''') == '1'\n\nassert solution('''\n5 3 2\nB 1 2\nB 2 3\nR 3 1\nR 3 2\nR 2 1\nR 1 4\nB 3\n''') == '0'"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '88'\nassert solution('5 0 5') == '5'\nassert solution('4') == '7'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '5'\nassert solution('5 0 5') == '88'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"5 0 5\") == \"7\"\nassert solution(\"4\") == \"8\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '88', solution.__doc__"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"88\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '88'\nassert solution('5') == '5'\nassert solution('4') == '7'\n\"\"\"\n\nn, *a_i, *b_i, *t_i = list(map(int, stdin.readline().split()))\n\na_i.sort()\nb_i.sort()\n\na_i = list(map(lambda x: x * (x - 1), a_i))\nb_i = list(map(lambda x: x * (x - 1), b_i))\n\ntotal_fun = 0\n\nfor i in range(n):\n    if t_i[i] < 0:\n        continue\n    total_fun += a_i[i] - (t_i[i] - 1) * b_i[i]\n\nprint(total_fun)\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n5 0 5\") == \"88\"\nassert solution(\"3\\n10 0 5\") == \"6\"\nassert solution(\"5\\n10 0 5\") == \"7\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n\"\"\") == \"88\"\nassert solution(\"\"\"\n2\n3 0 2\n2 2 2\n3\n2\n3\nSample Output:\n2\n3\n0\nSample Input:\n1\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n2\n3\n4\n5\nSample Output:\n7\n5\n3\nSample Input:\n1\n0\n0\nSample Output:\n0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '88'\nassert solution('''\n1\n3 0 0\n4\n56\n8\n''') == '56'\nassert solution('''\n1\n1 0 0\n1\n100\n5\n''') == '100'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '88'\nassert solution('5') == '5'\nassert solution('4') == '7'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 1 2') == '5'\nassert solution('3 3 1 2 2') == '5'\nassert solution('3 4 1 1 2 3 4 1') == '9'\nassert solution('5 5 5 5 5') == '-1'\nassert solution('2 2 2 2') == '-1'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 2 2\n1 3 1\n2 3 3\n''') == '5'\nassert solution('''\n3\n1 2 2\n1 3 1\n2 3 3\n''') == '-1'\nprint('all tests passed')"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"2 1 1 1\") == \"4\"\nassert solution(\"2 3 2 3\") == \"5\"\nassert solution(\"3 3 4 3\") == \"5\"\nassert solution(\"4 1 3 3\") == \"5\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n''') == '5'\nassert solution('''\n3 3 1 2\n1 3 1\n2 3 3\n''') == '-1'\nassert solution('''\n3 3 1 2\n1 3 1\n2 3 3\n''') == '-1'\nassert solution('''\n3 4 1 3\n1 5 2 3\n2 5 3 4\n3 1 4 2\n2 5 2 5\n3 4 5 3\n''') == '8'\nassert solution('''\n3 4 1 3\n1 5 2 3\n2 5 3 4\n3 1 4 2\n2 5 2 5\n3 4 5 3\n''') == '8'\n'''\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n''') == '-1'\nassert solution('''\n6 3 2 2\n1 2 3\n2 4 4\n3 5 5\n4 6 6\n5 7 7\n6 8 8\n''') == '8'\nassert solution('''\n6 6 6\n1 2 3\n2 4 5\n3 5 6\n4 6 7\n5 7 8\n6 8 9\n''') == '11'\nassert solution('''\n3 5 4\n1 2 4\n2 5 2\n3 6 4\n4 7 2\n5 8 3\n6 9 2\n7 10 2\n8 11 4\n9 12 2\n10 13 2\n11 14 2\n12 15 3\n13 16 2\n14 17 2\n15 18 3\n16 19 2\n17 20 3\n18 21 2\n19 22 2\n20 23 2\n21 24 2\n22 25 2\n23 26 2\n24 27 3\n25 28 2\n26 29 2\n27 30 2\n28 31 3\n29 32 2\n30 33 3\n31 34 2\n32 35 2\n33 36 2\n34 37 2\n35 38 2\n36 39 3\n37 40 2\n38 41 3\n39 42 3\n40 43 3\n41 44 3\n42 45 3\n43 46 3\n44 47 3\n45 48 3\n46 49 3\n47 50 3\n48 51 3\n49 52 3\n50 53 3\n51 54 3\n52 55 3\n53 56 3\n54 57 3\n55 58 3\n56 59 3\n57 60 3\n58 61 3\n59 62 3\n60 63 3\n61 64 3\n62 65 3\n63 66 3\n64 67 3\n65 68 3\n66 69 3\n67 70 3\n68 71 3\n69 72 3\n70 73 3\n71 74 3\n72 75 3\n73 76 3\n74 77 3\n75 78 3\n76 79 3\n77 80 3\n78 81 3\n79 82 3\n80 83 3\n81 84 3\n82 85 3\n83 86 3\n84 87 3\n85 88 3\n86 89 3\n87 90 3\n88 91 3\n89 92 3\n90 93 3\n91 94 3\n92 95 3\n93 96 3\n94 97 3\n95 98 3\n96 99 3\n97 100 3\n98 101 3\n99 102 3\n100 103 3\n101 104 3\n102 105 3\n103 106 3\n104 107 3\n105 108 3\n106 109 3\n107 110 3\n108 111 3\n109 112 3\n110 113 3\n111 114 3\n112 115 3\n113 116 3\n114 117 3\n115 118 3\n116 119 3\n117 120 3\n118 121 3\n119 122 3\n120 123 3\n121 124 3\n122 125 3\n123 126 3\n124 127 3\n125 128 3\n126 129 3\n127 130 3\n128 131 3\n129 132 3\n130 133 3\n131 134 3\n132 135 3\n133 136 3\n134 137 3\n135 138 3\n136 139 3\n137 140 3\n138 141 3\n139 142 3\n140 143 3\n141 144 3\n142 145 3\n143 146 3\n144 147 3\n145 148 3\n146 149 3\n147 150 3\n148 151 3\n149 152 3\n150 153 3\n151 154 3\n152 155 3\n153 156 3\n154 157 3\n155 158 3\n156 159 3\n157 160 3\n158 161 3\n159 162 3\n160 163 3\n161 164 3\n162 165 3\n163 166 3\n164 167 3\n165 168 3\n166 169 3\n167 170 3\n168 171 3\n169 172 3\n170 173 3\n171 174 3\n172 175 3\n173 176 3\n174 177 3\n175 178 3\n176 179 3\n177 180 3\n178 181 3\n179 182 3\n180 183 3\n181 184 3\n182 185 3\n183 186 3\n184 187 3\n185 188 3\n186 189 3\n187 190 3\n188 191 3\n189 192 3\n190 193 3\n191 194 3\n192 195 3\n193 196 3\n194 197 3\n195 198 3\n196 199 3\n197 200 3\n198 201 3\n199 202 3\n199 203 3\n200 204 3\n201 205 3\n202 206 3\n203 207 3\n204 208 3\n205 209 3\n206 210 3\n207 211 3\n208 212 3\n209 213 3\n210 214 3\n211 215 3\n212 216 3\n213 217 3\n214 218 3\n215 219 3\n216 220 3\n217 221 3\n218 222 3\n219 223 3\n220 224 3\n221 225 3\n222 226 3\n223 227 3\n224 228 3\n225 229 3\n226 230 3\n227 231 3\n228 232 3\n229 233 3\n230 234 3\n231 235 3\n232 236 3\n233 237 3\n234 238 3\n235 239 3\n236 240 3\n237 241 3\n238 242 3\n239 243 3\n240 244 3\n241 245 3\n242 246 3\n243 247 3\n244 248 3\n245 249 3\n246 250 3\n247 251 3\n248 252 3\n249 253 3\n250 254 3\n251 255 3\n252 256 3\n253 257 3\n254 258 3\n255 259 3\n256 260 3\n257 261 3\n258 262 3\n259 263 3\n260 264 3\n261 265 3\n262 266 3\n263 267 3\n264 268 3\n265 269 3\n266 270 3\n267 271 3\n268 272 3\n269 273 3\n270 274 3\n271 275 3\n272 276 3\n273 277 3\n274 278 3\n275 279 3\n276 280 3\n277 281 3\n278 282 3\n279 283 3\n280 284 3\n281 285 3\n282 286 3\n283 287 3\n284 288 3\n285 289 3\n286 290 3\n287 291 3\n288 292 3\n289 293 3\n290 294 3\n291 295 3\n292 296 3\n293 297 3\n294 298 3\n295 299 3\n296 300 3\n297 301 3\n298 302 3\n299 303 3\n300 304 3\n301 305 3\n302 306 3\n303 307 3\n304 308 3\n305 309 3\n306 310 3\n307 311 3\n308 312 3\n309 313 3\n310 314 3\n311 315 3\n312 316 3\n313 317 3\n314 318 3\n315 319 3\n316 320 3\n317 321 3\n318 322 3\n319 323 3\n320 324 3\n321 325 3\n322 326 3\n323 327 3\n324 328 3\n325 329 3\n326 330 3\n327 331 3\n328 332 3\n329 333 3"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 1 2') == '5'\nassert solution('2') == '-1'\nassert solution('2 1 2') == '2'\nassert solution('2 1 2 1') == '0'\nassert solution('2 3 3') == '-1'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\") == \"5\"\nassert solution(\"2\") == \"1\"\n\"\"\"\n\nn, m, k, w = map(int, input().split())\ns = list(map(int, input().split()))\nedges = []\nfor i in range(m):\n    a, b, c = map(int, input().split())\n    edges.append([a, b, c])\n\nimport heapq\n\nhq = []\nheapq.heapify(hq)\nfor i in range(len(s)):\n    heapq.heappush(hq, (0, i + 1))\n\nvisited = [False] * (n + 1)\n\nans = float('-inf')\nwhile hq:\n    c, curr = heapq.heappop(hq)\n    visited[curr] = True\n    if curr == n:\n        break\n    for i in range(len(edges)):\n        if curr in edges[i] and not visited[edges[i][1]]:\n            if curr < edges[i][1]:\n                heapq.heappush(hq, (edges[i][2], edges[i][1]))\n            else:\n                heapq.heappush(hq, (edges[i][2], curr))\n            ans = max(ans, c + edges[i][2])\n\nprint(ans)\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n''') == '-1'\nassert solution('''\n3 3 3 2\n1\n2\n3\n2 3 2\n''') == '-1'\nassert solution('''\n3 3 1 2\n2\n1 3 1\n2 3 3\n''') == '5'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1 2\") == \"5\"\nassert solution(\"10 8 2 5\") == \"12\"\nassert solution(\"10 10 3 3\") == \"3\"\nassert solution(\"3 3 1 2\") == \"5\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"3 3 1 2\") == \"5\"\nassert solution(\"3 3 1 2 1\") == \"1\"\nassert solution(\"3 3 1 2 1 2\") == \"1\"\nassert solution(\"3 3 1 2 1 3\") == \"1\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) =='mirkovniz'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('mirkovC4nizCC44') =='mirnoviz'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\""
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\""
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkniz'\n\nSample Input:\nmirkov4nizC4nizCC44\nC4\nSample Output:\nmirkniz\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('C4') == 'C4'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz', \"First\"\nassert solution('C4') == '12ab', \"Second\"\n\n--------------------------------------------------"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"p9i2\") == \"pi2\"\n\"\"\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()[:-1]\n\"\"\"\nfrom bisect import bisect_left, insort\nimport heapq\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3\\n3 10\\n1 65\\n10 45\\n25 60\") == \"32\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '32'\nassert solution('3') == '32'\nassert solution('2') == '31'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n5 4\\n5 3\\n4 3\\n') == '32'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3, 3, 3]) == \"32\"\nassert solution([3, 1, 1]) == \"31\"\nassert solution([1, 1, 1]) == \"0\"\nassert solution([1, 2, 2]) == \"1\""
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '32'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n3 65\\n45 10\\n60 25') == '32'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '32'\n\nclass Solution:\n    def solution(self) -> str:\n    pass"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3\\n3 65\\n45 10\\n60 25\\n\"\n) == \"32\"\n\nimport math"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n3 65\n45 10\n60 25''') == '32'\n\nassert solution('''2\n3 10\n30 20\nSample Output:\n0\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '2'\nassert solution('2\\n1 2 1\\n') == '2'\n\nSample Input:\n3\n2 0 1\nSample Output:\n1\n1\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2 0 3 1\n''') == '3'\nassert solution('''5\n3 4 0 2 1\n''') == '2'\nassert solution('''5\n0 1 2 3 4\n''') == '0'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n5\n1 2 0 3 1\n''') == '2'\nassert solution('''\n1\n2\n0 2\n''') == '3'\nassert solution('''\n1\n3\n0 1\n''') == '1'\nassert solution('''\n2\n2\n0 0\n''') == '0'\nassert solution('''\n2\n1\n0 0\n''') == '1'\n\n'''\n--Input\n5\n1 2 0 3 1\n--Output\n3\n2\n--Examples\n--Input\n5\n1 2 0 3 1\n--Output\n3\n2\n--Input\n5\n1 2 0 3 1\n--Output\n1\n2\n--Input\n2\n2\n0 0\n--Output\n1\n2\n'''\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '3'\nassert solution('10') == '3'\nassert solution('1000') == '3'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n1') == '2'\nassert solution('5\\n1 2 0 3 1') == '2'\nassert solution('1\\n1') == '1'\nassert solution('5\\n1 2 3 4 5') == '1'\nassert solution('5\\n1 2 3 4 5') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 2 0 3 1\n''') == '2'\nassert solution('''\n5\n3 1 3 2\n''') == '3'\nassert solution('''\n10\n6 3 1 2 4 3 8 2 5 4\n''') == '5'\nassert solution('''\n10\n7 1 6 5 2 3 4 4 7\n''') == '8'\nassert solution('''\n10\n5 3 3 2 1 0 2 4 3\n''') == '4'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 0 3 1\\n\") == \"3 2\"\nassert solution(\"5\\n1 2 0 3 1\\n\") == \"1\""
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 0 3 1') == '2'\nassert solution('10\\n0 5 4 2 9 7 5 8') == '10'\nassert solution('6\\n0 1 2 3 4 5') == '0'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n-1') == '2'\nassert solution('2\\n4\\n3') == '1'"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n') == '1'\nassert solution('2\\n1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n') == '1'\nassert solution('1\\n1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n') == '2'\nassert solution('2\\n1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n') == '0'\nassert solution('1\\n1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n+ 1\\n- 1\\n') == '2'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 4') == '8'\nassert solution('2 4 4') == '8'\nassert solution('3 3 6') == '22'\nassert solution('4 4 2') == '23'\nassert solution('2 2 6') == '9'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4 4\") == \"4\"\nassert solution(\"10 1 3\") == \"10\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n') == '2'\n\"\"\"\n\nn, m, k = map(int, input().split())\nk_meas = [list(map(int, input().split())) for _ in range(k)]\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4''') == '6'\n\nassert solution('''2 5 2\n+ 1 1\n+ 3 2\n+ 3 3\n+ 4 4\n+ 4 5\n- 2 1\n- 3 3\n- 3 4\n- 2 2\n- 1 1\n- 1 3''') == '17'\n\nassert solution('''6 6 4\n+ 1 1\n+ 3 3\n- 1 2\n+ 1 3\n+ 2 2\n- 1 3\n+ 2 3\n+ 1 4\n+ 2 1\n+ 1 1\n- 1 4\n+ 1 2\n- 1 3\n- 2 1\n+ 3 1\n+ 1 3\n+ 2 2\n+ 2 1\n+ 2 2\n+ 4 2\n+ 1 1''') == '16'"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 3 1\n-1 2\n-1 1\n-1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3 2\n+ 1 1\n+ 1 2\n+ 1 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3 3 3\n+ 1 1\n+ 1 2\n+ 1 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3 3 3\n+ 1 1\n+ 1 2\n+ 1 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 2 3\n+ 1 1\n+ 1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"5 3 5\") == \"1\"\nassert solution(\"3 3 4\") == \"2\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4\") == \"2\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"1 4\") == \"0\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 4') == \"2\"\nassert solution('3 3 3') == \"6\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"500000004\"\nassert solution() == \"13786470656382890513\""
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1000000000 0\") == \"500000004\"\nassert solution(\"1000000000 1\") == \"0\"\nassert solution(\"1000000000000000 0\") == \"0\"\nassert solution(\"1000000000000000 1\") == \"10000000\"\nassert solution(\"1000000000000000 2\") == \"0\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2 1\n0\n5\n''') == '500000004', 'First'\nassert solution('''\n7\n0 1\n0 3\n2 1\n5 3\n5 1\n3 1\n5 3\n''') == '50', 'Second'\nprint('All Tests Passed!')"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n1000000000 0\\n1000000000 1\\n') == '500000004'\nassert solution('4\\n1000000000 0\\n1000000000 1\\n1000000000 2\\n1000000000 3\\n') == '500000004'\nassert solution('5\\n1000000000 0\\n1000000000 1\\n1000000000 2\\n1000000000 3\\n1000000000 4\\n') == '100000004'\nassert solution('10\\n1000000000 0\\n1000000000 1\\n1000000000 2\\n1000000000 3\\n1000000000 4\\n1000000000 5\\n1000000000 6\\n1000000000 7\\n1000000000 8\\n1000000000 9\\n1000000000 10\\n') == '100000004'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '500000004'\nassert solution('2') == '0.12286778'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1000000000 0\\n1000000000 1\") == \"500000004\"\nassert solution(\"2\\n1000000000 1\\n1000000000 1\") == \"500000004\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n1000000000 0\n1000000000 1\n\"\"\") == \"500000004\"\nassert solution(\"\"\"\n2\n1000000000 0\n1000000000 1\n\"\"\") == \"500000004\"\n\"\"\"\n--- Part Two ---\nWhat if we set the probability of finding a node to be zero? What about if we set the probability of finding it to be one?\n\nConsider again the problem of a rooted tree with $n$ nodes, numbered $1..n$. Each node will have a fixed integer $b$, and for each, a uniform random real number is chosen in the interval $[0..b]$.\n\nWhat is the probability that the random number chosen causes the tree to form a Heap (i.e., the random value in each node is less than the random values in its children)?\n\nThis probability can always be expressed as a rational number $\\frac{P}{Q}$, with $Q{\\not\\equiv }0 \\pmod{10^9{+}7}$. You are to output the probability as $P{\\cdot }Q^{-1} \\bmod {10^9{+}7}$, where $Q^{-1}$ is an integer, which is the multiplicative inverse of $Q$ modulo $10^9{+}7$ ($Q\\! \\cdot \\! Q^{-1}\\! \\equiv \\! 1 \\pmod{10^9{+}7}$). (Note: $P{\\cdot }Q^{-1}\\bmod {10^9{+}7}$ does not depend on whether $P$ and $Q$ are relatively prime, only on their ratio $\\frac{P}{Q}$.)\n\n-----Input-----\nEach test case will begin with a line with a single integer $n$ ($1\\! \\le \\! n\\! \\le \\! 300$), which is the number of nodes in the tree.\n\nEach of the next $n$ lines will contain a pair of space-separated integers $b$ ($1\\! \\le \\! b\\! \\le \\! 10^9$) and $p$ ($0\\! \\le \\! p\\! \\le \\! n$) describing a node of the tree, where $b$ is the fixed integer value in the node and $p$ is the node number of its parent. The nodes are listed in order; node $1$ is first, then node $2$, and so on. A single node will have a parent $p{=}0$. This is the root of the tree.\n\n-----Output-----\nOutput a single integer, which is the probability expressed as $(P{\\cdot }Q^{-1}) \\bmod ({10^9{+}7})$.\n\n-----Examples-----\nSample Input:\n2\n1000000000 0\n1000000000 1\nSample Output:\n0\n\"\"\""
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1000000000 0\\n1000000000 1') == '500000004'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1000000000 0\n1000000000 1\n\"\"\") == \"500000004\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '25030455859175596129'\nassert solution('4') == '51'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1'\nassert solution('5 8') == '12'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1 10') == '1'\nassert solution('2 4 11 16') == '1'\nassert solution('2 1 9 12') == '1'\nassert solution('3 5 28 100') == '1'\nassert solution('1 3 13 27') == '1'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == '12'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 3 13 27\n3 5 23 24\n''') == '12'\nassert solution('''5 3\n1 2 3 8\n2 4 11 16\n3 5 20 21\n1 3 13 27\n3 5 23 24\n''') == '17'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n10 2\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 3 13 27\n3 5 23 24\n\"\"\") == \"12\"\nassert solution(\"\"\"\n5 3\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 3 13 27\n3 5 23 24\n\"\"\") == \"42\"\n\nassert solution(\"\"\"\n1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10 1\n10 2\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 3 13 27\n3 5 23 24\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 10\") == \"12\"\nassert solution(\"5 8\") == \"24\"\nassert solution(\"4 3 11 16\") == \"21\"\nassert solution(\"1 3 13 27\") == \"15\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == \"12\"\n\nassert solution('''\n4\n10 4 6 1\n4 2 6 2\n8 2 5 1\n1 2 5 1\n''') == \"8\"\n\nassert solution('''\n3\n1 4 1 1\n2 2 2 2\n2 1 3 1\n''') == \"7\"\n\nassert solution('''\n8\n10 8 9 8\n9 3 8 3\n8 8 8 6\n6 2 3 4\n3 4 4 1\n8 5 5 3\n7 2 5 4\n2 6 5 4\n''') == \"12\"\n\nassert solution('''\n4\n1 1 4 6\n1 2 2 5\n2 2 6 3\n3 2 4 1\n''') == \"6\""
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '5 8\\n'\n    '1 2 1 10\\n'\n    '2 4 11 16\\n'\n    '2 1 9 12\\n'\n    '3 5 28 100\\n'\n    '1 3 13 27\\n'\n    '3 5 23 24\\n'\n) == '12'\nassert solution(\n    '2 5\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n) == '15'\nassert solution(\n    '1\\n'\n    '2\\n'\n) == '0'"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 8') == '12'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2\\n15 5 3\\n12 4 4') == '3'\nassert solution('1 1\\n1 1\\n1 1') == '1'\nassert solution('2 3\\n20 10 5\\n12 4 4\\n15 5 3') == '2'\nassert solution('1 2\\n1 1\\n1 1') == '2'"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n3\\n15 5 3') == '3'\nassert solution('3\\n16\\n14 5 4\\n12 4 4\\n20 10 5') == '2'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n19\\n5 3') == '1'\nassert solution('2\\n20 10 5') == '2'\nassert solution('3\\n15 5 3') == '1'\nassert solution('4\\n20 10 5') == '2'\nassert solution('5\\n20 10 5') == '2'"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\nassert solution([\n    '3', '1', '4',\n    '2', '3', '1',\n    '3', '2', '3',\n    '4', '5', '3',\n]) == '2'"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n5 4\n7 8\n9 1\"\"\") == \"3\"\n\nassert solution(\"\"\"4\n20 7\n12 4\n9 1\n20 10\"\"\") == \"2\"\n\nassert solution(\"\"\"2\n20 4\n20 3\"\"\") == \"1\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n10\n4\n''') == '1'\nassert solution('''\n2\n9\n4\n''') == '2'\nassert solution('''\n3\n18\n5\n''') == '2'\nassert solution('''\n4\n10\n2\n''') == '3'\nassert solution('''\n5\n8\n5\n''') == '4'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 19\n15 5 3\n12 4 4\n20 10 5\n''') == '3'\nassert solution('''\n7 10 5\n1 2 3\n3 4 3\n1 5 1\n4 3 3\n4 2 1\n3 3 3\n4 1 4\n5 2 5\n1 3 4\n3 5 4\n''') == '1'\n\n'''\n(ab)\n'''\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n15 5 3\n12 4 4\n20 10 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\""
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\"\nassert solution(input_stdin='''3\n3 5\n2 4\n2 1\n1 5\n4 6\n5 7\n''') == \"3\"\nassert solution(input_stdin='''3\n3 6\n3 5\n4 3\n2 3\n3 2\n3 6\n1 1\n''') == \"4\"\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"5 4\") == \"4\"\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n1 1\n''') == '1'\nassert solution('''\n2 2\n2 3\n''') == '3'\nassert solution('''\n3 3\n3 2\n''') == '4'\nassert solution('''\n4 4\n4 3\n''') == '6'\nassert solution('''\n6 6\n4 5\n4 6\n6 3\n''') == '5'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1 1') == '1'\n\nassert solution('3\\n1 1 2\\n1 2 3\\n2 3 1\\n1 3 2\\n3 2 1\\n2 1 3\\n3 1 2\\n2 2 1\\n1 1 3\\n3 1 2\\n1 2 1\\n2 2 3') == '1'\n\nassert solution('3\\n1 1 2\\n1 2 3\\n2 3 1\\n1 3 2\\n3 2 1\\n2 1 3\\n1 1 3\\n3 1 2\\n2 2 1\\n1 1 2\\n3 1 2\\n2 2 1\\n1 1 3\\n3 1 2\\n2 1 1\\n1 2 3\\n3 1 2\\n2 2 1\\n1 1 3\\n3 1 2') == '5'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\n1 1\\n') == '1'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('2 2') == '1'\nassert solution('2 3') == '2'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1\\n1 2\\n') == '1'\n\"\"\""
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1\\n2 1') == '1'\nassert solution('1 2\\n3 1') == '1'\nassert solution('1 1\\n1 1') == '1'\nassert solution('1 3\\n4 1') == '1'\nassert solution('1 2\\n3 2') == '0'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n1 2\n1 3\n''') == '1'\nassert solution('''6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n''') == '1'\nassert solution('''9\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4 4 2 4\n1 2 4 4 3 4"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nR\nR\nR\nR\n''') == '1'\n\nassert solution('''\nR\nG\nB\nG\n''') == '1'\n\nassert solution('''\nR\nG\nR\nB\n''') == '1'\n\nassert solution('''\nR\nG\nG\nB\n''') == '1'\n\nassert solution('''\nR\nG\nR\nB\n''') == '2'"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''RGGR\nGBGB\nBYBY\nYRYR''') == '3'\n'''\n'''"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"RGBR\") == \"3\"\nassert solution(\"GBBR\") == \"4\"\nassert solution(\"RGBR\") == \"4\"\nassert solution(\"RBYB\") == \"3\"\nassert solution(\"BGYR\") == \"3\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"3\"\nassert solution(\"BYBY\") == \"3\"\nassert solution(\"YRYR\") == \"3\""
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"2\"\nassert solution(\"BYBY\") == \"4\"\nassert solution(\"YRYR\") == \"1\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"4\"\nassert solution(\"BYBY\") == \"3\"\nassert solution(\"YRYR\") == \"3\"\n\"\"\""
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\nRGGR\nGBGB\nBYBY\nYRYR\n\"\"\") == \"3\"\n\nassert solution(\n\"\"\"\nRGYR\nGBGB\nBYBY\nYRYR\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"2\"\nassert solution(\"BYBY\") == \"4\"\nassert solution(\"YRYR\") == \"1\"\n\n---\nclass Solution(object):\n    def minimumMoves(self, grid):\n        \"\"\"\n        :type grid: List[str]\n        :rtype: int\n        \"\"\"\n        # if len(grid)==1: return 0\n        # n = len(grid)\n        # colors = []\n        # for g in grid:\n        #     colors += g\n        # # colors = list(set(colors))\n        # colors = list(colors)\n        # colors = sorted(colors)\n        # color_to_index = dict(zip(colors,range(len(colors))))\n        # edges = set()\n        # for i in range(n):\n        #     if grid[i][0]!= 'R':\n        #         edges.add(i)\n        #     if grid[i][n-1]!= 'R':\n        #         edges.add(i)\n        #     for j in range(1,n-1):\n        #         if grid[i][j]!= 'R':\n        #             edges.add(i)\n        #             edges.add(i+n-1)\n        #             break\n        # # print edges\n        # # print color_to_index\n        # # print len(edges)\n        # q = deque([(0,0,0)])\n        # while q:\n        #     # print q\n        #     _,x,y = q.popleft()\n        #     if x == n-1 and y == n-1:\n        #         return _\n        #     # print x,y\n        #     if x+1 < n:\n        #         if grid[y][x+1] in ['R', 'G', 'B']:\n        #             # print x+1,y\n        #             if grid[y][x+1] == 'R' or grid[y][x+1] == 'B':\n        #                 q.append((_+1,x+1,y))\n        #             else:\n        #                 q.append((_,x+1,y))\n        #     if x-1 >= 0:\n        #         if grid[y][x-1] in ['R', 'G', 'B']:\n        #             # print x-1,y\n        #             if grid[y][x-1] == 'R' or grid[y][x-1] == 'B':\n        #                 q.append((_+1,x-1,y))\n        #             else:\n        #                 q.append((_,x-1,y))\n        #     if y+1 < n:\n        #         if grid[y+1][x] in ['R', 'G', 'B']:\n        #             # print x,y+1\n        #             if grid[y+1][x] == 'R' or grid[y+1][x] == 'B':\n        #                 q.append((_+1,x,y+1))\n        #             else:\n        #                 q.append((_,x,y+1))\n        #     if y-1 >= 0:\n        #         if grid[y-1][x] in ['R', 'G', 'B']:\n        #             # print x,y-1\n        #             if grid[y-1][x] == 'R' or grid[y-1][x] == 'B':\n        #                 q.append((_+1,x,y-1))\n        #             else:\n        #                 q.append((_,x,y-1))\n        # return -1\n\n\"\"\"\n--- Day 25: Lobby Layout ---\nYou walk into an elevator and try to enter it. Unfortunately, it seems to be locked. You open the door and face the administrator.\n\nShe has an ID card printed on the card: \"ID: 89-60-7897\".\n\nThe first digit is a two-digit number in the range 13 to 19 representing the floor number. The second and third digits are numbers in the range 5 to 9 representing the room number. The fourth digit is a dash (\"-\"). The fifth digit is a dash (\"-\"). The sixth digit is a dash (\"-\").\n\nYou walk into the elevator and start walking.\n\nWhile you are not at the front desk, you decide to watch television, since it seems to be fine.\n\nNow you decide to watch the same show again.\n\nAfter a short while, you finally decide to leave the lobby.\n\nFinally, you leave the elevator and return to the lobby.\n\nIf you decide to watch the show again, what would you do next?\n\nYour puzzle answer was 87123.\n\nThe first half of this puzzle is complete! It provides one gold star: *\n\n--- Part Two ---\nNow you have to watch the show again.\n\nThe floor number is 89 in the ID card, so you'll enter the elevator with floor number 89 and enter the room with number 89.\n\nAfter a short while, you decide to watch the show again.\n\nThe room number is 89 in the ID card, so you'll enter the elevator with floor number 89 and enter the room with number 89.\n\nAfter a second short while, you decide to watch the show again.\n\nThe room number is 89 in the ID card, so you'll enter the elevator with floor number 89 and enter the room with number 89.\n\nFinally, you leave the lobby.\n\nFinally, you leave the elevator and return to the lobby.\n\nThe first half of this puzzle is complete! It provides one gold star: **\n\"\"\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''RGRR\nGGGB\nBYBY\nYRYR\n''') == '3'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"R\") == \"R\"\nassert solution(\"R\") == \"R\"\n\nprint(solution(\"RGB\"))\n\"\"\""
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10\n-1 -2 -3 -4 -5\n-2 1 2 2 3\n2 -2 -1 3 4\n-3 -4 -5 -6\n-4 -5 -6 -7\n-5 -6 -7 -8\n-6 -7 -8 -9\n-7 -8 -9 -10\n-8 -9 -10 -11\n-9 -10 -11 -12\n-10 -11 -12 -13\n-11 -12 -13 -14\n-12 -13 -14 -15\n-13 -14 -15 -16\n-14 -15 -16 -17\n-15 -16 -17 -18\n-16 -17 -18 -19\n-17 -18 -19 -20\n-18 -19 -20 -21\n-19 -20 -21 -22\n-20 -21 -22 -23\n-21 -22 -23 -24\n-22 -23 -24 -25\n-23 -24 -25 -26\n-24 -25 -26 -27\n-25 -26 -27 -28\n-26 -27 -28 -29\n-27 -28 -29 -30\n-28 -29 -30 -31\n-29 -30 -31 -32\n-30 -31 -32 -33\n-31 -32 -33 -34\n-32 -33 -34 -35\n-33 -34 -35 -36\n-34 -35 -36 -37\n-35 -36 -37 -38\n-36 -37 -38 -39\n-37 -38 -39 -40\n-38 -39 -40 -41\n-39 -40 -41 -42\n-40 -41 -42 -43\n-41 -42 -43 -44\n-42 -43 -44 -45\n-43 -44 -45 -46\n-44 -45 -46 -47\n-45 -46 -47 -48\n-46 -47 -48 -49\n-47 -48 -49 -50\n-48 -49 -50 -51\n-49 -50 -51 -52\n-50 -51 -52 -53\n-51 -52 -53 -54\n-52 -53 -54 -55\n-53 -54 -55 -56\n-54 -55 -56 -57\n-55 -56 -57 -58\n-56 -57 -58 -59\n-57 -58 -59 -60\n-58 -59 -60 -61\n-59 -60 -61 -62\n-60 -61 -62 -63\n-61 -62 -63 -64\n-62 -63 -64 -65\n-63 -64 -65 -66\n-64 -65 -66 -67\n-65 -66 -67 -68\n-66 -67 -68 -69\n-67 -68 -69 -70\n-68 -69 -70 -71\n-69 -70 -71 -72\n-70 -71 -72 -73\n-71 -72 -73 -74\n-72 -73 -74 -75\n-73 -74 -75 -76\n-74 -75 -76 -77\n-75 -76 -77 -78\n-76 -77 -78 -79\n-77 -78 -79 -80\n-78 -79 -80 -81\n-79 -80 -81 -82\n-80 -81 -82 -83\n-81 -82 -83 -84\n-82 -83 -84 -85\n-83 -84 -85 -86\n-84 -85 -86 -87\n-85 -86 -87 -88\n-86 -87 -88 -89\n-87 -88 -89 -90\n-88 -89 -90 -91\n-89 -90 -91 -92\n-90 -91 -92 -93\n-91 -92 -93 -94\n-92 -93 -94 -95\n-93 -94 -95 -96\n-94 -95 -96 -97\n-95 -96 -97 -98\n-96 -97 -98 -99\n-97 -98 -99 -100\n-98 -99 -100 -101\n-99 -100 -101 -102\n-100 -101 -102 -103\n-101 -102 -103 -104\n-102 -103 -104 -105\n-103 -104 -105 -106\n-104 -105 -106 -107\n-105 -106 -107 -108\n-106 -107 -108 -109\n-107 -108 -109 -110\n-108 -109 -110 -111\n-109 -110 -111 -112\n-110 -111 -112 -113\n-111 -112 -113 -114\n-112 -113 -114 -115\n-113 -114 -115 -116\n-114 -115 -116 -117\n-115 -116 -117 -118\n-116 -117 -118 -119\n-117 -118 -119 -120\n-118 -119 -120 -121\n-119 -120 -121 -122\n-120 -121 -122 -123\n-121 -122 -123 -124\n-122 -123 -124 -125\n-123 -124 -125 -126\n-124 -125 -126 -127\n-125 -126 -127 -128\n-126 -127 -128 -129\n-127 -128 -129 -130\n-128 -129 -130 -131\n-129 -130 -131 -132\n-130 -131 -132 -133\n-131 -132 -133 -134\n-132 -133 -134 -135\n-133 -134 -135 -136\n-134 -135 -136 -137\n-135 -136 -137 -138\n-136 -137 -138 -139\n-137 -138 -139 -140\n-138 -139 -140 -141\n-139 -140 -141 -142\n-140 -141 -142 -143\n-141 -142 -143 -144\n-142 -143 -144 -145\n-143 -144 -145 -146\n-144 -145 -146 -147\n-145 -146 -147 -148\n-146 -147 -148 -149\n-147 -148 -149 -150\n-148 -149 -150 -151\n-149 -150 -151 -152\n-150 -151 -152 -153\n-151 -152 -153 -154\n-152 -153 -154 -155\n-153 -154 -155 -156\n-154 -155 -156 -157\n-155 -156 -157 -158\n-156 -157 -158 -159\n-157 -158 -159 -160\n-158 -159 -160 -161\n-159 -160 -161 -162\n-160 -161 -162 -163\n-161 -162 -163 -164\n-162 -163 -164 -165\n-163 -164 -165 -166\n-164 -165 -166 -167\n-165 -166 -167 -168\n-166 -167 -168 -169\n-167 -168 -169 -170\n-168 -169 -170 -171"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\\n\") == \"AAAAA\"\nassert solution(\"5\\n0 -1 2 1 0\\n-1 -2 0 1 -3\\n\") == \"ABABA\"\nassert solution(\"10\\n-10 20 30 -40 50 -60 -70 80 -90 -100\\n\") == \"ABBAABBA\"\nassert solution(\"10\\n-10 20 30 -40 50 -60 -70 80 -90 -100\\n\") == \"AAABBA\"\nassert solution(\"10\\n0 -1 2 1 0\\n-1 -2 0 1 -3\\n\") == \"AAABA\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"AAAAA\"\nassert solution(\"20\\n1 -2 3 -4 5 6 -7 8 -9 -10 11 12 -13 14 15 -16 -17 18 -18 -19 20 -20\") == \"AAAAA\"\n\"\"\""
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"AAAAA\", \"Should return AAAA\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\\n\") == \"AAAAA\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n-2 -1 0 1 2\\n2 1 0 -1 -2') == 'ABABAB'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nfor i in range(n):\n    a[i] = abs(a[i] - b[i])\n\na.sort()\n\nprint(\"\".join(map(str, a)))\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\\n') == 'AABAA'\nassert solution(\n    '7\\n-1 -2 0 1 2 3 4\\n1 2 3 0 -1 -2\\n') == 'BBABA'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\\n\") == \"AAAAA\"\nprint(solution(\n    \"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\\n\"))\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"AAAAA\"\nassert solution(\"5\\n0 2 -1 0 1 2\\n1 2 0 -1 -2\") == \"BBBBB\"\nassert solution(\"5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\") == \"ABBBA\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"AAAA\"\nassert solution(\"10\") == \"AAABAABAAA\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 3\\n2 3\\n4 0\\n0 2\\n6 1\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5\\n2 3\\n4 0\\n0 2\\n5 1\\n') == 'IMPOSSIBLE'\nassert solution('12 12\\n0 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n') == '4'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n6 3\n2 3\n4 0\n0 2\n6 1\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n6 3\n2 3\n4 0\n0 2\n6 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n6 3\n2 3\n4 0\n0 2\n6 1\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 3\n2 3\n4 0\n0 2\n6 1\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 3\\n2 3\\n4 0\\n0 2\\n6 1\\n') == 'IMPOSSIBLE'\nassert solution('2 3\\n3 0\\n0 2\\n2 3\\n') == '2'\nassert solution('10 10\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3\n0 3\n0 2\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n5 5\n0 3\n1 2\n1 0\n1 3\n0 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 2\n0 0\n1 1\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n10 10\n0 2\n0 0\n1 0\n1 1\n0 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 4\n3 0\n0 2\n2 4\n''') == '5'\nassert solution('''\n3 3\n2 0\n2 0\n2 3\n''') == '4'\nassert solution('''\n1 1\n1 0\n1 2\n''') == '2'\nassert solution('''\n1 1\n1 2\n''') == 'IMPOSSIBLE'\nassert solution('''\n2 3\n1 0\n0 2\n2 4\n''') == '5'\n\n\"\"\"\n--- Day 10: Adapter Array ---\nThis problem is named after the comedy group \"Lollipop\", which is a harmless toy with which children sometimes buy in school.\n\nThere is a strange game of adaptability, which is played in the middle of nowhere on a 1000-volt powerline.\n\nThere are N bulbs in a row, numbered from 1 to N. They are connected such that every two adjacent bulbs are directly connected with each other, and each bulb has a power rating, represented by an array P.\n\nBulb i is rated P[i]. The power rating of the bulb to the left (i - 1) or right (i + 1) is either P[i - 1] or P[i + 1], but never both. In other words, all bulbs to the left and to the right of bulb i have a worse rating than bulb i, and any bulb is never on both sides of bulb i.\n\nYou have an outlet at the start of the circuit, and a socket into which you must read a serialized integer. Your goal is to find the first bulb that you can connect to, or \"lose\" its power rating.\n\nFor example, consider the following adaptability game:\n\nP = [5, 1, 4, 2]\n\nConsider the bulbs from the top down, and the two pixels to the left of the first bulb:\n\nP[1] --> P[0] --> P[2] --> P[3] --> P[1]\n\nP[4] --> P[5] --> P[1]\n\nThe first pixel to the left (P[3]) is a perfect fit; no other bulb has a worse rating than P[3]. However, because there are no other similar pixels to the left, the bulb at P[3] has the least rating, and you can\u2019t power it.\n\nP[2] is a worse fit than P[3], but it has a direct connection to the pixel to the right; this is because there is a bulb directly connected to the pixel to the right, which has a worse rating than P[3].\n\nP[4] is a worse fit than P[3], but because there is a bulb to the right, the bulb to the right has a worse rating than P[3], so you can power P[4] and connect it to P[3].\n\nP[0] is a worse fit than anything you have, including P[3].\n\nP = [2, 3, 2]\n\nThis is not a valid game because there is no pixel to the left of P[0].\n\nWrite a function which, given a board of N x M adaptability game boards, returns the first bulb that you can connect to, or \"lose\" its power rating.\n\nFor example, given the following board:\n\nP = [5, 1, 4, 2]\n\nConsider the pixels from the top down, and the two pixels to the left of the first bulb:\n\nP[1] --> P[0] --> P[2] --> P[3] --> P[1]\n\nP[4] --> P[5] --> P[1]\n\nThe first pixel to the left (P[3]) is a perfect fit; no other bulb has a worse rating than P[3]. However, because there are no other similar pixels to the left, the bulb at P[3] has the least rating, and you can\u2019t power it.\n\nP[2] is a worse fit than P[3], but it has a direct connection to the pixel to the right; this is because there is a bulb directly connected to the pixel to the right, which has a worse rating than P[3].\n\nP[4] is a worse fit than P[3], but because there is a bulb to the right, the bulb to the right has a worse rating than P[3], so you can power P[4] and connect it to P[3].\n\nP[0] is a worse fit than anything you have, including P[3].\n\nWrite a function which, given a board of N x M adaptability game boards, returns the first bulb that you can connect to, or \"lose\" its power rating.\n\nFor example, given the following board:\n\nP = [2, 3, 2]\n\nConsider the pixels from the top down, and the two pixels to the left of the first bulb:\n\nP[1] --> P[0] --> P[2] --> P[3] --> P[1]\n\nP[4] --> P[5] --> P[1]\n\nThe first pixel to the left (P[3]) is a perfect fit; no other bulb has a worse rating than P[3]. However, because there are no other similar pixels to the left, the bulb at P[3] has the least rating, and you can\u2019t power it.\n\nP[2] is a worse fit than P[3], but it has a direct connection to the pixel to the right; this is because there is a bulb directly connected to the pixel to the right, which has a worse rating than P[3].\n\nP[4] is a worse fit than P[3], but because there is a bulb to the right, the bulb to the right has a worse rating than P[3], so you can power P[4] and connect it to P[3].\n\nP[0] is a worse fit than anything you have, including P[3].\n\nWrite a function which, given a board of N x M adaptability game boards, returns the first bulb that you can connect to, or \"lose\" its power rating.\n\nFor example, given the following board:\n\nP = [5, 1, 4, 2]\n\nConsider the pixels from the top down, and the two pixels to the left of the first bulb:\n\nP[1] --> P[0] --> P[2] --> P[3] --> P[1]\n\nP[4] --> P[5] --> P[1]\n\nThe first pixel to the left (P[3]) is a perfect fit; no other bulb has a worse rating than P[3]. However, because there are no other similar pixels to the left, the bulb at P[3] has the least rating, and you can\u2019t power it.\n\nP[2] is a worse fit than P[3], but it has a direct connection to the pixel to the right; this is because there is a bulb directly connected to the pixel to the right, which has a worse rating than P[3].\n\nP[4] is a worse fit than P[3], but because there is a bulb to the right, the bulb to the right has a worse rating than P[3], so you can power P[4] and connect it to P[3].\n\nP[0] is a worse fit than anything you have, including P[3].\n\nWrite a function which, given a board of N x M adaptability game boards, returns the first bulb that you can connect to, or \"lose\" its power rating."
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 3\n2 3\n4 0\n0 2\n6 1\n''') == 'IMPOSSIBLE'\nassert solution('''\n5 5\n0 0\n0 0\n0 0\n0 0\n''') == '5'\nassert solution('''\n4 4\n1 0\n2 0\n0 1\n0 1\n''') == '4'\nassert solution('''\n3 4\n0 0\n0 0\n0 0\n''') == 'IMPOSSIBLE'\nassert solution('''\n1 1\n1 1\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\") == \"IMPOSSIBLE\"\nassert solution(\"4 3\\n0 2\\n6 1\\n2 3\") == \"2\"\nassert solution(\"5 5\\n0 4\\n6 1\\n3 0\\n2 2\") == \"3\"\nassert solution(\"7 7\\n0 2\\n1 3\\n6 1\\n3 4\\n5 0\\n7 6\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\na\nb\nc''') == '''3\n1\n2'''\nassert solution('''4\na\nb\nc\nd''') == '''4\n1\n1\n1\n2'''\nassert solution('''4\na\nb\nc\nd''') == '''4\n2\n2\n3\n3'''\nassert solution('''8\na\nb\nc\nd\ne\nf\ng\nh\ni''') == '''8\n3\n3\n3\n3\n4\n5\n6\n7'''\n\nprint('Time: {0:.3f}s'.format(time.process_time() - start))"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == '12'\n\n'''\n\nimport collections, itertools, heapq, re, math\nfrom functools import reduce\nfrom operator import mul\nfrom collections import deque\n\nD = dict()"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '12'\n\nassert solution('''\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '4'\n\nassert solution('''\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '11'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == \"12\\n4\\n11\\n3\\n2\\n\"\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria\\n') == '12\\n4\\n11\\n3\\n2\\n'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria\\n') == '12\\n4\\n11\\n3\\n2\\n'"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '13'\nassert solution('''5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '12'\nassert solution('''5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '11'\nassert solution('''5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '10'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx') == '12\\n4\\n11\\n3\\n2\\n'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == \"12 4 11 3 2\"\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '3'\nassert solution('3') == 'impossible'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0 1 1\n''') == '3'\nassert solution('''\n5\n3 4 5 2\n''') == '5'\nassert solution('''\n4\n2 2 2 1\n''') == '4'\nassert solution('''\n1\n1\n''') == '2'\nassert solution('''\n1\n1\n''') == '1'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n0 1 1\\n') == '3'\nassert solution('6\\n1 1 1 1 1 1\\n') == '3'\nassert solution('8\\n0 0 0 0 0 0 0\\n') == '7'\nassert solution('10\\n1 1 1 1 1 1 1 1 1\\n') == '8'\nassert solution('1\\n1\\n') == 'impossible'\n\"\"\"\n\n\"\"\"---SOLUTION---\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n0') == '1'\nassert solution('2\\n4\\n0\\n0') == '2'\nassert solution('3\\n6\\n0\\n0\\n0\\n0') == '3'\nassert solution('4\\n8\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '4'\nassert solution('5\\n10\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '5'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"3\"\nassert solution(\"\"\"0 1 1\n0 1 1\"\"\") == \"3\"\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"1 0 1\") == \"2\"\nassert solution(\"1 0 0\") == \"impossible\"\nassert solution(\"4\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 1 1\\n\") == \"3\"\nassert solution(\"6\\n0 0 1 1 1\\n\") == \"6\"\nassert solution(\"8\\n0 0 1 1 1 1 1\\n\") == \"6\"\nassert solution(\"10\\n0 1 1 1 1 1 1 1 1\\n\") == \"6\"\nassert solution(\"12\\n0 0 1 1 1 1 1 1 1\\n\") == \"8\"\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"12\"\nassert solution([\"0\", \"1\"]) == \"3\"\nassert solution([\"0\", \"3\"]) == \"4\"\nassert solution([\"0\", \"1\", \"1\"]) == \"3\"\nassert solution([\"0\", \"1\", \"2\"]) == \"4\"\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1') == '3'\nassert solution('2 2 2') == '3'\nassert solution('3 4 4') == '3'\nassert solution('5 5 5') == '3'\nassert solution('6 6 6') == '3'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n1') == '1'\nassert solution('3\\n4\\n5') == '3'\nassert solution('5\\n10\\n20\\n20\\n20\\n20\\n20\\n20') == '3'\nprint('You are a wise man and a wise witch!')\n\nSample Input 1:\n10\n0 1 1 1 1 1 1 1 1 1\nSample Output 1:\n2\n'''\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"HFBIGEDCJA\") == \"Pre In Post In Pre Pre In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"Pre In Post In In Post In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"Pre In Post In In Post In Pre\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"HFBIGEDCJA\") == \"Pre In Post In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"Pre In Post In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"Pre In Post In Pre\"\n\"\"\""
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nHFIJSDEGCFA\nJSIGEDGCFB\nHDIEJCBEDG\n''') == 'Pre In Post In Pre'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"HFBBIGEDCJA\") == \"Pre Post In Post In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"HFBJCDEGIA\"\nassert solution(\"BIGEDCJFAH\") == \"IGEDCJBAFH\""
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"HFBIGEDCJA\") == \"Pre Post In Post In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"HFBJCDEGIA\"\nassert solution(\"BIGEDCJFAH\") == \"IGEDCJBAFH\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n  A\n  B\n  C\n  ''') == '''\n  A\n  B\n  C\n'''\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('HFBIGEDCJA') == 'HFBJCDEGIA'\nassert solution('BIGEDCJFAH') == 'IGEDCJBAFH'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''HFBJCDEGIA\nBIGEDCJFAH\nBIGEDCJFAH\nSample Output:\nPre Post In Post In Pre''') == 'HFBJCDEGIABIGEDCJFAHBIGEDCJFAH'\n\"\"\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('HFBIGEDCJA') == 'Pre In Post In Pre'\nassert solution('BIGEDCJFAH') == 'Pre In Post In Pre'\nassert solution('BIGEDCJFAH') == 'In Post In Pre'\nassert solution('HFBJCDEGIA') == 'Pre In Post In Pre'\n\"\"\"\n\n\nimport itertools\nfrom collections import deque\n\nclass Solution:\n    def get(self, s, i, j):\n        return s[i:j]\n    \n    def reconstruct(self, stdin: str) -> str:\n        tokens = stdin.split()\n        \n        def parse(r, i):\n            a = self.get(r, i, i+1)\n            i += 1\n            b = self.get(r, i, i+1)\n            i += 1\n            c = self.get(r, i, i+1)\n            i += 1\n            return a, b, c\n        \n        def build(r, i, a, b, c):\n            if r == 'Pre':\n                if i > 0:\n                    return parse(r, i)\n                else:\n                    return a, b, c\n            if r == 'In':\n                if i > 0:\n                    return parse(r, i)\n                else:\n                    return a, b, c\n            if r == 'Post':\n                if i > 0:\n                    return parse(r, i)\n                else:\n                    return b, a, c\n        \n        a, b, c = build('Pre', 0, tokens[0], tokens[1], tokens[2])\n        \n        pre = deque([a, b, c])\n        \n        i = 3\n        while True:\n            if i >= len(tokens):\n                break\n            \n            a, b, c = build('In', i, a, b, c)\n            in_ = deque([a, b, c])\n            \n            i += 1\n            \n            a, b, c = build('Post', i, a, b, c)\n            post = deque([a, b, c])\n            \n            i += 1\n            \n            pre.append(post)\n            pre.appendleft(in_)\n        \n        return''.join(str(x) for x in itertools.chain.from_iterable(pre))\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"HFBIGEDCJA\") == \"Pre Post In Post In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"BIGEDCJFAH\"\nassert solution(\"BIGEDCJFAH\") == \"IGEDCJBAFH\"\nassert solution(\"HFBJCDEGIA\") == \"HFBJCDEGIA\"\nassert solution(\"HFBJCDEGIA\") == \"HFBJCDEGIA\""
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '10'\nassert solution('1') == '1'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"10\"\nassert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0\") == \"10\"\nassert solution(\"5\\n6\\n2 3 4 5\\n3 4 5 6\\n4\\n6\\n8\\n7\\n4 3\\n7\\n2 6\\n1\\n5\\n9\\n8\\n9\\n5\\n6\\n7\\n3\\n5\\n7\\n3\\n5\\n6\\n9\\n7\\n2 6\\n1\\n\") == \"9\"\nassert solution(\"5\\n6\\n5 2\\n1 3\\n4 5\\n3\\n3\\n3 1\\n4 2\\n3\\n\") == \"3\"\nassert solution(\"5\\n6\\n3 2\\n1 3\\n4 5\\n2\\n3\\n3 1\\n4 2\\n3\\n\") == \"2\"\nassert solution(\"5\\n6\\n5 4\\n1\\n3\\n2\\n2\\n2\\n3\\n3\\n\") == \"2\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n2\n10 0\n3 1 1\n1\n4 1 0\n''') == '10'\nassert solution('''5\n5\n0 0\n10 1 1\n2 0\n4 3\n''') == '11'\nprint(solution('''2\n2\n10 0\n3 1 1\n1\n4 1 0\n'''))\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '11'"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '11'\nassert solution('4') == '10'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\") == \"10\"\nassert solution(\"3\\n1 1 1\") == \"8\"\nassert solution(\"1\\n4 1 0\") == \"1\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"3 1 1\") == \"0\"\nassert solution(\"10 0\") == \"10\"\nassert solution(\"4 1 0\") == \"10\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '10'\nassert solution('4') == '7'\nassert solution('5') == '8'\nassert solution('6') == '8'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('2\\n1 1 1 2 2') == '1.00'\nassert solution('2\\n2 2 5 4\\n4 4 2 2') == '8.00'\n\nYour function should return a single string.\n\n'''\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('1\\n2 3 4 5\\n8 2 2 2 2') == '15.00'\n\"\"\"\nimport math\n\nimport pytest\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n0 0 100 100\\n30 30 60 60') == '10000.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\nassert solution('''\n1\n1 1\n1\n1\n''') == '1.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60\\n') == '10000.00'"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('1\\n1 1\\n10 10') == '101.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == \"10000.00\"\n\nassert solution('''\n2\n0 0 100 100\n30 30 60 60\n''') == \"10000.00\"\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n0 0 100 100\\n30 30 60 60\\n\") == '10000.00'\n\"\"\"\nimport sys"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n0 0 100 100\n30 30 60 60\n1 50 50 50\n2 0 20 30\n3 30 30 30\n''') == '100000.00'\nassert solution('''\n4\n0 0 100 100\n30 30 60 60\n100 100 100 100\n100 100 100 100\n''') == '100000.00'\n\n'''"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0 0 100 100\\n30 30 60 60') == '10000.00'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 3\n4 5\n2 4\n''') == '5'\nassert solution('''5 3\n2 4\n1 3\n2 4\n''') == '5'\nassert solution('''5 3\n2 3\n1 4\n1 5\n''') == '4'\nassert solution('''5 3\n1 3\n2 5\n2 4\n''') == '0'\nassert solution('''5 3\n1 3\n2 4\n3 5\n2 4\n''') == '1'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 3\n4 5\n2 4\n''') == \"5\"\nassert solution('''\n2 3\n3 5\n2 4\n''') == \"1\"\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '5'\nassert solution('4 3') == '4'\nassert solution('2 3') == '1'\nassert solution('3 1') == '0'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n1 3\n4 5\n2 4\n''') == '5'\nassert solution('''\n5 5\n1 2\n1 2\n3 2\n3 1\n''') == '10'\nassert solution('''\n5 5\n1 2\n1 2\n3 2\n4 2\n''') == '9'\nassert solution('''\n5 5\n1 2\n1 2\n3 4\n3 1\n''') == '8'"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 3\n4 5\n2 4\n''') == '5'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 3\n1 3\n4 5\n2 4\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5 5\n3 1\n1 1\n5 1\n1 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10 10\n4 4\n4 4\n\"\"\") == \"1\""
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n4 5\\n2 4') == '5'\nassert solution('10 30\\n10 10') == '1'\nassert solution('1 5\\n1 1') == '2'\nassert solution('1 2\\n2 1') == '0'\nassert solution('2 5\\n1 1') == '0'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == \"6\"\nassert solution('6 6') == \"9\"\nprint(solution(input))\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '5'\nassert solution('1 2') == '2'\nassert solution('5 2') == '2'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 3\n1 3\n4 5\n2 4\n''') == '5'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('13 17 5 2 4') == '2095'\nassert solution('11 13 17 5 2 4') == '1229'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 5\\n2 3 7\\n2 3 4\\n7 11 13\\n7 11 17\") == \"2095\"\nassert solution(\"10 10 10\\n10 10 10\\n10 10 10\\n10 10 10\\n11 11 11\\n11 11 11\\n11 11 11\\n11 11 11\\n\") == \"1111111111\""
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2 4\") == \"2095\"\nassert solution(\"11 13 17\") == \"8083\"\nassert solution(\"0 0 0\") == \"0\""
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2095'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1 5\\n2 6 9\\n2 2 1\") == \"2095\"\nassert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 13 17\\n5 2 4\\n0 0 0') == '2095'\nassert solution('1 2 1\\n5 3 1\\n5 4 2\\n') == '1'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\\n\") == \"2095\"\nprint(solution(input()))\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n11 13 17\n5 2 4\n0 0 0\n''') == '2095'\nassert solution('''\n1 2 4\n0 0 0\n''') == '2'\nassert solution('''\n5 5 6\n4 1 1\n1 1 2\n''') == '5'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n11 13 17\n5 2 4\n0 0 0\n\"\"\") == \"2095\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11 13 17') == '2095'\nassert solution('12 24 16') == '2576'\n\"\"\"\n\nfrom math import sqrt\nfrom collections import Counter\n\nm1, m2, m3 = list(map(int, input().split()))\nx1, x2, x3 = list(map(int, input().split()))\ny1, y2, y3 = list(map(int, input().split()))\nz = 1\n\nwhile (x1+z) % m1!= 0 or (x2+z) % m2!= 0 or (x3+z) % m3!= 0:\n    z += 1\n\nwhile (y1+z) % x1!= 0 or (y2+z) % x2!= 0 or (y3+z) % x3!= 0:\n    z += 1\n\nwhile (y1+z) % y1!= 0 or (y2+z) % y2!= 0 or (y3+z) % y3!= 0:\n    z += 1\n\nprint(z)"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('var a = \"Gon\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.') == 'My name is Gon\\nMy name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon\\nMy name is Gon'\n\nInput\n3\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n\nOutput\nMy name is Gon\nMy name is Gon\n\nInput\n1\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nend.\n\nOutput\nMy name is Gon\nMy name is Gon\n\nInput\n2\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.\n\nOutput\nMy name is Gon\nMy name is Gon\nMy name is Gon\n\nInput\n2\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.\n\nOutput\nMy name is Gon\nMy name is Gon\nMy name is Gon\n'''\n\nfrom math import factorial"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"var a = 1; var b = 2; print(a); print(b); print(var c = 3); print(var d = 4);\") == \"1 2 1 4\"\nassert solution(\"var a = 1; var b = 2; print(a); print(b); var c = 3; print(c); var d = 4; print(d); print(var e = 5); print(var f = 6);\") == \"1 2 1 6\"\nassert solution(\"var a = 1; var b = 2; print(a); print(b); var c = 3; print(c); var d = 4; print(d); var e = 5; print(e); var f = 6;\") == \"1 2 3 6 5\"\nassert solution(\"var a = 1; var b = 2; var c = 3; print(a); print(b); var d = 4; print(d); var e = 5; print(e); var f = 6;\") == \"1 2 3 5 6\"\nassert solution(\"var a = 1; var b = 2; var c = 3; print(a); print(b); var d = 4; print(d); var e = 5; print(e); var f = 6;\") == \"1 2 3 6 5\"\n\"\"\""
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n\"\"\") == \"My name is Gon\"\n\nassert solution(\"\"\"\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.\n\"\"\") == \"My name is Gon\\nMy name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    var a = \"Gon\";\n    var b = a;\n    var c = `My name is ${a}`;\n    print c;\n    print `My name is ${b}`;\n    end.\n    ''') == 'My name is Gon\\nMy name is Gon\\n'\n''')\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon'\n'''\n\n'''\n\ninput_lines = stdin.split('\\n')\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.''') == 'My name is Gon'\nassert solution('''print `My name is ${b}`;\nprint `My name is ${a}`;\nend.''') == 'My name is Gon'\nassert solution('''var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.''') == 'My name is Gon'\nassert solution('''print `My name is ${b}`;\nprint `My name is ${c}`;\nprint `My name is ${a}`;\nend.''') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\"\"\"\n) == \"My name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('\\n'.join([\n    'var a = \"Gon\";',\n    'var b = a;',\n    'var c = `My name is ${a}`;',\n    'print c;',\n    'print `My name is ${b}`;',\n    'end.'\n])) == 'My name is Gon\\nMy name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon\\n'''\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon\\n'''\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'discard 1'\nassert solution('3') == 'discard 1 discard 2 discard 1 fill 2 discard 1'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"fill 0 discard 0\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n7 8\n10\nSample Output:\n''') == '''\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0 0 1 0'\nassert solution('4') == '0 1 0 1'\nassert solution('5') == '0 0 0 0 0'\nassert solution('6') == '0 0 1 1 0 0'\nassert solution('7') == '0 1 1 1 0 0 0'"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\nassert solution('1') == 'impossible'\n\n'''"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n10\n0\n\"\"\") == \"\"\"\ndiscard 1\n\"\"\".strip()\n\nassert solution(\"\"\"\n2\n7\n10\n\"\"\") == \"\"\"\ndiscard 1\n\"\"\".strip()\n\nassert solution(\"\"\"\n3\n3\n10\n\"\"\") == \"\"\"\n\"\"\".strip()\n\nassert solution(\"\"\"\n10\n3\n10\n\"\"\") == \"\"\"\n\"\"\".strip()\n\nassert solution(\"\"\"\n20\n10\n10\n\"\"\") == \"\"\"\n\"\"\".strip()\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '3 1 1'"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2\n7 8\n10\"\"\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\"\"\")\n\nassert solution(\"\"\"1\n1\n1\"\"\") == \"impossible\"\n\nassert solution(\"\"\"1\n100\n100\"\"\") == \"impossible\"\n\nassert solution(\"\"\"1\n1000\n1000\"\"\") == \"impossible\"\n\nassert solution(\"\"\"1\n1000\n1000\"\"\") == \"impossible\""
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n10\n10\n''') == '''\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndiscard 1\ndisc"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6 2') == '7'\nassert solution('10 3 2') == '9'\nassert solution('100 9 8') == '98'\nassert solution('100 9 8') == '98'\n\"\"\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == '27'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4 3') == '27'\n\"\"\""
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"6 2 2\"\n) == \"1\"\nassert solution(\n    \"3 2 3\"\n) == \"1\"\nassert solution(\n    \"10 10 2\"\n) == \"2\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n10 20 30\\n') == '20'\nassert solution('3\\n100 200 300\\n') == '300'\nassert solution('5\\n1000000 1000000 1\\n') == '1000000'"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 4 3\") == \"27\"\nassert solution(\"10 10 10\") == \"0\"\nassert solution(\"10 20 10\") == \"10\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('100 4 2') == '103'\nassert solution('100 3 5') == '95'\nassert solution('1000 5 3') == '1015'\nassert solution('10 3 5') == '15'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('10 10 10') == '50'\n\n\"\"\"\n\nn,m,k = list(map(int, input().split()))"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"2 4\") == \"7\"\nassert solution(\"4 6\") == \"11\"\nassert solution(\"100 8\") == \"1020\"\nassert solution(\"100 3\") == \"1021\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2 1\n10\n1''') == '5'\nassert solution('''5 2 3\n10\n1\n2''') == '9'\nassert solution('''5 3 1\n10\n1\n2''') == '8'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3 5\") == \"3\", \"Wrong\"\nassert solution(\"3 3 5\") == \"3\", \"Wrong\"\nassert solution(\"4 4 5\") == \"4\", \"Wrong\"\nprint(\"You're a stud!\")\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 5\") == \"3\", \"Wrong\"\nassert solution(\"2 3 1 2\") == \"4\", \"Wrong\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 3 5\\n\"\n    \"2 3 1 2\\n\"\n    \"2\\n\"\n    \"1 3 3\\n\"\n    \"2\\n\"\n    \"1 1 1\\n\"\n    \"2\"\n) == \"4\""
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 5') == '3'\nassert solution('2') == '-1'\nassert solution('2 2 3 3 3') == '4'\nassert solution('2') == '-1'\nassert solution('2 2 2') == '3'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2''') == '4', 'First example'\n\nassert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2''') == '5', 'Second example'\n\nassert solution('''5 3 7\n5\n1 1 1\n5\n1 1 1\n5\n1 1 1\n1\n1 1 1\n5''') == '-1', 'Third example'\n\nassert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n1 1 1\n2''') == '3', 'Fourth example'\n\nassert solution('''4 3 5\n5\n1 1 1\n5\n1 1 1\n5\n1 1 1\n1\n1 1 1\n5''') == '4', 'Fifth example'"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n') == '4'\nassert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n') == '-1'\nassert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n') == '4'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n\") == \"4\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\"\n) == \"3\\n-1\\n4\\n\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3 5') == '3'\nassert solution('4 3 5 1 2') == '-1'\nassert solution('2') == '2'\nassert solution('2 1 2 2') == '3'\nassert solution('1 1 1') == '-1'"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '-1'\nassert solution(input()) == '4'"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 1 0\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"\n99999999 99999999\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"\n1 1 1\n\"\"\") == \"0.0\"\nassert solution(\"\"\"\n1 1 1 1 1 1 1\n\"\"\") == \"0.0\"\nassert solution(\"\"\"\n1 1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"0.0\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1000 3000 1000\") == \"533.3333333333\"\nassert solution(\"100000000 1000000000\") == \"10000000000000001\"\nassert solution(\"1000000 1000000000\") == \"10000000000000001\"\nassert solution(\"1000000 1000000000\") == \"10000000000000001\"\nassert solution(\"1000000 1000000000\") == \"10000000000000001\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1000 3000 1000\\n') == '533.3333333333'\nassert solution('7000 1000 1000\\n') == '1.61111111111'\nassert solution('50000 1000 1000\\n') == '5.72222222222'\nprint('All test cases passed')\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\nassert solution('1 100000 1') == '10.0000000000'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\nassert solution('100 100 100') == '103.3333333333'\nassert solution('100 1000 100') == '109.3333333333'\nassert solution('1000 100 1000') == '1133.3333333333'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1000 3000 1000\n''') == '533.3333333333'\nassert solution('''\n1000 1 1 1\n''') == '1000.0'\nassert solution('''\n1000 200 200 200\n''') == '0.0'\n\"\"\"\nYou are given an array of strings parts, where parts[i] is the name of a part of a machine. Parts have names such as \"head\", \"body\", \"door\", \"window\" and so on. The machine has a list of parts it has to carry, which is represented by a list of strings machines.\n\nYou are also given an integer maxWeight. It means that you can carry only a maximum weight of maxWeight kg of parts. You want to know how many machines can carry all the parts and if it is possible.\n\nYou can start with any machine. For this, you need to select parts from parts that are in the machine. Parts are selected in the order of their names in parts.\n\nFor example, you have machine with parts \"head\", \"body\", \"door\" and \"window\" and you need to select \"head\" and \"body\" first. If you pick \"body\", you will need to select \"window\" and then \"door\".\n\nAnd so on. If the parts you have selected are \"door\" and \"window\", then you need to pick \"head\" and \"body\" as well.\n\nReturn the maximum number of machines that can carry all parts.\n\nInput:\nparts = [\"head\", \"body\", \"door\", \"window\"], maxWeight = 30\nmachines = [\"1 1 1 1\", \"2 1 1 1\", \"1 1 1 1\", \"2 1 1 1\"], maxWeight = 10\nOutput:\n3\n\"\"\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1000 1000\\n') == '533.3333333333\\n'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1000 3000 1000\n''') == '533.3333333333'\nassert solution('''\n1000000 1000000 1000000\n''') == '533.3333333333'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == '533.3333333333'"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1000 3000 1000') == '533.3333333333'\nassert solution('1\\n1\\n1000 1000') == '0'\nassert solution('1\\n5\\n1000 1000') == '533.3333333333'\nassert solution('1\\n1000\\n1000') == '0'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 0\n10 0\n10 10''') == '14.14'\nassert solution('''2 1\n10 0\n10 10''') == '6.28'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '10.00'\nassert solution('3 1') == '11.00'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 0\n10 0\n10 10\n''') == '14.14', \"First\"\nassert solution('''\n2 0\n10 0\n10 10\n''') == '14.14', \"Second\"\nassert solution('''\n5 0\n0 0\n0 0\n0 0\n0 0\n''') == '11.41', \"Third\"\nassert solution('''\n5 0\n0 0\n0 0\n0 0\n0 0\n''') == '11.41', \"Fourth\"\nassert solution('''\n5 0\n0 0\n0 0\n0 0\n0 0\n''') == '11.41', \"Fifth\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '14.14'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 0\n10 0\n10 10\n4 10\n4 10\n3 10\n3 10\n4 10\n4 10''') == '14.14'\nassert solution('''1 0\n10 0\n10 10\n4 10\n4 10\n3 10\n3 10\n4 10\n4 10''') == '18.67'\nassert solution('''2 0\n10 0\n10 10\n4 10\n4 10\n3 10\n3 10\n4 10\n4 10''') == '16.01'\nassert solution('''3 0\n10 0\n10 10\n4 10\n4 10\n3 10\n3 10\n4 10\n4 10''') == '16.01'\nassert solution('''4 0\n10 0\n10 10\n4 10\n4 10\n3 10\n3 10\n4 10\n4 10''') == '16.01'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 0\") == \"14.14\"\nassert solution(\"2\\n1 0\") == \"0.00\"\n\"\"\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 0\n10 0\n10 10\n''') == '14.14', f'actual: {solution('')}'\nassert solution('''\n2 0\n1 0\n1 1\n''') == '2.00', f'actual: {solution('')}'\nassert solution('''\n3 0\n0 0\n0 0\n''') == '3.00', f'actual: {solution('')}'\n\nprint('All tests passed!')"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 2') == '2'\nassert solution('10 0') == '10.00'\n\n'''\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0') == '14.14'\nassert solution('1 0') == '14.14'\nassert solution('1 1') == '14.14'\nassert solution('2 1') == '14.14'\nassert solution('1 1 2') == '14.14'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 0\n5 10\n5 10\n2 10''') == '20.00'\nassert solution('''3 0\n5 10\n5 10\n1 10''') == '20.00'\nassert solution('''3 0\n10 5\n5 10\n2 10''') == '22.00'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '0 2\\n1 1\\n0 1\\n'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n1 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n\"\"\") == \"123457 0\\n0 2\\n123458 1\\n\"\n\nassert solution(\n    \"\"\"\n2 2\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n\"\"\") == \"123457 0\\n0 2\\n123458 1\\n\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '0 2'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"123457 0\\n0 2\\n123458 1\\n\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n10000000 10000000 20000000 30000000\n0\n10000000\n0\n10000000\n10000000\n20000000\n30000000\n0\n10000000\n0\n0\n10000000\n''') == '10000000 10000000\\n123457 0\\n123458 1\\n123457 0\\n0 2\\n'''\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456') == '123457 0\\n0 2\\n123458 1\\n'\nassert solution('10 1\\n13456 13453 1700000\\n13458 14412 1900000\\n13456 15221 1800000\\n13456 0\\n13456 12422 21000\\n13456 14542 19000\\n13456 0\\n13456 14412 21000\\n13456 0\\n13456 14542 21000\\n13456 0\\n13456 14412 21000\\n13456 0\\n13456 14542 21000\\n13456 0\\n') == '13456 0\\n0 2\\n13456 1\\n'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n''') == '0 2'\nassert solution('''\n1\n123456\n''') == '0 0'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '123456 0\\n0 2\\n123458 1\\n'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"123457 0\\n0 2\\n123458 1\\n\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n\"\"\") == \"\"\"123457 0\n0 2\n\"\"\".strip()\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2 3\\n3 5\\n2 4 5\\n2 3 4 5 1\\n') == '90'\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n10\n\"\"\") == \"10\"\nassert solution(\"\"\"\n6\n12 5 2 9 1 4\n4 5 1 3 2\n\"\"\") == \"60\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 5 10 2 5\\n2 4 5 1 3\") == \"90\"\nassert solution(\"6\\n5 5 5 1 2 3\\n5 4 3 2 1\\n1 1 2 1 1 1\\n1 1 2 2 1 1\") == \"84\"\nassert solution(\"100\\n
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3') == '90'\nassert solution('10\\n3 5 10 2 5\\n2 4 5 1 3') == '225'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3\\n5\\n1 2 3\\n') == '45'\nassert solution('4\\n2 2 1 3\\n') == '3'\nassert solution('7\\n10 5 12 4 9 8 11 11\\n9 10 1 5 2 3 6 8\\n') == '2392'"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n3 5 10 2 5\n2 4 5 1 3\n''') == '90'\nassert solution('''\n3\n10 10 10 10\n5 5 5 5\n''') == '90'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n3 5 10 2 5\n2 4 5 1 3\n\"\"\") == \"90\"\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n10 10 9 8 7 6 5 4 3 2\n\"\"\") == \"130\"\nassert solution(\"\"\"\n20\n10 20 15 10 10 20 20 20 10 15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n\"\"\") == \"150\"\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n\"\"\") == \"150\"\nassert solution(\"\"\"\n10\n
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3\\n') == '90'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n10 5 10 2 5\\n2 4 5 1 3\\n') == '90'\nassert solution('5\\n10 5 10 2 5\\n2 4 5 1 3\\n') == '90'\nassert solution('5\\n3 5 10 2 5\\n2 4 5 1 3\\n') == '102'\nassert solution('4\\n8 6 10 2 5\\n5 6 1 3 4 2\\n') == '94'\nassert solution('9\\n10 1 2 3 4 5 6 7 8\\n7 1 2 3 4 5 6 8 10\\n1 1 1 1 1 1 1 1 1\\n') == '504'"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n5\n1\n5\n1\n2\n\"\"\") == \"90\"\nassert solution(\"\"\"\n4\n2 2 4 3\n1 1 2 2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5\n1 2 5 5 2\n3 3 3 2 2\n\"\"\") == \"10\"\nassert solution(\"\"\"\n1\n3 2 3 2\n3 2 2 2\n\"\"\") == \"10\"\nassert solution(\"\"\"\n1\n1 2 1 2\n1 3 1 2\n1 2 3 2\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 10\n1 2 6\n0 4 3\n0 8 2\n''') == '6.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 10\\n0 2 6\\n0 4 3\\n0 8 2\") == \"6.000000\""
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '6.000000', 'Error'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 10') == '6.000000'\nassert solution('1 2 6') == '6.000000'"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2\\n') == '6.000000'\nassert solution('3 10\\n0 1 6\\n0 4 3\\n0 8 2\\n') == '8.000000'\n\n--\nSample Input:\n5\n1 2 5\n1 2 4\n2 2 6\n3 2 2\n3 2 2\n4 2 1\n4 2 1\n5 3 4\n5 3 4\n5 3 4\nSample Output:\n6.250000\n\n--\nSample Input:\n2\n1 2 1\n0 1 1\nSample Output:\n0.250000\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"6.000000\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 10\\n1 2 6\\n0 4 3\\n0 8 2\\n') == '6.000000'\n\"\"\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2') == '6.000000'\nassert solution('100 10\\n1 2 6\\n0 4 3\\n0 8 2') == '100.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 10') == '6.000000'\nassert solution('3 100') == '21.000000'\nassert solution('3 1000') == '160.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 10\n1 2 6\n0 4 3\n0 8 2\n''') == '6.000000'\nassert solution('''\n3 100\n1 2 6\n0 4 3\n0 8 2\n''') == '4.296875'\n''')\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1.') == '1.\\n.\\n'\nassert solution('2\\n0 0\\n0 0\\n2.') == '2.\\n.\\n'\nassert solution('2\\n0 0\\n0 0\\n2.\\n1.') == '2.\\n1.\\n'\nassert solution('3\\n1 2\\n1 2\\n1 2\\n2.') == '1.\\n1.\\n1.\\n1.\\n'\nassert solution('3\\n1 2\\n1 2\\n1 2\\n2.\\n1.') == '2.\\n1.\\n1.\\n1.\\n'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('\\n'.join(['0 0', '0 0'])) == '0.\\n0.'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1.\\n..\\n0') == '1.\\n..\\n'\n\"\"\""
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n5 4\n1\n.\n.\n.\nSample Input 2:\n1\n2\n1 1\nSample Output 2:\n1.1\n1.1\n\"\"\") == \".1.1\"\n\nassert solution(\"\"\"\n4\n4 4\n1.\n.\n.\n.\nSample Output 3:\n1.1.1.1\n1.1.1.1\n\"\"\") == \"1.1.1.1\"\n\nassert solution(\"\"\"\n3\n5 4\n1 2\n.\n.\n.\nSample Output 4:\n1.2.1.1\n1.2.1.1\n\"\"\") == \"1.2.1.1\"\n\nassert solution(\"\"\"\n4\n5 5\n1.\n1.\n2.\n.\nSample Output 5:\n1.1.2.1\n1.1.2.1\n1.1.2.1\n\"\"\") == \"1.1.2.1\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1\\n') == '1.\\n..'\nassert solution('5\\n0 0\\n0 0\\n1.\\n.\\n1\\n') == '2.\\n..\\n1.\\n.\\n'\nassert solution('5\\n0 0\\n0 0\\n1\\n.\\n1\\n') == '2.\\n.\\n1.\\n.\\n'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n0 0\n0 0\n1.\n..\n0\n''') == '''\n1.\n..\n'''\n\n'''\nn = int(input())\n\nzerglings = {}\nfor _ in range(n):\n    r, c, hp, attack, armour = map(int, input().split())\n    zerglings[(r, c)] = Zergling(r, c, hp, attack, armour)\n\nfor _ in range(int(input())):\n    x, y = map(int, input().split())\n    attack, armour = map(int, input().split())\n    # zombie.attack(x, y, attack, armour)\n    move(x, y, attack, armour)\n\nmap_str = \"\"\nfor row in range(n):\n    map_str += '{}\\n'.format(''.join(map(str, range(n))))\n\nprint(map_str)\n'''\n'''\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1.'\nassert solution('2') == '1.'\nassert solution('3') == '1.'\nassert solution('4') == '1.'\nassert solution('5') == '1.'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n0 0\n0 0\n1.\n..\n0\nSample Output:\n1.\n..\n''') == '''1.\n..\n'''\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1.\\n1.\\n1.\\n..\\n1.\\n') == '..\\n..\\n1.\\n..\\n..\\n'\nassert solution('1.\\n1.\\n1.\\n..\\n1.\\n') == '..\\n..\\n1.\\n..\\n1.\\n'\nassert solution('1.\\n1.\\n1.\\n..\\n1.\\n') == '..\\n..\\n1.\\n..\\n1.\\n'\nassert solution('1.\\n1.\\n1.\\n..\\n1.\\n') == '..\\n..\\n1.\\n..\\n1.\\n'\nassert solution('1.\\n1.\\n1.\\n..\\n1.\\n') == '..\\n..\\n1.\\n..\\n1.\\n'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n1.5\\n1.5\\n1\\n.5\\n.5\\n.5\\n1\\n.5\\n.5\\n.5\\n1\\n.5\\n.5\\n.5\\n1\\n.5\\n.5\\n.5\\n1\\n.5\\n.5\\n.5\\n1\\n.5\\n.5\\n.5\\n.5\\n1\\n.5\\n.5\\n.5\\n1\\n.5\\n.5\\n.5\\n1\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n.5\\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"1\"\nassert solution(\"bc\") == \"1\"\nassert solution(\"abc\") == \"2\"\n\nstdin = \"\"\"\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n\"\"\"\n\nimport os\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"3\\n\"\n    \"a\\n\"\n    \"bc\\n\"\n    \"abc\\n\"\n    \"3\\n\"\n    \"1 abca\\n\"\n    \"2 1\\n\"\n    \"2 3\\n\"\n    ) == \"1\\n\"\nassert solution(\n    \"2\\n\"\n    \"abc\\n\"\n    \"1\\n\"\n    \"3\\n\"\n    \"1 abca\\n\"\n    \"2 1\\n\"\n    \"2 3\\n\"\n    \"2 2\\n\"\n    \"2 4\\n\"\n    \"3 1\\n\"\n    \"2 1\\n\"\n    \"2 5\\n\"\n    \"4 1\\n\"\n    \"2 1\\n\"\n    \"2 3\\n\"\n    \"4 1\\n\"\n    \"3 1\\n\"\n    \"3 4\\n\"\n    \"5 1\\n\"\n    \"2 1\\n\"\n    \"2 3\\n\"\n    \"3 1\\n\"\n    \"3 3\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"3 1\\n\"\n    \"3 3\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"3 1\\n\"\n    \"3 3\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\"\n    \"4 4\\n\"\n    \"5 1\\n\"\n    \"4 1\\n\""
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"a\") == \"a\"\nassert solution(\"b\") == \"b\"\nassert solution(\"c\") == \"c\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"a\") == \"1\"\nassert solution(\"bc\") == \"2\"\nassert solution(\"abc\") == \"3\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\ncat\\ncat\\ncat\\ncat') == '1\\n1\\n1\\n1\\n1'\n\"\"\"\nimport sys"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '0'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    4\n    a\n    bc\n    abc\n    ''') == '1'\nassert solution('''\n    5\n    a\n    bc\n    abc\n    def\n    ''') == '0'\nassert solution('''\n    5\n    a\n    bc\n    abc\n    def\n    ''') == '2'\n\nassert solution('''\n    5\n    a\n    bc\n    abc\n    def\n    ''') == '2'\n\nassert solution('''\n    5\n    a\n    bc\n    abc\n    def\n    ''') == '2'"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n'\n                'a\\n'\n                'bc\\n'\n                'abc\\n') == '1'\n\nassert solution('4\\n'\n                'c\\n'\n                'ab\\n'\n                'abc\\n') == '0'\n\nassert solution('4\\n'\n                'ca\\n'\n                'abc\\n'\n                'abc\\n') == '3'\n\nassert solution('4\\n'\n                'cb\\n'\n                'abc\\n'\n                'abc\\n') == '1'\n\nassert solution('4\\n'\n                'bcb\\n'\n                'abc\\n'\n                'abc\\n') == '2'"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('10 100 10 100') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 2\") == \"YES\"\nassert solution(\"2 1 1 1\") == \"YES\"\nassert solution(\"1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"1 1 1 2\") == \"NO\"\nassert solution(\"1 2 1 3\") == \"NO\"\nassert solution(\"2 1 1 3\") == \"YES\"\nassert solution(\"2 2 1 3\") == \"NO\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2 2\") == \"YES\"\nassert solution(\"5 2 5 2\") == \"YES\"\nassert solution(\"3 1 3 1\") == \"YES\"\nassert solution(\"6 7 6 6\") == \"NO\"\nassert solution(\"11 11 11 11\") == \"YES\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 2 2 3') == 'NO'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('2 2 2 2') == 'NO'\nassert solution('5 5 5 5') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1 1 1''') == 'YES'\nassert solution('''1 2 3 4''') == 'NO'\nassert solution('''1 1 2 3''') == 'YES'\nassert solution('''1 2 1 1''') == 'NO'\nassert solution('''3 4 1 1''') == 'YES'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 2 1 3') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('2 4 3 1') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1 1') == 'YES'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 96') == '80.5696000000'\nassert solution('3 40') == '68.15974615974616'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000\") == \"80.5696000000\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 96\n0.9818 0.9208 0.8700\n0.9818 0.9208 0.8700\n0.9818 0.9208 0.8700\n0.9818 0.9208 0.8700\n0.9818 0.9208 0.8700\n''') == '80.5696000000'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 96') == '80.5696000000'\n\n'''\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000\\n') == '80.5625'\n\nNote: Don't forget to return the right answer!\n\"\"\""
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 96') == '80.5696'\nassert solution('1') == '1'\nassert solution('100') == '100.0000'\n\nSolution by WolframAlpha:\n1. Sort the points\n2. For each point, calculate the sum\n3. Calculate the sum /2 and return the maximum sum\n\"\"\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2 -0.0080 1.5417 25.0000\") == \"80.5696000000\"\nassert solution(\"5 4 -0.0080 1.5417 25.0000\") == \"81.120972656\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 96 -0.0080 1.5417 25.0000\") == \"80.5696000000\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 96 -0.0080 1.5417 25.0000 -0.0080 1.5417 25.0000') == \"80.5696000000\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 96 -0.0080 1.5417 25.0000 -0.0080 1.5417 25.0000\"\n) == \"80.5696000000\"\n\nassert solution(\n    \"3 5 0.0033 0.01 0.0263\"\n) == \"0.00023332333\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n1 2 1 2 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n1 1 0 2 2 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n1 1 2 1 2 2\n\"\"\") == \"3\"\n\n'''\ntime: O(n)\nspace: O(n)\n'''\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 0 0 1 1 1 0 0 1\n''') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"5 0 1 1 1 1 0 0 1 0 0\") == \"4\"\nassert solution(\"10 0 1 1 1 1 0 0 1 0 0 1 0 1 0 1 1 1 0 0 1 1 1 1 0 0 0 0 1 1 0 0 1 0 1 0 1 0 0 1 0 0 0 0 0 1 0 1 1 1 0 0 0 1 1 1 0 0 1 1 1 0 1 0 1 0 1 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 0 0 1 1 1 0 0 1\n''') == '2'\n\"\"\""
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 0 0 1 1 1 0 0 1\n1 0 0 0 1 0 0 1 0\n1 0 0 0 1 0 0 0 0\n0 0 1 0 1 0 0 0 0\n0 0 1 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0\n0 0 0 0 1 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 1 0 1 0 0 0 0\n0 0 1 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0''') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\nassert solution('4 1 0 0 1 1 1 0 0 1') == '1'\nassert solution('4 2 0 0 1 1 1 0 0 1') == '1'\nassert solution('4 3 0 0 1 1 1 0 0 1') == '2'\nassert solution('4 0 0 1 1 1 1 1 0 0 1') == '1'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\nassert solution('3 0 0 1 1 1 0 0 1') == '1'\nassert solution('1000 0 0 1 1 1 0 0 1') == '0'\n'''\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n-1\\n1\\n-1\\n1\\n-1\\n1\\n') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 2 5 1 0 1 0 0') == '2'\nassert solution('5 1 0 4 0 4 1') == '5'\nassert solution('1 1 1 1 1 1 1 1 1') == '1'\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\") == \"impossible\"\nassert solution(\"10 3 3\") == \"impossible\"\nassert solution(\"2 1 3\") == \"1400\"\nassert solution(\"6 2 3\") == \"impossible\"\nassert solution(\"10 5 5\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\") == \"1400\"\nassert solution(\n    \"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n0 0 150\\n1300 0 150\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2 3\") == \"impossible\"\nassert solution(\"3 2 2\") == \"1400\"\nassert solution(\"6 5 2\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2 3\") == \"1400\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == '1400'\n'''\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\nassert solution('3 4 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\\n3 4 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\\n4 4 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == 'impossible'\nassert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\\n3 4 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == 'impossible'"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 3') == 'impossible'\nassert solution('1000 0 400\\n1300 0 150') == '1400'\nassert solution('2 2 2\\n0 0 400\\n1000 0 400\\n2000 0 400') == 'impossible'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 3') == 'impossible'\nassert solution('10 1 1') == 'impossible'\nassert solution('10 10 10') == 'impossible'\nassert solution('10 10 10 0 0 0') == 'impossible'\nassert solution('10 10 10 0 0 0 0') == 'impossible'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == '1400'\nprint('All tests passed!')"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\") == \"impossible\"\nassert solution(\"5 2 5\") == \"impossible\"\nassert solution(\"2 6 6\") == \"impossible\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\ndublin\\noslo\\nbrussels\\namsterdam\\nto\\nwestminster\\nstockholm\\noslo\\nlondon\\nbrussels\\noslo\\nberlin\\n\\nstockholm\\namsterdam\\nlondon\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\ndublin\\noslo\\nlondon\\nbrussels\\noslo\\nstockholm\\n\\nstockholm\\namsterdam\\nlondon\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\ndublin\\noslo\\n\\n\\n\\nstockholm\\namsterdam\\nlondon\\ncopenhagen\\noslo\\nhelsinki\\n\\n\\nstockholm\\namsterdam\\nlondon\\ncopenhagen\\noslo\\nhelsinki\\n\\n\\n\\nstockholm\\namsterdam\\nlondon\\ncopenhagen\\noslo\\nhelsinki\\n\\n\\n\\nstockholm\\namsterdam\\nlondon\\ncopenhagen\\noslo\\nhelsinki\\n\\n\\nstockholm\\namsterdam\\nlondon\\ncopenhagen\\noslo\\nhelsinki\\n\\n\\n\\n\\nstockholm\\namsterdam\\nlondon\\ncopenhagen\\noslo\\nhelsinki\\n\\n\\n\\nstockholm\\namsterdam\\nlondon\\ncopenhagen\\noslo\\nhelsinki\\n\\n\\n\\nstockholm\\namsterdam\\nlondon\\ncopenhagen\\noslo\\nhelsinki\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n') == '3907'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 15') == '3907'\nassert solution('20 15') == '4546'\nassert solution('25 20') == '3333'\nassert solution('30 15') == '3030'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\helsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nsoldom stockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nsoldom brussels 354\\ncopenhagensamoslo 1748\\nsoldom dublin 463\\ndublin helsinki 1107\\nstockholm amoslan 173\\nsoldom london\\nreykjavik dublin\\nbrussels helsinkia') == '3907'"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london''') == '3907'\n\nassert solution('''20 3\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london''') == '3568'\n\nprint(solution('''20 20\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london'''))\nprint(solution('''20 20\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\nblunderborg stockholm'''))"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 15') == '3907'"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 15\") == \"3907\"\nassert solution(\"10 10\") == \"3907\"\nassert solution(\"10 12\") == \"1656\"\n\nimport itertools\n\nn, m = map(int, input().split())\n\ncities = set()\nfor i in range(n):\n    cities.add(input())\n\nroutes = {}\nfor _ in range(m):\n    a, b, c = input().split()\n    if a in cities and b in cities:\n        routes[(a, b)] = int(c)\n    elif b in cities and a in cities:\n        routes[(b, a)] = int(c)\n\nprint(min([c for c in itertools.chain(*routes.values())]))\n\nimport sys\nimport math\n\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\n\ncity = {}\nfor _ in range(n):\n    city[input()] = 1\n\nroad = {}\nfor _ in range(m):\n    a, b, c = input().split()\n    if a in city and b in city:\n        road[(a, b)] = int(c)\n    elif b in city and a in city:\n        road[(b, a)] = int(c)"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r\"\"\"15 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\nreykjavik dublin\nbrussels helsinki\n\n\"\"\") == \"3907\"\n\nprint(solution(r\"\"\"10 10\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\nreykjavik dublin\nbrussels helsinki\n\n\"\"\") == \"4970\")\nprint(solution(r\"\"\"20 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\nreykjavik dublin\nbrussels helsinki\n\n\"\"\") == \"6064\")"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 15') == '3907'\nassert solution('15 20') == '1727'\n\n##Solution 2\n\nimport sys\nimport os\nimport math"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 15') == '3907'\nassert solution('10 10') == '1'\nassert solution('10 10 1') == '1'\nassert solution('10 20') == '1'\nassert solution('20 10') == '1'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 15') == '3907'\nassert solution('7 13') == '2250'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n3 1 3 4 2') == '2\\n1\\n2\\n1'\nassert solution('4 4\\n3 1 3 4 2') == '1\\n2\\n1\\n2'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == \"1\"\nassert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == \"2\"\nassert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == \"1\""
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\"\nassert solution(\"10 4\\n5 1 3 4 2\\n6 5\\n0 4\\n8 3\\n6 5\\n0 2\\n9 1\\n3 2\\n3 1\\n1 9\\n8 2\\n4 5\\n1 9\\n1 8\\n6 5\\n2 4\\n2 1\\n5 9\\n4 8\\n3 2\\n4 5\\n4 4\\n8 2\\n8 4\\n2 5\\n2 1\\n7 1\\n4 5\\n1 9\\n2 6\\n2 4\\n8 4\\n7 5\\n4 2\\n6 4\\n3 1\\n3 2\\n2 3\\n3 4\\n5 8\\n6 1\\n2 5\\n6 5\\n1 6\\n7 6\\n1 1\\n8 7\\n3 3\\n8 6\\n6 6\\n8 4\\n4 8\\n7 3\\n5 1\\n6 6\\n2 3\\n2 5\\n5 7\\n8 1\\n2 6\\n2 2\\n7 3\\n5 5\\n4 1\\n4 2\\n2 3\\n8 3\\n4 6\\n8 5\\n8 6\\n5 7\\n1 7\\n6 6\\n6 8\\n3 8\\n8 3\\n7 2\\n6 8\\n2 4\\n4 2\\n6 5\\n5 1\\n3 2\\n2 2\\n3 4\\n8 6\\n8 3\\n2 5\\n2 7\\n1 6\\n8 2\\n7 1\\n2 8\\n7 1\\n1 5\\n5 3\\n3 4\\n6 2\\n3 4\\n8 8\\n3 6\\n4 3\\n2 8\\n5 4\\n5 3\\n5 5\\n6 3\\n6 7\\n2 6\\n3 4\\n3 5\\n5 2\\n8 5\\n1 4\\n5 7\\n6 7\\n2 1\\n2 7\\n3 3\\n3 5\\n2 7\\n8 1\\n3 2\\n3 5\\n7 4\\n6 4\\n4 8\\n8 2\\n3 5\\n5 8\\n2 8\\n5 4\\n8 8\\n8 8\\n8 8\\n3 7\\n1 3\\n2 8\\n7 6\\n6 5\\n5 6\\n1 5\\n2 4\\n8 1\\n1 1\\n5 3\\n5 6\\n5 3\\n5 7\\n8 3\\n2 3\\n4 4\\n5 8\\n6 8\\n7 5\\n6 3\\n1 1\\n7 7\\n3 8\\n4 8\\n5 3\\n1 4\\n3 5\\n3 4\\n1 6\\n5 1\\n7 7\\n5 2\\n4 3\\n4 3\\n8 1\\n1 4\\n1 7\\n8 7\\n7 7\\n3 4\\n6 4\\n5 1\\n4 7\\n4 6\\n1 4\\n5 5\\n5 7\\n8 6\\n1 1\\n1 5\\n3 6\\n8 2\\n6 5\\n1 3\\n1 5\\n1 4\\n1 6\\n3 4\\n2 2\\n4 2\\n2 4\\n3 5\\n5 7\\n2 6\\n4 3\\n2 8\\n1 3\\n5 3\\n5 4\\n2 5\\n1 5\\n8 7\\n8 5\\n8 4\\n5 4\\n4 8\\n8 4\\n1 2\\n1 5\\n6 6\\n4 6\\n3 4\\n5 3\\n3 7\\n2 6\\n1 7\\n4 7\\n2 4\\n6 7\\n5 6\\n7 2\\n5 3\\n8 2\\n5 2\\n2 6\\n6 1\\n3 3\\n6 5\\n1 5\\n8 3\\n6 5\\n5 7\\n4 6\\n6 4\\n1 4\\n4 5\\n7 4\\n6 5\\n7 4\\n5 7\\n1 7\\n2 8\\n4 8\\n3 7\\n6 5\\n2 6\\n3 4\\n3 6\\n6 8\\n8 2\\n5 7\\n1 5\\n1 4\\n2 6\\n5 4\\n1 3\\n2 5\\n8 5\\n4 4\\n4 8\\n8 6\\n5 4\\n3 3\\n4 2\\n1 8\\n2 6\\n3 5\\n3 4\\n1 1\\n8 1\\n5 5\\n3 3\\n4 6\\n5 6\\n4 2\\n5 3\\n4 2\\n3 3\\n2 4\\n4 5\\n1 2\\n3 6\\n2 5\\n2 7\\n6 4\\n3 6\\n3 4\\n4 4\\n5 2\\n3 4\\n2 8\\n6 3\\n1 6\\n2 5\\n6 6\\n5 1\\n2 4\\n2 6\\n4 8\\n2 1\\n2 3\\n1 6\\n2 7\\n1 2\\n4 8\\n4 4\\n5 2\\n8 5\\n5 7\\n8 2\\n4 5\\n2 3\\n3 6\\n8 3\\n3 4\\n8 8\\n2 5\\n1 8\\n3 4\\n8 4\\n4 5\\n6 3\\n8 1\\n2 2\\n1 5\\n1 8\\n3 4\\n3 6\\n4 7\\n2 3\\n5 4\\n5 4\\n8 3\\n1 7\\n2 5\\n6 1\\n3 3\\n2 6\\n7 4\\n5 8\\n3 7\\n7 4\\n1 5\\n3 8\\n2 2\\n1 5\\n1 4\\n2 3\\n8 3\\n2 4\\n1 2\\n8 5\\n7 6\\n6 3"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\\n1\\n2\\n1\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\") == \"1\"\nassert solution(\"5 4\\n3 1 3 4 2\\n2 1\\n1 0\\n2 1\\n2 1\\n2 0\\n3 1\\n0 1\\n1 1\") == \"2\"\nassert solution(\"3 3\\n2 1 3\\n1 3\") == \"1\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\"\n) == \"2\"\n\nassert solution(\n    \"5 10\\n3 1 4 4 5\\n0 5\\n1 1\\n2 1\\n1 2\\n1 3\\n1 4\\n1 5\\n3 1\\n3 2\\n3 3\"\n) == \"1\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1') == '1'\nassert solution('10 3\\n1 1 3 3 3 2 2 2 2\\n5 3\\n8 3\\n9 5\\n7 5\\n8 4\\n2 5\\n5 1\\n6 4\\n7 8\\n2 5\\n7 6\\n6 6\\n3 2\\n5 5\\n5 1\\n7 3\\n7 4\\n5 1\\n2 3\\n3 4\\n9 5\\n3 2\\n6 5\\n3 4\\n6 4\\n5 2\\n6 3\\n2 6\\n8 4\\n6 5\\n6 5\\n8 2\\n2 5\\n3 6\\n4 6\\n5 5\\n5 5\\n6 3\\n2 6\\n2 5\\n3 4\\n6 3\\n2 4\\n5 5\\n4 4\\n5 3\\n4 4\\n3 4\\n3 4\\n2 2\\n4 4\\n1 4\\n5 4\\n4 4\\n4 5\\n5 2\\n6 1\\n3 4\\n2 4\\n3 5\\n4 1\\n3 5\\n2 5\\n3 4\\n4 4\\n1 1\\n4 4\\n1 2\\n4 5\\n1 4\\n2 2\\n1 5\\n2 4\\n1 5\\n5 3\\n5 4\\n2 5\\n3 3\\n3 3\\n2 3\\n4 4\\n5 5\\n2 5\\n1 4\\n5 1\\n5 4\\n4 3\\n4 1\\n2 3\\n5 5\\n5 3\\n5 4\\n4 2\\n4 5\\n5 4\\n5 3\\n5 2\\n4 1\\n5 2\\n4 4\\n4 4\\n3 3\\n4 4\\n3 4\\n3 4\\n4 5\\n5 5\\n3 5\\n5 2\\n5 2\\n3 4\\n3 4\\n4 4\\n4 3\\n4 3\\n3 5\\n2 5\\n2 5\\n3 5\\n2 5\\n1 3\\n4 4\\n4 4\\n5 4\\n3 3\\n3 4\\n1 4\\n3 4\\n4 4\\n4 5\\n2 5\\n3 4\\n3 5\\n4 4\\n4 5\\n3 5\\n4 4\\n5 5\\n4 4\\n4 5\\n4 4\\n5 4\\n5 4\\n4 3\\n5 4\\n4 4\\n4 5\\n3 5\\n5 5\\n4 4\\n4 4\\n4 4\\n4 4\\n4 3\\n4 4\\n4 3\\n4 4\\n4 5\\n4 3\\n5 5\\n5 3\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 3\\n5 5\\n5 5\\n4 4\\n4 4\\n4 4\\n5 5\\n5 5\\n4 5\\n5 5\\n4 5\\n5 5\\n5 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n5 5\\n5 5\\n4 4\\n4 4\\n4 4\\n4 4\\n4 5\\n4 5\\n5 5\\n5 5\\n5 5\\n4 5\\n5 5\\n4 4\\n5 5\\n5 5\\n5 5\\n4 4\\n4 4\\n4 4\\n4 4\\n4 5\\n4 4\\n5 5\\n5 5\\n5 5\\n5 5\\n4 5\\n4 4\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"2\"\nassert solution(\"3 1 3 4 2\") == \"1\"\nassert solution(\"4 5\") == \"2\"\nassert solution(\"4 5\") == \"2\"\nassert solution(\"4 5\") == \"2\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '2'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1') == '1'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"1\") == \"1\", \"One-character input\"\nassert solution(\"11111\") == \"100001\", \"One of the input character is too high\"\nassert solution(\"01010\") == \"001010\", \"Two or more of the input character are the same\"\nassert solution(\"00011\") == \"10101\", \"Two or more of the input character are the same\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"00010\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"1 5\\n01001\\n11100\\n10111\\n\"\n) == \"00010\"\n\nassert solution(\n    \"6 6\\n00010\\n10011\\n10101\\n01001\\n11111\\n00111\"\n) == \"00010\"\n\nassert solution(\n    \"3 5\\n10 0\\n100 1\\n0001 1\\n0011 1\\n11 10\"\n) == \"00001\"\n\nassert solution(\n    \"6 6\\n10000\\n10001\\n10010\\n10011\\n11100\\n11101\"\n) == \"11111\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"01010\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5') == '00010'\nassert solution('3 3') == '10011'\n\nhttps://judge.softuni.bg/Contests/Practice/Index/1525\n\"\"\""
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5') == '01010'\nassert solution('2 1') == '00011'\nassert solution('3 5') == '1111'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\", \"Invalid test case\"\nassert solution(\"01001\") == \"00010\", \"Invalid test case\"\n\nprint(\"All tests passed\")\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n01001\n11100\n10111\n''') == '00010', \"Wrong\"\nassert solution('''\n5 5\n01001\n11100\n10111\n''') == '11100', \"Wrong\"\nassert solution('''\n2 3\n00\n01\n''') == '00', \"Wrong\"\nassert solution('''\n1 1\n0\n''') == '0', \"Wrong\"\nassert solution('''\n3 4\n01\n11\n101\n''') == '111111', \"Wrong\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5') == '00010'\n\"\"\""
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5') == '00010'\nassert solution('1 1') == '10111'\nassert solution('0 1') == '00100'\nassert solution('0 1') == '00101'\nassert solution('1 1') == '01111'"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n6 2\\n0 4\\n6 12') == 'possible'\nassert solution('2\\n3 2\\n1 4\\n4 2\\n0 2') == 'impossible'\nprint('All test cases passed!')\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6 2\n0 4\n6 12\n\"\"\") == \"possible\"\nassert solution(\"\"\"\n5 2\n2 2\n2 3\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n5 3\n0 1\n1 1\n2 3\n4 4\n5 5\n\"\"\") == \"possible\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"possible\""
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n6 2\\n0 4\\n6 12\\n') == 'possible'\nassert solution('2\\n2\\n6 2\\n0 4\\n6 12\\n') == 'impossible'"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n0\\n4\\n6\\n12') == 'possible'\nassert solution('2\\n5\\n5\\n0\\n6\\n12') == 'impossible'\nassert solution('2\\n5\\n6\\n0\\n5\\n12') == 'impossible'"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3 3') == \"possible\"\nassert solution('1\\n4 4') == \"impossible\"\nassert solution('2\\n3 2') == \"impossible\"\n\n'''\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n6 2\") == \"possible\"\nassert solution(\"1\\n6 12\") == \"impossible\"\nassert solution(\"1\\n6 2\\n0 4\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\n5 6\\n7 8') == 'impossible'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n4\\n6\\n4\\n6\\n4\\n6\") == \"possible\"\nassert solution(\"1\\n4\\n0\\n4\\n6\\n4\\n6\") == \"impossible\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"possible\"\nassert solution(\"6 2\\n0 4\\n6 12\") == \"possible\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '1'\nassert solution('0') == '1'\nassert solution('-5') == '2'\nassert solution('-5 0 1') == '3'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('10 0 1') == '2'\nassert solution('5 0 1') == '2'\nassert solution('10 0 1') == '3'\nassert solution('5 0 1') == '3'\n\"\"\""
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\\n\"\n    \"5 0 1\\n\"\n    \"10 0 1\\n\"\n    \"0 5 1\\n\"\n    \"0 -5 1\\n\"\n    \"-5 0 1\"\n) == \"2\"\n\"\"\""
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('1') == '1'\nassert solution('2') == '2'\n\"\"\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '2'\nassert solution('4\\n0 1 1\\n1 1 1\\n1 1 1\\n0 1 1\\n') == '0'\nassert solution('3\\n-1 0\\n0 -1\\n-1 0\\n') == '1'\nassert solution('3\\n0 1\\n0 -1\\n0 1\\n') == '2'\nassert solution('3\\n1 1\\n1 1\\n1 1\\n') == '1'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n0 -1\n2 -1\n-2 1''') == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '2'\nassert solution('6\\n-2 -10 3\\n4 -5 5\\n-3 0 3\\n8 -4 4\\n4 2 4\\n-2 0 -3\\n') == '3'\nassert solution('6\\n-2 -10 3\\n4 -5 5\\n-3 0 3\\n8 -4 4\\n4 2 4\\n-2 0 -3\\n') == '4'\nassert solution('10\\n-10 -10 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -5 5\\n-5 -10 5\\n-10 -"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n\"\"\") == \"2\""
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n\"\"\") == \"Yes\"\nassert solution(r\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!!bobby_dies it_goes_on_and_on\nS 4!bobby_dies business_as_usual\nS 5!!bobby_dies\nS 6!bobby_dies\nS 7!bobby_dies\nS 8!!bobby_dies\nS 9!bobby_dies\nS 10!!bobby_dies\n\"\"\") == \"Yes\"\nassert solution(r\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!bobby_dies it_goes_on_and_on\nS 4!bobby_dies business_as_usual\nS 5!!bobby_dies\nS 6!bobby_dies\nS 7!bobby_dies\nS 8!!bobby_dies\nS 9!bobby_dies\nS 10!!bobby_dies\n\"\"\") == \"Yes\"\nassert solution(r\"\"\"\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!bobby_dies it_goes_on_and_on\nS 4!bobby_dies business_as_usual\nS 5!!bobby_dies\nS 6!bobby_dies\nS 7!bobby_dies\nS 8!!bobby_dies\nS 9!bobby_dies\nS 10!!bobby_dies\n\"\"\") == \"Yes\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\nE business_as_usual\\nS 1 bobby_dies') == 'Yes'\nassert solution('10\\nE bobby_dies\\nS 1 bobby_dies\\nS 2!bobby_dies\\nS 3 business_as_usual\\nE stuff_happens\\nS 4!bobby_dies it_goes_on_and_on') == 'Yes'\nassert solution('10\\nE bobby_dies\\nS 1 bobby_dies\\nS 2!bobby_dies\\nS 3 business_as_usual\\nE stuff_happens\\nD 4') == '3 Just A Dream'\nassert solution('10\\nE bobby_dies\\nS 1 bobby_dies\\nS 2!bobby_dies\\nS 3 business_as_usual\\nE stuff_happens\\nS 4!bobby_dies it_goes_on_and_on') == 'Plot Error'\nassert solution('1\\nE business_as_usual\\nS 1 bobby_dies') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('\\n'.join(['10', 'E business_as_usual', 'E bobby_dies', 'S 1 bobby_died', 'E stuff_happens', 'E jr_does_bad_things', 'S 2!bobby_dies business_as_usual', 'E it_goes_on_and_on', 'D 4', 'S 1!bobby_dies', 'S 2!bobby_dies it_goes_on_and_on'])) == 'Yes'\nassert solution('\\n'.join(['10', 'E business_as_usual', 'E bobby_dies', 'S 1 bobby_died', 'E stuff_happens', 'E jr_does_bad_things', 'S 2!bobby_dies', 'E it_goes_on_and_on', 'D 4', 'S 1!bobby_dies', 'S 2!bobby_dies it_goes_on_and_on'])) == '3 Just A Dream'\nassert solution('\\n'.join(['10', 'E business_as_usual', 'E bobby_dies', 'S 1 bobby_died', 'E stuff_happens', 'E jr_does_bad_things', 'S 2!bobby_dies', 'E it_goes_on_and_on', 'D 4', 'S 1!bobby_dies', 'S 2!bobby_dies it_goes_on_and_on', 'D 5', 'S 1!bobby_dies', 'S 2!bobby_dies it_goes_on_and_on'])) == 'Yes'\n'''\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nS 3!bobby_dies\nS 4!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\nS 3!bobby_dies business_as_usual\nS 4!bobby_dies\nS 5!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\nS 3!bobby_dies business_as_usual\nS 4!bobby_dies\nS 5!bobby_dies it_goes_on_and_on\nS 6!bobby_dies it_goes_on_and_on\n''') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"Yes\"\nassert solution(input_sample_1) == \"Yes\"\nassert solution(input_sample_2) == \"Yes\"\n\nNote that your solution may use more than 1 line of code, as long as it remains clear in the comments about the correctness of your solution.\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n--------Problem: Number of ways to paint a 3x4 grid with bunnies----\n\nGiven an array A of size N of non-negative integers representing the height of blocks at positions corresponding to each index in range 0 \u2264 i < N, print the number of ways in which the bunnies can be positioned.\n\nExample:\n\nN = 3\nA = [1, 3, 2]\nOutput:\n1\nExplanation: The only possible configuration is (0, 1, 2)\nExample 2:\n\nN = 4\nA = [1, 3, 2, 4]\nOutput:\n4\nExplanation: The following configurations are possible: (0, 1, 2, 3), (0, 1, 3, 2), (0, 2, 1, 3), (0, 2, 3, 1).\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n--------Problem: All even numbers from a to b (non-inclusive) are not prime numbers----\n\nYou are given an array A of integers, and the task is to print all the even numbers from a to b (both included).\n\nInput Format\nFirst line contains T, the number of testcases. Then T test cases follow. Each test case consists of two lines. The first line contains a single integer N denoting the size of the array A. The second line contains N space separated integers denoting the elements of the array A.\n\nOutput Format\nOutput the space separated numbers in order of evenness.\n\nInput:\n3\n5\n1 2 3 4 5\n10\n4 2 4 6 8 10 12 14 16 18 20\nOutput:\n4 2 6 4 10\n4 2 6 12 20\n4 2 12 20\n\n-----------------------------------\n\n--------Problem: Number of ways to climb a ladder (non-inclusive)----\n\nYou are given an array A of N non-negative integers. Each integer represents the height of a certain stair in the ladder. The task is to print the number of possible ways in which you can climb the ladder.\n\nThe order of stairs in the output should be such that the maximum element in the array forms the first element in the output and the minimum element in the output forms the last element in the output. The array contains at least one element.\n\nNote: This problem can be solved using only one line of code.\n\nInput Format\nFirst line contains T, the number of testcases. Then T test cases follow. Each test case consists of two lines. The first line contains N, the number of stairs. The second line contains N space separated integers denoting the heights of the stairs in the ladder.\n\nOutput Format\nOutput the number of ways in which you can climb the ladder.\n\nInput:\n2\n5\n1 2 3 4 5\n6\n1 2 3 4 5 6\nOutput:\n4\n3\nExplanation\nExample 1:\nThe stairs are 1, 2, 3, 4, 5 and the output is 4.\n\nExample 2:\nThe stairs are 1, 2, 3, 4, 5 and the output is 3.\n\n-----------------------------------\n\n--------Problem: Two Sum----\n\nGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.\n\nInput: nums = [2, 7, 11, 15], target = 9\nOutput: [0, 1]\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nInput: nums = [3, 2, 4], target = 6\nOutput: [1, 2]\n\nInput: nums = [3, 3], target = 6\nOutput: [0, 1]\n\nInput: nums = [3, 3], target = 6\nOutput: [1, 2]\n\nInput: nums = [3, 2, 4], target = 6\nOutput: [1, 2]\n\nInput: nums = [3, 3, 4], target = 6\nOutput: [1, 2]\n\nInput: nums = [4, 2, 6], target = 5\nOutput: [0, 1]\n\nInput: nums = [4, 2, 6], target = 7\nOutput: [1, 2]\n\nInput: nums = [1, 1, 1, 1], target = 8\nOutput: [3, 4]\n\n----------------------------------------------------------\n\n--------Problem: Find Kth Smallest Element in a BST (non-inclusive)----\n\nGiven a binary"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\n\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\n\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!bobby_dies business_as_usual\nS 4!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\n\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!bobby_dies business_as_usual\nS 4!bobby_dies\nS 5!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\n\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!bobby_dies business_as_usual\nS 4!bobby_dies\nS 5!bobby_dies\nS 6!bobby_dies\nS 7!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'Yes'\nassert solution('5') == 'Plot Error'\nassert solution('9') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('3 2') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on') == 'Yes'\nassert solution('2\\nD 1\\nD 2\\nS 1!bobby_dies\\nD 3\\nD 4\\nD 5\\nS 2!bobby_dies\\nD 6') == '3 Just A Dream'\nassert solution('3\\nD 1\\nD 2\\nS 1!bobby_dies\\nD 3\\nD 4\\nD 5\\nS 2!bobby_dies\\nD 6') == 'Yes'\nassert solution('2\\nD 1\\nD 2\\nS 1!bobby_dies\\nD 3\\nD 4\\nS 2!bobby_dies\\nD 6') == 'Plot Error'\nassert solution('5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nE it_goes_on_and_on\\nS 3\\nD 2\\nD 3\\nD 4') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == '3 Just A Dream\\nYes\\nPlot Error\\nYes\\n'\nassert solution('''11\nE money_never_grows\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!bobby_dies\nS 4!bobby_dies\nS 5!bobby_dies\nS 6!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies\nS 3!bobby_dies\nS 4!bobby_dies\nS 5!bobby_dies\nS 6!bobby_dies''') == '5 Just A Dream\\nYes\\n3 Just A Dream\\nYes\\n'\n\n##def solution(stdin: str) -> str:\n##    pass\n##\n##assert solution('''10\n##E money_never_grows\n##E bobby_dies\n##S 1 bobby_died\n##E stuff_happens\n##E jr_does_bad_things\n##S 2!bobby_dies\n##S 3!bobby_dies\n##S 4!bobby_dies\n##S 5!bobby_dies\n##S 6!bobby_dies\n##E it_goes_on_and_on\n##D 4\n##S 1!bobby_dies\n##S 2!bobby_dies\n##S 3!bobby_dies\n##S 4!bobby_dies\n##S 5!bobby_dies\n##S 6!bobby_dies''') == '5 Just A Dream\\nYes\\n3 Just A Dream\\nYes\\n'\n##\n##assert solution('''11\n##E money_never_grows\n##E bobby_dies\n##S 1 bobby_died\n##E stuff_happens\n##E jr_does_bad_things\n##S 2!bobby_dies\n##S 3!bobby_dies\n##S 4!bobby_dies\n##S 5!bobby_dies\n##S 6!bobby_dies\n##E it_goes_on_and_on\n##D 4\n##S 1!bobby_dies\n##S 2!bobby_dies\n##S 3!bobby_dies\n##S 4!bobby_dies\n##S 5!bobby_dies\n##S 6!bobby_dies''') == '5 Just A Dream\\nYes\\n3 Just A Dream\\nYes\\n'\n##\n##assert solution('''10\n##E business_as_usual\n##E bobby_dies\n##S 1 bobby_died\n##E stuff_happens\n##E jr_does_bad_things\n##S 2!bobby_dies\n##S 3!bobby_dies\n##S 4!bobby_dies\n##S 5!bobby_dies\n##S 6!bobby_dies\n##E it_goes_on_and_on\n##D 4\n##S 1!bobby_dies\n##S 2!bobby_dies\n##S 3!bobby_dies\n##S 4!bobby_dies\n##S 5!bobby_dies\n##S 6!bobby_dies''') == '3 Just A Dream\\nYes\\nPlot Error\\nYes\\n'\n##\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo conse    |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\\n'\nassert solution('5 5 9 6') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo conse    |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\\n'\nassert solution('15 9 9 8') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo conse    |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\\n'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"24 5 8 7\") == \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo conse    |X|\\n|duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('25 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo conse | |\\n|duis aute irure dolor in | |\\n|reprehenderit in |v|\\n+------------------------+-+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('25 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\nSample input:\n5 5 8 7"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"24 5 8 7\") == \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n''') == '''+----------------+-+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n|voluptate velit esse |c|\n|cillum dolore eu fugiat | |\n|nulla pariatur excepteur | |\n|sint occaecat cupidatat non proident| |\n|sunt in culpa qui officia deserunt| |\n|mollit anim id est laborum| |\n|^+----------------+-+'''\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5 8 7\") == \"+-----------------+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+-----------------+\"\nassert solution(\"0 0 5 3\") == \"+-----------------+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+-----------------+\""
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n+------------------------+-+'\nassert solution('Lorem ipsum dolor sit amet consectetur adipisicing elit sed do\\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\\naliquip ex ea commodo consequat Duis aute irure dolor in\\nreprehenderit in\\nvoluptate velit esse cillum dolore eu fugiat nulla\\npariatur Excepteur sint occaecat cupidatat non proident\\nsunt in culpa qui officia deserunt mollit anim id est laborum\\n' == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in    |v|\\n+------------------------+-+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n\"\"\") == \"\"\"+------------------------+-+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+-+\"\"\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([4, 10], [[0, 3, 2, 1], [3, 0, 1, 3], [2, 1, 0, 2], [1, 3, 2, 0]]) == 'possible'\nassert solution([4, 8], [[0, 3, 2, 1], [3, 0, 1, 3], [2, 1, 0, 2], [1, 3, 2, 0]]) == 'impossible'\nassert solution([4, 10], [[1, 3, 2, 0], [3, 0, 1, 3], [2, 1, 0, 2], [1, 3, 2, 0]]) == 'possible'\nassert solution([4, 8], [[1, 3, 2, 0], [3, 0, 1, 3], [2, 1, 0, 2], [1, 3, 2, 0]]) == 'impossible'\nassert solution([4, 10], [[0, 3, 2, 1], [0, 1, 3, 2], [2, 1, 0, 2], [1, 3, 2, 0]]) == 'possible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"impossible\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\\n0 4 5 6') == 'impossible'\n\"\"\"\n\n\nfrom itertools import permutations\nimport math"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('4 10\\n1 1 2 0\\n3 1 0 2\\n0 3 2 1\\n2 1 0 2') == 'impossible'\n\n'''\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\\n') == \"possible\"\nassert solution('3 5\\n1 0 2 1\\n2 1 0 2\\n3 1 0 2\\n') == \"impossible\"\nassert solution('9 10\\n0 1 2 2 3 4 5 6 7 8 9\\n2 4 2 3 3 4 0 1 1\\n1 2 1 3 3 4 0 0 1\\n3 2 3 3 4 4 5 5 6\\n') == \"impossible\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 10') == 'possible'\nassert solution('4 10') == 'impossible'\nassert solution('10 10') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"possible\"\nassert solution(\"3 1\\n0 2\\n1 0\\n1 2\") == \"impossible\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('4 10\\n1 2 0 3\\n3 0 1 2\\n0 1 3 2\\n2 0 1 3\\n') == 'impossible'\nassert solution('3 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n') == 'impossible'\nassert solution('3 5\\n0 1 2 3 4 5\\n1 2 3 4 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == \"possible\"\nassert solution('5 10\\n0 3 2 1\\n3 1 1 3\\n1 0 0 2\\n0 2 1 0\\nSample Output:') == \"impossible\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n''') == 'possible'\nassert solution('''\n2 3\n0 1\n''') == 'impossible'\nassert solution('''\n10 3\n5 5 5 5 5\n5 5 5 5 5\n4 4 4 4 4\n3 3 3 3 3\n3 3 3 3 3\n3 3 3 3 3\n3 3 3 3 3\n3 3 3 3 3\n3 3 3 3 3\n3 3 3 3 3\n3 3 3 3 3\n''') == 'impossible'"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1.00000000'\nassert solution('2 1 1\\n2\\n1') == '0.00000001'\n\n'''\nimport math\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3 1\n3\n5\n1\n3\n''') == '0.333333333', 'First example'\nassert solution('''\n3 3 1\n1\n2\n''') == '0.5', 'Second example'"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1 1\\n1') == '1.000000'\nassert solution('2 1 1\\n1') == '1.00000000'\nassert solution('2 1 1\\n1') == '1.00000000'\nassert solution('2 1 1\\n1') == '1.00000000'\nassert solution('2 1 1\\n1') == '1.00000000'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 1') == '1.00000000'\nassert solution('100 2 4') == '1.00000101'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"1.00000000\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 1') == '1.00000000', \"Wrong\"\nassert solution('10 1 1') == '2.00000000', \"Wrong\"\nassert solution('20 10 1') == '2.00000000', \"Wrong\"\nassert solution('20 10 1') == '2.00000000', \"Wrong\"\nassert solution('20 10 1') == '2.00000000', \"Wrong\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1') == '1.0'\nassert solution('2 1 1') == '1.5'\nassert solution('1 1 2') == '2.0'\nassert solution('2 1 2') == '2.5'\nassert solution('1 1 1 1 1') == '3.0'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 1') == '1.0'\nassert solution('2 2 1') == '1.5'\nassert solution('3 3 3') == '1.33333333333333'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == '1.00000000'\nassert solution(\"2 1 1\") == '1.0'\nassert solution(\"1 1 2\") == '1.5000000000000001'\nassert solution(\"2 1 2\") == '1.0'\nassert solution(\"1 1 2\") == '1.5000000000000001'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '2', 'Wrong result'\nassert solution('''\n5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '1', 'Wrong result'\nassert solution('''\n5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '3', 'Wrong result'\nassert solution('''\n5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '1', 'Wrong result'\nassert solution('''\n5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '1', 'Wrong result'\n'''\n    Use the below input and output in your code.\n    Note: The answers to the above input test cases must be correct.\n    If you fail this test, make sure you do not modify the input and output.\n    You must not remove or modify the input and output.\n    You can (and should) use the input and output examples above for testing.\n    '''\n    '''\n    Sample Input\n    5\n    4 3 3 2\n    3\n    1 2\n    1 1\n    2 4\n    Sample Output\n    2\n    1\n    3\n    '''\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '2'\nassert solution('''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '1'\nassert solution('''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '3'\n'''\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n\"\"\") == \"\"\"1\n3\n\"\"\".strip()"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3 3 2\") == \"2\"\nassert solution(\"100 5 9 7\") == \"2\"\nassert solution(\"4 2 3 4\") == \"2\"\nassert solution(\"7 9 8 7 9 9 4 5 7 8 5 5 5 5 6\") == \"5\""
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n\") == \"1\\n3\\n2\\n\"\nassert solution(\"5\\n5 4 3 3 2\\n2\\n1 2\\n2 4\\n\") == \"2\\n3\\n\"\nassert solution(\"5\\n5 4 3 3 2\\n3\\n2\\n3\\n\") == \"3\\n\"\nassert solution(\"5\\n5 4 3 3 2\\n3\\n2\\n3\\n\") == \"2\\n\"\nassert solution(\"5\\n5 4 3 3 2\\n1 2\\n1 1\\n2 4\\n\") == \"2\\n\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5 4 3 3 2\") == \"2\"\nassert solution(\"3\\n5 4 3 3 2\\n2\\n2\\n3\\n4\\n5\\n\") == \"1\""
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == \"2 1\"\nassert solution(\n'''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == \"1 1\"\nassert solution(\n'''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == \"3 1\"\nassert solution(\n'''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == \"2 1\"\nassert solution(\n'''\n5\n5 4 3 3 2\n1 2\n1 1\n2 4\n''') == \"1 1\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4 3 3 2') == '3'\nassert solution('8 5 4 3 2 1 6 5') == '4'\nassert solution('1 3 4 2') == '1'\nassert solution('1 1') == '1'\nassert solution('2 4') == '0'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\nassert solution(\"1\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n\") == \"1\"\nassert solution(\"5\\n5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n\") == \"1\"\nassert solution(\"5\\n5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n\") == \"3\"\nassert solution(\"5\\n5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n\") == \"2\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '2'\nassert solution('''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '1'\nassert solution('''\n5\n5 4 3 3 2\n2\n2\n2\n2\n''') == '2'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n4\n1 4\n1 3\n3 1\n\"\"\") == \"4\"\n\nassert solution(r\"\"\"\n10\n1 5\n2 6\n3 7\n4 8\n5 9\n6 10\n7 11\n8 12\n9 13\n10 14\n\"\"\") == \"8\"\n\nassert solution(r\"\"\"\n20\n3 7\n1 3\n5 2\n10 9\n11 7\n13 6\n15 1\n16 5\n18 12\n19 10\n20 6\n21 8\n23 11\n25 8\n29 13\n30 10\n31 9\n32 6\n33 5\n34 4\n37 3\n39 1\n\"\"\") == \"13\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2\n0 1\n1 2\n0 2\n''') == '1'\nassert solution('''\n2 3\n0 1\n2 3\n2 4\n''') == '2'\nassert solution('''\n3 3\n1 1\n0 0\n1 1\n''') == '3'\nassert solution('''\n3 4\n1 0\n1 1\n1 2\n0 2\n''') == '0'\n\n\"\"\""
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"never meet\", \"First\"\nassert solution(\"5 1\") == \"1\", \"Second\"\nassert solution(\"5 2\") == \"0.99\", \"Third\"\nassert solution(\"1 2\") == \"1\", \"Fourth\""
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\\n\") == \"1\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2\n0 1\n1 2\n0 2\n2 3\n1 4\n''') == '1'\n\nassert solution('''5 3\n0 1\n1 2\n0 2\n1 3\n1 4\n''') == '1'\n\nassert solution('''3 3\n0 1\n1 2\n0 2\n2 3\n1 4\n''') == '2'\n\nprint('All test cases passed!')"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n0 1\\n1 2\\n0 2\\n') == '1'\nassert solution('3\\n2\\n1 2\\n0 2\\n') == '1'\nassert solution('3\\n2\\n0 2\\n1 2\\n') == 'never meet'\nassert solution('2\\n3\\n1 1\\n1 2\\n') == 'never meet'\nassert solution('3\\n3\\n0 1\\n1 2\\n') == '1'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2\\n0 1\\n1 2\\n0 2') == '1'\nassert solution('1 4\\n0 1\\n1 4\\n0 1') == '4'\nassert solution('3 2\\n1 2\\n1 3\\n1 2') == '1'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'\nassert solution('5 4') == '1'\nassert solution('1 2') == '1'\nassert solution('4 0') == 'never meet'\nprint('solution() is working.')"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4 1\") == \"1331\"\nassert solution(\"3 3 1\") == \"1330\"\nassert solution(\"4 4 1\") == \"1329\"\nassert solution(\"6 6 1\") == \"1328\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\nassert solution
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 4 2\n''') == '14500000001'\nassert solution('''\n4 4 2\n''') == '199'\nassert solution('''\n10 4 2\n''') == '994079696792799383954'\nassert solution('''\n5 6 2\n''') == '199'\nassert solution('''\n10 5 2\n''') == '100206906947104107954'\n''') == '1097'\n''') == '0.0'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4 2') == '14500000001'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2\") == \"222222222222\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4 2') == '14500000001'\nassert solution('100000001 3') == '0'\nassert solution('2 2 1') == '2'\nassert solution('3 4 4') == '0'\nassert solution('5 5 1') == '0'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4 2') == '14500000001'"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 4 2\n''') == '14500000001'\nassert solution('''\n4 4 2\n''') == '140500000001'\n''')\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4 2') == '14500000001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 4 2\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '14500000001'\nassert solution('''4 4 2\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\nassert solution('''5 4 2\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\nassert solution('''5 5 2\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3 4\") == \"1\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 4\n3 7\n1 6\n2 6\n''') == '2'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n1 4\n3 7\n1 6\n2 6\n\"\"\") == \"0 1 1 2\"\n\nassert solution(\"\"\"\n8\n0 0 0 1 1 1 1 2 2\n0 1 1 1 1 1 1 1 2 2\n1 2 1 1 1 1 1 1 1 2 2\n2 1 1 1 1 1 1 1 1 2 2\n1 1 1 1 1 1 1 1 1 2 2\n1 1 1 1 1 1 1 1 1 2 2\n1 1 1 1 1 1 1 1 1 2 2\n2 1 1 1 1 1 1 1 1 2 2\n\"\"\") == \"2 2 1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1\n3 7\n1 6\n2 6\n''') == '0 2\nassert solution('''4\n1 4\n3 7\n1 6\n2 6\n''') == '2 1\nassert solution('''5\n1 4\n3 7\n1 6\n2 6\n''') == '3 1\nassert solution('''12\n2 4\n3 7\n1 6\n1 8\n2 6\n''') == '10 5\n''')\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n1 4\n3 7\n1 6\n2 6''') == '2'\nassert solution('''2\n1 2\n2 3''') == '1'\nassert solution('''3\n1 2\n2 4''') == '2'\nassert solution('''5\n2 3\n1 4\n1 5\n1 6\n1 7''') == '4'\n\nstdin = '''2\n2 2\n2 2'''\nprint(solution(stdin))"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 4\\n3 7\\n1 6\\n2 6') == '0\\n1\\n1\\n1\\n2'\nprint(solution('5\\n1 4\\n3 7\\n1 6\\n2 6'))"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '0\\n1\\n1\\n2\\n'"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 4\\n3 7\\n1 6\\n2 6') == '0\\n1\\n1\\n2'\nassert solution('10\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n17 18\\n19 20\\n') == '0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0'"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0'\n\nassert solution('4') == '1'\n\nassert solution('5') == '2'"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1000\\n2 3 1000\\n4 5 500\\n2\") == \"3100\"\nassert solution(\"1 2 1000\\n2 3 1000\\n4 5 500\\n2\") == \"3050\"\nassert solution(\"1 2 1000\\n2 3 1000\\n4 5 500\\n2\") == \"2900\"\nassert solution(\"1 2 1000\\n2 3 1000\\n4 5 500\\n2\") == \"2800\"\nassert solution(\"1 2 1000\\n2 3 1000\\n4 5 500\\n2\") == \"2700\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 5\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3300', solution.__doc__\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\") == \"3100\"\nassert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\") == \"2600\"\nassert solution(\"6 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n3\") == \"2900\"\nassert solution(\"6 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n3\\n4\") == \"4100\"\nassert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n3\\n4\\n5\\n6\\n7\") == \"2900\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3100\"\n\"\"\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '3100'\nassert solution('5 5') == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '3000'\nassert solution('5 6') == '10000'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '3100'\nassert solution('6 0') == '0'\nassert solution('6 1') == '1'\n\nimport sys\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300') == '3100'\nassert solution('5 2\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2') == '3000'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3 1000') == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3300\"\nassert solution(\"3 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3300\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n1 4\n10 9\n10 7\n9 8\n\"\"\") == \"5.250000000\"\n\"\"\"\n    5\n    3\n    \"\"\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == '5.25'\nassert solution('4 2') == '5.25'\n\"\"\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\\n\") == \"5.25\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '5.0'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '4 2\\n'\n    '1 8\\n'\n    '6 5\\n'\n    '2 5\\n'\n    '2 9\\n'\n    '7 13\\n'\n) == '5.250000000'\nassert solution(\n    '3 2\\n'\n    '1 2\\n'\n    '1 2\\n'\n    '1 2\\n'\n) == '1.500'\nassert solution(\n    '3 2\\n'\n    '1 2\\n'\n    '1 2\\n'\n    '1 2\\n'\n) == '1.500'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '5.250000000'\nassert solution('4 2') == '5.250000000'\nassert solution('10 10') == '8.0'\n\"\"\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\\n\") == \"5.25\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == \"5.25\""
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13') == '5.250000000'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 2\n2 5\n6 5\n2 5\n2 9\n7 13\"\"\") == \"5.250000000\"\nassert solution(\"\"\"10 20\n2 5\n6 5\n2 5\n2 9\n7 13\n5 5\n3 5\n4 5\"\"\") == \"5.34666666667\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\\n\"\n\"\"\""
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2\\n') == '7\\n2\\n0\\n4\\n'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == \"7\"\nassert solution('''\n8\n1 2 3 1 2 1 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == \"7\"\nassert solution('''\n6\n1 2 3 1 2 1 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == \"6\"\nassert solution('''\n1\n2\n0\n''') == \"0\"\nassert solution('''\n1\n2\n0\n''') == \"0\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 1 2 1 1') == '7'\nassert solution('5') == '2'\nassert solution('1 2 1 2 3') == '4'\nassert solution('2 2 1 2 3') == '0'\nassert solution('1 2 1 2') == '4'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7\\n2\\n2\\n0\\n4\\n'\nassert solution('''\n7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7\\n2\\n2\\n0\\n4\\n'\nassert solution('''\n7\n2\n2\n1 2\n1\n4\n''') == '0\\n0\\n0\\n0\\n0\\n'\nassert solution('''\n7\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n5 2 1 2\n''') == '7\\n2\\n2\\n2\\n1\\n0\\n'\nassert solution('''\n7\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n5 2 1 2\n6 2 1 2\n''') == '7\\n2\\n2\\n2\\n1\\n0\\n'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2\") == \"7\\n2\\n4\\n0\\n4\"\nassert solution(\"1\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2\") == \"7\\n2\\n4\\n0\\n4\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7'\nassert solution('''\n8\n1 2 3 4 5 1 2 1\n5\n1 3 4 1 2 3\n1 2 3 4 5\n2 2 4 3 5\n2 4 1 2 3\n2 5 1 2 3\n3 3 4 1 2\n4 2 1 2 3\n5 3 1 2 3\nSample Output:\n7\n2\n2\n0\n4\n''') == '2'\nassert solution('''\n5\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '2'\nassert solution('''\n3\n1 2 1\n1 2 3\n1 2 1\nSample Output:\n3\n1\n0\n''') == '1'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 1 2 1 1') == '7'\nassert solution('5') == '0'\nassert solution('1 2 3 1 2 1 1') == '7'"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 1 2 1 1\") == \"7\"\nassert solution(\"5\") == \"2\"\nassert solution(\"1 2 3 1 2 1 1\") == \"7\"\nassert solution(\"5\") == \"2\"\nassert solution(\"1 3 1 2 3\") == \"4\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7\\n2\\n2\\n0\\n4\\n'\nassert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7\\n2\\n2\\n0\\n4\\n'\nassert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7\\n2\\n2\\n0\\n4\\n'\nassert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7\\n2\\n2\\n0\\n4\\n'\n\n'''\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5\n- 5"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"32.6405451448\"\nassert solution(\"4 3\") == \"32.6405451448\"\nassert solution(\"10 10 10 10 10 10 10 10 10 10 10\") == \"1.0\"\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '32.6405451448'\nassert solution('4') == '0.4'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2\\n') == '32.6405451448'\nassert solution('5\\n10 20 10 30 20 50 30 50 20\\n0.0 0.0 0.5 0.5 0.1\\n0.0 0.0 0.5 0.5 0.1\\n0.5 0.0 0.0 0.0 0.1\\n0.5 0.0 0.0 0.0 0.1\\n0.5 0.0 0.0 0.0 0.1\\n0.5 0.0 0.0 0.0 0.1\\n0.5 0.0 0.0 0.0 0.1\\n0.5 0.0 0.0 0.0 0.1\\n0.5 0.0 0.0 0.0 0.1\\n') == '35.665419926'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n\"\"\") == \"32.6405451448\"\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == \"32.6405451448\"\nassert solution('5') == \"35.9132995666\"\nassert solution('10') == \"32.9104990538\"\nassert solution('20') == \"34.7382286796\"\nassert solution('20') == \"35.9382287696\"\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '32.6405451448'\nassert solution('5') == '64.84119202'\nassert solution('6') == '32.6405451448'\nassert solution('7') == '64.84119202'\nassert solution('8') == '32.6405451448'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n2 1 4 3\n\"\"\") == \"2 3 4 1\"\nassert solution(\"\"\"\n5\n2 1 4 3 5\n\"\"\") == \"2 3 4 5 1\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"4\n2 1 4 3\n\"\"\") == \"2 3 4 1\"\nassert solution(\"\"\"\n1\n1 2\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n2\n2 3\n\"\"\") == \"2 3\"\nassert solution(\"\"\"\n4\n3 4 1 2\n\"\"\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n3 1 2\n''') == '1 3 2'\nassert solution('''\n6\n2 1 5 4 3 2\n''') == '1 3 2 5 4'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2 3 1'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 1 4 3\"\n    ) == \"2 3 1\"\n    \nassert solution(\n    \"5 1 2 3 4 5\"\n    ) == \"1 3 2 5 4\"\n    \nassert solution(\n    \"5 1 2 3 4 5\"\n    ) == \"1 3 2 5 4\"\n    \nassert solution(\n    \"5 1 2 3 4 5\"\n    ) == \"1 3 2 5 4\"\n    \nassert solution(\n    \"5 1 2 3 4 5\"\n    ) == \"1 3 2 5 4\"\n    \n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n2 1 4 3\n\"\"\") == \"\"\"2 3 4 1\"\"\"\nassert solution(\"\"\"\n6\n5 1 4 3 4 3\n\"\"\") == \"\"\"5 1 4 3 4 3\"\"\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 4 3') == '2 3 4 1'\nassert solution('3') == '1 2 3'\nassert solution('3 3') == '1 3 2'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n''') == '2 3 4 1'\n\nassert solution('''\n2\n1 2\n1 3\n''') == '1 2 3'\n\nassert solution('''\n4\n3 3\n3 1\n4 2\n2 4\n''') == '3 1 4 2'\n\nassert solution('''\n5\n4 4\n4 1\n3 3\n3 1\n2 2\n''') == '1 2 3 4'\n\nassert solution('''\n4\n2 2\n4 1\n3 3\n1 1\n''') == '2 1 4 3'"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 4 3\\n') == '2 3 4 1'\nprint('Success')\n\n\"\"\"\n\nimport sys\nimport os\n\nsys.path.append(os.path.dirname(__file__))\nfrom Algo.util import *\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 3 5\n4\n1 3 5\n4\n1 3 5\n''') == '1 3 5'\n\nassert solution('''\n3\n2 1 4\n3 1 5\n4\n2 3 5\n3 1 4\n''') == '2 3 5'\n\nassert solution('''\n5\n4 1 2 3 5\n5 3 4 2 1\n5 4 1 2 3\n4 5 3 2 1\n5 4 3 2 1\n''') == '4 3 2 1'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n0 0\n1 1\n2 3\n1 2\n2 2\n1 1\n3 3\n''') == '14.817640168907544'\n\nassert solution('''5\n-3 -5\n-4 -2\n-1 -2\n1 -4\n2 2\n''') == '14.817640168907544'\n\nassert solution('''5\n1 1\n2 2\n3 3\n1 3\n2 3\n''') == '11.692745176298984'\n\nassert solution('''5\n0 0\n1 1\n2 3\n1 2\n2 2\n''') == '7.656854249492381'\n\nassert solution('''5\n-3 -5\n-4 -2\n-1 -2\n1 -4\n2 2\n''') == '11.692745176298984'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([6, 1, 2, 3, 3, 2, 1]) == \"7.656854249492381\"\nassert solution([6, 2, 4, 2, 1]) == \"7.656854249492381\"\n\n\"\"\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n\") == \"7.656854249492381\"\nassert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n\") == \"7.656854249492381\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '7.656854249492381'\nassert solution('1') == '7.656854249492381'\nassert solution('10') == '78.8472088872365'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\nprint(solution(input()))\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2 1\") == \"2.000000000000032\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2 3\\n3 2\\n2 1\\n') == '7.656854249492381'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n\") == \"2\"\n\"\"\"\n\nfrom itertools import combinations\n\nn, m, k = map(int, input().split())\n\nold_post_list = []\nnew_post_list = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    old_post_list.append([x, y])\n\nfor _ in range(k):\n    a, b = map(int, input().split())\n    new_post_list.append([a, b])\n\nall_post_list = old_post_list + new_post_list\nall_post_list.sort()\n\ncombinations_list = list(combinations(all_post_list, n))\n\ncombinations_list.sort(key = lambda x : x[0])\n\nsum = 0\nfor c in combinations_list:\n    temp_new_list = []\n    for p in c:\n        if p[0] in temp_new_list:\n            break\n        else:\n            temp_new_list.append(p[0])\n    \n    if len(temp_new_list) == n:\n        sum += 1\n\nprint(sum)"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '4', \"should be 4\"\nassert solution('3 4 1 3') == '2', \"should be 2\"\nassert solution
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 5 3\") == \"2\"\nassert solution(\"2 5 3\") == \"3\""
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n4\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0''') == '2'\nassert solution('''5 6 3\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '4'\nassert solution('''5 1 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0''') == '2'\nassert solution('''5 5 6\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '6'\nassert solution('''5 7 6\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '4'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == \"2\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\nassert solution(stdin='''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\nassert solution(stdin='''\n100 100 100\n4 2 2\n5 7 3\n4 4 2\n5 3 2\n4 4 4\n4 3 3\n''') == '6'\nassert solution(stdin='''\n100 100 100\n4 3 2\n5 7 3\n4 4 4\n4 3 3\n''') == '2'\nassert solution(stdin='''\n100 100 100\n2 2 2\n2 2\n2 2\n2 2\n''') == '3'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5 4\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == \"2\"\n\nassert solution('''\n3 5 3\n0 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == \"2\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 5 3\") == \"2\"\nassert solution(\"5 5 3\") == \"1\"\nassert solution(\"1 2 2\") == \"0\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '9'\nassert solution('2 2') == '9'\nassert solution('3 3') == '6'\nassert solution('4 4') == '3'\nassert solution('5 5') == '2'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"9\"\nassert solution(\"2 1\") == \"9\"\nassert solution(\"1 2\") == \"9\"\nassert solution(\"2 2\") == \"9\"\nassert solution(\"1 3\") == \"9\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"9\"\nassert solution(\"10 10\") == \"2\"\nassert solution(\"2 5\") == \"2\"\n\"\"\""
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1 1\") == \"9\"\nassert solution(\n    \"2 1\") == \"9\"\n\nassert solution(\n    \"2 2\") == \"6\"\nassert solution(\n    \"3 3\") == \"6\"\n\nassert solution(\n    \"3 4\") == \"6\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"9\""
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"2 1\") == \"9\"\nassert solution(\"2 1 2\") == \"9\"\nassert solution(\"2 3 2 4 1\") == \"9\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\nprint(solution(__import__('sys').stdin.read()))"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"9\""
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1') == '9'\nassert solution('1 2') == '1'\nassert solution('1 1') == '1'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '9'\nassert solution('2 6') == '0'"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == ''\nassert solution('2') == '4'\nassert solution('3') == '5'\nassert solution('5') == '7'\nassert solution('7') == '13'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2\n3\n5\n7\n12''') == '12'\nassert solution('''5\n3\n3\n5\n7\n12''') == '12'\nassert solution('''5\n2\n3\n4\n7\n12''') == '12'\nassert solution('''5\n3\n3\n4\n7\n12''') == '12'\nassert solution('''5\n2\n3\n4\n7\n12''') == '12'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\", \"Test #1 (stdin): Correct answer\"\nassert solution(\"3\") == \"\", \"Test #2 (stdin): Correct answer\"\nassert solution(\"2\") == \"\", \"Test #3 (stdin): Correct answer\"\nassert solution(\"5\") == \"\", \"Test #4 (stdin): Correct answer\"\nassert solution(\"7\") == \"\", \"Test #5 (stdin): Correct answer\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == ''\nassert solution('3') == '2'\nassert solution('5') == '5'\nassert solution('7') == '12'\nassert solution('12') == '12'\n\"\"\""
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n2\\n3\\n5\\n7') == '12'\nassert solution('5\\n2\\n3\\n5\\n7') == '12'\nassert solution('5\\n2\\n3\\n5\\n7') == '12'\nassert solution('5\\n2\\n3\\n5\\n7') == '12'\nassert solution('5\\n2\\n3\\n5\\n7') == '12'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n5\\n7\\n12') == '12'\nassert solution('1\\n2\\n3\\n5\\n7\\n12') == ''\nassert solution('1\\n3\\n5\\n7\\n12') == '12'\nassert solution('1\\n3\\n5\\n7\\n12') == ''\nassert solution('1\\n2\\n3\\n5\\n7\\n12') == ''\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"6\"\nassert solution(\"7\") == \"8\"\nassert solution(\"12\") == \"14\""
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n-4\n-3\n-2\n\"\"\") == \"-2\"\nassert solution(\"\"\"\n5\n1\n2\n1\n0\n5\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5\n0\n-2\n1\n1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2\\n3\\n5\\n7\\n12\") == \"12\"\nassert solution(\"4\\n2\\n7\\n5\\n9\\n12\") == \"12\"\nassert solution(\"2\\n3\\n5\\n7\\n9\\n12\") == \"12\"\nassert solution(\"5\\n-1\\n-1\\n-1\\n-1\\n-1\") == \"\"\nassert solution(\"10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2\n3\n5\n7\n12\n''') == '12'\nassert solution('''\n3\n2\n3\n5\n7\n12\n''') == '12'\nassert solution('''\n10\n2\n3\n5\n7\n12\n19\n25\n31\n39\n47\n55\n''') == '31'\n'''\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n00\\n01\\n10\\n110\\n111') == '11'\nassert solution('5\\n11\\n00\\n01\\n10\\n110\\n111') == '11'\nassert solution('2\\n00\\n01\\n10\\n111') == '-1'\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import permutations\nimport bisect\nfrom functools import reduce\nfrom typing import Tuple, List\nfrom unittest.mock import MagicMock\nfrom collections import deque"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '5\\n'\n    '00\\n'\n    '01\\n'\n    '10\\n'\n    '110\\n'\n    '111\\n'\n) == '110'\n\nassert solution(\n    '1\\n'\n    '1\\n'\n    '1\\n'\n    '1\\n'\n    '1\\n'\n    '1\\n'\n) == '1'\n\nassert solution(\n    '2\\n'\n    '00\\n'\n    '01\\n'\n    '10\\n'\n    '111\\n'\n) == '10'\n\nassert solution(\n    '3\\n'\n    '111\\n'\n    '10\\n'\n    '11\\n'\n    '01\\n'\n    '00\\n'\n) == '11'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n00\n01\n10\n110\n111\nSample Input 2:\n4\n10\n00\n11\n01\nSample Output 2:\n11\n''') == \"110\"\n\nassert solution('''\n8\n101\n100\n010\n100\n111\n101\n101\nSample Input 3:\n8\n110\n011\n001\n001\n101\n100\n111\n''') == \"001\"\n\nassert solution('''\n7\n111\n111\n100\n101\n111\n100\n101\n''') == \"111\"\n\nassert solution('''\n8\n011\n011\n100\n111\n101\n101\n111\n111\n''') == \"111\"\n\nassert solution('''\n4\n011\n011\n100\n111\n''') == \"011\""
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n00\n01\n10\n110\n111\n''') == '111'\n\nassert solution('''\n10\n00\n01\n10\n110\n111\n''') == '10'\n\nassert solution('''\n10\n00\n01\n10\n110\n111\n''') == '111'\n\nassert solution('''\n1\n00\n01\n10\n110\n111\n''') == '01'\n\nassert solution('''\n10\n00\n01\n10\n110\n111\n''') == '111'"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''0\n00\n01\n10\n110\n111''') == '111'\n\nassert solution('''5\n00\n01\n10\n110\n111''') == '10'\n\nassert solution('''5\n00\n01\n10\n111\n110''') == '10'\n\nassert solution('''2\n00\n11''') == '11'\n\nassert solution('''3\n00\n01\n10''') == '10'"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n00\n01\n10\n110\n111\n''') == '11', 'Should contain 11'\n\nassert solution('''\n5\n00\n010\n110\n111\n''') == '11', 'Should contain 11'\n\nassert solution('''\n5\n00\n010\n110\n111\n''') == '010', 'Should contain 00'\n\nassert solution('''\n5\n111\n010\n''') == '010', 'Should contain 00'\n\nassert solution('''\n5\n110\n100\n010\n011\n011\n011\n''') == '110', 'Should contain 110'"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '01'\nassert solution('11') == '00'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n00\n01\n10\n110\n111\n''') == '11'\nassert solution('''\n5\n01\n10\n110\n111\n''') == '11'\nassert solution('''\n5\n11\n10\n110\n111\n''') == '11'\nassert solution('''\n5\n01\n10\n110\n111\n''') == '11'\nassert solution('''\n3\n00\n01\n10\n''') == '-1'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n00\n01\n10\n110\n111\nSample Output:\n11\n''') == '110'\n\nassert solution('''\n10\n00\n01\n10\n110\n111\nSample Output:\n11\n''') == '111'\n\nassert solution('''\n1\n01\n''') == '01'\n\nassert solution('''\n100\n11\n01\n10\n110\n111\nSample Output:\n01\n''') == '11'\n\nassert solution('''\n4\n00\n01\n10\n111\nSample Output:\n01\n''') == '10'"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '11'\nassert solution('1000000') == '-1'\nassert solution('00') == '11'\nassert solution('01') == '10'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '20 100'\nassert solution('3') == '100 10'\n\n'''\n\nimport itertools\nimport functools\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n = int(stdin.strip())\n        pairs = map(lambda x: (int(x.split()[0]), int(x.split()[1])), itertools.islice(stdin.strip().splitlines(), 1, n+1))\n\n        @functools.lru_cache(None)\n        def dp(i, j):\n            if i == j:\n                return 0\n            if j == 0:\n                return pairs[i][0]\n            elif j == 1:\n                return min(\n                    pairs[i][0] + pairs[i][1],\n                    dp(i, j-1) + pairs[i][0]\n                )\n            else:\n                return min(\n                    pairs[i][0] + pairs[i][1] + dp(i, j-2),\n                    pairs[i][1] + dp(i, j-1),\n                    dp(i, j-1)\n                )\n\n        return dp(0, n)\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n20 100\\n100 10') == '100 250 320'\nassert solution('1\\n150 50\\n1') == '150 50'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n\nprint('---')\n\nassert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n\nprint('---')\n\nassert solution('''\n1\n10\n2\n2\n''') == '2 2 2'\n\nprint('---')\n\nassert solution('''\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100''') == '100 250 320'\n\nassert solution('''4\n3\n10 100 20\n1 10\n100 3\n10 10''') == '100 150 100'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"100 250 320\"\nassert solution(\"3\") == \"100 250 320\"\nassert solution(\"10\") == \"100 100 100 100 100 100 100 100 100 100\"\nassert solution(\"1\") == \"100\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '120'\nassert solution('1') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n20 100\n100 10\n1\n150 50\n1\n150 100''') == '100 250 320', 'First'\n\nassert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100''') == '100 250 320', 'Second'\n\nassert solution('''\n3\n3\n20 100\n100 10\n100 20\n100 100\n1\n150 50\n1\n150 100''') == '100 250 320', 'Third'"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100''') == '100 250 320'\nassert solution('''\n1\n20 1\n1\n150 50\n1\n150 100''') == '150 100'\nassert solution('''\n5\n5\n10 30 20 40\n15 20 30 40\n40 20 30 20\n30 20 40 20\n40 20 30 20''') == '50 20 40 30 20 30 20 40 40 30 20 40'\nassert solution('''\n5\n5\n10 30 20 40\n15 20 30 40\n40 20 30 20\n30 20 40 20\n40 20 30 20''') == '20 30 20 40 40 30 20 40 40 30 20 40'\nassert solution('''\n6\n5\n10 30 20 40\n15 20 30 40\n40 20 30 20\n30 20 40 20\n40 20 30 20\n30 20 40 20''') == '60 30 20 40 40 30 20 40 40 30 20 40'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '100 200'\nassert solution('5') == '200 200 200 200 200'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2\\n20 100\\n100 10\\n1\\n150 50\\n1\\n150 100') == '100 250 320'\nprint('All tests passed!')\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''100 50''') == '7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\nassert solution('55 112') == '3 8 1 0 1 2 6 0 1 6 8 4 2 8'"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('50 100') == '9 7 4 6 5 7 2 15 2'\nassert solution('52 0') == '5 2 1 1 3 1 2 1 2 3 1 3 2 2 2 3 1 2 1 1 3 1 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2 3 1 3 2 1 1 2 1 3 1 3 2 1 2 2"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2''') == '1 2'\n\n'''"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 0\") == \"0\"\nassert solution(\"10 1\") == \"10\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\nassert solution('-50 100') == '-3 7 4 6 5 7 2 15 2'\nassert solution('100000000') == '10000000'"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\n\"\"\""
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1234') == '3 7 4 6 5 7 2 15 2'\nassert solution('5678') == '2 7 4 6 5 7 2 15 2'\nassert solution('123456789') == '1 2 3 4 5 6 7 8 9 10'"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '40.0000000000'\nassert solution('3') == '80.0000000000'\n\"\"\"\nfrom math import inf\nimport random\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7') == '40.0000000000'\nassert solution('5\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\\n8 7\\n3 5\\n0 7\\n1 1\\n2 2\\n3 3') == '53.0000000000'\nassert solution('1\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\\n8 7\\n3 5\\n0 7\\n1 1\\n2 2\\n3 3') == '1.0000000000'"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n0\n10 10\n0\n0\n10 10\n0\n3\n8 3\n4 6\n7 10\n11 7\n4\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"40.0000000000\"\nassert solution(\"\"\"\n10\n0\n10 10\n0\n0\n10 10\n0\n3\n8 3\n4 6\n7 10\n11 7\n4\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"40.0000000000\"\nassert solution(\"\"\"\n2\n0\n10 10\n0\n0\n10 10\n0\n5\n8 3\n4 6\n7 10\n11 7\n4\n8 3\n4 6\n7 10\n11 7\n5\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"18.0000000000\"\nassert solution(\"\"\"\n5\n0\n10 10\n0\n0\n10 10\n0\n5\n8 3\n4 6\n7 10\n11 7\n4\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"18.0000000000\"\nassert solution(\"\"\"\n4\n0\n0\n10 10\n0\n0\n10 10\n0\n5\n8 3\n4 6\n7 10\n11 7\n4\n8 3\n4 6\n7 10\n11 7\n5\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"2.0000000000\""
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n0 0\n0 14\n15 14\n\"\"\") == \"40.0000000000\", 'First'\nassert solution(\"\"\"\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"40.0000000000\", 'Second'\nassert solution(\"\"\"\n1\n0 0\n0 1\n0 1\n0 0\n\"\"\") == \"1.0\", 'Third'\nassert solution(\"\"\"\n2\n0 0\n0 1\n0 1\n0 0\n\"\"\") == \"2.5\", 'Fourth'\nassert solution(\"\"\"\n3\n0 0\n0 1\n0 1\n0 0\n\"\"\") == \"5.0\", 'Fifth'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0.0000000000'\nassert solution('10') == '42.0000000000'\nassert solution('3') == '1.0000000000'\nassert solution('4') == '2.0000000000'\nassert solution('7') == '2.50000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1\n0\n1\n4\n8 3\n4 6\n7 10\n11 7\n''') == '40.0000000000'\nassert solution('''\n2\n-1\n0\n1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0.0000000000\"\nprint(solution(\"2\"))\n\n\"\"\"\nfrom math import *"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == '40.0000000000'\nassert solution('''\n3\n-2 -1\n-1 2\n-1 -2\n''') == '2.0'\nassert solution('''\n3\n-2 -1\n-1 2\n-1 -2\n''') == '4.0'\nassert solution('''\n3\n1 1\n1 0\n0 0\n''') == '0.0'\nassert solution('''\n4\n-2 -1\n-1 2\n-1 -2\n''') == '10.0'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\\n') == '40.0000000000'"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1.0000000000'\nassert solution('5') == '4.9999976168'\nassert solution('100') == '99.0000000000'\nassert solution('123') == '-0.0000000000'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3') == '1'\n\n\"\"\""
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('3') == '2'\n\nsample = ['1', '2', '3']\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2 1 3\n1 2 4\n3 4 1\n''') == '2 1'\nassert solution('''\n3\n1 1 3\n2 2 1\n2 1 2\n3 3 4\n3 4 2\n4 2 3\n''') == '1 1 2 2 3 3 4'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n2 1 3\n3 1 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n1 3 3\n1 2 3\n1 3 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n1 2 3 1\n3 2 3 2\n3 1 3 3\n3 2 3 1\n\"\"\") == \"3\"\n\nprint('Congratulations, have a nice day!')"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3\\n2 1 3') == '1'\nassert solution('1\\n3\\n1 3 1') == '1'\nassert solution('1\\n4\\n1 3 2 4') == '2'\nassert solution('1\\n5\\n1 3 2 4 5') == '1'\nassert solution('1\\n7\\n1 3 2 4 5 6 7') == '1'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3\\n2 1 3\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"3\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\nassert solution('''\n3\n2 1 3\n''') == '1'\nassert solution('''\n3\n2 2 2\n''') == '1'\n\nassert solution('''\n1\n1 1\n''') == '0'\nassert solution('''\n1\n2 2\n''') == '0'"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 1 3\\n') == '1'\nassert solution('1\\n3 1 3\\n') == '1'\nassert solution('1\\n2 1 3\\n') == '1'\nassert solution('1\\n2 1 3\\n') == '2'\nassert solution('1\\n3 1 3\\n') == '2'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 1 3\n''') == '1'\nassert solution('''\n10\n10 10 10 10 10 10 10 10 10 10\n2 5 5 5 5 5 5 5 5 5 5\n''') == '3'\nprint('You are a photo photographer and your task is to help find the photo you are looking for.\\n')\nprint('You are looking for a family photo with you and your favorite relatives Alice and Bob.\\n')\nprint('Each family photo contains a line-up of $n$ people.\\n')\nprint('On the photo you are looking for, you remember that Alice, who is taller than you, was somewhere on your left from the perspective of the photographer. Also, Bob who is taller than both you and Alice, was standing somewhere on your right.\\n')\nprint('Since you have a large number of family photos, you want to use your computer to assist in finding the photo.\\n')\nprint('Many of the photos are quite blurry, so facial recognition has proven ineffective.\\n')\nprint('However, the Batch Apex Photo Classifier, which detects each person in a photo and outputs the sequence of their (distinct) heights in pixels, has produced excellent results.\\n')\nprint('Given this sequence of heights for $k$ photos, determine which of these photos could potentially be the photo you are looking for.\\n')\nprint('-----Input-----')\nprint('The first line contains $1\\leq k\\leq 1000$, the number of photos you have to process.')\nprint('The second line contains a single integer $3 \\leq n \\leq 3\\cdot 10^5$, the number of people on this photo.')\nprint('The third line contains $n$ distinct integers $1\\leq h_1, \\dots, h_ n \\leq 10^9$, the heights of the people in the photo, from left to right.')\nprint('-----Output-----')\nprint('1')\nprint('The first line contains a single integer $1\\leq a_ i \\leq n$, the sorted indices of the photos you need to look at.')\nprint('0')\nprint('2')\nprint('2')\nprint('3')\nprint('4')\nprint('5')\nprint('6')\nprint('7')\nprint('8')\nprint('9')\nprint('10')\nprint('11')\nprint('12')\nprint('13')\nprint('14')\nprint('15')\nprint('16')\nprint('17')\nprint('18')\nprint('19')\nprint('20')\nprint('21')\nprint('22')\nprint('23')\nprint('24')\nprint('25')\nprint('26')\nprint('27')\nprint('28')\nprint('29')\nprint('30')\nprint('31')\nprint('32')\nprint('33')\nprint('34')\nprint('35')\nprint('36')\nprint('37')\nprint('38')\nprint('39')\nprint('40')\nprint('41')\nprint('42')\nprint('43')\nprint('44')\nprint('45')\nprint('46')\nprint('47')\nprint('48')\nprint('49')\nprint('50')\nprint('51')\nprint('52')\nprint('53')\nprint('54')\nprint('55')\nprint('56')\nprint('57')\nprint('58')\nprint('59')\nprint('60')\nprint('61')\nprint('62')\nprint('63')\nprint('64')\nprint('65')\nprint('66')\nprint('67')\nprint('68')\nprint('69')\nprint('70')\nprint('71')\nprint('72')\nprint('73')\nprint('74')\nprint('75')\nprint('76')\nprint('77')\nprint('78')\nprint('79')\nprint('80')\nprint('81')\nprint('82')\nprint('83')\nprint('84')\nprint('85')\nprint('86')\nprint('87')\nprint('88')\nprint('89')\nprint('90')\nprint('91')\nprint('92')\nprint('93')\nprint('94')\nprint('95')\nprint('96')\nprint('97')\nprint('98')\nprint('99')\nprint('100')\nprint('101')\nprint('102')\nprint('103')\nprint('104')\nprint('105')\nprint('106')\nprint('107')\nprint('108')\nprint('109')\nprint('110')\nprint('111')\nprint('112')\nprint('113')\nprint('114')\nprint('115')\nprint('116')\nprint('117')\nprint('118')\nprint('119')\nprint('120')\nprint('121')\nprint('122')\nprint('123')\nprint('124')\nprint('125')\nprint('126')\nprint('127')\nprint('128')\nprint('129')\nprint('130')\nprint('131')\nprint('132')\nprint('133')\nprint('134')\nprint('135')\nprint('136')\nprint('137')\nprint('138')\nprint('139')\nprint('140')\nprint('141')\nprint('142')\nprint('143')\nprint('144')\nprint('145')\nprint('146')\nprint('147')\nprint('148')\nprint('149')\nprint('150')\nprint('151')\nprint('152')\nprint('153')\nprint('154')\nprint('155')\nprint('156')\nprint('157')\nprint('158')\nprint('159')\nprint('160')\nprint('161')\nprint('162')\nprint('163')\nprint('164')\nprint('165')\nprint('166')\nprint('167')\nprint('168')\nprint('169')\nprint('170')\nprint('171')\nprint('172')\nprint('173')\nprint('174')\nprint('175')\nprint('176')\nprint('177')\nprint('178')\nprint('179')\nprint('180')\nprint('181')\nprint('182')\nprint('183')\nprint('184')\nprint('185')\nprint('186')\nprint('187')\nprint('188')\nprint('189')\nprint('190')\nprint('191')\nprint('192')\nprint('193')\nprint('194')\nprint('195')\nprint('196')\nprint('197')\nprint('198')\nprint('199')\nprint('200')\nprint('201')\nprint('202')\nprint('203')\nprint('204')\nprint('205')\nprint('206')\nprint('207')\nprint('208')\nprint('209')\nprint('210')\nprint('211')\nprint('212')\nprint('213')\nprint('214')\nprint('215')\nprint('216')\nprint('217')\nprint('218')\nprint('219')\nprint('220')\nprint('221')\nprint('222')\nprint('223')"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n1 1\n1 2\n1 3\n2\n2 1\n2 2\n2 3\n3\n3 1\n3 2\n3 3\n4\n4 1\n4 2\n4 3\n4 4\n''') == '1'\nassert solution('''\n1\n2 3\n3\n4\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n100 101\n101 102\n102 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 122\n122 123\n123 124\n124 125\n125 126\n126 127\n127 128\n128 129\n129 130\n130 131\n131 132\n132 133\n133 134\n134 135\n135 136\n136 137\n137 138\n138 139\n139 140\n140 141\n141 142\n142 143\n143 144\n144 145\n145 146\n146 147\n147 148\n148 149\n149 150\n150 151\n151 152\n152 153\n153 154\n154 155\n155 156\n156 157\n157 158\n158 159\n159 160\n160 161\n161 162\n162 163\n163 164\n164 165\n165 166\n166 167\n167 168\n168 169\n169 170\n170 171\n171 172\n172 173\n173 174\n174 175\n175 176\n176 177\n177 178\n178 179\n179 180\n180 181\n181 182\n182 183\n183 184\n184 185\n185 186\n186 187\n187 188\n188 189\n189 190\n190 191\n191 192\n192 193\n193 194\n194 195\n195 196\n196 197\n197 198\n198 199\n199 200\n200 201\n201 202\n202 203\n203 204\n204 205\n204 206\n206 207\n207 208\n208 209\n209 210\n210 211\n211 212\n212 213\n213 214\n214 215\n215 216\n216 217\n217 218\n218 219\n219 220\n220 221\n221 222\n222 223\n223 224\n224 225\n224 226\n225 227\n227 228\n228 229\n229 230\n230 231\n231 232\n232 233\n233 234\n234 235\n235 236\n236 237\n237 238\n238 239\n239 240\n240 241\n241 242\n242 243\n243 244\n244 245\n245 246\n246 247\n247 248\n248 249\n249 250\n250 251\n251 252\n252 253\n253 254\n254 255\n255 256\n256 257\n257 258\n258 259\n259 260\n260 261\n261 262\n262 263\n263 264\n264 265\n265 266\n266 267\n267 268\n268 269\n269 270\n270 271\n271 272\n272 273\n273 274\n274 275\n275 276\n276 277\n277 278\n278 279\n279 280\n280 281\n281 282\n282 283\n283 284\n284 285\n285 286\n286 287\n287 288\n288 289\n289 290\n290 291\n291 292\n292 293\n293 294\n294 295\n295 296\n296 297\n297 298\n298 299\n299 300\n300 301\n301 302\n302 303\n303 304\n304 305\n305 306\n306 307\n307 308\n308 309\n309 310\n310 311\n311 312\n312 313\n313 314\n314 315\n315 316\n316 317\n317 318\n318 319\n319 320\n320 321\n321 322\n322 323\n323 324\n324 325\n325 326\n326 327\n327 328\n328 329\n329 330\n330 331\n331 332\n332 333\n333 334\n334 335\n335 336\n336 337\n337 338\n338 339\n339 340\n340 341\n341 342\n342 343\n343 344\n344 345\n345 346\n346 347\n347 348\n348 349\n349 350\n350 351\n351 352\n352 353\n353 354\n354 355\n355 356\n356 357\n357 358\n358 359\n359 360\n360 361\n361 362\n362 363\n363 364\n364 365\n365 366\n366 367\n367 368\n368 369\n369 370\n370 371\n371 372\n372 373\n373 374\n374 375\n375 376\n376 377\n377 378\n378 379\n379 380\n380 381\n381 382\n382 383\n383 384\n384 385\n385 386\n386 387\n387 388\n388 389\n389 390\n390 391\n391 392\n392 393\n393 394\n394 395\n395 396\n396 397\n397 398\n398 399\n399 400\n400 401\n401 402\n402 403\n403 404\n404 405\n405 406\n406 407\n407 408\n408 409\n409 410\n410 411\n411 412\n412 413\n413 414\n414 415\n415 416\n416 417\n417 418\n418 419\n419 420\n420 421\n421 422\n422 423\n423 424\n424 425\n425 426\n426 427\n427 428\n428 429\n429 430\n430 431\n431 432\n432 433\n433 434\n434 435\n435 436\n436 437\n437 438\n438 439\n439 440\n440 441\n441 442\n442 443\n443 444\n444 445\n445 446\n446 447\n447 448\n448 449\n449 450\n450 451\n451 452\n452 453\n453 454\n454 455\n455 456\n456 457\n457 458\n458 459\n459 460\n460 461\n461 462\n462 463\n463 464\n464 465\n464 466\n465 467\n466 468\n467 469\n468 470\n469 471\n470 472\n471 473\n472 474\n473 475\n474 476\n475 477\n476 478\n477 479\n478 480\n479 481\n480 482\n481 483\n482 484\n484 485\n485 486\n486 487\n487 488\n488 489\n489 490\n490 491\n491 492\n492 493\n493 494\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n24.38 1.51 2.58\n''') == '199 162'\nassert solution('''\n0 0 0\n''') == 'none'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '199 162'"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    12.69 1.51 4.01\n''') == '199 162'\n\nassert solution('''\n    10.89 1.10 2.03\n''') == 'None'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''p=175.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=400.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=600.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=300.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=500.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=500.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=400.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=400.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=600.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=600.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=400.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=300.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=200.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4.00,t2=4.00\np=100.00,p1=100.00,p2=100.00\nc=2.00,c1=3.00,c2=3.00\nt=4.00,t1=4"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'\nassert solution('0.05 3.14 4.83 1.42 1.82 3.80 4.95 0.05 0.05 0.05') == 'None'\nprint('You are all set!')"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"0.76 0.53 3.15\") == \"168 98\"\nassert solution(\"0.14 1.49 4.99\") == \"21 2\"\nassert solution(\"0.19 0.00 0.12\") == \"None\"\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0.1 1.0\") == \"none\"\nassert solution(\"50.0 0.1\") == \"199 162\"\nassert solution(\"20.0 1.0\") == \"250 162\"\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6.8 1.71 5.0') == '2 162'\nprint(solution(input()))\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1\") == \"199 162\"\nassert solution(\"3.45 3.4 2.0\") == \"199 162\"\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0.45 1.71 2.38') == '199 162'\nassert solution('0.00 0.00 1.00 2.00') == 'None'\nassert solution('1.00 2.00 3.00 0.00 0.00 3.00 2.00 0.00 0.00 0.00 2.00 0.00 0.00 2.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == '16'\nassert solution('''\n1 1\n3 3\n3 3\n0 2''') == '19'\nprint('all tests passed')"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n3 -1 -1\\n2 1 2\\n3 0 3\\n1 3 3\\n\") == \"16\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\\n') == '16'\nprint('OK')"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('5 3') == '2'\nassert solution('10 4') == '6'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0') == \"16\"\nassert solution('10\\n100 100 100\\n10 10 10\\n10 10 10\\n10 10 10\\n10 10 10\\n10 10 10\\n10 10 10\\n10 10 10') == \"160\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"16\"\ninput_ = \"\"\"\n3 1\n-1 2 1\n2 1 -1\n3 2 -1\n\"\"\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '16'\nassert solution('7 5') == '35'\nassert solution('10 3') == '25'\nassert solution('10 3') == '35'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0') == '16'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"16\"\nassert solution(\"10 4\") == \"21\"\nassert solution(\"100 3\") == \"735\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\") == \"16\"\nassert solution(\"6 3\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\") == \"14\"\nassert solution(\"10 1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\") == \"0\"\nassert solution(\"6 2\\n-1 -1\\n-1 -1\") == \"14\""
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\nO 4\\n') == '2 1 4'\nassert solution('2\\nE 4\\n') == '2 2 4'\nassert solution('2\\nO 8\\n') == '2 2 8'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('O 1') == '1 1 1'\nassert solution('E 3') == '2 2 3'\nassert solution('I 2') == '2 2 2'"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4') == '1 2 4'\nassert solution('1 1 1') == '2 2 1'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\nO 4\\n') == '2 1 4'\nassert solution('2\\nE 4\\n') == '2 1 4'\nassert solution('3\\nI 4\\n') == '1 1 1'\nassert solution('4\\nO 4\\n') == '2 1 4'\nassert solution('5\\nE 4\\n') == '1 1 1'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1 2 3'\nassert solution('3') == '1 1 2'\nassert solution('6') == '1 1 1 1 1 1'"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\nO 4\\n') == '2 1 4'\nassert solution('2\\nO 4\\n') == '1 2 4'\nassert solution('3\\nO 4\\n') == '2 2 2'\nassert solution('4\\nO 4\\n') == '1 1 1'\nassert solution('5\\nO 4\\n') == '2 2 2'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('O 6') == '3 1 5'\n\nassert solution('I 5') == '4 1 6'\n\nassert solution('E 5') == '1 2 5'\n\n\"\"\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\nO 5\\nE 7\\nI 9\\nO 5\\nE 8\\nI 10\\nE 9\\nI 8\\nI 10\\nE 8\\nI 7\\nE 7\\nI 6\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nO 1\\nE 3\\nI 8\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 8\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nO 7\\nE 7\\nI 6\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 6\\nI 10\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nO 5\\nE 8\\nI 7\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 5\\nI 10\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nO 4\\nE 8\\nI 7\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 4\\nI 10\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 3\\nE 7\\nI 6\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 3\\nE 7\\nI 6\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 3\\nE 7\\nI 6\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 2\\nE 8\\nI 7\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 2\\nE 8\\nI 7\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 2\\nE 8\\nI 7\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 2\\nE 8\\nI 7\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 1\\nE 3\\nI 8\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 1\\nE 3\\nI 8\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 1\\nE 3\\nI 8\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 8\\nE 7\\nI 6\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 7\\nE 7\\nI 6\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 7\\nE 7\\nI 6\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 6\\nI 10\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 5\\nE 8\\nI 7\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 5\\nE 8\\nI 7\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 4\\nE 8\\nI 7\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 4\\nE 8\\nI 7\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 3\\nE 7\\nI 6\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 3\\nE 7\\nI 6\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 2\\nE 8\\nI 7\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 2\\nE 8\\nI 7\\nI 9\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 1\\nE 3\\nI 8\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 1\\nE 3\\nI 8\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 1\\nE 3\\nI 8\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 1\\nE 3\\nI 8\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10\\nI 7\\nO 1\\nE 3\\nI 8\\nI 8\\nI 10\\nI 9\\nI 8\\nI 10"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\nO 4\") == \"2 1 4\"\nassert solution(\"1\\nE 4\") == \"4 1 2\"\nassert solution(\"1\\nI 4\") == \"4 1 1\"\nassert solution(\"1\\nO 1\") == \"1 2 1\""
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\nO 7\nE 2\nI 5\nE 6\nI 4\nO 3\n''') == '2 1 4'"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"2 2\") == \"2\""
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 4 5\") == \"4\"\nassert solution(\"5 1 12 4\") == \"5\"\nassert solution(\"5 5 9 10\") == \"7\"\nassert solution(\"1 6 4 10\") == \"11\"\nassert solution(\"2 11 7 14\") == \"13\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    5 8\n    2 1 4 5\n    5 5 9 10\n    1 6 4 10\n    2 11 7 14\n    \"\"\"\n) == \"4\"\nassert solution(\n    \"\"\"\n    5 8\n    2 1 4 5\n    5 5 9 10\n    1 6 4 10\n    2 11 7 14\n    \"\"\"\n) == \"7\"\nassert solution(\n    \"\"\"\n    5 8\n    2 1 4 5\n    5 5 9 10\n    1 6 4 10\n    2 11 7 14\n    \"\"\"\n) == \"8\"\nassert solution(\n    \"\"\"\n    3 2\n    3 3\n    \"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"\n    2 2\n    5 2\n    \"\"\"\n) == \"0\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14''') == '4'\nassert solution('''4 1\n3 2\n1 3\n4 5\n1 6''') == '3'\nassert solution('''3 1\n2 2\n1 3''') == '3'\n''')\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14') == '4'\nassert solution('10 8\\n1 1 2 3 4\\n5 5 6 7 8\\n9 9 9 9 9\\n10 10 10 10 10\\n9 8 9 9 9\\n9 6 5 9 10\\n10 9 10 10 10\\n8 8 9 9 9\\n8 7 6 9 10\\n9 6 5 9 10\\n10 9 10 10 10') == '10'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 4 5') == '4', solution('2 1 4 5')\nassert solution('5 1 12 4') == '3', solution('5 1 12 4')\nassert solution('5 5 9 10') == '2', solution('5 5 9 10')\nassert solution('1 6 4 10') == '1', solution('1 6 4 10')\nassert solution('2 11 7 14') == '2', solution('2 11 7 14')\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 6 4 10\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('5 1 12 4') == '4'\nassert solution('5 5 9 10') == '5'\nassert solution('1 6 4 10') == '4'\nassert solution('2 11 7 14') == '3'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 8') == '4'\nassert solution('5 1 12 4') == '2'\nassert solution('5 5 9 10') == '1'\nassert solution('1 6 4 10') == '6'\nassert solution('2 11 7 14') == '7'\n\"\"\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\nassert solution('1 1 1 1 1') == '1.0000'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"9.585073\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 99 9') == '9.585073'\nassert solution('99 99 99 9') == '9.585073'\nassert solution('99 99 99 9') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n\"\"\"\n) == \"9.585073\"\nprint(solution(\n\"\"\"\n-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n\"\"\"\n))\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"99 9 999 9999\") == \"9.585073\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"99 9 999 9999\") == \"9.585073\"\nprint(solution(\"99 9 999 9999\"))"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"99 9 999 9999\") == \"7.563557\"\nassert solution(\"9 99 9 99 9\") == \"7.366909\""
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n''') == '9.585073'\nassert solution('''\n-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 999 9\n''') == '9.585073'\n''')\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n''') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.188817'\nassert solution('9 99 9 99 9') == '1.777565'\nassert solution('99 9 999 9999') == '1.130502'\n\n=====\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 30') == '12.74 127.83'\nassert solution('3 10 20 2 24 18 28 10') == '16.50 157.12'\nprint(solution(input()))\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"\n20 30\n2 10 20 2 24 18 28 10\n\"\"\") == \"12.74 127.83\"\nassert solution(r\"\"\"\n20 30\n2 10 20 2 24 18 28 10\n\"\"\") == \"impossible\"\nassert solution(r\"\"\"\n100 100\n1 3 3 3 3 3 3\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n20 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83'\nprint(solution('''\n20 30\n2 10 20 2 24 18 28 10\n'''))\n\nimport math\n\nw, l = map(int, input().split())\n\nh, x1, y1, x2, y2, x3, y3, r = map(int, input().split())"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 10 20 2 24 18 28 10\") == \"12.74 127.83\"\nassert solution(\"4 6 24 4 10 20 2 30\") == \"16.74 16.74\"\nassert solution(\"4 5 1 2 1 1 1 1\") == \"impossible\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '12.74 127.83'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n20 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83'\nassert solution('''\n10 20\n1 1 1 1 1 1 1 1\n''') == 'impossible'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n20 30\n2 10 20 2 24 18 28 10\n\"\"\") == \"12.74 127.83\"\nassert solution(\n\"\"\"\n20 30\n2 10 20 2 24 18 28 10\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('4') == 'impossible'"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n2 1\\n2 2\\n2 3\\n3 3\\n3 1\\n1 2\\n1 3\\n\") == \"impossible\"\nassert solution(\"2 4\\n3 3\\n1 3\\n4 4\\n\") == \"14.32\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n20 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83\n\nassert solution('''\n50 30\n2 20 3 2 26 8 10\n''') == 'impossible'\n\nassert solution('''\n90 30\n3 10 4 3 18\n''') == '34.27 8.67'\n\nassert solution('''\n100 30\n2 3 2 3 26 8 10\n''') == 'impossible'\n\nassert solution('''\n50 60\n2 10 20 2 24 18 28 10\n''') == 'impossible'"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n110\\n') == '0116'\nassert solution('2\\n') == ''\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n6\\n\") == \"0116\"\nassert solution(\"3\\n3\\n1\\n\") == \"6111\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n110\n''') == '0116'\nassert solution('''\n2\n100\n''') == '00110'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n110\n6\n\"\"\") == \"0116\"\nassert solution(\"\"\"\n10\n2\n1\n0\n5\n8\n\"\"\") == \"005100\"\nassert solution(\"\"\"\n5\n110\n110\n6\n7\n\"\"\") == \"006700\"\nassert solution(\"\"\"\n2\n111\n11\n\"\"\") == \"1101\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.read()"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('\\n'.join([\"1\", \"2\", \"3\", \"4\", \"5\"])) == \"0124\"\nassert solution('\\n'.join([\"3\", \"1\", \"2\"])) == \"032\"\nassert solution('\\n'.join([\"4\", \"1\", \"3\", \"2\"])) == \"0241\"\nassert solution('\\n'.join([\"8\", \"1\", \"2\", \"3\"])) == \"0723\"\nassert solution('\\n'.join([\"8\", \"3\", \"1\", \"2\"])) == \"0731\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n110\\n6') == '0116'\nassert solution('6\\n110\\n2') == '01610'\nassert solution('6\\n1110\\n2') == '012110'\nassert solution('6\\n110\\n10') == '110'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n6\n''') == '016'\nassert solution('''\n3\n10\n''') == '0110'\nassert solution('''\n5\n1\n2\n''') == '1221'\nassert solution('''\n1\n10\n''') == '0110'\nassert solution('''\n4\n1\n2\n3\n4\n''') == '1234'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0116'\nassert solution('''\n110\n6\n''') == '0116'\nassert solution('''\n999\n9\n''') == '9999'\nassert solution('''\n999\n9999\n''') == '999999999'\nassert solution('''\n999\n9999\n9999\n9999\n''') == '99999999999'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n0\\n\") == \"0110\"\nassert solution(\"2\\n1\\n0\\n\") == \"0110\"\nassert solution(\"4\\n1\\n2\\n3\\n\") == \"0131\"\nassert solution(\"3\\n0\\n2\\n1\\n\") == \"0132\"\nassert solution(\"8\\n6\\n9\\n0\\n1\\n4\\n7\\n2\\n3\\n\") == \"0140\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '0 1 2'\nassert solution('1 1') == '0 1 2'\nassert solution('1 1 1') == '0 1 2'\nassert solution('2') == '0 1 2'\nassert solution('1 1 2') == '0 1 2'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 3') == '0 2 4'"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"1 1 0\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"0 1 2\"\nassert solution(\"6 1\") == \"1 3 5\"\nassert solution(\"8 3\") == \"0 3 1\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"0 1\"\n\nassert solution(\"2 2\") == \"0 1\"\n\nassert solution(\"8 3\") == \"0 2 4\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"0 2 4\"\nassert solution(\"20 10\") == \"1 5 4\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"0 1 2\"\nassert solution(\"4 4\") == \"0 1 2\"\nassert solution(\"3 3\") == \"0 1 1\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(s) == '0 2 4'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3') == '0 2 4'\nassert solution('10 5') == '0 2 4 6 8 10'"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n5 3\\n0 1 1\\n\") == \"0 1 2 4\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\nassert solution('''\n4\n4\n1 2 3\n2 3 4\n3 4 1\n''') == 'possible'\nassert solution('''\n4\n5\n1 2 4\n2 3 4\n3 4 1\n4 5 1\n''') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n9\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\") == \"impossible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n4\n3\n1 1 1 1\n2 1 2 2\n3 1 2 3\n3 1 3 3\n\"\"\") == \"impossible\""
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"impossible\"\nassert solution(\"5\") == \"impossible\"\nassert solution(\"10\") == \"impossible\"\nassert solution(\"15\") == \"possible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\\n') == 'impossible'\nprint(solution(input()))\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\\n') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('7') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5''') == 'impossible'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''\n1\n0 0\n0 10\n2\n4 10\n4 0\n    ''') == '4.00000'\nassert solution(\n    '''\n5\n0 0\n0 10\n2\n4 10\n4 0\n    ''') == 'impossible'\nassert solution(\n    '''\n1\n0 0\n0 10\n2\n    ''') == 'impossible'\nassert solution(\n    '''\n1\n0 0\n0 10\n2\n    ''') == 'impossible'\nassert solution(\n    '''\n0 0\n0 10\n2\n    ''') == 'impossible'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n0 10') == '4.00000'\nassert solution('2\\n4 10\\n4 0') == 'impossible'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n0 0\\n0 10\\n2') == '4.00000'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 0\n0 10\n2\n4 10\n4 0\n''') == '4.00000'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0 0\\n0 10\\n2') == '4.00000'\nassert solution('2\\n0 0\\n0 10\\n2\\n') == 'impossible'"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\nprint('Everything passed!')\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n2\n3\n0 1\n3\n2\n''') == '5.00000'"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 0\n0 10\n2\n''') == '4.00000'\n\nassert solution('''\n3\n0 0\n0 10\n2\n''') == 'Impossible'\n\nassert solution('''\n4\n0 0\n0 10\n2\n0 4\n''') == '3.00000'\n\nassert solution('''\n3\n0 0\n0 10\n2\n''') == 'Impossible'\n\nassert solution('''\n10\n1 0\n1 10\n2\n''') == '9.00000'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 0\\n0 10\\n2\\n4 10\\n4 0\") == \"4.00000\"\n\"\"\"\n\nfrom math import ceil\n\nn = int(input())\n\nfor i in range(n):\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    distance = abs(x1 - x2) + abs(y1 - y2)\n    print(ceil(distance / 2) + 1)\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0 0\\n0 10\\n2') == '2.00000'\nassert solution('2\\n4 10\\n4 0\\n') == 'impossible'\nprint('Congratulations, have a nice day!')"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n') == '1'\nassert solution('5 10 2\\n10 1\\n4 1\\n6 1\\n9 1\\n6 1\\n') == '0'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\nassert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '0'\nprint('Tests passed')\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 5 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == \"0\"\n\nassert solution('''\n4 5 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == \"1\""
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"3 2 5\") == \"1\"\nassert solution(\"5 2 2\") == \"0\"\nassert solution(\"5 5 5\") == \"0\""
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 1\\n1 3\") == \"1\"\nassert solution(\"3 1\\n3 3\") == \"1\"\nassert solution(\"3 2\\n2 2\") == \"1\"\nassert solution(\"3 1\\n2 1\") == \"0\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1', \"First Test Case\"\nassert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '0', \"Second Test Case\"\n'''\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2 5') == '1'\nassert solution('3 2 5') == '0'\nassert solution('3 3 5') == '1'\nassert solution('2 2 5') == '0'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 5') == '1'\nassert solution('1 1') == '0'\nassert solution('1 3') == '1'\nassert solution('3 1') == '1'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 6\") == \"1 0\\n2 4\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '2 4'\n\n---\n\nSample Input:\n8 8\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n4 4\n4 3\n5 5\nSample Output:\n4 3\n1 2\n0 4\n4 3\n1 0\n2 4\n4 3\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\") == \"5 3\\n1 0\\n2 4\\n\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3 3'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '5 3\\n1 0\\n2 4\\n'\n\nassert solution('''4\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '4 2\\n1 3\\n1 4\\n'\n\nassert solution('''1\n0\n''') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '5 6\\n'\n    '0 1\\n'\n    '0 2\\n'\n    '1 3\\n'\n    '2 3\\n'\n    '1 2\\n'\n    '4 3\\n') == '5 3\\n1 0\\n2 4\\n'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '5 3\\n1 0\\n2 4\\n'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 6\") == \"5 3\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n0 1\\n1 2\\n2 3\") == \"3 3\\n1 0\\n2 4\"\nassert solution(\"3 3\\n0 1\\n0 2\\n1 3\\n1 2\\n4 3\") == \"3 3\\n1 0\\n2 4\"\nassert solution(\"5 3\\n0 1\\n1 2\\n2 3\\n3 4\") == \"3 4\\n1 0\\n2 4\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == '5 3 1 0 2 4 3'\nassert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == 'impossible'\nassert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == 'impossible'\nassert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == '5 3 1 0 2 4 3'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n0 0\\n0 1\\n1 0\") == \"2\\n1 2\""
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 1\n0 0\n0 1\n1 0\n1 1''') == '2\\n1 2'''\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '3'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 1\") == \"1 2\"\nassert solution(\"3 1\") == \"1\""
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1') == '2\\n1 2'\nassert solution('2 1\\n0 0\\n1 0') == '1'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"2\\n1 2\"\nassert solution(\"3 3\\n0 1\\n0 0\\n0 1\\n\") == \"2\\n2 1\"\nassert solution(\"2 2\\n0 0\\n0 0\\n\") == \"2\\n1 1\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2 1 2'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"2\\n1 2\"\nassert solution(\"10 1\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n4 0\\n4 1\\n4 2\\n4 3\\n4 4\") == \"3\\n1 2 3\"\nassert solution(\"6 4\\n0 0\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n1 0\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 0\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n3 5\\n3 6\\n4 0\\n4 1\\n4 2\\n4 3\\n4 4\\n4 5\\n4 6\") == \"3\\n1 2 3 4\"\nassert solution(\"8 5\\n0 0\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n1 0\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 0\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n3 5\\n3 6\\n4 0\\n4 1\\n4 2\\n4 3\\n4 4\\n4 5\\n4 6\\n5 0\\n5 1\\n5 2\\n5 3\\n5 4\\n5 6\\n6 0\\n6 1\\n6 2\\n6 3\\n6 4\\n6 5\\n6 6\") == \"3\\n1 2 3 4 5 6\"\nassert solution(\"30 1\\n0 0\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n1 0\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 0\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n3 5\\n3 6\\n4 0\\n4 1\\n4 2\\n4 3\\n4 4\\n4 5\\n4 6\\n5 0\\n5 1\\n5 2\\n5 3\\n5 4\\n5 6\\n6 0\\n6 1\\n6 2\\n6 3\\n6 4\\n6 5\\n6 6\\n7 0\\n7 1\\n7 2\\n7 3\\n7 4\\n7 5\\n7 6\\n7 7\\n8 0\\n8 1\\n8 2\\n8 3\\n8 4\\n8 5\\n8 6\\n8 7\\n8 8\") == \"3\\n1 2 3 4 5 6 7\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1') == '2'\nassert solution('1 1') == '1 2'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"2\\n1 2\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n''') == '1'\nassert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n5 2\n2 3 6 8 12\n''') == '0'\nassert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n5 2\n2 3 6 8 12\n''') == '-1'\nassert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n1 4\n''') == '1'\nassert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n5 2\n5 2\n''') == '-1'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 2\\n1 3 5 7 9 11 13 15 17 16') == '1'\nassert solution('5 2\\n3 4 5 8 11 13 15 17 16') == '0'\nassert solution('10 3\\n5 8 11 13 15 17 16') == '1'\nassert solution('10 4\\n5 8 11 13 15 17 16') == '2'\nassert solution('10 5\\n5 8 11 13 15 17 16') == '3'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 2\\n1 3 5 7 9 11 13 15 17 16\\n') == '1'\nassert solution('10 3\\n1 3 5 7 9 11 13 15 17 16\\n') == '2'\nassert solution('10 4\\n1 3 5 7 9 11 13 15 17 16\\n') == '1'\nassert solution('10 5\\n1 3 5 7 9 11 13 15 17 16\\n') == '2'\nassert solution('10 6\\n1 3 5 7 9 11 13 15 17 16\\n') == '3'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n20 2\n1 3 5 7 9 11 13 15 17 16\n''') == '1'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 2\\n1 3 5 7 9 11 13 15 17 16') == '1'\nassert solution('20 2\\n
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"5 2\") == \"2\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5 6\") == \"1\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n''') == '1'\nassert solution('''\n10 4\n4 4 6 5 8 10 6 4\n''') == '4'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n''') == \"1\"\n\nassert solution('''\n100 20\n51 50 51 52 51 52 53 51 54 51 55 55 55 56 51 56 56 57 51 57 57 58 51 58 58 59 51 59 59 60\n''') == \"2\"\n\nassert solution('''\n50 50\n
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"7 4\"\nassert solution(\"2 2\") == \"1 1\"\nassert solution(\"3 1\") == \"1 1\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n5\n10 9\n8 9\n4 13\n1 10\n7 4\n10 9''') == '7 4'\n\nassert solution('''1\n1\n1\n10 9\n8 9\n4 13\n1 10\n7 4\n10 9''') == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7') == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"7 4\""
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nACDBB\\n') == '1 4'\nassert solution('5\\n5 5\\n5 1\\n3 7\\n') == '1 4'\n\n'''\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\nABB\\n\") == \"A 4\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n5 6\") == \"7 4\"\nassert solution(\"10 10\\n3 3\") == \"6 6\"\n\"\"\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n10 9\n5 6\n8 9\n3 7\n''') == '7 4'\n\"\"\""
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n4 5\n4 2''') == '1 2'\n\nassert solution('''5\n10 9\n5 2\n7 4\n8 3\n6 2''') == '8 4'\n\nassert solution('''7\n4 5\n10 9\n7 4\n8 3\n6 2\n13 9''') == '13 9'\n\nassert solution('''7\n10 9\n5 2\n7 4\n8 3\n6 2\n13 9''') == '13 9'\n\nassert solution('''8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9''') == '5 7'"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n''') == '7 4'"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\nprint('It took {:.3f} seconds to run the test.'.format(time.time() - start_time))\n\"\"\"\nimport sys\nimport os\nfrom io import StringIO\nimport time\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"DONE\"\n\n\"\"\"\n1 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\""
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n10\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"\"\"HELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nHELLO THERE 5\nDONE\n\"\"\"\nassert solution(\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"\"\"HELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nHELLO THERE 5\nDONE\n\"\"\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 LET A = 1\\n10 PRINT \"HELLO THERE \"\\n20 PRINTLN A\\n30 LET A = A + 1\\n40 IF A <= 5 THEN GOTO 20\\n50 PRINTLN A\\n60 PRINTLN \"DONE\"\\n') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\\n\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nprint(solution(input()))\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n3 0 1\n0 1\n''') == '3'\n\nassert solution('''3\n3 0 1\n1 1\n''') == '3'\n\nassert solution('''3\n2 3 1\n1 1\n''') == '1'\n\nassert solution('''5\n1 0 1 0\n0 1\n1 1\n0 0\n0 0\n''') == '1'\n\nassert solution('''7\n5 0 1 0 0 2 1\n0 1 1\n0 1 1\n1 1\n0 0\n0 0\n0 0\n''') == '4'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n3 0 1\n0 1\n''') == '3'\n\nassert solution('''4\n2 2 1\n0 1\n''') == '4'\n\nassert solution('''10\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n''') == '3344'"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n3 0 1\n0 1\nSample Input:\n2\n3 0 1\n0 0\nSample Output:\n2\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3\") == \"3\"\nassert solution(\"3 0 1\") == \"3\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3 0 1\n0 1\n''') == '3'\n\nassert solution('''\n3\n4 0 1\n0 1\n''') == '2'\n\nassert solution('''\n5\n5 0 1 0\n0 1\n''') == '2'\n\nassert solution('''\n6\n5 0 1 0 1\n0 1\n''') == '3'\n\nassert solution('''\n6\n5 0 1 0 1 0\n0 1\n''') == '5'"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3 0 1\n0 1\nSample Input:\n4\n4 5\n5 4\n3 0 1\n0 1\nSample Output:\n6\n''') == '6', 'Should be 6'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n3 0 1\n0 1\n''') == '3'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('3 0 1') == '3'\nassert solution('0 1') == '1'\nassert solution('0 1 0 1') == '2'\nassert solution('3 0 0 0 1') == '4'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n3 0 1\\n0 1') == '3'\nassert solution('3\\n3 0 1\\n1 1') == '4'\nassert solution('3\\n3 0 1\\n0 2') == '2'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRRRRLL'\nassert solution('''\n3\n1 2\n2 3\n2 4\n''') == 'impossible'\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == 'RLRLLRR'\nassert solution('''\n3\n1 2\n2 3\n3 4\n''') == 'RRRLRLR'\nassert solution('''\n1\n1 2\n2 3\n3 4\n''') == 'impossible'\n\n[3, 5, 2, 1, 4, 2, 3]\n3\n1 2\n2 3\n3 4\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n    5\n    1 2\n    2 5\n    2 3\n    1 3\n    3 5\n    4 5\n    3 4\n    1 3\n    '''\n) == 'LLRRRRLL'\nassert solution(\n    '''\n    4\n    1 2\n    3 5\n    4 5\n    3 4\n    1 3\n    '''\n) == 'RRLLLLLL'\nassert solution(\n    '''\n    2\n    1 2\n    2 5\n    1 3\n    '''\n) == 'RRRLRLLL'\nassert solution(\n    '''\n    3\n    1 3\n    3 5\n    4 5\n    1 4\n    '''\n) == 'RRRRLLRRRRLLLLL'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == \"RLRRRLL\"\nassert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == \"RRRRLLL\"\nassert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == \"RLRRRLL\"\nassert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == \"RRRRRLLLL\"\nassert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == \"RRRRRRLLLL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"LLRRRRLL\"\n\"\"\""
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\n    '1 2',\n    '2 5',\n    '2 3',\n    '1 3',\n    '3 5',\n    '4 5',\n    '3 4',\n    '1 3',\n]) == 'RLRRRLL'\nassert solution([\n    '1 2',\n    '2 5',\n    '2 3',\n    '1 3',\n    '3 5',\n    '4 5',\n    '3 4',\n    '1 3',\n    '3 4',\n    '4 5',\n]) == 'RLRRRLL'\nassert solution([\n    '1 2',\n    '2 3',\n    '3 4',\n    '4 5',\n    '5 6',\n    '6 7',\n    '7 8',\n    '8 9',\n    '9 10',\n    '10 11',\n    '11 12',\n    '12 13',\n    '13 14',\n    '14 15',\n    '15 16',\n    '16 17',\n    '17 18',\n    '18 19',\n    '19 20',\n    '20 21',\n    '21 22',\n    '22 23',\n    '23 24',\n    '24 25',\n    '25 26',\n    '26 27',\n    '27 28',\n    '28 29',\n    '29 30',\n    '30 31',\n    '31 32',\n    '32 33',\n    '33 34',\n    '34 35',\n    '35 36',\n    '36 37',\n    '37 38',\n    '38 39',\n    '39 40',\n    '40 41',\n    '41 42',\n    '42 43',\n    '43 44',\n    '44 45',\n    '45 46',\n    '46 47',\n    '47 48',\n    '48 49',\n    '49 50',\n    '50 51',\n    '51 52',\n    '52 53',\n    '53 54',\n    '54 55',\n    '55 56',\n    '56 57',\n    '57 58',\n    '58 59',\n    '59 60',\n    '60 61',\n    '61 62',\n    '62 63',\n    '63 64',\n    '64 65',\n    '65 66',\n    '66 67',\n    '67 68',\n    '68 69',\n    '69 70',\n    '70 71',\n    '71 72',\n    '72 73',\n    '73 74',\n    '74 75',\n    '75 76',\n    '76 77',\n    '77 78',\n    '78 79',\n    '79 80',\n    '80 81',\n    '81 82',\n    '82 83',\n    '83 84',\n    '84 85',\n    '85 86',\n    '86 87',\n    '87 88',\n    '88 89',\n    '89 90',\n    '90 91',\n    '91 92',\n    '92 93',\n    '93 94',\n    '94 95',\n    '95 96',\n    '96 97',\n    '97 98',\n    '98 99',\n    '99 100',\n    '100 101',\n    '101 102',\n    '102 103',\n    '103 104',\n    '104 105',\n    '105 106',\n    '106 107',\n    '107 108',\n    '108 109',\n    '109 110',\n    '110 111',\n    '111 112',\n    '112 113',\n    '113 114',\n    '114 115',\n    '115 116',\n    '116 117',\n    '117 118',\n    '118 119',\n    '119 120',\n    '120 121',\n    '121 122',\n    '122 123',\n    '123 124',\n    '124 125',\n    '125 126',\n    '126 127',\n    '127 128',\n    '128 129',\n    '129 130',\n    '130 131',\n    '131 132',\n    '132 133',\n    '133 134',\n    '134 135',\n    '135 136',\n    '136 137',\n    '137 138',\n    '138 139',\n    '139 140',\n    '140 141',\n    '141 142',\n    '142 143',\n    '143 144',\n    '144 145',\n    '145 146',\n    '146 147',\n    '147 148',\n    '148 149',\n    '149 150',\n    '150 151',\n    '151 152',\n    '152 153',\n    '153 154',\n    '154 155',\n    '155 156',\n    '156 157',\n    '157 158',\n    '158 159',\n    '159 160',\n    '160 161',\n    '161 162',\n    '162 163',\n    '163 164',\n    '164 165',\n    '165 166',\n    '166 167',\n    '167 168',\n    '168 169',\n    '169 170',\n    '170 171',\n    '171 172',\n    '172 173',\n    '173 174',\n    '174 175',\n    '175 176',\n    '176 177',\n    '177 178',\n    '178 179',\n    '179 180',\n    '180 181',\n    '181 182',\n    '182 183',\n    '183 184',\n    '184 185',\n    '185 186',\n    '186 187',\n    '187 188',\n    '188 189',\n    '189 190',\n    '190 191',\n    '191 192',\n    '192 193',\n    '193 194',\n    '194 195',\n    '195 196',\n    '196 197',\n    '197 198',\n    '198 199',\n    '199 200',\n    '200 201',\n    '201 202',\n    '202 203',\n    '203 204',\n    '204 205',\n    '205 206',\n    '206 207',\n    '207 208',\n    '208 209',\n    '209 210',\n    '210 211',\n    '211 212',\n    '212 213',\n    '213 214',\n    '214 215',\n    '215 216',\n    '216 217',\n    '217 218',\n    '218 219',\n    '219 220',\n    '220 221',\n    '221 222',\n    '222 223',\n    '223 224',\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRRRRLL', 'First example'\nassert solution('''\n6\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n4 5\n2 5\nSample Output:\nRRRRRLRR\n''') == 'RRRRRLRR', 'Second example'\nassert solution('''\n10\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n5 2\n4 5\n2 4\nSample Output:\nRRRRRRLLLRLR\n''') == 'RRRRRRLLLRLR', 'Third example'\nassert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n4 5\n2 5\nSample Output:\nRRRRRRLLLRLR\n''') == 'RRRRRRLLLRLR', 'Fourth example'\nassert solution('''\n10\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n5 2\n4 5\n2 4\nSample Output:\nRRRRRRLLLRLR\n''') == 'RRRRRRLLLRLR', 'Fifth example'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == 'LLRRRRLL'\nassert solution('10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == 'LLRRRRLL'\nassert solution('2\\n1 2\\n1 2') == 'impossible'\nassert solution('10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == 'RRLLRRRRLL'\nassert solution('100\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == 'RRRRRRRRRRLL'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == \"LLRRRRLL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRRRRLL'\n\nassert solution('''\n3\n1 2\n2 3\n1 3\n''') == 'LLRLLRLRLR'\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n1 3\n''') == 'impossible'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == 'LLRRRRLL'\nassert solution
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1009 2011\\n1017 2011\") == \"1\\n2011\""
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '2011'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2\\n1009 2011\\n1017 2011\"\n) == \"1\\n2011\"\n\"\"\"\n\nfrom itertools import permutations\n\nfor line in permutations([i for i in range(1000, 3000)], 2):\n    if sum(line) == 2000:\n        print(f\"{line[0]} {line[1]}\")\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"2\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(s) == \"1 2011\"\nprint(solution(s))\nassert solution(s) == \"1 2011\"\nprint(solution(s))"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1009 2011\\n1017 2011') == '1\\n2011'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1009 2011\n1017 2011\n''') == '1\\n2011'\n'''\nimport itertools"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n3 2\") == \"3 2\"\nassert solution(\"10\\n6 8\\n10 6\\n0 2 5\\n0 2 1\\n1 3 3\\n2 4 4\") == \"0 2 5\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1 2'\nassert solution('4 4') == '0 1 2 3'\nassert solution('6 8') == '2 4 5 0 8'\nassert solution('5 4') == '0 1 2 3 4'\nassert solution('20 3') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 100"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '1 0\\n0 1\\n'\nassert solution('6 7') == '1 2\\n0 3\\n1 4\\n2 5\\n3 6\\n'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3\\n0 1\\n0 2\\n1 3\\n2 3\\n\") == \"0 3\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0 3\"\nassert solution(\"4 4\") == \"0 3\"\nassert solution(\"10 10\") == \"0 3\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'\nassert solution('''6 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n3 4 100\n4 5 100\n5 6 100\n0 5\n''') == '0 4 5'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '0 3'\nassert solution(input()) == '1 2'\nassert solution(input()) == '0 1'\nassert solution(input()) == '1 2'\nassert solution(input()) == '0 2'\n\"\"\"\n\n\"\"\"\nsolution\n\"\"\"\nimport sys\nsys.stdin = open(\"input.txt\")"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 1\n2 2\n''') == '2 1'\n\nassert solution('''\n4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'\nassert solution('''\n5 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n3 4 100\n0 4\n''') == '0 3, 1 4'\n''')\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\nprint('PASSED')\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\nassert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\nassert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '10'\nassert solution('''3.0 10.0\n2 2 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\nassert solution('''3.0 10.0\n2 2 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '0'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '20'\nassert solution('2.0 10.0') == '20'\nassert solution('3 3 0 0') == '20'\nassert solution('2001 1000 100') == '20'\nassert solution('1001 10000 200') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2.0 10.0\") == \"20\"\nassert solution(\"3 3 0 0\") == \"5\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2.0 10.0\") == \"20.0\"\nassert solution(\"3 3 0 0\") == \"20.0\"\nassert solution(\"3 3 0 0\") == \"20.0\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2.0 10.0\\n3 3 0 0\\n2001 1000 100') == '20'\nassert solution('2.0 10.0\\n3 3 0 0\\n1001 10000 200\\n100 0 0\\n') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\nSample Input 2:\n1.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\nSample Output 2:\n19\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 0 0') == '20'\nassert solution('1.0 10.0') == '20'\n\nSample Input:\n5.0 10.0\n3 4 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\nSample Output:\n20\n'''\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2.0 10.0') == '20'\nassert solution('10.0 5.0') == '3.0'\nprint('\"Run\" is the best way to get this problem done!')"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1.0 10.0') == '20.0'\nassert solution('2.0 10.0') == '8.0'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '4'\nassert solution('7\\n0 0 2 3 4 5 6\\n0 0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '2'"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n\") == \"4\"\n\nassert solution(\"6\\n0 1 3 4 5 6\\n0 1 3 4 5 6\\n0 1 3 4 5 6\\n0 1 3 4 5 6\\n0 1 3 4 5 6\\n0 1 3 4 5 6\\n\") == \"3\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == \"4\"\nassert solution('5\\n0 2 3 4 5\\n0 1 2 3 4 5\\n1 6 5 4 2 1\\n2 1 2 3 4 5\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == \"4\"\nassert solution('4\\n0 2 1 3\\n0 1 2 3\\n1 6 5 4\\n2 1 2 3\\n1 1 2 3\\n2 1 2 3\\n') == \"3\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '4'\nassert solution('10\\n0 3 7 5 2 9 6 8 4 1\\n0 2 7 5 9 1 4 8 6\\n0 1 8 6 9 4 7 2\\n4 2 9 7 1 8 5 6\\n2 7 9 8 4 5 1 6\\n2 5 1 3 6 7 4 9 8\\n2 4 8 1 9 5 3 7 6\\n1 2 7 5 3 9 8 4 6\\n4 8 9 5 7 6 2 5 1\\n1 5 6 9 4 8 2 7 3\\n5 6 9 4 8 7 2 1 3\\n4 6 9 5 8 7 1 2 3\\n2 8 9 5 6 7 1 4 3\\n6 7 9 5 2 8 1 4 3\\n6 8 9 5 7 3 2 1 4\\n5 8 9 5 7 4 6 2 1\\n1 2 3 4 5 6 7 8 9\\n') == '5'"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == \"4\"\nassert solution('5\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == \"4\""
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\n\n'''"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '4'\nassert solution('5\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '3'\nassert solution('5\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '3'\nassert solution('4\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '0'\nassert solution('3\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '1'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '4'\nassert solution('0 0 1 2 3 4 5 6') == '5'\nassert solution('0 1 2 3 4 5 6') == '5'\nassert solution('0 1 2 3 4 5 6') == '3'\nassert solution('0 1 2 3 4 5 6') == '2'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == \"4\"\nassert solution('9\\n0 2 3 4 5 6 7 8 9\\n0 1 3 4 5 6 7 8 9\\n1 6 5 4 2 1 2 3 4\\n2 6 5 3 2 1 1 2 3\\n1 1 2 3 4 6 7 8 9\\n2 1 2 3 4 5 6 7 8 9\\n') == \"3\"\nassert solution('6\\n0 1 2 3 4 5\\n0 0 1 2 3 4\\n0 0 0 1 2 3\\n0 0 0 0 1 2\\n1 2 3 4 5\\n1 1 2 3 4\\n1 1 1 2 3\\n') == \"1\"\n\n'''\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\n\nassert solution(\"4\\n1 1\\n2 2 3 4\\n3 3 3 4 5\\n4 4 4 5 5\\n5 5 5 5 6\\n6 6 6 6 7\\n7 7 7 7 8\\n8 8 8 8 9\\n9 9 9 9 10\\n10 10 10 10 11\\n11 11 11 11 12\") == \"12\"\n\nassert solution(\"9\\n1 1\\n2 2 3 4\\n3 3 3 4 5\\n4 4 4 5 5\\n5 5 5 5 6\\n6 6 6 6 7\\n7 7 7 7 8\\n8 8 8 8 9\\n9 9 9 9 10\\n10 10 10 10 11\\n11 11 11 11 12\\n12 12 12 12 13\\n13 13 13 13 14\\n14 14 14 14 15\\n15 15 15 15 16\\n16 16 16 16 17\") == \"15\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\"\n) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n''') == '4'\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '6'\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '15'\n'''\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '4'\nassert solution('5') == '4'\nassert solution('100') == '100'"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\") == \"4\"\nassert solution(\"20\\n3 4 5 6 7\\n2 5 4 3 8\\n1 4 7 2 8\\n9 8 7 2 1\") == \"20\"\nassert solution(\"3\\n5 2 1\\n4 2 5\\n1 2 3 4\\n2 3 4\") == \"1\"\nassert solution(\"100\\n1 2 3 4 5\\n2 5 4 3\\n3 2 4 1\\n4 5 1 3\\n5 3 2 1\\n1 4 1 3\\n2 4 1 3\\n1 5 2 1\\n3 4 1 2\\n1 5 2 1\\n2 4 1 3\\n4 2 1 3\\n4 5 2 3\\n1 5 2 3\\n2 5 2 1\\n2 4 1 3\\n5 3 2 1\\n1 2 1 3\\n5 2 1 3\\n2 1 3 2\\n5 4 1 2\\n2 4 1 3\\n3 4 2 1\\n4 2 1 3\\n5 1 1 2\\n1 5 1 2\\n4 3 1 2\\n2 4 1 2\\n1 4 1 2\\n4 5 1 3\\n3 5 1 2\\n2 1 3 2\\n5 3 2 1\\n4 1 3 2\\n1 1 3 2\\n3 4 1 3\\n2 4 1 2\\n4 2 1 3\\n4 5 1 2\\n4 3 1 2\\n5 5 1 1\\n2 5 1 3\\n4 3 1 2\\n5 5 1 1\\n3 5 1 2\\n4 2 1 3\\n4 2 1 3\\n2 5 1 1\\n5 5 1 1\\n2 1 3 2\\n2 4 1 3\\n5 5 1 1\\n3 4 1 2\\n2 2 1 3\\n4 4 1 3\\n3 4 1 2\\n1 4 1 3\\n5 2 1 3\\n2 5 1 1\\n5 4 1 2\\n3 1 2 3\\n5 3 1 2\\n2 5 1 3\\n1 4 1 2\\n1 5 1 3\\n4 1 3 2\\n5 3 2 1\\n5 1 3 2\\n4 3 1 3\\n4 4 1 2\\n1 5 2 3\\n4 2 1 3\\n2 1 3 2\\n4 5 2 3\\n3 4 2 1\\n4 1 1 3\\n1 1 3 2\\n1 4 1 3\\n4 1 3 2\\n3 4 1 2\\n2 4 1 3\\n5 3 2 1\\n3 5 2 1\\n1 1 3 2\\n4 5 2 1\\n3 4 1 2\\n2 4 1 3\\n4 3 1 2\\n4 1 3 2\\n5 1 1 2\\n3 2 1 2\\n3 2 1 2\\n1 3 2 3\\n4 1 3 2\\n1 2 2 3\\n2 3 2 1\\n4 2 1 3\\n4 1 3 2\\n3 2 1 2\\n3 2 1 2\\n1 4 1 3\\n1 3 2 3\\n3 2 1 2\\n3 4 1 2\\n2 4 1 3\\n4 3 1 2\\n5 1 1 2\\n2 4 1 3\\n4 2 1 3\\n5 3 1 1\\n1 5 2 1\\n4 2 1 3\\n2 4 1 3\\n4 2 1 3\\n4 1 3 2\\n1 5 2 1\\n5 4 1 3\\n1 2 1 3\\n4 3 1 2\\n4 5 2 1\\n5 3 1 1\\n2 3 1 2\\n5 4 1 3\\n4 2 1 3\\n3 4 2 1\\n2 4 1 3\\n4 1 3 2\\n4 1 3 2\\n3 4 1 3\\n1 4 1 2\\n3 5 1 2\\n3 4 1 2\\n2 4 1 3\\n4 3 1 3\\n5 5 1 1\\n3 5 1 2\\n5 1 1 2\\n1 5 1 3\\n5 4 1 2\\n4 2 1 3\\n2 5 1 1\\n3 5 1 2\\n5 1 1 2\\n3 2 1 2\\n4 4 1 3\\n3 1 2 3\\n3 4 1 2\\n5 2 1 3\\n1 3 2 3\\n4 4 1 3\\n4 3 1 2\\n4 4 1 3\\n1 1 3 2\\n3 2 1 2\\n2 5 1 1\\n3 4 1 2\\n2 5 1 1\\n1 2 1 3\\n2 1 3 2\\n2 4 1 3\\n3 4 1 2\\n4 1 3 2\\n5 1 1 2\\n2 4 1 3\\n1 4 1 3\\n4 3 1 2\\n5 3 1 1\\n5 1 1 2\\n4 3 1 2\\n4 1 3 2\\n5 1 1 2\\n3 2 1 2\\n1 2 1 3\\n1 4 1 3\\n4 1 3 2\\n5 1 1 2\\n3 4 1 2\\n3 4 1 2\\n4 1 3 2\\n5 5 1 1\\n1 5 2 1\\n4 2 1 3\\n5 3 2 1\\n1 5 1 3\\n4 1 3 2\\n4 1 3 2\\n3 4 1 2\\n2 4 1 3\\n4 3 1 2\\n3 4 1 2\\n3 5 1 2\\n1 4 1 3\\n2 4 1 3\\n5 2 1 3\\n5 4 1 2\\n4 4 1 3\\n5 4 1 3\\n4 4 1 3\\n2 5 1 3\\n1 5 1 3\\n5 4 1 3\\n2 3 1 3\\n5 3 2 1\\n1 4 1 3\\n4 3 1 2\\n1 2 1 3\\n4 2 1 3\\n1 3 2 3\\n2 3 1 2\\n5 3 1 2\\n2 4 1 3\\n1 5 1 3\\n4 3 1 2\\n2 5 1 1\\n3 4 1 2\\n4 1 3 2\\n5 5 1 1\\n5 1 1 2\\n4 3 1 2\\n4 1 3 2\\n5 1 1 2\\n2 1 3 2\\n4 2 1 3\\n5 2 1 3\\n3 4 1 2\\n3 4 1 2\\n4 3 1 2\\n4 1 3 2\\n2 5 1 1\\n4 1 3 2\\n4 1 3 2\\n3 4 1 2\\n5 5 1 1\\n1 4 1 3\\n5 1 1 2\\n5 5 1 1\\n1 2 1 3\\n1 2 1 3\\n2 1 2 3\\n4 3 1 2\\n5 4 1 3\\n2 4 1 3\\n5 4 1 3\\n5 5 1 1\\"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == ''\nassert solution(\"1\") == '1'\nassert solution(\"1 1\") == '2'\nassert solution(\"1 1 1 1 1 1 1\") == '4'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\\n') == '4'\nassert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\\n') == '8'\nassert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\\n') == '10'"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n''') == '4'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('10') == '9'"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n''') == '4'\nassert solution('''\n1\n1\n1\n1\n''') == '1'\nassert solution('''\n5\n1 1 2 3 4\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\n4 5 6 7 8\n''') == '8'\n'''"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\n\nassert solution('''\n8\n2.2 2.2\n1.1 1.1\n3.5 1.1\n3.3 1.5\n4.1 1.5\n1.3 3.6\n3.6 3.6\n1.2 4.2\n''') == '7'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\", \"Empty input\"\nassert solution(\"1\") == \"1\", \"Single tower\"\nassert solution(\"5\") == \"6\", \"Three towers\"\nassert solution(\"5 4 5 4\") == \"9\", \"Towers\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nassert solution('10\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01\\n0.01 0.01') == '20'"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\n\"\"\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\nassert solution('''\n1\n1.0\n3.1\n3.1\n1.0\n3.1\n''') == '1'\nassert solution('''\n1\n1.0\n2.0\n3.1\n3.1\n1.0\n3.1\n''') == '2'\nassert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '4'\nassert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '3'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nassert solution('2\\n0.0 0.0\\n10.0 10.0') == '2'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1''') == '6'\n\nassert solution('''10\n1.2 3.3\n2.0 3.3\n1.1 2.0\n0.9 3.3\n0.8 4.4\n1.2 5.5\n2.4 7.4\n0.1 6.6\n0.7 8.8\n0.9 9.9\n2.0 1.0\n1.2 2.0\n3.1 4.0\n3.0 5.0\n0.2 6.0\n1.4 7.0\n0.3 8.0\n0.5 9.0\n0.4 0.0\n1.5 1.0\n0.2 3.0\n1.2 3.0\n1.2 4.0\n3.1 5.0\n1.2 6.0\n0.2 7.0\n2.0 8.0\n1.0 9.0\n1.5 1.0\n1.3 1.0\n1.3 1.0\n1.3 1.0\n2.0 2.0\n1.3 1.0\n1.3 1.0\n1.3 1.0\n1.3 1.0\n2.0 1.0\n0.9 1.0\n2.0 2.0\n2.0 2.0\n1.0 1.0\n2.0 3.0\n1.0 3.0\n1.5 1.0\n1.0 1.0\n0.9 1.0\n1.0 1.0\n0.8 1.0\n1.0 1.0\n0.9 1.0\n1.0 1.0\n2.0 2.0\n1.5 1.0\n0.9 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\nassert solution('''\n3\n1.0 1.0\n3.1 1.0\n1.0 3.1\n''') == '4'\nassert solution('''\n3\n1.0 1.0\n3.1 1.0\n1.0 3.1\n''') == '4'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nassert solution('10\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n1.0 4.2\\n2.0 2.0\\n5.0 5.0\\n6.0 6.0\\n8.0 8.0\\n10.0 10.0\\n12.0 12.0\\n14.0 14.0\\n16.0 16.0\\n18.0 18.0\\n20.0 20.0\\n22.0 22.0\\n24.0 24.0\\n26.0 26.0\\n28.0 28.0\\n30.0 30.0\\n32.0 32.0\\n34.0 34.0\\n36.0 36.0\\n38.0 38.0\\n40.0 40.0\\n42.0 42.0\\n44.0 44.0\\n46.0 46.0\\n48.0 48.0\\n50.0 50.0\\n52.0 52.0\\n54.0 54.0\\n56.0 56.0\\n58.0 58.0\\n60.0 60.0\\n62.0 62.0\\n64.0 64.0\\n66.0 66.0\\n68.0 68.0\\n70.0 70.0\\n72.0 72.0\\n74.0 74.0\\n76.0 76.0\\n78.0 78.0\\n80.0 80.0\\n82.0 82.0\\n84.0 84.0\\n86.0 86.0\\n88.0 88.0\\n90.0 90.0\\n92.0 92.0\\n94.0 94.0\\n96.0 96.0\\n98.0 98.0\\n100.0 100.0\\n102.0 102.0\\n104.0 104.0\\n106.0 106.0\\n108.0 108.0\\n110.0 110.0\\n112.0 112.0\\n114.0 114.0\\n116.0 116.0\\n118.0 118.0\\n120.0 120.0\\n122.0 122.0\\n124.0 124.0\\n126.0 126.0\\n128.0 128.0\\n130.0 130.0\\n132.0 132.0\\n134.0 134.0\\n136.0 136.0\\n138.0 138.0\\n140.0 140.0\\n142.0 142.0\\n144.0 144.0\\n146.0 146.0\\n148.0 148.0\\n150.0 150.0\\n152.0 152.0\\n154.0 154.0\\n156.0 156.0\\n158.0 158.0\\n160.0 160.0\\n162.0 162.0\\n164.0 164.0\\n166.0 166.0\\n168.0 168.0\\n170.0 170.0\\n172.0 172.0\\n174.0 174.0\\n176.0 176.0\\n178.0 178.0\\n180.0 180.0\\n182.0 182.0\\n184.0 184.0\\n186.0 186.0\\n188.0 188.0\\n190.0 190.0\\n192.0 192.0\\n194.0 194.0\\n196.0 196.0\\n198.0 198.0\\n200.0 200.0\\n202.0 202.0\\n204.0 204.0\\n206.0 206.0\\n208.0 208.0\\n210.0 210.0\\n212.0 212.0\\n214.0 214.0\\n216.0 216.0\\n218.0 218.0\\n220.0 220.0\\n222.0 222.0\\n224.0 224.0\\n226.0 226.0\\n228.0 228.0\\n230.0 230.0\\n232.0 232.0\\n234.0 234.0\\n236.0 236.0\\n238.0 238.0\\n240.0 240.0\\n242.0 242.0\\n244.0 244.0\\n246.0 246.0\\n248.0 248.0\\n250.0 250.0\\n252.0 252.0\\n254.0 254.0\\n256.0 256.0\\n258.0 258.0\\n260.0 260.0\\n262.0 262.0\\n264.0 264.0\\n266.0 266.0\\n268.0 268.0\\n270.0 270.0\\n272.0 272.0\\n274.0 274.0\\n276.0 276.0\\n278.0 278.0\\n280.0 280.0\\n282.0 282.0\\n284.0 284.0\\n286.0 286.0\\n288.0 288.0\\n290.0 290.0\\n292.0 292.0\\n294.0 294.0\\n296.0 296.0\\n298.0 298.0\\n300.0 300.0\\n302.0 302.0\\n304.0 304.0\\n306.0 306.0\\n308.0 308.0\\n310.0 310.0\\n312.0 312.0\\n314.0 314.0\\n316.0 316.0\\n318.0 318.0\\n320.0 320.0\\n322.0 322.0\\n324.0 324.0\\n326.0 326.0\\n328.0 328.0\\n330.0 330.0\\n332.0 332.0\\n334.0 334.0\\n336.0 336.0\\n338.0 338.0\\n340.0 340.0\\n342.0 342.0\\n344.0 344.0\\n346.0 346.0\\n348.0 348.0\\n350.0 350.0\\n352.0 352.0\\n354.0 354.0\\n356.0 356.0\\n358.0 358.0\\n360.0 360.0\\n362.0 362.0\\n364.0 364.0\\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\n2\\n') == '5'\nassert solution('3\\n1\\n2\\n') == '6'\nassert solution('5\\n3\\n1\\n2\\n') == '4'\nassert solution('2\\n6\\n3\\n1\\n2\\n') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == '12'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '5'\n\"\"\"\n\nk = int(input())\nd = []\nfor _ in range(k):\n    d.append(int(input()))\n\ndp = [[0] * (max(d)+1) for _ in range(k+1)]\n\nfor i in range(1, k+1):\n    for j in range(1, max(d)+1):\n        if j <= d[i-1]:\n            dp[i][j] = dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-d[i-1]] + 1)\n\nfor i in range(1, k+1):\n    print(dp[i][max(d)])\n\n\"\"\"\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n4') == '3'\nassert solution('4\\n3\\n2') == '2'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('\\n'.join([\n    '3',\n    '2',\n    '2',\n    '2',\n])) == '5'\n\nassert solution('\\n'.join([\n    '4',\n    '2',\n    '2',\n    '2',\n])) == '3'\n\nassert solution('\\n'.join([\n    '10',\n    '2',\n    '2',\n    '2',\n])) == '11'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('\\n'.join(['2', '2', '2'])) == '5'\nassert solution('\\n'.join(['3', '2', '2'])) == '5'\nassert solution('\\n'.join(['3', '3', '2'])) == '7'\nprint('\"Run\" is now complete!')\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n2\n2\n2''') == '2'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n2\\n2') == '5'\nassert solution('3\\n1\\n4') == '5'\nassert solution('3\\n4\\n1') == '2'\nassert solution('3\\n3\\n3') == '1'\nassert solution('3\\n2\\n4') == '1'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n2\n2\n2\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n2\n1\n2\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n3\n2\n2\n2\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n20\n1\n20\n1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n5\n1\n3\n\"\"\") == \"5\""
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\n2') == '5'\nassert solution('3\\n2\\n2') == '5'\nassert solution('3\\n3\\n3') == '5'\nassert solution('3\\n2\\n2') == '5'\nassert solution('3\\n2\\n2') == '5'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\nassert solution('1 5\\n2 5 5 1') == '1 1'\nassert solution('2 7\\n2 5 5 1') == '0 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 3\n2 2 2 1\n''') == '1 2'"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 3\n2 2 2 1\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"\n1 3\n2 2 2 1\n\"\"\") == \"1 1\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\n'''\nimport math\n\nA,B,C,T=map(int,input().split())\nAt=[int(i) for i in input().split()]\ntotal=1\nfor i in range(len(At)-1):\n    total=(((At[i]+B)%C) + 1)\n    if total>C:\n        total=C\n    At[i+1]=total\nAt=At[:len(At)-1]\n\nAt=[str(i) for i in At]\nAt=' '.join(At)\nprint(At,T,sep=' ')\n\n\n'''"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3\n2 2 2 1\n''') == '1 1'\nprint('PASSED: {}'.format(solution('''\n1 3\n2 2 2 1\n''')))\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 3\n2 2 2 1\n''') == '1 1'\nassert solution('''2 4\n3 2 1\n''') == '0 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 2 1\\n') == '1 1'\nassert solution('1 3 4 2\\n') == '2 3'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0 0\"\nassert solution(\"2 2\") == \"1 1\"\nassert solution(\"2 4\") == \"3 1\"\nassert solution(\"2 2 1\") == \"4 1\"\nassert solution(\"3 3\") == \"6 1\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3\\n2 2 2 1\\n') == '1 1'\nassert solution('10 20 30 40 50\\n4 5 6 8 9\\n') == '5 4'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '8'\nassert solution('3') == '12'\nassert solution('4') == '6'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"123456\") == \"14\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0\") == \"10\"\nassert solution(\"1\") == \"10\"\nassert solution(\"10000\") == \"10\"\nassert solution(\"99999\") == \"10\""
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '10'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"33\") == \"28\"\nassert solution(\"1234\") == \"126\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n666\n875\n886\n876\n776\n865\n774\n633\n666\n878\n''') == \"10\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\nassert solution('5') == '1'\n\"\"\"\n\nimport math\nimport itertools"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '10'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '1'\nassert solution('4\\n') == '1'\nassert solution('5\\n') == '0'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '10'\nassert solution('4') == '40'\nassert solution('1000000000') == '19'\nassert solution('16') == '2'\nassert solution('000') == '0'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0.0\"\nassert solution(\"1\") == \"0.0\"\nassert solution(\"1 2\") == \"0.0\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n10 10\n
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('1 2 0') == '1.0'\nassert solution('1 1000 1') == '0.001'\nassert solution('1 1000 1 0') == '1.0'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('1 2') == '0.001'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '0.001'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('1 2') == '0.001'"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"0.001\""
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1000 1 0\\n1 1000 1') == '0.001'\nassert solution('10 20\\n1 1 1\\n0.5 0.5 0.5\\n0.5 0.5 0.5\\n0.5 0.5 0.5\\n1 1 1\\n2 2 2\\n3 3 3') == '3.444'\nprint('All tests passed.')\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('1 2 3') == '0.002'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '0.007'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n1000 1 0\n1 1000 1\n''') == '0.001'\nassert solution('''\n1 1\n1000 1 0\n1 1000 1\n''') == '0.000'\n'''\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2 10000\") == \"0\"\nassert solution(\"4 4 3 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 3 2 10000\") == \"1\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution(\"4 4 2\") == \"5\"\nassert solution(\"4 5 2\") == \"5\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 2 10000') == '0'\nassert solution('1 2') == '1'\nassert solution('2 3') == '1'\nassert solution('3 1') == '1'\nassert solution('1 2') == '1'"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 2 10000\\n1 2\\n2 3\\n3 1\") == \"0\""
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"3 3 2 10000\") == \"1\"\nassert solution(\"1 2 4 5 6\") == \"2\"\nassert solution(\"2 4 1 3\") == \"0\""
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1') == '0'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\\n\") == \"0\"\nassert solution(\"3 3 3 10000\\n1 2\\n2 3\\n3 1\\n\") == \"1\"\nassert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\\n\") == \"0\"\nassert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\\n\") == \"0\""
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3 2 10000\n1 2\n2 3\n3 1\n''') == '0'\n\n'''"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2 10000') == '0'\nassert solution('1 2') == '1'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 2 10000\\n1 2\\n2 3\\n3 1\\n') == '0\\n'\n\"\"\""
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '26'\nassert solution('2\\n0 0\\n1 1') == '0'\nprint('all tests passed')\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n0 1 1\n1 0 2\n1 2 0\n1 2 3\n''') == '26'\nassert solution('''\n2\n1 2 3\n1 2 3\n''') == '4'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 0\n1 2 4 6 8 5 0 3 2 1\n1 3 5 0 4 2 6 8 7 9\n1 3 6 7 8 9 0 4 5 2\n1 4 7 8 9 0 5 6 3 2\n1 4 8 9 0 5 6 3 2 1\n1 5 8 9 0 6 7 2 3 1\n1 5 6 7 2 3 1 9 0 4\n1 6 7 9 0 5 2 8 3 4\n1 6 8 9 0 5 7 2 3 4\n1 7 8 9 0 5 6 3 2 4\n1 7 9 0 5 6 3 2 4 1\n1 8 9 0 6 7 2 3 4 1\n1 8 9 0 6 7 2 3 4 1\n1 9 0 6 7 2 3 4 1 6\n1 9 0 6 7 2 3 4 1 6\n1 0 6 7 2 3 4 1 6 9\n''') == '181'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n1 3 2 0''') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n''') == '26'\nprint('Solution:')\nprint(solution('''\n4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n'''))\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '26'"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n''') == '26'\n\"\"\"\nn = int(input())\ncolors = {i: 0 for i in range(1, 301)}\nfor i in range(n):\n    for j in range(n):\n        colors[i] += (i == j)\n        colors[j] += (i == j)\ns = sum(colors.values())\nprint(s)\n\n\"\"\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '26'\nassert solution('30\\n1 2 1 2 3 0 1 2 3\\n1 2 1 1 2 2 2 2 2 3\\n1 2 1 1 1 2 1 2 1 2 2\\n1 2 1 1 1 1 2 1 1 1 2 2\\n1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 2\\n1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '26'\nassert solution('''\n4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n''') == '26'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2\\n20 20 20 40\\n.X.\\nT.T') == '0.333333333'\nprint(solution('3 2\\n20 20 20 40\\n.X.\\nT.T'))\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n20 20 20 40\nX.X\nT.T''') == '0.333333333'\nassert solution('''3 5\n20 20 20 40\nX.X\nT.T\nT.X\n.X\n.T''') == '0.333333333'\nassert solution('''2 2\n10 10\nX.X\n.X.\n.T\n.T''') == '0.33333333'\nassert solution('''2 10\n10 10\nX.X\n.X.\n.T\n.T''') == '0.33333333'\nassert solution('''3 2\n1 1\n.X.\n.T\n.T''') == '0.33333333'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"0.5\"\nassert solution(\"7 3\") == \"0.3333333333333333\"\nassert solution(\"10 3\") == \"0.3333333333333333\"\nassert solution(\"10 3\") == \"0.3333333333333333\"\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"0.333333333\"\n\"\"\"\nfrom decimal import Decimal"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '0.50000'\nassert solution('3 3') == '0.0'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n20 20 20 40\n.X\nT.T\n''') == '0.333333333'\nassert solution('''\n3 2\n20 20 20 40\n.X\nT.T\n''') == '0.666666667'\nassert solution('''\n3 2\n20 20 20 40\nX.X\nT.T\n''') == '0.0'\n''')"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r\"\"\"\n1 1\n.T\n.T\n\"\"\") == r\"0.333333333\\n0.333333333\\n\"\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '0.333333333'\nassert solution('5 5') == '0.0'\nassert solution('4 3') == '0.33333'"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n3 3 4') == '0.5\\n0.5\\n0.5\\n0.25\\n0.25\\n0.25\\n0.125\\n0.125\\n0.125\\n'\nassert solution('1\\n10 10 10') == '0.5\\n0.5\\n0.5\\n0.5\\n0.5\\n0.5\\n0.5\\n0.5\\n'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '0.250000'\nassert solution('3 3') == '0.333333'\nassert solution('4 4') == '0.428571'\nassert solution('5 5') == '0.571429'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\""
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 45 0 0') == '0.75'\nassert solution('10 10 10 10') == '0.08333333333333333'\nprint('all tests passed')\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('90 90 30 30') == '0.65'\nassert solution('35 30 45 30') == '0.25'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('20 20 2 0') == '0.75'\nassert solution('30 30 1 2') == '0.25'\nassert solution('30 30 3 2') == '0.50'\nassert solution('20 20 1 2') == '1.00'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''45 45 0 0''') == '0.75'\nassert solution('''5 0 0 0''') == '0.25'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4.0 4.0 1.0 1.0\n''') == '0.6666666666666666'\nassert solution('''\n12.0 12.0 2.0 3.0\n''') == '0.3333333333333333'"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4 0 0''') == '0.75'\nassert solution('''5 5 0 0''') == '1.00000'\nassert solution('''0.75 0 0 0''') == '0.750000'\nassert solution('''1.00001 0 0 0''') == '1.000001'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 4 4 2\n''') == '0.5'\nassert solution('''\n4 4 4 0\n''') == '0.75'\n'''\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"45 45 0 0\n\"\"\") == \"0.75\"\nassert solution(\"\"\"17 18 1 1\n\"\"\") == \"0.5\"\n\n\"\"\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''45 45 0 0''') == '0.75'\nassert solution('''5 5 0 0''') == '0.0'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '2'\nassert solution('3 1') == '1'\nassert solution('5 7') == '7'\nassert solution('5 1') == '1'\nassert solution('5 2') == '3'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\n\nassert solution(\"5 7\\n0 1 2\\n0 3 5\\n1 2 11\\n2 3 2\\n2 4 2\\n4 3 9\") == \"11\"\n\nassert solution(\"5 10\\n0 0\\n0 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n30 31\\n31 32\\n32 33\\n33 34\\n34 35\\n35 36\\n36 37\\n37 38\\n38 39\\n39 40\\n40 41\\n41 42\\n42 43\\n43 44\\n44 45\\n45 46\\n46 47\\n47 48\\n48 49\\n49 50\\n50 51\\n51 52\\n52 53\\n53 54\\n54 55\\n55 56\\n56 57\\n57 58\\n58 59\\n59 60\\n60 61\\n61 62\\n62 63\\n63 64\\n64 65\\n65 66\\n66 67\\n67 68\\n68 69\\n69 70\\n70 71\\n71 72\\n72 73\\n73 74\\n74 75\\n75 76\\n76 77\\n77 78\\n78 79\\n79 80\\n80 81\\n81 82\\n82 83\\n83 84\\n84 85\\n85 86\\n86 87\\n87 88\\n88 89\\n89 90\\n90 91\\n91 92\\n92 93\\n93 94\\n94 95\\n95 96\\n96 97\\n97 98\\n98 99\\n99 100\\n100 101\\n101 102\\n102 103\\n103 104\\n104 105\\n105 106\\n106 107\\n107 108\\n108 109\\n109 110\\n110 111\\n111 112\\n112 113\\n113 114\\n114 115\\n115 116\\n116 117\\n117 118\\n118 119\\n119 120\\n120 121\\n121 122\\n122 123\\n123 124\\n124 125\\n125 126\\n126 127\\n127 128\\n128 129\\n129 130\\n130 131\\n131 132\\n132 133\\n133 134\\n134 135\\n135 136\\n136 137\\n137 138\\n138 139\\n139 140\\n140 141\\n141 142\\n142 143\\n143 144\\n144 145\\n145 146\\n146 147\\n147 148\\n148 149\\n149 150\\n150 151\\n151 152\\n152 153\\n153 154\\n154 155\\n155 156\\n156 157\\n157 158\\n158 159\\n159 160\\n160 161\\n161 162\\n162 163\\n163 164\\n164 165\\n165 166\\n166 167\\n167 168\\n168 169\\n169 170\\n170 171\\n171 172\\n172 173\\n173 174\\n174 175\\n175 176\\n176 177\\n177 178\\n178 179\\n179 180\\n180 181\\n181 182\\n182 183\\n183 184\\n184 185\\n185 186\\n186 187\\n187 188\\n188 189\\n189 190\\n190 191\\n191 192\\n192 193\\n193 194\\n194 195\\n195 196\\n196 197\\n197 198\\n198 199\\n199 200\\n200 201\\n201 202\\n202 203\\n203 204\\n204 205\\n205 206\\n206 207\\n207 208\\n208 209\\n209 210\\n210 211\\n211 212\\n212 213\\n213 214\\n214 215\\n215 216\\n216 217\\n217 218\\n218 219\\n219 220\\n220 221\\n221 222\\n222 223\\n223 224\\n224 225\\n225 226\\n226 227\\n227 228\\n228 229\\n229 230\\n230 231\\n231 232\\n232 233\\n233 234\\n234 235\\n235 236\\n236 237\\n237 238\\n238 239\\n239 240\\n240 241\\n241 242\\n242 243\\n243 244\\n244 245\\n245 246\\n246 247\\n247 248\\n248 249\\n249 250\\n250 251\\n251 252\\n252 253\\n253 254\\n254 255\\n255 256\\n256 257\\n257 258\\n258 259\\n259 260\\n260 261\\n261 262\\n262 263\\n263 264\\n264 265\\n265 266\\n266 267\\n267 268\\n268 269\\n269 270\\n270 271\\n271 272\\n272 273\\n273 274\\n274 275\\n275 276\\n276 277\\n277 278\\n278 279\\n279 280\\n280 281\\n281 282\\n282 283\\n283 284\\n284 285\\n285 286\\n286 287\\n287 288\\n288 289\\n289 290\\n290 291\\n291 292\\n292 293\\n293 294\\n294 295\\n295 296\\n296 297\\n297 298\\n298 299\\n299 300\\n300 301\\n301 302\\n302 303\\n303 304\\n304 305\\n305 306\\n306 307\\n307 308\\n308 309\\n309 310\\n310 311\\n311 312\\n312 313\\n313 314\\n314 315\\n315 316\\n316 317\\n317 318\\n318 319\\n319 320\\n320 321\\n321 322\\n322 323\\n323 324\\n324 325\\n325 326\\n326 327\\n327 328\\n328 329\\n329 330\\n330 331\\n331 332\\n332 333\\n333 334\\n334 335\\n335 336\\n336 337\\n337 338\\n338 339\\n339 340\\n340 341\\n341 342\\n342 343\\n343 344\\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n4\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\n\nassert solution('''5\n3\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '7'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"4\"\nassert solution(\"10 3\") == \"7\"\nassert solution(\"20 8\") == \"25\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 1\n2 3\n1 1\n1 1\n0 0\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5 2\n1 2\n0 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 10\n0 1 2 3 4\n0 1 2\n0 1 1\n0 1 1\n0 1 1\n0 1 1\n0 1 1\n0 1 1\n0 1 1\n0 1 1\n0 1 1\n0 1 1\n\"\"\") == \"11\"\nassert solution(\"\"\"\n3 2\n2 2\n2 2\n2 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 6\\n\"\n    \"0 1 2\\n\"\n    \"0 3 8\\n\"\n    \"1 2 11\\n\"\n    \"2 3 5\\n\"\n    \"2 4 2\\n\"\n    \"4 3 9\"\n) == \"4\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '4'\nassert solution('1 2') == '6'\nassert solution('2 3') == '6'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'\nassert solution('10 3\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '8'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\nprint('ALL TEST CASES PASSED')\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n10 10 0 5\\n\") == \"100\"\nassert solution(\"2\\n10 10 0 5\\n\") == \"150\"\nassert solution(\"3\\n10 10 0 5\\n\") == \"150\"\nassert solution(\"4\\n10 10 0 5\\n\") == \"400\"\nassert solution(\"5\\n10 10 0 5\\n\") == \"400\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"100\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 10 0 5\n''') == '100'\nassert solution('''\n20 20 0 5\n''') == '20'\nassert solution('''\n30 30 0 5\n''') == '30'\nassert solution('''\n15 15 0 5\n''') == '15'\nassert solution('''\n30 30 0 5\n''') == '0'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n10 10 0 5\\n') == '100'\nassert solution('2\\n
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n10 10 0 5') == '100'\nassert solution('2\\n2 4 0 5\\n5 4 0 5\\n4 4 0 5\\n3 3 0 5\\n2 3 0 5\\n') == '35'\nassert solution('2\\n10 10 0 5\\n10 10 0 5\\n') == '65'"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n10 10 0 5\n''') == \"100\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n10 10 0 5\n\"\"\") == \"100\"\nassert solution(\"\"\"\n2\n2 1 1 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '1'\nassert solution('''\n4\n1 1 4 4\n2 2 3 3\n3 3 1 1\n4 4 2 2\n''') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('5 7 6 8') == '1'\nassert solution('3 1 3') == '0'"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8') == '1'\nassert solution('2\\n4 4 4 4\\n1 1 1 1') == '1'\nassert solution('2\\n0 0 2 2\\n1 1 3 4') == '0'\nassert solution('5\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8') == '0'\nassert solution('1\\n4 4 4 4\\n1 1 1 1') == '1'"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '1'\n\nassert solution('''\n3\n0 1 2 2\n1 1 3 4\n5 7 6 8\n''') == '0'\n\nassert solution('''\n10\n-1000 -1000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\n\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n##---------------------------------------------------------------------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8') == '1'\nassert solution('5\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8') == '0'\nassert solution('5\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8') == '1'\nassert solution('5\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8') == '0'"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '1'\nassert solution('''\n4\n1 2 2 5\n1 3 3 4\n1 4 4 8\n2 2 3 4\n3 2 1 2\n''') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n0 0 2 2\n1 1 3 4\n5 7 6 8\n\"\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == \"17\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\n') == \"17\"\nprint('Done!')"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\nE E E E E') == '17'\nassert solution('5 5\\nE E E E E\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == '17'"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '5 5\\n'\n    'E E E E E\\n'\n    '1 2 3 4 5\\n'\n    '5 4 3 2 1\\n'\n    '-2 -2 -2 -2 -2\\n'\n    '8 8 8 8 8\\n'\n    '9 9 9 9 9\\n'\n    'S S S S S\\n'\n    ) == '17'\n\nassert solution(\n    '10 10\\n'\n    'W W W W W W\\n'\n    '1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1 1 1 1\\n'\n    '0 0 0 0 0 0 0 0 0 0\\n'\n    '1 1 1 1 1 1 1"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\n\") == \"17\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\n') == \"17\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5 5\\n\"\n    \"E E E E E\\n\"\n    \"1 2 3 4 5\\n\"\n    \"5 4 3 2 1\\n\"\n    \"-2 -2 -2 -2 -2\\n\"\n    \"8 8 8 8 8\\n\"\n    \"9 9 9 9 9\\n\"\n    \"S S S S S\\n\"\n) == \"17\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '17'\nassert solution('''1 1\n1\n1''') == '0'\nassert solution('''6 6\n12312\n1234\n12345\n1234\n12345\n1234\n12345\n12345''') == '16'\nassert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\nSample Input:\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\nSample Output:\n17\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\nassert solution('''\n2 2\nS S\nS S\n''') == '2'\nassert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '10'\nassert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '12'\nassert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '12'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2 3 1 1\n1 2 3 4 5''') == '1 4 3 5 2', 'First example'\nassert solution('''10 5 1 4 2 3 4 5 6 8 7''') == '8 7 6 5 4 3 2 1 5 4', 'Second example'\nassert solution('''3 2 3 1 1\n2 3 1 5 1''') == 'impossible', 'Third example'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n3 2 3 1 1\n''') == '1 4 3 5 2'\nassert solution('''5\n4 1 4 2 5\n''') == '1 4 3 5 2'\nassert solution('''5\n4 2 3 5 1\n''') == '2 3 5 4 1'\nassert solution('''5\n1 3 5 4 2\n''') == '1 3 5 4 2'\nassert solution('''5\n5 1 4 2 3\n''') == '5 1 4 2 3'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 3 1 1') == '1 4 3 5 2', '3 2 3 1 1 failed'\nassert solution('5 3 2 3 1 1') == '1 4 3 5 2', '5 3 2 3 1 1 failed'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"10\\n0 1 1 1 1 0 0 0 0 0\") == \"1 3 5 0 2\"\nassert solution(\"20\\n0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0\") == \"0 0 1\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"impossible\"\nassert solution(\"10\") == \"1 4 7 9 2 5 8 3 6\"\nassert solution(\"20\") == \"impossible\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input_1) == \"1 4 3 5 2\"\nassert solution(sample_input_2) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n3 2 3 1 1') == \"1 4 3 5 2\"\nassert solution('4\\n2 4 4 2') == \"4 2 4 1\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1 4 3 5 2\"\nassert solution(\"5\") == \"1 4 3 5 2\"\nassert solution(\"5\") == \"1 4 3 5 2\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"impossible\"\nassert solution(\"7\") == \"1 4 3 5 2\"\nassert solution(\"10\") == \"1 4 5 2 3 1\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"3\") == \"1 4 3 5 2\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 0 1\n1 4\n''') == '0.76772047'\nassert solution('''\n5 0 0\n4 4\n3 3\n2 2\n''') == '0.4845154845154846'\nassert solution('''\n5 0 0\n1 2\n1 3\n1 4\n''') == '0.15151515151515154'\nassert solution('''\n5 0 0\n1 2\n2 2\n3 3\n''') == '0.0'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 0 1') == '0.76772047'\nassert solution('1 1 5') == '0.4'\nassert solution('3 3 3') == '0.2'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'\nassert solution('4\\n-3 2 1\\n1 4\\n-2 1 0\\n1 2 0') == '0.9375'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n1 0 1\n1 2\n\"\"\") == \"0.26\"\nassert solution(\"\"\"\n3\n1 0 1\n1 4\n\"\"\") == \"0.564285714\"\nassert solution(\"\"\"\n2\n1 0 1\n1 2\n\"\"\") == \"0.564285714\"\nassert solution(\"\"\"\n1\n3 0 1\n1 2\n\"\"\") == \"0.564285714\"\nassert solution(\"\"\"\n4\n1 1 2 1\n2 2 3 2\n3 3 4 4\n3 4 5 4\n\"\"\") == \"0.564285714\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n3 0 1\n1 4\n''') == '0.76772047'\n\nassert solution(\n    '''\n3 0 1\n0 1\n''') == '1.0'\n\nassert solution(\n    '''\n3 0 1\n1 2\n''') == '0.0'\n\nassert solution(\n    '''\n3 0 1\n-3 4\n''') == '0.5'\n\nassert solution(\n    '''\n1\n1\n1\n''') == '0.5'"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'\nassert solution('4\\n3 0 1\\n1 4') == '0.76772047'\nassert solution('3\\n3 0 1\\n1 4') == '0.75'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3 0 1\\n1 4\\n') == '0.76772047'\nassert solution('10\\n0 0 5\\n1 4\\n1 1\\n2 5\\n2 3\\n2 2\\n3 3\\n3 2\\n') == '0.54383553'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 0 1') == '0.76772047'\nassert solution('3 0 1 1') == '0.764765'\nassert solution('5 0 1 1 1') == '0.734571'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0.76772047\"\n\nSample Input:\n2\n5 2 7\n5 2 3\nSample Output:\n0.07629030681748055\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0.76772047'\nassert solution('1 2 3') == '0.76772047'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == \"27\""
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''hello teams\nSample Input:\nmno\nSample Output:\n3''') == '3'\n\nassert solution('''hello teams\nSample Input:\nbbdddbbbb\nSample Output:\n1''') == '1'\n\nassert solution('''hello teams\nSample Input:\nbbdddbbbb\nSample Output:\n2''') == '2'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"hello teams\") == \"27\""
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''hello teams\n''') == '27'\nassert solution('''t\nt e a m\n''') == '4'\nassert solution('''hello teams\nl\n''') == '0'\nassert solution('''hello teams\nl\nl\n''') == '1'\nassert solution('''hello teams\nz\n''') == '2'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('hello teams') == '27'\nassert solution('123456789 abcdefghijklmnopqrstuvwxyz') == '4'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('hello teams') == '27'\nassert solution('hlo boo') == '9'\nassert solution('abc') == '3'\nassert solution('helo') == '1'\nassert solution('hel') == '0'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"hello world\") == \"8\"\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nhello teams\n''') == '27'\nassert solution('''\nabc\n''') == '1'\nassert solution('''\nababab\n''') == '1'\n'''\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('hello teams') == '27'\nassert solution('helo teams') == '5'\n\"\"\"\n\nstring1 = stdin.split(' ')\nstring2 = stdin.split(' ')\nl1, l2 = len(string1[0]), len(string2[0])"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('hello teams') == '27'\nassert solution('bbddbbbbb') == '1'\nassert solution('bbdddddddbb') == '2'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '2'\nassert solution('''\n3 2\n1 2\n4 2\n1 4\n''') == '1'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3') == '2'\nassert solution('1 8') == '1'\nassert solution('5 4') == '1'\nassert solution('7 7') == '0'\nassert solution('9 2') == '0'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"6 3\\n\"\n    \"1 8\\n\"\n    \"5 4\\n\"\n    \"7 7\\n\"\n    \"9 2\\n\"\n    \"16 6\\n\"\n    \"17 10\\n\"\n    \"4 7 2\\n\"\n    \"6 3 1\\n\"\n    \"12 6 3\\n\"\n) == \"2\""
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '2'\nassert solution('''\n5 1\n5 2\n1 3\n5 4\n1 1\n''') == '4'\nassert solution('''\n2 2\n1 1\n''') == '0'\nassert solution('''\n10 1\n5 1\n9 2\n1 1\n2 3\n2 2\n1 1\n3 3\n5 3\n1 3\n''') == '1'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 4\n1 2\n5 4\n7 8\n9 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 3\\n1 8\\n5 4\\n7 7\\n9 2\\n16 6\\n17 10\\n4 7 2\\n6 3 1\\n12 6 3') == '2'\nassert solution('8\\n0 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9') == '9'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == \"2\"\nassert solution(\"2\\n2\") == \"2\"\nassert solution(\"6\\n3\") == \"2\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 3\\n1 8\\n5 4\\n7 7\\n9 2\\n16 6\\n17 10\\n4 7 2\\n6 3 1\\n12 6 3') == '2'\nassert solution('20 7\\n1 4\\n2 3\\n4 5\\n5 8\\n6 7\\n8 9\\n9 10\\n10 13\\n11 12\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23\\n22 24\\n23 25\\n24 26\\n25 27\\n26 28\\n27 29\\n28 30\\n29 31\\n30 32\\n31 33\\n32 34\\n33 35\\n34 36\\n35 37\\n36 38\\n37 39\\n38 40\\n39 41\\n40 42\\n41 43\\n42 44\\n43 45\\n44 46\\n45 47\\n46 48\\n47 49\\n48 50\\n49 51\\n50 52\\n51 53\\n52 54\\n53 55\\n54 56\\n55 57\\n56 58\\n57 59\\n58 60\\n59 61\\n60 62\\n61 63\\n62 64\\n63 65\\n64 66\\n65 67\\n66 68\\n67 69\\n68 70\\n69 71\\n70 72\\n71 73\\n72 74\\n73 75\\n74 76\\n75 77\\n76 78\\n77 79\\n78 80\\n79 81\\n80 82\\n81 83\\n82 84\\n83 85\\n84 86\\n85 87\\n86 88\\n87 89\\n88 90\\n89 91\\n90 92\\n91 93\\n92 94\\n93 95\\n94 96\\n95 97\\n96 98\\n97 99\\n98 100\\n99 101\\n100 102\\n101 103\\n102 104\\n103 105\\n104 106\\n105 107\\n106 108\\n107 109\\n108 110\\n109 111\\n110 112\\n111 113\\n112 114\\n113 115\\n114 116\\n115 117\\n116 118\\n117 119\\n118 120\\n119 121\\n120 122\\n121 123\\n122 124\\n123 125\\n124 126\\n125 127\\n126 128\\n127 129\\n128 130\\n129 131\\n130 132\\n131 133\\n132 134\\n133 135\\n134 136\\n135 137\\n136 138\\n137 139\\n138 140\\n139 141\\n140 142\\n141 143\\n142 144\\n143 145\\n144 146\\n145 147\\n146 148\\n147 149\\n148 150\\n149 151\\n150 152\\n151 153\\n152 154\\n153 155\\n154 156\\n155 157\\n156 158\\n157 159\\n158 160\\n159 161\\n160 162\\n161 163\\n162 164\\n163 165\\n164 166\\n165 167\\n166 168\\n167 169\\n168 170\\n169 171\\n170 172\\n171 173\\n172 174\\n173 175\\n174 176\\n175 177\\n176 178\\n177 179\\n178 180\\n179 181\\n180 182\\n181 183\\n182 184\\n183 185\\n184 186\\n185 187\\n186 188\\n187 189\\n188 190\\n189 191\\n190 192\\n191 193\\n192 194\\n193 195\\n194 196\\n195 197\\n196 198\\n197 199\\n198 200\\n199 201\\n200 202\\n201 203\\n202 204\\n203 205\\n204 206\\n205 207\\n206 208\\n207 209\\n208 210\\n209 211\\n210 212\\n211 213\\n212 214\\n213 215\\n214 216\\n215 217\\n216 218\\n217 219\\n218 220\\n219 221\\n220 222\\n221 223\\n222 224\\n223 225\\n224 226\\n225 227\\n226 228\\n227 229\\n228 230\\n229 231\\n230 232\\n231 233\\n232 234\\n233 235\\n234 236\\n235 237\\n236 238\\n237 239\\n238 240\\n239 241\\n240 242\\n241 243\\n242 244\\n243 245\\n244 246\\n245 247\\n246 248\\n247 249\\n248 250\\n249 251\\n250 252\\n251 253\\n252 254\\n253 255\\n254 256\\n255 257\\n256 258\\n257 259\\n258 260\\n259 261\\n260 262\\n261 263\\n262 264\\n263 265\\n264 266\\n265 267\\n266 268\\n267 269\\n268 270\\n269 271\\n270 272\\n271 273\\n272 274\\n273 275\\n274 276\\n275 277\\n276 278\\n277 279\\n278 280\\n279 281\\n280 282\\n281 283\\n282 284\\n283 285\\n284 286\\n285 287\\n286 288\\n287 289\\n288 290\\n289 291\\n290 292\\n291 293\\n292 294\\n293 295\\n294 296\\n295 297\\n296 298\\n297 299\\n298 300\\n299 301\\n300 302\\n301 303\\n302 304\\n303 305\\n304 306\\n305 307\\n306 308\\n307 309\\n308 310\\n309 311\\n310 312\\n311 313\\n312 314\\n313 315\\n314 316\\n315 317\\n316 318\\n317 319\\n318 320\\n319 321\\n320 322\\n321 323\\n322 324\\n323 325\\n324 326\\n325 327\\n326 328\\n327 329\\n328 330\\n329 331\\n330 332\\n331 333\\n332 334\\n333 335\\n334 336\\n335 337\\n336 338\\n337 339\\n338 340\\n339 341\\n340 342\\n341 343\\n342 344\\n343 345\\n344 346\\n345 347\\n346 348\\n347 349\\n348 350\\n349 351\\n350 352\\n351 353\\n352 354\\n353 355\\n354"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '26'"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\na\nb\nc\nd\ne\ncad\n''') == 26"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 1\nassert solution('1 2') == 2\nassert solution('1 2 3 4') == 3\nassert solution('1 1') == 1\nassert solution('1 2 2') == 2\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '26'"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\na\nb\nc\nd\ne\ncad\n''') == '1'\nassert solution('''\n7 1\ne\nd\nb\na\ne\nc\ne\n''') == '1'\nassert solution('''\n10 6\nd\nc\nb\na\ne\nc\nd\nb\ne\n''') == '9'\nassert solution('''\n1 3\na\nb\n''') == '2'\nassert solution('''\n5 3\na\nb\nc\nd\ne\ncad\n''') == '1'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == \"26\"\n\"\"\""
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\na\nb\nc\nd\ne\ncad\n''') == '26', \"First\"\nassert solution('''\n5 3\na\na\na\na\na\na\n''') == '2', \"Second\"\nassert solution('''\n5 3\na\nb\nc\na\na\na\n''') == '1', \"Third\"\nassert solution('''\n5 3\nb\na\nc\na\na\na\n''') == '4', \"Fourth\"\nassert solution('''\n5 3\nb\na\nc\na\na\na\n''') == '6', \"Fifth\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"\n    5 3\n    a\n    b\n    c\n    d\n    e\n    cad\"\"\") == \"26\"\n\nassert solution(r\"\"\"\n    5 3\n    a\n    b\n    c\n    d\n    e\n    cad\"\"\") == \"26\"\n\nassert solution(r\"\"\"\n    2 4\n    a\n    b\n    c\n    d\"\"\") == \"5\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5 3') == \"3\"\n\nassert solution('8 9 5 7') == \"17\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\na\") == \"26\"\nassert solution(\"5 3\\nab\\nac\\ne\") == \"15\"\nassert solution(\"3 5\\nac\\nd\") == \"18\"\nassert solution(\"2 2\\nacd\") == \"1\"\nassert solution(\"5 3\\nacb\\ne\") == \"1\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 10 30\n10 5 3 1 3''') == '3 5 2 1 4'\nassert solution('''6 10 30\n10 5 3 1 3\n9 1 4 7''') == '1 9 4 7'\nassert solution('''5 10 30\n10 5 3 1 3\n9 1 4 7\n''') == '1 9 4 7'\nassert solution('''5 10 30\n10 5 3 1 3\n9 1 4 7\n4 6 8 11''') == '4 6 8 11'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4', 'Wrong!'\nassert solution('2 1 3') == '1 3 2', 'Wrong!'"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('10 5 3 1 3') == '3 5 2 1 4'\nassert solution('0 10 30') == 'impossible'\nassert solution('1 10 30') == '1 2 3 4 5 6 7 8'\n\n-----Hints-----\nWe will use merge sort to help us solve this problem."
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 10 30\") == \"3 5 2 1 4\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5 10\") == \"3 5 2 1 4\"\nassert solution(\"5 10 3\") == \"3 5 2 1 4\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n2 2 4\") == \"1 3\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 10 30\") == \"3 5 2 1 4\"\nassert solution(\"5 20 25\") == \"3 5 2 1 4\"\nassert solution(\"100 50 10\") == \"10 100 50 10\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('1 10 5 1 1') == '5 1 2 3 4'\nassert solution('1 2 3 4') == 'impossible'\nassert solution('1 2 3 4 5 6 7') == '5 1 2 3 4 6 7'\nassert solution('1 2 3 4 5 6 7 8 9') == '5 1 2 3 4 6 7 8 9'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') =='shovel time!'\nassert solution('2') =='shovel time!'\nassert solution('3') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n2 3') =='shovel time!'\nassert solution('5 5\\n8 8\\n8 8') =='shovel time!'\nassert solution('100 10\\n12 6\\n60 50\\n70 10\\n100 6\\n50 10\\n100 8\\n50 7\\n50 6\\n90 5\\n80 10\\n70 8\\n20 6\\n50 7\\n70 10\\n70 7\\n100 6\\n90 5\\n60 50\\n60 20\\n50 7\\n100 6\\n80 10\\n80 7\\n60 5\\n90 5\\n50 7\\n90 5\\n100 6\\n50 7\\n100 6\\n70 8\\n90 5\\n80 10\\n80 7\\n70 7\\n60 5\\n50 7\\n100 6\\n80 10\\n80 7\\n60 5\\n100 6\\n70 8\\n70 7\\n100 6\\n90 5\\n90 5\\n80 7\\n80 7\\n60 5\\n90 5\\n100 6\\n70 8\\n100 6\\n100 6\\n90 5\\n100 6\\n70 7\\n80 7\\n90 5\\n90 5\\n70 7\\n80 7\\n100 6\\n90 5\\n100 6\\n90 5\\n80 7\\n70 7\\n100 6\\n100 6\\n100 6\\n90 5\\n90 5\\n70 7\\n100 6\\n90 5\\n100 6\\n100 6\\n90 5\\n100 6\\n70 7\\n80 7\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n90 5\\n100 6\\n100 6\\n100 6\\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 1\n2 3\n2 3\n\"\"\") == \"shovel time!\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '3\\n1 1\\n2 3\\n2 3\\n'\n) =='shovel time!\\n'\nassert solution(\n    '1\\n1\\n1\\n'\n) =='shovel time!\\n'\nassert solution(\n    '6\\n1 1\\n3 3\\n2 2\\n4 4\\n3 2\\n4 2\\n5 1\\n5 1\\n'\n) =='shovel time!\\n'"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') =='shovel time!'\nassert solution('9') =='shovel time!'\nassert solution('10000000') =='shovel time!'\nassert solution('10') =='shovel time!'\nassert solution('5') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n2 3\\n2 3') == '2'\nassert solution('7\\n1 2\\n3 4\\n5 6\\n8 9\\n1 2\\n2 4\\n5 8\\n1 3\\n2 5\\n3 7\\n3 4\\n3 6\\n2 8\\n3 8\\n2 6\\n1 5\\n3 9\\n6 7\\n5 4\\n4 8\\n8 3\\n2 2\\n5 7\\n1 1\\n1 4\\n4 5\\n2 5\\n1 6\\n2 3\\n6 3\\n7 1\\n5 8\\n4 7\\n2 1\\n3 4\\n5 2\\n8 5\\n1 6\\n5 4\\n1 4\\n1 6\\n4 2\\n4 2\\n6 8\\n1 5\\n4 8\\n6 1\\n5 7\\n1 4\\n5 5\\n1 5\\n2 4\\n4 2\\n3 4\\n1 4\\n1 4\\n5 1\\n5 1\\n5 2\\n2 6\\n1 5\\n2 5\\n3 4\\n5 1\\n1 4\\n6 7\\n2 4\\n4 4\\n4 3\\n5 4\\n1 2\\n1 6\\n1 3\\n4 2\\n2 1\\n5 6\\n1 2\\n1 3\\n2 3\\n5 5\\n3 1\\n5 5\\n2 4\\n4 1\\n2 4\\n5 2\\n6 1\\n1 5\\n1 1\\n1 6\\n4 1\\n1 1\\n1 5\\n5 6\\n2 3\\n1 5\\n2 1\\n4 5\\n1 3\\n3 5\\n5 5\\n5 3\\n6 5\\n4 5\\n4 2\\n1 4\\n5 2\\n4 3\\n5 3\\n3 2\\n3 4\\n2 4\\n1 3\\n5 3\\n5 2\\n6 5\\n5 3\\n1 4\\n3 5\\n5 5\\n1 4\\n1 2\\n6 3\\n6 3\\n1 6\\n1 4\\n1 6\\n4 4\\n2 2\\n5 4\\n4 1\\n2 5\\n5 2\\n1 4\\n4 6\\n5 2\\n4 4\\n5 5\\n2 1\\n4 3\\n6 5\\n1 3\\n5 1\\n5 1\\n5 1\\n4 1\\n1 4\\n3 2\\n1 5\\n2 1\\n3 1\\n2 1\\n4 4\\n4 1\\n3 4\\n2 4\\n1 6\\n6 4\\n2 5\\n6 5\\n2 4\\n5 3\\n5 1\\n2 5\\n3 4\\n3 5\\n1 2\\n5 2\\n4 6\\n6 5\\n1 3\\n1 1\\n4 6\\n6 1\\n2 3\\n5 2\\n5 1\\n1 2\\n2 2\\n1 5\\n5 1\\n1 4\\n2 1\\n1 5\\n1 6\\n2 3\\n2 3\\n5 3\\n4 6\\n3 2\\n5 3\\n5 3\\n5 5\\n1 4\\n1 2\\n1 3\\n2 2\\n2 1\\n2 3\\n1 3\\n2 5\\n1 6\\n2 6\\n4 1\\n1 4\\n3 4\\n3 4\\n5 3\\n5 4\\n3 5\\n3 5\\n4 4\\n4 1\\n4 1\\n3 2\\n2 2\\n4 4\\n4 4\\n4 3\\n5 4\\n2 5\\n5 4\\n2 1\\n1 1\\n2 4\\n5 3\\n4 1\\n3 5\\n1 4\\n1 3\\n4 3\\n3 5\\n5 5\\n1 5\\n4 5\\n6 1\\n5 5\\n3 2\\n5 3\\n3 4\\n2 4\\n5 5\\n3 5\\n5 3\\n4 5\\n1 4\\n1 4\\n3 5\\n1 5\\n5 5\\n5 5\\n4 5\\n2 4\\n1 5\\n5 4\\n5 1\\n4 4\\n5 4\\n4 4\\n4 4\\n5 2\\n4 4\\n4 3\\n1 1\\n1 6\\n2 4\\n4 1\\n2 5\\n5 4\\n3 6\\n1 2\\n2 4\\n3 6\\n3 6\\n2 5\\n5 4\\n2 5\\n4 4\\n2 5\\n5 2\\n4 3\\n5 1\\n2 2\\n4 2\\n5 6\\n4 2\\n1 6\\n3 2\\n5 2\\n2 4\\n2 1\\n3 5\\n3 4\\n3 4\\n1 4\\n3 5\\n2 4\\n2 4\\n5 4\\n4 4\\n1 4\\n1 4\\n3 2\\n3 5\\n2 2\\n3 5\\n1 2\\n1 5\\n1 5\\n3 5\\n2 4\\n4 4\\n1 6\\n1 5\\n2 4\\n2 5\\n3 2\\n1 5\\n2 4\\n3 6\\n1 6\\n1 4\\n3 4\\n1 1\\n1 4\\n1 3\\n1 5\\n4 4\\n5 4\\n5 4\\n2 5\\n2 4\\n2 4\\n4 3\\n1 2\\n1 1\\n2 5\\n2 4\\n5 3\\n4 1\\n1 2\\n3 5\\n2 4\\n3 5\\n2 4\\n2 4\\n3 3\\n2 6\\n5 5\\n4 6\\n5 6\\n5 2\\n2 5\\n3 3\\n4 5\\n3 6\\n2 5\\n2 4\\n2 5\\n5 2\\n3 5\\n5 4\\n5 1\\n1 6\\n3 5\\n5 4\\n5 1\\n2 3\\n4 4\\n1 4\\n1 2\\"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1\\n1\\n') == '2'\nassert solution('2\\n1\\n1\\n') == '2'\nassert solution('2\\n2\\n2\\n') == '2'\nassert solution('3\\n1\\n1\\n') == '3'\nassert solution('3\\n2\\n2\\n') == '3'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"shovel time!\"\nassert solution(stdin=\"1 1\") == \"shovel time!\"\nassert solution(stdin=\"2 1\") == \"shovel time!\"\nassert solution(stdin=\"2 2\") == \"shovel time!\""
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n3\n2 4\n3 1''') =='shovel time!'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 1 2\\n\") == \"3\"\nassert solution(\"5\\n1 1 1 2 2\\n\") == \"5\"\nassert solution(\"1\\n\") == \"1\"\nprint(\"You passed all tests!\")"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 2 1 2\n''') == '3'\nassert solution('''2\n1 2\n''') == '1'\nassert solution('''1\n1\n''') == '1'\n\nassert solution('''1\n2\n''') == '0'"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n1\\n3\\n') == '3'\nassert solution('2\\n3\\n1\\n3\\n') == '2'\n\"\"\""
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2 1 2') == '3'\nassert solution('4\\n1 2 1 2 1 2') == '2'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 2 1 2\") == \"3\"\nassert solution(\"5\\n1 2 1 2 1 2\") == \"4\"\nassert solution(\"1\\n1\") == \"1\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4\n1 2 1 2\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n10\n10 1 10 3 2 4 6 5 8 7 9\n\"\"\"\n) == \"9\"\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 1 2\\n') == '3'\nassert solution('10\\n3 5 2 6 1 2 7 5 1\\n') == '9'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 2 1 2\n''') == '3'\nassert solution('''\n4\n1 2 1 2\n''') == '2'\nassert solution('''\n5\n2 1 5 2 2\n''') == '1'\nassert solution('''\n6\n1 5 5 5 5 5\n''') == '5'\nassert solution('''\n10\n4 6 2 5 1 5 5 5 5 4\n''') == '2'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n1 2 1 2\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4\n1 2 1 2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 2 1 2\n''') == '3'\nassert solution('''\n4\n1 3 1 3\n''') == '3'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4 999999937\") == \"79\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4 3\") == \"2\"\nassert solution(\"6 3 2\") == \"1\"\nassert solution(\"4 6 5\") == \"1\"\nassert solution(\"2 3 4\") == \"1\"\nassert solution(\"3 1 1\") == \"0\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    4 4 999999937\n    ''') == '79'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4 999999937\n''') == '79'"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '4 4 999999937') == '79'\nassert solution(\n    '2 2 1') == '3'\nassert solution(\n    '3 3 1') == '4'\nassert solution(\n    '2 2 2') == '2'\nassert solution(\n    '3 3 2') == '2'\n\nimport math\nfrom functools import lru_cache\n\n@lru_cache(maxsize=100000)\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 7 999999937') == '79'\nprint(solution(input()))\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 999999937') == '79'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"79\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\nassert solution(\"16 5 999999937\") == \"20\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4 6\n1 1 0\n0 0 1\n1 0 1\n1 1 1''') == '74'\nassert solution('''5 4 6\n1 0 0\n0 0 0\n0 1 0\n0 0 0\n1 0 0\n1 0 0''') == '75'\nprint(solution('''\n2 2 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\\n\") == \"zucchini\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini'\n\nassert solution('''\n3\n2 +pork +mushroom +chicken -potato\n1 +chicken +apple +tomato -lemon\n''') == 'pork'\n\nassert solution('''\n4\n2 +salt +pepper +peppers +onions -sausages\n1 +pepper +peppers +onions +eggs -sausages\n''') =='salt'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\\n\") == \"zucchini\\nmushrooms\\n\"\nprint(solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\\n\"))"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini'\nassert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n+pepperoni\n''') == 'zucchini pepperoni'\nassert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n+pepperoni\n''') == 'zucchini pepperoni'\nassert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n+pepperoni\n+chicken\n''') == 'zucchini pepperoni chicken'\nassert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n+pepperoni\n+chicken\n+pizza\n''') == 'zucchini pepperoni chicken pizza'\n''')\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini'\nassert solution('''\n5 +zucchini +mozzarella +mushrooms -artichoke\n-cheese -pepper -pepperoni\n''') == 'zucchini'\nassert solution('''\n5 +zucchini +mozzarella +mushrooms -artichoke\n-cheese +pepper -pepperoni\n''') == 'zucchini'\nassert solution('''\n6 +zucchini +mozzarella +mushrooms -artichoke\n-cheese +pepper +pepperoni\n''') == 'zucchini'\nassert solution('''\n6 +zucchini +mozzarella +mushrooms -artichoke\n-cheese +pepperoni -pepper\n''') == 'zucchini'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 +zucchini +mozzarella +mushrooms -artichoke\") == \"zucchini\"\nassert solution(\"1 +x +y -z +w +v\") == \"x y z w v\""
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n4 +zucchini +mozzarella +mushrooms -artichoke\\n') == 'zucchini\\nmushrooms\\nmozzarella\\nartichoke'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n4 +zucchini +mozzarella +mushrooms -artichoke\\n') == 'zucchini\\nmozzarella\\nmushrooms\\nartichoke'\nprint(solution('''\n5 +apricot +apple +avocado +banana +cherry +pineapple +watermelon\n6 -pear +grape +strawberry +raspberry +mango +strawberry +kiwifruit\n5 -grape +kiwifruit +watermelon +cranberry +orange +papaya +mango\n1 +banana +cherry +strawberry +pineapple\n3 +watermelon +strawberry +pineapple +berry\n4 +mushrooms +pear +cherry +mango +strawberry +kiwifruit\n3 -banana +watermelon +mango +papaya +pineapple +kiwifruit\n1 +strawberry +grape +banana +cherry +pear +kiwifruit +strawberry\n5 +strawberry +cherry +pear +kiwifruit\n3 +pineapple +cherry +pear +kiwifruit +strawberry +pineapple\n4 +watermelon +strawberry +pear +kiwifruit\n'''))\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"zucchini\"\nassert solution(\"2\") == \"\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nartichoke'\nassert solution('''\n2\n+apple +banana -grapes +cherry -pineapple\n''') == 'banana'\nassert solution('''\n3\n+apple +banana -grapes +cherry -pineapple\n''') == 'cherry'\nassert solution('''\n4\n+apple +banana -grapes +cherry -pineapple\n''') == 'pineapple'\n'''\n)\n\n'''\n\"Problem: Top-k Heap\"\nGiven k items with weights, and a sequence of item weights, find how to construct a k-heap such that all items are larger than their weights\n\n\"If given (1) as the input, and (2) as the output, return the expression that does so to the input, and print the result to the screen\"\n\n\"Solution: Heap Construction\"\n\"What is a Heap? A heap is a complete binary tree, a tree that satisfies these two properties:\n\nHeaps are ordered by the values stored in each node\u2019s key attribute.\nAll of the values in a heap are larger than or equal to the values in the keys of every node in the left subtree of the node, and smaller than the values in the keys of every node in the right subtree of the node.\n\n\"The key attribute of each node holds the key value of the current node.\n\nThis means that we can use the key attribute to traverse through the tree, and find the min/max value of the heap.\n\n\"The key of a node is found by adding its value to its parent\u2019s key value.\n\n\"All of the values in a heap are larger than or equal to the values in the keys of every node in the left subtree of the node, and smaller than the values in the keys of every node in the right subtree of the node.\"\n\n\"If the key attribute is not present, there is no parent node for this node, and so the key value is just the value of the node itself.\"\n\n\"When a node is removed, the key value of its parent becomes the key value of the child node.\n\n\"If a node has no parent node, it becomes the root node.\"\n\n\"If the value of a node is less than its key value, then it should be removed from the tree.\"\n\n\"If the value of a node is greater than its key value, then it should be placed in the tree in the place that its key value was found in the tree.\"\n\n\"If a node\u2019s value is equal to its key value, it is not removed from the tree.\"\n\n\"Below is an example that illustrates a heap from the input:\n\n\"Below is an example that illustrates a heap from the input:\"\n\n\"Create a Heap from the input:\n\nInput:\"\n3\n5 -1 7 2 6\n\nOutput:\"\n4\n1\n2\n3\n\n\"Possible Algorithms:\"\n\n\"1. Using Heap Construction\"\n\"Create a min heap and a max heap. If the node value is less than the value of its parent node, then put the node in the min heap. If the node value is greater than the value of its parent node, then put the node in the max heap.\"\n\n\"2. Using Heap Removing\"\n\"Create a min heap and a max heap. If the node value is less than the value of its parent node, then remove the node from the heap. If the node value is greater than the value of its parent node, then remove the node from the heap.\"\n\n\"3. Using A.key = A.key + A.parent.key\"\n\"In the first step, the value of A.key is computed by adding the value of A's parent node\u2019s key to it. This would result in A\u2019s key being 5 (since A\u2019s parent node\u2019s value of 5 was stored in A\u2019s key attribute, so it is the sum of its parent node\u2019s value and its own value). If A\u2019s parent node\u2019s value was smaller than A\u2019s own value, then the result would be 5 (since its parent\u2019s value of 5 was smaller than itself, so the result would be 5) and A\u2019s key would be 5.\n\n\"In the second step, if A\u2019s key value was greater than the value of A\u2019s parent node\u2019s key value, then the key value of A is updated to the value of A\u2019s parent node\u2019s key value, then the value of A\u2019s parent node\u2019s key attribute is updated to its key value, and A\u2019s key attribute is updated to 0.\n\n\"In the third step, if A\u2019s key value was smaller than the value of A\u2019s parent node\u2019s key value, then the key value of A is updated to the value of A\u2019s parent node\u2019s key value, then the value of A\u2019s parent node\u2019s key attribute is updated to its key value, and A\u2019s key attribute is updated to 0.\n\n\"4. Creating a heap\"\n\"A heap can be created with any number of nodes, each with a value, using the heapify function.\"\n\n\"Example: \"\nheapify([1, 2, 3])\n\n\"The heapify function takes as input a list of nodes, and changes them into a heap in ascending order. It then returns the new heap.\"\n\n\"The heapify function does not modify the input list, and thus the original list is unchanged.\"\n\n\"4. Creating a Heap from the input:\n\nInput:\"\n2\n-1 7 2 6\n\nOutput:\"\n-1\n2\n3\n6\n\n\"Heap Sort\"\n\"Sort a heap using Heap Sort. The heap will be in the correct order and will be in ascending order (smallest to largest).\"\n\n\"4. Heap Sort\"\n\"Create a Heap from the input:\n\nInput:\"\n2\n-1 7 2 6\n\nOutput:\"\n-1\n2\n3\n6\n\n\"5. Creating a Heap\"\n\"Create a heap from the input:\n\nInput:\"\n3\n-1 7 2 6\n\nOutput:\"\n3\n2\n6\n\n\"Creating a Heap"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'S'\nassert solution('1 2 3 4') == 'S'\nassert solution('1 2 3 4 5 6 7 8 9 10') == 'S'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"PS\"\nassert solution(\"3 3\") == \"PP\"\nassert solution(\"3 4\") == \"RR\"\nassert solution(\"2 3\") == \"PP\"\nassert solution(\"1 3\") == \"PS\""
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4') == 'PS'\n\nTESTS:\n\nRUNNER:\n\nimport os\nimport sys\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nimport runner"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\nPP\nRR\nPS\nSS\n''') == 'PS'\n\nassert solution('''\n3\nPP\nRR\nPS\nSS\n''') == 'PP'\n\nassert solution('''\n3\nRR\nPP\nPS\nSS\n''') == 'SS'\n\nassert solution('''\n3\nPS\nRR\nPP\nSS\n''') == 'PS'"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\nPP\nRR\nPS\nSS\n\"\"\") == \"PP\"\n\nassert solution(\"\"\"\n2\nPP\nPP\n\"\"\") == \"PP\"\n\nassert solution(\"\"\"\n2\nRR\nPP\n\"\"\") == \"PP\"\n\nassert solution(\"\"\"\n3\nRR\nPP\nPS\n\"\"\") == \"PP\"\n\nassert solution(\"\"\"\n3\nPP\nPP\n\"\"\") == \"PP\""
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"PP\"\nassert solution(\"1 2\") == \"PP\"\nassert solution(\"2 3\") == \"RR\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'P'\nassert solution('2') == 'S'\nassert solution('3') == 'P'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"PS\"\nassert solution(\"2 2\") == \"PS\"\nassert solution(\"4 1\") == \"SS\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\nPP\\nRR\\nPS\\nSS\") == \"SS\"\nassert solution(\"4\\nPS\\nSS\\nPP\\nRR\") == \"SS\"\nassert solution(\"4\\nPS\\nPP\\nPS\\nPS\") == \"SS\"\nassert solution(\"4\\nSS\\nSS\\nSS\\nSS\") == \"SS\"\nassert solution(\"5\\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\nR\nR\nR\nR\nP\nR\nR\nR\nR\nP\nP\nP\nP\nP\nP\nR\nR\nR\nR\nR\nP\nR\nP\nR\nP\nP\nP\nR\nR\nR\nP\nP\nP\nP\nP\nR\nP\nP\nP\nR\nP\nP\nR\nR\nP\nR\nR\nR\nR\nR\nR\nP\nP\nP\nP\nR\nR\nR\nP\nR\nP\nR\nR\nP\nP\nR\nR\nR\nR\nR\nR\nR\nR\nR\nR\nR\nR\nR\nR\nP\nP\nP\nP\nR\nP\nP\nR\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\nP\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n0.1 2.0\n0\n0\n0\n0\n0\n''') == '288.0'\nassert solution('''\n5\n0.1 2.0\n2\n0\n0\n0\n0\n''') == '2.0'\nassert solution('''\n5\n0.1 2.0\n2\n0\n0\n0\n0\n''') == '5.0'\nassert solution('''\n5\n0.1 2.0\n2\n0\n0\n0\n0\n''') == '1.0'\nassert solution('''\n5\n0.1 2.0\n2\n0\n0\n0\n0\n''') == '0.0'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0') == '288'\nassert solution('10\\n0.3 0.1 0.6\\n3\\n4\\n0.4\\n6\\n0.4\\n2\\n1\\n0.5\\n1\\n0.5\\n1\\n0.5\\n1\\n0.5\\n1\\n') == '567.75'\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"388.0\""
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0.01\"\nassert solution(\"5\") == \"288.0\"\nassert solution(\"3\") == \"1.0\"\nassert solution(\"4\") == \"6.0\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == '288'\nassert solution('1\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == '0'\nassert solution('1\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == '0'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n0.1 2.0\n0\n0\n0\n0\n0\n''') == '288.00000000000002'\nassert solution('''5\n0.1 2.0\n0\n0\n0\n0\n0\n''') == '288.00000000000002'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0') == '288'\nassert solution('1\\n0.1 0.3\\n0\\n0\\n0') == '0'\nassert solution('1\\n0.1 0.3\\n1\\n0\\n0') == '288'\nassert solution('1\\n0.1 0.3\\n0\\n1\\n0') == '336'\nassert solution('1\\n0.1 0.3\\n0\\n0\\n1') == '336'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == '288'\nprint(solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n'))\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '288'\nassert solution('10') == '216'\nassert solution('11') == '190'\nassert solution('1000000') == '1000000.0'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == '288.0'\nassert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == '288.0'\nassert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == '290.0'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"pastimeofwhimsy\") == \"2\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('pastimeofwhimsy') == '1'\n\nInput:\nyarn\nOutput:\n2\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('pastimeofwhimsy') == '1'\n\nExplanation:\nFor $S = \u201cpastimeofwhimsy\u201d$, the meow factor is 1 because we only need to insert 'p' and 'a' (a bit more expensive than inserting 'a' followed by 'p'). To find out more about the meow factor, refer to the problem description."
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '1'"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('pastimeofwhimsy') == '1'\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('pastimeofwhimsy') == '1'\nassert solution('mississippi') == '4'\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('pastimeofwhimsy') == '1'\nassert solution('pysource') == '0'\n\"\"\"\n\nstdin = input()\nmeow_factor = stdin.count('meow')\nprint(meow_factor)\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"cat\") == \"cat\"\nassert solution(\"pastimeofwhimsy\") == \"1\"\nassert solution(\"perfect\") == \"2\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('pastimeofwhimsy') == 1\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n5. Write a function which takes a list of integers and returns a new list where all even numbers are on the end and all odd numbers are at the beginning of the new list.\n\nWrite a program to solve the above problem.\n\n-----Input-----\nThe input consists of a single line containing a list of integers \u2018L\u2019. The elements of the list are separated by a single space. The length of the list is at least 2. The elements of the list are at least 0 and at most 100.\n\n-----Output-----\nOutput a single line consisting of a list of integers.\n\n-----Examples-----\nSample Input:\n1 2 3 4 5\nSample Output:\n2 1 4 3\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    'pastimeofwhimsy') == '1'\nassert solution(\n    'wassupwhimsy') == '2'"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n1 2 2 1 \n''') == 'YES'\nassert solution('''\n3 4\n1 2 2 1 \n''') == 'NO'\n'''\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1 2\n1 2''') == 'YES'\nassert solution('''3\n1 2\n2 3''') == 'NO'\nassert solution('''5\n1 2 2 1 2\n2 3 3 1\n3 4 4 1\n4 5 5 2''') == 'YES'\nassert solution('''10\n1 2 2 1 2 1 2 1 2 1\n2 3 3 1\n3 4 4 1\n4 5 5 2\n5 6 6 2\n6 7 7 2\n7 8 8 2\n8 9 9 2\n9 10 10 2''') == 'YES'\nassert solution('''1000\n1 2 2 1 2 1 2 1 2 1\n2 3 3 1\n3 4 4 1\n4 5 5 2\n5 6 6 2\n6 7 7 2\n7 8 8 2\n8 9 9 2\n9 10 10 2\n10 11 11 2\n11 12 12 2\n12 13 13 2\n13 14 14 2\n14 15 15 2\n15 16 16 2\n16 17 17 2\n17 18 18 2\n18 19 19 2\n19 20 20 2''') == 'NO'"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4\\n1 2 2 1\\n') == 'YES'\nassert solution('10 3\\n1 2 3 4 5 6 7 8 9 10\\n') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('2 3 1 2') == 'NO'\nassert solution('5 5') == 'YES'\nassert solution('1 1 1 1 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 2 1 \n''') == 'YES'\n'''\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('5 2') == 'NO'\n\"\"\"\nimport re\nimport sys"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4\\n1 2 2 1') == 'YES'\nassert solution('10 100\\n5 8 2 3 4 1 2 1\\n') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 1\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"10 3\") == \"YES\""
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 4\n1 2 2 1 \n''') == 'YES'\nassert solution('''\n1 4\n1 2 2 1 \n''') == 'NO'\n'''\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n4\n\"\"\") == \"3/1\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 2\n3\n4\n''') == '3/1'\n\nassert solution('''\n2\n1 2\n3\n4\n''') == '3/1'\n\nassert solution('''\n3\n1 2\n2 3\n4\n''') == '2/2'\n\nassert solution('''\n3\n1 2\n2 3\n4\n''') == '2/1'\n\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '1/1'"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"5/3\"\nprint(solution())"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3\\n4\") == \"1/2\""
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n7\n2 1\n3 4\n6\n1 2\n1 3\n1 4\n4 1\n\"\"\") == \"3/4\"\nassert solution(\"\"\"\n20\n15 16\n20 21\n19 22\n18 23\n17 24\n15 16\n13 14\n11 12\n10 13\n9 14\n8 15\n7 16\n6 17\n5 18\n4 19\n3 20\n2 21\n1 22\n\"\"\") == \"1/2\"\nassert solution(\"\"\"\n24\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n\"\"\") == \"2/1\"\nassert solution(\"\"\"\n43\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n37 38\n39 40\n41 42\n43 44\n\"\"\") == \"1/2\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n3\\n4') == '3/1'\nassert solution('1 2\\n3\\n3') == '1/1'\nassert solution('1 2\\n3\\n4') == '1/1'\nassert solution('3\\n2\\n4') == '1/2'\nassert solution('3\\n4\\n2') == '1/4'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\") == \"3/1\"\nassert solution(\"3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\") == \"3/1\"\nassert solution(\"1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"11/9\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2\n3\n4\n''') == '3/1'\nassert solution('''7\n1 2\n2 3\n1 4\n3 4\n5\n2\n1\n''') == '7/1'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"1/2\"\nassert solution(\"1 2 3\") == \"1/2/3\"\nassert solution(\"1 2 3 4\") == \"1/2/3/4\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n3\\n') == '3/1'\nassert solution('10\\n1 2\\n2 4\\n') == '1/2'\n\"\"\""
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '0.0000'\nassert solution('2') == '0.0040'\nassert solution('1') == '0.2418'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\nassert solution('3\\n1.2 10.2\\n2.2 15.2\\n3.2 10.2\\n4.2 15.2') == '1.2000000'"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1.2 10.2') == '1.114672365'\nassert solution('2.2 15.2') == '0.2630253482'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2.2 10.2') == '1.114672365'\nassert solution('1\\n1.2 15.2') == '1.003558'"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1.2 10.2\\n2.2 15.2\\n') == '1.114672365'"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1.114672365'\nassert solution('1') == '0.957323334'\nassert solution('1000') == '9.079722084'\n\nprint(solution(input()))"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1.2 10.2\\n2.2 15.2\") == \"1.11562365\"\nassert solution(\"10\\n0.1 0.2\\n0.1 0.2\") == \"0.1048576\"\nassert solution(\"100\\n0.1 0.2\\n0.1 0.2\") == \"0.1000000000000\"\nassert solution(\"100\\n1.0 0.2\\n0.1 0.2\") == \"0.1000000000000\"\nassert solution(\"100\\n0.1 0.2\\n1.0 0.2\") == \"0.1000000000000\"\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1.114672365'\nassert solution('1.2 10.2') == '1.114672365'\nassert solution('2.2 15.2') == '1.114672365'\n\"\"\"\nimport math"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0.0'\nassert solution('2') == '1.166666666667'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n0 3\n1 1\n2 1\n2 0\n\"\"\") == \"3 2 1 2\"\nassert solution(\"\"\"\n4\n0 0\n1 1\n2 1\n2 0\n\"\"\") == \"4 3 1 1\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n0 3\\n1 1\\n2 1\\n2 0') == '3 1 2 3'\nassert solution('5\\n0 2 3 0 3\\n1 1 2 1 1') == '5 1 2 2 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n0 3\n1 1\n2 1\n2 0\n''') == '''\n3\n1 2 3 2\n'''\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n0 3\n1 1\n2 1\n2 0\n''') == '3 1 2 3'\nassert solution('''\n3\n1 4\n2 1\n2 0\n''') == '2 1'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1 2 3 2 0'\nassert solution('7') == '3 2 3 1 0 1 1'\nassert solution('6') == '1 2 3 2 3 0'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n0 3\n1 1\n2 1\n2 0\n4\nSample Input 2:\n2\n2 4\n2 2\nSample Output 2:\n2\n4''') == '3\\n1 2 3 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"4\\n0 3\\n1 1\\n2 1\\n2 0\\n\") == \"3\\n1 2 3 2\"\nassert solution(\n    \"3\\n0 2\\n2 1\\n1 0\\n\") == \"2\\n1 2\"\nassert solution(\n    \"10\\n0 2\\n1 5\\n3 3\\n3 2\\n2 5\\n5 2\\n2 3\\n2 3\\n3 5\\n2 4\\n2 5\\n3 4\\n3 3\\n3 2\\n2 2\\n\") == \"4\\n1 2\\n1 2\\n1 3\\n1 3\\n1 3\\n1 2\\n1 4\""
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\n2\\n2\\n') == '1 2 3\\n2 2\\n'\nprint('solution() complete! Time elapsed: {:.3f}s'.format(time.time() - start_time))\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n0 3\n1 1\n2 1\n2 0\n\"\"\") == \"3 1 2 3\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 3\n1 1\n2 1\n2 0\n''') == '''\n3\n1 2 3 2\n'''\nassert solution('''\n5\n1 1\n3 2\n1 4\n1 2\n2 4\n''') == '''\n3\n1 2 3 1\n'''\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1 2 1 3''') == 'none'\nassert solution('''5\n1 2 5 3 4''') == '1 2 4'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '1'\nassert solution('''\n3\n1 1 2\n''') == 'none'\nassert solution('''\n4\n1 2 1 3\n''') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"3\"\n\ninputs = [\"5\", \"1 1 2 3 2\", \"1 1 2 3 2\", \"5\"]\nfor n in inputs:\n    print(solution(n))"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'none'\nprint('tests passed')"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 2 1 3') == 'none'\nassert solution('3\\n1 2 3') == '1 2 3'\nassert solution('3\\n1 2 1 3') == '1 2 1 3'\nassert solution('5\\n1 2 1 2 3') == '1 2 1 3'"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n3\n1 2 3\n\"\"\",\n    \"1\",\n) == \"1\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('3\\n1 1 2') == '2'\nassert solution('3\\n1 1 2 3') == '3'\nassert solution('4\\n1 1 2 1 3') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3\n    1 2 3\n    ''') == '1'\nassert solution('''\n    4\n    1 1 2 1 3\n    ''') == '1'\nassert solution('''\n    2\n    1 2\n    ''') == 'none'\nassert solution('''\n    10\n    1 1 2 2 3 3 3 2 2 1\n    ''') == '1 2 3'\nassert solution('''\n    20\n    1 1 1 1 1 2 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1 1 2\n\"\"\") == \"none\"\nassert solution(\"\"\"\n4\n1 2 1 3\n\"\"\") == \"none\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"none\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '5'\nassert solution('1') == '1'\nassert solution('1000000000') == '1000000000'\n\"\"\""
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4'\nassert solution('2 1 0 1 2 3 3') == '5'"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\") == \"6\"\nassert solution(\"7\") == \"3\"\nassert solution(\"8\") == \"4\"\nassert solution(\"9\") == \"4\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n1 1 2 3 2 2\n''') == '4'\n\nassert solution('''\n7\n2 1 0 1 2 3 3\n''') == '6'\n\nassert solution('''\n8\n1 1 2 2 2 1 3 3\n''') == '3'\n\nassert solution('''\n10\n1 1 1 1 1 1 1 2 2\n''') == '4'\n\nassert solution('''\n3\n1 1 1 2 2\n''') == '2'"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 0 1 2 3 3\") == \"5\"\nassert solution(\"13\\n1 1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"13\\n1 1 1 1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 0 1 2 3 3') == '5'\nassert solution('9 3 0 1 5 8 3 1 5 3') == '7'\nassert solution('1 2') == '1'\nassert solution('1 2 3 4 5 6 7') == '7'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n2 1 0 1 2 3 3\nSample Input:\n10\n2 2 0 2 2 4 2 2\nSample Output:\n4\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n2 1 0 1 2 3 3\n3\n4\n2 1 2 3\n''') == '5'\nassert solution('''\n4\n1 1 1 1\n2\n3\n''') == '2'\nassert solution('''\n5\n2 1 1 1 1\n2\n4\n''') == '3'\nassert solution('''\n2\n3\n''') == '2'\nassert solution('''\n1\n2\n''') == '1'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1 0 1 2 3 3\n''') == '5'\nassert solution('''\n10 3 0 0 1 2 3 0 1 1 2\n''') == '6'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 6\\n\"\n    \"#####\\n\"\n    \"#...#\\n\"\n    \"#_###\\n\"\n    \"#__.#\\n\"\n    \"#####\\n\"\n) == \"4 4 4 4 4\\n\"\n\nassert solution(\n    \"5 6\\n\"\n    \"###\\n\"\n    \"#...#\\n\"\n    \"#_###\\n\"\n    \"#__.#\\n\"\n    \"###\\n\"\n) == \"4 4 4 4 4\\n\"\n\nassert solution(\n    \"5 6\\n\"\n    \"#####\\n\"\n    \"#...#\\n\"\n    \"#_###\\n\"\n    \"#__.#\\n\"\n    \"#####\\n\"\n) == \"5 5 5 5\\n\"\n\nassert solution(\n    \"5 6\\n\"\n    \"#_###\\n\"\n    \"#__.#\\n\"\n    \"###\\n\"\n    \"#...#\\n\"\n    \"#####\\n\"\n) == \"0 0 0 0 0\\n\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == \"1 4 5 6 -1\"\nassert solution(\"5 6\") == \"1 4 5 6 -1\"\nassert solution(\"1 10\") == \"0 1 2 3 4 5 6 7 8 9 10 -1\"\nassert solution(\"1 1\") == \"0 0 1 -1\"\nassert solution(\"1 1\") == \"0 0 1 -1\"\n\n\"\"\""
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n_###\\n_M.#\\n#####\\n\") == \"1 4 5 6 -1\"\nassert solution(\"5 6\\n#####\\n#...#\\n_###\\n_M.#\\n#####\\n\") == \"1 4 5 6 -1\"\nassert solution(\"5 6\\n#####\\n#...#\\n_###\\n_M.#\\n#####\\n\") == \"1 4 5 6 -1\"\nassert solution(\"5 6\\n#####\\n#...#\\n_###\\n_M.#\\n#####\\n\") == \"1 4 5 6 -1\"\nassert solution(\"5 6\\n#####\\n#...#\\n_###\\n_M.#\\n#####\\n\") == \"1 4 5 6 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '-1 -1 -1 -1 -1\\n-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#__.#\\n#####\") == \"-1 -1 -1 -1 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n#####\\n#...#\\n_###\\n_M.#\\n__.#\") == \"4 4 5 6 -1\"\nassert solution(\"6 4\\n#####\\n#...#\\n_###\\n_M.#\\n__.#\") == \"3 4 5 6 -1\"\nassert solution(\"3 6\\n#...#\\n#...#\\n#...#\\n#...#\\n#...#\\n#...#\\n#...#\") == \"-1 -1 -1 -1 -1 -1 -1 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#__.#\\n#####\") == \"3 3 4 5 -1\\n4 5 1 0 -1\\n3 4 -1 2 -1\\n1 0 -1 3 -1\\n3 1 -1 2 -1\\n-1 -1 -1 -1 -1\"\nassert solution(\"4 4\\n#####\\n#_M.\\n#_M_#\\n###_#\\n#####\") == \"3 4 0 3 -1\\n4 4 -1 1 -1\\n4 3 1 2 -1\\n1 0 -1 3 -1\\n3 1 -1 2 -1\\n-1 -1 -1 -1 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 6\n#####\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\nassert solution('''\n5 3 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'inf'\nassert solution('''\n4 3 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'inf'\n'''\n5 4 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n'''\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 3 1 2 1\\n2 1 2\\n1 1 2\\n1 2 2\\n1 3 2\\n1 2 3\\n\") == \"6\"\nassert solution(\"4\\n4 2 1\\n1 3 1\\n1 3 2\\n1 2 3\\n\") == \"impossible\"\nassert solution(\"4\\n1 3 1\\n1 2 1\\n1 3 2\\n1 2 3\\n\") == \"impossible\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n4 6 0\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3 5 1\n1\n1 2\n1 3\n1 4\n2 4\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n4 5 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"impossible\""
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"impossible\"\n\"\"\"\n\n###"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\nassert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'Impossible'\n'''\nimport math\nimport sys"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\nassert solution('''5 6 1\n1\n2 2 1\n1 3 2\n1 4 1\n1 5 1\n2 5 2\n3 5 3\n''') == '7'\nassert solution('''5 6 1\n1\n2 2 1\n1 3 2\n1 4 1\n1 5 1\n2 5 2\n3 5 3\n''') == '7'\n\n'''"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\") == \"6\"\nprint(solution(input()))"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 2 1') == '01001'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('4 1 2') == '01110'\nassert solution('5 6 2') == '01111'\nassert solution('9 4 2') == '10010'\nassert solution('8 4 2') == '10010'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"01001\""
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4 2 1') == '01001'"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('15 17 5 5') == '11111'\nassert solution('2 3 1 3') == '11111'\n\"\"\"\na,b,c,d = map(int, input().split())\nfor i in range(1,b+1):\n    for j in range(1,c+1):\n        for k in range(1,d+1):\n            if i == j == k:\n                continue\n            print(f'{i} {j} {k}')\nprint('impossible')"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 2 1') == '01001'"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\n\"\"\"\n\n\nimport re\n\na, b, c, d = map(int, input().split())"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\", \"Wrong answer\""
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"00\"\nassert solution(\"11\") == \"1010\"\nassert solution(\"11111\") == \"11110\"\nassert solution(\"1110000\") == \"01111001\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 2') == '1'\nassert solution('3 4 2 1') == '01001'\nassert solution('100 100 100 100') == '11100'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4') == 'possible'\nassert solution('3 5 7\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8') == 'impossible'\nassert solution('5 5 6\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8') == 'possible'\nassert solution('15 9 4\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\\n24 24\\n25 25\\n26 26\\n27 27\\n28 28\\n29 29\\n30 30\\n31 31\\n32 32\\n33 33\\n34 34\\n35 35\\n36 36\\n37 37\\n38 38\\n39 39\\n40 40\\n41 41\\n42 42\\n43 43\\n44 44\\n45 45\\n46 46\\n47 47\\n48 48\\n49 49\\n50 50\\n51 51\\n52 52\\n53 53\\n54 54\\n55 55\\n56 56\\n57 57\\n58 58\\n59 59\\n60 60\\n61 61\\n62 62\\n63 63\\n64 64\\n65 65\\n66 66\\n67 67\\n68 68\\n69 69\\n70 70\\n71 71\\n72 72\\n73 73\\n74 74\\n75 75\\n76 76\\n77 77\\n78 78\\n79 79\\n80 80\\n81 81\\n82 82\\n83 83\\n84 84\\n85 85\\n86 86\\n87 87\\n88 88\\n89 89\\n90 90\\n91 91\\n92 92\\n93 93\\n94 94\\n95 95\\n96 96\\n97 97\\n98 98\\n99 99\\n100 100\\n\\n101 101\\n102 102\\n103 103\\n104 104\\n105 105\\n106 106\\n107 107\\n108 108\\n109 109\\n110 110\\n111 111\\n112 112\\n113 113\\n114 114\\n115 115\\n116 116\\n117 117\\n118 118\\n119 119\\n120 120\\n121 121\\n122 122\\n123 123\\n124 124\\n125 125\\n126 126\\n127 127\\n128 128\\n129 129\\n130 130\\n131 131\\n132 132\\n133 133\\n134 134\\n135 135\\n136 136\\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'possible'\nassert solution('''\n1 2\n1 2\n2 1\n''') == 'impossible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'possible'\nassert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'impossible'\nassert solution('''\n3 5 6\n2 1\n1 2\n3 2\n2 3\n3 4\n3 5\n''') == 'impossible'\nassert solution('''\n4 4 6\n2 1\n1 2\n3 2\n2 3\n3 4\n3 5\n''') == 'impossible'\nassert solution('''\n4 4 6\n2 1\n1 2\n3 2\n2 3\n3 4\n3 5\n''') == 'possible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'possible'\nassert solution('5 6 1\\n2 3') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 6\\n1 1\\n1 2\\n2 2\\n2 3') == 'possible'\nassert solution('2 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4') == 'impossible'\nassert solution('2 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n4 5') == 'possible'\nassert solution('2 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n4 5\\n5 5') == 'impossible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n3 4 3\n1 2\n1 3\n2 3\n3 2\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"possible\"\n\"\"\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4 6\") == \"possible\"\nassert solution(\"2 2\") == \"impossible\"\nassert solution(\"1 2\") == \"impossible\"\nassert solution(\"1 3\") == \"impossible\"\nassert solution(\"2 3\") == \"possible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'possible'\nassert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n4 4\n''') == 'impossible'\n\"\"\""
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n\") == \"possible\"\nassert solution(\"1 3\\n2 2\\n4 3\\n2 4\\n3 3\\n3 4\\n\") == \"impossible\"\nassert solution(\"3 5\\n1 1\\n2 2\\n3 3\\n4 4\\n4 4\\n\") == \"impossible\"\nassert solution(\"1 1\\n1 2\\n2 2\\n2 2\\n\") == \"possible\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '3.0'\nassert solution('2') == '3.0'\nassert solution('3') == '0.0'\nassert solution('4') == '1.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\nassert solution('5\\n0 0 1\\n0 1 2\\n0 1 3\\n1 0 2\\n1 1 2\\n1 1 3') == '0.0'\nassert solution('5\\n0 0 1\\n0 1 2\\n0 1 3\\n1 0 2\\n1 1 2\\n1 1 3') == '0.0'\nassert solution('5\\n0 0 1\\n0 1 2\\n0 1 3\\n1 0 2\\n1 1 2\\n1 1 3') == '0.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n''') == '2.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n1 2 3\n1 3 2\n3 1 2\n3 2 1\n1 1 1\n2 2 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n2 2 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 2 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 2 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 2 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 1 2\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3\n2 0 3\n1 3 1\n1 0 0\n1 1 1\n2 0 3\n2 1 3"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == \"2.0\"\n\n--or--\n\nimport math"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\") == \"2.0\"\nassert solution(\"5\\n0 0 0 0 0\\n1 0 1 0\\n1 0 1 0\\n1 1 0 0\\n1 1 1 0\") == \"2.0\"\nassert solution(\"4\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\") == \"0.0\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n') == '2.0'"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n0 0 1\n0 1 1\n2 0 3\n2 1 3\nSample Input 2:\n6\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n4 0 0\n4 1 1\n4 2 2\n4 3 3\nSample Output 2:\n1.414\n\"\"\") == \"1.414\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n''') == '2.0\n\n'''\nA curious creature suddenly appears! You're not sure who it is or why.\n\nYou ask him one final question: what is the position of the other planet he has in space?\n\nSample Input:\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\nSample Output:\n1\n'''\nassert solution('''\n2\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n''') == '1'\n\n'''\nYou don't even know how to read binary numbers!\n\nYou don't even know what integer representations you need to use to keep track of your position.\n\nYou don't even know how to calculate the Manhattan distance.\n\nYou don't even know how to use two `for` loops!\n\nOh no! You just started working with space travel today and you've been falling behind.\n\nYour team is missing a mission! We are missing a step to get this research right.\n\nSolve the problem as quickly as possible!\n\nSample Input:\n2\n5 1 4\n5 1 4\nSample Output:\n3\n'''\nassert solution('''\n2\n5 1 4\n5 1 4\n''') == '3'\n\n'''\nYou've got the hang of this game, and now your mission is to figure out the position of the other planet!\n\nYou're given the position of each planet, and the distance to the other planet. Complete the function that takes these values as input, and returns the position of the other planet.\n\nSample Input:\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\nSample Output:\n2 1 3\n'''\nassert solution('''\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n''') == '2 1 3'\n\n'''\nYou're given the position of each planet, and the distance to the other planet. Complete the function that takes these values as input, and returns the position of the other planet.\n\nSample Input:\n4\n5 1 4\n5 1 4\n1 2 1\n1 3 1\nSample Output:\n3 2 1\n'''\nassert solution('''\n4\n5 1 4\n5 1 4\n1 2 1\n1 3 1\n''') == '3 2 1'\n\n'''\nGiven a graph represented by an adjacency matrix A, find the degree of every vertex in the graph.\n\nConstraints\n1 <= N <= 10^5\n1 <= A[i][j] <= 10^9\n'''\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([2,0,1,0,1,2]) == '2.0'\nassert solution([0,0,1,2,2,3,3,4,3,4,4,4]) == '2.0'\nassert solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == '25.0'\nassert solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2\") == \"4\"\nassert solution(\"8\\n8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\") == \"0\"\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4 3 2 1 6 7') == '4'\nassert solution('5 5 1 1 3 4 7') == '3'\nassert solution('3 7 1 4 5 6 2') == '1'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n3 5\n1 2 3\n4 5 6''') == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\nassert solution('5\\n6 5 4 1 1 2 3\\n7 3 5 6 1 4\\n4 5 5 6 1 3\\n2 6 2 7 2 5\\n3 3 7 1 6') == '3'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4 3 2 1 6 7') == '4'\nassert solution('5 5 1 1 3 4 7') == '3'\nassert solution('3 7 1 4 5 6 2') == '2'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\\\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\\\n''') == '4'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '2'\nassert solution('40') == '4'\nassert solution('-10 0') == '2'\nassert solution('-10 10') == '2'\nassert solution('-10 10') == '2'\n\n\"\"\""
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n-10 0\n-10 10''') == \"2\"\nassert solution('''5\n-10 0\n-10 10\n-10 -1\n-1 -10\n-10 -10''') == \"3\"\nassert solution('''4\n0 0\n1 1\n1 -1\n-1 1''') == \"1\"\n'''\n\na, b, c, d = list(map(int, input().split()))\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '2'\nassert solution('2') == '0'\nassert solution('2 -1 0') == '0'\nassert solution('4 -1 0') == '1'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n-10 0\n-10 10''') == '2'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('3\\n2\\n3') == '1'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '2'\nassert solution('10 -20') == '4'\nassert solution('10 0') == '0'\nassert solution('10 10') == '0'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10 0\") == \"10\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\n-10 0\n-10 10\n\"\"\") == \"2\"\nassert solution(\"\"\"5\n-10 -10\n-10 10\n\"\"\") == \"3\"\nassert solution(\"\"\"100\n0 -10\n-10 10\n\"\"\") == \"1\""
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '0'\n\nSample Input:\n4 4\nSample Output:\n1\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n    1 5\n    ''') == '0'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == \"0\"\nassert solution(\"7 2\") == \"1\"\nassert solution(\"9 13\") == \"2\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5') == '0'\nassert solution('5 5') == '1'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 5\n''') == '0'\nassert solution('''\n7 4\n''') == '1'\nassert solution('''\n10 6\n''') == '1'\n'''\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 5\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"3 4\") == \"1\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 5\") == \"0\"\nassert solution(\"2 5\") == \"0\"\nassert solution(\"3 5\") == \"1\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5') == '0'\nassert solution('100 50') == '19'\nassert solution('6 13') == '2'\nassert solution('1000 100') == '20'\nassert solution('100100') == '20'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5') == '0'\n\"\"\"\n\nk, n = map(int, input().split())"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 0\\n0 1\") == \"0 0\"\nassert solution(\"2 2\\n1 0 0\\n0 1 0\\n0 0 1\") == \"1 1\"\n\n\"\"\""
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0 0'\nassert solution('1 2') == '1 1'\nassert solution('1 2') == '0 0'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1''') == '0 0'\nassert solution('''2 2\n0 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1''') == '0 0'\n\nassert solution('''1 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1''') == '1 1'\nassert solution('''1 1\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1''') == '1 1'"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '0 0'\nassert solution('1 0') == '0 1'\nassert solution('3 3') == '1 1'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0 0\\n1 1\\n'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1''') == '0 0 1 1'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n''') == '0 0\\n1 1\\n'''\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0 0\\n1 1\\n'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\"\"\") == \"\"\"0 0\n1 1\"\"\"[1:-1]\n\nassert solution(\"\"\"2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\nSample Output:\n0 0\n1 1\"\"\"[1:-1]\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0 0\\n1 1\\n'\nassert solution('10 10\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 0.950000\n0.700000 50\n''') == '44.975'\nassert solution('''\n3 4 0.950000\n0.700000 50\n''') == '71.9765'\n''')"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 0.950000\\n0.700000 50\") == \"44.975\""
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\nassert solution('0.1 2\\n0.2\\n') == '0.1'\n\n'''\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 0.950000') == '44.975'\nassert solution('0.700000 50') == '44.975'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 0.950000') == \"44.975\"\nassert solution('0.700000 50') == \"50\""
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 0.950000') == '44.975'\nassert solution('0.700000 50') == '44.975'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\nassert solution('0 0.9\\n0.8') == '1.25'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2 0.950000\n0.700000 50''') == '44.975'\nassert solution('''1 2 0.950000\n0.700000 50\n50''') == '50.0'\nprint('SUCCESS: test_solution.py')"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 2 0.950000\n0.700000 50\n\"\"\") == \"44.975\"\n\"\"\""
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '3 2 3\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1\\n') == '2'\nassert solution(\n    '5 2\\n1 3\\n3\\n3\\n3\\n3\\n2\\n1\\n') == '3'\nassert solution(\n    '3 5\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1\\n') == 'IMPOSSIBLE'\nassert solution(\n    '8 8\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1\\n') == '1'\nassert solution(\n    '10 20\\n1 1\\n5 2\\n1 3\\n3\\n3\\n2\\n1\\n') == '2'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2 3\n1 1\n5 2\n1 3\n3''') == '2'\nassert solution('''2\n1\n4\n1\n4''') == 'IMPOSSIBLE'\nassert solution('''4\n1\n4\n1\n4''') == '3'\nassert solution('''1\n1\n1\n1\n1''') == '3'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\n\nassert solution(\"3 2 3\\n1 1\\n5 2\\n1 3\\n3\") == '2'\nassert solution(\"3 4 5\\n1 2\\n4 5\\n2 4\\n3 5\") == '5'\nassert solution(\"1 1\\n1 1\\n1 1\") == 'IMPOSSIBLE'\nassert solution(\"1 2\\n2 3\\n4 5\") == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n5 2\\n1 3\\n3\") == \"2\"\nassert solution(\"3 3\\n1 1\\n5 2\\n1 3\\n3\") == \"IMPOSSIBLE\"\nassert solution(\"1 1\\n5 2\\n1 3\\n2 4\\n2\\n3\") == \"2\"\nassert solution(\"1 1\\n5 2\\n1 3\\n2 4\\n3\") == \"3\"\nassert solution(\"1 1\\n5 2\\n1 3\\n2 4\\n3\\n3\") == \"3\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'IMPOSSIBLE'\nassert solution('3 2 3') == '2'\nassert solution('5 2') == '2'\nassert solution('1 3') == 'IMPOSSIBLE'\nassert solution('3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 3') == 'IMPOSSIBLE'\nassert solution('2 3 4') == '4'\nassert solution('10 2 5') == '5'\nassert solution('30 20 10') == '10'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 3') == '2'\nassert solution('2 2 2') == '2'\nassert solution('1 2 3') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 3') == '2'\nassert solution('3 2 4') == 'IMPOSSIBLE'\nassert solution('8 5 1') == '8'\nassert solution('8 6 1') == '8'\nassert solution('5 2 3') == '2'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 3') == '2'\nassert solution('1 1') == 'IMPOSSIBLE'\nassert solution('5 2') == '2'\nassert solution('1 3') == 'IMPOSSIBLE'\nassert solution('3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n''') == '2'\n\nassert solution('''\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n''') == 'IMPOSSIBLE'\n\n\"\"\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('9 0.0') == '9.0'\nassert solution('1') == '1.0'\nassert solution('9 -0.0') == '9.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '4.0'\nassert solution('2 2') == '0.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0\n''') == '4.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '2.0'\nassert solution('1 1') == '1.0'\n\n'''\n\nfrom math import sqrt"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0\n''') == '4.0'\nassert solution('''\n1 1\n0.0\n1.0\n''') == '1.0'\n'''"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0\n''') == '4.0'\nassert solution('''\n1 1\n1.0 1.0\n''') == '1.0'\nassert solution('''\n5 5\n0.0 0.0\n5.0 0.0\n0.0 5.0\n5.0 5.0\n0.0 0.0\n''') == '5.0'\n'''\n\nimport math"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5') == '4.0'\nassert solution('4 3') == '0.0'"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('0.0 6.0') == '6.0 0.0'\nassert solution('6.0 0.0') == '6.0 6.0'\nassert solution('6.0 6.0') == '4.0 4.0'\nassert solution('4.0 4.0') == '10.0 4.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('4 5') == '12.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 5\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0''') == \"4.0\"\nassert solution('''2 2\n0.0 0.0\n1.0 1.0\nSample Output:\n0.0\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"500\"\nassert solution(\"10\") == \"3500\"\nassert solution(\"12\") == \"50000\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30\\n') == '18000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '18000'"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n220 29\n195 20\n200 9\n180 30\nSample Output:\n18000\n''') == '18000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\nassert solution('2\\n220 29\\n195 20\\n200 9\\n180 30') == '0'\nassert solution('3\\n220 29\\n195 20\\n200 9\\n180 30') == '0'\nassert solution('4\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\nassert solution('5\\n220 29\\n195 20\\n200 9\\n180 30') == '0'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n220 29\n195 20\n200 9\n180 30\nSample Output:\n18000\n\"\"\") == \"18000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"18000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n220 29\n195 20\n200 9\n180 30\n''') == \"18000\"\nassert solution('''\n2\n20\n20\n''') == \"80\"\nassert solution('''\n2\n1\n2\n''') == \"2\"\nassert solution('''\n3\n300 20\n110 20\n150 10\n''') == \"16800\"\nassert solution('''\n3\n300 30\n100 20\n200 10\n''') == \"20000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n220 29\n195 20\n200 9\n\"\"\") == \"18000\"\nassert solution(\"\"\"\n5\n260 60\n250 60\n250 60\n260 60\n250 60\n\"\"\") == \"43000\"\nassert solution(\"\"\"\n5\n120 60\n100 60\n90 60\n80 60\n80 60\n\"\"\") == \"39000\"\nassert solution(\"\"\"\n5\n300 300\n300 300\n300 300\n300 300\n300 300\n\"\"\") == \"80000\"\nassert solution(\"\"\"\n5\n300 300\n300 300\n300 300\n300 300\n300 300\n\"\"\") == \"80000\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8\") == \"28\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8\") == \"28\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8\") == \"28\"\n\nSample Input:\nBUYSTICKERS\n4\nBUYER 1\nTICKERS 1\nERS 1\nSample Output:\nIMPOSSIBLE\n'''\n\n'''\nMY APPROACH:\n\nThe idea is to use a dictionary, where keys are the letters of the alphabet and the value is the index of the sticker in the set. We maintain a variable x, where x is the index of the sticker we are on. We then create a dictionary, where the keys are the words in the message and the values are the index of the sticker that spells the word. We then iterate over each word in the message. If the word is not in the dictionary, we return the word as an impossibility. If the word is not in the dictionary, we create a list of indexs of stickers we can use for it, and we assign the stickers to the word. We then iterate over the list of stickers. At any time, if we are at the end of the list of stickers, we can return the minimum cost and the words to spell. If we are not at the end of the list, then we can see if we can add one sticker to the word and see if we can add another sticker to it. If so, we increase the cost of the word by one sticker.\n\nIf we are at the end of the list of stickers, we can return the cost to spell the message with the set of stickers.\n\n'''\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8\") == \"28\"\n\"\"\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''BUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n''') == '28'"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"BUYSTICKERS\") == \"IMPOSSIBLE\", 'Your solution does not have the expected output.'\n\nfor _ in range(int(input())):\n    l = [list(map(str, input().split())) for _ in range(int(input()))]\n    print(f'{min(map(lambda x: min(map(lambda y: y[1], filter(lambda z: z[0] == x[0], l))), set(map(lambda x: x[0], l))))}')\n    '''\n    import sys\n    from collections import deque\n    from itertools import combinations\n    import heapq\n    sys.setrecursionlimit(10**6)\n    for _ in range(int(input())):\n        str1 = input()\n        l = deque(map(str, input().split()))\n        str2 = ''\n        for i in l:\n            str2 += i\n        res = []\n        for i in range(1, len(str1) + 1):\n            for c in combinations(str1, i):\n                if len(c) == len(str1):\n                    print('impossible')\n                    break\n                if set(c) == set(str2):\n                    res.append(len(c))\n        print(max(res))\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('BUYSTICKERS') == '28'\nassert solution('TICKERS') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\nassert solution(\"BUYER 10\") == \"28\"\nassert solution(\"STICKY 10\") == \"28\"\nassert solution(\"TICKERS 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''BUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8''') == '28'\nassert solution('''BUYSTICKERS\n4\nBUYER 10\nERS 8\nTICKERS 1\nSTICKY 10''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8') == '28'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 8') == 'INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5'\nassert solution('2 4 7') == 'INDV 1\\nCORP 1'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 8') == 'INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\\nCORP 5'\nassert solution('1 1') == 'INDV 1\\nINDV 1'\nassert solution('2 1') == 'INDV 1\\nINDV 1'\nassert solution('3 1') == 'CORP 1'\nassert solution('4 2') == 'INDV 2\\nINDV 2'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 8') == 'INDV 1 CORP 1'\nassert solution('10 7 9') == 'INDV 5 CORP 1'\nassert solution('15 4 6') == 'CORP 2 INDV 4'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 8') == 'CORP 2'\nassert solution('4 3 6') == 'CORP 3'\nassert solution('4 3 9') == 'CORP 3'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 8') == 'INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\\n'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 8') == 'CORP 1'\nassert solution('1 1') == 'INDV 1'\nassert solution('2 1') == 'INDV 1'\nassert solution('3 1') == 'INDV 2'\nassert solution('4 2') == 'INDV 2'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 8\") == \"CORP 1\"\nassert solution(\"5 3 9\") == \"INDV 2\"\nassert solution(\"5 3 10\") == \"INDV 5\"\nassert solution(\"4 4 5\") == \"INDV 1\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([5, 3, 8]) == \"INDV 1 CORP 1 INDV 2 CORP 1 INDV 3 CORP 1 INDV 4 CORP 2 INDV 5\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3 8') == 'INDV 2'\nassert solution('5 3 8') == 'CORP 1'"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 8') == 'CORP 2\\n' + \\\n                            'CORP 1\\n' + \\\n                            'CORP 3\\n' + \\\n                            'INDV 2\\n' + \\\n                            'INDV 3\\n' + \\\n                            'INDV 1\\n' + \\\n                            'INDV 4\\n' + \\\n                            'CORP 5\\n'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n10 1\n1\n0\n10\n10\nSample Output:\n2.4142135624''') == '2.4142135624'\n\nassert solution('''8\n10 1\n1\n0\n10\n10\n10\n10\n10\nSample Output:\n5.0''') == '5.0'\n\nassert solution('''10000\n10000\n1\n1\nSample Output:\n20000.0''') == '20000.0'\n\nassert solution('''1\n100\nSample Output:\n0.0''') == '0.0'\n\nassert solution('''5\n1\n0\n0\n0\n0\nSample Output:\n2.0''') == '2.0'"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n10 1\n1\n0\n10\n10\nSample Input 2:\n10\n5 6\n1\n0\n4\n10\n8\n7\nSample Output 2:\n7.421052631579\n''') == '7.421052631579'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n10 1\\n1\\n0\\n10\\n10\\n') == '2.4142135624'\nassert solution('50\\n10 10\\n10\\n20\\n10 10\\n10\\n') == '15.6563648645'\nassert solution('100\\n10 10\\n10\\n20\\n10 10\\n10\\n') == '50.0'\nassert solution('20\\n10 10\\n10\\n10\\n10 10\\n10\\n') == '10.0'\nassert solution('10000\\n10 10\\n10\\n10\\n10 10\\n10\\n') == '10000.0'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1.41421428571429'\nassert solution('4') == '2.23606797749979'\nassert solution('5') == '3.16227766016837'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2.4142135624'\nassert solution('1\\n1\\n0\\n10\\n10') == '1.0'\nassert solution('10\\n10\\n0\\n10\\n10') == '2.0'\nassert solution('5\\n10\\n10\\n10\\n10') == '1.0'\nassert solution('4\\n100\\n100\\n100\\n100') == '1.0'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2.4142135624'"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n10 1\n1\n0\n10\n10\n''') == '2.4142135624'\nassert solution('''\n3\n1 0\n0\n0\n''') == '1.0000000000'\nassert solution('''\n4\n4 3\n2 0\n0\n0\n''') == '0.166666666667'\nassert solution('''\n4\n4 1\n1\n0\n0\n''') == '0.166666666667'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n10 1\n1\n0\n10\n10''') == '2.4142135624'\nassert solution('''8\n10 1\n1\n0\n10\n10\n9\n10\n11''') == '4.828427124'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n    4\n    10 1\n    1\n    0\n    10\n    10\n    '''\n    ) == '2.4142135624'\n\nassert solution(\n    '''\n    4\n    10 1\n    1\n    0\n    10\n    10\n    '''\n    ) == '2.4142135624'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n10 1\\n1\\n0\\n10\\n10') == '2.4142135624'\nassert solution('10\\n20 1\\n2\\n10\\n10') == '4.5'\nassert solution('5\\n10 1\\n1\\n0\\n10\\n10') == '2.4142135624'\nassert solution('5\\n10 1\\n1\\n0\\n10\\n10') == '2.4142135624'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''6\n10 20 30 40 50 60 70 80\n10 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20\n20 20 20 20 20 20 20 20 20 20 20 20"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '17'\nassert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '17'\nassert solution('''\n4\n2 6 6 6\n2 2 2 2\n3 2 2 2\n3 3 3 3\n3 4 4 4\n2 4\n3 3\n''') == '18'\n''')"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '''\n    3\n    1 2 5\n    3 1 5\n    2 1\n    5 0\n    1 3\n    ''') == '15'\n\n    # input() reads a string with a line of input, stripping the '\\n' (newline) at the end.\n    # This is all you need for most Kickstart problems.\n    n = int(input()) # read and set the value of \"n\" to be n\n    \n    # if n is not between 1 and 25, print \"n must be between 1 and 25\"\n    if n < 1 or n > 25:\n        print('n must be between 1 and 25')\n    # else, print \"n must be between 1 and 25\"\n    \n    \n    # init variable y_1 with 0\n    y_1 = 0\n    \n    # init variable x_1 with 0\n    x_1 = 0\n    \n    # loop through stdin\n    for i in range(n-1):\n        # parse input\n        line = stdin.readline().strip().split()\n        u = int(line[0])\n        v = int(line[1])\n        c = int(line[2])\n        \n        # if u and v are both in range (1, n)\n        if 1 <= u <= n and 1 <= v <= n:\n            # if u and v are both connected with c\n            if u!= v and c!= 0:\n                # print cost\n                print(u,v,c)\n            # else, if u and v are connected with c but u!= v\n            else:\n                # if x_1 + u >= y_1\n                if x_1 + u >= y_1:\n                    # print 'u'\n                    print(u,v,c)\n                    # update x_1\n                    x_1 = u\n                    # update y_1\n                    y_1 = y_1 + u\n                # else, if y_1 + v >= x_1\n                elif y_1 + v >= x_1:\n                    # print 'v'\n                    print(u,v,c)\n                    # update y_1\n                    y_1 = y_1 + v\n                    # update x_1\n                    x_1 = x_1 + v\n    \n    # print y_1\n    print(y_1)\n    # print x_1\n    print(x_1)\n    # print y_1 + x_1\n    print(y_1+x_1)\n    # print y_1 + x_1 + c\n    print(y_1+x_1+c)\n    \n    # solution('')"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''4\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''5\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''5\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n2 3 5') == \"15\"\nassert solution('3\\n1 2 5') == \"17\"\nassert solution('3\\n3 1 5') == \"17\"\nassert solution('3\\n5 0') == \"0\"\nassert solution('1 3') == \"0\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''\n1\n3 4\n4 1\n4 1\n''') == '-1'\nassert solution('''\n1\n1 3\n3 1\n''') == '4'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n\"\n    \"1 2 5\\n\"\n    \"3 1 5\\n\"\n    \"2 1\\n\"\n    \"5 0\\n\"\n    \"1 3\") == \"15\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 5\\n3 1 5\\n2 1') == '15'\nassert solution('5\\n0 0\\n1 1\\n2 2\\n3 3\\n4 4') == '0'\nassert solution('5\\n1 2\\n3 1\\n2 2\\n3 3\\n4 4') == '15'"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 1, 5]) == \"15\"\nassert solution([3, 1, 5]) == \"15\"\nassert solution([3, 1, 5]) == \"15\"\nassert solution([3, 1, 5]) == \"15\"\nassert solution([3, 1, 5]) == \"15\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 5 3 3 4\n''') == '.....\\n...BBC\\n..A.C\\n....C\\n@DDDD'\nassert solution('''\n5 5 3 5 4\n''') == '.....\\n...BBC\\n.A.C..\\n....C\\n@DDDD'\nassert solution('''\n5 5 5 5 4\n''') == '.....\\n.....\\n.....\\n.....\\n@DDDD'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1 1 1') == '.....\\n.AB.C\\n.AC.D\\n..CCC\\n@D.DD\\n'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 5 3 3 4\n''') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD\\n'''\n\nassert solution('''\n5 5 3 3 4\n2 3 2 2 2\n1 1 1 2 2\n2 2 2 3 3\n2 2 2 2 2\n2 2 2 2 2\n''') == '...\\n.B...\\n.A...\\n@.A.C.D.\\n@DDDD\\n@DDDD\\n'''\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5 3 3 4\\n\") == \".ABC...\\n....C\\n...B.\\n\"\nassert solution(\"5 5 2 2 4\\n\") == \".B...\\n....C\\n.A..\\n\"\nassert solution(\"5 5 5 5 5 5\\n\") == \".BABBBB\\n...CCCCCC\\n....DDDDD\\n..AAA\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5 3 3 4\") == \".....\\n..BBC\\n..A.C\\n....C\\n@DDDD\""
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n3 3 2 2\n1 3 2 1\n5 3 2 2\n''') == '@DDDD'\n\nassert solution(\n'''\n4 4 2 2\n1 2 3 1\n4 4 2 2\n''') == '@DDDD'\n\nassert solution(\n'''\n4 4 2 2\n1 1 3 1\n4 4 2 2\n''') == '@DDDD'\n\nassert solution(\n'''\n4 4 2 2\n1 1 3 1\n1 2 3 1\n3 3 3 3\n''') == '..BBC..'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 3 3 4') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\nassert solution('2 2 2 3') == '...\\n@\\n@\\n@\\n@\\n'\nassert solution('1 1 2 3 4') == '..@\\n@.C\\n@.A\\n@.B\\n@..'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 2 4\") == \"B.C.\"\nassert solution(\"5 5 3 3 4\") == \"..BBC.\\n..A.C.\\n....C.\\n@DDDD.\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 5 3 3 4\n''') == '@BBC'\nassert solution('''\n4 4 4 4 4\n''') == '@.B.C.D.E'\nassert solution('''\n3 4 2 1 1\n''') == '..B.C.A.D.E'\nassert solution('''\n2 6 4 5\n''') == '...AC.DE'\nassert solution('''\n2 6 3 5\n''') == '...A.BD'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5 3 3 4\\n') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD\\n', 'Should return a string that looks like the one below!'\nassert solution('1\\n2\\n4\\n5\\n7\\n8\\n10\\n12\\n14\\n15\\n18\\n19\\n21\\n23\\n24\\n27\\n28\\n30\\n32\\n33\\n35\\n37\\n38\\n40\\n42\\n44\\n45\\n47\\n48\\n50\\n52\\n53\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n67\\n68\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5 3\n111\n001\n000\n111\n000\n\"\"\"\n) == \"0010111010000\"\n\nassert solution(\n\"\"\"\n5 2\n01\n01\n\"\"\"\n) == \"0101\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n0 2\\n2 1\") == \"0 1\"\nassert solution(\"1 2\\n2 0\\n2 1\") == \"1 1\"\nassert solution(\"1 2\\n0 1\\n1 0\") == \"1 1\"\nassert solution(\"1 2\\n1 0\\n0 1\") == \"0 1\"\nassert solution(\"1 2\\n2 0\\n1 0\") == \"1 1\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"001\"\nassert solution(\"5 1\") == \"001\"\nassert solution(\"6 3\") == \"001\"\nassert solution(\"6 1\") == \"001\"\nassert solution(\"7 3\") == \"001\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n111\\n001\\n000\\n111\\n000') == '001\\n001\\n001\\n111\\n200'\n\nstdin = '''2\n1\n2\n1\n3\n2\n3\n4\n2\n1'''"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n111\n001\n000\n111\n000\n''') == '001'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n111\n001\n000\n111\n000\n''') == '001\\n001\\n001\\n111\\n200\\n', 'Wrong answer'\nprint('Test passed!')\n\nassert solution('''\n5 4\n111\n001\n000\n111\n000\n''') == '001\\n000\\n001\\n111\\n111\\n', 'Wrong answer'\nprint('Test passed!')"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"001\"\nassert solution(\"5 4\") == \"001\"\nassert solution(\"5 2\") == \"001\"\nassert solution(\"5 6\") == \"001\"\nassert solution(\"5 5\") == \"001\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 2\n1\n1\n1\n2''') == '1 1 1 2'\nassert solution('''5 3\n111\n001\n000\n111\n000\nSample Input:\n5 4\n111\n001\n001\n111\n000\nSample Output:\n111\n001\n001\n111\n000\n''') == '111 1 1 1 111 1 1'\nassert solution('''5 4\n111\n001\n001\n111\n000\nSample Output:\n111\n001\n001\n111\n000\n''') == '111 1 1 1 111 1 1'\nassert solution('''5 3\n111\n001\n000\n111\n000\nSample Output:\n111\n001\n000\n111\n000\n''') == '111 1 1 1 111 1 1'\nassert solution('''5 4\n111\n001\n001\n111\n000\nSample Output:\n111\n001\n001\n111\n000\n''') == '111 1 1 1 111 1 1'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\\n\"\nassert solution(\"2 5\\n1 2\\n3 4\\n1 2 3\\n5 4\\n\") == \"1\\n1\\n1\\n2\\n3\\n4\\n5\\n\"\nassert solution(\"3 1\\n0 1\\n1 2\\n2 1\\n\") == \"0\\n1\\n1\\n2\\n\"\nassert solution(\"6 6\\n6 7\\n2 3\\n2 3\\n2 3\\n3 2\\n3 1\\n3 1\\n\") == \"2\\n3\\n3\\n2\\n3\\n1\\n1\\n\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n111\\n001\\n000\\n111\\n000') == '001\\n001\\n001\\n111\\n200', 'Sample Test Failed'\n\nSample Input:\n3 4\n1001\n1010\n1011\nSample Output:\n1001\n1010\n1011\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10 1'\nassert solution('19/14') == '19 14'\nassert solution('4/3') == '4 3'\nassert solution('20/7') == '20 7'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''19/13\n10/1\n19/14\n4/3\n20/7\n19/7\n20/13\n19/15\n10/7\n20/13\n19/2\n19/17\n10/7\n20/13\n19/15''') == '19 20\\n17 15 14 13 7 2\\n'''\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\\n') == '19 20\\n17 15 14 13 7 2'"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"19/13\") == \"19 20\"\nassert solution(\"10/1\") == \"10\"\nassert solution(\"19/14\") == \"19 20\"\nassert solution(\"4/3\") == \"4 2 1\"\nassert solution(\"20/7\") == \"20 14 13 7\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"19/13\n10/1\"\"\") == \"19 20\"\nassert solution(\"\"\"19/14\n10/1\"\"\") == \"19 20\"\nassert solution(\"\"\"4/3\n20/7\"\"\") == \"17 15 14 13 7 2\"\nassert solution(\"\"\"20/7\n10/1\"\"\") == \"17 15 14 13 7 2\"\nassert solution(\"\"\"20/13\n10/1\"\"\") == \"17 15 14 13 7 2\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"19/13\") == \"10 20\"\nassert solution(\"10/1\") == \"10\"\nassert solution(\"19/14\") == \"17 18\"\nassert solution(\"4/3\") == \"10 20\"\nassert solution(\"20/7\") == \"20\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"19/13\") == \"19 20\"\nassert solution(\"10/1\") == \"10 20\"\nassert solution(\"19/14\") == \"19 20\"\nassert solution(\"4/3\") == \"4 5 2\"\nassert solution(\"20/7\") == \"20 25 17\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('19/13\\n10/1') == '10 20'\nassert solution('19/14\\n4/3') == '4 5'\nassert solution('19/15\\n10/7') == '10 14 13 7'\nassert solution('19/2\\n19/17') == '19 20 15 14 13 7'\nassert solution('19/17\\n10/13') == '10 14 13 7'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('19/13\\n10/1') == '19 20'\nassert solution('19/14\\n4/3') == '19 20'\nassert solution('4/3\\n20/7') == '10 15'\nassert solution('20/7\\n19/13') == '19 20'\nassert solution('19/7\\n19/13') == '19 20'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10 1'\nassert solution('19/14') == '10 14'\nassert solution('4/3') == '4 3'\nassert solution('20/7') == '7 20'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'possible'\nassert solution('3 1') == 'impossible'\n\"\"\""
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"impossible\"\nassert solution(\"1 1\") == \"possible\"\nassert solution(\"1 2\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n''') == 'possible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'impossible'\nassert solution('5 7') == 'impossible'\nassert solution('2 2') == 'possible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == 'impossible'\nassert solution('1 3') == 'possible'\nassert solution('4 3') == 'possible'\nassert solution('4 4') == 'impossible'\n\n'''"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"impossible\"\nassert solution(\"3 3\") == \"possible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n''') == 'impossible'\nassert solution('''\n1\n1\n3\n''') == 'possible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"impossible\"\nassert solution(\"0 0\") == \"possible\"\nassert solution(\"1 2 3\") == \"impossible\""
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"possible\"\nassert solution(\"3 1\") == \"impossible\""
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3') == 'possible'\nassert solution('2 2\\n1 1\\n3 3') == 'impossible'"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2') == '4'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2\\n2\\n2\\n') == '4'\nassert solution('4 2\\n1\\n2\\n') == '4'\nassert solution('4 2\\n2\\n2\\n') == '3'\nassert solution('4 2\\n1\\n2\\n') == '1'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n2\n3\n3''') == '1'\nassert solution('''5\n2\n3\n4\n1\n1''') == '2'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n2\\n3') == '3'\nassert solution('1\\n2\\n2\\n1') == '2'\nassert solution('1\\n1\\n3\\n3') == '1'\nassert solution('4\\n1\\n3\\n2') == '2'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"12 3\") == \"12\"\nassert solution(\"9 5\") == \"9\"\n\n'''\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r\"\"\"\n4 2\n2\n2\n2\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([2,2,2,2,1,1,2,2,2,1,1,2]) == '4'\nassert solution([2,1,2,1,1,1,1,2,1,1,2]) == '3'\nassert solution([2,2,2,2,1,1,2,2,2,1,1]) == '5'\nassert solution([2,2,2,2,2,2,2,2,2,2,2]) == '1'\nassert solution([2,2,2,2,2,2,2,2,2,2,2,1]) == '5'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n1\\n') == '2\\n'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([4, 2, 2, 2]) == 4\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'Slavko'\nprint(solution())"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == \"Mirko\"\nassert solution('1 2') == \"Slavko\"\nassert solution('1 3') == \"Slavko\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1\\n1 2\\n1 3') == \"Slavko\"\nprint(solution('''\n3\n1 1\n1 2\n1 3\n'''))\nprint(solution('''\n6\n3 2\n1 6\n2 6\n5 1\n4 1\n3 1\n'''))\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 3\n''') == 'Mirko', 'Error: Mirko'\nassert solution('''\n1\n1\n1\n''') == 'Mirko', 'Error: Mirko'\nassert solution('''\n1\n1\n1\n''') == 'Slavko', 'Error: Slavko'"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1\\n1 2\\n1 3\") == \"Mirko\"\nassert solution(\"1\\n1 1\") == \"Slavko\"\nassert solution(\"5\\n1 1\\n2 3\") == \"Mirko\""
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'Mirko'\nassert solution('1 1') == 'Mirko'\nassert solution('1 2') == 'Slavko'\nassert solution('1 3') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'Mirko'\nassert solution('1 2') == 'Mirko'\nassert solution('1 3') == 'Mirko'\nassert solution('1 1 2 1') == 'Slavko'\nassert solution('1 2 1 2') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == 'Mirko'\nassert solution('2 1') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3''') == 'Mirko'\nassert solution('''6\n1 1\n1 2\n1 3\n1 4\n1 5\n2 4\n2 6''') == 'Slavko'\nassert solution('''20\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6\n4 1\n4 2\n4 3\n4 4\n4 5\n4 6''') == 'Slavko'\n\"\"\"\n\nimport math\n\nclass Graph:\n\n    def __init__(self):\n        self.graph = {}\n    \n    def addEdge(self, u, v):\n        if u in self.graph:\n            self.graph[u].append(v)\n        else:\n            self.graph[u] = [v]\n        \n    def DFSUtil(self, v, visited):\n        visited[v] = True\n        print(v, end ='')\n        for i in self.graph[v]:\n            if visited[i] == False:\n                self.DFSUtil(i, visited)\n    \n    def DFS(self, v):\n        visited = [False] * (len(self.graph))\n        self.DFSUtil(v, visited)\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n10\n1 1\n3 4\n1 3\n6 6\n1 5\n3 4\n2 5\n2 7\n2 4\n6 6\n1 1\n\"\"\") == \"Mirko\"\nassert solution(\"\"\"\n10\n1 1\n3 4\n1 3\n6 6\n1 5\n3 4\n2 5\n2 7\n2 4\n6 6\n1 1\n\"\"\") == \"Slavko\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2 4'\nassert solution('1') == '1'\nassert solution('1 2') == '1 2'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n6\n34\n38\n\"\"\") == \"2 4\"\n\nassert solution(\"\"\"\n4\n1\n2\n3\n4\nSample Output:\n1\n2\n3\n4\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n6\n34\n38\n\"\"\") == \"2 4\"\nassert solution(\"\"\"\n2\n2\n2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n6\n34\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n1\n2\n3\n1\n5\n''') == '1 2'\nassert solution('''2\n1\n3\n''') == '0 2'\nassert solution('''6\n6\n7\n''') == '2 4'\nassert solution('''6\n6\n7\n''') == '1 2'\nassert solution('''6\n6\n7\n''') == '3 4'"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2 4\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2 2'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2 3'\nassert solution('4') == '2 4'\nassert solution('5') == '1 2 3 4'\nassert solution('10') == '3 7 9 5 2 1 4 6 8'\nassert solution('11') == '5 2 1 7 9 3 4 6 8'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2 4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n6\n34\n38\n\"\"\") == \"2 4\"\nassert solution(\"\"\"\n3\n4\n6\n5\n3\n6\n\"\"\") == \"2 4\"\nassert solution(\"\"\"\n3\n4\n7\n8\n10\n3\n5\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"\n2\n4\n5\n6\n7\n8\n9\n10\n\"\"\") == \"1 2 3\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"2 4\"\nassert solution(\"3\") == \"2 3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"12\") == \"1 2\"\nassert solution(\"312\") == \"1 2 3\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '12'\nassert solution('5') == '12'\nassert solution('6') == '12'\nassert solution('7') == '12'\nassert solution('8') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\nassert solution('''\n3\n7 9 4\n''') == '4'\nassert solution('''\n2\n10\n''') == '2'\nassert solution('''\n1\n1\n''') == '1'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '12'\nassert solution('5') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '4\\n10000 400000 500000 900000') == '12'\nassert solution(\n    '5\\n8 10 2 1000000 30556926000') == '12'"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"12\"\nassert solution(\"5\") == \"12\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n100000 500000 900000\n100000 500000 900000''') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('6') == '3'\nassert solution('7') == '4'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\nassert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\nassert solution('''\n8\n8 2 1000000 2\n''') == '12'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 8') == 'YES'\nassert solution('1 8') == 'NO'\nassert solution('8 5 0') == 'NO'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0''') == 'YES'\nassert solution('''7 7\n0\n2 4 0\n1 8 0\n4 5 0\n8 6 0\n5 3 7 0\n1 6 0\n7 3 0''') == 'NO'"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n0\n1\n\"\"\") == \"NO\""
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\\n') == 'YES'\nassert solution('1\\n') == 'NO'\nassert solution('1\\n0\\n0\\n') == 'NO'\nassert solution('2\\n') == 'YES'\n\"\"\"\n\nimport sys\n\nn,m = map(int, sys.stdin.readline().split())\nls = []\nfor i in range(m):\n    ls.append(list(map(int,sys.stdin.readline().split())))\n\nfor j in ls:\n    if len(set(j)) < 2:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0''') == 'YES'\nprint('Solution: ', solution('''20 8\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"1 3\") == \"NO\"\nassert solution(\"8 1\") == \"NO\""
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n0 2 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"YES\"\nassert solution(\"3 3\\n0 1 2\\n1 0 2\\n1 2 0\\n1 1 0\") == \"NO\""
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"YES\"\nassert solution(\"8 8\\n0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"NO\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 2\n3 4 5 6 1 2''') == '5 6 1 2 3 4'\nassert solution('''\n5 2\n3 4 5 1 2''') == 'Impossible'\n''')\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"5 6 1 2 3 4\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 5 4 1 2') == '4 2 3 5 1'\nassert solution('6\\n4 3 5 6 1 2') == '4 6 1 2 3 5'\nassert solution('1\\n1 1') == '1 1'\nassert solution('1\\n3') == '1 3'\nassert solution('4\\n5') == '4 5'"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '5 6 1 2 3 4'\n\"\"\""
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 2\") == \"5 6 1 2 3 4\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 2\") == \"5 6 1 2 3 4\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4'\nassert solution('''\n6 2\n1 2 3 4 5 6\n''') == '-1 -1 -1 -1 -1 -1'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 2\\n1 2\\n\") == \"1 2\"\nassert solution(\n    \"5 3\\n1 4 5 6 1 2\\n\") == \"1 2 3 4 5\"\nassert solution(\n    \"5 3\\n3 2 1 4 5 1 2\\n\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2 8 4') == \"20512\"\nassert solution('1000000') == \"IMPOSSIBLE\"\nassert solution('5 2 4 8') == \"20512\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 3\") == \"3\"\nassert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"IMPOSSIBLE\"\nassert solution(\"1 1 1 1 1 1\") == \"2\"\nassert solution(\"1 1 1 1 1 1 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s) == \"20512\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2 8 4\n''') == '20512'\nassert solution('''\n1 1 1 1\n''') == 'IMPOSSIBLE'\nassert solution('''\n4 1 2 3\n''') == '1213'\nassert solution('''\n10 5 5 5\n''') == 'IMPOSSIBLE'\nassert solution('''\n10 0 0 0\n''') == 'IMPOSSIBLE'\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 2 8 4\n''') == '20512'\nassert solution('''2 2 4 4\n''') == 'IMPOSSIBLE'\nassert solution('''10 10 8 8\n''') == '208008'\nassert solution('''8 8 8 8\n''') == 'IMPOSSIBLE'\nassert solution('''10 10 10 10\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\nassert solution(\"1000000 3 4 5\") == \"IMPOSSIBLE\"\nassert solution(\"9 5 2 8 4\") == \"10432\"\nassert solution(\"2 3 2 2\") == \"2\"\n\nSample Input:\n3 3 7 8\nSample Output:\n206\n\nassert solution(\"3 3 7 8\") == \"206\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 4\") == \"IMPOSSIBLE\", \"BAD\"\nassert solution(\"5 2 8 4\") == \"20512\"\nassert solution(\"3 1 3 4\") == \"IMPOSSIBLE\"\nassert solution(\"5 5 5 4\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8 2 4 1\n''') == 'IMPOSSIBLE'\nassert solution('''12 3 2 5\n''') == '1235'\nassert solution('''9 9 5 3\n''') == '935'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 30 50 20') == '20730'\nassert solution('5 1 8 2') == 'IMPOSSIBLE'\nassert solution('10 5 9 8') == '102336'\nassert solution('1 2 3 4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\nBAC\\nABC') == '2'\nassert solution('3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE') == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == 2\nassert solution(\"3 8\") == 3\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == 2\n\nSample Input 3:\n2 5\nABC\nABB\nSample Output 3:\n1\n\nSample Input 4:\n3 9\nGCFDF\nABCD\nABCD\nSample Output 4:\n4\n\nSample Input 5:\n1 2\nABC\nSample Output 5:\n1\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 5\nHGBDFCAE\nADBGHFCE\nHCFGBDAE''') == 3\nassert solution('''2 1\nBAC\nABC''') == 2\nassert solution('''1 1\nABC''') == 1\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == 0\nassert solution(\"A\") == 1\nassert solution(\"AB\") == 0\nassert solution(\"ABC\") == 1\nassert solution(\"ABACD\") == 2\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\nBAC\nABC\n''') == '2'\nassert solution('''3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE\n''') == '3'\nprint(solution('''3 8\nHGBCDEADB\nBADFGCADC\n'''))\nprint(solution('''1 1\n'''))\nprint(solution('''1 10\n'''))\nprint(solution('''1 5\n'''))\nprint(solution('''1 4\n'''))\nprint(solution('''1 3\n'''))\nprint(solution('''2 3\nBAC\nABC\n'''))\nprint(solution('''2 7\nABCDEFGHI\nJKLMNOPQRS\n'''))\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 8') == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''BAC\nABC\n''') == \"2\"\nassert solution('''3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE\n''') == \"3\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 3') == '4'\nassert solution('5 3') == '3'\nassert solution('5 3') == '4'\nassert solution('4 6') == '2'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"5 3\") == \"6\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 3') == '3'\nassert solution('1 2 3') == '3'\nassert solution('1 1 1') == '2'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\nassert solution('5 5') == '18'"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    1 2\n    ''') == '3'\nassert solution('''\n    1 2\n    1 1\n    ''') == '2'\nassert solution('''\n    3 2\n    3 1\n    2 1\n    ''') == '2'\nassert solution('''\n    1 2\n    1 3\n    ''') == '4'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == '3'"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 4\") == \"7\"\nassert solution(\"4 4\") == \"15\"\nassert solution(\"2 2\") == \"3\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2\n5 7''') == '3'\nassert solution('''2 2\n4 4''') == '1'\nassert solution('''3 3\n2 3\n4 5\n6 8''') == '1'"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"4 2\") == \"9\"\nassert solution(\"4 4\") == \"18\"\nassert solution(\"3 1\") == \"9\"\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2\"\nassert solution(\"5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == '3'\nassert solution('''5 5\n5 4\n3 0 1 2 4\n2 2 3\n1 0 4\n2 1 3\n2 2 4''') == '3'\nassert solution('''1 1\n2''') == '1'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\nassert solution('7 2\\n3 0 2 3\\n5 0 1 4\\n5 0 3\\n3 2 4\\n3 0 1\\n2 1 4\\n2 1 0') == '1'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n''') == '3'\nassert solution('''\n5 4\n2 1 2\n3 1 2 3\n3 0 2 4\n2 1 4\n2 2 3\n''') == '2'\nassert solution('''\n10 5\n1 1 1 1 1 1\n0 0 0 0 0 1\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n''') == '5'\nassert solution('''\n10 10\n1 1 1 1 1 1\n0 0 0 0 0 1\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n''') == '10'\nassert solution('''\n1 1\n0 0\n''') == '1'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == '3'\nassert solution('1 1 1') == '1'\nassert solution('1 5') == '1'\nassert solution('2 3') == '1'\nassert solution('3 2') == '2'"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\nassert solution('6 10\\n0 1 2 3 4 5 6\\n0 1 4\\n1 2 4\\n2 3 4\\n3 4 5\\n4 5 6\\n5 6 7\\n6 7 8\\n7 8 9\\n8 9 10\\n9 10 11\\n10 11 12\\n11 12 13\\n12 13 14\\n13 14 15\\n14 15 16\\n15 16 17\\n16 17 18\\n17 18 19\\n18 19 20\\n19 20 21\\n20 21 22\\n21 22 23\\n22 23 24\\n23 24 25\\n24 25 26\\n25 26 27\\n26 27 28\\n27 28 29\\n28 29 30\\n29 30 31\\n30 31 32\\n31 32 33\\n32 33 34\\n33 34 35\\n34 35 36\\n35 36 37\\n36 37 38\\n37 38 39\\n38 39 40\\n39 40 41\\n40 41 42\\n41 42 43\\n42 43 44\\n43 44 45\\n44 45 46\\n45 46 47\\n46 47 48\\n47 48 49\\n48 49 50\\n49 50 51\\n50 51 52\\n51 52 53\\n52 53 54\\n53 54 55\\n54 55 56\\n55 56 57\\n56 57 58\\n57 58 59\\n58 59 60\\n59 60 61\\n60 61 62\\n61 62 63\\n62 63 64\\n63 64 65\\n64 65 66\\n65 66 67\\n66 67 68\\n67 68 69\\n68 69 70\\n69 70 71\\n70 71 72\\n71 72 73\\n72 73 74\\n73 74 75\\n74 75 76\\n75 76 77\\n76 77 78\\n77 78 79\\n78 79 80\\n79 80 81\\n80 81 82\\n81 82 83\\n82 83 84\\n83 84 85\\n84 85 86\\n85 86 87\\n86 87 88\\n87 88 89\\n88 89 90\\n89 90 91\\n90 91 92\\n91 92 93\\n92 93 94\\n93 94 95\\n94 95 96\\n95 96 97\\n96 97 98\\n97 98 99\\n98 99 100\\n99 100 101\\n100 101 102\\n101 102 103\\n102 103 104\\n103 104 105\\n104 105 106\\n105 106 107\\n106 107 108\\n107 108 109\\n108 109 110\\n109 110 111\\n110 111 112\\n111 112 113\\n112 113 114\\n113 114 115\\n114 115 116\\n115 116 117\\n116 117 118\\n117 118 119\\n118 119 120\\n119 120 121\\n120 121 122\\n121 122 123\\n122 123 124\\n123 124 125\\n124 125 126\\n125 126 127\\n126 127 128\\n127 128 129\\n128 129 130\\n129 130 131\\n130 131 132\\n131 132 133\\n132 133 134\\n133 134 135\\n134 135 136\\n135 136 137\\n136 137 138\\n137 138 139\\n138 139 140\\n139 140 141\\n140 141 142\\n141 142 143\\n142 143 144\\n143 144 145\\n144 145 146\\n145 146 147\\n146 147 148\\n147 148 149\\n148 149 150\\n149 150 151\\n150 151 152\\n151 152 153\\n152 153 154\\n153 154 155\\n154 155 156\\n155 156 157\\n156 157 158\\n157 158 159\\n158 159 160\\n159 160 161\\n160 161 162\\n161 162 163\\n162 163 164\\n163 164 165\\n164 165 166\\n165 166 167\\n166 167 168\\n167 168 169\\n168 169 170\\n169 170 171\\n170 171 172\\n171 172 173\\n172 173 174\\n173 174 175\\n174 175 176\\n175 176 177\\n176 177 178\\n177 178 179\\n178 179 180\\n179 180 181\\n180 181 182\\n181 182 183\\n182 183 184\\n183 184 185\\n184 185 186\\n185 186 187\\n186 187 188\\n187 188 189\\n188 189 190\\n189 190 191\\n190 191 192\\n191 192 193\\n192 193 194\\n193 194 195\\n194 195 196\\n195 196 197\\n196 197 198\\n197 198 199\\n198 199 200\\n199 200 201\\n200 201 202\\n201 202 203\\n202 203 204\\n203 204 205\\n204 205 206\\n205 206 207\\n206 207 208\\n207 208 209\\n208 209 210\\n209 210 211\\n210 211 212\\n211 212 213\\n212 213 214\\n213 214 215\\n214 215 216\\n215 216 217\\n216 217 218\\n217 218 219\\n218 219 220\\n219 220 221\\n220 221 222\\n221 222 223\\n222 223 224\\n223 224 225\\n224 225 226\\n225 226 227\\n226 227 228\\n227 228 229\\n228 229 230\\n229 230 231\\n230 231 232\\n231 232 233\\n232 233 234\\n233 234 235\\n234 235 236\\n235 236 237\\n236 237 238\\n237 238 239\\n238 239 240\\n239 240 241\\n240 241 242\\n241 242 243\\n242 243 244\\n243 244 245\\n244 245 246\\n245 246 247\\n246 247 248\\n247 248 249\\n248 249 250\\n249 250 251\\n250 251 252\\n251 252 253\\n252 253 254\\n253 254 255\\n254 255 256\\n255 256 257\\n256 257 258\\n257 258 259\\n258 259 260\\n259 260 261\\n260 261 262\\n261 262 263\\n262 263 264\\n263 264 265\\n264 265 266\\n265 266 267\\n266 267 268\\n267 268 269\\n268 269 270\\n269 270 271\\n270 271 272\\n271 272 273\\n272 273 274\\n273 274 275\\n274 275 276\\n275 276 277\\n276 277 278\\n277 278 279\\n278 279 280\\n279 280 281\\n280 281 282\\n281 282 283\\n282 283 284\\n283 284 285\\n284 285 286\\n285 286 287\\n286 287 288\\n287 288 289\\n288 289 290\\n289 290 291\\n290 291 292\\n291 292 293\\n292 293 294\\n293 294 295\\n294 295 296\\n295 296 297\\n296 297 298\\n297 298 299\\n298 299 300\\n299 300 301\\n300"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"1\"\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4') == '2'\nassert solution('10 5') == '3'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n10\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\nassert solution('5 5\\n0 1 2\\n0 1 4\\n0 1 3\\n0 0 2\\n2 0 3\\n2 0 1\\n2 1 4\\n2 1 3\\n2 2 3') == '4'\nassert solution('3 3\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\\n7 7 7') == '5'"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"YES\"\nassert solution(\"2\\n2 3\\n1 3\") == \"YES\"\nassert solution(\"2\\n1 2\\n3 1\") == \"NO\"\nassert solution(\"2\\n3 1\\n3 1\") == \"NO\"\nassert solution(\"1\\n2 3\\n1 3\") == \"NO\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\\n1 1\\n1 2\\n2 1\\nSample Output:\") == \"YES\"\nassert solution(\"3\\n6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\\n1 1\\n1 2\\n2 1\\nSample Output:\") == \"NO\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n2\n2\n1\n''') == 'NO'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\") == \"YES\\n\"\n\n'''"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n2 1\n2 2\n1 1\n1 2\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n2\n2 1\n1 3\n2 2\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3\n2 2\n1 1\n1 3\n1 2\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'YES'\nassert solution('''\n4\n1 1\n1 2\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'NO'\nassert solution('''\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'YES'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3') == 'YES'\nassert solution('2\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3') == 'NO'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'YES'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"10\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('3') == '3.000000000'\n\n'''\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '2.000000000'\n'''\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n''') == '3.000000000'\nassert solution('''3\n''') == '8.0'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n''') == '10.000000'\n\nassert solution('''\n11\n''') == '11.000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n3\n''') == '3.000000000'\nassert solution('''\n1\n2\n''') == '3.000000000'\nassert solution('''\n20\n20\n''') == '20.000000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n3\n\"\"\") == \"3.000000000\"\nassert solution(\"\"\"\n10\n10\n\"\"\") == \"4.0000000000\"\nassert solution(\"\"\"\n20\n20\n\"\"\") == \"4.0000000000\"\nassert solution(\"\"\"\n150\n150\n\"\"\") == \"4.0000000000\"\nassert solution(\"\"\"\n150\n150\n\"\"\") == \"4.0000000000\""
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n2''') == '2.000000000'\nassert solution('''1\n4''') == '3.000000000'\nassert solution('''8\n1\n2\n3\n4\n5\n6\n7''') == '9.000000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('1000000') == '9.999999999'\n\"\"\"\n\nimport math\nfrom typing import List"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '3.000000000'\n\"\"\"\n\nfrom math import log\n\nn = int(stdin)\n\np = 2 * n / 3\n\nprint(log(p))"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"3.000000000\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"4\"\nassert solution(\"15\") == \"2\"\nassert solution(\"30\") == \"2\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3') == '1'\nassert solution('2 3\\n1 4 5') == '2'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '1'\nassert solution('3 3') == '2'\nassert solution('4 3 2') == '2'\nassert solution('3 4 3') == '2'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n3\n''') == '1'\nassert solution('''\n5\n3 3 4 1\n''') == '2'\nassert solution('''\n5\n5 1 1 1 1\n''') == '2'\nassert solution('''\n6\n2 3 1 1 1\n''') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '1'\nassert solution('3 4') == '2'\nassert solution('7') == '2'"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3\n2 4 1 5''') == '1'\nassert solution('''\n5 4\n4 3 6 6 2''') == '1'\n''')\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n2\n3\n4\n''') == '1'\n\nassert solution('''\n1\n2\n3\n4\n''') == '1'\n\nassert solution('''\n2\n1\n3\n4\n''') == '2'\n\nassert solution('''\n3\n1\n3\n4\n''') == '3'\n\nassert solution('''\n4\n1\n3\n4\n''') == '3'"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '1'\nassert solution('3 4') == '2'\nassert solution('4') == '3'\nassert solution('4 5') == '4'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"1 1 1 2 2 2 2 2 2 2 2\") == \"2\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '1'"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2') == '3'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 2 4\\n1 1 4\\n1 2 4') == '2'\nassert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 2 4\\n1 1 4\\n1 2 4') == '3'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\\n\") == \"3\\n2\\n3\\n1\""
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\\n1 2 3\\n') == '3\\n2\\n3\\n1\\n3\\n2\\n1\\n2\\n'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5 3\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\nassert solution('''\n5 5 2\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(solution.__doc__) == \"1\"\nassert solution(solution.__doc__, stdin=\"\"\"3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\") == \"3\"\nassert solution(solution.__doc__, stdin=\"\"\"2 2\n0 2\n1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\"\n) == \"3\"\nassert solution(\n    \"\"\"\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\"\n) == \"3\"\nassert solution(\n    \"\"\"\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"HelloWorld.c\"\n\nassert solution(\"1\") == \"Add.c\"\n\nassert solution(\"0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2 HelloWorld.c\\n\"\nassert solution(\"1\") == \"1 Add.c\\n\"\n\nimport re\nimport sys\nimport fileinput\nfrom typing import List, Any, Dict, Callable\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nint HelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***''') == '1 HelloWorld.c def solution(stdin: str) -> str:'"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 HelloWorld.c\\n\") == \"2\"\nassert solution(\"4 Add.c\\n\") == \"4\"\n\"\"\"\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***''') == '1 1 2'\n\nSample Input:\n1\nint i\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"HelloWorld.c\"\n\nSample Input:\n2\nHelloWorld.c\nint Main() {\n  printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\nSample Output:\n2 HelloWorld.c\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***''') == '''2 HelloWorld.c\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\nHelloWorld.c\\nint Main() { \\n  for (int i=0; i<10; i++) \\n    sum += i; \\n  printf(\"SUM %d\", sum); \\n} \\n***END***\") == \"2 HelloWorld.c\\ndef solution(stdin): \\n  pass\\n\"\n\n'''"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"2 Add.c\"\n\n'''"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\nHelloWorld.c\nint Main() {\n  printf(\"Hello %d\\n\",i);\n}\n***END***\n''') == \"2 HelloWorld.c\"\n\nassert solution('''\n1\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\n''') == \"1 Add.c\"\n\nassert solution('''\n1\nHelloWorld.c\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\n''') == \"2 HelloWorld.c\""
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\nassert solution('''2\n1\n2\n3\n4\n5''') == '2'\nassert solution('''5\n5\n4\n4\n4\n5''') == '5'\nassert solution('''3\n1\n2\n3\n4\n5''') == '2'\nassert solution('''10\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1''') == '1'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1'\nassert solution('2 2 2') == '1'\nassert solution('4 2 1') == '2'\nassert solution('4 4 1') == '2'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3\n2 2 2\n4 2 1\n4 4 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '2'\nassert solution('4 3') == '2'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '1\\n2\\n2\\n'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"1 3\\n2 2 2\\n4 2 1\\n4 4 1\\n\") == \"1\\n2\\n2\\n\""
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 3\"\n) == \"1\"\nassert solution(\n    \"3 3\"\n) == \"1\"\nassert solution(\n    \"3 2 3\"\n) == \"1\"\nassert solution(\n    \"3 2 1\"\n) == \"2\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '1'\nassert solution('4 3') == '2'\nassert solution('5 3') == '2'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '1'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '1'\nassert solution('''\n3 4\n1 2 1\n2 2 2\n3 2 2\n''') == '2'\nassert solution('''\n10 20\n1 2 2\n3 4 3\n5 6 1\n7 8 1\n9 10 2\n11 12 2\n13 14 1\n15 16 1\n17 18 1\n19 20 1\n''') == '2 4 3 2 1'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n10 12\\n15 20') == \"5\"\nassert solution('3 3\\n1 1\\n2 2\\n3 3') == \"4\"\nassert solution('4 3\\n10 1\\n20 3\\n30 1\\n40 4') == \"3\"\nassert solution('5 3\\n100 100\\n110 110\\n15 20\\n20 15\\n10 10') == \"0\"\nassert solution('6 3\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5') == \"5\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5 10') == '2'\nassert solution('3 6 7') == '5'\nassert solution('2 2 2') == '1'\nassert solution('3 1 2') == '2'\nassert solution('2 1 1') == '1'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"5\"\nassert sorted(solution()) == [\"5\", \"2\", \"3\"]\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n40 50\n50 40\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3\n40 100 10\n50 110 4\n100 50\nSample Input:\n1\n4\n10 5\nSample Output:\n2\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n'''\n\nn, c = map(int, stdin.readline().split())\n\np = []\nb = []\nu = []\n\nfor i in range(n):\n    x, y, z = map(int, stdin.readline().split())\n    p.append(x)\n    b.append(y)\n    u.append(z)\n\np.sort()\n\nans = 10**9\n\nfor i in range(n):\n    ans = min(ans, (p[i] - b[i]) + (c - p[i]))\n\nprint(ans)\n\n'''"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n\nassert solution('''\n3 1\n2 3 10\n3 7 10\n''') == '1'\n\n'''\n3 1\n2 3 10\n3 7 10\n'''\n\nassert solution('''\n3 5\n1 2 4\n3 5 9\n6 7 7\n''') == '1'\n\n'''\n3 5\n1 2 4\n3 5 9\n6 7 7\n'''\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 20\n50 70 10\n100 110 4\n150 190 16\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n1 5\n1 1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 5\n1 2 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\nassert solution('''\n20 20\n30 30 30 30 30\n20 20\n''') == '40'\nassert solution('''\n20 20\n50 50 50 50 50\n20 20\n''') == '50'\nassert solution('''\n10 10\n10 10 10 10 10 10 10 10\n''') == '20'\nassert solution('''\n10 10\n10 10 10 10 10 10 10 10 10\n''') == '20'\n''') == '20'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n\"\"\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)''') == '26'\n\nassert solution('''5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)''') == 'IMPOSSIBLE'\n\nassert solution('''5 5\n(2 5) (5 3)\n.....\n.#.#.\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n''') == '26'\nassert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n10 (8 5) (8 7) (7 6) (6 8) (5 5) (5 3)\nSample Output:\nIMPOSSIBLE''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n''') == '26', solution"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5') == '26'\nassert solution('1') == 'IMPOSSIBLE'"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n5 5') == '26'\nassert solution('2\\n5 5') == 'IMPOSSIBLE'\nassert solution('5\\n5 5') == 'IMPOSSIBLE'\nassert solution('1\\n1 1') == 'IMPOSSIBLE'\nassert solution('2\\n1 1') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(samples[0]) == \"IMPOSSIBLE\"\nassert solution(samples[1]) == \"26\"\n\"\"\"\n\nr, c = map(int, input().strip().split())\n\nd = {}\nfor i in range(r):\n    for j in range(c):\n        if '.' in input():\n            d[(i, j)] = 1\n        elif '#' in input():\n            d[(i, j)] = 0\n        else:\n            d[(i, j)] = '.'\n\nm = int(input().strip())\npaths = []\nfor i in range(m):\n    r, c = map(int, input().strip().split())\n    if d[(r-1, c)]:\n        paths.append((r-1, c))\n    if d[(r, c-1)]:\n        paths.append((r, c-1))\n    if d[(r+1, c)]:\n        paths.append((r+1, c))\n    if d[(r, c+1)]:\n        paths.append((r, c+1))\n\nprint(paths)"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\\\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n''') == '26'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n#...\\n') == '26'\nassert solution('6\\n(4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)''') == '26'\nassert solution('''6 1\n2 3\n.3.\n.##\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"success\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nassert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n5\\n0 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') =='success'\nassert solution('10\\n1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n5\\n0 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n1\\n0 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') =='success'\n\n'''"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n') == 'failure'\nassert solution('5\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n') =='success'\nassert solution('100\\n0 0\\n1 0\\n0 1\\n1 1\\n0 2\\n1 2\\n0 3\\n1 3\\n0 4\\n1 4\\n0 5\\n1 5\\n0 6\\n1 6\\n0 7\\n1 7\\n0 8\\n1 8\\n0 9\\n1 9\\n') =='success'\n\"\"\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"success\"\nassert solution(\"2\") == \"failure\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1''') == 'failure'\n\nassert solution('''4\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1''') =='success'"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n0 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n''') == 'failure'\n\nassert solution('''\n3\n0 0\n1 0\n2 0\n0 2\n1 2\n''') =='success'\n\nassert solution('''\n5\n0 0\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n''') == 'failure'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"failure\"\nassert solution(\n    \"7\\n1 0\\n1 1\\n1 2\\n1 3\\n2 0\\n2 1\\n2 2\\n2 3\") == \"failure\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"success\""
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n''') == 'failure'\n\nassert solution('''\n4\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n''') =='success'\n\nassert solution('''\n5\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n''') =='success'\n\nassert solution('''\n5\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n''') =='success'"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nassert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') =='success'\nassert solution('4\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') =='success'\nassert solution('10\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n-1 2\\n0 3\\n1 2\\n-1 3\\n0 4\\n1 3\\n-1 4\\n0 5\\n1 4\\n-1 5\\n0 6\\n1 5\\n-1 6\\n0 7\\n1 6\\n-1 7\\n0 8\\n1 7\\n-1 8\\n0 9\\n1 8\\n-1 9\\n0 10\\n1 9') =='success'\nassert solution('10\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n-1 2\\n0 3\\n1 2\\n-1 3\\n0 4\\n1 3\\n-1 4\\n0 5\\n1 4\\n-1 5\\n0 6\\n1 5\\n-1 6\\n0 7\\n1 6\\n-1 7\\n0 8\\n1 7\\n-1 8\\n0 9\\n1 8\\n-1 9\\n0 10\\n1 9') == 'failure'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 2 2\"\n    \"1 2\"\n    \"3 3\"\n) == \"impossible\"\n\nassert solution(\n    \"2 2 2\"\n    \"2 2\"\n    \"3 2\"\n) == \"impossible\"\n\nassert solution(\n    \"2 2 2\"\n    \"1 2\"\n    \"3 3\"\n    \"4 3\"\n) == \"possible\"\n\nassert solution(\n    \"2 2 2\"\n    \"3 3\"\n    \"2 3\"\n) == \"possible\"\n\nassert solution(\n    \"2 2 2\"\n    \"2 2\"\n    \"3 2\"\n    \"4 3\"\n) == \"impossible\""
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('1 2') == 'impossible'\n\"\"\"\n\nn, q, s = map(int, input().split())\nq_data = list(map(int, input().split()))\nq_sizes = list(map(int, input().split()))\nd = int(input())"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'possible'\n\nSample Input:\n3\n1 2\n3 4\n5 6\n\nSample Output:\nimpossible\n\n'''\n\nimport math"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\") == \"possible\"\nassert solution(\"1 2\") == \"impossible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('1 2') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\\n1 2\\n3 3\") == \"impossible\"\nassert solution(\"1 2\\n3 3\") == \"possible\"\nassert solution(\"5 2 2\\n5 2 2\") == \"impossible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 2') == 'impossible'\nassert solution('3 3') == 'possible'\nassert solution('4 4') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('3 3') == 'impossible'\nassert solution('1 2') == 'impossible'\n\nstdin = \"\"\"\n8 3 2\n1 2\n3 3\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n\"\"\"\n\nstdin = \"\"\"\n2 2 2\n1 2\n3 3\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n\"\"\"\n\nstdin = \"\"\"\n3 2 2\n1 2\n3 3\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n\"\"\"\n\nstdin = \"\"\"\n3 4 2\n1 2\n3 3\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n\"\"\"\n\nstdin = \"\"\"\n4 3 2\n1 2\n3 3\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n\"\"\"\n\nstdin = \"\"\"\n2 3 2\n1 2\n3 3\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n\"\"\"\n\nstdin = \"\"\"\n3 4 2\n1 2\n3 3\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n5 2 2\n\"\"\""
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n3 4') == 'possible'\nassert solution('1 1\\n1 1') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n1\n2\n1 2\n3 3\n''') == 'possible'\nassert solution('''\n1 1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 1 2\\n1 2 1\\n-1 1 2\\n') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\nassert solution('''\n1 3\n1 1 1\n1 1 1\n-1 -1 1\n''') == '1'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '0'\nassert solution('1 2') == '0'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"0\"\nassert solution(\"1 1 2\") == \"0\"\nassert solution(\"1 2 1\") == \"1\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '0'\nassert solution('1 1 2') == '1'\nassert solution('1 2 1') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n2 1 2\\n1 2 1\\n-1 1 2\\n') == '0'\nassert solution('4\\n3 1 2\\n2 3 2\\n1 1 3\\n1 3 1\\n3 2 1\\n-1 2 3\\n') == '1'\nassert solution('4\\n3 1 2\\n2 3 2\\n1 1 3\\n1 3 1\\n3 2 1\\n-1 2 3\\n') == '3'\nassert solution('4\\n3 1 2\\n2 3 2\\n1 1 3\\n1 3 1\\n3 2 1\\n-1 2 3\\n') == '2'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 2 1\\n-1 1 2') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4\\n1 2 1\\n1 2 1\\n-1 1 2') == '0'\nassert solution('2 3\\n1 2 1\\n1 2 1\\n-1 1 2') == '1'\nassert solution('3 2\\n1 2 1\\n1 2 1\\n-1 1 2') == '2'"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"5 2\") == \"5\"\nassert solution(\"6 2\") == \"6\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"4\"\n\nassert solution(\"3 2\") == \"3\"\n\nassert solution(\"123456789\") == \"123456789\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n353') == '3'\nassert solution('4\\n1234') == '4'"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"5 2\") == \"5\""
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r\"\"\"\n3\n353\n\n2\n8\n\n2\n3\n\n4\n5\n\n4\n1\n\n2\n1\n\n4\n1\n\n4\n2\n\n3\n\"\"\") == \"4\""
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2\n353\n''') == '3'\nassert solution('''4 2\n1234\n''') == '4'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'\nassert solution('100 111') == '101'\nassert solution('101 101') == '100'\nassert solution('1110 1110') == '1111'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'\nassert solution('5 2') == '5'\nassert solution('10 2') == '10'\nassert solution('1012 2') == '1013'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"12 30 45 3 11\"\n) == \"NO\"\nassert solution(\n    \"12 0 1 12 1\"\n) == \"YES\"\nassert solution(\n    \"3 47 0 4 9\"\n) == \"YES\""
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''12 30 45 3 11\n    ''') == 'NO'\nassert solution('''12 0 1 12 1\n    ''') == 'YES'\nassert solution('''3 47 0 4 9\n    ''') == 'YES'''\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([12, 30, 45, 3, 11]) == 'YES'\nassert solution([3, 47, 0, 4, 9]) == 'YES'\nassert solution([3, 0, 1, 12, 1]) == 'YES'\nassert solution([12, 0, 1, 12, 1]) == 'YES'\nassert solution([12, 0, 0, 12, 1]) == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\nprint(\"The local tests are done. It is now time for the actual tests.\")\n\ntest_cases = '''\n12 30 45 3 11\n12 0 1 12 1\n3 47 0 4 9\n'''.splitlines()"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n12 30 45 3 11\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n12 0 1 12 1\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n3 47 0 4 9\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\""
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 2 3 1 0\") == \"3\"\nassert solution(\"2 4 20\") == \"2\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == '3'\n\n'''\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 2 3 1 0\") == \"3\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\nassert solution('1 1 2 3 1 0') == '0'\nassert solution('1 1 2 3 1 0') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 2 3 1 0\") == \"3\"\nassert solution(\"1 1 2 3 1 0\") == \"2\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(INP) == OUT\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 2 3 1 0\") == '3'\nassert solution(\"2 4 20\") == '2'\nassert solution(\"1 1 2 3 1 0\") == '0'\nassert solution(\"2 2 1\") == '0'"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 2 3 1 0') == '3', solution('1 1 2 3 1 0')\nassert solution('2 4 20') == '2', solution('2 4 20')\nassert solution('1 1 2 3 1 0') == '0', solution('1 1 2 3 1 0')\n\n\n'''\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\nassert solution('1 1 2 3 1 0') == '0'\n\"\"\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 2 3 1 0\") == \"3\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\nassert solution('''\n2\n0 0 2\n3 0 2\n6 0 2\n''') == '8'\nassert solution('''\n4\n0 0 2\n2 0 2\n1 1 2\n''') == '6'"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n0 0 1\n2 0 1\n''') == '4'\nassert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\n\nassert solution('''\n3\n0 0 2\n3 0 2\n6 0 2\n''') == '8'"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\nassert solution('''3\n0 0 2\n3 0 2\n6 0 2\n''') == '8'\nassert solution('''3\n0 0 2\n2 0 2\n1 1 2\n''') == '6'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n\n''') == '4'\n\nassert solution('''\n3\n0 0 2\n3 0 2\n6 0 2\n\n''') == '6'\n\nassert solution('''\n3\n0 0 3\n2 0 2\n1 1 3\n\n''') == '8'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n0 0 1\n2 0 1\n4 0 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n0 0 2\n3 0 2\n6 0 2\n\"\"\") == \"8\""
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n''') == \"4\"\n\nassert solution('''\n3\n0 0 2\n3 0 2\n6 0 2\n''') == \"6\"\n\nassert solution('''\n3\n0 0 1\n2 0 1\n1 1 2\n''') == \"8\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n0 0 1\n\"\"\") == \"\"\"4\"\"\"\"\n\nassert solution(\"\"\"\n2\n0 0 1\n3 0 1\n4 0 1\n\"\"\") == \"\"\"8\"\"\"\"\n\nassert solution(\"\"\"\n3\n0 0 2\n3 0 2\n6 0 2\n\"\"\") == \"\"\"6\"\"\"\"\n\n\"\"\"\n\nSolution Approach:\n\nCalculate the area of each of the circles and compare the sum of the squares of each area to the overall area.\n\n\"\"\"\n\nimport sys\nfrom io import StringIO\nimport math\nimport os\nfrom random import randint\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    3\n    0 0 1\n    2 0 1\n    4 0 1\n    ''') == '4'\nassert solution('''\n    3\n    0 0 2\n    3 0 2\n    6 0 2\n    ''') == '6'"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\"\nassert solution([0, 0, 1]) == \"4\"\nassert solution([0, 0, 2]) == \"4\"\nassert solution([0, 1, 1]) == \"3\"\nassert solution([0, 1, 2]) == \"3\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 6 0 6 6 0 6') == 'YES'\nassert solution('1 3 3 5 5 3 3 1') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_1) == 'YES'\nassert solution(input_2) == 'NO'"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\") == \"YES\"\nassert solution(\"1 3 3 5 5 3 3 1\") == \"NO\"\nassert solution(\"6 0 6 6 0 6 0 0\") == \"YES\"\nassert solution(\"7 4 4 7 7 10 10 7\") == \"NO\""
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1''') == 'Yes'\nassert solution('''0 0 6 0 6 6 0 6\n7 4 4 7 7 10 10 7''') == 'No'"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"YES\"\nassert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == \"YES\"\nassert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == \"NO\"\nassert solution('''\n-1 -1 1 -1 1 -1 1 -1\n-1 -1 1 -1 1 -1 1 -1\n''') == \"NO\"\n''')"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 6 0 6 6 0 6') == 'YES', 'Square 1'\nassert solution('1 3 3 5 5 3 3 1') == 'YES', 'Square 2'\nassert solution('6 0 6 6 0 6 0 0') == 'NO', 'Square 3'\nassert solution('7 4 4 7 7 10 10 7') == 'YES', 'Square 4'\nassert solution('0 0 6 0 6 6 0 6') == 'YES', 'Square 5'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n\"\"\") == \"YES\"\n\nassert solution(\n\"\"\"\n0 0 6 0 6 6 0 6\n7 4 4 7 7 10 10 7\n\"\"\") == \"NO\""
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\") == \"YES\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\") == \"NO\"\n\n\"\"\"\n\nfrom math import atan2, sqrt\nfrom copy import deepcopy\n\nclass Rectangle:\n    def __init__(self, position, size):\n        self.position = position\n        self.size = size\n        self.area = size[0] * size[1]\n    def __repr__(self):\n        return str(self.__dict__)\n    def __str__(self):\n        return str(self.__dict__)\n    def __lt__(self, other):\n        if self.area < other.area:\n            return True\n        else:\n            return False\n    def __gt__(self, other):\n        if self.area > other.area:\n            return True\n        else:\n            return False\n    def __eq__(self, other):\n        return self.area == other.area\n    def __ne__(self, other):\n        return not (self == other)\n    def __add__(self, other):\n        if not (isinstance(other, Rectangle)):\n            raise TypeError(\"Can only add Rectangle\")\n        else:\n            return Rectangle(self.position + other.position, self.size + other.size)\n    def __sub__(self, other):\n        if not (isinstance(other, Rectangle)):\n            raise TypeError(\"Can only subtract Rectangle\")\n        else:\n            return Rectangle(self.position - other.position, self.size - other.size)\n    def __mul__(self, other):\n        if not (isinstance(other, int) or isinstance(other, float)):\n            raise TypeError(\"Can only multiply Rectangle by number\")\n        else:\n            return Rectangle(self.position * other, self.size * other)\n    def __rmul__(self, other):\n        if not (isinstance(other, int) or isinstance(other, float)):\n            raise TypeError(\"Can only multiply Rectangle by number\")\n        else:\n            return Rectangle(self.position * other, self.size * other)\n    def __truediv__(self, other):\n        if not (isinstance(other, int) or isinstance(other, float)):\n            raise TypeError(\"Can only divide Rectangle by number\")\n        else:\n            return Rectangle(self.position / other, self.size / other)\n    def __floordiv__(self, other):\n        if not (isinstance(other, int) or isinstance(other, float)):\n            raise TypeError(\"Can only divide Rectangle by number\")\n        else:\n            return Rectangle(self.position // other, self.size // other)\n    def __hash__(self):\n        return hash(self.__repr__())\n    def __contains__(self, item):\n        if self.size > item.size:\n            return (self.size > item.size) and (item.position[0] + item.size[0] > self.position[0] and item.position[1] + item.size[1] > self.position[1])\n        else:\n            return False\n    def __eq__(self, other):\n        return self.area == other.area\n    def __ne__(self, other):\n        return not (self == other)\n    def __lt__(self, other):\n        return self.area < other.area\n    def __gt__(self, other):\n        return self.area > other.area\n    def __le__(self, other):\n        return self.area <= other.area\n    def __ge__(self, other):\n        return self.area >= other.area\n    def __and__(self, other):\n        if not (isinstance(other, Rectangle)):\n            raise TypeError(\"Can only AND with Rectangle\")\n        else:\n            return Rectangle(self.position & other.position, self.size & other.size)\n    def __or__(self, other):\n        if not (isinstance(other, Rectangle)):\n            raise TypeError(\"Can only OR with Rectangle\")\n        else:\n            return Rectangle(self.position | other.position, self.size | other.size)\n    def __xor__(self, other):\n        if not (isinstance(other, Rectangle)):\n            raise TypeError(\"Can only XOR with Rectangle\")\n        else:\n            return Rectangle(self.position ^ other.position, self.size ^ other.size)\n    def __lshift__(self, other):\n        if not (isinstance(other, int)):\n            raise TypeError(\"Can only left shift with int\")\n        else:\n            return Rectangle(self.position << other, self.size << other)\n    def __rshift__(self, other):\n        if not (isinstance(other, int)):\n            raise TypeError(\"Can only right shift with int\")\n        else:\n            return Rectangle(self.position >> other, self.size >> other)\n    def __invert__(self):\n        return Rectangle(self.position ^ self.size, self.size ^ self.position)\n    def is_square(self):\n        if self.size[0] == self.size[1]:\n            return True\n        else:\n            return False\n    def intersects(self, other):\n        if self.size[0] > other.size[0] or self.size[1] > other.size[1]:\n            return False\n        if self.is_square() and not other.is_square():\n            return True\n        if self.is_square() and other.is_square():\n            return True\n        x1 = other.position[0]\n        y1 = other.position[1]\n        x2 = other.position[0] + other.size[0]\n        y2 = other.position[1] + other.size[1]\n        x3 = self.position[0]\n        y3 = self.position[1]\n        x4 = self.position[0] + self.size[0]\n        y4 = self.position[1] + self.size[1]\n        return (x1 <= x3 and x2 >= x4 and y1 <= y3 and y2 >= y4) or (x1 <= x4 and x2 >= x3 and y1 <= y4 and y2 >= y3)\n    def overlaps(self, other):\n        if self.position[0] < other.position[0] or self.position[1] < other.position[1] or self.position[0] + self.size[0] > other.position[0] + other.size[0] or self.position[1] + self.size[1] > other.position[1] + other.size[1]:\n            return False\n        if self.is_"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\") == \"YES\"\nassert solution(\"1 3 3 5 5 3 3 1\") == \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n0''') == 'cslnb'\nassert solution('''2\n1 0\n''') == 'cslnb'\nassert solution('''2\n2 2\n''') == 'cslnb'\nassert solution('''3\n2 3 1\n''') == 'cslnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'cslnb'\nassert solution('3') =='sjfnb'\nassert solution('4') =='sjfnb'\nassert solution('5') == 'cslnb'\nassert solution('6') == 'cslnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n0\") == \"sjfnb\"\nassert solution(\"2\\n1 0\") == \"sjfnb\"\nassert solution(\"2\\n2 2\") == \"sjfnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0\n''') =='sjfnb'\nassert solution('''\n2\n1 0\n''') == 'cslnb'\nassert solution('''\n3\n2 3 1\n''') =='sjfnb'\nassert solution('''\n4\n2 2 1 1\n''') == 'cslnb'\nassert solution('''\n5\n0 0 0 0 0\n''') =='sjfnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"sjfnb\"\nassert solution(\"2\") == \"cslnb\"\nassert solution(\"3\") == \"sjfnb\"\nassert solution(\"4\") == \"cslnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) in {'sjfnb', 'cslnb'}"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') =='sjfnb'\nassert solution('2') == 'cslnb'\nassert solution('3') =='sjfnb'\nassert solution('4') == 'cslnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"sjfnb\"\nassert solution(\"2\") == \"cslnb\"\nassert solution(\"3\") == \"sjfnb\"\nassert solution(\"4\") == \"cslnb\"\nassert solution(\"5\") == \"sjfnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') =='sjfnb'\nassert solution('2') == 'cslnb'\nassert solution('3') =='sjfnb'\nassert solution('4') == 'cslnb'\nassert solution('5') == 'cslnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1 0') == \"sjfnb\"\nassert solution('2\\n2 2') == \"sjfnb\"\nassert solution('2\\n3 2 1') == \"cslnb\"\nassert solution('3\\n2 2 1') == \"sjfnb\"\nassert solution('3\\n3 3 1') == \"cslnb\""
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5 3') == '2'\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5') == '2'\nassert solution('1 2') == '1'\nassert solution('1 1') == '0'\n\n\"\"\""
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n1 5 3\n''') == '2'\nassert solution('''1 2\n1\n''') == '1'\nassert solution('''1 1\n1\n''') == '0'\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n1 5 3\\n\") == \"2\"\nassert solution(\"1 2\\n1\\n\") == \"1\"\nassert solution(\"1 1\\n1\\n\") == \"0\"\nassert solution(\"1 1\\n1\") == \"0\""
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5') == '2'\nassert solution('3 5') == '2'\nassert solution('1 2') == '1'\nassert solution('1 1') == '0'\n\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 1') == '1'\n\n-------\n\nTries to guess maximum number of bowls.\n\nProbability: The bowl of food is hot (at least for t > 1), and probability of crossing the line is 1/t.\n\nThe probability of a dog being able to cross the line (i.e. taking the longest possible number of bowls) can be calculated as\n\nprobability = (1 - (1 / t)) ^ n\n\nwhere n is the number of bowls.\n\nFor example, for t = 1, we have\n\nprobability = 1\n\nfor n = 1, i.e. one bowl.\n\nFor t = 2, we have\n\nprobability = (1 - (1 / t)) ^ 2\n\nfor n = 1, i.e. one bowl.\n\nFor t = 3, we have\n\nprobability = (1 - (1 / t)) ^ 3\n\nfor n = 1, i.e. one bowl.\n\nFor t = 4, we have\n\nprobability = (1 - (1 / t)) ^ 4\n\nfor n = 2, i.e. two bowls.\n\nFor n = 3, we have\n\nprobability = (1 - (1 / t)) ^ 5\n\nfor n = 3, i.e. three bowls.\n\nFor n = 4, we have\n\nprobability = (1 - (1 / t)) ^ 6\n\nfor n = 4, i.e. four bowls.\n\nFor n = 5, we have\n\nprobability = (1 - (1 / t)) ^ 7\n\nfor n = 5, i.e. five bowls.\n\nFor n = 6, we have\n\nprobability = (1 - (1 / t)) ^ 8\n\nfor n = 6, i.e. six bowls.\n\nFor n = 7, we have\n\nprobability = (1 - (1 / t)) ^ 9\n\nfor n = 7, i.e. seven bowls.\n\nFor n = 8, we have\n\nprobability = (1 - (1 / t)) ^ 10\n\nfor n = 8, i.e. eight bowls.\n\nFor n = 9, we have\n\nprobability = (1 - (1 / t)) ^ 11\n\nfor n = 9, i.e. nine bowls.\n\nFor n = 10, we have\n\nprobability = (1 - (1 / t)) ^ 12\n\nfor n = 10, i.e. ten bowls.\n\nSince probability is 0, we can guess the maximum number of bowls that the dog can eat.\n\nThe last part is that the dog can not eat from the 10th bowl up to the (T - 1)th bowl.\n\nPossibility that the dog can eat from the 10th bowl is 1 - (1 / t) ^ 10, since the dog is allowed to run from the 10th bowl to the end.\n\nTherefore, the maximum number of bowls the dog can eat in T seconds is\n\nT = log_2(1 - (1 / (10 - 1)) ^ 10)\n\nThis is a number between 0 and 1, where 0 means the dog will stop the show before (the 10th) bowl and 1 means the dog can eat from the 10th bowl up to the end.\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3, 5, 2]) == 2\nassert solution([1, 2, 3]) == 2\nassert solution([1, 2, 1]) == 3\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(None) == 1\nassert solution(\"1 1\") == 0\nassert solution(\"1 2\") == 1\nassert solution(\"2 3\") == 2\nassert solution(\"3 1\") == 3\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5\\n1 5 3\\n') == '2'\nassert solution('1 2\\n1\\n') == '1'\n\n\"\"\"\nfrom collections import deque\n\nn, t = map(int, input().split())\ntasks = deque()\n\nfor i in range(n):\n    tasks.append(int(input()))\n\nend_time = 0\nwhile tasks:\n    task = tasks.popleft()\n    end_time += task\n    if end_time >= t:\n        break\n\nprint(len(tasks))\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5') == '2'\nassert solution('1 2') == '1'\nassert solution('1 1') == '0'\n\n\n'''"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2 -1 0 1\"\n\nassert solution(\"1\") == \"1 0 1\"\n\nassert solution(\"3\") == \"2 -1 0 1\"\n\nassert solution(\"5\") == \"1 -1 1 1\"\n\nassert solution(\"6\") == \"1 -1 1 1\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == '2'\nassert solution(\"-1\") == '-1'\nassert solution(\"0\") == '0'\nassert solution(\"1\") == '0'\nassert solution(\"2 -1\") == '0 1'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n2\n-1\n3\n-1''') == '2 1'\nassert solution('''3\n-1\n-1''') == '-1 1'\nassert solution('''5\n-1\n2\n3\n-2''') == '-1 1 -1 2'\n\n'''\n\nn = int(input())"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == '2 -1 0 1'\nassert solution(\"1\") == '0 1'\nassert solution(\"2\") == '1 -1 0 1'\n\nassert solution(\"5\") == '4 -1 0 1'\n\n\n'''\n\n\n\nn=int(input())\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'\nassert solution('3') == '2'\n\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n-1 0 1''') == '2 -1 0 1'\n\nassert solution('''3\n0 1\n1\n0''') == '3 -1 0 1'"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '-1 0 1'\nassert solution('5') == '-1 0 1'\nassert solution('3') == '1'\nassert solution('4') == '0 1'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\nassert solution('4') == '-1 0 1'\nassert solution('0') == '0'\nassert solution('1') == '0 1'\n\"\"\""
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1 0 1'\nassert solution('2') == '-1 0 1'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == stdin\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == '1 3 3'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '1 2 2'\nassert solution('3 2 5 3') == '1 2 2'\nassert solution('3 3 5 3') == '1 2 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1 3 3'\nassert solution() == '2 3 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 5 3') == '1 2 2'\nassert solution('3 1 5 3') == '1 2 3'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1 2 2\"\n\ns = stdin\nn, k, m, a = map(int, s.split())\n\nfrom collections import defaultdict\nc_votes = defaultdict(int)\n\nfor i in range(1, m+1):\n    c_votes[s[i]] += 1\n\nimport itertools\ncount = 0\nfor i in itertools.count():\n    if sum(c_votes.values()) == 0:\n        count += 1\n        break\n    elif i == m:\n        if count > k:\n            count += 1\n            break\n        else:\n            count += 1\n            continue\n    c_votes[s[i]] += 1\n\nprint(count)"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1 5 4\n1 2 1 3\n''') == '1 3 3'\n\nassert solution('''\n3 1 5 3\n1 3 1\n''') == '2 3 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '''\n3 1 5 4\n1 2 1 3\n    '''\n) == '1 3 3'\nassert solution(\n    '''\n3 1 5 3\n1 3 1\n    '''\n) == '2 3 2'\nassert solution(\n    '''\n3 3 5 3\n1 1 1\n    '''\n) == '1 2 1'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1 5 4\n1 2 1 3\n''') == '1 3 3'\nassert solution('''\n3 1 5 3\n1 3 1\n''') == '2 3 2'\nassert solution('''\n2 2 5 3\n1 3 1\n''') == '1 2 2'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1 2 2\""
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\nassert solution('100110') == '21'"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''110\n2''') == '3'\nassert solution('''111111011\n2''') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"111111011\") == \"169\""
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8\n2''') == '6'\nassert solution('''16\n3''') == '9'\nassert solution('''\n2\n''') == '0'\nassert solution('''\n1\n1\n''') == '5'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n\n\"\"\"\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\nassert solution('1234') == '0'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\nassert solution('11111') == '181'"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n3 1\\n2 1\\n2 2\\n') == '33.121375178000'\nassert solution('5 0 4 2 2 0\\n5\\n5 2\\n3 0\\n5 5\\n3 5\\n3 3\\n') == '33.121375178000'\nassert solution('5 0 4 2 2 0\\n5\\n5 2\\n3 0\\n5 5\\n3 5\\n3 3\\n') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([3, 1, 1, 2, 0, 0]) == \"11.084259940083\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == '11.084259940083'\nassert solution('''\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'\nassert solution('''\n1\n1\n2\n''') == '1.414213562373095'\nassert solution('''\n2\n2\n2\n''') == '1.0'\nassert solution('''\n2\n2\n2\n''') == '0.9'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 4 2 2 0') == '33.121375178000'\nassert solution('1 1') == '11.084259940083'"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1 2 0 0\") == '11.084259940083'\nassert solution(\"5 0 4 2 2 0\") == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == \"11.084259940083\"\nassert solution('''5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == \"33.121375178000\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1\n3 1\n5 2\n3 5\n5 2''') == '33.121375178000'\nassert solution('''3\n1 1\n2 2\n2 3''') == '11.084259940083'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'\nassert solution('''\n3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == '11.084259940083'\nassert solution('''\n1 1\n1 1\n''') == '0.0'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == '11.084259940083'\nassert solution('''5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'\nassert solution('''1\n1\n2\n1\n1\n2\n''') == '10.835202770083'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\""
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 5') == '2'\nassert solution('7 20') == '1'\nassert solution('1000000000000 1000000000001') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8 5\") == '2'\nassert solution(\"8 15\") == '1'\nassert solution(\"7 20\") == '0'\nassert solution(\"1000000000000 1000000000001\") == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"7 5\\n\"\n) == \"1\"\n\nassert solution(\n    \"8 5\\n\"\n) == \"2\"\n\nassert solution(\n    \"8 15\\n\"\n) == \"1\"\n\nassert solution(\n    \"7 20\\n\"\n) == \"0\"\n\nassert solution(\n    \"1000000000000 1000000000001\\n\"\n) == \"500000000000\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\nassert solution('''\n8 5\n''') == '2'\nassert solution('''\n7 20\n''') == '1'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8 5''') == '2'\nassert solution('''8 15''') == '1'\nassert solution('''7 20''') == '0'\nassert solution('''1000000000000 1000000000001''') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 3') == '2'\nassert solution('10 3') == '1'"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n8 5\n''') == '2'\nassert solution('''\n8 15\n''') == '1'\nassert solution('''\n7 20\n''') == '0'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1 10\n01000\n''') == '11'\n\nassert solution('''7 2 3\n1111111\n''') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1 10\n01000\n''') == '11'\nassert solution('''7 2 3\n1111111\n''') == '0'\nassert solution('''4 7 4\n1201\n''') == '2'\nassert solution('''5 10 1\n01000\n''') == '11'\nassert solution('''5 10 1\n01010\n''') == '1'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '11'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 1 10\n01000\n\n''') == \"11\"\nassert solution('''7 2 3\n1111111\n\n''') == \"0\"\nassert solution('''5 1 10\n01000\n\n''') == \"11\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1 10\n01000''') == '11'\nassert solution('''7 2 3\n1111111''') == '0'\nassert solution('''5 10 1\n01000''') == '11'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 1 10\n01000''') == '11'\nassert solution('''5 10 1\n01000''') == '2'\nassert solution('''7 2 3\n1111111''') == '0'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\") == \"2\"\nassert solution(\"1 10 1\") == \"11\"\nassert solution(\"7 2 3\") == \"0\""
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 1 10\") == \"11\"\nassert solution(\"5 10 1\") == \"2\"\nassert solution(\"7 2 3\") == \"0\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n\n\"\"\""
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1 1\n''') == '2 1'\nassert solution('''5 1 2\n''') == '19 5'\nassert solution('''5 1 2\n''') == '19 5'\nassert solution('''3 2 1\n''') == '1 2'\nassert solution('''3 2 1\n''') == '1 2'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 1 1\n\"\"\") == \"2 1\"\n\nassert solution(\"\"\"\n5 1 2\n\"\"\") == \"19 5\"\n\nassert solution(\"\"\"\n1 3 3\n\"\"\") == \"-1\""
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 1 1\n''') == '2 1'\nassert solution('''5 1 2\n''') == '19 5'"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3, 1, 1]) == '2 1'\nassert solution([5, 1, 2]) == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\nassert solution('3 1 2') == '-1'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n\n'''"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7 1\n''') == '6'\nassert solution('''10 2\n''') == '4'\nprint('ALL TEST CASES PASSED')\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 2\") == \"4\"\nassert solution(\"7 1\") == \"6\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '6'\nassert solution('10 2') == '4'\nassert solution('7 1') == '6'"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '0.0.0.0/0'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('2') == '196.168.0.0/16'\nassert solution('5') == '195.82.146.208/29'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0.0.0.0/0\"\nassert solution(\"4\") == \"0.0.0.0/0\"\nassert solution(\"5\") == \"195.0.0.0/8\"\nassert solution(\"2\") == \"195.0.0.0/8\"\nassert solution(\"3\") == \"127.0.0.4/30\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n-149.154.167.99\n''') == '1\\n0.0.0.0/0\\n'\n\nassert solution('''4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n''') == '2\\n149.154.167.99\\n149.154.167.120/29\\n'\n\nassert solution('''5\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31\n''') == '2\\n195.0.0.0/8\\n127.0.0.4/30\\n'\n\nassert solution('''2\n+127.0.0.1/32\n-127.0.0.1\n''') == '-1\\n'\n\nassert solution('''2\n+127.0.0.1/32\n-127.0.0.1\n''') == '-1\\n'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n-149.154.167.99\\n') == '1\\n0.0.0.0/0\\n'\nassert solution('2\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\\n') == '2\\n195.0.0.0/8\\n127.0.0.4/30\\n'"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '199.0.0.0/8'\nassert solution('3') == '199.0.0.0/8'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '-1', solution()\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n-149.154.167.99\n\nOutput\n1\n0.0.0.0/0\n\nInput\n4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n\nOutput\n2\n149.154.167.99\n149.154.167.120/29\n\nInput\n5\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31\n\nOutput\n2\n195.0.0.0/8\n127.0.0.4/30\n\nInput\n2\n+127.0.0.1/32\n-127.0.0.1\n\nOutput\n-1\n\n''') == '2\\n0.0.0.0/0\\n149.154.167.99\\n149.154.167.120/29\\n195.0.0.0/8\\n127.0.0.4/30\\n127.0.0.6/31'\n\nassert solution('''\n2\n+127.0.0.1/32\n-127.0.0.1\n\nOutput\n-1\n\n''') == '-1'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n-149.154.167.99\n\n2\n-127.0.0.1/32\n-127.0.0.1''') == '1\\n0.0.0.0/0\\n1\\n0.0.0.0/0\\n-1\\n'\nassert solution('''4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n\n2\n195.0.0.0/8\n-127.0.0.4/31\n-127.0.0.1/30''') == '2\\n195.0.0.0/8\\n195.0.0.0/8\\n-1\\n127.0.0.4/31\\n127.0.0.1/30\\n-1\\n'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\nassert solution('1') == '0.0.0.0/0'\nassert solution('2') == '149.154.167.99/30'\nassert solution('3') == '129.1.0.0/29'\nassert solution('4') == '149.154.167.99/30'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n00000000008\n''') == '1'\n\nassert solution('''\n22\n0011223344556677889988\n''') == '2'\n\nassert solution('''\n11\n31415926535\n''') == '0'"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n0011223344556677889988\n''') == '1'\nassert solution('''11\n31415926535\n''') == '0'\nassert solution('''5\n00000000008\n''') == '1'\nassert solution('''11\n31415926535\n''') == '0'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"11\\n00000000008\") == \"1\"\nassert solution(\"22\\n0011223344556677889988\") == \"2\"\nassert solution(\"11\\n31415926535\") == \"0\""
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n0000000001\n0123456789''') == '1'\nassert solution('''5\n0000000001\n0123456789''') == '2'\nassert solution('''5\n0000000001\n0123456789''') == '0'\nassert solution('''5\n0000000001\n0123456789''') == '0'\nassert solution('''4\n0000000001\n0123456789''') == '0'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"1\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"22\\n0000000000\") == \"0\"\nassert solution(\"11\\n31415926535\") == \"1\"\nassert solution(\"22\\n31415926535\") == \"0\"\nassert solution(\"22\\n31415926535\") == \"0\"\n\n\n\n\n'''"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"11\\n00000000008\") == \"1\"\nassert solution(\"22\\n0011223344556677889988\") == \"2\"\nassert solution(\"11\\n31415926535\") == \"0\""
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"22\") == \"2\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11') == '1'\nassert solution('22') == '2'\nassert solution('11') == '0'\nassert solution('31415926535') == '0'"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"3 3\") == \"-1\""
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\n\nassert solution('''\n3 4\n0 0 0\n0 1 0\n0 0 0\n''') == '-1'\n\nassert solution('''\n2 2\n2 2 2\n0 0 0\n''') == '3'"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n') == '4\\nrow 1\\nrow 1\\ncol 4\\nrow 3\\n'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n\") == \"4\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"3\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"-1\""
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n\") == \"4\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"3\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"-1\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '-1'"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1') == '4'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '3'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '-1'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '3'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '3'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1') == '4'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '3'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '-1'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '3'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == '3'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n\") == \"4\\nrow 1\\nrow 1\\ncol 4\\nrow 3\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5') == '4'\nassert solution('3 3') == '3'\nassert solution('3 3') == '-1'\nassert solution('5 5') == '2'\nassert solution('5 5') == '-1'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8 6 4 5\n''') == 'YES'\nassert solution('''\n8 6 4 6\n''') == 'NO'\nassert solution('''\n10 3 11 4\n''') == 'YES'\nassert solution('''\n4 2 1 4\n''') == 'NO'"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8 6 4 5\\n\") == \"YES\"\nassert solution(\"8 6 4 6\\n\") == \"NO\"\nassert solution(\"10 3 11 4\\n\") == \"YES\"\nassert solution(\"4 2 1 4\\n\") == \"YES\"\nassert solution(\"5 3 4 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n8 6 4 5\n''') == 'YES'\nassert solution('''\n8 6 4 6\n''') == 'NO'\nassert solution('''\n10 3 11 4\n''') == 'YES'\nassert solution('''\n4 2 1 4\n''') == 'YES'\nassert solution('''\n4 2 1 3\n''') == 'NO'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"YES\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 10 2 3\") == \"NO\"\nassert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"10 3 11 4\") == \"NO\"\nassert solution(\"4 2 1 4\") == \"YES\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'YES'\nassert solution('4 2 1 4') == 'YES'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"YES\"\nassert solution(\"4 2 1 4\") == \"YES\""
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8 6 4 5\n''') == 'YES'\nassert solution('''8 6 4 6\n''') == 'NO'\nassert solution('''10 3 11 4\n''') == 'YES'\nassert solution('''4 2 1 4\n''') == 'YES'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 6 4 5\n''') == 'YES'\n\nassert solution('''\n10 6 4 6\n''') == 'NO'\n\nassert solution('''\n4 2 1 4\n''') == 'YES'"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 2\n1 3\n2 4\n''') == '6'\nassert solution('''7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n''') == '12'\nassert solution('''4 2\n1 3\n1 4\n''') == '-1'"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"7 8\") == \"12\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"12\", \"First\"\nassert solution(\"7 8\") == \"12\", \"Second\"\nassert solution(\"1 4\") == \"6\", \"Third\"\nassert solution(\"1 1\") == \"1\", \"Fourth\"\nassert solution(\"5 5\") == \"1\", \"Fifth\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '12'\nassert solution('4 2') == '6'\nassert solution('7 8') == '12'\nassert solution('2 2') == '-1'\nassert solution('7 8') == '-1'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"12\"\nassert solution(\"7 8\") == \"12\"\nassert solution(\"4 2\") == \"6\"\nassert solution(\"1 6\") == \"12\"\nassert solution(\"2 6\") == \"12\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == '6'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n1 2\n2 1\n''') == '12'\n\nassert solution('''\n5 8\n1 4\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n''') == '12'\n\nassert solution('''\n7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n''') == '12'\n\nassert solution('''\n3 3\n1 3\n2 2\n3 1\n''') == '-1'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '6'\nassert solution('7 8') == '12'\nassert solution('2 2') == '-1'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"12\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0''') == 'NO'\nassert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0''') == 'YES'\n\n'''"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0''') == 'NO'\nassert solution('''3 2\n1 0\n1 1\n0 1''') == 'YES'\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"5 3\") == \"NO\"\nassert solution(\"10 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\""
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == 'NO', \"solution() failed; stdin was {}\".format(repr(stdin))\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\""
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == 'NO'\n\nassert solution('''3 2\n1 0\n1 1\n0 1\n\n''') == 'YES'\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\n\nInput:\n\n10 3\n0 0 1 1 1 0 0 0 1 1 1\n\nOutput:\n\nNO\n\nInput:\n\n5 1\n1 0\n\nOutput:\n\nYES\n\nInput:\n\n5 2\n1 0 1 1 1\n\nOutput:\n\nYES\n\"\"\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\n\n\n\"\"\"\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n1 0\n1 1\n0 1''') == 'YES'\nassert solution('''3 2\n1 0\n1 1\n0 1''') == 'NO'\nassert solution('''10 2\n1 0\n1 1\n0 1\n1 1\n0 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == 'YES'\nassert solution('''10 3\n1 0\n1 1\n0 1\n1 1\n0 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == 'NO'\nassert solution('''10 4\n1 0\n1 1\n0 1\n1 1\n0 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == 'YES'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 5\\n2 3\\n') == 'Yes'\nassert solution('4 5\\n2 3 5 12') == 'No'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5\n2 3 5 12\n\n''') == 'Yes'\nassert solution('''\n2 7\n2 3\n\n''') == 'No'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5') == 'Yes'\nassert solution('2 7') == 'No'\nassert solution('3 5') == 'No'\n\"\"\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 5\n2 3 5 12\n''') == 'Yes'\nassert solution('''\n2 7\n2 3\n''') == 'No'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"Yes\"\nassert solution(\"2 7\") == \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5') == 'Yes'\nassert solution('2 7') == 'No'\nassert solution('4 5') == 'Yes'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5') == 'Yes'\nassert solution('2 7') == 'No'\n\n-----------------\n\nPari and Arya have some problem understanding the modulo operation.\n\nArya can only understand the value of a number after converting it to an integer. \n\nIn the first sample, Pari can't understand the value of $x \\operatorname{mod} 5$. \n\nIn the second sample, Pari can understand the value of $x \\operatorname{mod} 7$.\n\nPari and Arya has to tell us if they have a winning strategy independent of the value of x. \n\nSolution"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 5\n2 3\n\"\"\") == \"No\"\nassert solution(\"\"\"4 5\n2 3 5 12\n\"\"\") == \"Yes\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n2 3\\n\") == \"Yes\"\nassert solution(\"4 7\\n1 2\\n\") == \"No\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n2 3 5 12\") == \"Yes\"\nassert solution(\"2 7\\n2 3\") == \"No\"\n\n\"\"\"\n\n\"\"\"---SOLUTION---\"\"\""
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 4') == '8'\nassert solution('2 2 2') == '-1'\nassert solution('3 2 5') == '8'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4 1\n3 4 1''') == '6'\nassert solution('''6 4 2\n3 4 1''') == '8'\nassert solution('''2 3 4\n3 4 1''') == '-1'"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\""
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 4 1\n''') == '6'\nassert solution('''\n6 4 2\n''') == '8'\nassert solution('''\n2 3 4\n''') == '-1'\nassert solution('''\n4 5 8\n''') == '36'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\""
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 4\") == \"8\"\nassert solution(\"6 4 2\") == \"6\"\nassert solution(\"2 3 4\") == \"0\"\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n\"\"\"\n\nfrom math import sqrt\n\nstdin = input()\n\nn, m, k = list(map(int, stdin.split()))"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '2'\nassert solution('3') == '0'\nassert solution('4') == '0'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 2 4 3\\n') == '2'\nassert solution('3\\n4 1 1\\n') == '0'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('3') == '0'\nassert solution('4') == '0'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '-1'\nassert solution('3') == '2'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 2 4 3\n\n''') == '2', \"0\"\nassert solution('''4\n4 1 1\n\n''') == '1', \"0\"\nassert solution('''3\n4 1 1\n\n''') == '-1', \"0\"\nassert solution('''2\n0 2 2\n\n''') == '0', \"0\"\nassert solution('''3\n0 2 2\n\n''') == '1', \"0\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 1 2 4\") == \"2\"\nassert solution(\"5\\n1 2 2 4 3\") == \"2\"\nassert solution(\"10\\n3 4 5 4 3\") == \"3\"\nassert solution(\"10\\n1 2 1 4 3\") == \"1\""
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2 2 4 3\n\n''') == '2'\nassert solution('''3\n4 1 1\n\n''') == '0'\nassert solution('''4\n0 3 0 4\n\n''') == '0'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 2 4 3') == '2'\nassert solution('4\\n4 1 1') == '0'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 2 4 3') == '2'\nassert solution('4\\n1 1 1') == '-1'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3') == '2'\nassert solution('3\\n1 2 1') == '3'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(8) == 5\n\nassert solution(2) == 2"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''8\n10000011''') == '5'\nassert solution('''2\n01''') == '2'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8\\n10000011\") == \"5\"\nassert solution(\"2\\n01\") == \"2\"\n\n\"\"\"\n\nn = int(input())\nstring = input()"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(inp) == '5'\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8\n10000011''') == '5'\nassert solution('''2\n01''') == '2'\nassert solution('''1\n10\n''') == '2'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8') == '5'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\".1\") == \"1\"\nassert solution(\".1\") == \"1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"10\") == \"11\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(s) == '5'"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8') == '5'\nassert solution('2') == '2'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n2 3 1 4\n''') == '3'\nassert solution('''4\n4 4 4 4\n''') == '-1'\nassert solution('''4\n2 1 4 3\n''') == '1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\nassert solution() == '-1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"2 3 4 1\") == \"-1\"\n\n'''\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 1 4') == '3'\nassert solution('4\\n4 4 4 4') == '-1'\nassert solution('4\\n2 1 4 3') == '1'"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\nassert solution('''\n4\n2 1 4 3\n''') == \"1\"\nassert solution('''\n4\n4 4 4 4\n''') == \"-1\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '1'"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\n\n'''\nimport itertools\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n2 3 1 4\n''') == '3'\nassert solution('''4\n2 1 4 3\n''') == '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 1 4') == '3'\nassert solution('4\\n4 4 4 4') == '-1'\nassert solution('4\\n2 1 4 3') == '1'\nassert solution('4\\n3 3 1 4') == '1'\nassert solution('4\\n3 4 4 3') == '-1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 1 4') == '3'\nassert solution('4\\n4 4 4 4') == '-1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '0'\nassert solution('2') == '1'\nassert solution('8') == '2'"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('7') == '0'\nassert solution('2') == '1'"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 3 2 0\n''') == '2'\nassert solution('''\n7\n1 3 3 2 1 2 3\n''') == '1'\nassert solution('''\n2\n2 2\n''') == '0'\nassert solution('''\n3\n1 3 3 2 1 2 3\n''') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7') == '0'\nassert solution('3') == '2'\nassert solution('2') == '1'\n\n\n>>> \n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"7\") == \"0\""
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"1\"\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3 2 0') == '2'\nassert solution('4') == '1'\nassert solution('7') == '0'\nassert solution('2') == '1'"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 3 2 0\n''') == '2'\nassert solution('''\n7\n1 3 3 2 1 2 3\n''') == '0'\nassert solution('''\n2\n2 2\n''') == '1'"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''9\n''') == '504'\nassert solution('''7\n''') == '210'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '504'\nassert solution('7') == '210'"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\""
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n\n\"\"\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2\\n2\\n') == '32'\nassert solution('8\\n3\\n4\\n') == '96'\nassert solution('4\\n4\\n4\\n') == '64'\nassert solution('5\\n6\\n4\\n') == '128'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''3\n0 0 1 1\n0 1 1 2\n3 0 4 1\n''') == '1 1'\nassert solution('''4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''\n4\n0 0 5 5\n0 1 2 4\n1 2 4 5\n1 3 4 4\n''') == '1 1'\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'\nassert solution('''\n4\n0 0 5 5\n0 1 2 4\n1 2 4 5\n1 3 4 4\n''') == '3 4'"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"1 1\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"1 1\"\nassert solution(\"4\") == \"1 1\"\nassert solution(\"5\") == \"3 4\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''\n4\n0 0 5 5\n0 1 4 4\n1 0 2 1\n1 1 4 4\n''') == '1 1'\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1 1\"\nassert solution(\"4\") == \"3 4\"\nassert solution(\"5\") == \"3 4\""
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''\n3\n0 0 1 1\n0 1 1 2\n1 0 2 1\n''') == '1 1'\nassert solution('''\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1 1'\nassert solution('4') == '1 1'\nassert solution('5') == '3 4'"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1 1'\nassert solution('2') == '1 1'\nassert solution('3') == '1 1'\nassert solution('4') == '1 1'\nassert solution('5') == '1 1'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n\n'''\n) == '1 1'\n\nassert solution(\n'''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n\n'''\n) == '1 1'\n\nassert solution(\n'''\n4\n0 0 5 5\n0 1 4 4\n1 2 6 7\n2 3 5 6\n8 1 9 2\n\n'''\n) == '1 1'\n\nassert solution(\n'''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n\n'''\n) == '3 4'"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1 1\"\nassert solution() == \"1 1\"\n\nassert solution() == \"1 1\"\nassert solution() == \"1 1\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"YES\", f\"input: {stdin}\"\nassert solution(\"4\") == \"NO\", f\"input: {stdin}\"\nassert solution(\"5\") == \"YES\", f\"input: {stdin}\"\nassert solution(\"6\") == \"NO\", f\"input: {stdin}\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"8\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n18 55 16 17\\n\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\\n\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\\n\") == \"YES\"\nassert solution(\"2\\n2 2\\n\") == \"YES\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"10\") == \"NO\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8\n5 972 3 4 1 4 970 971\n''') == 'NO'\nassert solution('''4\n18 55 16 17\n''') == 'YES'\nassert solution('''6\n40 41 43 44 44 44\n''') == 'YES'\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven the tuple \"xy\" of x and y, return a list of the numbers that are positive and negative.\n\npos_neg_from_tuple_xy(\"(10, 20)\")  # -> [\"10\", \"-20\"]\npos_neg_from_tuple_xy(\"(10, -20)\")  # -> [\"10\", \"20\"]\npos_neg_from_tuple_xy(\"(-10, 20)\")  # -> [\"-10\", \"20\"]\npos_neg_from_tuple_xy(\"(-10, 20)\")  # -> [\"-10\", \"20\"]\npos_neg_from_tuple_xy(\"(0, 20)\")  # -> [\"0\", \"20\"]\npos_neg_from_tuple_xy(\"(-20, 0)\")  # -> [\"-20\", \"0\"]\npos_neg_from_tuple_xy(\"(0, -20)\")  # -> [\"0\", \"-20\"]\npos_neg_from_tuple_xy(\"(0, 20)\")  # -> [\"0\", \"20\"]\npos_neg_from_tuple_xy(\"(10, 10)\")  # -> [\"10\", \"10\"]\npos_neg_from_tuple_xy(\"(-10, 10)\")  # -> [\"-10\", \"10\"]\npos_neg_from_tuple_xy(\"(0, -10)\")  # -> [\"0\", \"-10\"]\npos_neg_from_tuple_xy(\"(0, 10)\")  # -> [\"0\", \"10\"]\npos_neg_from_tuple_xy(\"(20, -20)\")  # -> [\"20\", \"-20\"]\npos_neg_from_tuple_xy(\"(20, 20)\")  # -> [\"20\", \"20\"]\npos_neg_from_tuple_xy(\"(10, 10)\")  # -> [\"10\", \"10\"]\npos_neg_from_tuple_xy(\"(0, -10)\")  # -> [\"0\", \"-10\"]\npos_neg_from_tuple_xy(\"(0, 10)\")  # -> [\"0\", \"10\"]\npos_neg_from_tuple_xy(\"(20, 20)\")  # -> [\"20\", \"20\"]\npos_neg_from_tuple_xy(\"(0, 0)\")  # -> [\"0\", \"0\"]\npos_neg_from_tuple_xy(\"(1, 1)\")  # -> [\"1\", \"1\"]\npos_neg_from_tuple_xy(\"(1, 0)\")  # -> [\"1\", \"0\"]\npos_neg_from_tuple_xy(\"(0, 1)\")  # -> [\"0\", \"1\"]\npos_neg_from_tuple_xy(\"(0, 0)\")  # -> [\"0\", \"0\"]\npos_neg_from_tuple_xy(\"(-1, -1)\")  # -> [\"-1\", \"-\"1\"]\npos_neg_from_tuple_xy(\"(-1, -0)\")  # -> [\"-1\", \"0\"]\npos_neg_from_tuple_xy(\"(0, -1)\")  # -> [\"0\", \"-\"1\"]\npos_neg_from_tuple_xy(\"(1, -1)\")  # -> [\"1\", \"-\"1\"]\npos_neg_from_tuple_xy(\"(0, 0)\")  # -> [\"0\", \"0\"]\npos_neg_from_tuple_xy(\"(-1, 0)\")  # -> [\"-1\", \"0\"]\npos_neg_from_tuple_xy(\"(0, 1)\")  # -> [\"0\", \"1\"]\npos_neg_from_tuple_xy(\"(-1, 1)\")  # -> [\"-1\", \"1\"]\npos_neg_from_tuple_xy(\"(1, 1)\")  # -> [\"1\", \"1\"]\npos_neg_from_tuple_xy(\"(0, 0)\")  # -> [\"0\", \"0\"]\npos_neg_from_tuple_xy(\"(10, 10)\")  # -> [\"10\", \"10\"]\npos_neg_from_tuple_xy(\"(10, -10)\")  # -> [\"10\", \"-10\"]\npos_neg_from_tuple_xy(\"(-10, -10)\")  # -> [\"-10\", \"-10\"]\npos_neg_from_tuple_xy(\"(-10, 10)\")  # -> [\"-10\", \"10\"]\npos_neg_from_tuple_xy(\"(10, 10)\")  # -> [\"10\", \"10\"]\npos_neg_from_tuple_xy(\"(-20, -20)\")  # -> [\"-20\", \"-20\"]\npos_neg_from_tuple_xy(\"(20, 20)\")  # -> [\"20\", \"20\"]\npos_neg_from_tuple_xy(\"(-20, 20)\")  # -> [\"-20\", \"20\"]\npos_neg_from_tuple_xy(\"(-20, -20)\")  # -> [\"-20\", \"-20\"]\npos_neg_from_tuple_xy(\"(20, -20)\")  # -> [\"20\", \"-20\"]\npos_neg_from_tuple_xy(\"(0, -20)\")  # -> [\"0\", \"-20\"]\npos_neg_from_tuple_xy(\"(20, 20)\")  # -> [\"20\", \"20\"]\npos_neg_from_tuple_xy(\"(20, -20)\")  # -> [\"20\", \"-20\"]\npos_neg_from_tuple_xy(\"(20, 20)\")  # -> [\"20\", \"20\"]\npos_neg_from_tuple_xy(\"(0, 20)\")  # -> [\"0\", \"20\"]\npos_neg_from_tuple_xy(\"(0, 0)\")  # -> [\"0\", \"0\"]\npos_neg_from_tuple_xy(\"(-1, -1)\")  # -> [\"-1\", \"-\"1\"]\npos_neg_from_tuple_xy(\"(-1, 0)\")  # -> [\"-1\", \"0\"]\npos_neg_from_tuple_xy(\"(0, -1)\")  # -> [\"0\", \"-\"1"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"6\") == \"NO\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n18 55 16 17') == 'YES'\nassert solution('2\\n40 41 43 44 44 44') == 'NO'\nassert solution('3\\n5 972 3 4 1 4 970 971') == 'YES'\nassert solution('4\\n5 972 3 4 1 4 970 971') == 'NO'\nassert solution('5\\n5 972 3 4 1 4 970 971') == 'YES'"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n18 55 16 17\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n6\n40 41 43 44 44 44\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n8\n5 972 3 4 1 4 970 971\n\"\"\") == \"YES\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n18 55 16 17') == 'YES'\nassert solution('6\\n40 41 43 44 44 44') == 'NO'\nassert solution('8\\n5 972 3 4 1 4 970 971') == 'YES'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\\n') == '9'\nassert solution('5 5\\n1 2 3 4 5\\n1 2 3 4 5\\n') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_1) == '9'\nassert solution(input_2) == '10'"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n\"\"\") == \"9\"\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n1 2 3 4 5\n\"\"\") == \"10\""
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '5 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\n'\n    '1 2 3 4 5\\"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"1 10\\n\"\n    \"1 2 3\\n\"\n    \"1 2 3 7 8 9 11 12 13\"\n) == \"9\"\n\nassert solution(\n    \"5 5\\n\"\n    \"1 2 3 4 5\\n\"\n    \"1 2 3 4 5\"\n) == \"10\"\n\nassert solution(\n    \"6 8\\n\"\n    \"1 2 3 4 5\\n\"\n    \"1 2 3 4 5 6 7 8 9 11 12 13\"\n) == \"10\"\n\nassert solution(\n    \"1 2 3 4 5\\n\"\n    \"1 2 3 4 5 6 7 8 9 11 12 13\"\n) == \"6\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 9\\n\"\n    \"1 2 3\\n\"\n    \"1 2 3 7 8 9 11 12 13\\n\"\n) == \"9\"\n\nassert solution(\n    \"5 5\\n\"\n    \"1 2 3 4 5\\n\"\n    \"1 2 3 4 5\\n\"\n) == \"10\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5''') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '9'\nassert solution('5 5') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5''') == '10'\n\nprint(solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13'''))"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == \"9\"\nassert solution('''\n5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == \"10\"\nassert solution('''\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == \"1\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(1) == 'Vasya'\nassert solution(2) == 'Petya'\nassert solution(8) == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"Petya\"\nassert solution(\"5\") == \"Vasya\"\nassert solution(\"8\") == \"Petya\"\nassert solution(\"16\") == \"Vasya\"\nassert solution(\"32\") == \"Vasya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'Petya'\nassert solution('8') == 'Vasya'\nassert solution('1') == 'Vasya'\nassert solution('3') == 'Petya'\nassert solution('4') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\") == \"0\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"4 3 6\") == \"1\"\n\n[Note]\n\nInput:\n0\n1 5 3\n1 3\n1 1\n1 5\n\nOutput:\n2\n\nInput:\n1 5 3\n1 3\n1 1\n1 5\n\nOutput:\n1\n\n\"\"\""
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 3\\n1 2') == '1'\nassert solution('1 5 3\\n1 3') == '2'\nassert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\nassert solution(\n    \"\"\"\n1 3\n1 1\n1 5\n\"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"\n1 5\n1 3\n1 5\n\"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"\n2 3\n1 2\n2 2\n2 1\n\"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"\n3 5\n1 3\n2 3\n3 2\n3 3\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 3') == '0'\nassert solution('2 4 6') == '1'\nassert solution('1 4 3') == '2'\nassert solution('4 3 6') == '2'\nassert solution('4 4 6') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 2 3\") == \"0\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"4 3 6\") == \"1\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 3\\n1 2\\n2 2\") == \"0\"\nassert solution(\"1 5 3\\n1 3\\n1 1\\n1 5\") == \"1\"\nassert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"2\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 3') == '0'\nassert solution('1 5 3') == '2'\nassert solution('4 3 6') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5 3\\n1 3') == '1'\nassert solution('2 2 3\\n1 2') == '0'\nassert solution('1 5 3\\n1 3') == '1'\nassert solution('4 3 6\\n1 2\\n2 2\\n2 3') == '2'\nassert solution('4 3 6\\n1 2\\n2 2') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3\") == \"0\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"4 3 6\") == \"1\"\n\nIn this example, we have only one sample, so we can use nuclear fusion to get the element in the middle and then buy all the remaining elements in the bottom row.\n\nTest 4\n\nWe have no way to produce element 3 in the bottom row.\n\nSo we cannot use any nuclear fusion as there is no available element to be produced. We can only buy element 1 and 2.\n\nTest 5\n\nWe can use nuclear fusion to get the elements in the bottom row. We can buy the middle element and produce element 3.\n\nWe can also buy element 1 and 2.\n\nTest 6\n\nWe cannot use any nuclear fusion as we have only one available element left, element 5.\n\nWe can buy element 1 and 2.\n\nTest 7\n\nWe can use nuclear fusion to get the elements in the bottom row. We can buy element 1, 2, 3 and 5.\n\nWe can also buy element 1, 2, and 4.\n\nTest 8\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 3.\n\nTest 9\n\nWe can use nuclear fusion to get the elements in the bottom row. We can buy element 1 and 2.\n\nWe can also buy element 1, 2, and 4.\n\nTest 10\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 3.\n\nTest 11\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 3.\n\nTest 12\n\nWe can use nuclear fusion to get the elements in the bottom row. We can buy element 1, 2, and 3.\n\nWe can also buy element 4.\n\nTest 13\n\nWe can use nuclear fusion to get the elements in the bottom row. We can buy element 1, 2, and 4.\n\nWe can also buy element 1, 2, and 4.\n\nTest 14\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 3.\n\nTest 15\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 16\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 17\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 18\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 19\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 20\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 21\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 22\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 23\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 24\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 25\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 26\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 27\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 28\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 29\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 30\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 31\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 32\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 33\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 34\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4.\n\nTest 35\n\nWe cannot use any nuclear fusion as there is no available element to be produced.\n\nWe can buy only element 1, 2, and 4."
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 3') == '0'\nassert solution('1 5 3') == '2'\nassert solution('4 3 6') == '1'\n\nTest 4\n\nWe cannot use nuclear fusion as one of the elements that we already have is red.\n\n[Image]\n\nTest 5\n\nWe have two possibilities. One is to buy the element with red circles, and the other is to buy the element with blue circles.\n\nIf we have to choose between the two options, we need to buy the red element first (the element with blue circles can be bought in future fusions).\n\n[Image]\n\nTest 6\n\nWe have four elements. This is the only example with four elements.\n\nWe have two possibilities. One is to buy the element with red circles, and the other is to buy the element with blue circles.\n\nIf we have to choose between the two options, we need to buy the element with red circles first (the element with blue circles can be bought in future fusions).\n\n [Image]\n\nTest 7\n\nWe can't buy the middle element because it's already occupied in the row with green circles (5).\n\n[Image]\n\nTest 8\n\nWe can buy the element with red circles as it's not yet in the column with green circles.\n\n[Image]\n\nTest 9\n\nWe can buy the element with blue circles as it's not yet in the column with red circles.\n\n[Image]\n\nTest 10\n\nWe have to buy the element with blue circles (3), which can be bought in future fusions as we need a third element with blue circles (4).\n\n[Image]\n\nTest 11\n\nWe have to buy the element with red circles (3), which can be bought in future fusions as we need a fourth element with red circles (5).\n\n[Image]\n\nTest 12\n\nWe have to buy the element with blue circles (4), which can be bought in future fusions as we need a fifth element with blue circles (6).\n\n[Image]\n\nTest 13\n\nWe can't buy the element with red circles (2) because there is no row with green circles (1).\n\n[Image]\n\nTest 14\n\nWe can't buy the element with blue circles (2) because there is no row with green circles (1).\n\n[Image]\n\nTest 15\n\nWe can buy the element with red circles (2), which can be bought in future fusions as we need a third element with red circles (3).\n\n[Image]\n\nTest 16\n\nWe can buy the element with blue circles (2), which can be bought in future fusions as we need a fourth element with blue circles (4).\n\n[Image]\n\nTest 17\n\nWe can buy the element with red circles (3), which can be bought in future fusions as we need a fifth element with red circles (5).\n\n[Image]\n\nTest 18\n\nWe can't buy the element with red circles (4) because there is no row with green circles (3).\n\n[Image]\n\nTest 19\n\nWe can't buy the element with blue circles (4) because there is no row with green circles (3).\n\n[Image]\n\nTest 20\n\nWe can buy the element with blue circles (5), which can be bought in future fusions as we need a third element with blue circles (6).\n\n[Image]\n\nTest 21\n\nWe can buy the element with red circles (6), which can be bought in future fusions as we need a fourth element with red circles (7).\n\n[Image]\n\nTest 22\n\nWe can't buy the element with blue circles (6) because there is no row with green circles (5).\n\n[Image]\n\nTest 23\n\nWe can't buy the element with red circles (7) because there is no row with green circles (6).\n\n[Image]\n\nTest 24\n\nWe can buy the element with blue circles (6), which can be bought in future fusions as we need a fourth element with blue circles (7).\n\n[Image]\n\nTest 25\n\nWe can't buy the element with red circles (7) because there is no row with green circles (6).\n\n[Image]\n\nTest 26\n\nWe can buy the element with red circles (7), which can be bought in future fusions as we need a fifth element with red circles (8).\n\n[Image]\n\nTest 27\n\nWe can buy the element with blue circles (7), which can be bought in future fusions as we need a sixth element with blue circles (9).\n\n[Image]\n\nTest 28\n\nWe can't buy the element with red circles (8) because there is no row with green circles (7).\n\n[Image]\n\nTest 29\n\nWe can't buy the element with blue circles (8) because there is no row with green circles (7).\n\n[Image]\n\nTest 30\n\nWe can buy the element with red circles (9), which can be bought in future fusions as we need a third element with red circles (10).\n\n[Image]\n\nTest 31\n\nWe can buy the element with blue circles (9), which can be bought in future fusions as we need a fourth element with blue circles (11).\n\n[Image]\n\nTest 32\n\nWe can't buy the element with red circles (10) because there is no row with green circles (9).\n\n[Image]\n\nTest 33\n\nWe can't buy the element with blue circles (10) because there is no row with green circles (9).\n\n[Image]\n\nTest 34\n\nWe can buy the element with blue circles (11), which can be bought in future fusions as we"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\nAB\\nBA\\nBB\\nAA\") == 2\nassert solution(\"4\\nAB\\nBA\\nBB\\nBA\") == 1\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\nA\nB\nB\nA''') == \"2\"\nassert solution('''4\nA\nB\nA\nB''') == \"0\"\nassert solution('''3\nA\nA\nB''') == \"0\"\nassert solution('''8\nA\nA\nB\nA\nA\nB\nA\nA''') == \"3\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('10') == '40'\nassert solution('9') == '38'\nassert solution('10') == '41'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\nA\nB\nB\nA''') == '2'\nassert solution('''4\nA\nB\nB\nA''') == '2'\nassert solution('''6\nA\nB\nB\nA\nC\nD''') == '1'\nassert solution('''7\nA\nB\nB\nA\nC\nD''') == '0'\nassert solution('''8\nA\nB\nB\nA\nC\nD''') == '4'\n\n\"\"\"\nTime complexity : O(4^n)\nSpace complexity: O(n)\n\"\"\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '4'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\nA\nB\nB\nA\n''') == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\nA\\nB\\nB\\nA') == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '2'\n\nassert solution('5') == '1'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n2 3 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n2 3 4 6 7\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n2 3 4 5 6 7\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n2 3 4 6 7 8\n\"\"\") == \"3\""
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2 3 4\") == \"2\"\nassert solution(\"5\\n2 3 4 5 6 7\") == \"3\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\n\n\n\n\"\"\"\n\n\nimport math\nfrom math import gcd\nimport sys"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2 3 4\n\n''') == '2'\n\nassert solution('''\n5\n2 3 4 6 7\n\n''') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3 4\") == \"2\"\nassert solution(\"5 2 3 4 6 7\") == \"3\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\nassert solution(\"5\\n2 3 4 6 7\") == \"3\""
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n2 3 4') == '2'\nassert solution('5\\n2 3 4 6 7') == '3'\nprint(solution('2\\n2 3 4'))"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('5') == '3'\nassert solution('10') == '9'\nassert solution('15') == '12'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == '2'\nassert solution(\"5\") == '3'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '11'\nassert solution('6') == '8'\nassert solution('7') == '6'\nassert solution('8') == '1'\nassert solution('9') == '0'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\nABAAC\") == \"11\"\nassert solution(\"6\\nABABABABAA\") == \"12\"\nassert solution(\"6\\nABABABABAA\") == \"12\"\nassert solution(\"3\\nABBA\") == \"1\"\nassert solution(\"2\\nABA\") == \"2\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\nABAAC\") == \"11\""
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 11\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\nABAA\") == \"11\"\nassert solution(\"10\\n\" + \"ABCAABCAAB\") == \"22\""
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"11\"\nassert solution(\"6\") == \"0\"\n\"\"\""
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"7\") == \"8\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\nABAAC''') == '11'\nassert solution('''3\nABAAC''') == '9'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == '11'\n'''\n\nn = int(input())\n\ns = list(input())\n\nd = {}\nfor i in range(n):\n    d[s[i]] = d.get(s[i], 0) + 1\n\ns = s[1:]\ncount = 0\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if s[i]!= s[j] and d[s[i]]!= d[s[j]] and d[s[i]] > 0 and d[s[j]] > 0:\n            d[s[i]] -= 1\n            d[s[j]] -= 1\n            s[i], s[j] = s[j], s[i]\n            count += 1\n        \nprint(count)\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1023\n1 2\n1 0\n1 2\n1 1\n''') == '3'\n\nassert solution('''\n5\n4 2\n1 1\n0 1\n2 3\n''') == '3'\n\nassert solution('''\n5\n1 2\n1 0\n1 2\n1 1\n''') == '-1'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n4 2\n1 1\n0 1\n2 3\n\n''') == '3'\nassert solution('''1023\n1 2\n1 0\n1 2\n1 1\n\n''') == '-1'\nprint(solution('''5\n4 2\n1 1\n0 1\n2 3\n\n'''))\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([5,4,2,1,0,1,0,2,3]) == \"3\"\nassert solution([1023,1,2,1,1]) == \"-1\""
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '3'\nassert solution('1023 1 2 1 1') == '-1'\nassert solution('5 1 2 3 4') == '4'\n\n\n\"\"\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"1023\") == \"-1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n4 2\n1 1\n0 1\n2 3\n\n''') == '3'\n\nassert solution('''\n1023\n1 2\n1 0\n1 2\n1 1\n\n''') == '-1'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n4 2\\n1 1\\n0 1\\n2 3') == '3'\nassert solution('1023\\n1 2\\n1 0\\n1 2\\n1 1') == '-1'"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n4 2\\n1 1\\n0 1\\n2 3') == '3'\nassert solution('1023\\n1 2\\n1 0\\n1 2\\n1 1') == '-1'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n4 2\n1 1\n0 1\n2 3\n''') == '3'\nassert solution('''1023\n1 2\n1 0\n1 2\n1 1\n''') == '-1'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n4 2\n1 1\n0 1\n2 3\n\n''') == '3'\n\nassert solution('''\n1023\n1 2\n1 0\n1 2\n1 1\n\n''') == '-1'"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '2'"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n4 5\\n') == '2'\nassert solution('2\\n3 4\\n') == '1'\n'''\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"2\"\n\"\"\""
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n4 5\") == '2'\nassert solution(\"3\\n5 4 3\") == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n4 5\n''') == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 5\\n\") == \"2\"\nassert solution(\"4\\n3 1 4 2\\n\") == \"1\"\nassert solution(\"4\\n2 3 4 1\\n\") == \"2\"\nassert solution(\"5\\n4 3 5 2 1\\n\") == \"4\"\nassert solution(\"1\\n0\\n\") == \"0\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"2\"\nassert solution(\"6\\n3 5 4 2 1 6\\n\") == \"2\"\nassert solution(\"5\\n1 1 1 1 1 1\\n\") == \"5\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == 'NO'\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\""
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([2, 2, 2, 1]) == \"YES\"\nassert solution([1, 2, 3, 4]) == \"NO\"\nassert solution([2, 2, 2, 3]) == \"NO\""
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'NO'"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 2 1') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('2 2 2 3') == 'NO'\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"YES\"\nprint(solution(input_))\nassert solution(input_) == \"NO\"\nprint(solution(input_))\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 2 1') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('2 2 2 3') == 'NO'\n\n\n'''\n\n\nfrom typing import List\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\""
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4\\n1 3 2 4\\n1 3 4 2\\n') == 'YES'\nassert solution('4 4\\n1 2 3 4 5 6\\n1 2 3 4 6 5\\n1 2 3 4 5 6\\n') == 'NO'\nassert solution('3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n') == 'YES'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 4\n1 3 2 4\n1 3 4 2\n''') == \"YES\"\n\nassert solution('''\n4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3\n''') == \"NO\"\n\nassert solution('''\n3 6\n2 1 3 4 5 6\n1 2 4 3 5 6\n1 2 3 4 6 5\n''') == \"YES\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4\\n1 3 2 4\\n1 3 4 2\\n') == 'YES'\nassert solution('3 4\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n') == 'NO'\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\\n\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n\") == \"NO\"\nassert solution(\"3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n\") == \"YES\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\\n\") == \"YES\"\nassert solution(\"3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n\") == \"YES\"\nassert solution(\"3 6\\n1 2 3 4 5 6\\n1 2 3 4 6 5\\n\") == \"NO\"\nassert solution(\"4 4\\n1 2 3 4 5 6\\n1 2 3 4 6 5\\n1 2 3 4 5 6\\n\") == \"NO\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 4') == 'YES'\nassert solution('4 4') == 'NO'\nassert solution('3 6') == 'YES'\nassert solution('4 6') == 'NO'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3,6,2,1,3,4,5,6]) == \"YES\"\nassert solution([4,6,2,1,3,4,5,6]) == \"YES\"\nassert solution([1,3,2,4,5,6,7,8]) == \"NO\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 3 2 4\n1 3 4 2\n''') == 'YES'\n\nassert solution('''\n2 4\n1 3 2 4\n1 3 4 2\n''') == 'NO'\n\nassert solution('''\n4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3\n''') == 'NO'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4') == 'YES'\nassert solution('4 4') == 'NO'\nassert solution('3 6') == 'YES'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4\\n1 3 2 4\\n1 3 4 2\\n') == 'NO'\nassert solution('4 4\\n1 2 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n') == 'YES'"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n\n---"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 1\") == \"666666672\""
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1') == '0'\nassert solution('1 1 1') == '1'\n\n'''\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1 1''') == '0'\nassert solution('''1 2 1''') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n\"\"\""
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1 1\n\n''') == '0'\nassert solution('''\n1 2 1\n\n''') == '666666672'\nprint('Solution part 1:')\nprint(solution('''\n10 20 1\n\n'''))\nprint('Solution part 2:')\nprint(solution('''\n3 2 1\n\n'''))"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1') == '0\\n', 'Error on input 1'\nassert solution('1 2 1') == '666666672\\n', 'Error on input 2'\nassert solution('1 3 1') == '0\\n', 'Error on input 3'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n7 2 3 1 5 6\n''') == '5'\nassert solution('''\n3\n5 2 4\n''') == '2'\nassert solution('''\n5\n3 3 4 1 2\n''') == '4'\n\n'''\n\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 5\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n7 2 3 1 5 6') == 5"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n7 2 3 1 5 6\n''') == '5'\nassert solution('''\n10\n9 5 6 8 3 2 1 5 8\n''') == '6'\nassert solution('''\n4\n9 2 3 4\n''') == '3'\nassert solution('''\n5\n7 2 3 1 5 6\n''') == '5'\n''')\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n5\n3 1 2 3\n''') == \"2\"\nassert solution('''\n5\n7\n3 2 3 1\n''') == \"3\"\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n7 2 3 1 5 6') == 5\nassert solution('5\\n7 2 3 1 5 6\\n') == 5\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '5'\nassert solution('7 2 3 1 5 6') == '5'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n7 2 3 1 5 6\n''') == '5'\nassert solution('''\n10\n1 2 4 5 6 8 9 11 12\n''') == '8'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '5'\nassert solution('7 2 3 1 5 6') == '5'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 8\") == 2\nassert solution(\"4 2 2 6\") == 3\nassert solution(\"3 7 4 6\") == 1\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\nassert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\nassert solution(\"2 4 5 8\") == \"3\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1 1 8''') == '2'\nassert solution('''4 2 2 6''') == '3'\nassert solution('''3 7 4 6''') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 2\nassert solution(\"1 1 1 8\") == 2\nassert solution(\"4 2 2 6\") == 3\nassert solution(\"3 7 4 6\") == 1"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 1 8\n''') == '2'\n\nassert solution('''\n4 2 2 6\n''') == '3'\n\nassert solution('''\n3 7 4 6\n''') == '1'"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 -1 5\") == \"4\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"-1 -1 5\") == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2\"\nassert solution(\"0 -1 5\") == \"4\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"-1 -1 5\") == \"4\"\nassert solution(\"-1 -1 -1 5\") == \"4\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2 5\n''') == '2'\n\nassert solution('''-1 4 15\n''') == '4'\n\nassert solution('''0 -1 5\n''') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == '2'\nassert solution('6 2\\n1 1 2 2 3 3') == '0'\nassert solution('6 1\\n1 1 2 2 3 3') == '2'\nassert solution('6 1\\n1 1 2 2 3 4') == '1'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == '2'\nassert solution('6 2\\n1 1 2 2 3 3') == '0'\n\n'''\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 1 2 3 4 3''') == '2'\nassert solution('''2 1 2 3 4 3''') == '0'\nassert solution('''6 1''') == '0'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 1\n1 1 2 2 3 3\n''') == '2'\nassert solution('''\n5 1\n1 1 2 2 3 3\n''') == '0'\nassert solution('''\n5 1\n1 1 2 2 3 4\n''') == '3'\n'''\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == '2'\nassert solution('6 2\\n2 1 2 3 4 3') == '0'\nassert solution('6 1\\n1 1 2 2 3 3') == '2'\n\n\n\"\"\"\n\nfrom math import ceil\nimport sys"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n2 1 2 3 4 3\") == \"2\"\nassert solution(\"6 2\\n1 1 2 2 3 3\") == \"0\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"0\"\nassert solution(\"1 1 2 2 3 3\\n\") == \"2\"\nassert solution(\"1 1 2 2 3 3\\n\") == \"0\"\nassert solution(\"1 1 2 2 3 4 3\\n\") == \"2\"\nassert solution(\"10 4\\n1 1 2 2 3 3\\n\") == \"1\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 1\n3 1 2 3\n''') == '2'\nassert solution('''5 1\n1 1 2 2 3 3\n''') == '0'\nassert solution('''5 2\n2 2 3 2 4\n''') == '1'\nassert solution('''6 1\n1 1 2 2 3 3\n''') == '2'\nassert solution('''6 2\n3 3 3 3 3\n''') == '0'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\nassert solution('''\n5 2\n1 1 2 2 3 3\n''') == '0'\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '2'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 1\n2 1 2 3 4 3\n''') == '2'\n\nassert solution('''\n6 2\n2 1 2 3 4 3\n''') == '0'\n\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '2'\n\nassert solution('''\n6 2\n2 1 2 3 4 3\n''') == '1'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('monday\\ntuesday\\n') == 'NO'\nassert solution('saturday\\ntuesday\\n') == 'YES'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\nmonday\ntuesday\n\"\"\"\n) == \"NO\"\n\nassert solution(\n\"\"\"\nsunday\nsunday\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"\nsaturday\ntuesday\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"\nsaturday\nsunday\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"\nsunday\nmonday\n\"\"\"\n) == \"NO\""
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"monday\\ntuesday\\n\") == \"NO\"\nassert solution(\"saturday\\ntuesday\\n\") == \"YES\"\nprint(solution(input()))\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"wednesday\") == \"YES\"\nassert solution(\"thursday\") == \"YES\"\nassert solution(\"friday\") == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"wednesday\") == \"NO\"\nassert solution(\"thursday\") == \"YES\"\nassert solution(\"friday\") == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"monday\\ntuesday\") == \"YES\"\nassert solution(\"saturday\\ntuesday\") == \"NO\"\nassert solution(\"saturday\\nsunday\") == \"YES\"\nassert solution(\"saturday\\ntuesday\") == \"YES\""
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"monday\\ntuesday\") == \"NO\"\nassert solution(\"saturday\\ntuesday\") == \"YES\"\nassert solution(\"saturday\\nsunday\") == \"YES\"\nassert solution(\"sunday\\nsunday\") == \"YES\"\nassert solution(\"monday\\nwednesday\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"wednesday\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_sample_one) == 'YES'\nassert solution(input_sample_two) == 'YES'\nassert solution(input_sample_three) == 'YES'\nassert solution(input_sample_four) == 'YES'\nassert solution(input_sample_five) == 'YES'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''monday\ntuesday''') == 'NO'\n\nassert solution('''saturday\nsaturday''') == 'YES'\n\nassert solution('''sunday\nsunday''') == 'YES'\n\nassert solution('''saturday\nthursday''') == 'NO'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"17\"\nassert solution(input()) == \"91\""
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5000000001 4999999999''') == '91'\nassert solution('''35''') == '17'\nprint(solution('''10000000000'''))"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\nassert solution('1000000000000000') == '17'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10000000000\") == \"17\"\nassert solution(\"10000000000\") == \"91\"\nassert solution(\"10000000000\") == \"18\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('35\\n') == '17\\n'\nassert solution('10000000000\\n') == '91\\n'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n42\n''') == '2'\nassert solution('''\n9999999999999999\n''') == '7'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''35''') == '17'\nassert solution('''10000000000''') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n35\n''') == '17'\nassert solution('''\n10000000000\n''') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"17\""
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\n\n'''\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''AHA''') == 'YES'\nassert solution('''Z''') == 'NO'\nassert solution('''XO''') == 'NO'"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n\n\n'''"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"XO\") == \"NO\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nassert solution('AA') == 'YES'\nassert solution('X') == 'NO'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nprint(solution(input()))\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('1 2 3') == '1'\nassert solution('4 5 1 2 3') == '0'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 5\n\n''') == '1'\nassert solution('''\n3\n1 2 5\n\n''') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2 5 4\n''') == '1'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '0'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 5\n''') == '0'\nassert solution('''3\n1 2 5\n''') == '1'\nassert solution('''4\n1 5 2 3\n''') == '1'\nassert solution('''5\n2 6 1 4 3\n''') == '2'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 5\n''') == '0'\nassert solution('''\n3\n1 2 5\n''') == '1'\nassert solution('''\n2\n1 2 5\n''') == '1'\nassert solution('''\n5\n1 2 5\n''') == '0'\nassert solution('''\n8\n1 1 1 1 1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '1'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 5\n''') == '1'\nassert solution('''\n5\n1 2 3 4 5\n''') == '0'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\nassert solution([1, 5]) == '0'\nassert solution([1, 2, 5]) == '1'\nassert solution([1, 2, 3, 4]) == '1'\nassert solution([1, 2, 3, 3]) == '1'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\"\nassert solution(\"LRRLLRRR\") == \"Yes\""
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\"\nassert solution(\"LRRLU\") == \"Yes\""
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\nRU\n''') == 'Yes'\n\nassert solution('''1 2\nRU\n''') == 'No'\n\nassert solution('''-1 1000000000\nLRRLU\n''') == 'Yes'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\nRU\") == \"Yes\"\nassert solution(\"1 2\\nRU\") == \"No\"\nassert solution(\"-1 1000000000\\nLRRLU\") == \"Yes\"\nassert solution(\"0 0\\nD\") == \"Yes\"\nassert solution(\"0 0\\nUD\") == \"No\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\nRURD\") == \"Yes\"\nassert solution(\"1 2\\nRURD\") == \"No\"\nassert solution(\"-1 1000000000\\nLRRLU\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\nRU\n''') == 'Yes'\nassert solution('''1 2\nRU\n''') == 'No'\nassert solution('''-1 1000000000\nLRRLU\n''') == 'Yes'"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_1) == \"Yes\"\nassert solution(input_2) == \"No\"\nassert solution(input_3) == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input := '2 2') == 'Yes'\nassert solution(input := '1 2') == 'No'\nassert solution(input := '-1 1000000000') == 'Yes'\nassert solution(input := '0 0') == 'Yes'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\nR') == 'Yes'\nassert solution('1 2\\nR') == 'No'\nassert solution('-1 1000000000\\nLRRLU') == 'Yes'\nassert solution('0 0\\nD') == 'Yes'"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n12 3 7\n''') == '1'\nassert solution('''\n10   3   7\n''') == '1'\nassert solution('''\n314\n159 265\n358\n''') == '0'\nassert solution('''\n22 19 3\n''') == '1'\nassert solution('''\n \n60\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n''') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\nassert solution('60') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''10 3 7\n''') == '1'\nassert solution('''10   3   7\n''') == '1'\nassert solution('''314\n''') == '0'\nassert solution('''22 19 3\n''') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\nassert solution(\"\"\"\n10 3 7\n\"\"\") == \"1\"\nassert solution(\"\"\"\n314\n159 265\n358\n\"\"\") == \"0\"\nassert solution(\"\"\"\n22 19 3\n\"\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\""
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == \"0\"\nassert solution(\"\") == \"0\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1\\n2\") == \"1 2\"\nassert solution(\"2\") == \"1 2\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\nassert solution('60') == '1'"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 3 7\n''') == '1'\nassert solution('''\n10   3   7\n''') == '1'\nassert solution('''\n314\n''') == '0'\nassert solution('''\n12  \n''') == '0'\nassert solution('''\n9\n''') == '0'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n''') == '9'\nassert solution('''\n1\n\n2\n''') == '0'\nassert solution('''\n1\n\n2\n''') == '8'\nassert solution('''\n1\n\n4\n''') == '9'\nassert solution('''\n1\n\n2\n\n4\n''') == '18'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n3\n1\n2''') == '8'\nassert solution('''5\n4\n1\n2\n3\n1\n1\n1''') == '12'\nassert solution('''3\n2\n4\n6''') == '10'"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '12'\nassert solution('3') == '18'\nassert solution('4') == '24'\nassert solution('5') == '35'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"100\") == \"91\"\nassert solution(\"101\") == \"9\"\nassert solution(\"100000\") == \"9\"\nassert solution(\"9\") == \"9\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"9\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"7\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '8'\nassert solution('3') == '7'\nassert solution('4') == '6'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '8'\nassert solution('3') == '12'\nassert solution('4') == '11'\nassert solution('5') == '10'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"10\"\nassert solution(\"4\") == \"9\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '9'\nassert solution('123') == '27'\nassert solution('1234') == '34'\nassert solution('12345') == '45'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n3 6 28 9\\n') == '4'\nassert solution('5\\n5 12 9 16 48\\n') == '3'\nassert solution('4\\n1 2 4 8\\n') == '-1'"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n3 6 28 9\n''') == '4'\nassert solution('''5\n5 12 9 16 48\n''') == '3'\nassert solution('''4\n1 2 4 8\n''') == '-1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == str(-1)\nassert solution(input()) == str(4)\n\n\"\"\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '4'\nassert solution('5') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '''3\n    6\n    28\n    9\n    ''') == '4'\n\nassert solution(\n    '''4\n    1\n    2\n    4\n    8\n    ''') == '3'\n\nassert solution(\n    '''5\n    5\n    12\n    9\n    16\n    48\n    ''') == '3'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 6 28 9\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\""
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 6 28 9\\n\") == \"4\"\nassert solution(\"5 12 9 16 48\\n\") == \"3\"\nassert solution(\"4\\n1 2 4 8\\n\") == \"-1\""
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '''\n3\n6\n28\n9\n'''\n) == '4'\nassert solution(\n    '''\n5\n12\n9\n16\n48\n'''\n) == '3'\nassert solution(\n    '''\n4\n1\n2\n4\n8\n'''\n) == '-1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n3 6 28 9') == '4'\nassert solution('5\\n5 12 9 16 48') == '3'\nassert solution('4\\n1 2 4 8') == '-1'"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 6 28 9\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\nassert solution(\"10\\n1 2 4 8 9 16 8 7 6 5 4\") == \"5\"\n\nstdin = \"\"\"\n5\n5 12 9 16 48\n\n6\n4 1 2 4 8\n\"\"\""
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n0 5 0 2 3\n''') == '2'\n\nassert solution('''\n7\n1 0 0 5 0 0 2\n''') == '1 7 3 5 6 4 2'"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n0 5 0 2 3\n''') == '2'\nassert solution('''5\n0 5 0 2 3\n''') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1 7 3 5 6 4 2'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"2\"\nassert solution(\"10\\n0 0 0 2 3 4 5 6 7 8 9\\n\") == \"1\"\nassert solution(\"11\\n1 0 0 2 3 4 5 6 7 8 9 10\\n\") == \"2\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1'"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n0 5 0 2 3\n''') == '2'\nassert solution('''\n7\n1 0 0 5 0 0 2\n''') == '1 7 3 5 6 4 2'\nassert solution('''\n10\n1 0 0 5 0 0 2 3 4 5\n''') == '3'\nassert solution('''\n2\n1 0\n''') == '1'\nassert solution('''\n9\n1 0 0 0 1 2 3 4 5\n''') == '1'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '2'\nassert solution('5\\n') == '5'"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"20\") == \"20\"\n\nassert solution(\"10\") == \"10\"\nassert solution(\"20\") == \"10\"\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n\") == \"1\"\nassert solution(\"3\\n\") == \"2\"\nassert solution(\"5\\n\") == \"5\"\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '2'\nassert solution('5\\n') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n\n2\n\n3\n\n4\n''') == '5'\nassert solution('''\n3\n\n5\n\n7\n\n9\n''') == '10'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\nassert solution('100') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '5'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == '2'\nassert solution(\"5\") == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '2'\nassert solution('5') == '5'\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def __init__(self, n):\n        self.n = n\n        self.max_len = 0\n    def max_colors(self, n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 5\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(1, n):\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, n):\n                if j > i:\n                    break\n                if j == i:\n                    dp[i][j] = 3\n                else:\n                    dp[i][j] = min(dp[i][j], max(dp[i - 1][j], dp[i - 1][j - i])) + 1\n        return dp[-1][-1]\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def max_colors(self, n):\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(1, n):\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, n):\n                if j > i:\n                    break\n                if j == i:\n                    dp[i][j] = 3\n                else:\n                    dp[i][j] = min(dp[i][j], max(dp[i - 1][j], dp[i - 1][j - i])) + 1\n        return dp[-1][-1]\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def max_colors(self, n):\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(1, n):\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, n):\n                if j > i:\n                    break\n                if j == i:\n                    dp[i][j] = 3\n                else:\n                    dp[i][j] = min(dp[i][j], max(dp[i - 1][j], dp[i - 1][j - i])) + 1\n        return dp[-1][-1]\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def max_colors(self, n):\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(1, n):\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, n):\n                if j > i:\n                    break\n                if j == i:\n                    dp[i][j] = 3\n                else:\n                    dp[i][j] = min(dp[i][j], max(dp[i - 1][j], dp[i - 1][j - i])) + 1\n        return dp[-1][-1]\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def max_colors(self, n):\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(1, n):\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, n):\n                if j > i:\n                    break\n                if j == i:\n                    dp[i][j] = 3\n                else:\n                    dp[i][j] = min(dp[i][j], max(dp[i - 1][j], dp[i - 1][j - i])) + 1\n        return dp[-1][-1]\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def max_colors(self, n):\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(1, n):\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, n):\n                if j > i:\n                    break\n                if j == i:\n                    dp[i][j] = 3\n                else:\n                    dp[i][j] = min(dp[i][j], max(dp[i - 1][j], dp[i - 1][j - i])) + 1\n        return dp[-1][-1]\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def max_colors(self, n):\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(1, n):\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, n):\n                if j > i:\n                    break\n                if j == i:\n                    dp[i][j] = 3\n                else:\n                    dp[i][j] = min(dp[i][j], max(dp[i - 1][j], dp[i - 1][j - i])) + 1\n        return dp[-1][-1]\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def max_colors(self, n):\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(1, n):\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, n):\n                if j > i:\n                    break\n                if j == i:\n                    dp[i][j] = 3\n                else:\n                    dp[i][j] = min(dp[i][j], max(dp[i - 1][j], dp[i - 1][j - i])) + 1\n        return dp[-1][-1]\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def max_colors(self, n):\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(1, n):\n            dp[0][i] = 1"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '18\\n3 4\\n1 3 5\\n4'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2 2\") == \"18\"\nassert solution(\"5 3 1\") == \"1 3 5\"\nassert solution(\"4 2 2\") == \"31\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('4 2 2') == '31'"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2 2\") == \"18\"\nassert solution(\"4 2 2\") == \"31\"\nassert solution(\"5 3 1\") == \"1 3 5\"\nassert solution(\"6 3 1 6 3\") == \"4\""
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n2 2 2\n1 3 4 5 2\n5 3 2 1 4\n''') == '18'\nassert solution(\n    '''\n4 2 2\n10 8 8 3\n10 7 9 4\n''') == '31'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2 2\") == \"18\"\nassert solution(\"4 2 2\") == \"31\"\nassert solution(\"5 3 1\") == \"1 3 5\"\nassert solution(\"6 3 1 6 3\") == \"4\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 2 2\n1 3 4 5 2\n5 3 2 1 4\n''') == '18'\nassert solution('''\n4 2 2\n10 8 8 3\n10 7 9 4\n''') == '31'\nassert solution('''\n5 3 1\n5 2 5 1 7\n6 3 1 6 3\n''') == '23'\nprint(solution(input()))"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\") == \"18\\n3 4 \\n1 5 \\n4\"\nassert solution(\"4 2 2\\n10 8 8 3\\n10 7 9 4\") == \"31\\n1 2 3 4 \\n5 6 7 8\""
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('4 2 2') == '31'\nassert solution('5 3 1') == '1 3 5'\nassert solution('6 3 1 6 3') == '4'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2 2\") == \"18\"\nassert solution(\"4 2 2\") == \"31\"\nassert solution(\"5 3 1\") == \"1 3 5\"\nassert solution(\"6 3 1 6 3\") == \"4\""
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'Yes'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"4 3\") == \"No\""
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1\n1 2\n\n''') == 'Yes'\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n\n''') == 'No'\nassert solution('''\n5 6\n1 2\n1 3\n1 4\n1 5\n\n''') == 'No'\n''')\n\n'''\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == 'No'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n1 2\\n\") == \"Yes\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"No\"\nprint(solution(input()))\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"Yes\\naa\"\nassert solution(\"4 3\") == \"No\\n\""
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'Yes', 'First'\nassert solution('4 3') == 'No', 'Second'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"Yes\"\nassert solution() == \"bb\"\nassert solution() == \"No\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 2') == 'Yes'\nassert solution('4 3\\n1 2\\n1 3\\n1 4') == 'No'\nassert solution('2 1\\n1 2\\n1 3') == 'Yes'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 1 1') == '7'\nassert solution('1 0 1') == '7'\nassert solution('1 2 0') == '19'\nprint('TAKEAWAY:  this is a tester, not a real judge.  You can only look at this file for debugging purposes, and it is not real judge.  You cannot see the solution for testing purposes.')"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0\\n3\\n') == '7'\nassert solution('0 2 1\\n1 0 100\\n1 2 0\\n3\\n') == '19'"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''0 1 1\n1 0 1\n1 2 0\n3\n''') == '7'\nassert solution('''0 2 2\n1 0 100\n1 2 0\n5\n''') == '87'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 1 1') == '7'\nassert solution('0 2 2') == '19'\nassert solution('1 2 0') == '14'\nassert solution('3') == '1'\nassert solution('0 1 1 3') == '4'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '7'"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0\\n3\\n') == '7'\nassert solution('0 2 1\\n1 0 100\\n1 2 0\\n3\\n') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\\n3\") == \"7\"\nassert solution(\"0 2 1\\n1 0 100\\n1 2 0\\n5\") == \"87\""
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0 1 1\n1 0 1\n1 2 0\n3\n''') == '7'\nassert solution('''\n0 2 1\n1 0 100\n1 2 0\n3\n''') == '19'\nassert solution('''\n0 1 1\n1 0 1\n1 2 0\n3\n''') == '87'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2\n1\n''') == '7'\nassert solution('''\n1\n0\n1\n''') == '1'\nassert solution('''\n3\n1\n2\n''') == '19'\nassert solution('''\n7\n2\n1\n''') == '87'\nassert solution('''\n1\n2\n1\n''') == '4'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 1') == '7'\nassert solution('0 1 1') == '7'\nassert solution('0 2 1') == '3'\nassert solution('0 1 2') == '8'\nassert solution('2 1 2') == '19'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"Bulbbasaur\") == \"1\"\nassert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\""
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nF\n\nInput\naBddulbasaurrgndgbualdBdsagaurrgndbb\n\nOutput\n0\n\"\"\") == \"0\"\nassert solution(\"\"\"\na\n\nInput\na\n\nOutput\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\nz\n\nInput\naBddulbasaurrgndgbualdBdsagaurrgndbb\n\nOutput\n0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == 1\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == 2\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\""
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''Bulbbasaur\n''') == '1'\nassert solution('''aBddulbasaurrgndgbualdBdsagaurrgndbb\n''') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('Bulbbasaur') == '1'\nassert solution('F') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"sdsdsdsdd\") == \"2\"\n\nassert solution(\"sddsdsdsdd\") == \"0\"\n\nassert solution(\"ssdsdsdsdd\") == \"0\"\n\nassert solution(\"asdasd\") == \"0\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"2\""
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\narc\\nrac\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\narc\\nrac\\n\") == \"YES\"\nassert solution(\"2 3\\narc\\nrac\\n\") == \"YES\"\nassert solution(\"2 3\\narc\\nrac\\n\") == \"YES\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\narc\\nrac') == 'YES'\nassert solution('1 2\\narc\\nrac') == 'NO'\nassert solution('3 2\\narc\\nrac') == 'NO'\nassert solution('2 2\\narc\\nrac') == 'YES'\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == 'YES'\n\"\"\""
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\narc\\nrac\") == \"YES\"\nassert solution(\"4 4\\n1234\\n5678\\n9012\") == \"NO\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"5 5\") == \"YES\"\n\n'''\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\narc\\nrac') == 'YES', \"Should be YES\"\n\nassert solution('2 3\\nabc\\nxyz') == 'NO', \"Should be NO\"\n\nassert solution('2 3\\njkl\\nmno') == 'YES', \"Should be YES\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 111') == '4'\n\"\"\"\n\nstdin = input()\nN, X = list(map(int, stdin.split()))\n\nA_nums = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(1, N + 1):\n    taken = 0\n    curr_ans = A_nums[i - 1]\n    while curr_ans <= X:\n        taken += curr_ans\n        curr_ans = A_nums[curr_ans - 1]\n    ans += taken\n\nprint(ans % 998244353)\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"2 2 2 2\") == \"3\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 111') == '4'\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 111') == '4'\nassert solution('3 123') == '4'\nassert solution('3 100') == '3'\n'''"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 111\n1111\n10111\n10010''') == '4'\nassert solution('''4 111\n1111\n10111\n10010''') == '4'\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n0010010\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n00010\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3\n1111\n10111\n10010\n\"\"\") == \"4\"\n\"\"\"\nhttps://cs.nju.edu.cn/zhuang/Courses/2013fall/Lectures/19-4.html\n\n\"\"\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 111') == '4'\nassert solution('4 5') == '3'\nassert solution('3 2') == '2'\nassert solution('2 4') == '1'\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 111') == '4'\nassert solution('2 100') == '2'\nassert solution('3 111') == '5'\nassert solution('4 100') == '1'\nassert solution('5 111') == '3'\n\n'''\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 111') == '4'\nassert solution('10 50') == '7'\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 111') == '4'\nassert solution('10111') == '4'\nassert solution('10010') == '3'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''11 11 5\n    ''') == '1', 'Just one set'\nassert solution('''11 2 3\n    ''') == '-1', 'Incorrect situation'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 11 5\") == \"1\", \"Wrong\"\nassert solution(\"1 1 1\") == \"1\", \"Wrong\"\nassert solution(\"1 1 1\") == \"1\", \"Wrong\"\nassert solution(\"1 1 1\") == \"1\", \"Wrong\"\nassert solution(\"1 1 1\") == \"1\", \"Wrong\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\""
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''11 11 5\n\n1\n\n-1''') == '1'\nassert solution('''11 2 3\n\n1\n\n-1''') == '-1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 2') == '1'\nassert solution('1 1 3') == '1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''11 11 5\n''') == '1'\nassert solution('''11 2 3\n''') == '-1'"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abacaba') == 'NO', 'First'\nassert solution('jinotega') == 'YES', 'Second'\nassert solution('abacaba') == 'NO', 'Third'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"NO\"\nassert solution(\"jinotega\") == \"YES\"\n\nassert solution(\"maanaaaaaaaaaa\") == \"YES\"\nassert solution(\"maaaasaaas\") == \"NO\"\n\nassert solution(\"aaab\") == \"NO\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == '21.0'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 6\n''') == '6.5'\nassert solution('''\n4 2 20\n''') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\nassert solution('1 2 3') == '3'\n\n'''\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2 6''') == '6.5'\nassert solution('''4 2 20''') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 2 6\") == \"6.5\"\nassert solution(\n    \"4 2 20\") == \"20.0\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"20.0\"\n\"\"\""
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"4 4\") == \"2\""
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 4') == '1'\nassert solution('3 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"1\"\n\nassert solution(input_) == \"2\"\n\nassert solution(input_) == \"1\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 2\n..\n..\n\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 4\n....\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"10 10\") == \"9\"\nassert solution(\"0 1\") == \"0\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n..\n..\n\n''') == '2'\nassert solution('''4 4\n....\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 4') == '1'\nassert solution('3 4') == '2'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n\"\n                \".#\\n\"\n                \"..\\n\") == \"2\"\nassert solution(\"4 4\\n\"\n                \".#.\\n\"\n                \"##.\\n\") == \"1\"\nassert solution(\"3 4\\n\"\n                \".#.\\n\"\n                \"....\\n\") == \"0\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"3 4\") == \"2\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2\n..\n..''') == '1'\nassert solution('''4 4\n....\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '6'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '6'\nassert solution('1') == '6'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 3\") == \"6\"\nassert solution(\"4\\n2 3 2 2\") == \"0\"\nassert solution(\"4\\n1 1 3\") == \"7\"\nassert solution(\"4\\n1 1 3\") == \"7\"\nassert solution(\"6\\n2 3 2 3 1\") == \"1\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '6'\nassert solution('5') == '8'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 3\\n') == '6'\nassert solution('5\\n1 2 1 3 2 3\\n') == '1'"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([3,1,1,3]) == \"6\"\nassert solution([3,2,1,3]) == \"6\"\nassert solution([3,2,3,1]) == \"4\"\nassert solution([3,1,2,3]) == \"0\"\nassert solution([3,1,3,1]) == \"0\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1 3\\n') == '6'\nassert solution('2\\n2 1 3\\n') == '0'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 1 3\n''') == '6'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 3\\n') == '6'\nassert solution('2\\n1 2\\n') == '1'\nassert solution('2\\n3 2\\n') == '0'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1\\n3\") == \"6\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '11'\nassert solution('4') == '4'\nassert solution('5') == '2'\nassert solution('6') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"11\"\nassert solution(\"5\") == \"11\"\nassert solution(\"5\") == \"11\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n\") == \"4\"\nassert solution(\"5\\n\") == \"11\"\nassert solution(\"7\\n\") == \"7\"\nassert solution(\"9\\n\") == \"17\"\nassert solution(\"13\\n\") == \"13\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 4 3 7 5') == '11\\n3'\nassert solution('4\\n1 2 3\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\n511\\n512\\n513\\n514\\n515\\n516\\n517\\n518\\n519\\n520\\n521\\n522\\n523\\n524\\n525\\n526\\n527\\n528\\n529\\n530\\n531\\n532\\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 4 3 7 5\n''') == '11'\nassert solution('''\n10\n5 7 3 2 1 2 3 4\n''') == '15'\nassert solution('''\n4\n1 4 3 7 5\n''') == '11'\nassert solution('''\n9\n5 7 3 2 1 2 3 4\n''') == '17'\nassert solution('''\n7\n5 7 3 2 1 2 3 4\n''') == '17'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 4 3 7 5') == '11\\n3'\nassert solution('1\\n10\\n') == '10'\nassert solution('5\\n-1 1 -1 1 -1') == '1'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '11'\nassert solution('10') == '10'\nassert solution('11') == '0'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 4 3 7 5\n''') == '11'\nassert solution('''\n5\n1 5 7 3 4\n''') == '8'\nassert solution('''\n10\n2 5 6 2 8 9 9 9 5\n''') == '13'\nassert solution('''\n100\n
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1') == '10.25'\nassert solution('6 2') == '10.3'\nassert solution('3 100') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1') == '10.25'\nassert solution('6 2') == '10.3'\nassert solution('3 100') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 1\n10.245\n''') == '10.25'\nassert solution('''\n6 2\n10.245\n''') == '10.3'\nassert solution('''\n3 100\n9.2\n''') == '9.2'"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 100') == '9.2'\nassert solution('6 1') == '10.25'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10.245') == '10.25'\nassert solution('10.245') == '10.3'\nassert solution('10.245') == '10.3'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1\\n10.245') == '10.25'\nassert solution('6 2\\n10.245') == '10.3'\nassert solution('3 100\\n9.2') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 1\n10.245\n\n''') == '10.25'\n\nassert solution('''6 2\n10.245\n\n''') == '10.3'\n\nassert solution('''3 100\n9.2\n\n''') == '9.2'"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 1\n10.245''') == '10.25'\nassert solution('''6 2\n10.245''') == '10.3'\nassert solution('''3 100\n9.2''') == '9.3'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 1\n10.245\n''') == '10.25'\nassert solution('''\n6 2\n10.245\n''') == '10.3'\nassert solution('''\n3 100\n9.2\n''') == '9.2'\n'''\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 1\") == \"10.25\"\nassert solution(\"6 2\") == \"10.3\"\nassert solution(\"3 100\") == \"9.2\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"0110\"\nassert solution(\"1 2 2 1\") == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 3 4\n''') == 'Impossible'\nassert solution('''\n1 2 2 1\n''') == '0110'"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2 3 4''') == 'Impossible'\nassert solution('''1 2 2 1''') == '0110'\nassert solution('''1 2 2 1''') == 'Impossible'"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 2 3 4''') == \"0110\"\nassert solution('''1 2 2 1''') == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == \"Impossible\"\nassert solution('1 2 2 1') == \"0110\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"0110\", \"Should be 0110\"\nassert solution(\"1 2 2 1\") == \"0111\", \"Should be 0111\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '0110'\nassert solution('1 2 2 1') == '0110'\nassert solution('1 2 1 3') == '1110'\nassert solution('1 2 1 2') == '1110'\nassert solution('1 2 1 1') == '0111'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == 'Impossible'\nassert solution('1 2 2 1') == '0110'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\"\n\n\"\"\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(inp1) == \"3\"\nassert solution(inp2) == \"2\""
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7\n*..P*P*\n''') == '3'\nassert solution('''\n10\n.**PP.*P.*\n''') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '3'\nassert solution('10') == '2'\nassert solution('12') == '1'"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"10\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"10\") == \"3\"\nassert solution(\"11\") == \"3\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7\n*..P*P*\n\n''') == '3'\nassert solution('''10\n.**PP.*P.*\n\n''') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"10\") == \"2\"\nassert solution(\"\") == \"inf\"\nassert solution(\"1\") == \"inf\"\nassert solution(\"2\") == \"inf\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\nP.*.*.P.\nP.**.P.\n.*.**.P.\n.P.*.*.P\nP.*.*.P''') == '6'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n*..P*P*\n\n''') == '3'\nassert solution('''10\n.**PP.*P.*\n\n''') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7\n*..P*P*\n\n''') == '3'\n\nassert solution('''10\n.**PP.*P.*\n\n''') == '2'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n3\n1\n2\n4\n5\n''') == '10'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\nassert solution('''\n4\n''') == '4'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n0\n0\n0\n3\n4''') == '2'\nassert solution('''1\n1\n0\n0\n1\n0''') == '1'\nassert solution('''1\n1\n0\n1\n1\n1''') == '1'\nassert solution('''1\n0\n1\n0\n0\n1''') == '2'\nassert solution('''1\n0\n1\n0\n0\n1''') == '1'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '4'\nassert solution('6') == '8'\nassert solution('4') == '8'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '4'\nassert solution('10') == '7'\nassert solution('0') == '1'\nassert solution('100') == '100'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '8'\nassert solution('1') == '4'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n\n\n'''\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('9 9 5 5 2 1') == '1 3 9 7'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9 9 5 5 2 1') == '1 3 9 7'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3 2\n1 4\n''') == '3 1 4 2'\n\nassert solution('''\n3 4 4 3\n1 4\n''') == '3 2 4 3 4'\n\nassert solution('''\n6 10 10 1\n5 1\n''') == '5 1 6 10'"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n9 9 5 5 2 1\n''') == '1 3 9 7'\nassert solution('''\n100 100 52 50 46 56\n''') == '17 8 86 92'"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 2\") == \"1 1\"\nassert solution(\"100 100 52 50 46 56\") == \"17 8 86 92\"\n\nstdin = \"\"\"\n3 1 2\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n3 3 3 3\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n4 4 4 4\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 7') == '1 3 5'\nassert solution('10 10 5 5 2') == '8 9 10'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 3 2 1\\n') == '2 3 5 1'\nassert solution('100 100 52 50 46 56\\n') == '17 8 86 92'"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"9 9 5 5 2 1\") == \"1 3 9 7\"\nassert solution(\"100 100 52 50 46 56\") == \"17 8 86 92\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5 1 2\") == \"0 0 1 5\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([9, 9, 5, 5, 2, 1]) == (1, 3, 9, 7)\nassert solution([100, 100, 52, 50, 46, 56]) == (17, 8, 86, 92)\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('TFFFSSSSS') == 'No'\n\"\"\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('TTTTT') == 'No'\n\n---Time Limit Exceeded---"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"TTFFTTFF\") == \"No\"\nassert solution(\"FFF\") == \"Yes\"\nassert solution(\"TTTT\") == \"Yes\"\nassert solution(\"FFFF\") == \"Yes\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('FTFFTFF') == 'No'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nTTTT\n2 2\nF\nF\nTTTT\n''') == 'Yes'\nassert solution('''\nTTTT\n2 2\nT\nF\nTTTT\n''') == 'No'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FTFFFFFF\") == \"No\""
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"TTFFTFFF\") == \"No\""
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('TTFFTFFF') == 'No'\n\"\"\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 2\nassert solution('2') == 3\nassert solution('3') == 5\nassert solution('4') == 6\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n\") == \"2\"\nassert solution(\"2\\n\") == \"3\"\nassert solution(\"3\\n\") == \"5\"\nassert solution(\"4\\n\") == \"6\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n1\n1\n1\n1''') == '2'\nassert solution('''2\n2\n2\n2\n2''') == '3'\nassert solution('''3\n3\n3\n3\n3''') == '5'\nassert solution('''4\n4\n4\n4\n4''') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n''') == '2'\nassert solution('''\n3\n''') == '3'\nassert solution('''\n4\n''') == '5'\nassert solution('''\n5\n''') == '6'"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n2 4\n3\n''') == \"1.4\"\nassert solution('''\n3\n1 2 3\n3\n''') == \"1.3\"\nassert solution('''\n5\n1 1 1 1 1\n3\n''') == \"0.6666666666666667\"\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1\n1\n''') == \"0.06153846153846154\""
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\\n3\\n\") == \"1.\"\nassert solution(\"5\\n1 2 3 4 5\\n5\\n\") == \"2.\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n\") == \"1.\"\nassert solution(\"5\\n1 2 3 4 5\\n4\\n\") == \"2.\"\nassert solution(\"5\\n1 2 3 4 5\\n5\\n\") == \"1.\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1.3333333333'\nassert solution('5') == '2.0'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n3\\n4\\n\") == \"1.0\"\nassert solution(\"2\\n3\\n5\\n\") == \"0.5\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n\") == \"2.0\""
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 3\n3\n''') == '1.3333333333'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3\\n3\\n') == '1.3333333333'\nassert solution('4\\n1 2 3 4\\n3\\n') == '1.83333333333'\nassert solution('5\\n1 2 3 4 5\\n5\\n') == '1.4'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n1 2 3\\n3') == '1.3333333333'\nassert solution('1\\n1 3 2\\n2') == '0.5'\nassert solution('2\\n1 2 1\\n2') == '0.5'\nassert solution('2\\n1 2 1\\n3') == '0.5'"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3\\n3\\n') == '1.3333333333'\nassert solution('3\\n1 2 3\\n3\\n') == '1.3333333333'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1.3333333333'"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 3\n3\n''') == '1.3333333333'\nassert solution('''3\n1 2 3\n2\n''') == '0.5'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"13 7\""
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1 2') == '13 7'\nassert solution('2 100000 569') == '986 605'\nassert solution('1 0 1') == '0 0'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1 2') == '13 7'\nassert solution('6 1 3') == '17 16'\nassert solution('1 1 1') == '0 0'\nassert solution('1 1 1 2') == '0 0'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 1 2\n9 7 11 15 5''') == '13 7'\nassert solution('''2 100000 569\n605 986''') == '986 605'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 2') == '13 7'\nassert solution('5 2 3 4') == '12 5'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 2') == '7 6'\nassert solution('5 1 2') == '7 6'\nassert solution('4 1 4') == '4 4'\nassert solution('5 3 3') == '7 7'\nassert solution('4 3 6') == '6 6'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 1 2\n9 7 11 15 5''') == '13 7'\nassert solution('''5 1 2\n9 7 11 15 5''') == '996 605'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 1 2\n9 7 11 15 5\n''') == '13 7'\nassert solution('''2 100000 569\n6049 86\n''') == '9866 605'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 2\") == \"13 7\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1 2''') == '13 7'\nassert solution('''5 100000 569''') == '986 605'\nassert solution('''5 5 5 5 5''') == '5 5 5 5 5'\nprint('all passed!')"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\", \"First example\"\nassert solution(\"3 3 3 3 5\") == \"0\", \"Second example\"\nassert solution(\"5 5 1 2 3\") == \"3\", \"Third example\"\nassert solution(\"3 4 1 1 3\") == \"0\", \"Fourth example\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3 2 4 4\n2 5 4 10\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 3 3 3 5\n2 3 5 4 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 5 1 2 3\n2 3 2\n\"\"\") == \"3\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 3 2 4 4\n2 5 4 10\"\"\") == \"1\"\nassert solution(\"\"\"3 3 3 3 5\n2 3 5 4 2\"\"\") == \"0\"\nassert solution(\"\"\"5 5 1 2 3\n2 3 5 4 2\"\"\") == \"3\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '-1'\nassert solution('3 4 1 1 3') == '3'"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"0\"\nassert solution(\"3 4 1 1 3\") == \"3\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '-1'\nassert solution('3 4 1 1 3') == '3'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '3'\nassert solution('3 4 1 1 3') == '-1'\nprint('All tests passed!')"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"0\"\nassert solution(\"3 4 1 1 3\") == \"3\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '0'\nassert solution('5 5 1 2 3') == '0'\nassert solution('5 5 1 2 3') == '0'\n\n\nstdin = \"\"\"3 3 2 4 4\"\"\"\nstdout = \"\"\"1\"\"\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3 2 4 4\n2 5 4 10\n''') == '1'\nassert solution('''\n3 3 3 3 5\n2 3 5 4 2\n''') == '0'\nassert solution('''\n5 5 1 2 3\n2 3 5 4 2\n''') == '3'"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\nB1 Y1 W1 G1 R1\n''') == '4'\nassert solution('''\n5\nB1 Y1 W1 G1 R1\n''') == '4'\nassert solution('''\n5\nG4 R4 R3 B3\n''') == '2'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '4'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '2'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\nB1 Y1 W1 G1 R1''') == '4'\nassert solution('''5\nB1 Y1 W1 G1 R1\nB1 Y1 W1 G1 R2''') == '5'\nassert solution('''4\nR4 G4 G3 R3 G4 R4''') == '2'\nassert solution('''5\nG4 R4 R3 B3\nB1 Y1 W1 G1 R1\nG2 R2 G1 R4 R2''') == '2'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nG4 R4 R3 B3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\nB1 Y1 W1 G1 R1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\nB2 Y2 W2 G2 R2\n\"\"\") == \"3\"\n\"\"\""
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\""
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input(\": \")) == \"2\"\nassert solution(input(\": \")) == \"4\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([4, 'B4', 'R4', 'R3', 'Y3', 'B3']) == '4'\nassert solution([3, 'G3', 'R3', 'R4', 'Y4', 'Y3']) == '0'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"0\"\nassert solution(input_small) == \"2\""
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    G3 G3\n''') == 0\nassert solution('''\n    G4 R4 R3 B3\n''') == 2\nassert solution('''\n    B1 Y1 W1 G1 R1\n''') == 4\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2 6'\nassert solution('2') == '1 1'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2 6'\nassert solution('5') == '3 11'\n\nstdin = '5'\nsolution(stdin)\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"2\"\nassert solution(\"3 3 4 3\") == \"6 11\""
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 3 4 3\") == \"2 6\"\nassert solution(\"2\\n1 1\") == \"1 1\"\nassert solution(\"5\\n10 30 5 6 24\") == \"3 11\""
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3 3 4 3\n4 7 6 5\n''') == '2 6'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '3 11'\nassert solution('8') == '2 12'\n\n'''\n\n\nfrom math import floor\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3 4 3\n4 7 6 5\n''') == '2 6'\nassert solution('''\n5\n10 30 5 6 24\n10 41 7 8 24\n''') == '3 11'\nassert solution('''\n4\n1 1\n100 100\n''') == '1 1'\nassert solution('''\n7\n12 18 3 2 1 3 2 3\n3 8 7 6 5 7 6 5\n''') == '1 1'\nassert solution('''\n5\n50 60 70 80\n50 50 70 80\n''') == '1 1'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1 1\"\nassert solution(\"3 3 4 3\") == \"2 6\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"5\") == \"3 11\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2 6'\nassert solution('4') == '2 6'\nassert solution('5') == '3 11'"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '3 11'\nassert solution('2') == '1 1'\nassert solution('3') == '2 2'\nassert solution('4') == '2 6'\nassert solution('10 30 5 6 24') == '3 11'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\nassert solution('1 1') == 'Impossible'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 4\n\n''') == '3B'\nassert solution('''\n2 2\n\n''') == 'Impossible'\nassert solution('''\n3 2\n\n''') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 4\n''') == '3B'\nassert solution('''2 2\n''') == 'Impossible'\nassert solution('''3 2\n''') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '3B'\nassert solution(input()) == 'Impossible'\n\nassert solution(input()) == '1A1B'\nassert solution(input()) == 'Impossible'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 4\") == \"3B\"\nassert solution(\"2 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 4\\n\") == \"3B\"\nassert solution(\"2 2\\n\") == \"Impossible\"\nassert solution(\"3 2\\n\") == \"1A1B\""
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4') == '3B', solution('1 4')\nassert solution('2 2') == 'Impossible', solution('2 2')\nassert solution('3 2') == '1A1B', solution('3 2')\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\nassert solution(\"10 10\") == \"11\"\nassert solution(\"5 5\") == \"12\"\nassert solution(\"1000000 10000000\") == \"9999999999\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 5') == '11'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n\n'''"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2''') == '3'\nassert solution('''4 4''') == '6'\nassert solution('''5 4''') == '26'\nassert solution('''15 10''') == '1636'\nassert solution('''1000000 1000000''') == '742969739'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 4\n3 2\n''') == '3'\nprint('\"Run\" is good. Coding is good. Fix the bugs, speed up, and practice much more.')\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n10\n2\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n5\n4\n\"\"\") == \"25\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2\n''') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2''') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '1'\nassert solution('8 4\\n5 1 2 5\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n5 3\\n5 3\\n6 4\\n6 4\\n7 4') == '0'\nassert solution('10 5\\n8 1 2 3\\n4 5 6 7\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n5 3\\n5 3\\n6 4\\n6 4\\n7 4') == '2'\nassert solution('20 5\\n4 5 6 7\\n8 5 9 7\\n8 5 1 2\\n9 5 9 1\\n8 9 1 2\\n9 5 1 3\\n1 4 5 5\\n1 5 4 3\\n4 5 6 7\\n4 5 3 2\\n5 6 8 4\\n5 6 4 2\\n5 8 4 1\\n5 9 4 1\\n6 7 4 2\\n6 7 3 2\\n6 8 4 1\\n6 9 4 1\\n7 4 1 3\\n7 5 6 2\\n7 6 5 1\\n7 8 6 2\\n7 9 6 1\\n8 9 5 2\\n8 9 1 3\\n9 8 5 1\\n9 9 1 2\\n9 10 4 1\\n9 10 1 2\\n10 9 1 2\\n10 10 1 3\\n') == '1'\nassert solution('12 5\\n3 2 6 4\\n5 7 8 9\\n10 11 12 13\\n11 13 14 15\\n13 14 16 17\\n13 14 18 19\\n15 16 17 18\\n13 16 18 19\\n15 16 19 20\\n') == '0'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '1'\nassert solution('3 3') == '1'\nassert solution('3 6') == '0'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"1\""
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\") == \"1\"\nassert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\") == \"1\"\nassert solution(\"5 6\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n5 6\") == \"2\"\nassert solution(\"5 6\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n5 6\") == \"2\"\nassert solution(\"10 20\\n6 4\\n0 2 1\\n1 4\\n2 6\\n4 7\\n7 8\\n8 10\\n0 6\\n6 9\\n10 12\\n12 14\\n14 16\\n14 20\") == \"30\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4') == '1'\nassert solution('5 6') == '0'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\") == \"1\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == '1'\nassert solution(\"1\\n1\\n\\n\") == '0'\nassert solution(\"1\\n3\\n\\n\") == '0'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n.o.\n.o.\no.T\n''') == '2'\nassert solution('''\n3 3\n.o.\n.o.\no.S\n''') == '-1'\nassert solution('''\n5 3\n.o.\n.o.\no.S\n.o.\no.S\n''') == '-1'\nassert solution('''\n5 3\n.o.\n.o.\no.S\n.o.\nS.o\n''') == '3'\nassert solution('''\n5 3\n.o.\n.o.\nS.o\n.o.\nS.o\n''') == '-1'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"1 1\") == \"1\""
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n.o.\n.o.\n.o.\n''') == '2'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n.o\n.o.\no.T''') == '2'\n\n'''\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 2') == '-1'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\nS.o\\n.o.\\no.T\") == \"2\""
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\nS.o\\no.o\\nS.o\") == \"2\"\nassert solution(\"3 3\\n.o.o\\nS.S.o\") == \"1\"\nassert solution(\"5 3\\n.o.o\\nS.S.S\\nS.T\\n.S\\no\") == \"1\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 3\n.o\no.T\no.T\n\"\"\") == \"2\"\nassert solution(\"\"\"3 3\no.o\no.o\no.S\n\"\"\") == \"-1\"\nassert solution(\"\"\"5 4\n.o.S.o.\nS..\no.o.\no.o.\nS.o.\no.S.S.\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n\n\n\"\"\""
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '199'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n5 2') == 'Aoki'\nassert solution('2\\n5 2\\n3 3') == 'Aoki'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5 2\") == \"Aoki\""
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5 2\") == \"Aoki\"\nassert solution(\"2\\n3 3\") == \"Takahashi\"\n\"\"\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Takahashi\"\nassert solution(\"2\") == \"Aoki\"\nassert solution(\"3\") == \"Aoki\"\n\"\"\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Takahashi\"\nassert solution(\"2\") == \"Aoki\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n5 2\\n3 3') == 'Aoki'\nassert solution('2\\n5 2\\n3 3') == 'Takahashi'\nassert solution('1\\n5 3\\n3 3') == 'Takahashi'\nassert solution('1\\n5 3\\n3 3') == 'Takahashi'\nassert solution('1\\n5 3\\n3 3') == 'Takahashi'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\nassert solution(\"2\\n5 2\\n1 1\") == \"Takahashi\"\nassert solution(\"2\\n5 2\\n5 5\") == \"Takahashi\"\nassert solution(\"2\\n5 2\\n1 1\\n2 2\") == \"Aoki\"\nassert solution(\"2\\n5 2\\n3 3\\n4 4\") == \"Takahashi\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10**5)\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"Aoki\"\nassert solution(\"2 3\") == \"Aoki\"\nassert solution(\"5 2\") == \"Takahashi\"\nassert solution(\"5 5\") == \"Aoki\"\nassert solution(\"6 3\") == \"Takahashi\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'Aoki'\nassert solution('5 2') == 'Aoki'\nassert solution('3 3') == 'Aoki'\n\n'''\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2\\n') == '0'\nassert solution('3 3\\n') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2\n''') == '0'\nassert solution('''\n3 3\n''') == '8'\nassert solution('''\n4 4\n''') == '3'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2''') == '0'\nassert solution('''3 3''') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"8\"\nassert solution(\"1000000000 1000000000\") == \"1000000000000\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(t) == '1'\nassert solution(u) == '0'\nassert solution(v) == '-1'\n\"\"\"\nfrom typing import Dict\nfrom pprint import pprint\nfrom collections import defaultdict\nfrom itertools import combinations, permutations\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2\n1 2 3 4\n1 5 3 4\n''') == \"1\"\n\nassert solution('''2 3\n1 2 4 5\n1 2 1 3 2 3\n''') == \"0\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 3\") == \"-1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\n1 2 3 4\n1 5 3 4\n''') == '1'\nassert solution('''2 3\n1 2 4 5\n1 2 1 3 2 3\n''') == '-1'\nassert solution('''2 4\n1 2 3 4\n1 5 6 4\n''') == '0'\nassert solution('''2 2\n1 2 3 4\n1 5 6 4\n''') == '1'"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_1) == \"1\"\nassert solution(input_2) == \"0\"\nassert solution(input_3) == \"-1\"\nprint(solution(input))\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n1 2 3 4\n1 5 3 4''') == '1'\nassert solution('''2 3\n1 2 4 5\n1 2 1 3 2 3''') == '0'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 2 3 4\\n1 5 3 4\\n') == '1'\nassert solution('2 3\\n1 2 4 5\\n1 2 1 3 2 3\\n') == '0'\nassert solution('1 2\\n3 4\\n5 6\\n') == '-1'\nassert solution('2 4\\n1 2 1 3 2 3\\n') == '0'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n1 2 3 4\n1 5 3 4\n''') == '1'\n\nassert solution('''\n2 2\n1 2 3 4\n1 5 6 4\n''') == '0'\n\nassert solution('''\n2 3\n1 2 4 5\n1 2 1 3 2 3\n''') == '-1'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 2') == '0'\nassert solution('2 3') == '-1'"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 2 3 4\\n1 5 3 4') == '1'\nassert solution('2 2\\n1 2 3 4\\n1 5 6 4') == '0'\nassert solution('2 3\\n1 2 4 5\\n1 2 1 3 2 3') == '-1'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(24, '17:30') == '17:30'\nassert solution(12, '17:30') == '17:30'\nassert solution(24, '99:99') == '09:09'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''24\n17:30''') == '17:30'\nassert solution('''12\n17:30''') == '17:30'\nassert solution('''24\n99:99''') == '99:99'\nassert solution('''12\n99:99''') == '99:99'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r\"\"\"\n12\n17:30\n\"\"\") == r\"\"\"17:30\"\"\"\n\nassert solution(r\"\"\"\n24\n17:30\n\"\"\") == r\"\"\"07:30\"\"\"\n\nassert solution(r\"\"\"\n24\n99:99\n\"\"\") == r\"\"\"09:09\"\"\"\n\nassert solution(r\"\"\"\n12\n19:19\n\"\"\") == r\"\"\"19:19\"\"\"\n\nassert solution(r\"\"\"\n12\n99:99\n\"\"\") == r\"\"\"19:19\"\"\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"24\") == \"07:59\"\nassert solution(\"12\") == \"17:00\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''12\n17:30''') == '17:30'\nassert solution('''24\n99:99''') == '99:99'\nassert solution('''24\n17:30''') == '17:30'\nassert solution('''24\n99:99''') == '99:99'"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"24\") == \"00:00\"\nassert solution(\"12\") == \"00:00\"\nassert solution(\"24\") == \"00:00\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '17:30'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12') == '00:00'\nassert solution('24') == '00:00'\nassert solution('12') == '00:00'\nassert solution('24') == '00:00'"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"01:01\"\nassert solution(\"24\") == \"00:01\"\nassert solution(\"99\") == \"09:09\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"24\") == \"00:00\"\nassert solution(\"12\") == \"00:00\"\nassert solution(\"24\") == \"00:00\"\nassert solution(\"99\") == \"09:00\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '6'\nassert solution('2') == '6'\nassert solution('1 2 1') == '4'\nassert solution('2 3 1') == '6'\nassert solution('3 1 1') == '4'"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n2\n1 2 1\n2 3 1\n3 1 1''') == '6'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n2 1 2\\n1 2 1') == '6'\nassert solution('3 3\\n2 1 2\\n1 2 1\\n3 1 1\\n') == '6'"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '6'"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    2\n    1 2 1\n    2 3 1\n    3 1 1\n    ''') == '6'\nassert solution('''\n    1\n    1 2 1\n    2 3 1\n    3 1 1\n    ''') == '3'\nassert solution('''\n    5\n    5 1 2 1\n    1 2 3 1\n    2 3 1 1\n    3 1 1 1\n    ''') == '4'\nassert solution('''\n    2\n    1 2 1\n    2 3 1\n    ''') == '4'\nassert solution('''\n    3\n    1 2 1\n    2 3 1\n    3 1 1\n    ''') == '2'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"3 2\") == \"6\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"3 1\") == \"3\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n2\n1 2 1\n2 3 1\n3 1 1\n''') == '6'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 5\n1 2 3\n2 3 4\n3 1 5\n4 5 2\n3 5''') == '6', \"First\"\nassert solution('''7 7\n1 2 1\n2 3 1\n3 4 1\n4 5 2\n5 2 1\n6 5''') == '8', \"Second\"\nassert solution('''2 5\n1 2 3\n2 3 4\n3 1 5\n4 5 2\n5 2 1\n6 5''') == '4', \"Third\"\n\nprint('All test cases passed!')"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"5 5\") == \"8\"\nassert solution(\"1 2\") == \"1\""
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n3 0 3 0 1 1') == '5\\n2 1'\nassert solution('6\\n2 0 3 0 1 1') == '-1'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n1\n''') == '0'\n\nassert solution('''6\n2 0 3 0 1 1\n''') == '5'\n\nassert solution('''6\n2 0 3 0 1 1\n2 1\n''') == '-1'\n\nassert solution('''1\n1\n0\n0\n1\n1\n''') == '0'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '-1'\nassert solution('5') == '5 6'\nassert solution('6') == '5 6'\nassert solution('1000000') == '-1'\nassert solution('3') == '3 3'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6\n2 0 3 0 1 1\n''') == '5'\nassert solution('''1\n0\n''') == '0'\nassert solution('''6\n3 2 2 2 1 1\n''') == '-1'"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n0 1 1 1 1') == '-1'\nassert solution('6\\n2 0 3 0 1 1') == '5'\nassert solution('1\\n0') == '0'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n2 0 3 0 1 1') == '5'\nassert solution('1\\n0') == '0'\nassert solution('6\\n3 2 2 2 1 1') == '-1'\nassert solution('6\\n3 1 2 2 1 1') == '5'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('6') == '-1'\nassert solution('6') == '-1'\nassert solution('1') == '0'"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '2 1'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3 2 2 2 1 1') == '-1'\nassert solution('6\\n2 0 3 0 1 1') == '5\\n2 1'\nassert solution('6\\n0 0 3 2 1 1') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\n2 0 3 0 1 1\n''') == '5 2 1'\nassert solution('''1\n0\n''') == '0'\nassert solution('''6\n3 2 2 2 1 1\n''') == '-1'"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 8\n12 20''') == \"2\"\nassert solution('''3 10\n10 20 30''') == \"1\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 8\n12 20\n''') == \"2\"\nassert solution('''3 10\n10 20 30\n''') == \"1\""
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 8') == '2'\nassert solution('3 10') == '1'\n\n'''\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 8\n12 20''') == '2'\nassert solution('''3 10\n10 20 30''') == '1'"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 8') == '2'\nassert solution('3 10') == '1'"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(INPUT) == '1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 8\n12 20\n''') == '2'\nassert solution('''\n3 10\n10 20 30\n''') == '1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 8\n12 20''') == '2'\nassert solution('''3 10\n10 20 30''') == '1'"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([10, 20, 30]) == \"1\"\nassert solution([12, 20]) == \"0\"\nassert solution([10, 20, 30]) == \"3\""
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 10\n10 20 30\n''') == \"2\"\n\nassert solution('''\n1\n''') == \"0\"\n\nassert solution('''\n2\n''') == \"1\"\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('0 0 0 1000') == '11.547005383792516398'\nassert solution('5 5 0 0') == '1'\nassert solution('0 0 0 10') == '4.84'\nassert solution('0 0 0 10') == '4.84'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 5 5\n3 2\n-1 -1\n-1 0\n''') == '3.729935587093555327', 'wrong solution'\n\nassert solution('''\n0 0 5 5\n3 2\n-1 -1\n-1 0\n''') == '3.729935587093555327', 'wrong solution'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0 0 5 5\") == \"3.729935587093555327\"\nassert solution(\"100 1000\") == \"11.547005383792516398\"\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '12.9035143121498923'\nprint(solution())\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '5.84424591178798928'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 5 5\") == \"3.729935587093555327\"\nassert solution(\"3 2\") == \"3.729935587093555327\"\nassert solution(\"-1 -1\") == \"11.547005383792516398\"\nassert solution(\"-1 0\") == \"10.547005383792516398\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('100 1000') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '3.729935587093555327'\nassert solution('0 0 0 1000') == '11.547005383792516398'"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('3 2') == '4.12472773290594818'\nassert solution('-1 -1') == '1.720930232558139536'\nassert solution('-1 0') == '2.23606797749979'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('0 0 0 1000') == '11.547005383792516398'\nassert solution('3 2') == '0.189423828125'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"Second\"\nassert solution(\"1\") == \"First\"\nassert solution(\"2\") == \"Second\"\nassert solution(\"3\") == \"Second\""
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Second\"\nassert solution(\"3\") == \"Second\"\nassert solution(\"2\") == \"Second\"\nassert solution(\"4\") == \"First\"\nassert solution(\"5\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1\n1\n''') == 'Second'\n\nassert solution('''\n1\n2\n1\n''') == 'First'\n\nassert solution('''\n2\n2\n1\n''') == 'Second'\n\nassert solution('''\n2\n2\n1\n''') == 'First'\n\nassert solution('''\n3\n1\n2\n''') == 'Second'"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162''') == 'Second\\nFirst\\nSecond'\nassert solution('''3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162''') == 'Second\\nFirst\\nSecond'\nassert solution('''3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162''') == 'First\\nSecond\\nFirst'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"First\"\nassert solution(\"2\") == \"Second\"\nassert solution(\"1\") == \"Second\"\n\"\"\""
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'Second'\nassert solution('2') == 'First'\nassert solution('3') == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"First\"\nassert solution(\"1\") == \"Second\"\nassert solution(\"10\") == \"Second\"\nassert solution(\"2\") == \"First\"\nassert solution(\"1 2\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'First'\nassert solution('2') == 'Second'\nassert solution('3') == 'Second'\n'''\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'First'\nassert solution('2') == 'Second'\nassert solution('3') == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162''') == 'Second\\nFirst\\nSecond'\n''') == 'Second'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"5 6 2\") == \"4\"\nassert solution(\"12 4 8\") == \"3\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"1 4 5 2\") == \"1\"\nassert solution(\"5 5 5 5 5 5\") == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 2') == '1'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2\\n4 3 1 5 2\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"5 3 2\\n1 2 1 5 2\\n1 2 3 5\\n1 2 4 6 7\\n1 2 3 5\\n1 2 4 6 7\") == \"5\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"4 3 1 5 2\") == \"1\""
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"10 10 10 10\") == \"10\"\nassert solution(\"10 10 10 10 1\") == \"1\"\nassert solution(\"100 100 100 100 100 100\") == \"100\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 2\\n4 3 1 5 2') == '1'\nassert solution('10 5 2\\n5 5 7 9 9\\n3 7 9 1 2\\n4 6 7 3 4\\n5 7 9 7 2\\n6 7 8 5 2\\n7 8 7 9\\n8 7 9 5\\n9 7 9 1\\n10 9 9 1 2\\n11 9 9 5 1\\n12 9 9 7 1\\n13 9 9 9\\n14 9 9 9 2\\n15 9 9 9 3') == '4'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1 5 2''') == '1'\nassert solution('''5 3 2''') == '1'\nassert solution('''3 4 5 2''') == '2'\nassert solution('''1 2 2''') == '1'\nassert solution('''5 5 4 2''') == '1'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 3 2\n4 3 1 5 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 3 2\n4 3 1 5 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10 5 2\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 2 2\n1 2 3 4 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 2 2\n1 2 3 4 5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\nassert solution(\"3 5\") == \"29\"\nassert solution(\"3 5\") == \"12\"\nassert solution(\"6 7\") == \"15\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n''') == '1'\nassert solution('''3 2\n''') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\nprint('Congratulations! All test cases passed.')"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n''') == '1'\nassert solution('''\n3 2\n''') == '24'\n'''\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1\n''') == '1'\n\nassert solution('''3 2\n''') == '24'"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '24'"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"24\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''\n2 1\n''') == '1'\n\nassert solution(\n'''\n3 2\n''') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\""
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    2\n    1\n    2\n    3\n    2\n    2\n    3\n    ''') == '1'\nassert solution('''\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    ''') == '2'\n''')\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n''') == '6'\n\nassert solution('''\n4 4\n''') == '3'\n\nassert solution('''\n7 3\n''') == '1196'\n\nassert solution('''\n31 8\n''') == '64921457'"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 2\n\n''') == '6'\nassert solution('''\n4 4\n\n''') == '3'\nassert solution('''\n7 3\n\n''') == '1196'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"7 3\") == \"1196\"\nassert solution(\"31 8\") == \"64921457\"\nassert solution(\"12 7\") == \"1196\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3, 2]) == '6'\nassert solution([4, 4]) == '3'\nassert solution([7, 3]) == '1196'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3, 2]) == '6'\nassert solution([4, 4]) == '3'\nassert solution([7, 3]) == '1196'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"7 3\") == \"1196\"\n\n\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '6'\n\nassert solution('4 4') == '3'\n\nassert solution('7 3') == '1196'\n\nassert solution('31 8') == '64921457'"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 2') == '#.X#'\nassert solution('5 4 5') == '#X#.X#'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4 2\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 4 5\\n\"\n    \"#...\\n\"\n    \"#.#.\\n\"\n    \"#..#\\n\"\n    \"#...\\n\"\n) == \"#X#.\\n\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4 2') == '#.X#'\nassert solution('5 4 5') == '#.X#'\nassert solution('6 4 6') == '#.X#'\n\nstdin = \"\"\"3 4 2\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\") == \"#.X#\\nX.#.\\n#...\\n\"\nassert solution(\"5 4 5\") == \"#X#X\\n#X#.\\nX#..\\n...#\\n#.#X\\n\"\nassert solution(\"3 4 5\") == \"###.\\n###.\\n###.\\n\"\nassert solution(\"10 11 12\") == \"....\\n....\\n....\\n....\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\nX.X.X.X\\n\"\nassert solution(\"20 20 20\") == \"................\\n................\\n................\\n................\\n................\\n................\\n................\\n................\\n................\\n................\\n................\\n\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\") == \"X.X\"\nassert solution(\"5 4 5\") == \"X#.X\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 2') == '#.X#'\nassert solution('5 4 5') == '#X#.X#'"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 4 2''') == '#.X#\\nX.#.\\n#...\\n'''\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4 2\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2\") == \"#.X#\\nX.#.\\n#...\\n\"\nassert solution(\"5 4 5\") == \"#XXX\\n#X#.\\nX#..\\n...#\\n#.##\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('5\\n1 1 1 4 4 3 2 2 2 2 10 8 9 9 9 10 10 4') == '3'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"3\"\nprint(solution(*(list(map(int, stdin.split())))))"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(example_stdin) == '4'\nassert solution(input_data) == '3'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 1\n\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n1 2 2 2\n\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 1\n''') == '1'\nassert solution('''\n18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n''') == '3'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '11'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == '1'\nprint(solution(''))\nprint(solution('18'))\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 1\n\n''') == '1'\nassert solution('''5\n1 2 2 2\n\n''') == '3'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"3\""
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n''') == '4'\n\nassert solution('''\n3\n1 1\n''') == '1'\n\nassert solution('''\n18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n''') == '3'"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n\n\"\"\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\nassert solution(\"10 1 10 1\") == \"10 1\"\nassert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"1 1 1 1 1\") == \"1 1 1 1 1\""
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\nassert solution(\"10 4 2\") == \"10 9 8 7 6 5 4 3 2 1\""
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\n\n\"\"\"\n\nimport sys\nimport re\n\nsys.stdin = open('input.txt')\n\nt = int(input())\n\nfor i in range(t):\n    N, A, B = map(int, input().split())\n    \n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    if len(A) < 1:\n        print(\"-1\")\n    else:\n        A.sort()\n        B.sort(reverse=True)\n        idx_a = 0\n        idx_b = 0\n        count = 0\n        for i in range(N):\n            while count < A[idx_a] and idx_a < len(A):\n                count += 1\n                idx_a += 1\n            while count < B[idx_b] and idx_b < len(B):\n                count += 1\n                idx_b += 1\n            if count < A[idx_a]:\n                print(A[idx_a], end=\" \")\n                idx_a += 1\n            else:\n                print(B[idx_b], end=\" \")\n                idx_b += 1\n        print()\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\nassert solution('2 3') == '-1'"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2\") == \"4 1 5 2 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\nassert solution(\"5 3 1\") == \"1\"\nassert solution(\"8 3 3\") == \"3\"\nassert solution(\"5 2 5\") == \"1 1 2 2 3\"\nassert solution(\"5 1 5\") == \"1 1 2 2 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\nassert solution(\"10 2 2 3 1 0 0\") == \"2 3 1 0 0\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == \"Yes\"\nassert solution(test_input_2) == \"No\"\nassert solution(test_input_3) == \"Yes\""
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3 6 9 18 36 108\\n\") == \"Yes\\n\"\nassert solution(\"2\\n7 17\\n\") == \"No\\n\"\nassert solution(\"9\\n4 8 10 12 15 18 33 44 81\\n\") == \"Yes\\n\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n6\") == \"No\"\nassert solution(\"2\\n7\") == \"No\"\nassert solution(\"3\\n8\") == \"Yes\"\nassert solution(\"4\\n9\") == \"Yes\"\nassert solution(\"5\\n10\") == \"Yes\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\\n3 6 9 18 36 108\") == 'Yes'\nassert solution(\"2\\n7 17\") == 'No'\nassert solution(\"9\\n4 8 10 12 15 18 33 44 81\") == 'Yes'"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n7 9 16\n\n''') == 'No'\nassert solution('''\n6\n3 6 9 18 36 108\n\n''') == 'Yes'\nassert solution('''\n9\n4 8 10 12 15 18 33 44 81\n\n''') == 'Yes'\nassert solution('''\n7\n5 8 9 10 11 12 13\n\n''') == 'Yes'\nassert solution('''\n2\n7 17\n\n''') == 'No'"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"Yes\""
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"Yes\"\nassert solution(\"3\\n6 9 18 36 108\") == \"Yes\"\nassert solution(\"2\\n7 17\") == \"No\"\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n3 6 9 18 36 108\n''') == 'Yes'\nassert solution('''\n2\n7 17\n''') == 'No'\nassert solution('''\n9\n4 8 10 12 15 18 33 44 81\n''') == 'Yes'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"Yes\"\nassert solution(input) == \"No\"\n'''\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == 'Yes'\nassert solution('2\\n') == 'No'\nassert solution('3\\n') == 'No'\nassert solution('4\\n') == 'Yes'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n-6\\n4\\t5\\t3\") == \"12\"\nassert solution(\"3\\n1\\n5\\n6\") == \"11\"\nassert solution(\"1\\n2\\n-3\\n4\\t5\\t3\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2 -6 4 5 3\") == \"12\"\nassert solution(\"6\\n2 3 -6 4 5\") == \"6\"\nassert solution(\"6\\n4 -6 5 5\") == \"0\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '12'\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n1 2 -6 4 5 3') == '12'\nassert solution('6\\n1 2 -6 4 5 3') == '12'\nassert solution('6\\n1 2 -6 4 5 3') == '12'\nassert solution('6\\n1 2 -6 4 5 3') == '12'\nassert solution('6\\n1 2 -6 4 5 3') == '12'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('5 2 -6 4 5 3') == '12'"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 -6 4 5 3') == '12'\nassert solution('6\\n1 2 -6 4 5 3') == '12'\nassert solution('6\\n1 2 -6 -4 5 3') == '-12'\nassert solution('6\\n1 2 -6 -4 5 3') == '-12'\nassert solution('6\\n1 2 -6 4 5 3') == '-12'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"12\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '12'\n\"\"\""
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 -6 4 5 3\") == \"12\"\nassert solution(\"5 7 3 4 2\") == \"10\"\nassert solution(\"5 5 5 5 5\") == \"5\"\nassert solution(\"2 1 3 4 5\") == \"0\"\nassert solution(\"7 7 7 7 7\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2 -6 4 5 3\n''') == '12'\nassert solution('''\n10\n1 2 3 5 6 4 8 7 2 1\n''') == '36'\nassert solution('''\n6\n1 2 -6 4 5 3\n''') == '14'\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '0'\n''')"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 1, 4, 2]) == 5\nassert solution([3, 3, 4, 2]) == 4\nassert solution([5, 4, 3, 2, 1]) == 5\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"5 3\\n\"\n    \"2 1 3 4 2\"\n) == \"5\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 4 3\\n3 1 4 2') == '5'\nassert solution('4 3\\n3 1 4 2') == '5'\nassert solution('8 3\\n3 1 4 2 5\\n4 1 2 3\\n5 4 3 2 1') == '8'\nassert solution('9 3\\n3 1 4 2 5\\n4 1 2 3\\n5 4 3 2 1') == '7'\nassert solution('5 2\\n3 1 4 2 5\\n4 1 2 3\\n5 4 3 2 1') == '7'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '5'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == 5\nassert solution('4 4') == 4"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"5\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 2 3\") == \"1\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n3 1 4 2\") == \"5\""
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3, 1, 4, 2]) == 5\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([5, 4, 3, 2, 1]) == 5\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n') == '5'"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '0 0'\n\nassert solution('''\n3\n2 3 1\n''') == '0 1'\n\nassert solution('''\n3\n3 2 1\n''') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 3\n''') == '0 0'\nassert solution('''3\n2 3 1\n''') == '0 1'\nassert solution('''3\n3 2 1\n''') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 2 1\") == \"0 1\"\nassert solution(\"3\\n3 2 1\") == \"2 1\"\nassert solution(\"3\\n1 2 3\") == \"0 0\"\n\n\"\"\""
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3 2 1') == '0 1'\nassert solution('3\\n3 2 1') == '0 1'\nassert solution('3\\n1 2 3') == '0 0'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1 2 3\n''') == '0 0'\n\nassert solution('''\n3\n2 3 1\n''') == '0 1'\n\nassert solution('''\n3\n3 2 1\n''') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n2 3 1\n\"\"\") == \"0 0\"\n\nassert solution(\"\"\"\n3\n3 2 1\n\"\"\") == \"0 1\"\n\nassert solution(\"\"\"\n3\n3 2 1\n\"\"\") == \"2 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 3\n''') == '0 0'\nassert solution('''3\n2 3 1\n''') == '0 1'\nassert solution('''3\n3 2 1\n''') == '2 1'"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == '0 0'\nassert solution('3\\n2 3 1') == '0 1'\nassert solution('3\\n3 2 1') == '2 1'\nprint(solution('3\\n3 2 1'))\nprint(solution('3\\n1 2 3'))\nprint(solution('3\\n2 3 1'))\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == '0 1'\nassert solution(input_string_2) == '2 1'\nassert solution(input_string_3) == '0 0'\nassert solution(input_string_4) == '2 1'"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2 3 1\n''') == '0 0'\nassert solution('''\n3\n3 2 1\n''') == '2 1'"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 4\naa\nbb\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3 3\naba\nbba\n\"\"\") == \"8\"\nassert solution(\"\"\"\n4 5\nabbb\nbaaa\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n2 4\naa\nbb\n    \"\"\") == \"6\"\n\nassert solution(\n    \"\"\"\n3 3\naba\nbba\n    \"\"\") == \"8\"\n\nassert solution(\n    \"\"\"\n4 5\nabbb\nbaaa\n    \"\"\") == \"8\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 6\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4\\naba\\nbaaa\\n') == '8'\nassert solution('3 3\\naba\\nbaaa\\n') == '8'\nassert solution('4 5\\nabbb\\nbaaa\\n') == '8'"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 6"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\naba\\nbb\") == \"8\"\nassert solution(\"3 3\\naba\\nbaa\\n\") == \"8\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 4\naa\nbb''') == '6'\nassert solution('''3 3\naba\nbba''') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"8\"\nassert solution(\"4 5\") == \"8\"\nassert solution(\"2 4\") == \"6\""
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3\naba\nbba\n''') == 8"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''0 0 0\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == 'YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n0 1 1\\n1 0 1\\n1 1 0\\n1 1 1'\nassert solution('''0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1\n''') == 'YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n0 1 1\\n1 0 1\\n1 1 0\\n1 1 1\\n'''"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"NO\"\nassert solution(r\"\"\"\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1\n\"\"\") == \"YES\"\nassert solution(r\"\"\"\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0\") == \"YES\", solution(\"0 0 0\")\nassert solution(\"0 0 1\") == \"YES\", solution(\"0 0 1\")\nassert solution(\"0 0 1\") == \"YES\", solution(\"0 0 1\")\nassert solution(\"0 0 1\") == \"YES\", solution(\"0 0 1\")\nassert solution(\"0 1 1\") == \"YES\", solution(\"0 1 1\")\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 0 0\") == \"YES\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'YES'\nassert solution('''\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'NO'\nassert solution('''\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'NO'"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'YES'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\") == \"YES\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n0 1 1\\n1 0 1\\n1 1 0\\n1 1 1\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\""
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == \"NO\"\nassert solution('4') == \"YES\"\nassert solution('10') == \"YES\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\\n2 2 1 1\\n\""
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"2\") == \"YES\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\"\nassert solution(\"\") == \"NO\"\nassert solution(\"2 3 6 7\") == \"2 2 1 1\"\nassert solution(\"5 6 10 15 1000 75\") == \"2 1 1 1 1 1\""
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n6 10 15 1000 75\n''') == 'NO'\n\nassert solution('''4\n2 3 6 7\n''') == 'YES'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\""
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'YES'\nassert solution('5') == '2 1 2 1 1 \nassert solution('4') == 'YES'\nassert solution('6') == 'NO'\nassert solution('6 10 15 1000 75') == 'YES'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\"\nassert solution(input()) == '\\n'.join(map(str,[2,2,1,1,1]))\n\n\n------Solutions------"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 6 7') == 'YES\\n2 2 1 1 \\n'\nassert solution('5\\n6 15 35 77 22') == 'YES\\n2 1 2 1 1 \\n'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'NO'\nassert solution('2') == 'YES'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n100\n60\n70\n''') == '40'\nassert solution('''\n410\n55\n70\n''') == '5'\nassert solution('''\n600\n60\n70\n''') == '0'\n\nimport sys"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n60\n70\n''') == '40'\nassert solution('''410\n55\n70\n''') == '5'\nassert solution('''600\n60\n70\n''') == '0'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''100\n60\n70''') == '40'\nassert solution('''410\n55\n70''') == '5'\nassert solution('''600\n60\n70''') == '0'\nassert solution('''4200\n5\n70''') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"40\"\nassert solution(\"100\\n60\\n70\") == \"40\"\nassert solution(\"410\\n55\\n70\") == \"5\"\nassert solution(\"600\\n60\\n70\") == \"0\"\nassert solution(\"400\\n50\\n100\") == \"4\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"20\") == \"1\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''200\n40\n60''') == '40'\nassert solution('''210\n35\n55''') == '30'\nassert solution('''300\n60\n70''') == '20'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n100\n60\n70\n\"\"\") == '40'\n\nassert solution(\n\"\"\"\n410\n55\n70\n\"\"\") == '5'\n\nassert solution(\n\"\"\"\n600\n60\n70\n\"\"\") == '0'\n\nassert solution(\n\"\"\"\n49\n12345\n87654\n\"\"\") == '4'\n\nassert solution(\n\"\"\"\n2\n5\n3\n\"\"\") == '1'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '40'"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12') == '12'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"12\\n3 1 4 1 5 9 2 6 5 3 5 8\"\n) == \"12\\n3 4\"\nassert solution(\n    \"5\\n1 1 1 1 1\"\n) == \"1\\n1 1\\n1\""
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"12\\n3 1 4 1 5 9 2 6 5 3 5 8\") == \"12 4\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '12\\n'\n    '3 1 4 1 5 9 2 6 5 3 5 8\\n'\n) == '12 4'\nassert solution(\n    '5\\n'\n    '1 1 1 1 1'\n) == '1'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n12\n3 1 4 1 5 9 2 6 5 3 5 8\n\"\"\") == \"3 4\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12') == '12'\nassert solution('5') == '1'"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"1 2 3\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\n1 1 2 1 1 3 1 1 1\n''') == '4'\nassert solution('''\n15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '2'\nassert solution('''\n18\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '5'\nassert solution('''\n5\n1 1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '2'\nassert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"12\\n3 1 4 1 5 9 2 6 5 3 5 8\") == \"3 4\\n1 2 3 5\\n3 1 5 4\\n5 6 8 9\\n\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3 4\") == \"0\"\nassert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1') == '6'\nassert solution('3 2') == '2'\nassert solution('3 3') == '6'\nassert solution('3 4') == '2'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"5 1\") == \"12\"\nassert solution(\"5 1\") == \"12\"\nassert solution(\"5 1\") == \"12\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1\n1 3 3\n''') == '6'\nassert solution('''\n3 1\n1 2 2\n''') == '4'\n\nprint(solution('''\n10 2\n1 2 3 4 5 6 7 8 9 10\n'''))\n\nprint(solution('''\n8 3\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n'''))\n\nprint(solution('''\n6 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 7 8\n'''))\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n10 20\n1 10 3\n2 20 4\n3 15 6\n4 20 3\n5 10 7\n6 20 1\n7 15 8\n8 20 2\n9 15 4\n10 20 8\n\"\"\") == '6'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"6\""
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"3 3\") == \"12\"\nassert solution(\"2 2\") == \"5\""
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\n1 3 1\n2 4 2\n''') == '6'\n\nassert solution('''4 4\n1 2 1\n3 4 1\n2 4 1\n4 2 2''') == '8'"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3\\n1 3 3') == '6'\nassert solution('3 1\\n1 3 3') == '6'\nassert solution('5 3\\n1 3 1 2 1\\n2 3 2 3 2') == '10'"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 1\n1 3 3\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"87654\") == \"10\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"10\"\nassert solution(\"20\") == \"-1\"\nassert solution(\"11\") == \"11\"\nassert solution(\"12\") == \"12\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input.read()) == \"10\""
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n3\") == \"1\"\nassert solution(\"2\\n2\") == \"1\"\nassert solution(\"3\\n5\") == \"1\"\nassert solution(\"3\\n10\") == \"1\"\nassert solution(\"4\\n50\") == \"2\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n10\n''') == '10'\nassert solution('''\n1\n1\n''') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"10\") == \"10\"\nassert solution(\"30\") == \"10\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nn=3\ns=30\n''') == '10'\nassert solution('''\nn=1\ns=30\n''') == '-1'\nassert solution('''\nn=2\ns=30\n''') == '-1'\nassert solution('''\nn=9\ns=30\n''') == '10'\nassert solution('''\nn=15\ns=30\n''') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"10\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n87654') == '10'\nassert solution('6\\n87654') == '-1'\nassert solution('7\\n87654') == '-1'\nassert solution('8\\n87654') == '10'\nassert solution('9\\n87654') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '-1'\nassert solution('10') == '10'\nassert solution('100') == '-1'\nassert solution('12345') == '-1'\nassert solution('123') == '-1'"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aba') == 'Second'\nassert solution('aaaa') == 'First'\nassert solution('aaba') == 'Second'\nassert solution('abaa') == 'First'"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aba') == 'Second'\nassert solution('abcd') == 'First'\nprint(solution())\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == 'First'\nassert solution('aba') == 'Second'\nassert solution('cba') == 'Second'"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aba') == 'Second'\nassert solution('bba') == 'First'\nassert solution('aaa') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aba') == 'Second'\nassert solution('a') == 'First'\n\n'''\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"Second\"\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aba') == 'Second'\nassert solution('aab') == 'First'\nassert solution('abca') == 'Second'\nassert solution('abc') == 'First'\nassert solution('b') == 'First'"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aba') == 'Second'\n\nassert solution('ab') == 'Second'\nassert solution('aa') == 'First'\nassert solution('aa') == 'Second'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aba') == 'Second'\nassert solution('bba') == 'First'\nassert solution('aab') == 'Second'\nassert solution('aba') == 'Second'\nassert solution('bba') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\naba\n''') == 'Second'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''0\n12345''') == '6'\nassert solution('''1\n5''') == '0'\nassert solution('''5\n2''') == '1'\nassert solution('''5\n5''') == '1'\nassert solution('''10\n6''') == '1'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('10\\n12345') == '6'\nassert solution('16\\n439873893693495623498263984765') == '40'"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('12345') == '6'\nassert solution('123456') == '3'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('16') == '40'\nassert solution('439873893693495623498263984765') == '40'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '6'\nassert solution('16') == '40'"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 0\nassert solution(\"2\") == 3\nassert solution(\"12345\") == 6\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '6'\nassert solution('12345') == '6'\nassert solution('439873893693495623498263984765') == '40'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"12345\") == \"6\"\nassert solution(\"123456789\") == \"63\"\nassert solution(\"123456789123456789\") == \"63\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == '6'\nassert solution('12345') == '6'\nassert solution('16') == '40'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''1 2\n1\n2\n''') == '160955686'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '974061117'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2\n0 1\n2 1\n''') == '332748119'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '160955686'\nassert solution('''1 5\n0 1 1 1 1\n4 5 5 5 5\n''') == '974061117'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 1\n0 1\n2 1''') == '332748119'\nassert solution('''1 2\n1\n1\n''') == '3'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '160955686'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '332748119'\nassert solution('1 2') == '332748119'\nassert solution('1') == '3'\nassert solution('3 3') == '160955686'\nassert solution('0 1') == '185138929'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n''') == '3'"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"332748119\"\nassert solution(\"1 2\") == \"332748119\"\nassert solution(\"3 3\") == \"160955686\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '332748119'\nassert solution('1 2') == '332748119'\nassert solution('2 1') == '3'\nassert solution('2 2') == '160955686'\nassert solution('3 3') == '160955686'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"332748119\"\nassert solution(\"1 2\") == \"332748119\"\nassert solution(\"3 3\") == \"160955686\"\nassert solution(\"4 3 5\") == \"185138929\"\nassert solution(\"3 3\") == \"974061117\""
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 1\n0 1\n2 1''') == '332748119'\nassert solution('''1 2\n1\n1\n''') == '160955686'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '974061117'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '332748119'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\nassert solution('AA') == '0'"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\", \"1st example\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"ORZ\", \"2nd example\"\nassert solution(\"OZ\") == \"0\", \"3rd example\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\", solution(\"AJKEQSLOBSROFGZ\")\nassert solution(\"OVGURWZLWVLUXTH\") == \"OZ\", solution(\"OVGURWZLWVLUXTH\")\nassert solution(\"AA\") == \"0\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'OZ'\nassert solution('OZ') == '0'"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"AA\") == \"0\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\n\nstdin = 'AJKEQSLOBSROFGZ'\nstdin = 'OVGURWZLWVLUXTH'\nstdin = 'OZ'\nstdin = \"AA\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\", solution(\"AJKEQSLOBSROFGZ\")\nassert solution(\"AO\") == \"0\", solution(\"AO\")\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == '0'\nassert solution('OZ') == '0'\nassert solution('AA') == '0'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"ORZ\"\nassert solution(\"OZ\") == \"0\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\nassert solution('AA') == ''"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2 1\n1 100 1\n1 100 100\n''') == '99'\nassert solution('''100 100 100\n1 1 1\n1 1 1\n''') == '0'\nassert solution('''1 1 1\n1 1 1\n1 1 1\n''') == '1'\n\n\n\n\n'''"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"1 2 1\n1 100 1\n1 100 100\n\"\"\") == \"99\"\n\nassert solution(\n\"\"\"100 100 100\n1 1 1\n1 1 1\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n1 2 1\n1 100 1\n1 100 100\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n100 100 100\n1 1 1\n1 1 1\n\"\"\") == \"99\"\n\nassert solution(\n\"\"\"\n10 20 30\n1 1 1\n1 1 1\n\"\"\") == \"99\""
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\\n\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == \"0\\n\""
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"1 100 1\") == \"0\"\nassert solution(\"1 100 100\") == \"0\""
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2 1\n1 100 1\n1 100 100\n''') == '99'\nassert solution('''\n100 100 100\n1 1 1\n1 1 1\n''') == '0'\nassert solution('''\n100 100 100\n2 5 2\n1 1 1\n''') == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 1') == '99'\nassert solution('1 100 1') == '0'\nassert solution('100 100 100') == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"1 100 1\") == \"0\"\nassert solution(\"1 100 100\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2 1\n1 100 1\n1 100 100''') == '99'\nassert solution('''100 100 100\n1 1 1\n1 1 1''') == '0''')\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 1') == '99'\nassert solution('1 100 1') == '0'\nassert solution('100 100 100') == '0'\n\n\n'''\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([100, 100, 100]) == '0'\nassert solution([100, 100, 100], 1, 1) == '99'"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1\n''') == '1'\nassert solution('''3 2\n''') == '1'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('1000000000000 1048576') == '118606527258'\nassert solution('100 10') == '95'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"1000000000000 1048576\") == \"118606527258\""
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n''') == '1'\nassert solution('''\n1 1000000\n''') == '0'\nassert solution('''\n1 1000000\n''') == '0'\nassert solution('''\n1 1000000\n''') == '0'\nassert solution('''\n1 1000000\n''') == '0'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\nassert solution() == '0'\nassert solution() == '0'\nassert solution() == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"1000000000000 1048576\") == \"118606527258\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('+-') == 'Yes'\nassert solution('+--+') == 'Yes'\nassert solution('--++') == 'Yes'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''+-''') == 'No'\nassert solution('''-++''') == 'Yes'\nassert solution('''+-''') == 'No'\nassert solution('''+''') == 'Yes'\nassert solution('''-''') == 'No'"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"-++-\") == 'No'\nassert solution(\"+-\") == 'No'\nassert solution(\"++\") == 'Yes'\nassert solution(\"+\") == 'Yes'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"++\") == \"Yes\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"++-\") == \"Yes\"\nassert solution(\"+-+\") == \"Yes\"\nassert solution(\"+--+\") == \"Yes\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"+-+-\") == \"Yes\"\nassert solution(\"+--+\") == \"Yes\"\nassert solution(\"+--++-\") == \"No\""
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"+\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('+-') == 'Yes'\nassert solution('++') == 'Yes'\nassert solution('+--') == 'Yes'\nassert solution('-++') == 'No'\nassert solution('--+') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"Yes\"\n\n\"\"\"\n\nn = int(input())\n\nplus = ['+']*n\nminus = ['-']*n\n\nplus_crosses = 0\nminus_crosses = 0\n\nfor i in range(n):\n    char = stdin.pop(0)\n    if char == plus[i]:\n        plus_crosses += 1\n    elif char == minus[i]:\n        minus_crosses += 1\n    else:\n        return \"No\""
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"++\") == \"Yes\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"++-\") == \"No\"\nassert solution(\"-+\") == \"No\"\nassert solution(\"+--\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"+-\") == \"Yes\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"++\") == \"No\""
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(example_input_1) == example_output_1\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '12.566370614359172464'\nassert solution('''3 0 0\n0 1\n-1 2\n1 2''') == '21.991148575128551812'\n\n'''\n    if len(stdin.split('\\n')) == 3:\n        # s = [[float(i) for i in stdin.split('\\n')][0]] + [[float(i) for i in stdin.split('\\n')][1]]\n        s = [[float(i) for i in stdin.split('\\n')][0]]\n        # print(s)\n        s.append(s[0])\n        s = s[1:]\n        # print(s)\n        # print(s)\n        # print(s[0])\n        # print(s[1])\n        # print(s[2])\n        # print(s[3])\n        # print(s[4])\n        # print(s[5])\n        # print(s[6])\n        # print(s[7])\n        # print(s[8])\n        # print(s[9])\n        # print(s[10])\n        # print(s[11])\n        # print(s[12])\n        # print(s[13])\n        # print(s[14])\n        # print(s[15])\n        # print(s[16])\n        # print(s[17])\n        # print(s[18])\n        # print(s[19])\n        # print(s[20])\n        # print(s[21])\n        # print(s[22])\n        # print(s[23])\n        # print(s[24])\n        # print(s[25])\n        # print(s[26])\n        # print(s[27])\n        # print(s[28])\n        # print(s[29])\n        # print(s[30])\n        # print(s[31])\n        # print(s[32])\n        # print(s[33])\n        # print(s[34])\n        # print(s[35])\n        # print(s[36])\n        # print(s[37])\n        # print(s[38])\n        # print(s[39])\n        # print(s[40])\n        # print(s[41])\n        # print(s[42])\n        # print(s[43])\n        # print(s[44])\n        # print(s[45])\n        # print(s[46])\n        # print(s[47])\n        # print(s[48])\n        # print(s[49])\n        # print(s[50])\n        # print(s[51])\n        # print(s[52])\n        # print(s[53])\n        # print(s[54])\n        # print(s[55])\n        # print(s[56])\n        # print(s[57])\n        # print(s[58])\n        # print(s[59])\n        # print(s[60])\n        # print(s[61])\n        # print(s[62])\n        # print(s[63])\n        # print(s[64])\n        # print(s[65])\n        # print(s[66])\n        # print(s[67])\n        # print(s[68])\n        # print(s[69])\n        # print(s[70])\n        # print(s[71])\n        # print(s[72])\n        # print(s[73])\n        # print(s[74])\n        # print(s[75])\n        # print(s[76])\n        # print(s[77])\n        # print(s[78])\n        # print(s[79])\n        # print(s[80])\n        # print(s[81])\n        # print(s[82])\n        # print(s[83])\n        # print(s[84])\n        # print(s[85])\n        # print(s[86])\n        # print(s[87])\n        # print(s[88])\n        # print(s[89])\n        # print(s[90])\n        # print(s[91])\n        # print(s[92])\n        # print(s[93])\n        # print(s[94])\n        # print(s[95])\n        # print(s[96])\n        # print(s[97])\n        # print(s[98])\n        # print(s[99])\n        # print(s[100])\n        # print(s[101])\n        # print(s[102])\n        # print(s[103])\n        # print(s[104])\n        # print(s[105])\n        # print(s[106])\n        # print(s[107])\n        # print(s[108])\n        # print(s[109])\n        # print(s[110])\n        # print(s[111])\n        # print(s[112])\n        # print(s[113])\n        # print(s[114])\n        # print(s[115])\n        # print(s[116])\n        # print(s[117])\n        # print(s[118])\n        # print(s[119])\n        # print(s[120])\n        # print(s[121])\n        # print(s[122])\n        # print(s[123])\n        # print(s[124])\n        # print(s[125])\n        # print(s[126])\n        # print(s[127])\n        # print(s[128])\n        # print(s[129])\n        # print(s[130])\n        # print(s[131])\n        # print(s[132])\n        # print(s[133])\n        # print(s[134])\n        # print(s[135])\n        # print(s[136])\n        # print(s[137])\n        # print(s[138])\n        # print(s[139])\n        # print(s[140])\n        # print(s[141])\n        # print(s[142])\n        # print(s[143])\n        # print(s[144])"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 0 0\\n0 1\\n-1 2\\n1 2\\n') == '12.566370614359172464'\nassert solution('4 1 -1\\n0 0\\n1 2\\n2 0\\n1 1\\n') == '21.991148575128551812'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 0 0') == '12.566370614359172464'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 0 0') == '12.566370614359172464'\n\nassert solution('4 1 -1') == '21.991148575128551812'\n\nassert solution('5 5 -5') == '15.0'\n\nassert solution('6 2 -4 -1') == '10.0'\n\nassert solution('7 0 0') == '24.0'"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''3 0 0\n0 1\n-1 2\n1 2\n\n''') == '12.566370614359172464'\n\nassert solution(\n'''4 1 -1\n0 0\n1 2\n2 0\n1 1\n\n''') == '21.991148575128551812'\n\nassert solution(\n'''4 1 1\n0 0\n1 2\n2 0\n1 1\n\n''') == '19.88888888888888888'"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\\n\") == \"12.566370614359172464\"\n\n'''\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 0 0\\n0 1') == '12.566370614359172464'\n\n\"\"\""
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n\n''') == '12.566370614359172464'\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\n''') == '21.991148575128551812'\nassert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n\n''') == '12.566370614359172464'\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\n''') == '21.991148575128551812'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '12.566370614359172464'\n\nassert solution(input_) == '21.991148575128551812'\n\n\n>>> \n\n\n>>> \n\n\n>>> \n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"1 2\"\nassert solution(\"4\") == \"1 1\"\nassert solution(\"5\") == \"1 1\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2 2\"\nassert solution(\"8\") == \"3 3\"\nassert solution(\"6\") == \"2 2\"\nassert solution(\"10\") == \"3 3\"\nassert solution(\"12\") == \"4 4\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"3 3\"\nassert solution(\"4\") == \"1 1\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'\nprint('Done!')"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"42\") == \"9 42\"\nassert solution(\"6\") == \"6 6\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8') == '3 4'\nassert solution('6') == '6 6'\nprint(solution(input()))\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"48\") == \"9 42\"\nassert solution(\"6\") == \"6 6\"\n\n## Input\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"No\", \"Should return 'No' if Petya doesn't have any brackets to fix\"\nassert solution(\")(\") == \"No\", \"Should return 'No' if Petya doesn't have any brackets to fix\"\nassert solution(\"()(\") == \"Yes\", \"Should return 'Yes' if Petya can make his sequence correct moving at most one bracket\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n()\n''') == 'Yes'\nassert solution('''\n2\n)\n''') == 'No'\nassert solution('''\n3\n(()\n''') == 'No'\nassert solution('''\n10\n)))\n''') == 'No'\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"10\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n((\n\n''') == 'Yes'\nassert solution('''10\n)))))(((((\n\n''') == 'No')\n\nassert solution('''2\n))\n\n''') == 'Yes'\n\nassert solution('''2\n((()\n\n''') == 'No'\n\nassert solution('''3\n(()\n\n''') == 'Yes'"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'Yes'\n\nassert solution() == 'No'"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'Yes'\n\n----------------------------------------------------------------------\nWrite a function which returns the maximum value that a non-empty array of integers may contain.\n\nInput: An array of integers.\n\nOutput: An integer.\n\nExample:\n\nGiven an array of integers arr=[4, 1, 2, 2, 3], the function should return 5, because it is the maximum value among the elements of arr.\n\nYou can assume that all integers in the array are non-negative.\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n))\n''') == 'Yes'\nassert solution('''3\n(()\n''') == 'No'\nassert solution('''10\n)))))(((((\n''') == 'No'\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"Yes\"\n\n\n\n\n    # string = input().split(\" \")\n    # for i in range(len(string)):\n    #     if i == 0:\n    #         if string[i]!= \")\":\n    #             return \"No\"\n    #     else:\n    #         if string[i] == \"(\":\n    #             if string[i-1] == \")\":\n    #                 return \"No\"\n    #         if string[i] == \")\":\n    #             if string[i-1] == \"(\":\n    #                 return \"No\"\n    # return \"Yes\""
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"5\") == \"No\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"10\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"1\") == \"No\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 50\\n50 50 100\") == \"1\"\nassert solution(\"3 100\\n50 50 100\") == \"5\"\nassert solution(\"2 50\\n50 50\") == \"-1\"\nassert solution(\"3 50\\n50 50 100\") == \"2\"\nassert solution(\"2 50\\n50 50\") == \"2\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 50\\n50 50\\n\") == \"1\"\nassert solution(\"2 50\\n50 50\\n\") == \"2\"\nassert solution(\"3 100\\n50 50 100\\n\") == \"5\"\nassert solution(\"1 500\\n0 0 0\\n\") == \"0\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 50\n50 50 100''') == '1'\nassert solution('''2 50\n50 50''') == '-1'\nassert solution('''3 50\n50 50 100''') == '5'\nassert solution('''4 50\n50 50 100''') == '2'\nassert solution('''5 50\n50 50 100''') == '-1'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 50') == '1'\nassert solution('2 50') == '5'\nassert solution('3 100') == '5'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    1 50\n    50 50\n    ''') == '1'\nassert solution('''\n    2 50\n    50 50\n    ''') == '5'\nassert solution('''\n    3 100\n    50 50 100\n    ''') == '2'\nassert solution('''\n    4 100\n    50 50 100\n    ''') == '2'\nassert solution('''\n    5 100\n    50 50 100\n    ''') == '4'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 50\\n50 50 100') == '1'\nassert solution('3 100\\n50 50 100') == '5'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 50\n50 50''') == '1'\nassert solution('''3 100\n50 50 100''') == '5'"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([1, 50]) == 1\nassert solution([3, 100]) == 5\nassert solution([2, 50]) == -1\nassert solution([2, 50, 100]) == 2\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 50\\n50 50\\n\") == \"1\"\nassert solution(\"2 50\\n50 50\\n\") == \"2\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 50\n50 50 100\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 50\n50 50\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3 100\n50 50 100\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2 6 8\n\n1\n5 7 2 9\n\n2\n2 3 4 9 12\n''') == \"4\"\nassert solution('''\n1\n3 6 8\n\n1\n5 7 2 9\n\n1\n2 3 4 9 12\n''') == \"4\"\nassert solution('''\n1\n4 6 8\n\n1\n5 7 2 9\n\n2\n2 3 4 9 12\n''') == \"2\"\nassert solution('''\n5\n2 3 4 9 12\n\n1\n2 3 4 9 12\n''') == \"1\"\nassert solution('''\n1\n2 3 4 9 12\n\n1\n2 3 4 9 12\n''') == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 6 8') == '2'\nassert solution('5\\n2 3 4 9 12') == '4'\nassert solution('4\\n5 7 2 9') == '1'\nassert solution('4\\n5 7 2 9') == '1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\nassert solution('4') == '1'\nassert solution('6') == '3'\nassert solution('7') == '6'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\""
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n6 8\\n\") == \"2\"\nassert solution(\"3\\n2 6 8\\n\") == \"2\"\nassert solution(\"4\\n5 7 2 9\\n\") == \"4\"\nassert solution(\"5\\n2 3 4 9 12\\n\") == \"4\""
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 6 8\\n\") == \"2\"\nassert solution(\"4\\n5 7 2 9\\n\") == \"4\"\nassert solution(\"5\\n2 3 4 9 12\\n\") == \"1\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 4 9 12') == '2'\nassert solution('5\\n2 3 4 9 12') == '4'\nassert solution('4\\n5 7 2 9') == '1'\nassert solution('5\\n2 3 4 9 12') == '1'\nassert solution('5\\n2 3 4 9 12') == '1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"4\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"10\") == \"5\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 6\nassert solution(\"2\") == -1\nassert solution(\"5\") == 5"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"5\") == \"5\"\nassert solution(\"2\") == \"-1\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n17 18\n15 24\n12 15\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2\n10 16\n7 17\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 6\nassert solution(\"5\") == 5\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    5\n    90 108\n    45 105\n    75 40\n    ''') == '5'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '5'\nassert solution('2') == '-1'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\nassert solution('''\n2\n10 16\n7 17\n''') == '-1'\nassert solution('''\n1\n10 16\n7 17\n''') == '-1'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n17 18\n15 24\n12 15\n''') == '6'\nassert solution('''2\n10 16\n7 17\n''') == '-1'\nassert solution('''5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('bab\\nbb') == '0'\nassert solution('bbbb\\na') == '3'"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '1 3'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"bab\") == \"2 0\\n1 0\\n1 3\"\nassert solution(\"bbbb\") == \"0\"\n\n'''\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"bab\\nbb\") == \"0\"\nassert solution(\"bbbb\\naa\") == \"1 0\"\nassert solution(\"bbbb\\naa\\n\") == \"1 0\"\nassert solution(\"bab\\nbb\\n\") == \"1 0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"bab\") == \"1 0\"\nassert solution(\"bbbb\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"bab\") == \"1 0\"\nassert solution(\"bbbb\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '0'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"bbb\") == \"0\"\nassert solution(\"aab\") == \"1 0\"\nassert solution(\"bbbb\") == \"1 3\"\nassert solution(\"bbbbb\") == \"1 3\"\nassert solution(\"bbbbbb\") == \"1 4\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"bab\\nbb\") == \"0\"\nassert solution(\"bbbb\\na\") == \"1 0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == str(2)\nassert solution(input()) == str(0)\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'POSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == 'POSSIBLE'\nassert solution('3 1') == 'IMPOSSIBLE'"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == 'POSSIBLE'\nassert solution('1 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"POSSIBLE\"\nassert solution(\"4\") == \"POSSIBLE\"\nassert solution(\"5\") == \"IMPOSSIBLE\"\nassert solution(\"0\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'POSSIBLE'\nassert solution('3') == 'IMPOSSIBLE'\nassert solution('4') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1\\n4 3 2') == 'POSSIBLE'\nassert solution('3\\n1 2\\n3 4 5\\n6 3') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n1 1\n4 3 2\n\"\"\") == \"POSSIBLE\"\nassert solution(\"\"\"3\n3 3\n6 4 5\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"3\n1 1\n4 3 2\n\"\"\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'POSSIBLE'\nassert solution('2') == 'IMPOSSIBLE'\n\"\"\"\n\nimport math\nfrom itertools import combinations"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 1\n4 3 2\n''') == 'POSSIBLE'\nassert solution('''\n5\n1 2\n2 1\n3 2\n2 2\n''') == 'IMPOSSIBLE'\nassert solution('''\n3\n1 1\n2 1\n2 2\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n4 3 2\\n') == 'POSSIBLE'\nassert solution('6\\n1 1 2 1 3 1\\n4 3 2 4 4\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 5') == '2'\nassert solution('10 9') == '4'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1000000007\") == \"2\"\nassert solution(\"50 1000000000\") == \"1\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n2\n''') == \"1\"\nassert solution('''1\n100\n''') == \"3\"\nassert solution('''2\n2\n''') == \"3\"\nassert solution('''2\n1\n''') == \"2\"\nassert solution('''1\n10\n''') == \"4\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"4\"\nassert solution(\"100\") == \"9\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1000000007') == '2'\nassert solution('5 7') == '2'\nassert solution('10 20000000007') == '4'\nassert solution('7 9') == '0'\n\nimport sys"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1000000007') == '2'\nassert solution('1 1000000007') == '3'\nassert solution('3 1000000007') == '4'\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n\u041d\u0430\u0431\u043e\u0440 \u0432\u043e\u0434\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u043d\u0430 \u043f\u043b\u0430\u0432\u043a\u0438 \u0433\u043e\u0442\u043e\u0432\u044b \u0432 \u043f\u043e\u043b\u043d\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435. \u041d\u0430 \u043f\u043b\u0430\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0443\u043f\u043e\u0442\u0440. \u043d\u0435 \u0431\u043e\u043b\u0435\u0435, \u0447\u0435\u043c \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u043e\u0434\u044b \u0432 \u043d\u0430\u0431\u043e\u0440\u0435.\n\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438\u043c\u0435\u043d \u0432\u043e\u0434\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0438 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430\u043f\u044f\u0442\u044b\u0435. \u0414\u043b\u044f \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f:\n - \u041d\u0430 \u043f\u043b\u0430\u0432\u043a\u0438 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0434\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u0431\u043e\u043b\u0435\u0435, \u0447\u0435\u043c \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u043e\u0434\u044b \u0432 \u043d\u0430\u0431\u043e\u0440\u0435.\n - \u0412 \u043d\u0430\u0431\u043e\u0440\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u0435\u0435, \u0447\u0435\u043c \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0434\u044b \u0432 \u043d\u0430\u0431\u043e\u0440\u0435.\n - \u0412 \u043d\u0430\u0431\u043e\u0440\u0435 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0442\u0440\u0435\u0445 \u0432\u043e\u0434\u044b \u0432\u043e\u0434\u044b \u0432 \u043d\u0430\u0431\u043e\u0440\u0435.\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u0430 N, \u0438 M (\u043d\u0435 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0442\u0430\u043a \u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u043c \u044d\u0442\u0430\u043f\u0435) \u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u043c\u0435\u043d \u0432\u043e\u0434\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u044f\u0442\u044b\u043c\u0438.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 (\"\u043c\u043e\u043b\u043e\u043a\u043e\", \"\u0431\u0430\u043a\u043b\u0430\u0436\u0430\u043d\", \"\u0448\u043e\u043a\u043e\u043b\u0430\u0434\"), \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0434\u044b \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u0435\u0435, \u0447\u0435\u043c \u043e\u0434\u043d\u0438\u043c, \u0447\u0435\u043c \u0438 \u0431\u043e\u043b\u0435\u0435, \u0447\u0435\u043c \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0434\u044b \u0432 \u043d\u0430\u0431\u043e\u0440\u0435.\n\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438\u043c\u0435\u043d \u0432\u043e\u0434\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0438 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0437\u0430\u043f\u044f\u0442\u044b\u0435. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u0430\u0441\u0441\u0438\u0432 (\"\u043c\u043e\u043b\u043e\u043a\u043e\", \"\u0431\u0430\u043a\u043b\u0430\u0436\u0430\u043d\", \"\u0448\u043e\u043a\u043e\u043b\u0430\u0434\"), \u0438\u043c\u044f \u0432\u043e\u0434\u044b \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \"\u043c\u043e\u043b\u043e\u043a\u043e\", \u0438\u043c\u044f \u0432\u043e\u0434\u044b \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \"\u0431\u0430\u043a\u043b\u0430\u0436\u0430\u043d\", \u0438\u043c\u044f \u0432\u043e\u0434\u044b \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \"\u0448\u043e\u043a\u043e\u043b\u0430\u0434\" \u0438 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \"2\". \u041f\u043e\u043a\u0430\u0437\u0430\u0432 \u0432\u043e\u0434\u044b \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0441\u0440\u0430\u0432\u043d\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d \u0432\u043e\u0434\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043d\u0435\u0441\u0442\u0438 \u043d\u0430 \u043f\u043b\u0430\u0432\u043a\u0438.\n\n\u0414\u043b\u044f \u043f\u043b\u0430\u0432\u043a\u0438 \u0441 \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0434\u044b \u0432 \u043d\u0430\u0431\u043e\u0440\u0435, \u043d\u0430\u0431\u043e\u0440 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u044b\u043c.\n\n\u0414\u043b\u044f \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0432 \u043f\u043b\u0430\u0432\u043a\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u0435\u0435, \u0447\u0435\u043c \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435\u043c \u043a\u043e\u043b\u0438\ufffd"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1\\n2\\n') == '1'\nassert solution('7 4\\n1\\n2\\n4\\n3\\n5\\n4\\n3\\n') == '3'\nassert solution('3 1\\n2\\n') == '0'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1000000007') == '4'\nassert solution('3 1000000007') == '2'\nassert solution('4 1000000007') == '3'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10') == '3'\nassert solution('2 1000000007') == '2'\nassert solution('3 1000000007') == '0'\nassert solution('4 1000000007') == '1'\nassert solution('5 1000000007') == '0'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3 3\") == \"7\"\nassert solution(\"4 1 5 1\") == \"999999228\"\nprint(solution(input()))\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 1 5 1\n-\n''') == '999999228'\nprint(solution('''\n2 2 3 3\n+\n'''))\nassert solution('''\n4 1 5 1\n-\n''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2 3 3''') == '7'\nassert solution('''4 1 5 1''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2 3 3\\n+-\") == \"7\"\nassert solution(\"4 1 5 1\\n-\") == \"999999228\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2 3 3''') == '7'\nassert solution('''4 1 5 1''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2 3 3\n+-+''') == '7'\nassert solution('''4 1 5 1\n-''') == '999999228'\nassert solution('''4 1 5 1\n+''') == '0'\nprint('all tests passed')\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2 3 3\n+-+\n''') == '7'\n\nassert solution('''\n4 1 5 1\n-\n''') == '999999228'\n\nassert solution('''\n1000000000 1000000000 2 3 4 5 6\n+\n''') == '140000000000'"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3 3\") == \"7\"\nassert solution(\"4 1 5 1\") == \"999999228\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 2 3 3\"\n    ) == \"7\"\nassert solution(\n    \"4 1 5 1\"\n    ) == \"999999228\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 2') == 4\nassert solution('1 2 3 1') == 2\nassert solution('10 2 1 7') == 0\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 2') == 4\nassert solution('1 2 3 1') == 2\nassert solution('10 2 1 7') == 0\n\n'''\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1 1 2\n''') == '4'\nassert solution('''\n1 2 3 1\n''') == '2'\nassert solution('''\n10 2 1 7\n''') == '0'"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1 1 2''') == '4'\nassert solution('''1 2 3 1''') == '2'\nassert solution('''10 2 1 7''') == '0'"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 1 2\n''') == '4'\nassert solution('''\n1 2 3 1\n''') == '2'\nassert solution('''\n10 2 1 7\n''') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1 1 2\n''') == '4'\nassert solution('''\n1 2 3 1\n''') == '2'\nassert solution('''\n10 2 1 7\n''') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\nassert solution(\"1 2 3 1 4\") == \"1\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"6\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"4 1\") == \"6\""
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '6'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3 2\"\"\") == \"6\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '6'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '6'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '6'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"6\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"10 2\") == \"3\"\nassert solution(\"10 2\") == \"3\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\""
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\""
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('1 2') == '1'\nassert solution('3 5') == '0'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n\") == \"2\"\nassert solution(\"2\\n1\\n\") == \"0\"\nassert solution(\"3\\n1 2\\n\") == \"3\"\nassert solution(\"2\\n3 4\\n\") == \"6\"\nassert solution(\"3\\n1 4\\n\") == \"0\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1 2') == '2'\nassert solution('2\\n1 2') == '1'\n\"\"\"\nfrom functools import reduce\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\""
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"11\") == \"18\"\n\n\"\"\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n4\n0 2 0\n3 0 1\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n0 2 0\\n3 0 1\\n') == '2'\n\nprint(solution('3\\n0 2 0\\n1 0 3\\n'))\nprint(solution('11\\n0 0 0 5 0 0 0 4 0 0 11\\n9 2 6 0 8 1 7 0 3 0 10\\n'))\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n0 2 0\n3 0 1\n''') == '2'\nassert solution('''11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == '2'\n\nassert solution('''\n4\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '4'\n\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '3'\n) == '2'\nassert solution(\n    '11'\n) == '18'\n\nsolution(\n    '5'\n)\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4'\n\n\"\"\"\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('11') == '18'\n'''\n\nfrom bisect import bisect_left"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n0 2 0\n3 0 1\n''') == \"2\"\nassert solution('''3\n0 2 0\n1 0 3\n''') == \"4\"\nassert solution('''11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == \"18\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"7\"\nassert solution(\"10\") == \"10\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\n\nn = int(stdin)\na = list(map(int, stdin.split()))\nb = list(map(int, stdin.split()))"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"a*b\") == \"YES\"\nassert solution(\"*b*\") == \"YES\"\nassert solution(\"a*b*\") == \"YES\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 5') == 'YES'\nassert solution('1 1') == 'NO'\nassert solution('9 6') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 10\\ncode*s\\ncodeforces') == 'YES'\nassert solution('6 5\\nvk*cup\\nvkcup') == 'YES'\nassert solution('1 1\\nv\\nk') == 'NO'"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 5') == 'YES'\nassert solution('1 1') == 'NO'\nassert solution('9 6') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"YES\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 10\ncodeforces\ncodeforces\n\ngfgf*gfgf\ngfgfgf\n\n''') == 'YES'\nassert solution('''\n6 5\nvkcup\nvkcup\n\n''') == 'YES'\nassert solution('''\n1 1\nv\nk\n\n''') == 'NO'\nassert solution('''\n9 6\ngfgf*gfgf\ngfgfgf\n\n''') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\nprint(solution(input()))\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"ab\") == \"NO\"\nassert solution(\"abb\") == \"NO\"\nassert solution(\"abb*\") == \"YES\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 7\") == \"YES\", \"Test Failed\"\nassert solution(\"6 5\") == \"YES\", \"Test Failed\"\nassert solution(\"1 1\") == \"NO\", \"Test Failed\"\nassert solution(\"9 6\") == \"NO\", \"Test Failed\"\n\n\"\"\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '0.800000000000'\nassert solution('2') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"0.260000000000\"\nassert solution(\"4\") == \"0.800000000000\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n0.1 0.2\n\n''') == '0.260000000000'\nassert solution('''2\n0.2 0.8\n\n''') == '0.260000000000'"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0.260000000000\"\nassert solution(\"2\") == \"0.260000000000\""
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0.800000000000'\nassert solution('2') == '0.260000000000'"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n0.1 0.2 0.3 0.8\n''') == '0.800000000000'\nassert solution('''2\n0.1 0.2\n''') == '0.260000000000'''\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8\\n') == '0.800000000000'\nassert solution('2\\n0.1 0.2\\n') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0.260000000000\"\nassert solution(\"4\") == \"0.800000000000\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.800000000000'\nassert solution('2\\n0.1 0.2') == '0.260000000000'\nassert solution('3\\n0.5 0.2 0.8') == '0.499999999999'\nassert solution('9\\n0.5 0.2 0.8 0.7 0.1 0.3 0.4 0.6 0.5 0.7 0.8') == '0.50000000000'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'\nassert solution('2 4 1 2 4') == '6.1428571429'\n\n\n'''\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 10 1 2 5\\n\") == \"5.0\"\nassert solution(\"3 6 1 2 1\\n\") == \"4.7142857143\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\""
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([\"5 10 1 2 5\",\"\",\"3 6 1 2 1\",\"\",\"4.7142857143\",\"\",\"5.0000000000\"]) == \"5.0000000000\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 10 1 2 5\\n\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\\n\") == \"4.7142857143\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"5 10 1 2 5\") == \"4.7142857143\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 10 1 2 5\\n') == '5.0000000000'\nassert solution('3 6 1 2 1\\n') == '4.7142857143'\nassert solution('0 0 0 0 0\\n') == '0.0000000000'\nassert solution('0 0 0 0 0\\n') == '0.0000000000'\nassert solution('3 8 1 4 9\\n') == '-1.0000000000'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10 1 2 5') == \"5\"\nassert solution('3 6 1 2 1') == \"4.7142857143\"\nassert solution('10 10 1 2 1') == \"11\"\n\n\"\"\""
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 10 1 2 5\\n\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\\n\") == \"4.7142857143\""
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''\n3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"0.250\"\nassert solution(\"3\") == \"0.279\""
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250', 'First example test'\nassert solution('''\n3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279', 'Second example test'\nassert solution('''\n4\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.225', 'Third example test'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0.25'\nassert solution('3') == '0.279'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\") == \"0.250\"\nassert solution(\"3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\") == \"0.279\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1.5 1.75 0.5 2.25 4.75 1.25\\n') == '0.25'\nassert solution('5\\n1.0000 1.5000 1.9000 1.7000 2.0000\\n') == '0.07'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n0.000 0.500 0.750 1.000 2.000 3.000\n\"\"\") == \"0.250\"\n\nassert solution(\"\"\"\n3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n\"\"\") == \"0.279\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''\n3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"0.250\"\nassert solution(\"4\") == \"0.279\"\nassert solution(\"5\") == \"0.269\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n0.000 0.500 0.750 1.000 2.000 3.000\n\"\"\") == \"0.250\"\nassert solution(\"\"\"\n3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n\"\"\") == \"0.279\"\nassert solution(\"\"\"\n5\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896 9354.000\n\"\"\") == \"0.269\"\nassert solution(\"\"\"\n5\n7835.000 7079.000 6183.000 6201.000 5446.000 6461.000\n\"\"\") == \"0.270\"\n\nassert solution(\"\"\"\n3\n11.0 10.5 12.5 14.0 17.0 18.5 20.5 22.0 24.5 25.5 26.5 27.5 28.5\n\"\"\") == \"1.000000000000\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5\") == \"18\"\nassert solution(\"0 1\") == \"8\"\nassert solution(\"0 0\") == \"4\"\nassert solution(\"100 100\") == \"103\""
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 1') == '8'\nassert solution('1 5') == '18'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 5\") == \"18\"\nassert solution(\"0 1\") == \"8\""
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'\nassert solution('-1 1') == '0'\n\n\n\"\"\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '18'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5\\n5 2\\n') == '18'\nassert solution('0 1\\n0 0\\n') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 5\") == \"18\"\nassert solution(\"0 1\") == \"8\"\nassert solution(\"0 0\") == \"0\""
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1 5\n5 2\n\"\"\") == \"18\"\n\nassert solution(\n\"\"\"\n0 0\n0 0\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n\") == \"4\\n\", \"Simple\"\nassert solution(\"2\\n\") == \"10\\n\", \"Consecutive\"\nassert solution(\"10\\n\") == \"244\\n\", \"Longest\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"10\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'\nassert solution('10') == '244'\nassert solution('3') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('10') == '244'\nassert solution('100') == '11'"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()\n\"\"\""
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"10\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 4\nassert solution(\"2\") == 10\nassert solution(\"3\") == 16\nassert solution(\"4\") == 24\nassert solution(\"5\") == 35\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 4\nassert solution('2') == 10\nassert solution('10') == 244\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 4 1 4 9\") == \"2\"\nassert solution(\"5\\n1 4 1 4 9\") == \"2\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\\n\") == \"0\"\nassert solution(\"4 1 1 4 9\\n\") == \"2\"\nassert solution(\"5 1 4 1 4 9\\n\") == \"2\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1') == '0'\nassert solution('2 2 3 3') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 4 1 4 9\") == \"2\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 3\n''') == '0'\n\nassert solution('''4\n1 1 2 2\n''') == '2'\n\nassert solution('''5\n1 4 1 4 9\n''') == '2'\n\nassert solution('''5\n1 4 1 4 5\n''') == '0'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"0\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '0'\nassert solution('''\n4\n1 4 1 4 9\n''') == '2'\nassert solution('''\n5\n1 4 1 4 9\n''') == '2'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n''') == '2'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 2 2\") == \"2\"\nassert solution(\"5\\n1 4 1 4 9\") == \"2\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\""
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n\"\"\""
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"YES\" or solution(input) == \"NO\""
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"aabc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n\n\n\"\"\""
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\nassert solution('4\\n4 1 3 2') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\nassert solution([4, 1, 2, 5, 3]) == \"2\""
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == \"2\"\nassert solution(\"4\\n4 1 3 2\") == \"2\""
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n4 1 2 5 3\n''') == '2'\nassert solution('''4\n4 1 3 2\n''') == '2'\nassert solution('''10\n4 9 8 7 6 5 2 3 1\n''') == '4'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\nassert solution([4,1,2,5,3]) == \"2\"\n\"\"\""
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '2'\n\n\n\"\"\""
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\nassert solution('4\\n4 1 3 2') == '2'\n\n\"\"\"\n\nimport sys\nimport re\nimport math"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6 1\n''') == '3.500000000000'\nassert solution('''2 2\n''') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1') == '3.500000000000'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1\n''') == '3.500000000000'\nassert solution('''\n3 1\n''') == '4.958333333333'\nassert solution('''\n6 3\n''') == '4.958333333333'\nassert solution('''\n2 2\n''') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 1\") == \"3.500000000000\"\nassert solution(\"6 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.750000000000\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"3.500000000000\"\nassert solution(\"6 1\") == \"4.958333333333\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '1.750000000000'\nassert solution('6 1') == '3.500000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 1\") == \"3.500000000000\"\nassert solution(\"6 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.750000000000\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 1\") == \"3.5\"\nassert solution(\"6 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.75\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 1') == '3.500000000000'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.750000000000'\nassert solution('1000000000') == '999.999999999994'\nassert solution('9999999999') == '9999999999.9999999999'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"1.750000000000\"\nassert solution(\"6 3\") == \"4.958333333333\""
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(INPUT) == \"3\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>') == '3\\n5\\n3'\n\nassert solution('4\\n5\\n<->\\n4\\n>>>>>\\n3\\n<--\\n2\\n<>') == '4\\n5\\n0'\n\nassert solution('4\\n5\\n<->\\n4\\n<->\\n3\\n<->\\n2\\n<->\\n1\\n<>') == '4\\n5\\n0'\n\nassert solution('4\\n4\\n-><->\\n3\\n<->\\n2\\n<->\\n1\\n<->\\n0\\n<>') == '3\\n4\\n0'\n\nassert solution('4\\n4\\n-><>\\n3\\n<->\\n2\\n<->\\n1\\n<->\\n0\\n<>') == '4\\n4\\n0'"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"5\"\nassert solution(\"<->\") == \"3\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>\") == \"3\"\nassert solution(\"8\\n8\\n-><-><-><-><-><-><-><-><-><-><-\\n7\\n<>-><-><-><-><-><-><-><-><-><-><-><-\\n6\\n<>-><-><-><-><-><-><-><-><-><-><-><-\\n5\\n<>-><-><-><-><-><-><-><-><-><-><-><-\\n4\\n<>-><-><-><-><-><-><-><-><-><-><-><-\\n3\\n<>-><-><-><-><-><-><-><-><-><-><-><-\") == \"7\"\nassert solution(\"12\\n12\\n
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>\n3\n<--\n2\n<>\n''') == '3'\nassert solution('''\n4\n-><-\n5\n>>>>\n3\n<--\n2\n<>\n''') == '5'\nassert solution('''\n4\n-><-\n5\n<-<-\n3\n<>\n2\n<>\n''') == '4'\nassert solution('''\n4\n<-><->\n5\n<-><->\n3\n<-><->\n2\n<-><->\n''') == '0'\nassert solution('''\n3\n<-><->\n5\n<-><->\n3\n<-><->\n2\n<-><->\n''') == '1'"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == '3'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>\") == \"3\\n5\\n3\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n\n''') == \"5\"\nassert solution('''\n3\n<->\n5\n>->\n2\n<>\n\n''') == \"2\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '5'\nassert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '3'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '0'\nassert solution('3\\n') == '0'\nassert solution('4\\n') == '0'\nassert solution('5\\n') == '16'\nassert solution('10\\n') == '0'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"202\"\nassert solution(\n\"\"\"4\n1 100\n100 1\n1 100\n100 1\"\"\"\n) == \"101 101 101 101\"\nassert solution(\n\"\"\"4\n1 100\n100 1\n1 100\n100 1\"\"\"\n) == \"202\"\n\nassert solution(\n\"\"\"5\n3 5\n3 5\n4 10\n4 10\n4 10\"\"\"\n) == \"16\"\n\nprint(solution(\n\"\"\"3\n1 1\n1 1\n1 1\"\"\"\n)) == \"9 9 10\"\n\nprint(solution(\n\"\"\"3\n1 1\n1 1\n1 1\"\"\"\n)) == \"16\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '9 9 10'"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n5 5\n4 5\n4 5\n4 10\n\"\"\") == \"16\"\nassert solution(\"\"\"\n4\n1 1\n100 100\n1 1\n\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n3\n1 1\n100 100\n1 1\n\n\"\"\") == \"9 9 10\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"16\"\nassert solution(\"2\") == \"101 101 101 101 \nassert solution(\"3\") == \"202\"\nassert solution(\"4\") == \"101 101 101 101 101\"\nassert solution(\"5\") == \"102 102 102 102 102\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n4 5\n4 5\n4 10\n\"\"\") == \"16\"\nassert solution(\"\"\"4\n1 100\n100 1\n1 100\n100 1\n\"\"\") == \"101 101 101 101 \nassert solution(\"\"\"3\n1 1\n100 100\n1 1\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n4 5\n4 5\n4 10\n''') == '16'\nassert solution('''4\n1 100\n100 1\n1 100\n100 1\n''') == '202'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n5\n4 5\n4 5\n4 10\n''') == '16'\nassert solution('''\n4\n1 100\n100 1\n1 100\n100 1\n''') == '202'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"1\") == \"0 1\""
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 3 2 2\n''') == '1 2 3'\nassert solution('''\n3\n1 2 3\n''') == '0 2'\nassert solution('''\n5\n1 2 3 2 2\n''') == '0 1 3'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1 1 1 1') == '1 2 2\\n'\nassert solution('3\\n1 2 3') == '0 2\\n'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 2 2') == '0 2'\nassert solution('3\\n1 2 3') == '0 1 3'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([5]) == \"1 2 3 \nassert solution([3]) == \"0 2 \nassert solution([5, 3]) == \"1 2 1 1 1 1 1 1 1\"\nprint(solution([5, 3]))\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 1 1 1 1\n''') == '1 2 2'\nassert solution('''\n5\n1 2 3 2 2\n''') == '0 2'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"2 2 2 2 2\"\nassert solution(\"3\") == \"0 2\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0 1\"\nassert solution(\"3\") == \"0 1 2\"\nassert solution(\"5\") == \"0 2 1 3 2\""
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1 2 3 2 2'\nassert solution('3') == '0 2'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10010110\") == \"11100\"\nassert solution(\"100011\") == \"01\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == '110110'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('101101') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''10001\n1110''') == '110110'\nassert solution('''10110\n1101''') == '110110'\nassert solution('''1000000\n100000''') == '1100101'\nassert solution('''1000001\n1010''') == '1101101'\nassert solution('''1000001\n000001''') == '1101101'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('101101') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"11100\"\nassert solution(input()) == \"01\"\nassert solution(input()) == \"\""
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == '00'\nassert solution('100') == '11'\nassert solution('101') == '11'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10010110') == '01'\nassert solution('100011') == '1'\nassert solution('101') == '11'\nassert solution('110') == '11'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 5 2\n1 1 1 1 1\n1 1 1 1 1\n1 1 0 1 1\n1 1 1 1 1\n1 1 1 1 1\n\n''') == '1', \"First example\"\nassert solution('''\n3 4 1\n1 0 0 1\n0 1 1 0\n1 0 0 1\n\n''') == '0', \"Second example\"\nassert solution('''\n3 5 1\n1 0 0 0 1\n0 1 1 1 1\n1 0 0 0 1\n\n''') == '-1', \"Third example\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"5 5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 0 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"0\"\nassert solution(\"3 3 1\\n1 0 0 1\\n1 1 1 0\\n1 1 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\nassert solution(\"\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\""
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\n\n'''\n\nclass Cell:\n    def __init__(self, val):\n        self.val = val\n    \nclass CellSet:\n    def __init__(self):\n        self.cells = []\n        self.size = 0\n        \n    def add(self, cell: Cell):\n        self.cells.append(cell)\n        self.size += 1\n    \n    def delete(self, index):\n        del self.cells[index]\n        self.size -= 1\n    \n    def delete_all(self):\n        while len(self.cells) > 0:\n            self.delete(0)\n            \n    def size(self):\n        return self.size\n    \n    def get_val(self, i):\n        return self.cells[i].val\n    \n    def clear(self):\n        self.cells = []\n        self.size = 0\n        \n    def __str__(self):\n        return \"\".join([str(cell.val) for cell in self.cells])\n    \n    def __len__(self):\n        return self.size\n    \n    def __iter__(self):\n        self.index = 0\n        return self\n    \n    def __next__(self):\n        if self.index < len(self.cells):\n            cell = self.cells[self.index]\n            self.index += 1\n            return cell\n        else:\n            raise StopIteration\n    \n    def __eq__(self, other):\n        return self.size == other.size and self.cells == other.cells\n        \n    def __ne__(self, other):\n        return self.size!= other.size or self.cells!= other.cells\n\nclass Solver:\n    def __init__(self, n, m, k):\n        self.n = n\n        self.m = m\n        self.k = k\n        \n    def solve(self):\n        cells = CellSet()\n        for i in range(self.n):\n            for j in range(self.m):\n                cell = Cell(i)\n                cells.add(cell)\n        \n        cells = self.__fill_cells(cells)\n        \n        self.__print_cells(cells)\n        \n        cells.delete_all()\n        \n        for i in range(self.n):\n            for j in range(self.m):\n                cell = Cell(i)\n                cells.add(cell)\n                if self.__valid_cell(cells, i, j):\n                    cells.delete(0)\n                    cells.add(cell)\n        \n        if cells.size() > self.k:\n            return cells.size()\n        else:\n            return -1\n        \n    def __valid_cell(self, cells, i, j):\n        cell = cells.get_val(0)\n        if i == cell.i and j == cell.j:\n            return False\n        \n        if i < cell.i and j == cell.j:\n            if self.__is_left(i, cells) and self.__is_right(i + 1, cells):\n                return True\n            return False\n        \n        if j < cell.j and i == cell.i:\n            if self.__is_up(j, cells) and self.__is_down(j + 1, cells):\n                return True\n            return False\n        \n        if i == cell.i and j < cell.j:\n            if self.__is_up(i + 1, cells) and self.__is_down(i + 1, cells):\n                return True\n            return False\n        \n        if j == cell.j and i < cell.i:\n            if self.__is_left(j, cells) and self.__is_right(j + 1, cells):\n                return True\n            return False\n        \n        return False\n        \n    def __is_left(self, i, cells):\n        for j in range(self.m):\n            cell = cells.get_val(j)\n            if cell.i == i and cell.j == 0:\n                return False\n            if cell.i == i and cell.j!= 0:\n                break\n        return True\n        \n    def __is_right(self, i, cells):\n        for j in range(self.m - 1, -1, -1):\n            cell = cells.get_val(j)\n            if cell.i == i and cell.j == self.m - 1:\n                return False\n            if cell.i == i and cell.j!= self.m - 1:\n                break\n        return True\n        \n    def __is_up(self, j, cells):\n        for i in range(self.n):\n            cell = cells.get_val(i)\n            if cell.j == j and cell.i == 0:\n                return False\n            if cell.j == j and cell.i!= 0:\n                break\n        return True\n        \n    def __is_down(self, j, cells):\n        for i in range(self.n - 1, -1, -1):\n            cell = cells.get_val(i)\n            if cell.j == j and cell.i == self.n - 1:\n                return False\n            if cell.j == j and cell.i!= self.n - 1:\n                break\n        return True\n        \n    def __fill_cells(self, cells):\n        for i in range(self.n):\n            for j in range(self.m):\n                cell = cells.get_val(j)\n                cell.i = i\n                cell.j = j\n        \n        return cells\n    \n    def __print_cells(self, cells):\n        for i in range(self.n):\n            for j in range(self.m):\n                cell = cells.get_val(j)\n                print('%d' % cell.val, end=' ')\n            print()\n        \n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\n\"\"\"\n\nimport math\n\nn, m, k = map(int, input().split())\n\narr = [[0] * (m + 1) for _ in range(n + 1)]\ncount = 0\n\nfor i in range(1, n + 1):\n    arr[i][1:] = list(map(int, input().split()))\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if arr[i][j] == 0:\n            continue\n        if arr[i][j] == 1:\n            if arr[i][j + 1] == 1:\n                if arr[i - 1][j] == 1:\n                    if arr[i - 1][j + 1] == 1:\n                        count += 1"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5 2\n1 1 1 1 1\n1 1 1 1 1\n1 1 0 1 1\n1 1 1 1 1\n1 1 1 1 1''') == '1'\nassert solution('''3 4 1\n1 0 0 0\n0 1 1 1\n1 0 0 1\n\nOutput\n0\n\nInput\n5 5 2\n1 0 0 0 0\n0 0 1 1 1\n1 1 1 0 1\n1 1 1 0 1\n1 1 1 0 1\n\nOutput\n0''') == '-1'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\nassert solution('3 4 1') == '-1'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"1\""
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1\") == \"1\"\nassert solution(\"5 5 2\") == \"1\"\nassert solution(\"4 4 2\") == \"0\"\nassert solution(\"3 2 3\") == \"0\""
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == \"1 1 2 3 4\"\nassert solution(test_input_2) == \"1 1 2 3 4\"\n\n\n\"\"\""
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0\\n') == '2 2 3 1 2'\nassert solution('3\\n99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0\\n') == '9999 10000 9998'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"1 2 3\"\nassert solution(\"1\\n2\\n3\\n\") == \"1 2 3\"\nassert solution(\"1\\n2\\n3\\n\") == \"1 2 3\"\nassert solution(\"1\\n2\\n3\\n\") == \"1 2 3\"\nassert solution(\"1\\n2\\n3\\n\") == \"1 2 3\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2 2 3 1 2'\nassert solution('6') == '2 2 3 1 2'\n\n'''\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == '2 2 3 1 2', 'Wrong answer'\n\nassert solution('''\n10\n
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0') == '2 2 3 1 2'"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == '2 2 3 1 2'\nassert solution('''\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\n''') == '9999 10000 9998'\n\n\"\"\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2\"\n) == \"2 2\"\nassert solution(\n    \"3\"\n) == \"2 2 3\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"2 2 3 1 2\"\nassert solution(\"6\") == \"2 2 3 1 2\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9\n''') == \"22\"\nassert solution('''5\n11 1\n01 1\n00 100\n10 1\n01 1\n''') == \"103\"\nassert solution('''6\n11 19\n10 22\n00 18\n00 29\n11 29\n10 28\n''') == \"105\"\nassert solution('''3\n00 5000\n00 5000\n00 5000\n''') == \"0\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"22\"\nassert solution(\"6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == \"103\"\nassert solution(\"6\\n11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\nassert solution(\"3\\n00 5000\\n00 5000\\n00 5000\") == \"0\""
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"22\"\nassert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"105\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"0\"\nassert solution(\"6\") == \"22\"\nassert solution(\"3\") == \"105\"\nassert solution(\"10\") == \"105\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '22'\nassert solution(\"5\\n11 1\\n01 1\\n00 100\\n10 1\\n01 1\\n\") == '105'\nassert solution(\"6\\n11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\\n\") == '105'\nassert solution(\"3\\n00 5000\\n00 5000\\n00 5000\\n\") == '0'"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9\n\n''') == '22'\nassert solution('''\n5\n11 1\n01 1\n00 100\n10 1\n01 1\n\n''') == '103'\nassert solution('''\n3\n00 5000\n00 5000\n00 5000\n\n''') == '0'"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9\n''') == '22'\nassert solution('''\n3\n00 5000\n00 5000\n00 5000\n''') == '0'\nassert solution('''\n6\n11 19\n10 22\n00 18\n00 29\n11 29\n10 28\n''') == '105'\n''')\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == '22'\nassert solution(test_input_2) == '105'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '22'\nassert solution('5') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '22'\nassert solution('5') == '0'\nassert solution('3') == '0'"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\nassert solution('3 4 5') == 'NO'"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 1 2') == 'YES'\nassert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 5') == 'NO'"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\n\nassert solution(\"3 4 5\") == \"NO\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output\n\n'''\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 4 9\"\n    ) == \"YES\"\n\nassert solution(\n    \"3 4 9\"\n    ) == \"YES\"\n\nassert solution(\n    \"3 4 9\"\n    ) == \"YES\"\n\nassert solution(\n    \"3 4 9\"\n    ) == \"YES\"\n\nassert solution(\n    \"3 4 9\"\n    ) == \"YES\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == \"YES\"\n'''\nimport math\nfrom typing import List\nimport unittest"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9\") == \"YES\", \"Simple\"\nassert solution(\"3 4 10\") == \"YES\", \"Simple\"\nassert solution(\"3 4 9\") == \"NO\", \"Wrong\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 10 2\n1 2 2 3 1\n3 4 3 4''') == 'YES'\n\nassert solution('''5 10 1\n2 3 1 2\n2 1 3''') == 'NO'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == \"YES\"\nassert solution(\"4 1\") == \"NO\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 1\n2 3 4 1\n1 2 3 4\n''') == 'YES'\nassert solution('''\n4 1\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''\n4 3\n4 3 1 2\n2 1 4 3\n''') == 'YES'\nassert solution('''\n4 2\n4 3 1 2\n2 1 4 3\n''') == 'NO'"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 1\n4 3 1 2\n3 4 2 1\n\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n4 1\n4 3 1 2\n2 1 4 3\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4 3\n4 3 1 2\n3 4 2 1\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4 2\n4 3 1 2\n2 1 4 3\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4 1\n4 3 1 2\n2 1 4 3\n\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 1\n2 3 4 1\n1 2 3 4\n''') == 'NO'\nassert solution('''\n4 1\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''\n4 3\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''\n4 2\n4 3 1 2\n2 1 4 3\n''') == 'NO'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 1') == 'YES'\nassert solution('4 1') == 'NO'\n\n\"\"\""
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 1\n2 3 4 1\n1 2 3 4\n''') == 'YES', \"First\"\nassert solution('''\n4 1\n4 3 1 2\n3 4 2 1\n''') == 'YES', \"Second\"\nassert solution('''\n4 2\n4 3 1 2\n2 1 4 3\n''') == 'YES', \"Third\"\nassert solution('''\n4 1\n4 3 1 2\n2 1 4 3\n''') == 'NO', \"Fourth\"\n\n''''\n---\n\nIn the first sample Masha's permutation coincides with the permutation that was written on the board before the beginning of the game. Consequently, that violates the condition that Masha's permutation never occurred on the board before k moves were performed.\n\nIn the second sample the described situation is possible, in case if after we toss a coin, we get tails.\n\nIn the third sample the possible coin tossing sequence is: heads-tails-tails.\n\nIn the fourth sample the possible coin tossing sequence is: heads-heads.\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n2 3 4 1\") == \"YES\"\nassert solution(\"4 1\\n4 3 1 2\") == \"YES\"\nassert solution(\"4 3\\n4 3 1 2\") == \"YES\"\nassert solution(\"4 2\\n4 3 1 2\") == \"NO\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 1\n4 3 1 2\n3 4 2 1\n''') == 'NO'\nassert solution('''\n4 3\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''\n4 2\n4 3 1 2\n2 1 4 3\n''') == 'YES'\nassert solution('''\n4 1\n4 3 1 2\n2 1 4 3\n''') == 'NO'\nassert solution('''\n4 1\n4 3 1 2\n2 1 4 3\n''') == 'YES'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\""
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 1') == 'NO'\nassert solution('4 1') == 'YES'\nassert solution('4 2') == 'YES'\nassert solution('4 3') == 'YES'\nassert solution('4 2') == 'NO'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\\n1 5\\n4 4\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\""
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"1 1\"\nassert solution(\"7\") == \"2 1\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1 1\\n3 1\\n1 5\\n4 4\\n\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"1 1\\n\" + \"2 1\\n\" + \"4 1\\n\" + \"5 2\\n\" + \"6 6\"\n\nassert solution(\"10\") == \"2 1\\n\" + \"5 2\\n\" + \"6 6\\n\" + \"7 7\\n\" + \"8 8\\n\" + \"9 9\\n\" + \"10 10\\n\" + \"11 11\\n\" + \"12 12\\n\" + \"13 13\\n\" + \"14 14\\n\" + \"15 15\"\n\nassert solution(\"11\") == \"2 1\\n\" + \"5 2\\n\" + \"6 6\\n\" + \"7 7\\n\" + \"8 8\\n\" + \"9 9\\n\" + \"10 10\\n\" + \"11 11\\n\" + \"12 12\\n\" + \"13 13\\n\" + \"14 14\\n\" + \"15 15\\n\" + \"16 16\\n\" + \"17 17\\n\" + \"18 18\\n\" + \"19 19\\n\" + \"20 20\"\n\nassert solution(\"15\") == \"2 1\\n\" + \"5 2\\n\" + \"6 6\\n\" + \"7 7\\n\" + \"8 8\\n\" + \"9 9\\n\" + \"10 10\\n\" + \"11 11\\n\" + \"12 12\\n\" + \"13 13\\n\" + \"14 14\\n\" + \"15 15\\n\" + \"16 16\\n\" + \"17 17\\n\" + \"18 18\\n\" + \"19 19\\n\" + \"20 20\\n\" + \"21 21\\n\" + \"22 22\\n\" + \"23 23\\n\" + \"24 24\\n\" + \"25 25\\n\" + \"26 26\\n\" + \"27 27\\n\" + \"28 28\\n\" + \"29 29\\n\" + \"30 30\\n\" + \"31 31\\n\" + \"32 32\\n\" + \"33 33\\n\" + \"34 34\\n\" + \"35 35\\n\" + \"36 36\\n\" + \"37 37\\n\" + \"38 38\\n\" + \"39 39\\n\" + \"40 40\\n\" + \"41 41\\n\" + \"42 42\\n\" + \"43 43\\n\" + \"44 44\\n\" + \"45 45\\n\" + \"46 46\\n\" + \"47 47\\n\" + \"48 48\\n\" + \"49 49\\n\" + \"50 50\\n\" + \"51 51\\n\" + \"52 52\\n\" + \"53 53\\n\" + \"54 54\\n\" + \"55 55\\n\" + \"56 56\\n\" + \"57 57\\n\" + \"58 58\\n\" + \"59 59\\n\" + \"60 60\\n\" + \"61 61\\n\" + \"62 62\\n\" + \"63 63\\n\" + \"64 64\\n\" + \"65 65\\n\" + \"66 66\\n\" + \"67 67\\n\" + \"68 68\\n\" + \"69 69\\n\" + \"70 70\\n\" + \"71 71\\n\" + \"72 72\\n\" + \"73 73\\n\" + \"74 74\\n\" + \"75 75\\n\" + \"76 76\\n\" + \"77 77\\n\" + \"78 78\\n\" + \"79 79\\n\" + \"80 80\\n\" + \"81 81\\n\" + \"82 82\\n\" + \"83 83\\n\" + \"84 84\\n\" + \"85 85\\n\" + \"86 86\\n\" + \"87 87\\n\" + \"88 88\\n\" + \"89 89\\n\" + \"90 90\\n\" + \"91 91\\n\" + \"92 92\\n\" + \"93 93\\n\" + \"94 94\\n\" + \"95 95\\n\" + \"96 96\\n\" + \"97 97\\n\" + \"98 98\\n\" + \"99 99\\n\" + \"100 100\\n\" + \"101 101\\n\" + \"102 102\\n\" + \"103 103\\n\" + \"104 104\\n\" + \"105 105\\n\" + \"106 106\\n\" + \"107 107\\n\" + \"108 108\\n\" + \"109 109\\n\" + \"110 110\\n\" + \"111 111\\n\" + \"112 112\\n\" + \"113 113\\n\" + \"114 114\\n\" + \"115 115\\n\" + \"116 116\\n\" + \"117 117\\n\" + \"118 118\\n\" + \"119 119\\n\" + \"120 120\\n\" + \"121 121\\n\" + \"122 122\\n\" + \"123 123\\n\" + \"124 124\\n\" + \"125 125\\n\" + \"126 126\\n\" + \"127 127\\n\" + \"128 128\\n\" + \"129 129\\n\" + \"130 130\\n\" + \"131 131\\n\" + \"132 132\\n\" + \"133 133\\n\" + \"134 134\\n\" + \"135 135\\"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7') == '2 1\\n3 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6'\n\n\"\"\"\n\n\nfrom math import floor"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n''') == '1 1\\n3 1\\n1 5\\n4 4\\n'\nassert solution('''\n7\n''') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '1 1\\n3 1\\n1 5\\n4 4\\n'\nassert solution('7') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\\n1 5\\n4 4\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n''') == '1 1\\n3 1\\n1 5\\n4 4\\n'''\nassert solution('''\n7\n''') == '2 1\\n3 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'''\nassert solution('''\n6\n''') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'''\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"2 1\\n3 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\nassert solution(\"10\") == \"2 1\\n3 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n7 4\\n8 3\\n9 2\\n5 6\\n7 1\\n3 7\\n8 2\\n1 1\\n4 5\\n5 5\\n7 2\\n6 5\\n3 6\\n2 7\\n8 4\\n1 7\\n6 7\\n7 7\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n1\n\n''') == '3'\nassert solution('''\n3\n1 2 3\n\n''') == '3'"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1 2 3\n''') == '3'\nassert solution('''3\n1 2 3\n''') == '-1'\nprint(solution('''10\n1 1 1 1 1 1 1 1 1 1 1\n'''))\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1\n''') == '3'\nassert solution('''\n2\n1 2\n''') == '2'\n\n'''\n\nA naive solution would be to just generate the permutations of the sequence, and then try to figure out which is the minimum number of moves to finish the game.\n\nLet's look at the code. We start by importing the function itertools. \n\nWe then define a list comprehension that will generate all permutations. \n\nHere we define a function to count the number of ways there are to choose from the integers 1 through n, for any integer n. This takes care of including the empty string.\n\nWe define a generator function that will generate the permutations of the integers 1 through n.\n\nWe then define a function which takes the length of the sequence and the permutations as arguments. \n\nThe loop will then generate the permutations, then at each iteration of the loop we will choose the next number, \n\nwe will check if that number is greater than 0 and greater than the current number of moves in the game, if so, we will increment the current number of moves. \n\nFinally we check if the current number of moves is greater than the total number of moves, if so, we will print the answer and exit. \n\n'''\n\nfrom itertools import permutations"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\") == \"3\"\nassert solution(\"3\\n1 2 3\") == \"3\"\nprint('Done! Go check it!')"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '0'\nassert solution('3') == '2'"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n1\n\n''') == '3'\n\nassert solution('''\n3\n1 2 3\n\n''') == '3'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    1\n    1\n    ''') == '3'\nassert solution('''\n    3\n    1 2 3\n    ''') == '3'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '-1'\nassert solution('3') == '3'"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n\") == \"-1\"\nassert solution(\"3\\n1 2 3\\n\") == \"3\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"3 2 3\") == \"3\"\nassert solution(\"3 1 2 3\") == \"4\"\nassert solution(\"4 5 7 2\") == \"4\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1\") == \"10\""
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('46 2') == '7'\nassert solution('2018 214') == '3'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 4\") == \"1\"\nassert solution(\"1 4\") == \"0\"\nassert solution(\"1 4\") == \"0\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"1 4\") == \"3\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"46 2\") == \"7\\n92 205 1\"\nassert solution(\"2018 214\") == \"3\\n92 205 1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"46 2\") == \"7\"\nassert solution(\"2018 214\") == \"92 205 1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"46 2\") == \"7\"\nassert solution(\"2018 214\") == \"3\""
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''46 2\n''') == '7'\nassert solution('''2018 214\n''') == '92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == 1\n\nassert solution(\"\") == -1\n\nassert solution(\"1 2\") == 3\n\nassert solution(\"1 2 3\") == 4\n\nassert solution(\"3 1 2\") == 7"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''46 2\n\n''') == '7 0 1 0 0 1 1 1'\n\nassert solution('''2018 214\n\n''') == '3 0 1 0 1 1 1'\n\nassert solution('''49 25\n\n''') == '-1'\n\nassert solution('''3 3\n\n1 1\n\n''') == '0 1 1'\n\nassert solution('''3 2\n\n1 0\n\n''') == '0 1 0'"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''\n46 2\n'''\n) == '7\\n0 1 0 0 1 1 1'\nassert solution(\n'''\n2018 214\n'''\n) == '3\\n92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''46 2\n\nOutput\n7\n0 1 0 0 1 1 1''') == '7'\n\nassert solution('''2018 214\n\nOutput\n3\n92 205 1''') == '3'\n\n\n\n\n\nclass Solution(object):\n    def solve(self, A, B):\n        # Your code here\n        d = len(A)\n        a = A\n        b = B\n        k = 0\n        for i in range(d):\n            k = (k + b[i] * a[i]) % b[i]\n            a = a[:i] + a[i + 1:]\n        return k if k < b[d] else -1"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 20 20') == '5.000000000000000'\nassert solution('4 1 1') == '0.400000000000000'"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 20 20\n6 2\n1 3\n2 6''') == \"5.000000000000000\"\nassert solution('''4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == \"0.400000000000000\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '0.400000000000000'\nassert solution('3 3') == '0.500000000000000'\nassert solution('3 3') == '0.500000000000000'\n\nassert solution('2 20 20') == '5.000000000000000'\n\nassert solution('4 1 1') == '0.400000000000000'"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 20 20\\n6 2\\n1 3\\n2 6\\n\") == \"5.000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 1 1\n2 3\n3 2\n2 3\n3 2''') == '0.400000000000000'\nassert solution('''5 20 20\n6 2\n1 3\n2 6\n3 2\n2 3\n3 2''') == '5.000000000000000'\nassert solution('''6 3 2\n1 3\n2 6\n3 2\n2 3\n3 2''') == '4.00000000000000'\nassert solution('''5 1 1\n2 3\n3 2\n2 3\n3 2''') == '0.400000000000000'\nassert solution('''7 5 5\n7 8\n7 6\n7 8\n7 6\n7 8''') == '1.700000000000000'\n\n\n'''\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\nassert solution('''\n4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\nassert solution('''\n100 2 1\n1 1\n5 1\n''') == '101.000000000000'\n'''\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n2 3\n3 2\n''') == '1.400000000000000'\nassert solution('''\n4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\n'''\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 20 20') == '5.000000000000000'\nassert solution('4 1 1') == '0.400000000000000'"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\nassert solution('''4\n1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'''\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2 3\"\n) == \"4\"\n\nassert solution(\n    \"8 2\"\n) == \"5\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 4\nassert solution('8 2') == 5\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([2, 3]) == '4'\nassert solution([8, 2]) == '5'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n1 8\n\"\"\"\n) == \"8\"\n\nassert solution(\n\"\"\"\n0 2\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n3 2\n\"\"\"\n) == \"5\"\n\nassert solution(\n\"\"\"\n10 2\n\"\"\"\n) == \"8\"\n\nassert solution(\n\"\"\"\n1 0\n\"\"\"\n) == \"1\""
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    2 3\n''') == '4'\nassert solution('''\n    8 2\n''') == '5'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 5 7\\n\") == \"Conan\"\nassert solution(\"2\\n1 1\\n\") == \"Agasa\""
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"Conan\"\nassert solution(\"2\") == \"Agasa\""
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n4 5 7\n''') == 'Conan'\nassert solution('''\n2\n1 1\n''') == 'Agasa'\nassert solution('''\n3\n4 5 7\n''') == 'Conan'\nassert solution('''\n2\n1 1\n''') == 'Agasa'\n\n\n\"\"\""
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 5 7\") == \"Conan\"\nassert solution(\"2\\n1 1\") == \"Agasa\""
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'Conan'\nassert solution() == 'Agasa'"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n4 5 7\n\"\"\") == \"Conan\"\nassert solution(\"\"\"2\n1 1\n\"\"\") == \"Agasa\""
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n4 5 7\n''') == 'Conan'\nassert solution('''2\n1 1\n''') == 'Agasa'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == 'Conan'\nassert solution(input_2) == 'Agasa'\n\n\n---Time Limit Exceeded---\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n4 5 7') == 'Conan'\nassert solution('2\\n1 1') == 'Agasa'"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2\\n') == 'Agasa'\nassert solution('3\\n1 2 3\\n') == 'Conan'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"3 3\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '3 3'\nassert solution('2 2') == '3 3'\nassert solution('1 1') == '2 2'\nassert solution('500 500') == '500 500'\nassert solution('500 200') == '500 500'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"##.\\n..#\\n#.#\"\n\"\"\"\nimport sys\n\nsys.stdin = open(file='data/inputs/11.data')\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\n\n''') == '''3 3\n##.\n..#\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n') == '3 3\\n###\\n#.#\\n'\n'''"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n') == '3 3\\n##.\\n..#\\n#.#\\n'\n\"\"\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"3 3\"\nassert solution(\"1 1\") == \"2 2\"\nassert solution(\"3 3\") == \"1 1\\n1 1\\n2 2\\n\"\nassert solution(\"8 1\") == \"3 3\\n..#\\n##.\\n#.#\\n##.\\n#.#\\n#.#\\n#.#\\n#.#\\n\"\nassert solution(\"2 4\") == \"5 5\\n##.#\\n###.#\\n###.#\\n###.#\\n###.#\\n###.#\\n###.#\\n###.#\\n\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '###'\nassert solution('1 3') == '...'\nassert solution('2 1') == '#.#'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n\") == \"##.\\n..#\\n#.#\"\nassert solution(\"5 6\\n\") == \"######\\n#......\\n#.#....\\n#.#....\\n#......\\n######\""
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"3 3\"\nassert solution(\"2 4\") == \"2 4\"\nassert solution(\"3 3\") == \"3 3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 4\n+ 1\n+ 2\n- 2\n- 1\n\n''') == '4'\n\nassert solution('''3 2\n+ 1\n- 2\n+ 2\n- 1\n\n''') == '3'\n\nassert solution('''2 4\n+ 1\n- 1\n+ 2\n- 2\n\n''') == '0'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '2'\n\n-----------------------------------------------------\nimport re\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '1 2'\nassert solution('2 4') == '0'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == '0'\nprint(solution(''))\nassert solution('1') == '1'\nprint(solution('1'))\nassert solution('2') == '0'\nprint(solution('2'))\nassert solution('3') == '1'\nprint(solution('3'))\nassert solution('4') == '1'\nprint(solution('4'))\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n+ 1') == '4'\nassert solution('3 2\\n+ 1\\n- 2') == '1'\nassert solution('5 6\\n+ 1\\n- 2\\n+ 3\\n- 4') == '3'\nassert solution('5 6\\n+ 1\\n- 1\\n+ 2\\n- 2') == '0'\nassert solution('3 2\\n+ 1\\n- 1\\n+ 2\\n- 2') == '0'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"1 3 5\"\nassert solution(\"5 4\") == \"4 1 3 5\"\nassert solution(\"5 6\") == \"3 5 2 1\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n') == '4'\nassert solution('3 2\\n') == '3'\nassert solution('2 4\\n') == '0'\nassert solution('6 5\\n') == '5'\nassert solution('0 0\\n') == '0'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2 4'\nassert solution('5 4\\n1 2\\n- 2\\n- 1\\n') == '3 5'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '3'\nassert solution('2 4') == '0'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '4'\nassert solution('5 1') == '1'\nassert solution('5 4 2 4 5') == '1'\n\n\n\"\"\""
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1\") == \"1\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"3 3\") == \"4\"\nassert solution(\"10 2\") == \"9\""
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 2 3\n1 2 3\n9''') == \"4\"\nassert solution('''5 1\n5 4 2 4 5\n2\n5\n\n''') == \"1\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"5 5 5 5 5\") == \"0\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3\n1 2 3\n1 2 3\n9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 1\n5 4 2 4 5\n2\n5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '4'\nassert solution('5 1') == '1'\nassert solution('5 1') == '0'\nassert solution('5 1') == '0'\nassert solution('5 1') == '0'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n1 2 3\\n9\\n\") == \"4\"\nassert solution(\"5 1\\n5 4 2 4 5\\n2\\n5\\n\") == \"1\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1') == '4'\nassert solution('5 1') == '1'\nassert solution('5 1') == '2'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n5 4 2 4 5\\n2\") == \"4\"\nassert solution(\"5 1\\n5 4 2 4 5\\n9\") == \"0\"\nassert solution(\"6 1\\n3 1 2 3 4 4\\n3 2 5 6 5 3\\n\") == \"4\"\nassert solution(\"6 1\\n3 2 5 5 5 2\\n3 2 5 5 5 3\\n\") == \"0\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"5 1\") == \"1\"\n\nprint(\"all tests passed\")\n\n\n\n\n'''"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"4 4\") == \"NO\"\nassert solution(\"5 5\") == \"NO\"\nassert solution(\"6 6\") == \"NO\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"NO\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"2 4\") == \"NO\"\nassert solution(\"1 5\") == \"NO\"\nassert solution(\"10 20\") == \"NO\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"abda\"\nassert solution(\"4 4\") == \"abcd\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"4 4\") == \"abda\"\nassert solution(\"10 10\") == \"NO\""
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == 'NO'\n\nsolution('''\n3 3\ncba\n\n''')\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4\nabcd\n\n''') == 'abda'\nassert solution('''3 3\ncba\n\n''') == 'cbd'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\ncba''') == 'cbd'\nassert solution('''3 4\nabcd''') == 'abda'\nassert solution('''4 4\nabcd''') == 'abdc'\nassert solution('''3 2\ncba''') == 'NO'\nassert solution('''2 1\ncba''') == 'cba'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == \"NO\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"cbd\"\nassert solution(\"4 4\") == \"abda\"\nassert solution(\"8 9\") == \"9\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"NO\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n0101\") == \"tokitsukaze\"\nassert solution(\"4 1\\n0101\") == \"once again\"\nassert solution(\"6 5\\n010101\") == \"quailty\"\n\"\"\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"tokitsukaze\"\nassert solution(\"6 1\") == \"once again\"\nassert solution(\"6 5\") == \"tokitsukaze\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 2\\n0101\\n\"\n) == \"tokitsukaze\"\n\nassert solution(\n    \"6 1\\n010101\\n\"\n) == \"once again\"\n\nassert solution(\n    \"6 5\\n010101\\n\"\n) == \"tokitsukaze\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) == \"quailty\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 5\") == \"tokitsukaze\"\nassert solution(\"4 1\") == \"quailty\"\nassert solution(\"6 1\") == \"once again\"\n\n\"\"\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n0101\\n\") == \"quailty\"\nassert solution(\"6 1\\n010101\\n\") == \"once again\"\nassert solution(\"4 1\\n0011\\n\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"tokitsukaze\"\nassert solution(\"6 1\") == \"quailty\"\nassert solution(\"6 5\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n0101\") == \"tokitsukaze\"\nassert solution(\"6 1\\n010101\") == \"tokitsukaze\"\nassert solution(\"4 1\\n0011\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n0101\") == \"tokitsukaze\"\nassert solution(\"6 1\\n010101\") == \"tokitsukaze\"\nassert solution(\"6 5\\n010101\") == \"quailty\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"once again\"\nassert solution(\"6 1\") == \"tokitsukaze\"\nassert solution(\"6 5\") == \"quailty\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 10') == '7'\nassert solution('3 2 9 5') == '13'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\") == \"50\"\nassert solution(\"1 2 10\\n11\\n15 7\") == \"7\""
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'\nassert solution('2 3 8') == '14'\nassert solution('2 4 10') == '28'\nassert solution('2 3 8') == '14'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '2 4 50\\n'\n    '20 100\\n'\n    '60 10 40 80\\n'\n    ) == '50'\nassert solution(\n    '1 2 10\\n'\n    '11\\n'\n    '15 7\\n'\n    ) == '7'"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 10\") == \"7\""
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 4 50\n20 100\n60 10 40 80\n\n1 2 10\n11\n15 7\n''') == '50'\nassert solution('''1 2 10\n11\n15 7\n''') == '7'\nassert solution('''1 1 1\n1\n1\n''') == '1'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 50\\n20 100\\n60 10 40 80\\n') == '50'\nassert solution('1 2 10\\n11\\n15 7\\n') == '7'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\"\nassert solution(\"3 3 100\") == \"100\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"2 3 4\") == \"4\"\nassert solution(\"3 4 5\") == \"5\"\nassert solution(\"4 5 6\") == \"6\"\nassert solution(\"5 6 7\") == \"7\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"1 1\\n\"\n    ) == \"1 6\"\n\nassert solution(\n    \"3 2\\n\"\n    \"0 0\\n\"\n    ) == \"1 3\"\n\n\nassert solution(\n    \"1 10\\n\"\n    \"5 3\\n\"\n    ) == \"5 5\"\n\n\nassert solution(\n    \"1 100\\n\"\n    \"0 0\\n\"\n    ) == \"1 100\"\n\n\nassert solution(\n    \"2 100\\n\"\n    \"0 0\\n\"\n    ) == \"1 100\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n1 1\n''') == '1 6'\nassert solution('''3 2\n0 0\n''') == '1 3'\nassert solution('''1 10\n5 3\n''') == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n1 1\n\n''') == '1 6'\nassert solution('''3 2\n0 0\n\n''') == '1 3'\n\nassert solution('''1 10\n5 3\n\n''') == '5 5'"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 1\\n\") == \"1 6\"\nassert solution(\"3 2\\n0 0\\n\") == \"1 3\"\nassert solution(\"1 10\\n5 3\\n\") == \"5 5\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n1 1\n\n''') == '1 6'\n\nassert solution('''\n3 2\n0 0\n\n''') == '1 3'\n\nassert solution('''\n1 10\n5 3\n\n''') == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"1 6\"\nassert solution(\"3 2\") == \"1 6\""
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3') == '1 6'\nassert solution('3 2') == '1 3'"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == '1 6'\nassert solution(sys.stdin.read()) == '1 3'\n\n\"\"\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n1 1\n\n''') == '1 6'\n\nassert solution('''\n3 2\n0 0\n\n''') == '1 3'\n\n\nassert solution('''\n1 10\n5 3\n\n''') == '5 5'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('3 4') == '2 3'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n-2 5 -1\\n') == '2 3'\nassert solution('4\\n-2 4 5 -1\\n') == '2 1 2 3'\nassert solution('5\\n-2 4 5 -1\\n') == '1 2 1 2 3'"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n-2 5 -1\n\"\"\") == \"2 3\"\n\"\"\"\nassert solution(\"\"\"\n2\n-2 3\n\"\"\") == \"2 3\"\n\"\"\""
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2 3'\nassert solution('3') == '2 3'\nassert solution('5') == '2 3 4 5'\nassert solution('50') == '2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\\n-2 5 -1\") == \"2 3\""
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2 3\""
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '2 2 3'\nassert solution(input()) == '1 1 2'\nassert solution(input()) == '0 1 2'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"2\""
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n-2 5 -1\\n\") == \"2 3\""
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([3, 0, 1]) == \"3\"\nassert solution([2, 10, 2]) == \"3\"\nassert solution([1, 10, 2]) == \"2\"\nassert solution([1, 0, 1]) == \"1\"\nassert solution([0, 1, 1]) == \"1\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '1'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 3\\n1 5\\n\") == \"3\"\nassert solution(\"1\\n0 4\\n\") == \"1\"\nassert solution(\"2\\n1 10\\n2 2\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 10\\n2 2') == '3'\nassert solution('2\\n0 3\\n1 5') == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"3\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\n1 10\\n2 2\\n') == '3'\nprint('All tests passed!')"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INP) == \"3\"\n\n\"\"\"\n\nINP = \"\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0 3\\n1 5') == '3'\nassert solution('2\\n1 10\\n2 2') == '3'"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '16'\nassert solution('6 18') == '0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 "
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6 1 10 12 2') == \"16\"\nassert solution('3 50') == \"0 25 50\""
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 18') == '16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18'\nassert solution('3 50') == '3 0 25 50'\n\n\n##############################\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '1 2 3 4'\nassert solution('2\\n') == '1'\nassert solution('1\\n') == '0'\nassert solution('2\\n') == '0 1'\nassert solution('3\\n') == '0 1 2'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '5 6 1 10 12 2\\n') == '16\\n'\nassert solution(\n    '3 50\\n') == '0 25 50'"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n25 25 50\n''') == '0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 \n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6 1 10 12 2\") == \"16\"\nassert solution(\"3 50\") == \"0 25 50\""
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n6 18\n5 6 1 10 12 2\n\"\"\") == \"16 0 25 50\"\n\nassert solution(\n\"\"\"\n3 50\n25 25 50\n\"\"\") == \"3 0 25 50\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 10"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 18\\n5 6 1 10 12 2\") == \"16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18\"\nassert solution(\"3 50\\n25 25 50\") == \"3 0 25 50\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n\n''') == '2'\n\nassert solution('''\n3\n\n''') == '3'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n''') == '3'\nassert solution('''2\n''') == '2'\nassert solution('''6\n''') == '3'\nassert solution('''10\n''') == '4'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('6') == '3'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n\n\n'''\n\nfrom math import inf"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n''') == '3'\nassert solution('''3\n''') == '2'\nassert solution('''2\n''') == '1'\nassert solution('''5\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(open(0).read()) == '3'\nassert solution(open(1).read()) == '2'"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n') == '3'\nassert solution('2\\n') == '2'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '180'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n10 1\n20 2\n30 3\n\"\"\") == \"180\"\nassert solution(\"\"\"\n3\n3 1\n2 2\n4 3\n\"\"\") == \"21\"\nassert solution(\"\"\"\n1\n5 10\n\"\"\") == \"50\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '180'\nassert solution('3') == '180'\nassert solution('3') == '180'\nassert solution('3') == '180'\nassert solution('3') == '180'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n10 1\n20 2\n30 3\n''') == '180'\nassert solution('''\n3\n3 1\n2 2\n4 3\n''') == '21'\nassert solution('''\n1\n5 10\n''') == '50'\nassert solution('''\n2\n3 3\n4 5\n''') == '5'\nassert solution('''\n5\n6 6\n7 8\n9 10\n11 12\n13 14\n''') == '12'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"180\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"1\\n2\\n5\\n3 4\\n5 6\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n15 17\\n15 18\\n15 19\\n15 20\\n15 21\\n14 22\\n13 23\\n12 24\\n11 25\\n10 26\\n9 27\\n8 28\\n7 29\\n6 30\\n5 31\\n4 32\\n3 33\\n2 34\\n1 35\\n\") == \"160\"\nassert solution(\n    \"1\\n4\\n3 4\\n3 4\\n\") == \"33\"\nassert solution(\n    \"1\\n3\\n3\\n3\\n\") == \"33\"\nassert solution(\n    \"2\\n2\\n4\\n5\\n\") == \"3\"\nassert solution(\n    \"3\\n5\\n5\\n5\\n\") == \"3\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1\n2\n3\n''') == \"180\"\nassert solution('''4\n2\n4\n6\n''') == \"21\""
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10') == '50'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3\\n10 1\\n20 2\\n30 3\\n'\n) == '180\\n'\n\nassert solution(\n    '2\\n3 1\\n2 2\\n4 3\\n'\n) == '21\\n'\n\nassert solution(\n    '1\\n5 10\\n'\n) == '50\\n'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n4 1\\n4 1\\n') == \"50\"\nassert solution('1\\n10 1\\n4 1\\n') == \"180\"\nassert solution('3\\n3 1\\n2 2\\n') == \"21\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 0 10\n\n''') == '2'\nassert solution('''\n5\n0 1 2 3 4\n\n''') == '1'\nassert solution('''\n4\n0 0 0 0\n\n''') == '4'\n\n'''\n4\n0 0 0 0\n\n'''\n'''\n4\n0 1 2 3 4\n\n'''\n'''\n5\n0 1 2 3 4\n\n'''\n'''\n5\n0 1 2 3 4\n\n'''\n'''\n4\n0 0 0 0\n\n'''\n'''\n3\n0 0 10\n\n'''\n'''\n4\n0 0 0 0\n\n'''\n'''\n4\n0 1 2 3 4\n\n'''\n'''\n2\n0 0 10\n\n'''\n'''\n2\n0 0 10\n\n'''\n'''\n1\n0 0 10\n\n'''\n'''\n1\n0 0 10\n\n'''\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n0 0 10\n\n''') == '2'\nassert solution('''5\n0 1 2 3 4\n\n''') == '1'\nassert solution('''4\n0 0 0 0\n\n''') == '4'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"9\") == \"3\"\nassert solution(\"10\") == \"1\"\n\n\n--Explaination--\n\nIn the second example, we have to build 3 piles, and each pile must contain at most 1 box from top to bottom. Thus, the solution is 3.\n\nIn the first example, we have to build 2 piles, and each pile must contain at most 2 boxes from top to bottom. Thus, the solution is 2.\n\nIn the third example, we can build only one pile that contains boxes 1, 2, 3, 4, 5 (from top to bottom). The solution is 4.\n\nIn the fourth example, we can construct 3 piles in one go (we can use one box from top to bottom from each pile). The solution is 1.\n\nIn the fifth example, we can construct 10 piles in one go (we can use all boxes from top to bottom from each pile). The solution is 1.\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0 10\\n\") == \"2\"\nassert solution(\"5\\n0 1 2 3 4\\n\") == \"1\"\nassert solution(\"4\\n0 0 0 0\\n\") == \"4\"\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n0 0 10\\n') == '2'\nassert solution('5\\n0 1 2 3 4\\n') == '1'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n0 0 10\n''') == '2'\nassert solution('''5\n0 1 2 3 4\n''') == '1'\nassert solution('''4\n0 0 0 0\n''') == '4'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n0 0 10\n''') == '1'\n\nassert solution('''4\n0 1 2 3 4\n''') == '4'\n\nassert solution('''5\n0 1 2 3 4\n''') == '1'\n\nassert solution('''8\n0 0 0 0 0 0 0 0\n''') == '4'\n\nassert solution('''9\n0 1 2 3 4 5 6 7 8\n''') == '4'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n0 0 10\n''') == '2'\nassert solution('''5\n0 1 2 3 4\n''') == '1'\nassert solution('''4\n0 0 0 0\n''') == '4'\nassert solution('''9\n0 1 2 3 4\n''') == '3'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n0 0 10\n''') == '2'\nassert solution('''5\n0 1 2 3 4\n''') == '1'\nassert solution('''4\n0 0 0 0\n''') == '4'\nassert solution('''9\n0 1 0 2 0 1 1 2 10\n''') == '3'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\nassert solution(\"8\\n0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\\n7 0\") == \"22\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([\n    \"5\",\n    \"0 0\",\n    \"0 1\",\n    \"1 0\",\n    \"1 1\"\n]) == \"5\"\nassert solution([\n    \"4\",\n    \"0 0\",\n    \"0 1\",\n    \"1 0\",\n    \"1 1\"\n]) == \"8\"\nassert solution([\n    \"1\",\n    \"0 0\",\n    \"0 1\",\n    \"1 0\",\n    \"1 1\"\n]) == \"4\"\nassert solution([\n    \"2\",\n    \"0 0\",\n    \"0 1\",\n    \"1 0\",\n    \"1 1\"\n]) == \"4\"\nassert solution([\n    \"1\",\n    \"1 1\"\n]) == \"1\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\nprint(solution('5\\n0 0\\n0 1\\n1 0\\n1 1\\n'))"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"5\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"0\"\nassert solution(\"7\") == \"2\"\nassert solution(\"8\") == \"3\"\nassert solution(\"9\") == \"5\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 0\n0 1\n''') == '5'\nassert solution('''\n2\n-1 0\n0 -1\n''') == '5'\nassert solution('''\n2\n1 -1\n-1 1\n''') == '4'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '5'\nprint(solution('''4\n0 0\n0 1\n1 0\n1 1\n\n'''))\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"4\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2') == '4'"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n') == '4'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"6\") == \"10\"\n\"\"\"\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\") == \"4\"\nassert solution(\"10\\nB 10\\nW 5\\nB 7\\nW 8\\nB 6\\nW 4\\nB 1\\nW 3\\nB 2\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\nW 1\\nW 2\\nB 1\") == \"9\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3]) == \"4\"\nassert solution([3, \"B\", \"W\", \"B\", \"W\", \"B\", \"W\"]) == \"4\"\nassert solution([3, \"W\", \"B\", \"W\", \"B\", \"W\", \"B\"]) == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"4\"\n\n'''\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2') == '4'\n\n---"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n6\\n3\") == \"4\"\nassert solution(\"5\\n3\\n5\") == \"4\"\nassert solution(\"5\\n4\\n5\") == \"4\""
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([5, 6, 3]) == 4\nassert solution([5, 3, 5]) == 4\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n6\n3\n\n''') == '4'\nassert solution('''5\n3\n5\n\n''') == '4'\n\nassert solution('''5\n4\n4\n\n''') == '4'\nassert solution('''5\n3\n3\n\n''') == '4'\n\nassert solution('''5\n4\n4\n\n''') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '4'"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([5, 6, 3]) == 4\nassert solution([5, 3, 5]) == 4\nassert solution([4, 3, 5]) == 4\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3\\n1\") == \"2\"\nassert solution(\"2\\n3\\n5\") == \"4\"\nassert solution(\"2\\n4\\n1\") == \"3\"\nassert solution(\"2\\n4\\n5\") == \"3\"\nassert solution(\"3\\n4\\n1\") == \"4\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n4\n4\n''') == '4'\nassert solution('''\n4\n3\n3\n''') == '4'\nassert solution('''\n5\n4\n3\n''') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n6\\n3\\n\") == \"4\"\nassert solution(\"5\\n3\\n5\\n\") == \"4\"\n\n\n\"\"\"\n\n\nfrom math import ceil, factorial"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5\n6\n3\n\"\"\") == \"4\", \"Should be 4\"\nassert solution(\n\"\"\"\n5\n3\n5\n\"\"\") == \"4\", \"Should be 4\"\nassert solution(\n\"\"\"\n1\n1\n1\n\"\"\") == \"1\", \"Should be 1\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8') == '32'\nassert solution('4') == '2'"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('4 2') == '4'\n\n\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n5 6 7') == '7'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '10'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n4 2\n''') == '2'\nassert solution('''8\n1 2 4 8 16 32 64 576\n''') == '32'\nassert solution('''5\n-8 -14 5 0 -2\n''') == '-2'\nassert solution('''6\n7 8 9 8 2 8 4\n''') == '8'"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(INPUT_S) == OUTPUT_S\n\nassert solution(INPUT_S) == OUTPUT_S"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '4'\nassert solution('8') == '32'\n'''\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"32\""
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == '32'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    5\n    1 2 4 8 16\n''') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n2\n\n''') == '2'\n\nassert solution('''\n8\n1 2 4 8 16 32 64 576\n\n''') == '32'"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4') == '2'\nassert solution('5 2') == '3'\nassert solution('10 10') == '-1'\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"400 4\") == \"2\"\nassert solution(\"50 2\") == \"3\"\nprint(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4\\n100 300 450 500\\n') == \"2\"\nassert solution('50 2\\n100 25\\n') == \"3\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '2'\nassert solution('50 2') == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n400 4\n100 300 450 500\n''') == '2'\n\nassert solution('''\n50 2\n100 25\n''') == '3'\n\nprint(solution(input()))"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 4\n100 300 450 500\n''') == '2'\nassert solution('''\n20 8\n100 300 450 500\n''') == '3'\nassert solution('''\n30 6\n100 300 450 500\n''') == '-1'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('500 4\\n100 300 450 500') == \"2\"\nassert solution('50 2\\n100 25') == \"3\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''400 4\n100 300 450 500\n''') == '2'\nassert solution('''50 2\n100 25\n''') == '3'"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4\\n100 300 450 500') == '2'\nassert solution('50 2\\n100 25') == '3'\nassert solution('50 2\\n100 25') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_1) == \"3\"\nassert solution(input_2) == \"3\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2\n''') == '6'\nassert solution('''1 1\n''') == '2'\nassert solution('''1 3\n''') == '4'\nassert solution('''3 5\n''') == '2'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '4'\nassert solution('4 3') == '5'\n\"\"\""
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"5 3\") == \"12\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"6\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"4 2\") == \"6\"\n\n---Submissions---\nYour submission was rated : 3/3\n\"\"\""
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"6\"\nassert solution(\"4 2\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '7'\nassert solution('4 2') == '10'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2') == '6'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '6'\nassert solution('5 5') == '105'\nassert solution('8 5') == '1605'\n\"\"\"\nfrom math import floor, sqrt"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"6\""
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"499122178\"\nassert solution(\"3\") == \"499122178\"\nassert solution(\"4\") == \"499122178\"\nassert solution(\"5\") == \"499122178\"\nassert solution(\"6\") == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n') == '0'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\n\nimport math\nimport functools\nimport itertools\n\nfrom random import randint"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == \"499122178\"\nassert solution('1') == \"499122178\"\nassert solution('2') == \"499122178\"\nassert solution('0') == \"499122178\"\nassert solution('10') == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('10') == '7'"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '499122178'\nassert solution('12') == '455412233'\nassert solution('16') == '484848485'\nassert solution('32') == '484848485'\nassert solution('40') == '484848485'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '499122178'\nassert solution('4') == '499122178'\nassert solution('5') == '499122178'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"499122178\"\n\"\"\"\n\n\nfrom fractions import Fraction\nimport math\n\nn = int(stdin())\n\na = int(stdin())\nb = int(stdin())\nc = int(stdin())\nd = int(stdin())\ne = int(stdin())\nf = int(stdin())\ng = int(stdin())\nh = int(stdin())"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"499122178\"\nassert solution(\"3\") == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n4\n3\n5\n1\n4\n5\n1\n4\n5''') == \"499122178\"\nassert solution('''3\n4\n3\n5\n1\n4\n5\n1\n4\n5''') == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n''') == '499122178'\nassert solution('''3\n''') == '499122178'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '-1'\nassert solution('5') == '6'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\nprint(solution(input()))\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\""
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '-1'\nassert solution('10') == '6669'\nassert solution('22') == '-1'\n\nassert solution('10') == '6669'\n\n\"\"\"\n\na = int(input())"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\\\n10\n''') == '6669', 'First example'\nassert solution('''\\\n5\n''') == '-1', 'Second example'\nprint(solution('''\\\n2\n'''))"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\nassert solution('12') == '99999'\nassert solution('13') == '-1'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\nassert solution('10') == '-1'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\""
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 4 3 2 0\n1 0 2 4 3\n2 4 0 1 3''') == '1 4 3 2 0'\nassert solution('''2\n-1''') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"3\") == \"1 2 4 0\"\nassert solution(\"4\") == \"1 4 2 3 0\"\nassert solution(\"5\") == \"1 2 4 3 0\"\n\n'''\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '-1'\nassert solution('5') == '1 4 3 2 0'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1 4 3 2 0\"\nassert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"-1\"\n\"\"\"\n\n\nfrom itertools import permutations"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == '-1'\nassert solution(\"5\") == '1 4 3 2 0'\nassert solution(\"4\") == '-1'\n\"\"\""
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5''') == '1 4 3 2 0'\nassert solution('''2''') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"-1\"\n\n\"\"\"\n\nn = int(input())\nlucky = set()\nfor i in range(1, n + 1):\n    a = str(i)\n    for j in range(1, n + 1):\n        b = str(j)\n        for k in range(1, n + 1):\n            c = str(k)\n            a += b\n            b += c\n            c += a\n            lucky.add(int(a) + int(b) % n == int(c) % n)\n\nprint(\"-1\" if not lucky else \" \".join(list(map(str, lucky))))\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '-1'\nassert solution('5') == '1 4 3 2 0'\nassert solution('10') == '1 4 3 2 0'\nassert solution('3') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '-1'\n\n\n'''\n\nimport math\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\") == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == \"Yes\"\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == \"No\"\nprint(solution(input()))\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\"\n\n\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'Yes'\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == 'No'\nassert solution('''\n3\n1 2\n1 3\n2 3\n''') == 'No'\nassert solution('''\n3\n1 2\n1 3\n2 3\n''') == 'No'"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2\n1 3\n2 4\n1 2 3 4''') == 'Yes'\nassert solution('''4\n1 2\n1 3\n2 4\n1 2 4 3''') == 'No'\nassert solution('''4\n1 2\n1 3\n2 4\n1 3 4''') == 'Yes'\nassert solution('''4\n1 2\n1 3\n2 4\n1 4 3''') == 'No'\nassert solution('''4\n1 2\n1 3\n2 4\n1 4 3''') == 'Yes'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n1 2\n1 3\n2 4\n1 2 3 4\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\n4\n1 2\n1 3\n2 4\n1 2 4 3\n\"\"\") == \"No\"\n\n\"\"\"\n\nInput:\n4\n1 2\n1 3\n2 4\n1 2 3 4\n\nOutput:\nYes\nInput:\n4\n1 2\n1 3\n2 4\n1 2 4 3\n\nOutput:\nNo\n\n\n\"\"\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'No'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'Yes'\nassert solution('1') == 'No'\nassert solution('2') == 'No'\nassert solution('2') == 'No'"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == \"Yes\"\n\nassert solution('''4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n1 2\n1 3\n2 4\n1 2 3 4\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\n5\n1 2\n2 1\n3 3\n4 4\n5 5\n\"\"\") == \"No\"\nassert solution(\"\"\"\n6\n1 2\n3 1\n4 4\n5 5\n6 6\n\"\"\") == \"Yes\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\""
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\") == \"24500\"\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 6 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\n''') == '24500'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 6 5\\n\"\n                \"1 1 0 5000\\n\"\n                \"3 2 0 5500\\n\"\n                \"2 2 0 6000\\n\"\n                \"15 0 2 9000\\n\"\n                \"9 0 1 7000\\n\"\n                \"8 0 2 6500\\n\") == \"24500\"\nassert solution(\"2 4 5\\n\"\n                \"1 2 0 5000\\n\"\n                \"2 1 0 4500\\n\"\n                \"2 1 0 3000\\n\"\n                \"8 0 1 6000\\n\") == \"-1\"\nassert solution(\"10 10 10\\n\"\n                \"2 1 0 0\\n\"\n                \"3 2 0 1\\n\"\n                \"7 3 2 0\\n\"\n                \"5 2 1 0\\n\"\n                \"8 1 3 2\\n\"\n                \"4 3 2 0\\n\"\n                \"2 4 1 2\\n\"\n                \"2 3 1 0\\n\"\n                \"3 1 4 0\\n\"\n                \"9 5 3 2\\n\"\n                \"1 9 5 0\\n\"\n                \"4 5 2 0\\n\"\n                \"8 3 2 0\\n\"\n                \"2 9 0 0\\n\"\n                \"7 7 0 1\\n\"\n                \"3 2 0 1\\n\"\n                \"8 7 0 1\\n\"\n                \"5 4 0 1\\n\"\n                \"7 7 2 1\\n\"\n                \"9 7 2 2\\n\"\n                \"2 7 2 1\\n\"\n                \"2 8 2 1\\n\"\n                \"4 7 2 1\\n\"\n                \"9 8 2 2\\n\"\n                \"4 7 2 2\\n\"\n                \"5 7 2 1\\n\"\n                \"4 8 2 1\\n\"\n                \"3 7 2 1\\n\"\n                \"6 8 2 2\\n\"\n                \"2 8 2 1\\n\"\n                \"1 7 2 2\\n\"\n                \"5 7 2 2\\n\"\n                \"4 6 2 1\\n\"\n                \"2 8 2 2\\n\"\n                \"8 6 2 1\\n\"\n                \"2 7 2 1\\n\"\n                \"8 7 2 1\\n\"\n                \"2 5 2 1\\n\"\n                \"3 5 2 2\\n\"\n                \"5 5 2 1\\n\"\n                \"2 4 2 1\\n\"\n                \"3 6 2 2\\n\"\n                \"4 6 2 1\\n\"\n                \"5 6 2 1\\n\"\n                \"1 1 2 2\\n\"\n                \"2 2 2 1\\n\"\n                \"3 1 2 2\\n\"\n                \"4 2 2 1\\n\"\n                \"5 2 2 1\\n\"\n                \"7 4 2 2\\n\"\n                \"8 4 2 2\\n\"\n                \"2 5 2 1\\n\"\n                \"3 5 2 1\\n\"\n                \"7 7 2 1\\n\"\n                \"2 6 2 1\\n\"\n                \"6 7 2 2\\n\"\n                \"4 7 2 2\\n\"\n                \"2 5 2 2\\n\"\n                \"1 2 2 1\\n\"\n                \"2 6 2 1\\n\"\n                \"8 6 2 1\\n\"\n                \"3 6 2 1\\n\"\n                \"7 6 2 2\\n\"\n                \"5 6 2 2\\n\"\n                \"1 6 2 1\\n\"\n                \"2 6 2 1\\n\"\n                \"1 6 2 1\\n\"\n                \"2 6 2 2\\n\"\n                \"4 6 2 2\\n\"\n                \"2 6 2 2\\n\"\n                \"3 7 2 1\\n\"\n                \"1 3 2 1\\n\"\n                \"1 3 2 2\\n\"\n                \"7 3 2 2\\n\"\n                \"3 6 2 1\\n\"\n                \"2 6 2 1\\n\"\n                \"4 6 2 1\\n\"\n                \"7 6 2 1\\n\"\n                \"8 6 2 1\\n\"\n                \"1 7 2 2\\n\"\n                \"2 7 2 2\\n\"\n                \"2 7 2 2\\n\"\n                \"4 7 2 1\\n\"\n                \"7 7 2 2\\n\"\n                \"1 7 2 1\\n\"\n                \"3 7 2 2\\n\"\n                \"5 7 2 1\\n\"\n                \"1 7 2 1\\n\"\n                \"5 7 2 2\\n\"\n                \"2 6 2 2\\n\"\n                \"2 7 2 2\\n\"\n                \"3 7 2 2\\n\"\n                \"4 7 2 2\\n\"\n                \"4 7 2 2\\n\"\n                \"3 6 2 2\\n\"\n                \"2 6 2 2\\n\"\n                \"4 6 2 2\\n\"\n                \"8 6 2 2\\n\"\n                \"2 6 2 2\\n\"\n                \"1 5 2 2\\n\"\n                \"1 5 2 2\\n\"\n                \"7 5 2 2\\n\"\n                \"2 5 2 2\\n\"\n                \"3 5 2 2\\n\"\n                \"5 5 2 2\\n\"\n                \"2 5 2 2\\n\"\n                \"7 5 2 2\\n\"\n                \"4 5 2 2\\n\"\n                \"5 5 2 2\\n\"\n                \"1 5 2 2\\n\"\n                \"2 5 2 2\\n\"\n                \"2 5 2 2\\n\"\n                \"3 5 2 2\\n\""
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"25000\"\nassert solution(\"2 5 5\") == \"25000\"\nassert solution(\"2 1 2 0 5000\") == \"0\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 0 5000') == '24500'\nassert solution('1 2 0 3000') == '-1'\nassert solution('1 2 0 4000') == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 6 5') == \"24500\"\nassert solution('2 4 5') == \"25000\"\nassert solution('2 4 1') == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_sample_test) == '24500'\nassert solution(input_real) == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 6 5') == '24500'\nassert solution('2 4 5') == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\""
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 45') == '0.828427125'\nassert solution('6 6 30') == '19.668384925'\nassert solution('2 2 90') == '0.5'\nassert solution('2 6 45') == '0.841470984'\nassert solution('6 6 45') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1 45\n''') == '0.828427125'\nassert solution('''\n6 4 30\n''') == '19.668384925'\n\n'''"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 45\") == '0.828427125'\nassert solution(\"6 4 30\") == '19.668384925'"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1 45\n    ''') == '0.828427125'\nassert solution('''6 4 30\n    ''') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_sample_01) == expected_output_01\nassert solution(input_sample_02) == expected_output_02"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 3') == '1'\nassert solution('3 4') == '2'\nassert solution('2 4') == '3'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"3000\"\nassert solution(\"3 4\") == \"992\"\nassert solution(\"2 4\") == \"1\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n\n''') == '3000'\nassert solution('''2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n''') == '1'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 3\") == \"3000\"\nassert solution(\"2 4\") == \"992\""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n\") == \"3000\"\nassert solution(\"3 4\\nDEF 0\\nATK 0\\n0\\n1\\n\") == \"1\"\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n1\\n\") == \"1\"\n\n\n\"\"\"\nfrom itertools import product"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == \"3000\"\nassert solution(\"3 4\\nDEF 0\\nATK 0\\n0\\n1\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n') == '3000'\nassert solution('3 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\\n') == '1'\nassert solution('5 5\\nATK 10\\nATK 100\\nATK 1000\\n0\\n11\\n101\\n1001\\n') == '992'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n''') == '3000'\n\nassert solution('''2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == '1'\n\nassert solution('''3 4\nATK 10\nATK 100\nATK 1000\n1\n11\n101\n1001\n''') == '992'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n\n''') == '3000'\nassert solution('''\n2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n''') == '1'\n'''"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3000'\nassert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n''') == '3000'\nassert solution('''2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == '1'\nassert solution('''2 5\nATK 0\nATK 0\nATK 0\nATK 0\nATK 0\n''') == '1'"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n') == '6'\nassert solution('2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n') == '2'\nassert solution('5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n') == '62'"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n\") == \"6\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"6\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 4\") == \"62\"\nassert solution(\"5 4\") == \"62\"\nassert solution(\"5 4\") == \"62\"\n\n'''\n\n\n'''\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '5 4\\n'\n    '4 3 1 2 1\\n'\n    '1 2 1 2 1\\n'\n    '1 2 3 4 5 6 7 8 9\\n') == '6'\n\nassert solution(\n    '2 2\\n'\n    '1 2\\n'\n    '0 0\\n'\n    '2 1 -100 -100\\n') == '2'"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2\n1 2\n1 2\n2 3''') == '4'\nassert solution('''5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n''') == '62'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '5 4\\n'\n    '4 3 1 2 1\\n'\n    '1 2 1 2 1\\n'\n    '1 2 3 4 5 6 7 8 9\\n'\n) == '6'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"6\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"6\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 4\") == \"62\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n3 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n\") == \"6\"\nassert solution(\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n\") == \"2\"\nassert solution(\"5 5\\n4 3 2 1 1\\n1 2 1 2 1\\n0 0\\n0 1\\n\") == \"3\"\nassert solution(\"2 5\\n0 2 6 7 4\\n1 2 1 2 1\\n0 0\\n0 1\\n\") == \"0\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n10 5\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1 1\n4 2\n10 0 -1 -2 -3 -4 -5 -6 -7 -8 -9\n\"\"\") == \"2\"\nassert solution(\"\"\"\n20 20\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n\"\"\") == \"50\"\nassert solution(\"\"\"\n10 5\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n\"\"\") == \"50\"\nassert solution(\"\"\"\n10 5\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n\"\"\") == \"50\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abaa') == 'YES'\nassert solution('aabb') == 'NO'\nassert solution('bbaa') == 'YES'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\naaba\nabaa\n''') == 'YES'\nassert solution('''\naabb\nabab\n''') == 'NO'"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"aabb\") == \"YES\"\nassert solution(\"abab\") == \"YES\"\nassert solution(\"aaba\") == \"YES\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"bbaa\") == \"NO\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abaa') == 'YES'\nassert solution('aabb') == 'NO'\nassert solution('bbaa') == 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abaa') == 'YES'\nassert solution('aabb') == 'NO'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abaa') == 'YES'\nassert solution('aabb') == 'NO'\nassert solution('bbab') == 'NO'\nassert solution('aaaa') == 'YES'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"bbaa\") == \"YES\"\nprint(solution(input()))\n\n\n\n\"\"\"\n\na = input()\nb = input()"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abab\") == \"NO\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abaa') == 'YES'\nassert solution('aabb') == 'NO'\nassert solution('bbaa') == 'YES'"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'YES'\nassert solution('10') == 'NO'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'NO'\nassert solution('7') == 'YES'\nassert solution('10') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\""
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'YES'\nassert solution('5') == 'YES'"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n2 4 5\n3 4 1''') == 'NO'\nassert solution('''1\n1 2''') == 'YES'\nassert solution('''5\n2 4 1 3 6''') == 'YES'\nassert solution('''2\n1 2\n3 4''') == 'YES'\nassert solution('''3\n2 1 4\n3 1 4\n3 2 1''') == 'YES'"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'YES'\nassert solution('1') == 'NO'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'YES'\nassert solution('1') == 'NO'"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'NO'\nassert solution('2') == 'YES'\nassert solution('3') == 'YES'"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"YES\", \"basic\"\nassert solution(\"2\") == \"NO\", \"basic\"\nassert solution(\"3\") == \"NO\", \"edge cases\"\nassert solution(\"4\") == \"YES\", \"all swaps\"\nassert solution(\"5\") == \"NO\", \"all swaps\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"1\") == \"YES\""
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"Yes\"\n\nassert solution(\"\") == \"No\"\nassert solution(\"a\") == \"No\"\nassert solution(\"ab\") == \"Yes\"\nassert solution(\"a?b\") == \"Yes\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == 'No'\nassert solution('6 3') == 'Yes'\nassert solution('5 3') == 'No'\nassert solution('6 3') == 'Yes'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\nab\nac\ncd\n1 2\n''') == \"Yes\"\nassert solution('''\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n''') == \"Yes\"\nassert solution('''\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n''') == \"No\""
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n'\n'test\\n'\n'tezt\\n'\n'...') == 'Yes', 'First example'\n\nassert solution('6 3\\n'\n'a\\n'\n'b\\n'\n'c\\n'\n'\\n'\n'd\\n'\n'1 2 3') == 'No', 'Second example'\n'''\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\na\nb\nc\ndd\n1 2 3 4\n''') == 'Yes'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\nab\nac\ncd\n1 2\n''') == 'Yes'\nassert solution('''5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n''') == 'Yes'\nassert solution('''6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n''') == 'No'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"1 2 3\") == \"Yes\"\nassert solution(\"ab\") == \"a?\"\nassert solution(\"abc\") == \"a?\"\nassert solution(\"aab\") == \"a?\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == 'No'\nassert solution('5 2') == 'Yes'\nassert solution('6 4') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\nab\\nac\\ncd\") == \"Yes\"\nassert solution(\"5 3\\ntest\\ntezt\\ntest.\\neest\\ntes\\n1 4 5\") == \"Yes\"\nassert solution(\"4 4\\na\\nb\\nc\\nd\") == \"No\"\nassert solution(\"6 3\\n.svn\\n.git\\n...\\n...\\n..\\n.\\n1 2 3\") == \"Yes\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"Yes\"\nprint(solution())\n\n\"\"\""
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5\n3 1 2 3 2\n\"\"\") == '2'\nassert solution(\n\"\"\"\n5\n1 1 1 1 1\n\"\"\") == '1'\nassert solution(\n\"\"\"\n5\n1 1 2 2 2\n\"\"\") == '1'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('4\\n1 2 3 4') == '3'\nassert solution('5\\n1 2 3 4 5') == '4'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '2'\nassert solution('''\n3\n1 1 1\n''') == '1'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"3\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '2'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n2 5 2''') == '1'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == \"2\"\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n''') == \"1\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '0'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '3'\nassert solution('3\\n1 2\\n3 4\\n5 6') == '1'\n\"\"\"\n\nfrom heapq import heappush, heappop, heappushpop\nfrom collections import deque\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\nN = int(input())\ngraph = [[] for _ in range(N + 1)]\nfor _ in range(N - 1):\n    a, b = list(map(int, input().split()))\n    graph[a].append(b)\n    graph[b].append(a)\n\ndp = [-1] * (N + 1)\nq = deque()\nheappush(q, (0, 0))\n\nwhile q:\n    cost, p = heappop(q)\n    if dp[p] == -1:\n        dp[p] = cost\n        for n in graph[p]:\n            heappush(q, (cost + 1, n))\n\nans = 0\nfor i in range(1, N + 1):\n    ans += dp[i] % 10007\n\nprint(ans)\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '2'\nassert solution('4') == '4'\n\"\"\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2'\nassert solution('''3\n1 2\n2 3\n3 4\n''') == '2'\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n''') == '3'\nassert solution('''100\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n37 38\n39 40\n41 42\n43 44\n45 46\n47 48\n49 50\n51 52\n53 54\n55 56\n57 58\n59 60\n61 62\n63 64\n65 66\n67 68\n69 70\n71 72\n73 74\n75 76\n77 78\n79 80\n81 82\n83 84\n85 86\n87 88\n89 90\n91 92\n93 94\n95 96\n97 98\n99 100\n''') == '37'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '4\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n) == '2'"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '2'\nassert solution('3') == '1'\nassert solution('2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2'\n\nassert solution('''10\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n''') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 3') == '1'\nassert solution('10 3 10') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 2 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10 3 10\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4'\nassert solution('7 2 5\\n') == '4'\nassert solution('10 3 10\\n') == '5'"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\nassert solution() == \"5\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 3\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\nassert solution(\"10 10 10\") == \"1\"\nassert solution(\"10 11 12\") == \"0\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n7 2 5\n''') == '4'\nassert solution('''\n10 3 10\n''') == '5'\nassert solution('''\n10 1 5\n''') == '1'\nprint(\"You passed all the tests!\")"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7 2 5\n''') == '4'\nassert solution('''10 3 10\n''') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'\nassert solution(\"1 2\") == '3'\nassert solution(\"10 3 10\") == '5'"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_data) == '2'\nassert solution(input_data) == '2 3 \nassert solution(input_data) == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5') == '2'\nassert solution('4 4\\n1 2\\n1 3\\n1 4\\n3 4') == '1'"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"1\""
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '2'\nassert solution(input(True)) == '2 3'\n\nstdin = \"4 5\\n1 2\\n1 3\\n1 4\\n3 4\\n\"\nprint(solution(input()))\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"4 4\") == \"2\""
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '1'\nassert solution('''5 6\n1 2\n1 3\n1 4\n3 4\n4 5\n5 6''') == '1'\nassert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '2'\nassert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '2'\nassert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6') == '1 2 3 4 5'\nassert solution('4 4') == '1 2'\nassert solution('5 5') == '1 2'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '2'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\") == \"2\"\nassert solution(\"4 4\") == \"1\""
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n''') == '2'\nassert solution('''4 4\n1 2\n1 3\n1 4\n3 4\n\n''') == '1'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3') == 'No'\nassert solution('2\\n2\\n3') == 'Yes'\nassert solution('3\\n2\\n3') == 'Yes'\nassert solution('2\\n3\\n3') == 'Yes'\nassert solution('3\\n3\\n3') == 'Yes'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n75 150 75 50\n\n3\n100 150 250\n''') == 'No'\n\nassert solution('''\n4\n75 150 75 50\n''') == 'Yes'\n\nassert solution('''\n3\n100 150 250\n''') == 'No'"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n100 150 250\") == \"No\"\nassert solution(\"4\\n75 150 75 50\") == \"Yes\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n75 150 75 50\n''') == 'Yes'\n\nassert solution('''\n3\n100 150 250\n''') == 'No'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'Yes'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n75 150 75 50\\n') == 'Yes'\nassert solution('3\\n100 150 250\\n') == 'No'\nassert solution('6\\n5 100 50 25 50 50\\n') == 'No'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"Yes\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 'No'\nassert solution(\"4\") == 'Yes'"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n75 150 75 50\\n\") == \"Yes\"\nassert solution(\"3\\n100 150 250\\n\") == \"No\"\n'''\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'Yes'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"150\"\n\nassert solution(input()) == \"100\""
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '150'\nassert solution('2') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '150'\nassert solution('2') == '100'\nassert solution('-1') == '100'"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '150'\nassert solution('2') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '150'\nassert solution('2') == '100'"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"50\"\nassert solution(\"3\") == \"150\""
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n50 50 50\n''') == '150'\nassert solution('''\n2\n-1 -100 -1\n''') == '100'\n\n\n--- Notes ---\n\ni. In the second sample the sum of the first two elements equals the same number that is part of the list.\nii. In the third sample the sum of the first two elements equals a different number than the sum of the other elements of the list.\n\n'''"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '150'\nassert solution('2') == '100'\nassert solution('-1 -100 -1') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([50,50,50]) == \"150\"\nassert solution([-1,-100,-1]) == \"100\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '150'\nassert solution('2') == '100'\nassert solution('10') == '90'\nassert solution('100') == '50'\nassert solution('-100') == '-100'\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5\\nab a\\ncc c\\nca a\\ne e c\\nff d\\n') == '4\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5') == '4', f\"Result: {solution('3 5')}, expected: '4'\"\nassert solution('2 8') == '1', f\"Result: {solution('2 8')}, expected: '1'\"\nassert solution('6 2') == '0', f\"Result: {solution('6 2')}, expected: '0'\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 5\nab a\ncc c\nca a\nee c\nff d\n\"\"\") == \"4\"\nassert solution(\"\"\"2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n\"\"\") == \"1\"\nassert solution(\"\"\"6 2\nbb a\nba a\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"2 8\") == \"1\"\nassert solution(\"6 2\") == \"0\"\nprint(\"Solution:\")\nprint(solution(*(input().split())))\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5\\nab a\\ncc c\\nca a\\nee c\\nff d\\n') == '4'\nassert solution('2 8\\naf e\\ndc d\\ncc f\\nbc b\\nda b\\neb a\\nbb b\\nff c\\n') == '1'\nassert solution('6 2\\nbb a\\nba a\\n') == '0'\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 5\nab a\ncc c\nca a\nee c\nff d\n\"\"\") == \"4\"\n\nassert solution(\"\"\"2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n\"\"\") == \"1\"\n\nassert solution(\"\"\"6 2\nbb a\nba a\n\"\"\") == \"0\""
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 5\nab a\ncc c\nca a\nee c\nff d\n\n2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n''') == '4', 'First sample'\nassert solution('''6 2\nbb a\nba a\n\n2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n''') == '1', 'Second sample'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 5\nab a\ncc c\nca a\nee c\nff d\n''') == '4'\nassert solution('''2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n''') == '1'\nassert solution('''6 2\nbb a\nba a\n''') == '0'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\\\n3 5\nab a\ncc c\nca a\nee c\nff d\n\n\"\"\") == \"4\"\nassert solution(\"\"\"\\\n6 2\nbb a\nba a\n\"\"\") == \"0\"\nassert solution(\"\"\"\\\n3 5\nab a\ncc c\nca a\nee c\nff d\n\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 5\nab a\ncc c\nca a\nee c\nff d\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 2\nbb a\nba a\n\"\"\") == \"0\""
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n''') == '1'\nassert solution('''2\n''') == '3'\nassert solution('''3\n''') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n1\n1\n''') == '1'\nassert solution('''2\n2\n2\n''') == '3'\nassert solution('''3\n3\n3\n''') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == \"10\"\nassert solution('2') == \"3\"\nassert solution('1') == \"1\"\nassert solution('0') == \"0\""
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n\n''') == '1'\nassert solution('''\n\n2\n\n''') == '3'\nassert solution('''\n\n3\n\n''') == '10'"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1''') == '1.000000000000'\nassert solution('''1 3''') == '-1'\nassert solution('''4 1''') == '1.250000000000'\nassert solution('''5 1''') == '1.250000000000'\nassert solution('''6 1''') == '1.250000000000'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1.000000000000'\nassert solution('1 3') == '-1'\n\nassert solution('4 1') == '1.250000000000'\n'''"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1.000000000000\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"4 1\") == \"1.250000000000\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1\n''') == '1.000000000000'\n\nassert solution('''\n1 3\n''') == '-1'\n\nassert solution('''\n4 1\n''') == '1.250000000000'"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1.000000000000\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"4 1\") == \"1.250000000000\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 1\"\"\") == \"1.000000000000\"\nassert solution(\"\"\"1 3\"\"\") == \"-1\"\nassert solution(\"\"\"4 1\"\"\") == \"1.250000000000\"\nassert solution(\"\"\"1 1\"\"\") == \"1.000000000000\"\n\n\n---Time Complexity---\n\nO(n)\n\n---Space Complexity---\n\nO(n)\n\n3, 1: O(n)\n1, 3: O(1)\n4, 1: O(1)\n1, 1: O(1)\n\n[Image]\n[Image]\n[Image]\n\n\"\"\""
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'\n\n\n\n\"\"\"\n\na, b = map(int, input().split())\n\n\nx = 1\nwhile x <= a:\n    y = 2*x\n    if y == a:\n        print(x)\n        break\n    if y > a:\n        break\n    x += 1"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1.000000000000'\nassert solution('3 1') == '-1'\nassert solution('4 1') == '1.250000000000'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"1.000000000000\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"4 1\") == \"1.250000000000\"\n\n\"\"\""
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'\n\n'''"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n12\n11 8\n7 5\n''') == \"10.0000000000\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '10.0000000000'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n1\n1 4 1\n2 5 3\n\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n2\n10\n6 4 2\n5 8 7 4\n\n\"\"\") == \"85.4800000000\"\nassert solution(\"\"\"\n4\n20\n10 11 5\n15 10 3\n18 12 6\n\n\"\"\") == \"10.0000000000\"\nassert solution(\"\"\"\n3\n1\n1 4 1\n2 5 3\n\n\"\"\") == \"10.0000000000\"\nassert solution(\"\"\"\n5\n8\n7 5\n6 9 6 5\n8 7 6 9\n4 10 3\n\n\"\"\") == \"10.0000000000\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n22\n11 8\n7 5\n''') == '10.0000000000'\nassert solution('''3\n1\n1 4 1\n2 5 3\n''') == '-1'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == \"10.0000000000\""
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '10.0000000000'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"10.0000000000\"\nassert solution(\"3\") == \"-1\""
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == '10.0000000000'\nassert solution(test_input_2) == '-1'\nassert solution(test_input_3) == '85.4800000000'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1\n1 2\n1 3\n1 4\n1 5\n\n''') == '10.0000000000', 'First example'\n\nassert solution('''\n2\n1\n1 2\n2 5 3\n\n''') == '-1', 'Second example'\n\nassert solution('''\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n\n''') == '85.4800000000', 'Third example'\n\nassert solution('''\n\n''') == '-1', 'Fourth example'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n12\n11 8\n7 5\n''') == '10.0000000000'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 0\nassert solution('10') == 4\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n''') == '0'\nassert solution('''\n10\n''') == '4'\n\n'''\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n\n''') == '0'\nassert solution('''\n10\n\n''') == '4'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"10\") == \"4\""
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n\n''') == '0'\nassert solution('''\n4\n\n''') == '4'\nassert solution('''\n5\n\n''') == '4'\nassert solution('''\n10\n\n''') == '4'\nassert solution('''\n12\n\n''') == '4'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '0'\nassert solution('10\\n') == '4'\n\n'''\n\nfrom math import gcd"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 0\nassert solution('10') == 4\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"10\") == \"4\""
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Wh\"\nassert solution(\"1 2\") == \"abdef\"\n\n\nassert solution(\"3 1\") == \"Wh\"\nassert solution(\"3 2\") == \"abdef\"\nassert solution(\"3 111111111111\") == \"Wh\""
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 1\n1 2\n1 111111111111''') == 'Wh.'\nassert solution('''5\n0 69\n1 194\n1 139\n0 47\n1 66\n\nOutput\nabdef''') == 'Areyoubusy'\n\nInput\n1\n2\n2 5\n3\n\nOutput\n3\nInput\n1\n2\n3\n\nOutput\n7\nInput\n4\n8\n10\n\nOutput\n8\nInput\n5\n15\n5\n\nOutput\n5'''"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 1\n1 2\n1 111111111111\n''') == 'Wh'\nassert solution('''10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n''') == 'Areyoubusy'\n\n'''\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1\n1 2\n1 111111111111\n''') == 'Wh'\n\nassert solution('''5 0\n0 69\n1 194\n1 139\n0 47\n1 66\n''') == 'abdef'\n\nassert solution('''10 4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n''') == 'Areyoubusy'\n\nassert solution('''100 923 983\n98 76\n1 967\n99 709\n70 11\n99 585\n0 948\n91 7\n78 93\n97 554\n''') == 'ooh'\n\nassert solution('''5 0\n0 69\n1 194\n1 139\n0 47\n1 66\n''') == 'Wh'"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 1\n1 2\n1 111111111111\n\"\"\") == \"Wh.\"\n\nassert solution(\"\"\"\n5 0\n0 69\n1 194\n1 139\n0 47\n1 66\n\n\"\"\") == \"abdef\"\n\nassert solution(\"\"\"\n10 0\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n\"\"\") == \"Areyoubusy\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == 'Wh'\nassert solution('1 2') == 'abdef'\n\n[Challenge Image]\n\n[Image Source]\n\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n[Image Source]\n\n["
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'Wh'\nassert solution('1 2') == 'abdef'\nassert solution('1 111111111111') == 'Areyoubusy'\n\nfor i in range(2, 11):\n    print(solution(f'{i} {i}'))\n\"\"\"\n\nq = int(input())\n\nfor i in range(q):\n    n, k = list(map(int, input().split()))\n    if (n == 1):\n        print(\"Wh.\")\n    else:\n        print(f'{k} {k + 1}')\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n    What are you doing at the end of the world? Are you busy? Will you save us?\n\"\"\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"\"\"\n    What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"\n\"\"\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\n\n\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"Wh\"\nassert solution(\"1 2\") == \"abdef\"\nassert solution(\"1 111111111111\") == \"Areyoubusy\"\nassert solution(\"2 1\") == \"Wh\"\nassert solution(\"2 2\") == \"abdef\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'Wh'\nassert solution('1 2') == 'ab'\n\nassert solution('1 111111111111') == 'Areyoubusy'\n\n\n\n[Image]"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"? +? -? +? = n\") == \"Possible\"\nassert solution(\"? +? -? +? = 1\") == \"Impossible\"\nassert solution(\"? = 1\") == \"Possible\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"? +? -? +? = n\") == \"Possible\"\nassert solution(\"? +? -? +? = n\") == \"Impossible\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r\"\"\"\n? +? -? +? +? = 42\n\"\"\") == \"Possible\"\nassert solution(r\"\"\"\n? -? = 1\n\"\"\") == \"Impossible\"\nassert solution(r\"\"\"\n? = 1000000\n\"\"\") == \"Possible\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''? +? -? +? = n''') == 'Possible'\nassert solution('''? +? -? +? +? = n''') == 'Impossible'\nassert solution('''? = 1''') == 'Impossible'\nassert solution('''? -? = 1''') == 'Impossible'\nassert solution('''? +? -? +? = n''') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"? +? -? +? = 42\") == \"Possible\"\nassert solution(\"? +? = 1\") == \"Impossible\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"?+?=42\") == \"Possible\"\nassert solution(\"?-?=1\") == \"Impossible\"\nassert solution(\"?+?-?\") == \"Impossible\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('? +? -? +? = 42') == 'Possible'\nassert solution('? -? = 1') == 'Impossible'\nassert solution('? = 1000000') == 'Possible'\n\n'''"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n? +? -? +? = 42\n''') == 'Possible'\nassert solution('''\n? +? -? +? +? = 42\n''') == 'Possible'\nassert solution('''\n? -? = 1\n''') == 'Impossible'\nassert solution('''\n? = 1000000\n''') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''? +? -? +? =?''') == 'Possible'\nassert solution('''? +? -? +? =?''') == 'Impossible'"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n? +? -? +? +? = 42\n\n''') == 'Possible'\n\nassert solution('''\n? +? -? +? +? = -1\n\n''') == 'Impossible'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '7 4 5'"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 0 2\n0 1 2 0\n0 2 0 1\n0 1 2 0\n''') == '7 4 5'"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2 0 2\n0\n0\n0\n''') == '7 4 5'\nassert solution('''3\n0\n0\n0\n''') == '3 0 0'\nassert solution('''5\n1\n2\n3\n4\n5\n''') == '4 5 0'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 0 2') == '7 4 5'\nassert solution('0') == '7 4 5'\nassert solution('0') == '7 4 5'\n\"\"\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '7 4 5'\n\nassert solution('5') == '7 4 5'\n\nassert solution('4') == '7 4 5'\n\nassert solution('3') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '5 4 1'\nassert solution('4') == '6 5 2 4'\nassert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n10\n1 2 0 2\n0 1 2 0\n0 2 0 1\n0 1 2 0\n0 2 0 1\n\"\"\") == \"7 4 5\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 0 2\\n0\\n0\\n0\") == \"7 4 5\"\nassert solution(\"4\\n1 1 1 1\\n0\\n0\\n0\") == \"7 7 5\"\nassert solution(\"3\\n0\\n0\\n0\") == \"0 0 0\"\nassert solution(\"4\\n0\\n0\\n0\") == \"0 0 0\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"7 4 5\"\nassert solution(\"4\") == \"7 4 5\"\nassert solution(\"5\") == \"8 5 7\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 0 2\\n0\\n0\\n0\\n') == '7 4 5'"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"No\"\nassert solution(\"4\") == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(in1) == \"Yes\"\nassert solution(in2) == \"No\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\nabc\") == \"Yes\"\nassert solution(\"4\\naaaa\") == \"Yes\"\nassert solution(\"7\\nababac\") == \"Yes\""
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    5\n    aabddc\n    ''') == 'Yes'\nassert solution('''\n    3\n    abc\n    ''') == 'No'\nassert solution('''\n    3\n    jjj\n    ''') == 'Yes'\n''')\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\naaaaaac') == \"Yes\"\nassert solution('3\\nabc') == \"No\"\nassert solution('3\\njjj') == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"6\") == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"3\") == \"Yes\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\naabddc\n\n3\nabc\n\n3\njjj''') == 'Yes'\nassert solution('''6\naabddc\n\n3\nabc\n\n3\njjj\n\n3\nabc\n\n3\njjj''') == 'Yes'\nassert solution('''3\naabddc\n\n3\nabc\n\n3\njjj\n\n3\nabc\n\n3\njjj''') == 'No'\nassert solution('''6\naabddc\n\n3\nabc\n\n3\njjj\n\n3\nabc\n\n3\njjj''') == 'Yes'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"Yes\"\nassert solution(\"\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\""
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'No'\nassert solution('3') == 'Yes'"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\nassert solution('10 3') == '720'\nassert solution('10 7') == '72'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"54\"\nassert solution(\"7 4\") == \"1728\"\nassert solution(\"3 4\") == \"20\"\nassert solution(\"4 9\") == \"83\"\nassert solution(\"5 8\") == \"912\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '54'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"1728\""
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\n\nassert solution('1 2') == '1'\nassert solution('3 1') == '2'\nassert solution('3 2') == '0'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"54\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 1\n4\n1\n1\n1\n1\n1''') == '0'\nassert solution('''4 5\n4\n4\n5\n4\n3\n3\n4''') == '11'\nassert solution('''7 8\n7\n1\n2\n3\n4\n5\n6\n7\n''') == '9384'"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2\n1 2 3\n1 2 2''') == '54'\nassert solution('''7 4\n1 1 2\n1 2 2\n1 3 3\n1 4 4\n1 5 5\n2 3 3\n2 5 5''') == '1728'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 6\") == \"2 4\"\nassert solution(\"3 3\") == \"2 1\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2 4'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == \"2 4\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'\nassert solution('0 0') == '0 0'"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n''') == '2 4'\nassert solution('''\n3 3\nWWW\nBWW\nWWW\n''') == '2 1'\nassert solution('''\n6 6\nWWWWWWWWWW\nWWWWWWWWWW\nWWWWWWWWWW\nWWWWWWWWWW\nWWWWWWWWWW\nWWWWWWWWWW\n''') == '5 5'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == \"2 4\"\nassert solution(\"3 3\") == \"2 1\"\nprint(\"Solution:\")\nprint(solution(input(\"Enter Input : \")))"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n''') == '2 4'\n\nassert solution('''5 5\nWWWWBBB\nWWWWBBB\nWWWWBBB\nWWWWBBB\nWWWWBBB\n''') == '3 3'\n\nassert solution('''5 9\nWWWWWWWWWWWWW\nWWWWWWWWWWWWW\nWWWWWWWWWWWWW\nWWWWWWWWWWWWW\nWWWWWWWWWWWWW\n''') == '2 3'"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n''') == '2 4'\nassert solution('''3 3\nWWW\nBWW\nWWW\n''') == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW') == '2 4'\nassert solution('5 5\\nWWWWWW\\nWWWWWW\\nWWWWWW\\nWWWWWW\\nWWWWWW') == '2 1'"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(TEST_INPUT_1) == TEST_OUTPUT_1\nprint(solution(INPUT))\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 7') == '10 9 10 10 9'\nassert solution('2 3') == '5 6'\nassert solution('2 1') == '5 6'\nassert solution('2 3') == '5 6'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3''') == '10 9 10 10 9'\nassert solution('''2 3\n1 2\n1 2\n1 2''') == '5 6'\n\nimport sys\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n''') == '10 9 10 10 9'\nassert solution('''\n2 3\n1 2\n1 2\n1 2\n''') == '5 6'"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3''') == '10 9 10 10 9 \n\nassert solution('''2 3\n1 2\n1 2\n1 2\n''') == '5 6'"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 7\") == \"10 9 10 10 9\"\nassert solution(\"2 3\") == \"5 6\"\n\n\"\"\""
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 7') == '10 9 10 10 9 \nassert solution('2 3') == '5 6'\nprint(solution(input()))\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '10 9 10 10 9'\nassert solution('2 3') == '5 6'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 7\\n2 4\\n5 1\\n2 3\\n3 4\\n4 1\\n5 3\\n3 5\\n\") == \"10 9 10 10 9\"\nassert solution(\"2 3\\n1 2\\n1 2\\n1 2\\n\") == \"5 6\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n\"\"\"\n) == \"10 9 10 10 9\"\n\nassert solution(\n    \"\"\"\n2 3\n1 2\n1 2\n1 2\n\"\"\"\n) == \"5 6\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n''') == '2'\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n''') == '2'\nassert solution('''\n1 1\n-1 -1\n4\n1 0 0\n0 1 0\n1 1 -3\n''') == '4'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '2'\nassert solution('1 1') == '2'\nassert solution('-1 -1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1\\n-1 -1\\n2') == '2'\nassert solution('1 1\\n-1 -1\\n3') == '2'\nassert solution('1 1\\n-1 -1\\n4') == '3'\nassert solution('1 1\\n-1 -1\\n0') == '4'\nassert solution('1 1\\n-1 -1\\n1') == '4'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '2'\nassert solution('-1 -1') == '2'\nassert solution('2') == '2'\nassert solution('0 1 0') == '2'\nassert solution('1 0 0') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n''') == '2'\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n''') == '2'\nassert solution('''\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n''') == '1'\n'''"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '2'\nassert solution('-1 -1') == '2'\nassert solution('2') == '3'\nassert solution('0 1') == '2'\nassert solution('1 0') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n''') == '2'\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n''') == '2'"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3\") == \"2\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2'\nassert solution('-1 -1') == '2'\nassert solution('2') == '2'\nassert solution('1 1') == '2'\nassert solution('-1 -1') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\\n0 0 0\\n1 0 0\\n1 1 -3\\n\") == \"2\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n4 1 2\\n\") == \"Kevin\"\nassert solution(\"2 1\\n3\\n\") == \"Nicky\"\nassert solution(\"3 3\\n5\\n\") == \"Kevin\"\nassert solution(\"1 1\\n1\\n\") == \"Nicky\"\nassert solution(\"2 2\\n5\\n\") == \"Nicky\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == 'Kevin'\nassert solution('1 2') == 'Nicky'\n\ninput = stdin.read()\nn, k = map(int, input.split())\ncows = list(map(int, input.split()))\n\nscore = 0\nfor i in range(k):\n    if cows[i] % 2 == 0:\n        cows[i] = cows[i] + (cows[i] + 1)\n    else:\n        cows[i] = cows[i] - 1\nscore = score + cows[-1]\nfor i in range(len(cows)-2, -1, -1):\n    if cows[i] % 2 == 0:\n        cows[i] = cows[i] + (cows[i] + 1)\n    else:\n        cows[i] = cows[i] - 1\nscore = score + cows[0]\n\nprint(score)\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'Kevin'\nassert solution('1 1') == 'Nicky'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"Kevin\"\nassert solution(\"1 2\") == \"Nicky\"\n\"\"\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == 'Kevin'\nassert solution('1 2') == 'Nicky'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"Kevin\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == 'Kevin'\nassert solution('2 2') == 'Nicky'"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"Kevin\"\nassert solution(\"2 1\") == \"Nicky\"\nassert solution(\"3 2\") == \"Kevin\"\nassert solution(\"1 2\") == \"Nicky\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"Kevin\"\nassert solution(\"1 2\") == \"Nicky\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == 'Nicky'\nassert solution('1 2') == 'Nicky'\nassert solution('1 2') == 'Nicky'\nassert solution('1 2') == 'Nicky'\nassert solution('1 2') == 'Nicky'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('2 2 2') == '1'\nassert solution('3 2') == '1 2'\nassert solution('3 1') == '1 2'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3\\n') == '3\\n1 2 3\\n1 2 3\\n'\nassert solution('3\\n3 3 3\\n') == '1\\n'\nassert solution('3\\n3 2 3\\n') == '1\\n2\\n'\nassert solution('2\\n1 2\\n') == '1\\n2\\n'\nassert solution('1\\n1 1\\n') == '1\\n1 1\\n'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('2 3') == '1 2 3'"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"2 2 2\") == \"1 1 1\"\n\nstdin = \"\"\n\nfor n in range(3):\n    stdin += f\"{n} {n**n} {n**n} {n**n} {n**n} {n**n}\\n\"\n\nfor n in range(3, 11):\n    stdin += f\"{n} {n**n} {n**n} {n**n} {n**n} {n**n}\\n\"\n\nassert solution(stdin) == '-1'\n\nstdin = \"\"\n\nfor n in range(3):\n    stdin += f\"{n} {n} {n} {n} {n} {n}\\n\"\n\nfor n in range(3, 11):\n    stdin += f\"{n} {n} {n} {n} {n} {n}\\n\"\n\nassert solution(stdin) == '1 1 1 1 1 1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '1'\nassert solution('1 1') == '1 1'\nassert solution('2 2') == '1 2'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1 2 3') == \"1\\n1 2 3\\n2 2 2\"\nassert solution('2\\n1 2') == \"1\\n1 2\\n2 2\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('1') == '-1'"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1 1 1'\nassert solution('1') == '1 1 1'"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''\n6\n2 2 2 2 2 2\n\n''') == '1\\n1 1 1 1 1 1\\n2\\n'''\nassert solution(\n'''\n5\n2 2 2 2 2\n\n''') == '1\\n1 1 1 1 1\\n2\\n'''\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3\\n') == '3\\n1 2 3\\n1 2 3\\n'\nassert solution('3\\n2 2 2\\n') == '1\\n2 2 2\\n2\\n'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''011\n01''') == '6'\nassert solution('''0001\n00''') == '2'\nassert solution('''1\n1''') == '1'\nassert solution('''0\n1''') == '0'\nassert solution('''1\n0''') == '0'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''0101''') == '1'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''0\n''') == '1'\nassert solution('''1\n''') == '0'\nassert solution('''0\n1\n''') == '1'\nassert solution('''0\n0\n''') == '1'\nassert solution('''1\n0\n''') == '0'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '1'\nassert solution('1') == '1'\nassert solution('0') == '2'\nassert solution('10101') == '2'\nassert solution('1011') == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == \"1\"\nassert solution('11') == \"6\"\nassert solution('01') == \"2\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('01') == '1'\nassert solution('11') == '6'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n15\") == \"1\"\nassert solution(\"3\\n1 1 2\") == \"3\"\nassert solution(\"2\\n5 7\") == \"4\""
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1 2\") == \"3\"\nassert solution(\"2\\n5 7\") == \"4\"\nassert solution(\"1\\n3\\n1 1 2\") == \"5\"\nassert solution(\"1\\n2\\n1 1 2\") == \"3\"\nassert solution(\"3\\n2\\n1 1 2\") == \"2\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1 1 2') == '3'\nassert solution('3\\n1 1 2') == '4'\nassert solution('2\\n5 7') == '4'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"3\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 2\\n') == '4'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1', 'base case'\nassert solution('3') == '3', 'base case'\nassert solution('2') == '3', 'base case'\nassert solution('4') == '4', 'base case'\nassert solution('5') == '6', 'base case'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 1\nassert solution('2') == 4\nassert solution('3') == 4\nassert solution('4') == 3\nassert solution('5') == 3\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 1\nassert solution('3') == 3\nassert solution('2') == 1\nassert solution('10') == 4\nassert solution('15') == 1\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == \"1\"\n\nprint(solution(input_string))\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1 2 3 0\n0 3 2 1\n''') == 'YES'\nassert solution('''2\n1 0\n0 1\n''') == 'YES'\nassert solution('''5\n1 2 3 0\n0 3 2 1\n''') == 'NO'\nassert solution('''3\n1 0 2\n2 0 1\n''') == 'NO'\nassert solution('''4\n1 2 3 0\n0 3 2 1\n''') == 'NO'"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'YES'\nassert solution('2') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'YES'\nassert solution('2') == 'YES'\nassert solution('4') == 'NO'\n'''\n\nimport math\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 3 0\n0 3 2 1\n''') == 'YES'\nassert solution('''\n2 1 0\n0 1 0\n''') == 'YES'\nassert solution('''\n4 1 2 3 0\n0 3 2 1\n''') == 'NO'\nassert solution('''\n5 4 3 2 1 0\n0 3 2 1 0\n''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"NO\"\n\"\"\"\n\nn = int(input())\nb1 = list(map(int, input().split()))\nb2 = list(map(int, input().split()))\nb3 = list(map(int, input().split()))\n\narr = []\nfor i in range(n):\n    arr.append([0, i])\n\nfor i in range(n):\n    if b1[i] == 0:\n        arr[i][0] = 1\n    else:\n        arr[b1[i] - 1][0] = 1\n\nfor i in range(n):\n    if b2[i] == 0:\n        arr[i][1] = 1\n    else:\n        arr[b2[i] - 1][1] = 1\n\nfor i in range(n):\n    if b3[i] == 0:\n        arr[i][2] = 1\n    else:\n        arr[b3[i] - 1][2] = 1\n\nprint(arr)\n\narr.sort()\nprint(arr)\n\nfor i in range(len(arr)):\n    if arr[i][0]!= arr[i][1] or arr[i][1]!= arr[i][2]:\n        print(\"NO\")\n        break\nelse:\n    print(\"YES\")\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 0') == 'YES'\nassert solution('2 0 1') == 'YES'\nassert solution('4 0 1') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"3\") == \"YES\"\n\n\n'''\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'YES'\nassert solution('2') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'YES'\nassert solution('4') == 'NO'\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_one(self):\n        self.assertEqual(solution('3'), 'YES')\n\n    def test_two(self):\n        self.assertEqual(solution('2'), 'YES')\n\n    def test_three(self):\n        self.assertEqual(solution('4'), 'NO')"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 2 3 0\n0 3 2 1\n''') == 'YES'\n\nassert solution('''\n2\n1 0\n0 1\n''') == 'YES'\n\nassert solution('''\n4\n1 2 3 0\n0 3 2 1\n''') == 'NO'"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '9000'\nassert solution('5') == '1160'"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n8 10 9 9 8 10\n1 1 1 1 1 1\n''') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == '9000'\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == '1160'\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == '1160'\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == '1160'\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"9000\"\nassert solution(\"2\") == \"1160\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '9000'\nassert solution('6') == '1160'"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n8 10 9 9 8 10\n1 1 1 1 1 1\n''') == '9000'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160'\n\nimport math\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '9000'\nassert solution('6') == '1160'\nassert solution('6') == '9000'\nassert solution('6') == '1160'\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n8 10 9 9 8 10\\n1 1 1 1 1 1\") == \"9000\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == \"1160\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == '9000'\nassert solution(\"6\") == '1160'\n\"\"\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\n8 10 9 9 8 10\n1 1 1 1 1 1\n''') == '9000'\nassert solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160'"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\nassert solution([1, 2, 1, 4, 3, 3, 4, 3, 3, 1, 1, 2]) == '2'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 6') == '1', \"First\"\nassert solution('5 6') == '1', \"Second\"\nassert solution('5 7') == '2', \"Third\"\nassert solution('5 8') == '3', \"Forth\"\nassert solution('6 2') == '4', \"Fifth\"\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '6'\nassert solution('3 2') == '6'\nassert solution('4 2') == '7'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2\n2 3\n1 4\n1 4\n2 1\n''') == '6'\nassert solution('''\n8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\n''') == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 2\n2 3\n1 4\n1 4\n2 1''') == '6'\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('8 6') == '1'\nassert solution('5 6') == '2'\nassert solution('5 7') == '2'\nassert solution('5 8') == '2'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\n2 3\n1 4\n1 4\n2 1\n''') == '6'\nassert solution('''\n8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\n''') == '1'\n\n'''\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 2\n2 3\n1 4\n1 4\n2 1\n''') == '6'\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n''') == '1'\nprint(solution('''\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n'''))\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 2\n2 3\n1 4''') == '6', 'First example'\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1', 'Second example'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2') == '6'\nassert solution('8 6') == '1'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == '-1'\nassert solution(\"4\") == '4'\n\n---\n\n---Idea---\n\nLet's consider the following function:\n\n    def gcd(a, b):\n        a, b = abs(a), abs(b)\n        while b:\n            a, b = b, a%b\n        return a\n\nWe can observe that this function can be seen as an implementation of the Euclidean algorithm:\n\nx, y = a, b\nx, y = gcd(a, b), x*b + y*a\nx, y = gcd(gcd(a, b), c), x*b + y*a = gcd(a, b)*c + gcd(a, c)*b\nx, y = gcd(gcd(gcd(a, b), c), d), x*b + y*a = gcd(a, b)*c + gcd(a, c)*b = gcd(a, b)*d + gcd(a, d)*b\nx, y = gcd(gcd(gcd(gcd(a, b), c), d), e), x*b + y*a = gcd(a, b)*c + gcd(a, c)*b = gcd(a, b)*d + gcd(a, d)*b = gcd(a, b)*e + gcd(a, e)*b\n\nLet's consider now the following cases:\n\n    a = 1, b = 2\n    a = 2, b = 3\n    a = 3, b = 1\n\n    if a < b:\n        gcd(a, b) = gcd(a, gcd(b, a))\n        gcd(a, gcd(b, a)) = gcd(a, b)\n        gcd(gcd(a, b), c) = gcd(a, b)*c\n        gcd(gcd(a, b), c) = gcd(gcd(a, b), c)\n        gcd(gcd(gcd(a, b), c), d) = gcd(a, b)*c + gcd(a, c)*b = gcd(a, b)*c + gcd(a, c)*b + gcd(c, b)*a = gcd(a, b)*c + gcd(a, b)*c + gcd(a, d)*b = gcd(a, b)*c + gcd(a, c)*b + gcd(a, d)*b + gcd(c, b)*a = gcd(a, b)*c + gcd(a, c)*b + gcd(a, d)*b + gcd(c, b)*a = gcd(a, b)*c + gcd(a, c)*b + gcd(gcd(a, b), c) = gcd(a, c)*b + gcd(a, c)*b + gcd(gcd(a, b), c) = gcd(a, c)*b + gcd(gcd(a, b), c)\n\n    if a > b:\n        gcd(a, b) = gcd(b, gcd(a, b))\n        gcd(a, gcd(b, a)) = gcd(b, gcd(a, b))\n        gcd(gcd(a, b), c) = gcd(b, gcd(a, b))\n        gcd(gcd(a, b), c) = gcd(gcd(a, b), c)\n        gcd(gcd(gcd(a, b), c), d) = gcd(b, gcd(a, b))\n        gcd(gcd(gcd(a, b), c), d) = gcd(gcd(a, b), c) + gcd(gcd(a, d), b) = gcd(a, b) + gcd(a, c) + gcd(a, d) + gcd(c, b) = gcd(a, b) + gcd(a, c) + gcd(a, d) + gcd(c, b)\n\n    if a = b, then the next case doesn't exist\n\n\n\nLet's consider a situation where the input is:\n\n    4\n    2 4 6 8\n\nLet's assume that we want to make all numbers in the array to be equal to 1. Then we can transform our problem to this:\n\n    gcd(a, b) = gcd(a, gcd(b, a))\n    gcd(a, gcd(b, a)) = gcd(a, b)\n    gcd(gcd(a, b), c) = gcd(a, b) + gcd(a, c)\n    gcd(gcd(a, b), c) = gcd(a, b) + gcd(a, c) + gcd(c, b)\n    gcd(gcd(gcd(a, b), c), d) = gcd(a, b) + gcd(a, c) + gcd(a, d)\n    gcd(gcd(gcd(a, b), c), d) = gcd(a, b) + gcd(a, c) + gcd(gcd(a, b), c)\n    gcd(gcd(gcd(a, b), c), d) = gcd(a, b) + gcd(gcd(a, b), c) + gcd(gcd(a, c), b)\n    gcd(gcd(gcd(a, b), c), d) = gcd(gcd(a, b), c) + gcd(gcd(a, c), b) + gcd(gcd(gcd(a, b), c), d)\n    gcd(gcd(gcd(a, b), c), d) = gcd(gcd(a, b), c) + gcd(gcd(a, c), b) + gcd(gcd(gcd(a, b), c), d)\n\n\n\nNow, let's see how this code can be used:\n\n    def gcd(a, b):\n        a, b = abs(a), abs(b)\n        while b:\n            a, b = b, a%b\n        return a\n\n    if a < b:\n        gcd(a, b) = gcd(a, gcd(b, a))\n        gcd(a, gcd(b, a)) = gcd(a, b)\n        gcd(gcd(a, b), c) = gcd(a, b)*c\n        gcd(gcd(a, b), c) = gcd(a, b)*c\n        gcd(gcd(gcd(a, b), c), d) = gcd(a, b)*c + gcd(a, c)*b = gcd(a, b)*c + gcd(a, c)*b + gcd(c, b)*a = gcd(a, b)*c + gcd(a, b)*c + gcd("
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '4'\nassert solution('4') == '-1'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n2 4 6 8\n''') == '-1'\nassert solution('''\n5\n2 2 3 4 6\n''') == '5'\nassert solution('''\n3\n2 6 9\n''') == '4'"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '-1'\nassert solution('4') == '4'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == -1\nassert solution(\"2\") == 0\nassert solution(\"4\") == 4\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '4'"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 2 3 4 6\\n\") == \"5\"\nassert solution(\"4\\n2 4 6 8\\n\") == \"-1\"\nassert solution(\"3\\n2 6 9\\n\") == \"4\""
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == '5'\nassert solution(\"4\") == '-1'"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n2 2 3 4 6\n''') == '5'\nassert solution('''3\n2 6 9\n''') == '-1'\nassert solution('''4\n2 4 6 8\n''') == '4'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(s) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '3'\n\n'''\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\nassert solution('abaca') == '0'\nassert solution('abaca') == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\nassert solution('abacaba') == '0'\nassert solution('abacaca') == '3'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nabacabaca\n''') == '3'\n\nassert solution('''\nabaca\n''') == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abacabaca\") == \"3\"\nassert solution(\"abaca\") == \"0\"\nassert solution(\"ac\") == \"0\"\nassert solution(\"cac\") == \"1\"\nassert solution(\"acabaca\") == \"0\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '3\\nac\\nba\\nca'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nabacabaca\n''') == '3'\nassert solution('''\nabaca\n''') == '0'\n'''"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"2\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"1 2\") == \"-1\""
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 3') == '3'\nassert solution('3 4') == '4'\nassert solution('4 5') == '5'\nassert solution('5 6') == '-1'"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4\\n1#2#3\") == \"2\"\nassert solution(\"1 5\\n1#2#3\") == \"1\"\nassert solution(\"2 4\\n1#2#3\") == \"1\"\nassert solution(\"2 4\\n1#2#3\") == \"1\"\nassert solution(\"2 4\\n1#2#3\") == \"1\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 5\\n1#2#3\\n\") == \"2\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0'\nassert solution('1 2') == '0'\nassert solution('1 3') == '0'\nassert solution('1 4') == '1'\nassert solution('1 5') == '1'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5\\n1#2#3') == '2'\n\nassert solution('4 5\\n11..2\\n#..22\\n#.323\\n.#333') == '1'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n11..2\\n#..22\") == \"2\"\nassert solution(\"5 5\\n11.2\\n#.2\\n.222\\n#.2\\n222\\n#.2\\n.222\\n#.2\") == \"1\"\nassert solution(\"3 3\\n1.2\\n1.2\\n1.2\") == \"0\""
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4 5\n11..2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5') == '2'\nassert solution('1 2') == '-1'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n11.2\\n#.22\\n#.323\") == \"2\"\nassert solution(\"3 3\\n1.2\\n#.3\") == \"-1\"\nassert solution(\"3 3\\n1.2\\n1.3\") == \"1\"\nassert solution(\"3 3\\n1.2\\n1.3\\n\") == \"1\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"8\") == \"6\"\nassert solution(\"\") == \"-1\""
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"(())(\") == \"2\"\nassert solution(\"(())(())\") == \"2\"\nassert solution(\"())((()))\") == \"2\"\nassert solution(\"()))()\") == \"2\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"6\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"-1\"\nassert solution(\"8\") == \"6\"\nassert solution(\"10\") == \"7\"\nprint(\"solution() is correct.\")"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"6\"\nassert solution(\"3\") == \"-\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n4\n)))()\n\n'''\n    ) == '6'\n\nassert solution(\n'''\n4\n))((\n\n'''\n    ) == '-1'\n\nassert solution(\n'''\n2\n)\n\n'''\n    ) == '-1'\n\nassert solution(\n'''\n2\n(()\n\n'''\n    ) == '-1'\n\nassert solution(\n'''\n7\n))()()))(((\n\n'''\n    ) == '5'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n))((()\n\n''') == '6'\nassert solution('''8\n))((()\n\n''') == '6'\nassert solution('''3\n(()\n\n''') == '-1'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '-1'\nassert solution('5') == '-1'\nassert solution('7') == '-1'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n))((()\n''') == '6'\nassert solution('''\n10\n(((()))\n''') == '-1'\nassert solution('''\n10\n(()()())(()\n''') == '2'\nassert solution('''\n8\n))((()\n''') == '-1'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"6\"\nassert solution(\"3\") == \"-\""
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\nassert solution(\"2 3 5\") == \"1 2 3\"\nassert solution(\"4 5 4\") == \"1 2 3 4\"\nassert solution(\"1 3\") == \"1 2 3\"\nassert solution(\"3 2\") == \"1 2 3\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3 5\n4 4 0\n1 3\n3 2\n3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n2 2 2\n0 0\n1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\"\"\") == \"3\""
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3 5\n4 4 0\n1 3\n3 2\n3 1\n''') == '1'\nassert solution('''4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n''') == '4'\nassert solution('''4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n''') == '5'\nassert solution('''5 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n''') == '5'\nassert solution('''5 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n''') == '4'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 5 4') == '4'\nassert solution('3 3 5') == '1'\nassert solution('4 5 4') == '1'\nassert solution('3 3 5') == '1'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 5 4') == '4'\nassert solution('2 3') == '1 2'\nassert solution('3 2') == '1 2'"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3 5\n4 4 0\n1 3\n3 2\n3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2 2 1\n0 1\n0 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2 3 2\n1 1\n0 0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 1 1\n0 1\n0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == '4'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3 5\n4 4 0\n1 3\n3 2\n3 1\n\n''') == '1'\n\nassert solution('''\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\n''') == '4'\n\nassert solution('''\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\n''') == '4'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3 5') == '1 2 3 4'\nassert solution('4 3 5') == '1 2 3'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\\n') == '1 2 3 4'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"8\""
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == 8\nassert solution(\"7 7\") == 1876\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n2 2\n''') == '6'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 3\n\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n') == '8'"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n') == '8'\n\n\"\"\""
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '8'\nassert solution('3 4') == '5'\nassert solution('2 5') == '7'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == 8\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == 1\nassert solution(\"2 2\") == 2\nassert solution(\"3 3\") == 4\nassert solution(\"5 5\") == 1\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([2, 3]) == \"8\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '5'\nassert solution('100 3') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 2\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n) == \"5\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([[1, 2], [2, 1], [3, 1]]) == '4'\nassert solution([[1, 2], [2, 1], [3, 1], [4, 1]]) == '5'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '100'\n\"\"\""
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n2 1') == '5'\nassert solution('100 3\\n1 2\\n2 1') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2\n1 2\n2 3\n''') == '5'\n\nassert solution('''100 3\n1 2\n2 1\n3 1\n''') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n1 2\n2 3''') == '5'\nassert solution('''100 3\n1 2\n2 1\n3 1''') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 2\\n2 3\\n') == '5'\nassert solution('100 3\\n1 2\\n2 1\\n3 1\\n') == '100'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n5 2\n1 2\n2 3\n'''\n    ) == '5'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aaabb') == 6\nassert solution('usaco') == 1\nassert solution('lol') == 2\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == 6\n'''"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aaabb') == '6'\nassert solution('usaco') == '1'\nassert solution('lol') == '2'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aab') == '6'\nassert solution('usaco') == '1'\nassert solution('lol') == '2'"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aaabb') == 6\nassert solution('usaco') == 1\nassert solution('lol') == 2\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aaabb') == '6'\nassert solution('usaco') == '1'\nassert solution('lol') == '2'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nusaco\n''') == '1'\nassert solution('''\naab\n''') == '1'\nassert solution('''\naaab\n''') == '2'\nassert solution('''\naaabb\n''') == '2'\nassert solution('''\nlol\n''') == '1'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == '2'"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"usaco\") == \"2\"\nassert solution(\"lol\") == \"1\"\nassert solution(\"aab\") == \"1\"\nassert solution(\"aaa\") == \"1\"\nassert solution(\"bbb\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '2'\nassert solution('6') == '3'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n''') == '2'\nassert solution('''\n4\n''') == '1'\nassert solution('''\n13\n''') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\nassert solution([__import__('sys').stdin.read()]) == '2'"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n''') == '1'\nassert solution('''\n2\n''') == '2'\nassert solution('''\n4\n''') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n\nOutput:\n1''') == '1'\nassert solution('''4\n\nOutput:\n2''') == '2'\n\n\"\"\""
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n''') == '1'\nassert solution('''\n4\n''') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('6') == '3'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 4\n2 5\n3 6\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n4\n1 4\n2 5\n3 6\n4 7\n\"\"\") == \"1 1\"\nassert solution(\"\"\"\n5\n1 4\n2 5\n3 6\n4 7\n5 8\n\"\"\") == \"1 2\""
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 4\n2 5\n3 6\n''') == '1 2'\nassert solution('''\n3\n1 5\n2 4\n3 6\n''') == '2 1'\nassert solution('''\n5\n3 5\n2 3\n1 4\n4 2\n5 1\n''') == '1 2 4'\nassert solution('''\n6\n3 4\n1 5\n2 6\n4 1\n5 3\n''') == '2 1 5'\nassert solution('''\n7\n5 6\n4 3\n1 5\n1 3\n1 2\n1 6\n3 3\n''') == '1 2 6'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"1\") == \"2 1\"\nassert solution(\"5\") == \"1 1 1 2 2\"\nassert solution(\"8\") == \"1 1 1 1 1 1 2 2 2 2 2\"\nassert solution(\"13\") == \"1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 4\n2 5\n3 6\n''') == '1 2\\n2 1\\n1 2\\n'''\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n10\n1 4\n2 5\n3 6\n4 2\n5 2\n6 5\n7 6\n8 3\n9 5\n10 4\n\"\"\") == \"1 2\\n1 2\\n1 2\"\nassert solution(\"\"\"\n20\n1 10\n2 11\n3 12\n4 13\n5 14\n6 15\n7 16\n8 17\n9 18\n10 19\n11 20\n12 21\n13 22\n14 23\n15 24\n16 25\n17 26\n18 27\n19 28\n20 29\n21 30\n22 31\n23 32\n24 33\n25 34\n26 35\n27 36\n28 37\n29 38\n30 39\n31 40\n32 41\n33 42\n34 43\n35 44\n36 45\n37 46\n38 47\n39 48\n40 49\n41 50\n42 51\n43 52\n44 53\n45 54\n46 55\n47 56\n48 57\n49 58\n50 59\n51 60\n52 61\n53 62\n54 63\n55 64\n56 65\n57 66\n58 67\n59 68\n60 69\n61 70\n62 71\n63 72\n64 73\n65 74\n66 75\n67 76\n68 77\n69 78\n70 79\n71 80\n72 81\n73 82\n74 83\n75 84\n76 85\n77 86\n78 87\n79 88\n80 89\n81 90\n82 91\n83 92\n84 93\n85 94\n86 95\n\"\"\") == \"1 2\\n1 2\\n1 2\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"\"\"\n1 2\n2 1\n1 2\n\"\"\", \"\"\"\n2\n1\n1\n\"\"\", \"\"\"\n\"\"\n\"\"\")\nassert solution(\"\"\"\n10\n10\n1\n1\n1\n1\n1\n1\n1\n2\n2\n2\n\"\"\") == \"\"\"\n2 1\n1 2\n2 1\n\"\"\", \"\"\"\n1\n2\n1\n\"\"\")\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 4\\n2 5\\n3 6\") == \"1 2\"\nassert solution(\"10\\n2 3\\n1 4\\n5 6\\n9 7\\n8 8\\n7 7\\n6 6\\n5 5\\n4 4\\n3 3\\n2 2\\n1 1\") == \"1 2\"\nassert solution(\"5\\n1 3\\n2 4\\n4 5\\n3 6\") == \"1 2\"\nassert solution(\"6\\n1 3\\n2 4\\n4 5\\n3 5\\n5 6\\n3 6\\n1 2\\n2 4\\n4 3\\n3 5\\n5 6\") == \"1 2\"\nassert solution(\"4\\n1 3\\n2 4\\n3 5\\n4 5\") == \"1 2\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == '2'\nassert solution(\"2\") == '1'\nassert solution(\"3\") == '2'\nassert solution(\"4\") == '1'\nassert solution(\"5\") == '2'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 4\n2 5\n3 6\n''') == '1 2\\n2 1\\n1 2'\n\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 4\\n2 5\\n3 6\") == \"1 2\"\nassert solution(\"4\\n1 5\\n2 6\\n3 7\") == \"1 2\"\n\nassert solution(\"10\\n3 4\\n5 2\\n4 1\\n6 7\\n7 1\\n8 2\\n9 5\\n6 9\\n5 5\\n7 1\\n\") == \"-1\"\n\nassert solution(\"10\\n3 4\\n5 2\\n4 1\\n6 7\\n7 1\\n8 2\\n9 5\\n6 9\\n5 5\\n7 1\\n\") == \"1 2\"\n\nassert solution(\"10\\n4 4\\n3 3\\n5 5\\n4 4\\n6 4\\n5 5\\n4 3\\n3 4\\n\") == \"-1\""
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n\") == \"2\"\nassert solution(\"3\\n\") == \"2 1\"\nassert solution(\"8\\n\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '2 1'\nassert solution('3\\n') == '2 1 1'\nassert solution('8\\n') == '4'"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"8\") == \"4\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([1]) == \"1\"\nassert solution([2]) == \"2\"\nassert solution([3]) == \"2 1\"\nassert solution([8]) == \"4\""
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '1 2 1 2 1 2 3 3 1 3 2 3 4'"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '2'\nassert solution('''3''') == '2 1'\nassert solution('''8''') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1 1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1 1'\nassert solution('4') == '2 2'"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n\n''') == '1 1'\nassert solution('''2\n\n''') == '2 2'\nassert solution('''3\n\n''') == '2 2 1'\nassert solution('''8\n\n''') == '4'\nassert solution('''4\n\n''') == '4'"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\\n a A\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\nassert solution(stdin = 'aA') == '2'\nassert solution(stdin = '0rTrT022') == '1'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(in1) == out1\nassert solution(in2) == out2"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0rTrT022\") == \"02TrrT20\", \"First example\"\nassert solution(\"aA\") == \"a A\", \"Second example\""
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '2'\nassert solution('8') == '1'\nassert solution('2') == '2'\nassert solution('aA') == 'a A'\nassert solution('0rTTrT022') == '2 T 222'"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n0rTrT022') == '1\\n02TrrT20'\nassert solution('6\\n0rTrT022') == '1\\n02TrrT20'\nassert solution('6\\n0rTrT022') == '1\\n02TrrT20'\nassert solution('6\\n0rTrT022') == '1\\n02TrrT20'\nassert solution('6\\n0rTrT022') == '1\\n02TrrT20'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"a A\"\nassert solution(\"2\") == \"a A\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2 A'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n' * 100) == '2'\nassert solution('5\\n' * 100) == '0'\nassert solution('3\\n' * 100) == '1'"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\nabcd\\nacbd\\n\") == \"1\"\nassert solution(\"4\\na**d\\n2\\nabcd\\nacbd\\n\") == \"2\"\nassert solution(\"5\\nlo*er\\n2\\nlover\\nloser\\n\") == \"0\"\nassert solution(\"3\\na*a\\n2\\naaa\\naba\\n\") == \"1\""
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\nabcd\\n2\\nabc\\n') == '2'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n\"\n    \"a**d\\n\"\n    \"2\\n\"\n    \"abcd\\n\"\n    \"acbd\\n\"\n) == \"2\"\n\nassert solution(\n    \"5\\n\"\n    \"lo*er\\n\"\n    \"2\\n\"\n    \"lover\\n\"\n    \"loser\\n\"\n) == \"0\"\n\nassert solution(\n    \"3\\n\"\n    \"a*a\\n\"\n    \"2\\n\"\n    \"aaa\\n\"\n    \"aba\\n\"\n) == \"1\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nabcd\\nabac') == '1'\nassert solution('5\\nlo*er\\nloser') == '0'\nassert solution('3\\na*a\\naaa\\naba') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\na**d\n2\nabcd\nacbd\n''') == '2'\n\nassert solution('''5\nlo*er\n2\nlover\nloser\n''') == '0'\n\nassert solution('''3\na*a\n2\naaa\naba\n''') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\na**d\n2\nabcd\nacbd\n\n''') == '2'\n\nassert solution('''\n5\nlo*er\n2\nlover\nloser\n\n''') == '0'\n\nassert solution('''\n3\na*a\n2\naaa\naba\n\n''') == '1'"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\na**d\n2\nabcd\nacbd\n''') == \"2\"\n\nassert solution('''5\nlo*er\n2\nlover\nloser\n''') == \"0\"\n\nassert solution('''3\na*a\n2\naaa\naba\n''') == \"1\"\n\nassert solution('''4\na**d\n2\nabcd\nacbd\n''') == \"2\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"7 1 3\\n\"\n    \"1 0 0 0 4\\n\"\n) == \"1\"\n\nassert solution(\n    \"6 1 2\\n\"\n    \"3 8 0 1 0 0\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"6 1 2\\n\"\n    \"3 8 0 1 0 0\"\n) == \"2\"\n\nassert solution(\n    \"5 1 1\\n\"\n    \"1 0 0 0 4\"\n) == \"1\""
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4\\n') == '1'\nassert solution('6 1 2\\n3 8 0 1 0 0\\n') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 1 1\") == \"1\"\nassert solution(\"6 1 2\") == \"2\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 1 1\n1 0 0 0 4\n''') == '1'\n\nassert solution('''\n6 1 2\n3 8 0 1 0 0\n''') == '2'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '40'\nassert solution('2 42') == '1'\nassert solution('6 4') == '172'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\""
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4') == '42'\nassert solution('1 42') == '40'\nassert solution('6 4') == '172'"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\"\n\nstdin = \"\"\"\n1 1\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\""
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1''') == '40'\nassert solution('''1 42''') == '1'\nassert solution('''6 4''') == '172'"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"Palindromic tree is better than splay tree\"\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2 1 4') == '5'\nassert solution('4\\n3 1 4 1') == '6'\nassert solution('5\\n3 1 4 1 5') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2 1 4\n''') == '5'\nassert solution('''\n4\n3 1 4 1\n''') == '6'\nassert solution('''\n5\n3 1 4 1 5\n''') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '6'\nassert solution('5') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '5'\nassert solution('3') == '6'\nassert solution('4') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 4') == '5'\nassert solution('4 3 1 4 1') == '6'\nassert solution('5 3 1 4 1 5') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2 1 4\n\n''') == \"5\"\n\nassert solution('''\n4\n3 1 4 1\n\n''') == \"11\"\n\nassert solution('''\n5\n3 1 4 1 5\n\n''') == \"11\""
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n2 1 4\n''') == '5'\nassert solution('''4\n3 1 4 1\n''') == '6'\nassert solution('''5\n3 1 4 1 5\n''') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n3 1 4 1 5\n\"\"\") == \"11\"\nassert solution(\"\"\"\n3\n3 1 4 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n6\n3 1 4 1 5 4\n\"\"\") == \"14\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"2\""
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 4\") == \"5\"\nassert solution(\"3 1 4 1\") == \"6\"\nassert solution(\"4\") == \"11\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 0 0 -1') == '1'\nassert solution('1 -1') == '2'\nassert solution('1 -1 -1') == '0'\nassert solution('1 1') == '0'\nassert solution('-1 -1 -1 -1') == '0'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 0 0 -1\") == \"1\"\nassert solution(\"2\\n1 -1\") == \"2\""
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"-1\") == \"1\"\nassert solution(\"1 -1\") == \"1\""
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\nprint(solution())"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 -1') == '2'\nassert solution('-1') == '-1'\nassert solution('0 0 0 -1') == '1'\nassert solution('1 1 1 1') == '0'\nassert solution('-1 1 2 1') == '2'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 0 0 -1') == '1'\nassert solution('2 -1') == '2'"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n-1\n0\n-1''') == '1'\nassert solution('''3\n1 1 1\n2 -1 -1\n3 -1''') == '2'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 0 0 -1') == '1'\nassert solution('2 1') == '2'\n\n\n\n----Hints----\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n-1 -1\n''') == '1'\n\nassert solution('''\n3\n0 0 -1\n''') == '1'\n\nassert solution('''\n4\n-1 0 -1\n''') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 0 0\n1 2\n2 3\n''') == '2'\n\nassert solution('''\n2 1 0\n1 2\n2 2\n''') == '0'\n\nassert solution('''\n2 5 7\n3 4\n14 4\n''') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 0 0\n1 2\n2 3\n''') == '2'\nassert solution('''2 1 0\n1 2\n2 2\n''') == '0'\nassert solution('''2 5 7\n3 4\n14 4\n''') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2 0 0\\n1 2\\n2 3\\n\"\n) == \"2\"\nassert solution(\n    \"2 1 0\\n1 2\\n2 2\\n\"\n) == \"0\"\nassert solution(\n    \"2 5 7\\n3 4\\n14 4\\n\"\n) == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 0 0\n1 2\n2 3''') == '2'\nassert solution('''2 1 0\n1 2\n2 2''') == '0'\nassert solution('''2 5 7\n3 4\n14 4\n\nInput''') == '1'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"2 5 7\") == \"1\"\nassert solution(\"2 5 2\") == \"0\"\nassert solution(\"2 5 6\") == \"1\"\n\nprint(solution(*(input().split())))\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"2 5 7\") == \"1\"\nassert solution(\"2 1 0 1\") == \"0\"\nassert solution(\"2 1 0 1 1\") == \"0\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('1 2') == '1'\nassert solution('2 5 7') == '1'\nprint('all tests passed')"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 0 0\n1 2\n2 3\n''') == '2'\nassert solution('''2 1 0\n1 2\n2 2\n''') == '0'\nassert solution('''2 5 7\n3 4\n14 4\n''') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"2 1 0\") == \"1\"\nassert solution(\"2 5 7\") == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('1 2') == '0'\nassert solution('2 1 0') == '1'\nassert solution('2 5 7') == '1'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"5 2\") == \"6\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == '6'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"5 3\") == \"8\""
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n01001\\n2 4\") == \"6\"\nassert solution(\"5 2\\n01001\\n2 4\") == \"6\"\nassert solution(\"5 2\\n01001\\n2 4\") == \"6\"\nassert solution(\"5 2\\n01001\\n2 4\") == \"6\"\nassert solution(\"5 2\\n01001\\n2 4\") == \"6\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"6\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '6'\nassert solution('5 3') == '8'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '6'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n01001\n2 4\n3 5\n''') == '6'\nassert solution('''3 3\n0111\n0110\n0111\n''') == '6'\nassert solution('''10 5\n10111010101011110111\n111011101011110111\n110101010101110101\n10111010101010111\n01011101011110111\n0101110111010111\n1101011101011101\n1101011101010111\n0101110111010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111\n1101010101010111"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"5 3\") == \"7\"\nassert solution(\"5 4\") == \"8\"\nassert solution(\"5 5\") == \"9\"\nassert solution(\"5 6\") == \"10\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"5 2\") == \"6\"\nassert solution(\"4 3\") == \"10\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 1 1 1 1\n''') == '6'\nassert solution('''\n1 2 1 2 1 2\n''') == '13'\nassert solution('''\n1 2 1 1 1 1\n''') == '13'\nassert solution('''\n1 1 1 1 1 1\n''') == '6'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '6'\nassert solution(\"1 1 1 1 1 1\") == '6'\nassert solution(\"1 2 1 2 1 2\") == '13'"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"6\"\nassert solution(\"1 2 1 2 1 2\") == \"13\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\nassert solution('1 1 1 1 1 1') == '5'\n\n\n\"\"\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1 1 1 1 1\n1 2 1 2 1 2''') == '13'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    1 1 1 1 1 1\n''') == '6'\nassert solution('''\n    1 2 1 2 1 2\n''') == '13'\n'''"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"6\"\nassert solution(input_) == \"13\"\nassert solution(input_) == \"8\"\nassert solution(input_) == \"20\"\nassert solution(input_) == \"100\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 1 1 1 1 1\n\"\"\") == '6'\nassert solution(\"\"\"\n1 2 1 2 1 2\n\"\"\") == '13'\nassert solution(\"\"\"\n1 1 1 1 1 1\n\"\"\") == '6'\nassert solution(\"\"\"\n1 2 1 2 1 2\n\"\"\") == '13'\nassert solution(\"\"\"\n1 1 1 1 1 1\n\"\"\") == '6'\n\"\"\""
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n2 3 4 6 9\n''') == '4'\nassert solution('''9\n1 2 3 5 6 7 8 9 10\n''') == '4'\nassert solution('''1\n1 2\n''') == '2'"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 3 4 6 9') == 4\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == 4\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"9\") == \"4\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '4'\nassert solution('9') == '4'\n\"\"\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 3 4 6 9\\n\") == \"4\"\nassert solution(\"9\\n1 2 3 5 6 7 8 9 10\\n\") == \"4\"\nassert solution(\"9\\n1 1 1 1 1 1 1 1 1 1\\n\") == \"8\"\nassert solution(\"2\\n1 2\\n\") == \"1\"\nassert solution(\"3\\n1 3\\n1 2\\n\") == \"2\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 3 4 6 9') == 4\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == 4\nassert solution('99\\n1 2 3 5 6 7 8 9 10') == 8\nassert solution('15\\n1 2 3 4 5 6 7 8 9 10') == 5\n\n\n'''"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '4'\nassert solution('9') == '4'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n2 3 4 6 9\\n') == 4\nassert solution('9\\n1 2 3 5 6 7 8 9 10\\n') == 4\n\n\n\"\"\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '4'\nassert solution('9') == '4'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\n\nassert solution('''\n2\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    3\n    1 2 3 5 6 E 7\n    8 9 10 4 11 12 13\n    11\n    34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\n    E 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n    ''') == 'SURGERY COMPLETE'\nassert solution('''\n    5\n    1 2 3 4 5 6 E 7\n    8 9 10 4 11 12 13\n    11\n    34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\n    E 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n    S rr\n    ''') == 'SURGERY FAILED'\nassert solution('''\n    5\n    1 2 3 4 5 6 E 7\n    8 9 10 4 11 12 13\n    11\n    34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\n    E 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n    R r\n    ''') == 'SURGERY COMPLETE'\nassert solution('''\n    5\n    1 2 3 4 5 6 E 7\n    8 9 10 4 11 12 13\n    11\n    34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\n    E 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n    S rr\n    ''') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"SURGERY FAILED\"\nassert solution(\"1 2 3 5 6 E 7\") == \"SURGERY COMPLETE\"\nassert solution(\"8 9 10 4 11 12 13\") == \"SURGERY COMPLETE\"\nassert solution(\"11\") == \"SURGERY FAILED\"\nassert solution(\"34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\") == \"SURGERY FAILED\""
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n\n''') == 'SURGERY COMPLETE'\nassert solution('''\n4\n1 2 3 4 5 6\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n\n''') == 'SURGERY FAILED'\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n\n''') == 'SURGERY FAILED'\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n\n''') == 'SURGERY FAILED'\nassert solution('''\n1\n1 2 3 4 5 6\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n\n''') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3') == 'SURGERY COMPLETE'\nassert solution('2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\nassert solution('''\n1\n
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n\"\"\") == \"SURGERY COMPLETE\"\n\nassert solution(\"\"\"\n2\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n\"\"\") == \"SURGERY FAILED\""
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'SURGERY COMPLETE', solution\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n\n''') == \"SURGERY COMPLETE\"\n\nassert solution('''2\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n\n''') == \"SURGERY FAILED\"\n\nassert solution('''4\n3\n1 2 3 5 6\n8 9 10 4 11\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n\n''') == \"SURGERY FAILED\"\n\nassert solution('''5\n1\n''') == \"SURGERY FAILED\"\n\nassert solution('''1\n''') == \"SURGERY FAILED\""
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11') == 'SURGERY COMPLETE'\nassert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11') == 'SURGERY FAILED'\nassert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11') == 'SURGERY FAILED'\nassert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11') == 'SURGERY FAILED'\nassert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 1\") == \"1 2 3\"\nassert solution(\"3 2 1\") == \"1 2 3\"\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"1 2 3\"\nassert solution(\"10 20 9\") == \"9 8 7 6 5 4 3 2 1\"\nassert solution(\"3 2 1\") == \"1 2 3\"\nassert solution(\"10 20 9\") == \"9 8 7 6 5 4 3 2 1\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 2, 1]) == '1 2 3'\nassert solution([3, 2, 1]) == '1 2 3'\nassert solution([9, 2, 5]) == '6 5 8 3 4 1 9 2 7'\nassert solution([9, 2, 5]) == '6 5 8 3 4 1 9 2 7'\nassert solution([3, 2, 1]) == '1 2 3'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 1\n''') == '6 5 8 3 4 1 9 2 7'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 1') == '1 2 3'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2 1''') == '1 2 3'\nassert solution('''3 2 1''') == '1 2 3'\nassert solution('''3 2 1''') == '1 2 3'\nassert solution('''3 2 1''') == '1 2 3'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1\") == \"1 2 3\"\nassert solution(\"9 2 5\") == \"6 5 8 3 4 1 9 2 7\"\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2 1''') == '1 2 3'\nassert solution('''3 2 1''') == '1 2 3'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2 5') == '6 5 8 3 4 1 9 2 7'\nassert solution('3 2 1') == '1 2 3'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 2 1\"\"\") == \"1 2 3\"\nassert solution(\"\"\"9 2 5\"\"\") == \"6 5 8 3 4 1 9 2 7\"\nassert solution(\"\"\"3 2 1\"\"\") == \"1 2 3\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n1 2 1\n''') == '3'\nassert solution('''5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n\nOutput\n5000000000''') == '5000000000'\nassert solution('''3 2\n1 0 1\n''') == '2'\nassert solution('''4 4\n2 8 4 1\n''') == '4'\nassert solution('''4 4\n2 8 4 1\n''') == '4'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"3 2\n2 2 1\n\"\"\") == \"2\"\nassert solution(\n\"\"\"5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n\"\"\") == \"5000000000\"\nassert solution(\n\"\"\"3 2\n1 0 1\n\"\"\") == \"2\"\nassert solution(\n\"\"\"4 4\n2 8 4 1\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('3 2') == '2'\nassert solution('3 2') == '2'"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\n3 2 1\n''') == '3'\nassert solution('''5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '5000000000'\nassert solution('''3 2\n1 0 1\n''') == '2'\nassert solution('''4 4\n2 8 4 1\n''') == '4'\nassert solution('''5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '5000000000'"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '3 2'\n) == '3'\nassert solution(\n    '5 1'\n) == '5'\nassert solution(\n    '3 2'\n) == '3'\n\nassert solution(\n    '5 1'\n) == '5'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\n3 2 1\n\nOutput\n3''') == '3'\n\nassert solution('''5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n\nOutput\n5000000000\n\nInput\n3 2\n1 0 1\n\nOutput\n2''') == '2'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"2\"\nassert solution(\"1 1 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('3 2') == '3'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1') == '4'\nassert solution('5 1') == '4'"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 4\") == \"4\"\nassert solution(\"3 3\") == \"2\"\nprint('Done!')\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == '5'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\""
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n\n\n\"\"\""
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"bwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"bbwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"5\"\n\n\"\"\""
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"7\"\n\nassert solution([\n    \"4 5\",\n    \"3 2\",\n    \"1 2\",\n    \".....\",\n    \".***.\",\n    \"...**\",\n    \"*....\",\n]) == \"10\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(example_input_1) == \"1\", solution.__doc__\nassert solution(example_input_2) == \"2\", solution.__doc__\nprint(\"All test cases passed successfully!\")"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n2 2\n0 1\n....\n..*.\n....\n...*\n''') == \"7\"\n\nassert solution('''\n4 4\n2 2\n0 1\n....\n..*.\n....\n...*\n''') == \"7\"\n\nassert solution('''\n4 4\n2 2\n0 1\n....\n...*.\n...*..\n''') == \"7\"\n\nassert solution('''\n4 4\n2 2\n0 1\n....\n.***.\n...**\n*....\n''') == \"7\"\n\nassert solution('''\n4 4\n2 2\n0 1\n....\n.***.\n...**\n*....\n''') == \"7\""
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 5\\n\"\n    \"3 2\\n\"\n    \"1 2\\n\"\n    \"....\\n\"\n    \".***.\\n\"\n    \"...**\\n\"\n    \"*....\"\n) == \"10\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5') == '10'\nassert solution('4 4') == '7'\nassert solution('7 7') == '21'\nassert solution('1') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(example1) == \"10\"\nassert solution(example2) == \"7\""
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5\\n3 2\\n1 2\\n.....\\n.***.\\n...**') == '10'\nassert solution('4 4\\n2 2\\n0 1\\n....\\n..*.\\n....\\n....') == '7'\nprint('All tests passed!')"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n''') == \"10\"\n\nassert solution('''\n4 5\n2 2\n0 1\n....\n..*.\n....\n...*\n''') == \"7\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2\n.**.\n**.**\n''') == '6'\nassert solution('''4 4\n0 1\n.**.\n**.**\n*+*.\n''') == '10'\nassert solution('''4 4\n2 2\n..*..\n***..\n***..\n''') == '10'\nassert solution('''3 3\n3 3\n.***.\n***.**\n***.***\n''') == '5'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == \"2\"\nassert solution('5') == \"3\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 4 2 2\n''') == '2'\nassert solution('''6\n1 2 4 4 4 9\n''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '0'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n2 3 2\\n') == '2'\nassert solution('4\\n1 4 2 2\\n') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n2 4 2 2\n''') == '2'\nassert solution('''\n4\n1 2 4 4 4 9\n''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4 2 2\") == \"2\"\nassert solution(\"6\\n1 2 4 4 4 9\") == \"2\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 4 2\\n') == '2'\nassert solution('6\\n1 2 4 4 4 9\\n') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '4\\n1 4 2 2'\n) == '2'\nassert solution(\n    '6\\n1 2 4 4 4 9'\n) == '2'\n\"\"\"\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3 1\naba''') == '7'\nassert solution('''4 1 1\nabcd''') == '4'\nassert solution('''4 10 1\naaaa''') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 1\\naba') == '7'\nassert solution('4 1 1\\nabcd') == '4'\nassert solution('4 10 1\\naaaa') == '12'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    3 3 1\n    aba\n''') == '7'\n\nassert solution('''\n    4 1 1\n    abcd\n''') == '4'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3, 3, 1], 'aba') == 7\nassert solution([4, 1, 1], 'abcd') == 4\nassert solution([4, 10, 1], 'aaaa') == 12\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1\") == \"7\"\nassert solution(\"4 1 1\") == \"4\"\nassert solution(\"4 10 1\") == \"12\"\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '7'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3, 1, 1]) == 7\nassert solution([4, 1, 1]) == 4\nassert solution([4, 10, 1]) == 12\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1\") == \"7\"\nassert solution(\"4 1 1\") == \"4\"\nassert solution(\"4 10 1\") == \"12\""
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4 10 1\naaaa\n\"\"\") == \"12\"\nassert solution(\"\"\"3 3 1\naba\n\"\"\") == \"7\"\nassert solution(\"\"\"4 1 1\nabcd\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9''') == '1'\n\nassert solution('''2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8''') == '0'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 1\n''') == '1'\nassert solution('''4 2\n''') == '0'\nassert solution('''3 1\n''') == '2'\nassert solution('''4 3\n''') == '2'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 1') == '0'\nassert solution('5 1') == '1'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '2'\nassert solution('2 4') == '3'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '1'\nassert solution('3 2') == '1'\nassert solution('2 1') == '1'\nassert solution('2 2') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '1'"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"1\"\nassert solution(\"2 1\") == \"1\""
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '1'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '1'\nassert solution('4 1') == '2'\n\n'''"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '8'\nassert solution('4 -3') == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '8'\nassert solution('4 -3') == '3'"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2\\n2 2 2 2') == '8'\nassert solution('4 -3\\n3 -6 -3 12') == '3'\n\n'''\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '8'\nassert solution('4 -3') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2\\n2 2 2 2') == '8'\nassert solution('4 -3\\n3 -6 -3 12') == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n3\n2\n2\n''') == '8'\nassert solution('''\n5\n2\n1\n2\n3\n''') == '4'\nassert solution('''\n8\n1\n3\n2\n5\n7\n6\n4\n''') == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '8'\nassert solution('3 3 3') == '7'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\"\nassert solution(\"4 -4\") == \"3\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"-1 -1\") == \"1\"\nassert solution(\"-1\") == \"0\""
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 5 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 5 3 1 8\nBerBank University\nUniversity BerMall\nUniversity BerBank\n\n\"\"\") == \"11\"\nassert solution(\"\"\"\n4 2 1 300 1000\na A\nA aa\naa AA\nAA a\n\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\""
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 5 3 1 8\n    BerBank University\n    University BerMall\n    University BerBank\n    ''') == '11'\nassert solution('''4 2 1 300 1000\n    a A\n    A aa\n    aa AA\n    AA a\n    ''') == '5'"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'\n\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3 1 3\") == \"2\"\nassert solution(\"3 5 3 1 8\") == \"11\""
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2 1 300 1000\na A\nA aa\naa AA\nAA a\n\n''') == '5'\nassert solution('''\n3 5 3 1 8\nBerBank University\nUniversity BerMall\nUniversity BerBank\n\n''') == '11'\nassert solution('''\n6 4 4 1 500 400 1000\n
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n4\n1 1 1 4\n\n\"\"\") == \"YES\"\n\nassert solution(\n\"\"\"\n5\n1 1 5 2 1\n\n\"\"\") == \"NO\""
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 4') == 'YES', 'Case 1'\nassert solution('5 1 5 2 1') == 'NO', 'Case 2'\nassert solution('8 1 4 2 5 1 8 4 6 3 2') == 'NO', 'Case 3'\nassert solution('50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == 'NO'\nassert solution('1') == 'YES'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n') == 'YES\\n'\nassert solution('5\\n') == 'NO\\n'"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"YES\", \"Sample test\"\nassert solution(\"5\") == \"NO\", \"Sample test\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 4') == 'YES'\nassert solution('5 1 5 2 1') == 'NO'"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == 'NO'\nassert solution('1 1 1 4') == 'YES'\nassert solution('5 2 2 5 3 1 2') == 'YES'\nassert solution('5 1 2 5 2 1 4') == 'NO'\nassert solution('1 1 3 5 3 1 1 5 1 5') == 'NO'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 4\") == \"YES\"\nassert solution(\"5 1 5 2 1\") == \"NO\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 1 4\\n\") == \"YES\"\nassert solution(\"5\\n1 1 5 2 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"5\") == \"-15\"\nassert solution(\"4\") == \"1\"\nassert solution(\"2\") == \"1100\""
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"-15\"\nassert solution(\"4\") == \"1\"\nassert solution(\"2\") == \"1100\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '-15'\nassert solution('4') == '1'\nassert solution('2') == '1100'\nassert solution('3') == '-5'\n\n\n'''\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n10 5 0 -5 -10\n''') == '-15'\nassert solution('''4\n1 1 1 1\n''') == '1'\nassert solution('''3\n5 1 -5\n''') == '-5'\nassert solution('''5\n900 1000\n''') == '1100'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n10 5 0 -5 -10\n''') == '-15'\nassert solution('''4\n1 1 1 1\n''') == '1'\nassert solution('''2\n900 1000\n''') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '-15'\nassert solution('4') == '1'\nassert solution('2') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(example_input_1()) == example_output_1()\nassert solution(example_input_2()) == example_output_2()\nassert solution(example_input_3()) == example_output_3()\nassert solution(example_input_4()) == example_output_4()"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n10 5 0 -5 -10') == \"-15\"\nassert solution('4\\n1 1 1 1') == \"1\"\nassert solution('3\\n5 1 -5') == \"-5\"\nassert solution('2\\n900 1000') == \"1100\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n10 5 0 -5 -10''') == '-15'\nassert solution('''4\n1 1 1 1''') == '1'\nassert solution('''2\n900 1000''') == '1100'\nassert solution('''3\n1 1 1 1''') == '1'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'NO'\n\n\"\"\"\nimport collections"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2\\n') == 'YES'\nassert solution('3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n') == 'YES'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n') == 'NO'\nassert solution('6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n') == 'NO'\nassert solution('3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n') == 'YES'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\nassert solution() == \"YES\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2\n1 3\n1 4\n2 5\n2 6''') == 'NO'\n\nassert solution('''5\n1 2\n1 3\n1 4\n2 5\n2 6''') == 'YES'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 2\n''') == 'YES'\nassert solution('''3\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'NO'\nassert solution('''5\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(samples[0]) == 'YES'\nassert solution(samples[1]) == 'YES'\nassert solution(samples[2]) == 'YES'\nassert solution(samples[3]) == 'NO'\nassert solution(samples[4]) == 'YES'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'NO'\nassert solution('5') == 'NO'\nassert solution('6') == 'YES'"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'NO'\nassert solution('6') == 'YES'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"YES\", \"expected: YES\"\nassert solution() == \"NO\", \"expected: NO\"\n'''\n\nclass Graph:\n    def __init__(self, nodes):\n        self.graph = [[] for _ in range(nodes)]\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n    def DFS(self, v, visited, parent):\n        visited[v] = True\n        parent[v] = -1\n        for i in range(len(self.graph[v])):\n            if visited[self.graph[v][i]] == False:\n                self.DFS(self.graph[v][i], visited, parent)\n        return"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\"\nassert solution([6, 3, 5]) == \"NO\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4\\n') == '0'\nassert solution('4\\n1 2 3 4\\n') == '1 2 3'\nassert solution('4\\n5 6 3 4\\n') == '2'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4\") == \"0\"\nassert solution(\"2 6\") == \"1\"\nassert solution(\"4 3\") == \"1\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('1 2 3') == '0'\nassert solution('2 6') == '2'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '0'"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1 2'\nassert solution('1 2') == '1 2'\nassert solution('3 3') == '0'\nassert solution('3 2') == '1'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('10') == '3'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 3\") == \"1\"\nassert solution(\"2 2 6\") == \"0\"\nassert solution(\"2 1 2 2 2 2\") == \"1\"\nassert solution(\"2 2 2 2 2 2\") == \"2\""
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 6') == '0'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 2 3\") == \"1\"\nassert solution(\"2 2 5\") == \"1 2 3\""
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\naaa\nccc\n''') == '6'\nassert solution('''5\naab\nccb\nabd\nbaa\nadb\n''') == '17'\n'''\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '6'\n\"\"\"\n\nN: int = int(input())\nS_1: str = input()\nS_2: str = input()\n\nboard = [[0]*N for _ in range(N)]\n\nfor i, char in enumerate(S_1):\n    board[i][0] = board[i][1] = 1\n\nfor i, char in enumerate(S_2):\n    board[i][-1] = board[i][-2] = 1\n\nfor row in board:\n    print(''.join(map(str, row)))\n\nprint(\n    (\n        abs(sum([board[0][i] for i in range(len(board))]) - sum([board[i][0] for i in range(len(board))])) + \n        abs(sum([board[i][-1] for i in range(len(board))]) - sum([board[i][-2] for i in range(len(board))]))\n    ) % 1000000007\n)\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(stdin) == '6'\n\"\"\"\nimport math\nimport re\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '6'\nassert solution('a') == '1'\nassert solution('aa') == '0'\nassert solution('ab') == '0'\nassert solution('aaa') == '1'\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\""
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([\"abc\", \"a\", \"a\"]) == \"abc\"\nassert solution([\"abc\", \"a\", \"a\", \"a\"]) == \"abc\"\nassert solution([\"abc\", \"a\", \"a\", \"a\", \"a\"]) == \"abc\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 6\n\n\n\"\"\"\n\n\nfrom itertools import product"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"YES\""
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 100 5\\n5 2 1 2 1\\n') == 'YES'\nassert solution('10 100 7\\n1 2 3 4 5 6 7\\n') == 'NO'\n\n--"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 10 5') == 'YES'\nassert solution('100 8 5') == 'NO'\nassert solution('100 100 7') == 'NO'"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 10 5\\n5 2 1 2 1') == 'YES'\nassert solution('10 10 7\\n1 2 3 4 5 6 7') == 'NO'\nprint(solution())\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\""
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 1 2 1\") == \"YES\"\nassert solution(\"100 8 5\") == \"NO\"\nprint(solution(input()))"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 10 5\\n5 2 1 2 1') == 'YES'\nassert solution('10 8 5\\n1 2 3 4 5 6 7') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''100 100 5\n5 2 1 2 1''') == 'YES'\nassert solution('''100 8 5\n1 2 3 4 5 6 7''') == 'NO'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 2') == '4'\nassert solution('7 6') == '3'\nassert solution('100 2') == '101'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 2\") == \"4\"\nassert solution(\"7 6\") == \"3\"\n\"\"\"\n\nfrom bisect import bisect_left\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 2\\n') == '4'\nassert solution('10 2\\n4 1 5 10\\n') == '4'\nassert solution('7 6\\n2 1 2 1\\n4 2 4 3\\n2 5 2 5\\n2 3 5 3\\n1 2 1 2\\n3 2 5 3\\n') == '3'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 5') == '1'\nassert solution('4 3') == '3'\nassert solution('10 3') == '4'\nassert solution('1 9') == '1'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"7 6\") == \"3\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 2\") == \"4\"\nassert solution(\"7 6\") == \"3\"\n'''"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 6') == '3', \"Wrong\"\nassert solution('10 2') == '4', \"Wrong\"\nassert solution('11 2') == '-1', \"Wrong\"\nassert solution('17 3') == '4', \"Wrong\"\nassert solution('9 8') == '-1', \"Wrong\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == '3'\nassert solution('''4 3\n1 4 5\n2 1 5\n1 4 2\n2 5 4\n''') == '4'\nassert solution('''5 2\n1 2\n3 1\n4 1\n4 1\n1 2\n''') == '4'\nassert solution('''6 3\n2 3\n1 2\n4 1\n2 1\n1 2\n3 1\n''') == '5'\nassert solution('''10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\n\nassert solution('''\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == '3'\n\nassert solution('''\n10 10\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '10'\n\nassert solution('''\n5 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 5 2 6 1\\n1 6\") == \"yes\"\nassert solution(\"5 3\\n1 5 2 6 1\\n1 6\") == \"no\"\nassert solution(\"5 3\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\\n10 3\\n1 2 3 4 5 6 7 8 9 10\") == \"yes\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"yes\"\nassert solution(\"5 1\") == \"no\"\nassert solution(\"5 2\") == \"yes\"\nassert solution(\"6\") == \"no\"\nassert solution(\"3 2\") == \"yes\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'no'\nassert solution('5') == 'yes'\nassert solution('10') == 'yes'\nassert solution('0') == 'yes'\nassert solution('2') == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3\\n1 5 2 6 1') == 'yes'\nassert solution('5 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\\n10 3\\n1 2 3 4 5 6 7 8 9 10') == 'yes'\nassert solution('5\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\\n10 3\\n1 2 3 4 5 6 7 8 9 10') == 'no'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\\n10 3\\n\") == \"yes\"\nassert solution(\"5 3\\n1 5 2 6 1\\n1 6\\n6\\n3 2\\n1 2 3\\n4 3\\n3 1 2 3\\n10 3\\n\") == \"no\""
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\n''')\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'yes'\n\nassert solution() == 'no'"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\nassert solution('''\n1 5\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 3\\n2 5') == '2'\nassert solution('4 2\\n1 4\\n2 4') == '3'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 3\\n2 5\\n4 5\\n\") == \"2\\n1 0 2 1 0\\n\"\n\nassert solution(\"4 2\\n1 4\\n2 4\\n\") == \"3\\n5 2 0 1\\n\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\""
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"1 4\") == \"5 2 0 1\""
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3''') == 'YES'\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n2 2 3\n\n2 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3''') == 'NO'\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3''') == 'NO'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 0 1\\n2 1 3\\n2 1 2\\n2 2 3\\n2 1 2 3\\n2 2 3\") == \"YES\"\nassert solution(\"2 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\") == \"NO\""
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 0 1\n2 1 3\n2 1 2\n2 2 3\n''') == \"NO\"\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == \"YES\"\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == \"NO\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 0 1\\n2 1 3\\n2 1 2\\n2 2 3') == 'NO'\n\nassert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3') == 'YES'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3 3\n1 0 1\n2 1 3\n2 1 2\n2 2 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n\"\"\") == \"NO\""
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 3') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n2 1 3\n2 2 3\n2 2 2\n''') == 'NO'\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n\n''') == 'YES'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n2 2 3\n''') == 'NO'\n\nassert solution('''\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'YES'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n\"\"\"\n\nn, m = map(int, stdin.split())\nrooms = list(map(int, stdin.split()))\nswitches = {}\n\nfor i in range(m):\n    s, r, e = map(int, stdin.split())\n    if s not in switches:\n        switches[s] = set()\n    switches[s].add(r)\n    if e not in switches:\n        switches[e] = set()\n    switches[e].add(r)"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('5 5') == 'NO'\nassert solution('5 5') == 'YES'"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"(#)((#)\") == \"2\"\nassert solution(\"()((#(#()\") == \"2\"\nassert solution(\"(#)\") == \"1\"\nassert solution(\"#\") == \"1\"\nassert solution(\"(())(\") == \"1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''()((#((#(#()''') == '2'\nassert solution('''(((#)((#)''') == '1'\nassert solution('''(())(#(#)''') == '-1'\nassert solution('''(((#)''') == '-1'"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''(((#)((#)''') == '1'\nassert solution('''()((#((#(#()''') == '2'\nassert solution('''((((#)''') == '-1'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('(((#)((#)') == \"1\"\nassert solution('()((#((#(#())') == \"2\"\nassert solution('#') == \"-1\"\nassert solution('(#)') == \"-1\"\nassert solution('(#()') == \"2\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"\") == \"-\"\nassert solution(\"#\") == \"-1\"\nassert solution(\"(#(#)\") == \"2\"\nassert solution(\"(()(#)\") == \"2\""
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution('()((#((#(#()') == '2'\nassert solution('#') == '-1'\nassert solution('(((((#((#)') == '2'\nassert solution('#(()') == '-1'"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''(((#)((#)\nInput\n(((#)((#)\nOutput\n1\n2\n\nInput\n()((#((#(#()\nOutput\n2\n2\n1\nInput\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"()((#((#(#()\") == \"2\"\nassert solution(\"#\") == \"-1\"\nassert solution(\"(#)\") == \"-1\"\nassert solution(\"(())\") == \"1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution('(()((#(#)') == '2'\nassert solution('(()((#(#)') == '2'\nassert solution('#') == '-1'\nassert solution('(())()') == '-1'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('(((#)((#)') == '1'\n\nassert solution('()((#((#(#)') == '2'\n\nassert solution('((((#((#)') == '2'\n\nassert solution('#') == -1\n\nassert solution('(#)') == -1"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3\n''') == '-1'\nassert solution('''\n0\n0\n''') == '-16'\nassert solution('''\n2\n2\n''') == '16'\n\nassert solution('''\n1\n1\n''') == '10'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"-16\"\nassert solution(\"0 4\") == \"-16\""
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '-16'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\nxoxox\n''') == '-1'\n\nassert solution('''4 0\nxoxox\n''') == '-16'\n\nassert solution('''0 4\nxoxox\n''') == '16'\n\nassert solution('''10 0\nxoxox\n''') == '0'\n\nassert solution('''10 0\nxoxox\n''') == '0'\n\n\n'''"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"xoxox\"\nassert solution(\"4 0\") == \"16\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\nassert solution('100000000') == '400000000000000000'\n\nstdin = input()\na, b = int(stdin.split()[0]), int(stdin.split()[1])\nprint(max(2**a**2 - 1**b**2, 2**b**2 - 1**a**2, 2**a**2 - 1**b**2, 2**b**2 - 1**a**2))\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"0\"\nassert solution(\"4 0\") == \"-1\"\nassert solution(\"0 4\") == \"-16\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"0 2\") == \"1\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\nprint(solution(input()))"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\nassert solution('0 0') == '-16'\nassert solution('2 2') == '-16'\n\n'''\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('2 2 2') == '17'\nassert solution('3 3 3') == '17'\nassert solution('4 4 4') == '17'\nassert solution('5 5 5') == '17'"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '17'"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"1 1 2\") == \"17\"\nassert solution(\"1 1 3\") == \"17\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == '17'\nassert solution(\"3 3 3\") == '17'\nassert solution(\"1 2 3\") == '16'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"2 2 2\") == \"12\"\nassert solution(\"3 3 3\") == \"6\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('1 1 2') == '1'\nassert solution('1 2 1') == '1'\nassert solution('2 2 2') == '2'\nassert solution('3 3 2') == '3'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('1 1 1') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('2 3 2') == '22'\nassert solution('3 3 3') == '17'\nassert solution('1 1 1') == '17'\nassert solution('4 5 5') == '23'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"2 2 2\") == \"35\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"2 2 2\") == \"3\"\nassert solution(\"1 1 2\") == \"5\"\nassert solution(\"1 1 2\") == \"8\"\nassert solution(\"1 1 1\") == \"11\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n1 2 1\n2 1 2\n''') == '2 2 2'\nassert solution('''2 2\n1 2\n3 4\n''') == '3 2'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n1 2 1\n2 1 2\n''') == '2 2 2'\nassert solution('''2 2\n1 2\n3 4\n''') == '3 2'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"2 2 2\\n2 2 2\\n\"\nassert solution(\"2 2\") == \"2 2 2\\n2 2 2\\n\"\nassert solution(\"2 1\") == \"2 2 2\\n2 2 2\\n\"\nassert solution(\"2 2\") == \"2 3 2\\n2 2 2\\n\"\nassert solution(\"3 3\") == \"3 3 3\\n3 2 2\\n3 2 2\\n3 2 2\\n\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 3], [1, 2, 1], [3, 4], ) == '2 2 2'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\n1 2 1\n2 1 2\n''') == '2 2 2'\nassert solution('''2 2\n1 2\n3 4\n''') == '3 2'\n\nassert solution('''2 2\n1 2\n3 4\n''') == '3 2'\nassert solution('''4 5\n2 1 3 4\n1 2 3\n1 2 3\n1 2 3\n''') == '5 3'\n\nassert solution('''5 5\n1 1 2 1 2\n1 1 1 2 1\n2 1 2 1 1\n1 2 3 1 2\n1 2 3 1 2\n1 2 3 1 2\n2 1 2 1 1\n2 1 1 1 2\n1 2 1 1 2\n1 2 1 1 2\n''') == '1 1 2 1 2'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\n1 2 1\n2 1 2\n3 4\n''') == '2 2 2 \nassert solution('''\n4 2\n1 2\n3 4\n''') == '3 2 \n'''\n\n'''\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nn, m = map(int, input().split())"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([2,3]) == \"2 2 2\"\nassert solution([2,2]) == \"2 2 2\"\nassert solution([3,4]) == \"3 2 2\"\nassert solution([2,1,2]) == \"2 2 2\"\nassert solution([1,2,1]) == \"2 2 2\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 2 1\\n2 1 2\\n') == '2 2 2\\n2 2 2\\n'\nassert solution('2 2\\n1 2\\n3 4\\n') == '2 3 \\n3 2 \\n'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 2\n1 2 1\n2 1 2\n1 3 1\n3 1 2\n''') == '2 3 2 \n\nassert solution('''\n3 3\n1 2 1\n2 1 2\n1 3 1\n3 1 2\n''') == '1 2 3 \n\nassert solution('''\n3 3\n1 2 1\n2 1 2\n1 3 1\n3 1 2\n''') == '2 3 2 \n\nassert solution('''\n3 3\n1 2 1\n2 1 2\n1 3 1\n3 1 2\n''') == '2 3 2 \n\nassert solution('''\n3 2\n1 2\n1 3 1\n''') == '2 2 2 "
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([2, 3]) == '2 2 2'\nassert solution([2, 2]) == '2 2 2'\nassert solution([1, 2]) == '1 2 2'\nassert solution([3, 4]) == '3 2 3'"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '332748119'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"332748119\"\nassert solution(input_) == \"160955686\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) in range(2)\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(test_case_01) == '332748119'\nassert solution(test_case_02) == '185138929'\nassert solution(test_case_03) == '974061117'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n''') == '3'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\nprint('all tests passed')\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '332748119'\nassert solution('1 2') == '332748119'\nassert solution('3 3') == '160955686'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''1 2\n1\n1\n''') == '160955686'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '974061117'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"332748119\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 2\") == \"1.3333333333\"\nassert solution(\"1 2\") == \"0.25\"\nassert solution(\"1 2\") == \"0.5\""
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"332748119\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '332748119'\nassert solution('''\n1 2\n0 1\n2 1\n''') == '160955686'\n'''"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '6'\nassert solution('3') == '11'\nassert solution('2') == '7'\nassert solution('1') == '8'\nassert solution('0') == '0'"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n3 1 5 2 6\n''') == '11'\nassert solution('''\n5\n1 2 3 4 5\n''') == '6'\nassert solution('''\n5\n1 100 101 100 1\n''') == '102'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2\n3\n''') == '11'\nassert solution('''3\n1 2 3\n2\n''') == '6'\nassert solution('''5\n3 1 5 2 6\n''') == '11'\nassert solution('''5\n1 2 3 4 5\n''') == '6'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '11'\nassert solution(input) == '6'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"5\") == \"6\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"11\""
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n3 1 5 2 6\n''') == '11'\n\nassert solution('''\n5\n1 100 101 100 1\n''') == '102'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"2\") == \"6\"\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('5') == '5'\nassert solution('1 100 101 100 1') == '102'\nassert solution('3 1 5 2 6') == '11'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 1 5 2 6\") == \"11\"\nassert solution(\"5\\n1 2 3 4 5\") == \"6\"\nassert solution(\"5\\n1 2 3 4 5\") == \"6\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 4\\n2 4\\n3 4\\n4 13\\n10 5\\n11 5\\n12 5\\n14 5\\n5 13\\n6 7\\n8 6\\n13 6\\n9 6') == 'Yes'\nassert solution('3 1\\n1 3\\n2 3') == 'No'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('14 2') == 'Yes'\nassert solution('3 1') == 'No'"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('14 2') == 'Yes'\nassert solution('3 1') == 'No'"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"14 2\") == \"Yes\"\nassert solution(\"3 1\") == \"No\"\n\"\"\"\n\nfrom collections import defaultdict\n\nn, k = map(int, input().split())\ngraph = defaultdict(set)\n\nfor _ in range(n-1):\n    u, v = map(int, input().split())\n    graph[u].add(v)\n    graph[v].add(u)"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''14 2\n1 4\n2 4\n3 4\n4 13\n10 5\n11 5\n12 5\n14 5\n5 13\n6 7\n8 6\n13 6\n9 6\n\n''') == 'Yes'\nassert solution('''3 1\n1 3\n2 3\n\n''') == 'No'\nassert solution('''5 1\n1 3\n2 3\n3 4\n4 5\n5 7\n6 7\n\n''') == 'No'"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n1 4\n2 4\n''') == \"Yes\"\nassert solution('''\n1 1\n1 2\n''') == \"No\""
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n1 3\n2 3\n''') == \"Yes\"\nassert solution('''\n1 3\n1 4\n2 4\n''') == \"No\"\nassert solution('''\n1 3\n2 4\n3 4\n''') == \"No\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"14 2\") == \"Yes\"\nassert solution(\"3 1\") == \"No\"\nassert solution(\"16 7\") == \"Yes\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations\n\nn, k = list(map(int, input().split()))\n\ngraph = defaultdict(list)\nfor _ in range(n-1):\n    u, v = list(map(int, input().split()))\n    graph[u].append(v)\n    graph[v].append(u)"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == 'Yes', f\"expected 'Yes' but got '{solution('2 2')}'\"\nassert solution('3 1') == 'No', f\"expected 'No' but got '{solution('3 1')}'\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('14 2') == 'Yes'\nassert solution('3 1') == 'No'\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"2 1\") == \"-1\"\nassert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 2') == '0'\nassert solution('3 5') == '0'\nassert solution('2 1') == '-1'\nassert solution('4 5') == '0'\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n.#.\n###\n##.\n''') == '1'\n\nassert solution('''\n4 2\n##\n.#\n##\n''') == '0'\n\nassert solution('''\n3 5\n.....\n.....\n.....\n''') == '0'\n\nassert solution('''\n2 1\n.\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\n\n------Submissions------\n1st: 371280202\n2nd: 362837111\n3rd: 282108736\n4th: 249992162\n5th: 886263034\n6th: 765187291\n7th: 468178702\n8th: 435739826\n9th: 516677959\n10th: 845389970\n11th: 882019034\n12th: 543663152\n13th: 543826192\n14th: 897299759\n15th: 897366344\n16th: 897448738\n17th: 847575924\n18th: 847602564\n19th: 847607267\n20th: 847600663\n21st: 846305098\n22nd: 846173570\n23rd: 846174470\n24th: 845605767\n25th: 845606490\n26th: 845606906\n27th: 845607696\n28th: 846037159\n29th: 846037270\n30th: 846037624\n31st: 846038015\n32nd: 846037657\n33rd: 846037678\n34th: 846037696\n35th: 846037695\n36th: 846037713\n37th: 846037738\n38th: 846037746\n39th: 846037766\n40th: 846037783\n41st: 846037833\n42nd: 846037846\n43rd: 846037856\n44th: 846037879\n45th: 846037896\n46th: 84603790\n47th: 84603791\n48th: 846037902\n49th: 846037911\n50th: 846037921\n51st: 846037927\n52nd: 846037949\n53rd: 846037979\n54th: 846037981\n55th: 846038003\n56th: 846038012\n57th: 846038018\n58th: 846038019\n59th: 846038027\n60th: 846038034\n61st: 846038053\n62nd: 846038063\n63rd: 846038081\n64th: 846038101\n65th: 846038109\n66th: 846038126\n67th: 846038130\n68th: 846038147\n69th: 846038173\n70th: 846038186\n71st: 846038209\n72nd: 846038228\n73rd: 846038258\n74th: 846038269\n75th: 846038298\n76th: 846038309\n77th: 846038336\n78th: 846038374\n79th: 846038381\n80th: 846038409\n81st: 846038427\n82nd: 846038429\n83rd: 846038439\n84th: 846038457\n85th: 846038483\n86th: 846038506\n87th: 846038556\n88th: 846038594\n89th: 846038610\n90th: 846038647\n91st: 846038649\n92nd: 846038669\n93rd: 846038677\n94th: 846038691\n95th: 846038713\n96th: 846038729\n97th: 846038749\n98th: 846038771\n99th: 846038789\n100th: 846038817\n101st: 846038838\n102nd: 846038851\n103rd: 846038867\n104th: 846038898\n105th: 846039012\n106th: 846039018\n107th: 846039031\n108th: 846039049\n109th: 846039061\n110th: 846039093\n111th: 846039104\n112st: 846039133\n113rd: 846039143\n114th: 846039158\n115th: 846039179\n116th: 846039204\n117th: 846039229\n118th: 846039258\n119th: 846039277\n120th: 846039297\n121st: 846039308\n122nd: 846039331\n123rd: 846039358\n124th: 846039383\n125th: 846039402\n126th: 846039448\n127th: 846039479\n128th: 846039514\n129th: 846039535\n130th: 846039569\n131st: 846039597\n132nd: 846039602\n133rd: 846039611\n134th: 846039633\n135th: 846039658\n136th: 846039688\n137th: 846039709\n138th: 8460"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"4 5\") == \"2\"\nassert solution(\"3 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'\nassert solution('3 3\\n#.\\n###') == '0'\nassert solution('4 2\\n##\\n##\\n##') == '2'\nassert solution('3 5\\n.....\\n.....\\n.....\\n') == '0'\n\n'''"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n.#.\n###\n##.\n\n''') == \"1\"\n\nassert solution('''\n4 2\n##\n.#\n##\n\n''') == \"-1\"\n\nassert solution('''\n3 5\n....\n....\n....\n\n''') == \"0\"\n\nassert solution('''\n2 1\n.\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 5\n0 0 0\n\n''') == 'YES'\nassert solution('''3 5\n0 0 0\n\n''') == 'YES'\nassert solution('''3 5\n0 0 0\n\n''') == 'NO'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 5\n0 0 0\n''') == 'YES'\nassert solution('''3 6\n1 2 2\n''') == 'YES'\nassert solution('''3 7\n0 0 0\n''') == 'NO'\nassert solution('''3 5\n0 0 0\n''') == 'NO'\nassert solution('''3 5\n0 0 0\n''') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"YES\\n5 4 2\"\nassert solution(\"4 3\") == \"YES\\n1 2 2 3\"\nassert solution(\"5 6\") == \"NO\"\nassert solution(\"3 5\") == \"YES\\n5 4 2\"\nassert solution(\"4 3\") == \"YES\\n1 2 2 3\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3\n0 0 0\n''') == 'YES'\n\nassert solution('''\n3 5\n10 10 10\n''') == 'YES'\n\nassert solution('''\n2 5\n0 0 0\n''') == 'NO'\n\nassert solution('''\n3 5\n10 10 10\n''') == 'YES'\n\nassert solution('''\n3 5\n5 4 2\n''') == 'YES'"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5') == 'NO'\nassert solution('3 10') == 'YES'\nassert solution('4 5') == 'YES'\nassert solution('5 6') == 'YES'\nassert solution('3 6') == 'NO'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3\n1 0 2 3\n''') == 'YES'\nassert solution('''\n3 10\n10 10 10\n''') == 'YES'\nassert solution('''\n5 6\n6 5 6 2 2\n''') == 'NO'\n\nassert solution('''\n3 5\n0 0 0\n''') == 'YES'\nassert solution('''\n3 5\n1 2 3\n''') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n1 0 2 3\n''') == 'YES'\nassert solution('''5 6\n6 5 6 2 2\n''') == 'NO'\nassert solution('''3 5\n0 0 0\n''') == 'YES'\nassert solution('''3 5\n0 0 0\n''') == 'NO'\nassert solution('''3 5\n0 0 0\n''') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 6\n10 10 10\n''') == 'YES'\n\nassert solution('''3 5\n0 0 0\n''') == 'YES'\n\nassert solution('''3 5\n0 0 0\n''') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"YES\""
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Input') == 'Output'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1 3'\nassert solution('2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2') == '3 2'"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n2\") == \"2\"\nassert solution(\"5\\n4 4 5 5 4 4 4 5 2 2\\n\") == \"5 4 4 5 4 4 4 4 5 2 2\""
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '4 3 6 2'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\n''') == '4 3 6 2'\nassert solution('''\n1\n42\n''') == '42'\nassert solution('''\n2\n1 1 1 1\n''') == '1 1'\nassert solution('''\n3\n1 2 3\n''') == '1 2 3'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1 3 2'\nassert solution() == '1 2'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n2\n1 1 1 1\n''') == '1 1'\nassert solution('''1\n1\n2\n1 1 1 1\n''') == '2 1'\nassert solution('''3\n4\n1 1 2 1\n''') == '1 2'\nassert solution('''4\n6\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 1 2 3\n\n1 2\n''') == '3 1 2'\nassert solution('''\n4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\n\n3 4\n2 1 2 3\n''') == '4 3 6 2'\n\nassert solution('''\n5\n4 4 3 5 7 4 3 2\n\n3 4\n5 5 5 5\n\n''') == '4 4 3 5'\n\nassert solution('''\n2\n1 1\n\n1 1\n''') == '1 1'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__) == '4 3 6 2'\n\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import product\nfrom typing import List, Tuple"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3\n\n3\n1 1\n2 1\n3 1\n''') == '6'\n\nassert solution('''4\n2 1\n2 2\n3 1\n3 2\n\n4\n1 1\n2 1\n3 1\n3 2\n''') == '5'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3\n''') == '3'\nassert solution('''4\n2 1\n2 2\n3 1\n3 2\n''') == '6'\nassert solution('''5\n1 1\n2 1\n3 1\n4 1\n5 1\n''') == '7'\nassert solution('''6\n2 1\n2 2\n3 1\n3 2\n4 1\n5 1\n''') == '6'\nassert solution('''7\n2 1\n3 1\n3 2\n4 1\n5 1\n6 1\n''') == '7'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 1\\n1 2\\n1 3') == '3'\nassert solution('2\\n1 1\\n2 1\\n3 1') == '6'\nassert solution('3\\n2 1\\n2 2\\n3 1') == '6'\nassert solution('4\\n2 1\\n3 1\\n2 2\\n3 1') == '6'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3\n''') == '3'\n\nassert solution('''4\n2 1\n2 2\n3 1\n3 2\n''') == '6'\n\n\n'''\n\n'''\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"7\"\nassert solution(\"6\") == \"4\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 3\n''') == '3'\nassert solution('''\n4\n2 1\n2 2\n3 1\n3 2\n''') == '6'\nassert solution('''\n4\n2 1\n2 2\n3 1\n3 2\n''') == '6'\n\n\"\"\""
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1\\n1 2\\n1 3\\n') == '3'\nassert solution('4\\n2 1\\n2 2\\n3 1\\n3 2\\n') == '6'\nassert solution('4\\n2 1\\n3 1\\n3 2\\n') == '5'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 1\n1 2\n1 3\n2 1\n2 2\n''') == '6'\n\nassert solution('''\n4\n2 1\n2 2\n3 1\n3 2\n''') == '6'\n\nassert solution('''\n3\n1 1\n1 2\n1 3\n''') == '3'\n\nassert solution('''\n8\n1 1\n2 1\n3 1\n3 2\n4 1\n4 2\n5 2\n5 3\n6 1\n6 2\n6 3\n''') == '3'\n\nassert solution('''\n5\n5 5\n5 5\n5 5\n5 5\n5 5\n''') == '1'"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1 1'\nassert solution('5') == '3 3'\nassert solution('5.1.5.1.5') == '-1'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == '1 1'"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\nEE.EE\\nE..E') == '-1'\nassert solution('5\\nEE.EE.E\\nE..E\\nE.E.E\\nE...E') == '3 3'\n\nNote that rows and columns are numbered 1 and 1 from top to bottom and left to right, respectively.\n\n\n'''\nn = int(input())\ngrid = []\nfor i in range(n):\n    row = input()\n    grid.append([char for char in row])\n\nrow_max_e = max([len(row) for row in grid])\ncol_max_e = max([len(col) for col in zip(*grid)])"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\nEEE\nE..\nE.E\nEE.E\nEE.EE''') == '4 4'\nassert solution('''3\nEEE\nE..\nE.E''') == '-1'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\nEE.EE\\nE..\\nE.EE\") == \"3 3\"\nassert solution(\"5\\nEE.EE.\\nE...E\\n.EE.E\\nEE.EE\") == \"4 4\"\nassert solution(\"10\\n.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E\") == \"10 2\"\nassert solution(\"10\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\") == \"10 3\"\nassert solution(\"2\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E\\n.E.E.E.E.E.E.E.E.E.E"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1 1'\nassert solution('3') == '1 3'\nassert solution('5') == '4 4'"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('.EE.EE.EE') == '1 3'\nassert solution('.E..EE.E.') == '1 2'\nassert solution('.EE.E.E.') == '2 2'\nassert solution('.EE.E.E.E') == '4 4'\nassert solution('.EE.EE.EEEE') == '-1'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"3\") == \"1 3\"\nassert solution(\"5\") == \"3 3\"\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\nEE.EE\\nE.EE.\\nE...E\\n.EE.E\\nEE.EE\") == \"3 3\"\nassert solution(\"5\\nEEE\") == \"-\""
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1 1\"\nassert solution(\"5\") == \"3 3\"\nassert solution(\"2\") == \"1 3\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 2\n10 -1 2 2 2 2 2 2 -1 10\n''') == '32'\nassert solution('''\n5 10\n-1 -1 -1 -1 -1\n''') == '-1'\n\n'''\n\nfrom math import inf\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 2\n-1 -1 -1 -1 -1''') == '32'\nassert solution('''10 2\n10 -1 2 2 2 2 2 -1 10''') == '32'\nassert solution('''5 10\n-1 -1 -1 -1 -1''') == '-1'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '32'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10') == '-1'\nassert solution('10 -1') == '10'\nassert solution('10 -1') == '10'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 10\\n-1 -1 -1 -1 -1\") == \"32\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '32'\nassert solution('10 2') == '32'\nassert solution('10 -1') == '-1'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '32'\nassert solution('1\\n5 -1 -1 -1 -1') == '-1'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10') == '32'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"32\"\nassert solution([10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5') == '6'\nassert solution('10 -1 2 2 2 2 2 2 -1 10') == '32'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n1 1 1\") == \"3\"\nassert solution(\"4 2 3\\n1 2 4 8\\n\") == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([3, 1, 2]) == '3'\nassert solution([4, 2, 3]) == '79'\nassert solution([4, 2, 3]) == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\"\n\nimport sys\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\"\nassert solution(\"5 4 2 3\") == \"21\"\nassert solution(\"8 4 2 3\") == \"72\""
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 1 2\n1 1 1\n\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 2 3\n1 2 4 8\n\n\"\"\") == \"79\"\nassert solution(\"\"\"\n5 2 3\n1 2 4 8\n\n\"\"\") == \"9\"\nassert solution(\"\"\"\n5 1 2\n1 2 3\n\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 2 4\n1 2 3\n\n\"\"\") == \"9\""
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 1 2\n1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 2 3\n1 2 4 8\n\"\"\") == \"79\"\nassert solution(\"\"\"\n3 1 2\n1 2 3\n\"\"\") == \"3\""
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 2') == '3'\nassert solution('4 2 3') == '79'"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 3\"\n    ) == \"7 7 7\"\nassert solution(\n    \"3 3\"\n    ) == \"7 7 7\"\nassert solution(\n    \"3 3\"\n    ) == \"7 7 7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '7'\nassert solution('4 2') == '7'\nassert solution('3 3') == '7'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"7\\n7\\n4\\n7\\n7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '7'\nassert solution('4 2') == '7'\nassert solution('3 2') == '4'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '7'\nassert solution('1 2') == '7'\nassert solution('1 1 1') == '4'\nassert solution('2 2 2') == '4'\nassert solution('2 2 2 1 1 2 2') == '1'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '7'\nassert solution('4 4') == '7'\nassert solution('5 5') == '4'"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"7\"\nassert solution(\"4 5\") == \"4\"\nassert solution(\"6 5\") == \"7\"\nassert solution(\"4 7\") == \"4\"\nassert solution(\"5 7\") == \"7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == '7'\nassert solution(\"1 2\") == '7'\nassert solution(\"5 2\") == '4'\n\"\"\"\n\nimport math\n\nwhile True:\n    try:\n        K, N = map(int, input().strip().split())\n        if K == 0 and N == 0:\n            break\n        else:\n            print(sum([i for i in range(1, N + 1) if sum(i % j for j in range(1, K + 1)) % 998244353 == 1]))\n    except EOFError:\n        break\n\n\"\"\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"7\\n7\\n4\\n7\\n7\\n\"\nassert solution(\"1 1\") == \"1\\n1\\n\"\nassert solution(\"2 2\") == \"2\\n2\\n\"\nassert solution(\"2 3\") == \"4\\n4\\n\"\nassert solution(\"3 3\") == \"7\\n7\\n4\\n7\\n7\\n\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"7 7 7\"\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7 2\") == '6'\nassert solution(\"9 3\") == '9'\nassert solution(\"8 3\") == '6'\n\n\n\n\"\"\""
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 2\\n1 5 6 2\\n1 3\\n3 2\\n4 5\\n3 7\\n4 3\\n4 6\\n') == '6'\n\nassert solution('9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8\\n') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 2\\n1 5 6 2\\n1 3') == '6'\nassert solution('9 3\\n3 2 1 6 5 9\\n8 9\\n3 2') == '9'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\n1 3\n2 2\n4 2\n3 4\n''') == '6'\nassert solution('''9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n''') == '9'\nassert solution('''7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n''') == '6'\nassert solution('''7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n''') == '6'\nassert solution('''7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n''') == '6'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n''') == '6'\nassert solution('''9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n''') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\nassert solution('9 3') == '12'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 2\\n1 5 6 2') == '6'\nassert solution('9 3\\n3 2 1 6 5 9') == '9'\nassert solution('10 3\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6\"\nassert solution(\"7 2\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8\") == \"9\"\n\n'''"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n''') == '6'\nassert solution('''\n9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n''') == '9'\nassert solution('''\n5 2\n1 2\n3 4\n5 6\n2 4\n3 5\n''') == '7'\nassert solution('''\n9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n''') == '7'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1010\n1 0\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n0 0\n''') == '3'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0010001\n''') == '1 1 1 1 1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"001101\") == \"3 1 3 4\"\nassert solution(\"111\") == \"-1\"\n\nassert solution(\"011101\") == \"3 1 3 4\"\nassert solution(\"011100\") == \"3 1 3 4\"\nassert solution(\"011100\") == \"3 1 3 4\""
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'\nassert solution('1011') == '2 1 4'\nassert solution('1111') == '4 1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n00 1 01 0 1\n''') == '3 1 3 4'\nassert solution('''\n00 1 01 0 1\n1 1 0 1\n''') == '3 2 5 6'\nassert solution('''\n00 1 01 0 1\n0 0 1 1\n''') == '3 2 5 6'\nassert solution('''\n00 1 01 0 1\n0 0 1 1\n1 1 0 1\n''') == '3 2 5 6'"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"3\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '3 1 3 4'\nassert solution('0010100') == '3 1 3 4'\nassert solution('100101010') == '-1'\nassert solution('101010') == '1 5 6 7'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"111\") == '3 2 5 6'\nassert solution(\"0010100\") == '3 1 3 4'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n0\n1\n1\n0\n0\n1\n0\n0\n1\n0\n1\n0\n1\n0\n1\n1\n0\n1\n1\n0\n1\n0\n1\n1\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n1\n1\n1\n0\n0\n1\n1\n1\n1\n0\n0\n1\n1\n0\n1\n1\n1\n1\n0\n1\n1\n0\n1\n0\n1\n1\n1\n0\n1\n0\n1\n0\n1\n1\n1\n0\n1\n0\n1\n1\n1\n1\n0\n1\n1\n1\n1\n1\n0\n1\n1\n1\n0\n1\n0\n1\n0\n1\n1\n0\n1\n0\n1\n0\n1\n1\n0\n1\n1\n1\n0\n1\n1\n1\n1\n0\n1\n1\n1\n1\n0\n1\n0\n1\n1\n1\n0\n1\n1\n1\n0\n0\n1\n1\n1\n0\n1\n1\n1\n0\n1\n1\n0\n1\n1\n0\n0\n0\n1\n1\n1\n0\n0\n0\n1\n1\n0\n1\n0\n1\n0\n1\n1\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n0\n1\n1\n1\n0\n1\n0\n1\n0\n1\n0\n1\n1\n1\n0\n0\n0\n1\n1\n1\n0\n0\n0\n1\n1\n1\n0\n0\n0\n0\n0\n1\n1\n1\n0\n1\n1\n1\n1\n0\n1\n0\n1\n0\n0\n1\n1\n0\n0\n1\n0\n0\n0\n1\n0\n0\n1\n0\n1\n0\n0\n0\n0\n1\n0\n1\n1\n1\n0\n0\n0\n0\n1\n0\n1\n0\n1\n0\n0\n1\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n0\n1\n0\n0\n0\n0\n1\n1\n1\n1\n0\n1\n1\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n1\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n1\n0\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n1\n1\n1\n0\n1\n1\n0\n1\n0\n1\n0\n1\n0\n1\n1\n1\n1\n0\n1\n0\n0\n0\n1\n1\n1\n1\n0\n0\n0\n1\n1\n1\n1\n0\n0\n1\n1\n1\n1\n0\n0\n1\n0\n0\n0\n1\n0\n1\n0\n1\n1\n1\n1\n0\n1\n0\n1\n1\n0\n1\n0\n1\n0\n1\n0\n0\n0\n1\n1\n1\n1\n1\n1\n1\n0\n0\n1\n0\n0\n1\n1\n1\n0\n1\n0\n0\n0\n0\n1\n1\n0\n0\n0\n1\n1\n0\n1\n0\n0\n0\n1\n0\n1\n1\n0\n0\n0\n0\n1\n0\n0\n1\n0\n1\n1\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n1\n1\n1\n0\n0\n1\n0\n1\n1\n1\n0\n1\n1\n0\n0\n1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n1\n1\n1\n0\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n1\n1\n1\n1\n0\n0\n0\n1\n1\n0\n1\n0\n0\n1\n0\n1\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 5\n2 1 2\n2 3 4\n3 5 6 7\n''') == '1'\nassert solution('''\n2 4\n2 1 2\n3 2 3 4\n''') == '2'\nassert solution('''\n3 7\n2 1 2\n2 3 4\n3 5 6 7\n''') == '24'"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"1\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n2 1 2\n2 2 3\n\n''') == '1'\nassert solution('''1 3\n3 1 2 3\n\n''') == '1'\nassert solution('''2 4\n2 1 2\n3 2 3 4\n\n''') == '2'\nassert solution('''3 7\n2 1 2\n2 3 4\n3 5 6 7\n\n''') == '24'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n2 1 2\\n2 2 3') == '1'\nassert solution('1 3\\n3 1 2 3\\n2 1 2') == '1'\nassert solution('2 4\\n2 1 2\\n3 2 3 4\\n3 2 3 4\\n4 2 4 3 1\\n4 1 2 3\\n1 2 2 3\\n1 1 2 3') == '3'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1'\nassert solution('2 4') == '2'\nassert solution('3 7') == '24'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 5\n2 1 2\n2 2 3\n3 2 3 4\n''') == '1'\nassert solution('''\n3 4\n2 1 2\n2 3 4\n3 2 3 4\n''') == '2'\nassert solution('''\n3 6\n2 1 2\n2 3 4\n3 2 3 4\n3 5 6 7\n''') == '24'\nassert solution('''\n4 5\n2 1 2\n2 3 4\n3 2 3 4\n3 5 6 7\n''') == '36'\nassert solution('''\n6 7\n2 1 2\n2 3 4\n3 2 3 4\n3 5 6 7\n''') == '42'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"1\"\n\nassert solution(\"1 3\") == \"1\"\n\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 3\n2 1 2\n2 2 3\n\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 3\n3 1 2 3\n\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 4\n2 1 2\n3 2 3 4\n\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\n2 1 2\\n2 2 3') == '1'\nassert solution('1 3\\n3 1 2 3') == '6'\nassert solution('2 4\\n2 1 2\\n3 2 3 4') == '2'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n2 1 2\\n2 2 3\\n') == '1'\nassert solution('1 3\\n3 1 2 3\\n') == '6'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '6'\nassert solution() == '6'"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\nassert solution() == '6'\nassert solution() == '7'\nassert solution() == '6'\nassert solution() == '5'\n\"\"\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 4 2 3 1') == '3'\nassert solution('4 1 2 3 1') == '4'\n'''\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1 4 2 3 1\n''') == '3'\nassert solution('''4\n1 5 4 7\n''') == '6'\n'''\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 4 2 3 1') == '3'\nassert solution('4\\n1 5 4 7') == '6'\nassert solution('5\\n1 4 2 3 1') == '3'\n\n\"\"\""
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 4 2 3 1\n''') == '3'\nassert solution('''\n4\n1 5 4 7\n''') == '6'\nassert solution('''\n5\n1 4 2 3 1\n''') == '3'\nassert solution('''\n6\n1 5 4 7\n''') == '6'\nassert solution('''\n7\n0 1 3 0 4 2 0\n''') == '0'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3\n    1 4 2 3 1\n    ''') == '3'\n    assert solution('''\n    4\n    1 5 4 7\n    ''') == '6'\n\n'''"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 4 2 3 1\n''') == '3'\nassert solution('''\n4\n1 5 4 7\n''') == '6'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'\nassert solution([1, 2, 3, 4, 5]) == '6'\nassert solution([1, 5, 4, 7]) == '6'\nassert solution([1, 1, 1, 1]) == '1'\nassert solution([1, 2, 2, 2, 2]) == '3'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"20\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '4'\nassert solution('''\n4\n1 1 2 3\n''') == '20'\nassert solution('''\n5\n1 1 1 1 1\n''') == '62'"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n2 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n6\n1 1 2 2 1 2\n\"\"\") == \"6\"\nassert solution(\"\"\"\n9\n1 1 1 2 2 1 2 1 1\n\"\"\") == \"11\"\nassert solution(\"\"\"\n12\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"22\"\nassert solution(\"\"\"\n13\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"11\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '''\n    3\n    1 1 2\n    '''\n    ) == '4'\n    assert solution(\n    '''\n    4\n    2 2 2 3\n    '''\n    ) == '6'\n    assert solution(\n    '''\n    5\n    1 1 1 1 1\n    '''\n    ) == '1'\n    print('You passed the test!')"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '4'\nassert solution('5') == '62'\nprint(solution(input()))\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2\n''') == '4'\nassert solution('''\n1 1 1 1 1\n''') == '20'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n1 2') == '4'\nassert solution('4\\n1 1 2 3') == '20'\nassert solution('5\\n1 1 1 1 1') == '62'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\") == \"4\"\nassert solution(\"4\\n1 1 2 3\") == \"20\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '4'\nassert solution('3') == '6'\nassert solution('4') == '20'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()[:-1]"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '7'\nassert solution('3') == '7'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '7'\nassert solution('1') == '1'\nassert solution('1 1') == '2'\nassert solution('1 1 1') == '2'\nassert solution('1 1 1 1') == '2'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1\n1 1\n1 1''') == '6'\nassert solution('''4\n1 2\n2 1\n3 5\n5 3''') == '15'\nassert solution('''1\n5 6''') == '7'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1\\n 1 1\\n 1 1\\n 1 1\\n 1 1') == '6'\nassert solution('4 1\\n 2 5\\n 3 2\\n 4 2\\n 5 2') == '7'\nassert solution('3 1\\n 1 1\\n 1 1\\n 1 1') == '1'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1\\n1 1\\n1 1\\n') == '6'\nassert solution('4\\n1 2\\n2 1\\n3 5\\n5 3\\n') == '15'\nassert solution('1\\n5 6\\n') == '7'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n2 1\n1 1\n''') == '6'\nassert solution('''\n3\n1 2\n2 1\n3 5\n5 3\n''') == '15'\nassert solution('''\n1\n5 6\n''') == '7'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3 4\") == \"4\"\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '7'\nassert solution('5') == '7'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1\\n1 1\\n1 1') == '6'\nassert solution('4\\n1 2\\n2 1\\n3 5\\n5 3') == '15'\nassert solution('1\\n5 6') == '7'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2\n2 1\n3 5\n5 3\n''') == '15'\nassert solution('''1\n5 6\n''') == '7'\nassert solution('''1\n5 2\n''') == '6'"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '6'\n\n\"\"\""
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n2\n10 1\n10''') == '1'\n\nassert solution('''2\n1\n4 4\n2\n''') == '3'\n\nassert solution('''3\n3 3\n10 10 10\n17\n''') == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n\n4\n\n2\n\n''') == '1'\nassert solution('''\n2\n1\n\n4 4\n\n2\n\n''') == '3'\nassert solution('''\n3\n3 3\n\n10 10 10\n\n17\n\n''') == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n2\n''') == '1'\nassert solution('''3\n3\n''') == '3'\nassert solution('''5\n1\n''') == '1'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n''') == '1'\nassert solution('''\n2\n''') == '1'\nassert solution('''\n3\n''') == '1'\nassert solution('''\n4\n''') == '1'\nassert solution('''\n10\n''') == '2'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n1\\n4 4') == '3\\n'\nassert solution('2\\n1\\n4 4') == '3\\n'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"6\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\", \"First\"\nassert solution(\"2\") == \"3\", \"Second\"\nassert solution(\"3\") == \"6\", \"Third\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    1\n    \n    4\n    2\n    ''') == '1'\n\nassert solution('''\n    2\n    \n    4 4\n    2\n    ''') == '3'\n\nassert solution('''\n    3\n    \n    3 3\n    10 10 10\n    17\n    ''') == '6'"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2\n''') == '0'\nassert solution('''\n3\n5\n4\n''') == '0'\nassert solution('''\n3\n6\n5\n''') == '1'\nassert solution('''\n3\n6\n5\n''') == '1'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3 4\") == \"4\"\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"0\""
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 100\") == \"10\"\nassert solution(\"3 6 5 1000000007\") == \"0\"\nassert solution(\"3 5 6 11\") == \"0\"\nassert solution(\"6 9 12 17\") == \"3\"\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 3 100\n1 1 1\n''') == '10'\nassert solution('''3 6 5 1000000007\n1 2 1\n''') == '0'"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3 3 100''') == '10'\nassert solution('''3 6 5 1000000007''') == '0'\nassert solution('''4 3 3 2''') == '10'\nassert solution('''4 5 6 2''') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1 1\n''') == '10', 'wrong answer'\n\nassert solution('''\n3 5 6 11\n1 2 1\n''') == '0', 'wrong answer'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 6 5 1000000007\n1 2 1\n''') == '0'\n\nassert solution('''\n3 3 3 100\n1 1 1\n''') == '10'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 3 6 11\n1 2 1\n''') == '0'\nassert solution('''2 3 5 1\n1 2\n''') == '3'\nassert solution('''3 3 3 11\n1 2 1\n''') == '0'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('4 5 6') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 1 2 3\") == \"NO\"\nassert solution(\"3 3 2 3\") == \"NO\""
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2 2 3\nintel\ncode\nch allenge\n\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\n5\n1 2 3 4\nc\nd\ne\n\n''') == \"YES\"\nassert solution('''\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\n''') == \"NO\"\nassert solution('''\n3\n1 2 3\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\n5\n1 2 3 4\nc\nd\ne\n\n''') == \"YES\"\nassert solution('''\n5\n1 2 3 4\nc\nd\ne\n\n''') == \"NO\"\nassert solution('''\n7\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\n8\n1 2 3 4\nc\nd\ne\n\n9\n1 2 3 4\na\nbcdefghi\njklmnopqrstu\n\n10\n1 2 3 4\nc\nd\ne\n\n''') == \"NO\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 2 3\\nintel\\ncode\") == \"YES\"\nassert solution(\"4\\n1 2 3 1\\na\\nbcdefghi\\njklmnopqrstu\\nvwxyz\") == \"NO\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n2 2 3\nintel\ncode\nch allenge\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n3\n2 2 3\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\"\"\") == \"NO\""
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 1 2 3') == 'YES'\nassert solution('4 1 1 1') == 'YES'\nassert solution('3 1 1 1') == 'NO'\nassert solution('4 2 2 3') == 'NO'\nassert solution('2 2 3') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"4 1 2 3\") == \"NO\"\nassert solution(\"5 1 1 3\") == \"YES\"\nassert solution(\"6 1 2 3\") == \"NO\"\nassert solution(\"7 1 2 3\") == \"YES\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2 2 3\\nintel\\ncode\\nch allenge') == 'YES'\nassert solution('4\\n1 2 3 1\\na\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\\nk\\nl\\nm\\no\\np\\q\\r\\s\\t\\n') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\""
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '26'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n3 1 5\n''') == '26'\nassert solution('''1\n10\n''') == '10'"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"26\"\nassert solution(\"1\") == \"10\"\nassert solution(\"1\") == \"10\"\nassert solution(\"10\") == \"10\"\n\n\n\"\"\"\n\nn = int(input())\nd = {i: 0 for i in range(1, n + 1)}\n\nfor _ in range(int(input())):\n    a, b = map(int, input().split())\n    d[a] += b\n    d[b] += a\n\ns = 0\nfor i in range(1, n + 1):\n    s += d[i]\nprint(s)\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '26'\nassert solution('1') == '10'"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '26'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n3 1 5\n\"\"\") == \"26\"\nassert solution(\"\"\"\n1\n10\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3 1 5''') == '26'\nassert solution('''1\n10''') == '10'"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"26\"\nassert solution(\"1\") == \"10\""
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n3 1 5\n''') == '26'\nassert solution('''1\n10\n''') == '10'\nassert solution('''2\n5\n1\n''') == '26'\nassert solution('''7\n2 1 6 8 4 1\n''') == '19'\nassert solution('''2\n7\n1\n''') == '29'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n3 1 5\n3 2 6\n5 2 7\n5 3 9\n''') == \"26\"\nassert solution('''1\n4 5\n4 3 9\n4 4 1\n''') == \"33\"\nassert solution('''1\n3\n3 2 9\n3 4 1\n''') == \"33\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 3 5\") == \"3\"\nassert solution(\"3 40\") == \"32\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 4\n1 3 5\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 40\n10 30 50\n\"\"\") == \"32\"\n\nassert solution(\"\"\"\n3 5\n2 3 4 5\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 50\n5 15 30\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3 50\n10 10 10 10\n\"\"\") == \"1\""
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4\\n1 3 5') == '3'\nassert solution('3 40\\n10 30 50') == '32'"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4\n1 3 5''') == '3'\nassert solution('''3 40\n10 30 50''') == '32'\n\nprint(solution('''3 4\n1 3 5\n'''))\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 4\n1 3 5\n''') == '3'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 4\n1 3 5\n''') == '3'\nassert solution('''3 40\n10 30 50\n''') == '32'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 4\\n1 3 5\\n\") == \"3\"\nassert solution(\n    \"3 40\\n10 30 50\\n\") == \"32\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3, 4], '1 3 5') == 3\nassert solution([3, 40], '10 30 50') == 32\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"3 40\") == \"32\""
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 4\n1 3 5\n\"\"\") == \"3\"\n\nassert solution(\"\"\"3 40\n10 30 50\n\"\"\") == \"32\"\n\nassert solution(\"\"\"1\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1 4'\nassert solution('5 1') == '1 2 4 5 6 7 8 9'\nassert solution('5 1') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 1') == '1 1'\nassert solution('5 1') == '1 1 4 5'\nassert solution('1 1') == '1 1'\nassert solution('5 1') == '1 1 4 5'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 1\n1 1\n3 3\n3 3\n4 4\n4 4\n''') == '1 2 4'\nassert solution('''\n4 1\n1 1\n3 3\n3 3\n4 4\n4 4\n''') == '1 2 4'\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n''') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n\"\"\") == \"1 2 4\"\nassert solution(\"\"\"\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n\"\"\") == \"1 2 4\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1 4\"\nassert solution(\"5 1\") == \"1 2 3 4 5\"\nassert solution(\"2 1\") == \"1 2\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 1\n1 1\n3 3\n3 3\n4 4''') == '1 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4''') == '1 2'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4''') == '1 2 3 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1 2 4\""
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1 4 5 6 7 8 9'\nassert solution('5 1') == '1 4 5 6 7 8 9'\nassert solution('10 1') == '1 2 4 5 6 7 8 9 10 11 12 13 14'\nassert solution('20 1') == '1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n''') == '1 4 5 6 7 8 9'\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\nSample Output 3:\n1 2\n''') == '1 2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\n\n\nstdin = \"\"\"\n4 2\n1 2\n2 3\n3 4\n\"\"\"\nimport sys\nimport io\n\nsys.stdin = io.StringIO(stdin.strip())\nsolution()\nsys.stdin = sys.__stdin__\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n2 1\n1 2.0\n1 3.100\n''') == '1'\nassert solution('''\n3 3\n1 5.0\n2 5.5\n3 6.0\n''') == '0'\nassert solution('''\n6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n''') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"6 3\") == \"2\""
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\n2 1\n1 2.0\n1 3.100\n''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0\n''') == '0'\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n''') == '2'\nassert solution('''7 7\n1 3.75\n2 4.5\n3 2.25\n4 2.5\n5 1.75\n6 3.25\n7 2.75\n''') == '3'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2\n2 1\n1 2.0\n1 3.100''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0''') == '0'\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125''') == '2'"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2\n2 1\n1 2.0\n1 3.100''') == '1'\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125''') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 2\n2 1\n1 2.0\n1 3.100\n\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n3 3\n1 5.0\n2 5.5\n3 6.0\n\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n\n\"\"\"\n) == \"2\""
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('6 3') == '2'"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'\n\nstdin = \"\"\"\n4 3\n1 2.0\n2 5.5\n1 5.0\n3 4.0\n1 7.0\n1 8.0\n\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 2\\n2 3 6 5 4 10') == '3'\n\"\"\"\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 2\\n2 3 6 5 4 10') == '3'\nassert solution('6 5 4 2 3 10\\n1 5 4 3 2 10') == '2'"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '3'\nassert solution('6 2') == '3'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 2\\n2 3 6 5 4 10') == '3'\nassert solution('6 2\\n6 2 1 4 5 6') == '1'\nassert solution('6 2\\n6 2 1 5 6') == '2'\nassert solution('6 2\\n6 2 1 5 6') == '1'\nassert solution('6 2\\n6 2 1 5 6') == '2'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 2\\n2 3 6 5 4 10') == '3'"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n2 3 6 5 4 10\") == \"3\"\nassert solution(\"6 3\\n2 3 6 5 4 10\") == \"3\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 2\n2 3 6 5 4 10\n''') == '3'\nassert solution('''\n1 2\n1\n''') == '1'\nassert solution('''\n1\n5\n''') == '1'\nassert solution('''\n6\n10\n''') == '1'\nassert solution('''\n6\n10\n''') == '2'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"1\"\nassert solution(\"6 5\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4 6\") == \"2\"\nassert solution(\"6 7\") == \"2\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"2 4 6\") == \"3\"\nassert solution(\"2 3 4\") == \"2\"\n\n--\n\nn,k=map(int,input().split())\na=list(map(int,input().split()))\nm=[]\nfor i in range(len(a)):\n    m.append((i+1,a[i]))\nm.sort(key=lambda x:x[1]*k)\nm.sort(key=lambda x:x[0])\nprint(len(set([x[1] for x in m])))\n--\n\nn,k=map(int,input().split())\na=list(map(int,input().split()))\nm=[]\nfor i in range(len(a)):\n    m.append((i+1,a[i]))\nm.sort(key=lambda x:x[1]*k)\nm.sort(key=lambda x:x[0])\nprint(len(set([x[1] for x in m])))\n\n---\n\nn,k=map(int,input().split())\na=list(map(int,input().split()))\nm=[]\nfor i in range(len(a)):\n    m.append((i+1,a[i]))\nm.sort(key=lambda x:x[1]*k)\nm.sort(key=lambda x:x[0])\nprint(len(set([x[1] for x in m])))\n\n---\n\nn,k=map(int,input().split())\na=list(map(int,input().split()))\nm=[]\nfor i in range(len(a)):\n    m.append((i+1,a[i]))\nm.sort(key=lambda x:x[1]*k)\nm.sort(key=lambda x:x[0])\nprint(len(set([x[1] for x in m])))\n\n\n\n---\nn,k=map(int,input().split())\na=list(map(int,input().split()))\nm=[]\nfor i in range(len(a)):\n    m.append((i+1,a[i]))\nm.sort(key=lambda x:x[1]*k)\nm.sort(key=lambda x:x[0])\nprint(len(set([x[1] for x in m])))\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''\n    2\n    1 2\n    '''\n    ) == '2'\n\nassert solution(\n    '''\n    3\n    1 2 1 3\n    '''\n    ) == '4'\n\nassert solution(\n    '''\n    9\n    1 2 1 3 2 2 2 2 3\n    '''\n    ) == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 2 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n1 2 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n7\n1 2 1 3 2 2 2\n\"\"\") == \"7\"\nassert solution(\"\"\"\n9\n1 2 1 3 2 2 2 2 3\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 2''') == '2'\nassert solution('''3\n1 2 1''') == '4'\nassert solution('''9\n1 2 1 3 2 2 2 2 3''') == '10'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '4'\nassert solution('9') == '10'\nassert solution('0') == '0'\nassert solution('1') == '1'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_stdin) == \"4\""
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('9') == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '10'\nassert solution('''5\n1 2 3 4 5''') == '10'\nassert solution('''5\n1 2 3 4 5''') == '10'\nassert solution('''5\n1 2 3 4 5''') == '10'\nassert solution('''5\n1 2 3 4 5''') == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '4'\nassert solution('2 3 1') == '3'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 1 3 2 2 2 2 3\") == \"4\"\nassert solution(\"9\\n1 2 1 3 2 2 2 2 3\") == \"10\""
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n1 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n1 2 1 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n9\n1 2 1 3 2 2 2 2 3\n\"\"\") == \"10\""
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(4) == '4'\n\"\"\""
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '5'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '4'\nassert solution('4') == '8'\nassert solution('5') == '16'\nassert solution('6') == '32'\nassert solution('7') == '64'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\n\"\"\"\nfrom math import sqrt, ceil, floor"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2''') == '4'\n\nassert solution('''4''') == '8'\n\nassert solution('''10''') == '48'\n\nassert solution('''15''') == '24'"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"10\") == \"44\"\nassert solution(\"1000\") == \"129645\"\n\n===============================================\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2''') == '4'\nassert solution('''3''') == '0'\nassert solution('''5''') == '7'\nassert solution('''1000000000''') == '8'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"6\") == \"7\""
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 4\\n1 5 1 4\\n\") == \"5\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '5'\nassert solution('7 8') == '4'\n\n---\n\nSnuke is buying a lamp. The light of the lamp can be adjusted to m levels of brightness, represented by integers from 1 through m, by the two buttons on the remote control.\nThe first button is a \"forward\" button. When this button is pressed, the brightness level is increased by 1, except when the brightness level is m, in which case the brightness level becomes 1.\nThe second button is a \"favorite\" button. When this button is pressed, the brightness level becomes the favorite brightness level x, which is set when the lamp is purchased.\nSnuke is thinking of setting the favorite brightness level x so that he can efficiently adjust the brightness.\nHe is planning to change the brightness n-1 times. In the i-th change, the brightness level is changed from a_i to a_{i+1}. The initial brightness level is a_1.\nFind the number of times Snuke needs to press the buttons when x is set to minimize this number.\n\n-----Constraints-----\n - 2 \\leq n,m \\leq 10^5\n - 1 \\leq a_i\\leq m\n - a_i \\neq a_{i+1}\n - n, m and a_i are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn m\na_1 a_2 \u2026 a_n\n\n-----Output-----\nPrint the minimum number of times Snuke needs to press the buttons.\n\n-----Sample Input-----\n4 6\n1 5 1 4\n\n-----Sample Output-----\n5\n\nWhen the favorite brightness level is set to 1, 2, 3, 4, 5 and 6, Snuke needs to press the buttons 8, 9, 7, 5, 6 and 9 times, respectively.\nThus, Snuke should set the favorite brightness level to 4.\nIn this case, the brightness is adjusted as follows:\n - In the first change, press the favorite button once, then press the forward button once.\n - In the second change, press the forward button twice.\n - In the third change, press the favorite button once.\n\n---\n\nSnuke is buying a lamp. The light of the lamp can be adjusted to m levels of brightness, represented by integers from 1 through m, by the two buttons on the remote control.\nThe first button is a \"forward\" button. When this button is pressed, the brightness level is increased by 1, except when the brightness level is m, in which case the brightness level becomes 1.\nThe second button is a \"favorite\" button. When this button is pressed, the brightness level becomes the favorite brightness level x, which is set when the lamp is purchased.\nSnuke is thinking of setting the favorite brightness level x so that he can efficiently adjust the brightness.\nHe is planning to change the brightness n-1 times. In the i-th change, the brightness level is changed from a_i to a_{i+1}. The initial brightness level is a_1.\nFind the number of times Snuke needs to press the buttons when x is set to minimize this number.\n\n-----Constraints-----\n - 2 \\leq n,m \\leq 10^5\n - 1 \\leq a_i\\leq m\n - a_i \\neq a_{i+1}\n - n, m and a_i are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn m\na_1 a_2 \u2026 a_n\n\n-----Output-----\nPrint the minimum number of times Snuke needs to press the buttons.\n\n-----Sample Input-----\n4 6\n1 5 1 4\n\n-----Sample Output-----\n5\n\nWhen the favorite brightness level is set to 1, 2, 3, 4, 5 and 6, Snuke needs to press the buttons 8, 9, 7, 5, 6 and 9 times, respectively.\nThus, Snuke should set the favorite brightness level to 4.\nIn this case, the brightness is adjusted as follows:\n - In the first change, press the favorite button once, then press the forward button once.\n - In the second change, press the forward button twice.\n - In the third change, press the favorite button once.\n\n---\n\nSnuke is buying a lamp. The light of the lamp can be adjusted to m levels of brightness, represented by integers from 1 through m, by the two buttons on the remote control.\nThe first button is a \"forward\" button. When this button is pressed, the brightness level is increased by 1, except when the brightness level is m, in which case the brightness level becomes 1.\nThe second button is a \"favorite\" button. When this button is pressed, the brightness level becomes the favorite brightness level x, which is set when the lamp is purchased.\nSnuke is thinking of setting the favorite brightness level x so that he can efficiently adjust the brightness.\nHe is planning to change the brightness n-1 times. In the i-th change, the brightness level is changed from a_i to a_{i+1}. The initial brightness level is a_1.\nFind the number of times Snuke needs to press the buttons when x is set to minimize this number.\n\n-----Constraints-----\n - 2 \\leq n,m \\leq 10^5\n - 1 \\leq a_i\\leq m\n - a_i \\neq a_{i+1}\n - n, m and a_i are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn m\na_1 a_2 \u2026 a_n\n\n-----Output-----\nPrint the minimum number of times Snuke needs to press the buttons.\n\n-----Sample Input-----\n4 6\n1 5 1 4\n\n-----Sample Output-----\n5\n\nWhen the favorite brightness level is set to 1, 2, 3, 4, 5 and 6, Snuke needs to press the buttons 8, 9, 7, 5, 6 and 9 times, respectively.\nThus, Snuke should set the favorite brightness level to 4.\nIn this case, the brightness is adjusted as follows:\n - In the first change, press the favorite button once, then press the forward button once.\n - In the second change, press the forward button twice.\n - In the third change, press the favorite button once.\n\n---\n\nSnuke is buying a lamp. The light of the lamp can be adjusted to m levels of brightness, represented by integers from 1 through m, by the two buttons on the remote control.\nThe first button is a \"forward\" button. When this button is pressed, the brightness level is increased by 1, except when the brightness level is m, in which case the brightness level becomes 1.\nThe second button is a \"favorite\" button. When this button is pressed, the brightness level becomes the favorite brightness level x, which is set when the lamp is purchased.\nSnuke is thinking of setting the favorite brightness level x so that he can efficiently adjust the brightness.\nHe is planning to change the brightness n-1 times. In the i-th change, the brightness level"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 6\\n1 5 1 4') == '5'\nassert solution('6 4\\n1 2 3 1 1') == '6'\nassert solution('3 5\\n1 1 1 2 2') == '0'\nassert solution('5 5\\n1 5 5 5 5') == '5'\nassert solution('4 6\\n1 2 3 1 1') == '4'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 4\\n1 2 3 4 5 6') == '5'\nassert solution('4 6\\n1 5 1 4') == '5'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n1 5 1 4\\n\") == \"5\"\nassert solution(\"2 2\\n1 1\\n\") == \"0\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 6') == '5'"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 6') == '5'\nassert solution('5 1') == '4'\nassert solution('5 1 2 3 4 5') == '5'\nassert solution('10 5') == '8'"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5 1 4') == '5'\nassert solution('2 5 2 4') == '5'\nassert solution('3 5 2 4') == '4'\nassert solution('4 5 2 4') == '4'\nassert solution('5 5 2 4') == '2'\n\nprint(solution(input()))\n\n\n'''"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '5'\nassert solution('4 6') == '6'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 1') == '4'\nassert solution('4 3') == '3'\nassert solution('8 3') == '8'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"+-+-+\") == \"1\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n+-+-+\n'''\n) == '1'\nassert solution(\n'''\n+-+-+\n+-+-+\n'''\n) == '2'\nassert solution(\n'''\n+-+-+\n+-+-+\n-\n+-+-+\n'''\n) == '3'\nassert solution(\n'''\n+-+-+\n+-+-+\n+-+-+\n-\n+-+-+\n+-+-+\n-\n+-+-+\n'''\n) == '5'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '1'\nassert solution('+-+-+') == '3'\nassert solution('+--++-') == '2'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('+-+-+') == '3'\nassert solution('+-+++-') == '2'\nassert solution('-+-++') == '1'"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''+-+-+\n\n+-+-+\n\n+-+-+''') == '3'\nassert solution('''+-+\n\n+-+\n\n+-+-+''') == '3'\nassert solution('''+-+-+\n\n+-+-+\n\n+-+-+''') == '3'\nassert solution('''+-+-+\n\n+-+-+\n\n+-+-+''') == '3'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '1'\nassert solution('+-+-+') == '3'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('+-++-+') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\".+\") == \"1\"\nassert solution(\"--\") == \"2\"\nassert solution(\"+-\") == \"3\"\nassert solution(\"+--+\") == \"4\"\nassert solution(\"++--\") == \"5\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('+-+-+') == '3'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('++--+') == '2'\nassert solution('+--+') == '2'\nassert solution('+-') == '1'\nassert solution('++') == '2'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n') == '10110'\nassert solution('20\\nXOR 2 5\\nAND 6 7\\nAND 3 8\\nAND 4 7\\nAND 5 8\\nXOR 6 7\\nXOR 5 6\\nAND 5 8\\nXOR 3 7\\nXOR 4 6\\nXOR 1 5\\nAND 4 7\\nXOR 2 5\\nXOR 4 6\\nXOR 1 5\\nAND 2 7\\nXOR 5 4\\nAND 3 6\\nXOR 6 4\\nAND 5 6\\nAND 4 7\\nAND 6 7\\nAND 7 8\\nNOT 2 8\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT 7 8\\nNOT 5 6\\nNOT 3 4\\nNOT 6 4\\nNOT 1 5\\nNOT 4 7\\nNOT"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(open('test.txt').read()) == '101010'\nassert solution(open('input.txt').read()) == '101010101010101010'\n\n\"\"\"\n\n\nimport itertools\nimport re\nimport sys\n\n\nclass Graph:\n    \"\"\"\n    Graph with vertices indexed by integers, connected by edges.\n    \"\"\"\n\n    def __init__(self):\n        self.graph = dict()\n        self.last_node = 1\n        self.edges = []\n        self.id_map = {}\n\n    def add_vertex(self, vertex: str) -> None:\n        if vertex in self.graph:\n            raise ValueError(f'The vertex {vertex} already exists.')\n        self.graph[vertex] = self.last_node\n        self.id_map[self.last_node] = vertex\n        self.last_node += 1\n\n    def add_edge(self, source: str, destination: str, cost: int = 1) -> None:\n        if source not in self.graph:\n            raise ValueError(f'The source {source} does not exist.')\n        if destination not in self.graph:\n            raise ValueError(f'The destination {destination} does not exist.')\n        self.edges.append((source, destination, cost))\n\n    def get_vertex(self, value: int) -> str:\n        if value < 1 or value > self.last_node:\n            raise ValueError(f'The vertex {value} does not exist.')\n        return self.id_map[value]\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nAND 2 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10110'\n\"\"\""
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"0\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == \"10110\"\nassert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == \"1010101\"\nassert solution(\"5\\nAND 3 4\\nIN 1\\nIN 1\\nNOT 0\\nAND 4 5\\nIN 0\\nOR 2 1\\nXOR 5 6\\nOR 1 7\\nNOT 8\\nAND 2 9\\nNOT 2\\nOR 4 9\\nOR 6 7\\nOR 9 8\\nNOT 7\\nNOT 4\\nAND 6 9\\nAND 4 5\\nOR 1 3\\nAND 5 6\\nOR 5 7\\nOR 7 8\\nOR 4 8\\nOR 6 7\\nOR 9 8\\nAND 4 5\\nOR 1 3\\nAND 5 6\\nOR 5 7\\nOR 7 8\\nOR 4 8\\nOR 6 7\\nOR 9 8\\nOR 4 5\\nOR 1 3\\nXOR 5 6\\nOR 1 7\\nXOR 5 6\\nOR 5 7\\nOR 7 8\\nXOR 5 6\\nOR 1 3\\nXOR 5 6\\nOR 5 7\\nXOR 7 8\\nOR 5 6\\nXOR 1 3\\nXOR 5 6\\nXOR 5 7\\nXOR 7 8\\nXOR 4 8\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR 9 8\\nXOR 4 5\\nXOR 6 7\\nXOR"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"10110\"\n\n\n\"\"\"\nimport sys\nimport os\nsys.path.insert(1, os.path.join(sys.path[0], '..'))\nfrom common.intcode_computer import IntcodeComputer\n\nTEST_CASE = \"\"\"NOT A T\nNOT B J\nOR T J\nNOT C T\nNOT D J\nOR T J\nNOT E T\nOR H T\nAND T J\nWALK\n\"\"\""
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8') == '10110'\nassert solution('20\\nAND 5 8\\nAND 5 4\\nXOR 9 8\\nXOR 4 2\\nXOR 8 5\\nNOT 3\\nNOT 6\\nOR 8 9\\nOR 4 1\\nXOR 4 9\\nNOT 8\\nXOR 4 8\\nNOT 3\\nOR 5 5\\nAND 9 6\\nXOR 2 4\\nXOR 5 4\\nXOR 1 5\\nOR 5 9\\nAND 4 7\\nOR 5 5\\nXOR 3 8\\nOR 3 3\\nNOT 1\\nNOT 2\\nOR 5 5\\nAND 6 6\\nXOR 7 7\\nNOT 1\\nNOT 2\\nOR 6 6\\nAND 7 6\\nOR 6 6\\nNOT 5\\nNOT 4\\nOR 7 5\\nAND 6 6\\nXOR 5 5\\nOR 4 6\\nXOR 6 6\\nNOT 5\\nOR 8 6\\nOR 5 5\\nXOR 4 5\\nOR 2 6\\nOR 6 6\\nXOR 4 5\\nXOR 6 5\\nOR 2 6\\nNOT 4\\nOR 6 6\\nNOT 2\\nXOR 3 5\\nXOR 4 5\\nXOR 5 5\\nXOR 7 5\\nNOT 8\\nXOR 4 4\\nOR 4 5\\nXOR 7 5\\nNOT 3\\nAND 7 8\\nXOR 5 6\\nOR 5 6\\nXOR 7 5\\nOR 7 5\\nAND 4 5\\nOR 5 5\\nXOR 5 5\\nOR 8 5\\nXOR 4 5\\nXOR 4 5\\nNOT 5\\nNOT 4\\nOR 5 5\\nXOR 4 5\\nOR 8 5\\nOR 5 5\\nXOR 8 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nNOT 2\\nNOT 8\\nXOR 8 8\\nAND 5 5\\nOR 5 5\\nXOR 8 8\\nXOR 5 6\\nAND 4 5\\nOR 5 5\\nXOR 4 5\\nXOR 8 8\\nXOR 8 8\\nXOR 5 6\\nNOT 8\\nAND 4 5\\nAND 5 5\\nAND 4 5\\nAND 5 5\\nAND 4 5\\nNOT 4\\nNOT 5\\nAND 4 5\\nAND 4 5\\nAND 5 5\\nAND 4 5\\nAND 5 5\\nAND 4 5\\nXOR 4 4\\nXOR 5 5\\nXOR 5 5\\nXOR 4 5\\nNOT 5\\nNOT 4\\nNOT 5\\nOR 2 2\\nOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nXOR 4 5\\nX"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '100'\nassert solution('4') == '1110'\nassert solution('5') == '10101'\nassert solution('6') == '0110'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nAND 2 8\nNOT 10\nNOT 11\nAND 12 13\nAND 14 15\n''') == '01101010101010101'\n\n\n\"\"\""
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 3 2') == '2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3 1\n1 2 3 2 1\n1 2 3\n''') == '2'\nassert solution('''\n5 3 2\n1 2 3 2 1\n1 2 3\n''') == '2'\nassert solution('''\n10 15 2\n1 2 1 2 1 2 1 2 3 2 1 1 1 2 1 2 1 2 2 1 2 3 2 1 1 1 1 2 2 1 2 1 2 3 2 1 1 1 1 2 1 2 1 2 1 1 1 1 2 1 2 1 2 1 2 1 2 1 2 3 2 1 1 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 3 1\n1 2 3 2 1\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6 3 2\n1 3 2 2 3 1\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 3 1\n1 2 3 2 1\n1 2 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\nassert solution('5 3 1\\n1 2 3 2 1\\n1 2 3') == '1 3'\nassert solution('5 3 2\\n1 2 3\\n1 2 3') == '0'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3 1\n1 2 3 2 1\n1 2 3''') == '2'\nassert solution('''6 3 2\n1 3 2 2 3 1\n1 2 3''') == '2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 3 2') == '2'"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3 1\") == \"2\"\nassert solution(\"6 3 2\") == \"2\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 1\\n1 2 3 2 1\\n1 2 3\") == \"2\"\nassert solution(\"6 3 2\\n1 3 2 2 3 1\\n1 2 3\" ) == \"2\"\nassert solution(\"6 5 2\\n1 3 2 2 3 1\\n1 2 3\") == \"2\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 1\\n1 2 3 2 1\") == \"2\"\nassert solution(\"6 3 2\\n1 2 3\") == \"2\"\nprint(solution(*[input() for _ in range(1)]))"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1 2\n1 3\n1 2\n''') == '2'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 1 2') == '2'\nassert solution('3 3 1') == '0'\n\n\n\"\"\"\n\nimport collections\n\n\nclass UndirectedGraph:\n    def __init__(self, vertices):\n        self.vertices = vertices\n        self.graph = collections.defaultdict(list)\n\n    def add_edge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n    def topological_sort(self):\n        indegree = {vertex: 0 for vertex in self.graph}\n        for vertex in self.graph:\n            for neighbour in self.graph[vertex]:\n                indegree[neighbour] += 1\n\n        q = collections.deque()\n        for vertex in self.graph:\n            if indegree[vertex] == 0:\n                q.append(vertex)\n\n        while q:\n            vertex = q.popleft()\n            yield vertex\n            for neighbour in self.graph[vertex]:\n                indegree[neighbour] -= 1\n                if indegree[neighbour] == 0:\n                    q.append(neighbour)"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 1') == '2'\nassert solution('3 3 1') == '0'\nassert solution('4 1 2') == '2'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\\n1 2\\n2 3\\n3 2\\n\") == \"0\"\nassert solution(\"3 3 1\\n2\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 1 2\n1 3\n1 2\n''') == '2'\nassert solution('''\n3 3 1\n2\n1 2\n1 3\n2 3\n''') == '0'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 1 2\n1 3\n1 2\n''') == '2'\n\nassert solution('''\n3 3 1\n2\n1 2\n1 3\n2 3\n''') == '0'\n\nassert solution('''\n4 1 2\n1 3\n1 2\n''') == '0'\n\nassert solution('''\n2\n1 2\n1 3\n''') == '0'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1\\n1 2\\n1 3\") == '0'\nassert solution(\"5 1 4\\n2 1\\n1 3\\n2 4\\n2 3\") == '0'\nassert solution(\"5 1 4\\n2 1\\n1 3\\n3 4\\n4 3\") == '0'\nassert solution(\"3 3 1\\n2\\n1 2\\n1 3\") == '2'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\") == \"2\"\nassert solution(\"3 3 1\") == \"0\"\n\n\"\"\"\nfrom collections import deque, defaultdict\nimport heapq\n\nclass Graph:\n    def __init__(self):\n        self.nodes = []\n        self.matrix = defaultdict(list)\n        self.n_of_edges = 0\n        self.n_of_vertices = 0\n    \n    def add_edge(self, u, v):\n        self.matrix[u].append(v)\n        self.matrix[v].append(u)\n        self.n_of_edges += 1\n\n    def add_vertex(self, node):\n        self.nodes.append(node)\n        self.matrix[node] = []\n        self.n_of_vertices += 1\n\n    def get_edges(self, node):\n        return self.matrix[node]\n\n    def get_n_of_edges(self):\n        return self.n_of_edges\n    \n    def get_n_of_vertices(self):\n        return self.n_of_vertices\n\n    def get_edges_dict(self):\n        return self.matrix\n\n\nclass Node:\n    def __init__(self, name):\n        self.name = name\n\n    def __repr__(self):\n        return self.name\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 1\") == \"2\"\nassert solution(\"5 3 1\") == \"0\"\nassert solution(\"3 3 1\") == \"0\"\nassert solution(\"10 10 3 3\") == \"3\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == \"2\"\nassert solution(\"3 3 1\") == \"0\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"6\") == \"3\"\nassert solution(\"8\") == \"4\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n10 2 3 5 4 2\n\n''') == '3'\n\nassert solution('''\n4\n100 100 100 100\n\n''') == '1'\n\nassert solution('''\n8\n7 6 5 4 3 2 2 3\n\n''') == '4'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '3'\nassert solution('4') == '1'\nassert solution('8') == '4'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_data) == \"3\"\nassert solution(input_data_2) == \"4\"\nassert solution(input_data_3) == \"1\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_data_1) == \"3\"\nassert solution(input_data_2) == \"4\"\nassert solution(input_data_3) == \"5\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n2\n4\n3\n2\n2''') == \"3\"\nassert solution('''5\n1\n2\n3\n4\n5''') == \"1\"\nassert solution('''9\n5\n1\n2\n3\n4\n5\n6\n7\n8''') == \"3\"\nassert solution('''4\n10\n11\n12\n13''') == \"1\"\nassert solution('''5\n1\n2\n3\n4\n5''') == \"1\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_1) == \"3\"\nassert solution(input_2) == \"4\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"6\") == \"3\"\nassert solution(\"8\") == \"4\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3\n2\n2\n\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n1\n10\n\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n4\n100 100 100 100\n\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n8\n7 6 5 4 3 2 2 3\n\n\"\"\"\n) == \"4\""
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"Yes\", solution()\nassert solution(\"3 3\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"4 3 2 2 1\") == \"Yes\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('6 5') == 'No'\nassert solution('4 3') == 'Yes'\nassert solution('7 5') == 'No'\nassert solution('4 5') == 'Yes'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'No'\nassert solution() == 'Yes'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"2 3\") == \"Yes\"\nassert solution(\"6 5\") == \"Yes\"\nassert solution(\"4 3\") == \"Yes\"\nassert solution(\"8 1 3\") == \"No\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == 'Yes' or solution(input) == 'No'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'Yes'\nassert solution() == '0'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 3\n2 2\n2 1 2\n3 1 2 3\n2 3 4\n2 4 4\n''') == 'Yes'\n\nassert solution('''\n4 3\n2 2\n2 1 2\n3 1 2 3\n2 3 4\n2 4 4\n''') == 'No'\n\nassert solution('''\n5 3\n1 2\n1 1\n3 1 3 2\n2 3 1\n2 2 1\n''') == 'Yes'\n\nassert solution('''\n5 3\n2 1\n1 1\n3 1 3 2\n2 3 1\n2 2 1\n''') == 'No'\n\nassert solution('''\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 3 4\n2 4 4\n2 4 4\n''') == 'Yes'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'Yes'\n\nassert solution() == 'No'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n''') == 'Yes'\nassert solution('''\n4 3\n4 3 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1\n''') == 'No'\nassert solution('''\n4 3\n2 4 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1\n''') == 'Yes'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n1\n\"\"\"\n) == \"0 2 1 4 3\"\nassert solution(\n\"\"\"\n2\n\"\"\"\n) == \"1 0 2 4 3\"\nassert solution(\n\"\"\"\n3\n\"\"\"\n) == \"2 1 0 3 4\"\nassert solution(\n\"\"\"\n4\n\"\"\"\n) == \"3 2 1 0 4\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0 1'"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '10\\n0 2 1 4 3'\nassert solution('5') == '5\\n0 1 2 3 4'\nassert solution('1') == '1\\n0'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '20 0 2 1 4 3'"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0 1'\nassert solution('8') == '0 1 2 3 4 5 6 7'\nassert solution('4') == '0 1 2 3'\n\"\"\""
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n5\n''') == '0 2 1 4 3'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0 2 1 4 3'\nassert solution('3') == '0 2 1 4 3'\nassert solution('4') == '0 2 1 4 3'\nassert solution('5') == '0 2 1 4 3'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1 2 0\"\nassert solution(\"3\") == \"3 2 1\"\n\n\"\"\"\n\n\nimport random\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '1 2 3'\nassert solution('3\\n') == '1 0 2'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"20 0 2 1 4 3\"\nassert solution([\"3\"]) == \"0 2 1 4 3\"\nassert solution([\"1\"]) == \"0 2 1 4 3\"\nassert solution([]) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 4') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'YES'\nassert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'NO'\nassert solution('''\n2 3\n0 0\n1 1\n''') == 'NO'\n\n'''\n\nimport math\nfrom typing import List\nimport sys\nfrom collections import defaultdict\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Point(self.x * other, self.y * other)\n\n    def __truediv__(self, other):\n        return Point(self.x / other, self.y / other)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __str__(self):\n        return f'({self.x}, {self.y})'\n    \nclass PowerSource:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f'({self.x}, {self.y})'\n\n    def __add__(self, other):\n        return PowerSource(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return PowerSource(self.x - other.x, self.y - other.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def distance(self, other):\n        return math.hypot(self.x - other.x, self.y - other.y)"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'YES'\nassert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 4') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4') == 'YES'\nassert solution('3 4') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"5 3\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(test) == \"YES\""
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == 'YES'\nassert solution('3 4') == 'YES'\nassert solution('1 1') == 'YES'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'YES'\nassert solution('''3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'NO'\nprint(solution('''3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n'''))\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '1'\nassert solution('9') == '1'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n1\\n1\\n\") == \"1\"\nassert solution(\"5\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n\") == \"1\"\nassert solution(\"9\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n\") == \"1\"\nassert solution(\"9\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n\") == \"1\"\nassert solution(\"3\\n11\\n11\\n11\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '5'\nassert solution(input()) == '6'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '22'\nassert solution('3') == '333'\nassert solution('4') == '444'\nassert solution('5') == '555'\nassert solution('6') == '666'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == \"1\"\nassert solution('5') == \"1\"\nassert solution('9') == \"1\"\nassert solution('-1') == \"3\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"111\") == \"3\"\nassert solution(\"111\") == \"3\"\nassert solution(\"11\") == \"2\"\nassert solution(\"111\") == \"3\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n1\n1\n''') == \"1\"\nassert solution('''\n5\n0\n1\n0\n1\n\n''') == \"4\"\nassert solution('''\n9\n1\n1\n0\n0\n0\n1\n1\n0\n1\n\n''') == \"9\"\nassert solution('''\n3\n1\n1\n1\n\n''') == \"7\"\nassert solution('''\n5\n0\n1\n0\n1\n\n''') == \"10\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n1\\n1\\n') == '1'\nassert solution('5\\n1\\n0\\n1\\n0\\n1\\n') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"9\") == \"1\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"First\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 0') == 'First'\nassert solution('6 2') == 'Second'\nassert solution('15 10') == 'First'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"First\"\nassert solution(\"1\") == \"Second\"\nassert solution(\"2\") == \"Second\"\nassert solution(\"3\") == \"Second\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"First\"\nassert solution(\"3 0\") == \"Second\"\nassert solution(\"3 0\") == \"Second\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"First\"\nassert solution('''3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n''') == \"Second\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 0') == 'First'\nassert solution('3 1') == 'Second'\nassert solution('3 2') == 'First'\n\"\"\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 0') == 'First'\nassert solution('6 2') == 'Second'\nassert solution('1 2') == 'First'\nassert solution('2 3') == 'Second'\nassert solution('15 10') == 'Second'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 0\") == \"First\"\nassert solution(\"3 1\") == \"Second\"\nassert solution(\"3 2\") == \"First\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 0\") == \"First\"\nassert solution(\"6 2\") == \"Second\"\nassert solution(\"1 2\") == \"First\"\n\"\"\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n2 0\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n''') == 'First\\nSecond'\nassert solution('''\n3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n''') == 'First\\nSecond'\nassert solution('''\n2\n1 2\n5 3\n''') == 'First\\nSecond'\nassert solution('''\n2\n2 0\n1 2\n''') == 'Second'\n\nimport sys\nsys.stdin = open('input.txt')\nfrom collections import defaultdict\n\nT = int(input())\nfor _ in range(T):\n    N, M = list(map(int, input().split()))\n    Edges = defaultdict(list)\n    for _ in range(M):\n        u, v = list(map(int, input().split()))\n        Edges[u].append(v)\n        Edges[v].append(u)\n    G = {}\n    for u in range(1, N+1):\n        G[u] = []\n    seen = set()\n    for u in range(1, N+1):\n        if u not in seen:\n            seen.add(u)\n            u_edges = Edges[u]\n            G[u] = u_edges[:]\n            while u_edges:\n                v = u_edges.pop()\n                if v not in seen:\n                    seen.add(v)\n                    G[u].append(v)\n                    u_edges += Edges[v]\n    for u in range(1, N+1):\n        seen = set()\n        for v in G[u]:\n            if v not in seen:\n                seen.add(v)\n                G[u] += G[v]\n        if len(seen) > N - 1:\n            break\n    for u in G:\n        if len(G[u]) > N - 1:\n            break\n    if len(seen) > N - 1:\n        print('Second')\n    else:\n        print('First')"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\n\n\"\"\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nabba\n''') == 'Mike'\nassert solution('''\ncba\n''') == 'Ann'"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'Mike'\nassert solution(input()) == 'Mike'\nassert solution(input()) == 'Mike'\nassert solution(input()) == 'Ann'\nassert solution(input()) == 'Ann'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\"\nassert solution(\"aaa\") == \"Ana\"\nassert solution(\"bba\") == \"Ana\"\nassert solution(\"bac\") == \"Ana\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\nassert solution('bac') == 'Ann'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"0\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2\n8 3 8\n1 2\n2 3\n''') == '0'\n\nassert solution('''\n3 2\n8 12 8\n1 2\n2 3\n''') == '2'\n\nassert solution('''\n10 20\n1 2 3 4 5 6 7 8 9 10\n1 1\n''') == '3'\n\nassert solution('''\n20\n1 1\n''') == '20'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n1 1\n''') == '10'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 2') == '2'\nassert solution('3 2') == '2'\nassert solution('3 2') == '2'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '3 2\\n'\n    '8 3 8\\n'\n    '1 2\\n'\n    '2 3\\n'\n) == '0'\n\nassert solution(\n    '3 2\\n'\n    '8 12 8\\n'\n    '1 2\\n'\n    '2 3\\n'\n) == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 2') == '2'"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2\",\n    \"2 3\",\n    \"1 2\") == \"0\"\nassert solution(\n    \"8 3 8\",\n    \"1 2\",\n    \"2 3\") == \"2\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 4') == '1'\nassert solution('6 5') == '3'\nassert solution('1 1') == '0'\nassert solution('7 8') == '2'\nassert solution('7 9') == '1'\n\nstdin = \"\"\"\n8 3\n8 3 8\n1 2\n2 3\n2 4\n1 5\n2 6\n3 7\n1 7\n2 8\n2 9\n2 10\n1 11\n1 12\n\"\"\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2\\n8 3 8\\n1 2\\n2 3') == '0'\nassert solution('3 2\\n8 12 8\\n1 2\\n2 3') == '2'\nassert solution('4 2\\n1 2\\n2 3\\n3 4') == '3'"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 4') == 'ababacd'\nassert solution('4 7') == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3') == 'bba'\nassert solution('6 2') == 'bba'\nassert solution('6 5') == '-1'\nassert solution('6 7') == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7 4''') == 'ababacd'\nassert solution('''4 7''') == '-1'"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 4') == 'ababacd'\n\nassert solution('0 1') == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 4\\n\") == \"aba\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"abc\"\nassert solution(\"3 3\") == \"aaa\"\nassert solution(\"2 7\") == \"abacd\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4') == 'ababacd', solution('5 4')\nassert solution('4 4') == 'ababacd', solution('4 4')\nassert solution('7 4') == 'ababacd', solution('7 4')\nassert solution('8 5') == 'ababacd', solution('8 5')\nassert solution('7 7') == 'ababacd', solution('7 7')\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 4') == 'ababacd'\nprint(solution('7 4'))\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 4') == 'ababacd'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"ababacd\"\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 1 2\\n') == 4\nassert solution('10\\n1 1 2 2 2 1 1 2 2 1\\n') == 9"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2\") == \"4\"\nassert solution(\"10\") == \"9\""
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"4\"\nassert solution(\"10\\n1 1 2 2 2 1 1 2 2 1\") == \"9\"\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 2 1 2\n''') == \"4\"\nassert solution('''\n10\n1 1 2 2 2 1 1 2 2 1\n''') == \"9\""
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 2 1 2') == '4'\nassert solution('10') == '9'"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2 1 2''') == '4'\n\nassert solution('''10\n1 1 2 2 2 1 1 2 2 1''') == '9'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"4\"\nassert solution(\"10\\n1 1 2 2 2 1 1 2 2 1\") == \"9\""
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"4\"\nassert solution(\"10\\n1 1 2 2 2 1 1 2 2 1\") == \"9\"\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2 1 2''') == '4'\nassert solution('''10\n1 1 2 2 2 1 1 2 2 1''') == '9'\nassert solution('''1\n1''') == '1'\nassert solution('''10\n1 1 2 2 2 1 1 2 2 1''') == '9'\nassert solution('''1\n1 2 2 2''') == '3'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == '+--+'"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '+-+'"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 1\\n1 1 2') == '2'\nassert solution('6 6 3\\n2 2 6\\n1 4 5\\n2 3 4\\n1 4 1\\n1 3 1\\n2 2 3') == '6'\n\n\n\"\"\"\n\n\n\n\"\"\"\nfrom collections import deque\n\nclass Graph:\n\n    def __init__(self, size):\n        self.size = size\n        self.graph = []\n\n    def add_edge(self, u, v, w):\n        if self.graph[u] == None:\n            self.graph[u] = deque([[w, v]])\n        else:\n            self.graph[u].append([w, v])\n\n    def bfs(self, start, end):\n\n        visited = [False]*self.size\n        visited[start] = True\n        queue = deque()\n\n        queue.append((start, 0))\n\n        while queue:\n\n            node, distance = queue.popleft()\n\n            if node == end:\n                return distance\n\n            for neighbor in self.graph[node]:\n                if not visited[neighbor[0]]:\n                    visited[neighbor[0]] = True\n                    queue.append((neighbor[0], distance+neighbor[1]))\n\n        return -1\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\") == \"2\"\nassert solution(\"1 4 3\") == \"1-1+-1\"\nassert solution(\"2 2 1\") == \"2\"\nassert solution(\"1 4 5\") == \"1-1+-1\"\nassert solution(\"2 3 4\") == \"2-2+-2\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\nassert solution('''\n4 5 3\n1 2 3 4\n1 4 5\n2 3 4\n2 4 3\n''') == '+'\nassert solution('''\n3 6 4\n1 2 3 4 5\n2 3 4 5\n3 4 5\n1 2 4\n1 4 3\n1 5 3\n1 5 4\n2 5 4\n2 4 5\n''') == '+--'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    6 6 3\n    2 2 6\n    1 4 5\n    2 3 4\n    1 4 1\n    1 3 1\n    2 2 3\n    ''') == '2'\nassert solution('''\n    6 6 3\n    2 2 6\n    1 4 5\n    2 3 4\n    1 4 1\n    1 3 1\n    2 2 3\n    ''') == '6'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3 1\n1 1 1\n1 2 1\n2 3 1\n''') == '2'\nassert solution('''\n4 3 1\n2 2 2\n1 1 2\n1 3 1\n2 1 1\n''') == '5'\nassert solution('''\n6 6 1\n1 1 4\n2 2 5\n1 2 1\n2 2 4\n1 4 1\n1 3 1\n2 3 4\n1 3 1\n2 1 4\n2 2 2\n''') == '+-2'\nassert solution('''\n6 6 1\n1 1 5\n2 2 6\n1 2 1\n1 3 1\n1 4 1\n2 4 1\n1 5 1\n2 3 4\n1 4 1\n1 5 1\n2 3 4\n''') == '+-+2'"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1\") == \"2\"\nassert solution(\"1 4 5\") == \"++-\"\nassert solution(\"2 3 4\") == \"++-\"\nassert solution(\"1 4 1\") == \"1\"\nassert solution(\"1 3 1\") == \"1\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\nassert solution([5, 4, 3, 2, 1]) == \"++-\"\nassert solution([3, 1, 2, 1, 2, 1]) == \"++-++-++\"\nassert solution([2, 1, 2, 1, 2, 1]) == \"++-++-++\"\nassert solution([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == \"++-++-++\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 3\\n1 1 2\\n2 2 1') == '6'\nassert solution('2 2 1\\n1 1 2\\n2 2 1') == '2'\nassert solution('4 4 2\\n1 1 4\\n1 2 1\\n1 3 1\\n2 2 1\\n2 3 1\\n3 3 1\\n3 4 1\\n3 5 1\\n4 4 1\\n4 5 1\\n5 5 1\\n5 6 1\\n6 6 1\\n6 7 1\\n7 7 1\\n7 8 1\\n8 8 1') == '6'\nassert solution('3 2 1\\n2 3 1\\n1 2 1\\n2 4 1\\n3 4 1\\n3 1 1\\n1 4 1') == '2'\n\n\"\"\"\n\n\n\"\"\"---SOLUTION---\"\"\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\nassert solution('1239') == '1239'\nassert solution('999') == '999'\nassert solution('1234567890') == '1234567890'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"54321\") == \"54321\"\nassert solution(\"0123456789\") == \"0123456789\"\nassert solution(\"012\") == \"012\"\nassert solution(\"1234567890\") == \"1234567890\"\nassert solution(\"123456789101112\") == \"12356789101112\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\nassert solution('9') == '9'\nassert solution('0') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"10\") == \"10\"\nassert solution(\"1234\") == \"1234\"\nassert solution(\"89\") == \"89\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n\n\n\n-----Hints & Concepts-----\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\nassert solution('2222') == '2122'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\nassert solution('7') == '0'\nassert solution('2') == '1'\nassert solution('9') == '9'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(1689) == 1869\nassert solution(18906) == 18690\n\n\n\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '-1'\nassert solution([4, 2]) == '2'\nassert solution([5, 5]) == '3'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 2\n1 3\n3 4\n\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n\nsolution(input)\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == 2\nassert solution(\"4 6\") == -1\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(samples[0]) == '2'\nassert solution(samples[1]) == '-1'"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '2'\nassert solution(input('')) == '-1'"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5') == '3'\nassert solution('5 6') == '-1'\nassert solution('7 8') == '3'\nassert solution('8 7') == '-1'\nassert solution('6 7') == '4'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n1 3\n3 4\n''') == '2'\nassert solution('''5 5\n4 2\n3 5\n4 5\n5 1\n1 2\n''') == '3'\n\nimport unittest\n\nclass Test_solution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('4 2\\n1 3\\n3 4\\n'), '2')\n        self.assertEqual(solution('5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n1 2\\n'), '3')"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 3\\n3 4\\n') == '2'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n') == '-1'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n4 7') == '3'\nassert solution('3\\n4 3 1') == '9'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\nprint(solution(input()))\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n7 4 1 5\n''') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\nassert solution('4') == '8'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"2\n4 7\n\"\"\") == \"3\"\nassert solution(\"\"\"3\n4 3 1\n\"\"\") == \"9\"\nassert solution(\"\"\"2\n4 3 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"7\"\nprint(solution(input()))\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"9\"\nassert solution(\"1\") == \"9\"\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == '9'\n\nprint(solution(input))"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n8 5\\n') == '9'\nassert solution('5\\n3 10 2 1 5\\n') == '2'\nassert solution('1\\n1\\n') == '-1'\nassert solution('2\\n0 5 15 10\\n') == '0'\nassert solution('3\\n0 5 15 10\\n') == '0'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"0\"\nassert solution(\"1\") == \"-1\"\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n4 8 5\n''') == '9'\n\nassert solution('''\n4\n0 5 15 10\n''') == '0'\n\nassert solution('''\n1\n1\n''') == '-1'"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n0 5 15 10''') == '9'\nassert solution('''3\n4 8 5''') == '9'\nassert solution('''5\n0 5 15 10''') == '0'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n0\n2\n0\n3\n1\n2\n2\n4\n1\n''') == '0', 'The first example'\nassert solution('''\n4\n0 8 5\n0\n4\n1\n0\n1\n0\n''') == '4', 'The second example'\nassert solution('''\n3\n1 10 2\n0\n5\n3\n0\n2\n0\n''') == '5', 'The third example'\nassert solution('''\n1\n1\n0\n1\n''') == '-1', 'The fourth example'\nprint(solution(input))\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n4 8 5\n''') == '9'\nassert solution('''5\n0 5 15 10\n''') == '0'\nassert solution('''1\n1\n''') == '-1'\nprint('all passed!')\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '9'\nassert solution() == '2'\nassert solution() == '0'\nassert solution() == '-1'\nassert solution() == '0'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n4 8 5\n''') == '9'\nassert solution('''3\n1 2 3\n''') == '-1'\nassert solution('''4\n0 1 2 5\n''') == '0'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"2\"\nassert solution(\"1\") == \"-1\""
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4 5\\n3 5 7 10') == '3'\nassert solution('13 4 5\\n7 8 9 10\\n') == '1'\nassert solution('10 20 5\\n3 4 5 6 7 8 9 10\\n') == '1'\nassert solution('10 20 5\\n7 8 9 10\\n') == '1'\nassert solution('10 20 5\\n3 4 5 6 7 8 9 10\\n') == '1'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 4 5') == '3'\nassert solution('13 4 5') == '1'"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 4 5\n3 5 7 10\n''') == '1'\nassert solution('''\n13 4 5\n7 8 9 10\n''') == '1'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5 3\\n') == '2'\nassert solution('13 4 5\\n') == '1'\nprint('All tests passed!')\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 4 5\n3 5 7 10\n''') == '3'\nassert solution('''\n13 4 5\n7 8 9 10\n''') == '1'\nassert solution('''\n10 4 5\n1 2 3 4 5\n''') == '4'"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(example_input) == example_output"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 4 5\n3 5 7 10\n\n''') == '3'\nassert solution('''\n13 4 5\n7 8 9 10\n\n''') == '1'\nassert solution('''\n10 4 5\n6 8 9 10\n\n''') == '2'\n\nassert solution('''\n1000000000 10 5\n
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 4 5\") == \"3\"\nassert solution(\"13 4 5\") == \"1\""
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\"\n    ) == \"2\"\n\nassert solution(\n    \"4\"\n    ) == \"4\"\n\nassert solution(\n    \"5\"\n    ) == \"5\""
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '4'\nassert solution('6') == '6'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n1\\n1\\n') == '1'\nassert solution('2\\n1\\n3\\n2\\n') == '2'\nassert solution('3\\n1\\n3\\n2\\n') == '4'\nassert solution('4\\n1\\n3\\n2\\n') == '4'\nassert solution('5\\n1\\n3\\n2\\n') == '5'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == '2'\nassert solution(\"4\") == '4'\nassert solution(\"5\") == '4'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n101\\n3 3\") == \"2\"\nassert solution(\"4\\n1111\\n3 4\") == \"4\"\nassert solution(\"6\\n011100\\n5 3\\n5 5\\n2 4\\n3 5\\n4 2\\n1 5\") == \"6\""
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"8\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1111\\n3 4\\n5 2\\n3 1\\n3 2\") == \"4\"\nassert solution(\"6\\n011100\\n5 3\\n5 5\\n2 4\\n3 5\\n4 2\\n1 5\") == \"6\"\nassert solution(\"6\\n0000000000\\n0000000000\\n0000000000\\n0000000000\\n0000000000\\n0000000000\") == \"6\""
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1111\\n3 4\\n5 2\") == \"4\"\nassert solution(\"4\\n1111\\n3 4\\n5 2\") == \"6\"\nassert solution(\"6\\n011100\\n5 3\\n5 5\\n2 4\\n3 5\\n4 2\\n1 5\") == \"6\""
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\""
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\""
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 4\n''') == '1111'\nassert solution('''5 3\n''') == '01010'\nassert solution('''7 3\n''') == '1011011'\nassert solution('''10 4\n''') == '11111111'\nassert solution('''0 0\n''') == '0'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3''') == '01010'\nassert solution('''7 3''') == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\""
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == \"1111\", \"Not True\"\nassert solution(\"5 3\") == \"01010\", \"Not True\"\nassert solution(\"7 3\") == \"1011011\", \"Not True\"\nprint(solution(input()))\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n''') == '1111'\n\nassert solution('''5 3\n''') == '01010'\n\nassert solution('''7 3\n''') == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"1111\"\nassert solution(input()) == \"01010\"\nassert solution(input()) == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '01010'\nassert solution('7 3') == '1011011'"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4') == '1111'\nassert solution('5 3') == '01010'\nassert solution('7 3') == '1011011'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0/1\"\nassert solution(\"3\") == \"1/2\""
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0/1'\nassert solution('3') == '1/2'\nprint(solution(input()))"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1/1'\nassert solution('2') == '0/1'\nassert solution('3') == '0/1'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0/1'\nassert solution('3') == '0/1'\nassert solution('2') == '1/2'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1/2'\nassert solution('3') == '0/1'\nassert solution('4') == '1/3'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n2\n1\n\n''') == '0/1'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"0/1\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '0/1'\nassert solution('''\n1\n1\n1\n''') == '0/1'\nassert solution('''\n2\n1\n''') == '1/2'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '1',\n    '2'\n    ) == '1/2'\nassert solution(\n    '3',\n    '1 1 1'\n    ) == '0/1'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1/1'\nassert solution('2') == '1/2'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1 0 1 0 0\"\nassert solution(\"5\") == \"4 3 2 1 0\"\nassert solution(\"9\") == \"4 3 2 1 0\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6''') == '1 0 1 0 0'\nassert solution('''5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1''') == '4 3 2 1 0'''\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\nassert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '4 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\nassert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '4 3 2 1 0'\nassert solution('''\n3\n2 2\n3 4\n3 1\n''') == '1 0 1 0 0'\n'''\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n\n''') == '1 0 1 0 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\nassert solution('''\n5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1\n''') == '4 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n\n''') == '1 0 1 0 0'\nassert solution('''\n5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1\n\n''') == '4 3 2 1 0'\n'''"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6') == '1 0 1 0 0'\nassert solution('5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\\n') == '4 3 2 1 0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '2'\nassert solution('5') == '1'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n4 5 1 7 4\n''') == '1'\n\nassert solution('''\n5\n4 5 1 7 4\n''') == '8'\n\nassert solution('''\n2\n1 2\n''') == '0'\n\nassert solution('''\n3\n1 1 1\n''') == '1'\n\nassert solution('''\n10\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n4 5 1 7 4\n''') == '10010'"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"4\n4\n5 1 7 4\n\n\"\"\") == '1'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n4 5 1 7 4\n\nOutput\n1''') == '8'\n\nassert solution('''5\n4 5 1 7 4\n\nOutput\n1''') == '11'\n\nassert solution('''5\n4 5 1 7 4\n\nOutput\n1''') == '8'"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n4 5 1 7 4\n''') == '1'\nassert solution('''\n2\n1 2\n''') == '0'\nassert solution('''\n3\n1 1 1\n''') == '1'\nassert solution('''\n3\n1 1 1\n''') == '0'"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 5 1 7 4\") == \"1\"\nassert solution(\"2\\n1 2\") == \"0\"\nassert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"4\\n1 1 1\") == \"0\"\nassert solution(\"5\\n1 1 1\") == \"0\""
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '8'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\n\nassert solution() == '0'\n\nassert solution() == '8'\n\nassert solution() == '2'\n\nassert solution() == '11'"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n4 5 1 7 4') == '1'\nassert solution('2\\n1 2') == '0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n4 5 1 7 4\\n') == '1\\n8\\n01010\\n00011\\n01010\\n10010\\n00011\\n11000\\n00011\\n11000\\n'\nassert solution('2\\n1 2\\n') == '0\\n2\\n11\\n11\\n'\nassert solution('3\\n1 1 1\\n') == '1\\n0\\n2\\n11\\n'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\\n') == '1'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"1 1 2 3\") == \"2\"\nassert solution(\"4 5 6 3 2 1\") == \"4\"\nassert solution(\"0 4 5 7 6 1\") == \"5\"\nassert solution(\"6 4 5 7 1 2\") == \"6\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '1'\nassert solution('6 0 1 2 3') == '1'\nassert solution('6 0 4 6 1') == '1'\nassert solution('6 0 4 6 1 2 3') == '1'\nassert solution('6 0 4 6 1 2 3 4 5 6') == '1'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '1'\nassert solution('1 4 5 2 3') == '2'\n\"\"\""
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n''') == '1'\n\nassert solution('''\n9\n0 1 2 3 4 5 6 7 8\n0 4 6 1 5 8 7 2 3\n1 5 7 2 6 3 8 4 0\n2 6 8 4 5 7 3 1 0\n3 7 8 5 6 4 1 2 0\n4 7 6 5 2 8 3 1 0\n5 6 8 7 4 3 2 1 0\n6 7 8 5 4 1 3 2 0\n7 8 5 6 4 3 1 2 0\n8 5 6 7 4 3 2 1 0\n''') == '4'\n\nassert solution('''\n9\n0 1 2 3 4 5 6 7 8\n0 4 6 1 5 8 7 2 3\n1 5 7 2 6 3 8 4 0\n2 6 8 4 5 7 3 1 0\n3 7 8 5 6 4 1 2 0\n4 7 6 5 2 8 3 1 0\n5 6 8 7 4 3 2 1 0\n6 7 8 5 4 1 3 2 0\n7 8 5 6 4 3 2 1 0\n8 5 6 7 4 3 2 1 0\n''') == '3'\n\n'''\nThe pyramid is drawn from the top downward (row by row).\nThe number of the pyramid is given by the number of elements in the pyramid.\n\nYou are given a pyramid of size N = 5. The bottom row is given by the numbers 0, 1, 2, 3, 4.\n\nWrite a program that prints the pyramid in a row-wise manner.\n\nInput Format\nThe first line contains an integer T, the number of test cases. The next T lines contain an integer N, the size of the pyramid.\n\nOutput Format\nFor each test case, print a single row of the pyramid as per the example.\n\nConstraints\n1\u2266T\u226620\n1\u2266N\u226620\n\nExample Input\n2\n5\n1 2 3 4 5\n5 4 3 2 1\n\nOutput\n0 1 2 3 4\n\n1 2 3 4 5\n0 1 2 3 4\n\n2 3 4 5 1\n0 1 2 3 4\n\nExplanation\nTest Case 1\n\nThe pyramid is:\n\n0 1 2 3 4\n\nIn the first row, the bottom row of the pyramid is given as:\n\n0 1 2 3 4\n\nOutput\n\n0 1 2 3 4\n\nIn the second row, the bottom row of the pyramid is given as:\n\n1 2 3 4 5\n\n0 1 2 3 4\n'''\nimport math\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\n\"\"\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '1'\n\n'''\n\n'''\n[\n[0,1,2,3],\n[0,4,6,1],\n[1,6,7,2],\n[2,7,5,3],\n[6,4,5,7],\n[4,0,3,5],\n],\n[\n[4,0,3,5],\n[0,1,2,3],\n[0,6,7,1],\n[1,7,2,4],\n[2,7,5,6],\n[3,2,5,7],\n],\n[\n[4,0,3,5],\n[0,1,2,3],\n[1,6,7,2],\n[2,7,5,3],\n[6,4,5,7],\n[0,4,3,5],\n],\n[\n[1,2,3,4],\n[4,0,3,5],\n[0,1,2,3],\n[1,6,7,2],\n[2,7,5,3],\n[3,2,5,7],\n],\n[\n[1,2,3,4],\n[0,4,5,6],\n[1,2,3,4],\n[0,4,5,6],\n[1,2,3,4],\n[0,4,5,6],\n]\n]\n\n\n'''"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\", \"Sample Test 1 Failed\"\nassert solution(\"5\") == \"3\", \"Sample Test 2 Failed\"\nassert solution(\"7\") == \"4\", \"Sample Test 3 Failed\"\nassert solution(\"10\") == \"7\", \"Sample Test 4 Failed\"\nassert solution(\"13\") == \"0\", \"Sample Test 5 Failed\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '1', 'You failed the first test'\nassert solution('1') == '0', 'You failed the second test'\nassert solution('2') == '1', 'You failed the third test'\nassert solution('6') == '1', 'You failed the fourth test'\nassert solution('7') == '1', 'You failed the fifth test'\n"
    }
]