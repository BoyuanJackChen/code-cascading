[
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n2 3\n''') == '5'\n\nassert solution('''8\n( 2 ( 2 1 ) ) 3\n''') == '9'\n\nassert solution('''4\n( 12 3 )\n''') == '36'\n\nassert solution('''6\n( ( 2 3 ) )\n''') == '5'\n\nassert solution('''6\n( ( ( 2 3 ) ) )\n''') == '5'"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '5'\nassert solution('2') == '5'\nassert solution('8') == '9'\nassert solution('4') == '5'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n2 3\n''') == '5'\nassert solution('''\n8\n( 2 ( 2 1 ) ) 3\n''') == '9'\nassert solution('''\n4\n( 12 3 )\n''') == '36'\nassert solution('''\n6\n( ( 2 ) )\n''') == '5'\nassert solution('''\n6\n( ( ( 2 3 ) ) )\n''') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"8 ( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"4 ( 12 3 )\") == \"36\"\nassert solution(\"6 ( ( 2 ) )\") == \"5\"\nassert solution(\"6 ( ( ( 2 3 ) ) )\") == \"5\"\nprint(solution(input()))"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n2 3\n''') == '5'\nassert solution('''8\n( 2 ( 2 1 ) ) 3\n''') == '9'\nassert solution('''4\n( 12 3 )\n''') == '36'\nassert solution('''6\n( ( 2 3 ) )\n''') == '5'"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"8\") == \"9\"\nassert solution(\"4\") == \"5\"\nassert solution(\"6\") == \"5\"\nassert solution(\"6\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n2 3\n( 2 ( 2 1 ) )\n3\n''') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"8 (2 (2 1))\") == \"9\"\nassert solution(\"4 (12 3)\") == \"36\"\nassert solution(\"6 ( ( 2 ) )\") == \"5\"\nassert solution(\"6 ( ( ( 2 3 ) ) )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('8') == '1'\nassert solution('4') == '1'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == str(min_steps(int(s)))\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == str(int(min(len(str(stdin))-1, 2 ** (len(str(stdin))-1)-1)) for stdin in input.split('\\n') for min(len(str(stdin))-1, 2 ** (len(str(stdin))-1)-1) in str(stdin))"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0\n''') == '0'\nassert solution('''\n009990001\n''') == '3'\nassert solution('''\n29998\n''') == '5'\nassert solution('''\n610\n''') == '4'\nassert solution('''\n981\n''') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"610\") == \"4\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"981\") == \"2\"\nassert solution(\"10827\") == \"3\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"5\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') =='seems legit'\nassert solution('2\\n2017 11 0\\n2018 1 1000\\n') == 'insufficient service'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n2017 4 0\\n2017 8 12000\\n2018 8 42000') == 'insufficient service'\nassert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n2017 11 0') == 'tampered odometer'\nassert solution('2\\n2018 1 1000\\n2013 1 0') =='seems legit'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"seems legit\"\nassert solution(\"2\") == \"insufficient service\"\nassert solution(\"1\") == \"tampered odometer\""
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == \"seems legit\"\nassert solution('2') == \"insufficient service\"\nassert solution('3') == \"tampered odometer\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') =='seems legit'\nassert solution('2\\n2013 1 0\\n2013 2 0\\n') =='seems legit'\nassert solution('1\\n2011 0 0\\n') =='seems legit'\nassert solution('2\\n2011 1 0\\n') =='seems legit'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n\") == \"seems legit\"\nassert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n\") == \"tampered odometer\"\nassert solution(\"2\\n2013 1 0\\n2013 2 0\\n\") == \"seems legit\""
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'insufficient service'\nassert solution('3') == 'tampered odometer'\nassert solution('4') == 'tampered odometer'\nprint('all tests passed')"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') =='seems legit'\nassert solution('2') == 'insufficient service'\nassert solution('3') == 'tampered odometer'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') =='seems legit'\nassert solution('2') == 'insufficient service'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\nassert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42001\n\"\"\") == \"insufficient service\"\nassert solution(\"\"\"\n2\n2017 11 0\n2018 1 1000\n\"\"\") == \"tampered odometer\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 3 4\\n0 1\\n0 1\\n1') == '3'\nassert solution('6\\n2 3 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\nSample Output 4:') == '4'\nassert solution('5\\n3 4 2\\n0 1\\n0 1\\n1 3\\nSample Output 2:') == '2'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1 2\\n0 2 3\\n0 1\\n1') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\nSample Output 4:\n2\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2\n0 2 3\n0 1\n1\nSample Output 1:\n3\n\nSample Input 2:\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 2:\n2\n\nSample Input 3:\n6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\nSample Output 3:\n2\n\nSample Input 4:\n4\n1 2 3\n0 2 3\n0 1 3\n0 1 2\nSample Output 4:\n4''') == '3'''"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '3'\nassert solution('4') == '2'\nassert solution('3') == '2'\nassert solution('6') == '4'\nprint('All tests passed!')"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == \"3\"\nprint(solution(None))\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('5') == '4'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1 2\n0 2 3\n0 1''') == '3'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3\\n1 2\\n0 2 3\\n0 1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"6\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\nSample Output 4:\n2"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n0 2\\n0 1\\n1') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n1') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n') == '2'\n\nstdin = '2\\n0 2\\n0 1\\n1'\nprint(solution(stdin))\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '3'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '2'\nassert solution('4') == 'IMPOSSIBLE'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('3') == 'IMPOSSIBLE'\nassert solution('4') == 'IMPOSSIBLE'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\nBLUE 1 4000\nRED 4002 10000\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\nBLUE 1 4000\nRED 4002 10000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == '3'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\nBLUE 1 5000\\nRED 5001 10000') == '2'\nassert solution('3\\nBLUE 1 6000\\nRED 2000 8000\\nWHITE 7000 10000') == '3'\nassert solution('4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000') == '3'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\n2\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == '3'"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ABABA\") == \"1\"\nassert solution(\"AAABB\") == \"3\"\nassert solution(\"\") == \"\"\nassert solution(\"AAABBB\") == \"2\"\nassert solution(\"ABABABABA\") == \"4\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\nassert solution(\"PRIMER\") == \"5\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == 0\nassert solution(\"A\") == 0\nassert solution
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''PRATTATTATTIC\nGGGGGGGGG\nPRIME\nBABBABABBABBA''') == '6'\nassert solution('''ZZZZZZZZZZZZZZ\nGGGGGGGGG\nPRIME\nBABBABABBABBA''') == '1'\nassert solution('''YAAABABABABAB\nABABABABABABA\nAAAABAAABAAABA\nABBBBBBBBBBBA\nAAAAAABBAAABBAB\nAAABAAABAAABBA\nAAABABABABABA\nABABABABABABA\nBAABABABABABA\nAAABABABABABA\nABAABABABABABA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('A') == '1'\nassert solution('AAAAAA') == '5'\nassert solution('AGGTTG') == '5'\nassert solution('PPPPPPPPP') == '10'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5') == '0'\nassert solution('2 3 4 5') == '1'\nassert solution('D 2 3 1 D 1') == '1'\nassert solution('D 1 2 3 D 1') == '0'\n\nfrom typing import List\nfrom io import StringIO\nimport sys\n\nclass LongLongString:\n    def __init__(self):\n        self.data = []\n\n    def __getitem__(self, index: int) -> str:\n        return self.data[index]\n\n    def __setitem__(self, index: int, value: str) -> None:\n        self.data[index] = value\n\n    def __len__(self) -> int:\n        return len(self.data)\n\n    def __str__(self) -> str:\n        return ''.join(self.data)"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 D 1') == '0'\nassert solution('2 D 2') == '1'\nassert solution('1 E') == '1'\nassert solution('1 D 1 E') == '1'\nassert solution('1 D 1 E D 1 D 1 E') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE''') == '0'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE''') == '1'\nassert solution('''I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE''') == '0'\n\ntest.assert_equals(solution('''D 2\nD 1\nE\nD 1\nD 2\nE'''), '1')\ntest.assert_equals(solution('''I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE'''), '0')\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''I 14 B\nD 1\nE\nD 1\nD 2\nE\nE\n''') == '0'\nassert solution('''I 14 A\nI 15 B\nE\nI 14 A\nI 15 B\nE\n''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('D 1\\nD 2\\nE\\nD 3\\nD 1\\nE') == '0'\nassert solution('D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\\n') == '1'\nassert solution('I 1 X\\nD 1\\nE\\nE\\nI 14 A\\nI 15 B\\nE') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nD 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''\nI 1 X\nD 1\nE\nE\n''') == '0'\nassert solution('''\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '0'\nassert solution('''\nI 14 A\nI 15 B\nE\nI 14 A\nI 15 B\nE\n''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('D 2\\nE') == '0'\nassert solution('D 1\\nE') == '1'\nassert solution('I 1 X') == '0'\nassert solution('D 1\\nE') == '1'\nassert solution('I 14 B') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '0'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3 4 5') == '0'\nassert solution('1 2 3 4 5 6') == '1'\nassert solution('1 2 3 4 5 6 7') == '1'"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('D 2') == '0'\nassert solution('D 1') == '1'\nassert solution('E') == '1'\nassert solution('D 1') == '0'\nassert solution('D 2') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '0'\nassert solution('''I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '1'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 0 1 0 0 0\n''') == '300'\nassert solution('''\n5 0 1 0 1 0\n''') == '1900'\nassert solution('''\n6 0 1 1 0 0\n''') == '2300'\nassert solution('''\n10 399 0 0 0 0\n''') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 0 1 0 0 0\n0\nSample Input 5:\n5 0 1 0 1 0\nSample Output 5:\n900\nSample Input 6:\n10 399 0 0 0 0\nSample Output 6:\n399''') == '900'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 0 1 0 0 0\n0\n0\n1\n0\n0\n''') == '300'\nassert solution('''5 0 1 0 1 0\n0\n0\n1\n0\n0\n''') == '1900'\nassert solution('''6 0 1 1 0 0\n0\n0\n1\n0\n0\n''') == '2300'\nassert solution('''10 399 0 0 0 0\n0\n0\n1\n0\n0\n0\n''') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\""
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 0 1 0 0 0\") == \"300\"\nassert solution(\n    \"5 0 1 0 1 0\") == \"1900\"\nassert solution(\n    \"6 0 1 1 0 0\") == \"2300\"\nassert solution(\n    \"10 399 0 0 0 0\") == \"399\"\nprint(\"You're all set!\")"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\""
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 0 1 0 1 0') == '1900'\nassert solution('4 0 1 0 0 0') == '300'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 399 0 0 0 0\n''') == '399'\nassert solution('''\n4 0 1 0 0 0\n''') == '300'\nassert solution('''\n6 0 1 1 0 0\n''') == '1900'\nassert solution('''\n10 399 0 0 0 0\n''') == '399'"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 10\n1 5\n1 4\n''') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\n\nassert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 10\n1 12\n1 13''') == '2'\nassert solution('''2 10\n1 5\n1 12\nSample Output 1:\n2\n\nSample Input 2:\n2 10\n1 5\n1 4\nSample Output 2:\n2\n\nSample Input 3:\n2 10\n1 5\n4 1\nSample Output 3:\n2\n\nSample Input 4:\n2 10\n1 5\n4 1\nSample Output 4:\n2\n''') == '2'\nprint('all tests passed')\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 10') == '2'\nassert solution('2 10') == '2'\nassert solution('2 10') == '2'\nassert solution('2 10') == '2'\nprint('all tests passed')\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 10') == '2'\nassert solution('2 10') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 10\\n1 12\\n1 13') == '2'\nassert solution('2 10\\n1 5\\n1 12') == '2'\nassert solution('2 10\\n1 5\\n4 1') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 10\n1 12\n1 13''') == '2'\nassert solution('''2 10\n1 5\n1 12\nSample Output 2:\n2\n\nSample Input 4:\n2 10\n1 5\n4 1\nSample Output 4:\n2''') == '2'"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 10') == '2'\nassert solution('2 10') == '2'\nassert solution('3 10') == '2'\nassert solution('4 10') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 10') == '2'\nassert solution('2 10') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10') == '2'\nassert solution('2 10') == '2'\nassert solution('1 10') == '2'"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\nassert solution('''\n4\n10 10 5\n10 20 1\n20 10 12\n20 20 8\n''') == '36.2842712475'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32'"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'IMPOSSIBLE'\nassert solution('2') == '28.9792305918'\nassert solution('3') == '36.283441407'\nassert solution('4') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28'\nassert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '36.2842712475'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32'\n\nprint(solution('''\n5\n1 1 2\n2 2 2\n3 3 4\n1 5 4\n4 3 6\n1 2 4\n1 3 6\n1 6 6\n'''))\n\nprint(solution('''\n11\n1 2 4\n2 3 3\n3 4 4\n3 4 4\n4 3 4\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9\n'''))\n\nprint(solution('''\n7\n3 3 4\n2 2 2\n4 4 4\n3 3 3\n3 4 4\n3 2 4\n4 4 4\n4 2 4\n5 5 5\n'''))\n\nprint(solution('''\n10\n4 4 -4\n6 1 1\n2 3 -3\n5 1 1\n3 2 -3\n7 3 4\n8 -5 5\n1 1 1\n3 2 2\n6 -6 6\n'''))\n\nprint(solution('''\n12\n3 2 2\n1 -2 -1\n2 1 2\n-1 3 2\n1 -3 2\n-1 -2 2\n-2 -1 2\n1 1 2\n'''))\n\nprint(solution('''\n15\n4 2 4\n1 3 4\n5 4 4\n2 4 2\n4 2 1\n4 3 2\n5 1 1\n1 5 4\n2 6 6\n3 4 4\n6 1 1\n6 3 4\n3 4 4\n5 3 4\n1 5 4\n3 3 3\n3 4 4\n3 2 4\n4 3 4\n4 1 4\n3 6 4\n'''))\n\nprint(solution('''\n3\n4 4\n5 1\n2 2\n3 1\n2 1\n2 2\n'''))\n\nprint(solution('''\n15\n2 2 2\n2 2 2\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n3 3 3\n2 4 4\n4 4 4\n3 3 3\n4 4 4\n4 4 4\n3 3 3\n3 3 3\n3 4 4\n4 4 4\n4 4 4\n'''))\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '36.2842712475'\nassert solution('8') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28'\nassert solution('''\n4\n10 10 5\n10 20 1\n20 10 12\n20 20 8\n''') == '36.2842712475'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32'\n\n'''\n    length = 0\n    if num_lights == 0:\n        return str(length)\n    if num_lights == 1:\n        return str(length) + \" \" + str(0)\n    for i in range(len(arr)):\n        if arr[i][0] + arr[i][1] >= len(arr[i][2]) and arr[i][0] + arr[i][1] <= len(arr[i][2]) + 1:\n            length += arr[i][0] + arr[i][1]\n        elif arr[i][1] + arr[i][0] >= len(arr[i][2]) and arr[i][1] + arr[i][0] <= len(arr[i][2]) + 1:\n            length += arr[i][1] + arr[i][0]\n        elif arr[i][0] + arr[i][1] < len(arr[i][2]) and arr[i][1] + arr[i][0] < len(arr[i][2]) and arr[i][2][arr[i][0] + arr[i][1]] == '#':\n            continue\n        else:\n            return str(length) + \" \" + str(0)\n    return str(length) + \" \" + str(0)\n\n'''"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n2 2 2\n2 2 4\n3 3 4\n4 2 2\n5 4 5\n''') == '28.980'\n\nassert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.980'\n\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '36.2842712475'\n\nassert solution('''\n8\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8\n''') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == '32.0'\nassert solution(\"2\") == 'IMPOSSIBLE'\n\n'''\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n2 3 1\n2 4 1\n1 2 3\nSample Input 5:\n4\n1 1 10\n2 2 10\n3 1 10\nSample Output 5:\nIMPOSSIBLE\n''') == '28.970562748'\nassert solution('''3\n2 2 2\n1 2 3\n2 2 2\nSample Input 6:\n4\n1 1 -5\n1 2 2\n1 3 -7\n1 4 -3\n2 2 3\n2 3 3\n2 4 -1\nSample Output 6:\n28.971472609\n''') == '36.2842712475'"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\nassert solution('''\n4\n10 10 5\n10 20 1\n20 10 12\n20 20 8\n''') == '36.2842712475'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32'"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '28.970562748'\n\n---"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '-1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\n\nassert solution('''3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\n\nassert solution('''3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n''') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 1, 9, 5],\n                [2, 2, 6, 8],\n                [4, 8, 9, 3]) == \"3\"\nassert solution([5, 2, 7, 10],\n                [7, 4, 4, 10],\n                [2, 4, 10, 8]) == \"1\"\nassert solution([2, 5, 7, 10],\n                [2, 5, 7, 7],\n                [5, 1, 7, 7]) == \"1\"\nprint(\"You're a smart cookie!\") if __name__ == \"__main__\" else None\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([\n    [1, 3, 9, 5],\n    [2, 2, 6, 8],\n    [4, 8, 9, 3]\n]) == \"3\"\n\nassert solution([\n    [5, 2, 7, 10],\n    [7, 4, 4, 10],\n    [2, 4, 10, 8]\n]) == \"1\"\n\nassert solution([\n    [-1, -2, -1, -1],\n    [-1, 2, -1, -1],\n    [-1, 4, -1, -1],\n    [-1, 8, -1, -1]\n]) == \"1\"\n\nassert solution([\n    [2, 2, 6, 8],\n    [2, 4, 10, 8],\n    [5, 2, 7, 10],\n    [4, 4, 10, 8],\n    [7, 4, 7, 7],\n    [8, 5, 7, 7]\n]) == \"4\""
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('1 3 9 5') == '3'\nassert solution('2 2 6 8') == '1'\nassert solution('4 8 9 3') == '1'\nassert solution('5 2 7 10') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\nassert solution('''\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '-1'"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"-\"\nassert solution(\"1234321\") == \"94708\"\nprint(solution(input()))\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '5'\nassert solution('100') == '99'\nassert solution('99999999999999999') == '988888000000'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n10\n55\n101\n1234321\n''') == '94708'\nassert solution('''1\n10\n55\n101\n12345678\n''') == '94708'\nassert solution('''1\n10\n55\n101\n12345678\n''') == '94708'\nassert solution('''1\n10\n55\n101\n12345678\n''') == '94708'\nassert solution('''1\n10\n55\n101\n12345678\n''') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('12321') == '94708'\nassert solution('12223') == '93'\nassert solution('33322111') == '5'\nassert solution('12233211') == '-1'\n\nimport io\nimport os\nimport sys"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"123456789\") == \"95\"\nassert solution(\"123\") == \"1\"\nassert solution(\"99\") == \"-1\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('123456789') == -1\n\nassert solution('123456789') == -1\n\nassert solution('12223') == 2\n\nassert solution('12321') == 0\n\nassert solution('33322111') == 1"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 7') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 0 0 0 3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1 2 0 0 5\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 2 0 0 4\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1 2 0 0 6\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '6'\nassert solution('1 2 0 0 3') == '6'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 2 0 0 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1 2 0 0 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1 2 0 0 6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n0 0 0 0 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n0 0 0 0 4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 1 0 1\n3 0 1 1\n''') == '4'\nassert solution('''\n2 2 1 0 1\n2 1 1 1\n''') == '4'\nassert solution('''\n1 2 1 0 1\n3 0 1 1\n''') == '5'\nassert solution('''\n1 2 1 0 1\n1 1 1 1\n''') == '5'\nassert solution('''\n1 1 1 1\n1 1 1 1\n''') == '5'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 0 0 0 3\"\n) == \"6\"\nassert solution(\n    \"1 2 0 0 5\"\n) == \"2\"\nassert solution(\n    \"1 2 0 0 4\"\n) == \"4\"\nassert solution(\n    \"1 2 0 0 6\"\n) == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 0 0 3') == '6'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 0 0 0 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1 2 0 0 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 2 0 0 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1 2 0 0 6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 0 0 3') == '6'\nassert solution('1 2 0 0 3') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nassert solution('5 3 0 0 6') == '0'\n\n\n\"\"\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''0.5 -5.301 3.098\n0.5 8 8\n0.5 -8 8''') == '-1.26167861 3.88425357'\nassert solution('''1.5 8 8\n1.5 8 8''') == '9.21068947 2.56226688'\nassert solution('''0.5 -8 8\n0.5 -8 8''') == '-4.36385220 9.46891588'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\""
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''0.5 -5.301 3.098\nSample Input 2:\n0.5 8 8\nSample Output 2:\n9.21068947 2.56226688\n\nSample Input 3:\n1 8 8\nSample Output 3:\n6.22375968 -0.31921472\n''') == '-1.26167861 3.88425357'"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0.5 -5.301 3.098\n''') == '-1.26167861 3.88425357'\nassert solution('''\n0.5 8 8\n''') == '9.21068947 2.56226688'\nassert solution('''\n1 8 8\n''') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''0.5 -5.301 3.098''') == '-1.26167861 3.88425357'\nassert solution('''0.5 8 8''') == '9.21068947 2.56226688'\nassert solution('''1 8 8''') == '6.22375968 -0.31921472'"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nassert solution(\"0.5 -8 8\") == \"-4.36385220 9.46891588\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\n1 2\n2 1\n''') == '1'\nassert solution('''\n4 5\n1 2\n1 3\n3 2\n2 4\n3 4\n''') == '1'\nassert solution('''\n2 3\n1 2\n2 3\n''') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\") == \"1\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\n1 2\n2 1\n''') == '1'\nassert solution('''3 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n1 3') == '1'\nassert solution('2 2\\n1 2') == '0'\nassert solution('3 3\\n1 2\\n2 3') == '1'\nassert solution('4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2\n2 3\n3 1''') == '1'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 4\n4 1\nSample Output 5:\n2\n4\n5\n''') == '2'\nassert solution('''4 5\n1 2\n2 3\n3 4\n4 1\nSample Output 6:\n0\n''') == '0'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == 'infinity'\nassert solution('''\n5 5 0 4\n0 1 1\n1 0 1\n1 2 1\n2 0 4\n2 3 1\n2 3 3\n''') == '11'\nprint('solution: OK')\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 0 3') == '11'\nassert solution('5 5 0 4') == 'infinity'\nassert solution('3 3 1 2') == '2'\nassert solution('4 3 0 4') == 'infinity'"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5 0 3\") == \"11\"\nassert solution(\"5 5 0 4\") == \"infinity\"\nassert solution(\"6 5 0 4 1\") == \"2\""
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == '2'\nassert solution('3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1\\nSample Output 3:') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == '11'\nassert solution('''\n5 5 0 4\n0 1 1\n1 0 1\n1 2 1\n2 0 4\n2 3 1\n2 3 3\n''') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n'''\n    ) == '11'\nassert solution(\n    '''\n5 5 0 4\n0 1 1\n1 0 1\n1 2 1\n2 0 4\n2 3 1\n2 3 3\n'''\n    ) == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 0 3') == '11'\nassert solution('5 5 0 4') == 'infinity'\nassert solution('3 3 1 2') == '2'\nassert solution('1 1 0 1') == '1'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5 0 3') == '11'\nassert solution('5 5 0 4') == 'infinity'\nassert solution('5 5 0 5') == 'infinity'"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n\"\"\"\n) == \"11\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 3\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"2 2 2 3\") == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 2 1 2\n2 1 2\n2 3 4\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3 3 1 1\n1 1\n2 2 3\n\"\"\") == \"18\"\nassert solution(\"\"\"\n3 3 1 1\n1 1\n2 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 3 2 1\n1 1\n2 2 3\n\"\"\") == \"12\""
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\n\nassert solution('''3 3 1 1\n1 1\n2 2 3\n''') == '0'\n\nassert solution('''3 2 2 3\n1 1\n2 2 3\n''') == '18'\n\nassert solution('''3 2 1 1\n1 1\n2 2 3\n''') == '12'\n\nassert solution('''4 1 2 1\n2 1 2\n2 3 4\n''') == '12'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\nassert solution('''\n3 3 1 1\n1 1\n2 2 3\n''') == '0'\nassert solution('''\n3 2 2 3\n1 1\n2 2 3\n''') == '18'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2 1 2 1') == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('3 2 2 3') == '18'\nassert solution('3 1 2 3') == '12'\nassert solution('1 2 1 1') == '2'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2 1 2 1\\n2 1 2\\n2 3 4') == '6'\nassert solution('3 3 1 1\\n1 1\\n2 2 3') == '0'\nassert solution('3 2 2 3\\n1 1\\n2 2 3') == '18'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2 1 2 1\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"3 2 2 3\") == \"18\"\nassert solution(\"3 1 2 3\") == \"12\"\nassert solution(\"3 1 1 2\") == \"0\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\nassert solution('''3 3 1 1\n1 1\n2 2 3\n''') == '0'\nassert solution('''3 2 2 3\n1 1\n2 2 3\n''') == '18'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2 1 2 1\") == \"6\"\nassert solution(\"3 3 1 1\") == \"18\"\nassert solution(\"3 2 2 3\") == \"0\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1000000 1\nSample Output 1:\n468559''') == '468559'\nassert solution('''1000000 5\nSample Output 2:\n49401''') == '49401'\nassert solution('''1000000 16\nSample Output 3:\n20''') == '20'\nassert solution('''9000000000000000000 62\nSample Output 4:\n1''') == '1'"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n100000 1\n''') == '468559'\nassert solution('''\n100000 5\n''') == '49401'\nassert solution('''\n100000 16\n''') == '20'\nassert solution('''\n9000000000000000000 62\n''') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()[:-1]\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1000000 1''') == '468559'\nassert solution('''1000000 5''') == '49401'\nassert solution('''1000000 16''') == '20'\nassert solution('''9000000000000000000 62''') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\""
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\nassert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\""
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2 9\n5 4 1\n\"\"\") == \"1\"\nassert solution(\"\"\"4 13\n2 2 2 2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n3\n1 2 3\n''') == '1'\nassert solution('''\n3\n4\n2 2 2 2\n''') == '1'\nassert solution('''\n5\n6\n5 4 1\n''') == '2'\nassert solution('''\n7\n8\n7 5 1 2 3 4 1\n''') == '5'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 9\n5 4 1\n''') == '1'\n\nassert solution('''\n4 13\n2 2 2 2\n''') == '3'\n\nassert solution('''\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 9\n5 4 1\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n4 13\n2 2 2 2\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n\"\"\") == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n1 2 3\n''') == '1'\nassert solution('''\n4 13\n2 2 2 2\n''') == '3'\nassert solution('''\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 9\n5 4 1\n''') == '1'\nassert solution('''4 13\n2 2 2 2\n''') == '3'\nassert solution('''18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'\nprint('all tests passed')"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\nassert solution(\"18 90\") == \"12\""
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n1''') == '0'\nassert solution('''2\n3''') == '3'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '5'\nassert solution('5') == '6'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '3'\nassert solution('5') == '5'"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n4 7 8\n''') == '3'\nassert solution('''\n5\n2 3 4 5 8\n''') == '5'\n\nprint(solution('''\n10\n8 1 2 1 1 2 1 1 2\n'''))\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n4 7 8''') == '3'\nassert solution('''5\n2 3 4 5 8''') == '5'\nassert solution('''7\n2 3 4 5 8 9 10''') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1\"\n    \"1\"\n    \"2\"\n    \"4\"\n    \"3\"\n    \"5\"\n    \"6\"\n    \"8\"\n    ) == \"5\"\nassert solution(\n    \"1\"\n    \"1\"\n    \"1\"\n    \"1\"\n    \"2\"\n    \"4\"\n    \"3\"\n    \"5\"\n    \"6\"\n    \"8\"\n    ) == \"0\"\nassert solution(\n    \"1\"\n    \"1\"\n    \"1\"\n    \"1\"\n    \"2\"\n    \"3\"\n    \"4\"\n    \"5\"\n    \"6\"\n    \"8\"\n    ) == \"3\"\nassert solution(\n    \"1\"\n    \"1\"\n    \"1\"\n    \"1\"\n    \"2\"\n    \"3\"\n    \"4\"\n    \"5\"\n    \"6\"\n    \"8\"\n    ) == \"6\""
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"37\") == \"75\"\nassert solution(\"123\") == \"87\"\nassert solution(\"123456789\") == \"987654321\"\nassert solution(\"123456789012345678901\") == \"9876543210987654321\"\nassert solution(\"12345678901234567890123\") == \"9876543210987654321\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('37') == '75'\nassert solution('48') == '85'\nassert solution('3748') == '11112'\nassert solution('354879') == '11112'\nassert solution('01') == '-1'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '3'\nassert solution('6') == '4'\nassert solution('1234') == '11112'\nassert solution('374848') == '75'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"17\""
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6\n123476544\n''') == '11112'\nassert solution('''11\n7\n9\n14\n''') == '-1'\nassert solution('''12\n5\n8\n''') == '-1'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1234') == '17'\nassert solution('149') == '17'\nassert solution('1000000') == '11112'"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"-1\"\nassert solution(\"1234\") == \"11112\"\nassert solution(\"1234567890\") == \"11112\"\nassert solution(\"123456789\") == \"11112\"\nassert solution(\"12345678\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\\\n6\n''') == '4'\nassert solution('''\\\n149\n''') == '17'\nassert solution('''\\\n123476544\n''') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nabc\nbca\ncab\naca\n\"\"\") == \"adcb\"\nassert solution(\"\"\"\nbab\nbca\ncab\naca\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''d 4\ncab\ncda\nccc\nbadca\n''') == 'adcb'\nassert solution('''c 4\nabc\nbca\ncab\naca\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('d 4\\nabc\\nbadca\\nade') == 'adcb'\nassert solution('c 4\\nabc\\nbadca\\nade') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb') == 'AMBIGUOUS'\n\"\"\"\n\n\nfrom collections import Counter\nimport re"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''d 4\ncab\ncda\nccc\nbadca''') == 'adcb'\nassert solution('''c 4\nabc\nbca\ncab\naca''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"d 4\ncab\ncda\nccc\nbadca\n\"\"\") == \"adcb\"\nassert solution(\"\"\"c 4\nabc\nbca\ncab\naca\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"f 2\ndea\ncfb\n\"\"\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('d 4\\ncab\\n') == 'adcb'\nassert solution('c 4\\nabc\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\n') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"IMPOSSIBLE\"\n\n\"\"\""
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nd 4\ncab\ncda\nccc\nbadca\n''') == 'adcb'\n\nassert solution('''\nc 4\nabc\nbca\ncab\naca\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''d 4\ncab\ncda\nccc\nbadca\n''') == 'adcb'\nassert solution('''f 2\ndea\ncfb\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''d 4\ncab\ncda\nccc\nbadca''') == 'adcb'\nassert solution('''c 4\nabc\nbca\ncab\naca''') == 'IMPOSSIBLE'\nassert solution('''f 2\ndea\ncfb''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3 3 3\"\n) == \"9\"\nassert solution(\n    \"10 20 0 0\"\n) == \"10\"\nassert solution(\n    \"100 20 543 12\"\n) == \"164\"\nassert solution(\n    \"100000000 100000000 100000000 1000000000 100000000\"\n) == \"16000000000000000\"\nassert solution(\n    \"3000000000000003 0 0\"\n) == \"3000000000000000\""
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3 3 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\nassert solution('''\n100 20 543 12\n''') == '164'\n\"\"\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3 3 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\nassert solution('''\n100 20 543 12\n''') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3 3 3\n''') == '9'\nassert solution('''10 20 0 0\n''') == '10'\nassert solution('''100 20 543 12\n''') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3 3 3\n''') == '9'\nassert solution('''10 20 0 0\n''') == '10'\nassert solution('''100 20 543 12\n''') == '164'''\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3 3 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\nassert solution('''\n100 20 543 12\n''') == '164'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\") == \"yes\"\nassert solution(\"4 3 3\") == \"no\"\nassert solution(\"3 2 3\") == \"no\"\nassert solution(\"6 3 3\") == \"no\""
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2 3') == 'yes'\nassert solution('3 2 3') == 'no'\nassert solution('4 3 3') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == 'yes'\nassert solution('4 2 3') == 'no'\nassert solution('3 2 3') == 'no'\nassert solution('4 3 3') == 'no'\nassert solution('3 4 3') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2 3\n1 1\n1 1\n1 0\n0 0\n0 -1\n''') == \"no\"\nassert solution('''\n5 3 3\n1 1\n0 1\n-1 0\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\nSample Output 3:\nno\n''') == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'yes'\nassert solution('''4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\n''') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2 3') == 'yes'\nassert solution('4 3 3') == 'no'"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0') == 'yes'\nassert solution('4 3 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0') == 'no'\nassert solution('4 4 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0') == 'no'\nassert solution('3 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12') == 'yes'"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0') == 'yes'\nassert solution('4 3 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\") == \"no\"\nassert solution(\"4 2 3\") == \"yes\"\nassert solution(\"3 2 4\") == \"no\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\nassert solution('555') == '1'\nassert solution('99999') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '1'\nassert solution('1234567890') == '1'\nassert solution('1234567891011121314151617181920') == '2'\nassert solution('1234567891011121314151617181920') == '2'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('652526') == 4\nassert solution('12121131221') == 7\nassert solution('123456789') == 1\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12121131221') == '7'\nassert solution('652526') == '4'\nassert solution('123456789') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\nprint('All test cases passed')\n\"\"\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n652526\n''') == '4'\nassert solution('''\n12121131221\n''') == '7'\nassert solution('''\n123456789\n''') == '1'"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\n\nassert solution('''\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\n\nassert solution('''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"24\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 3\\n1\\n1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\n    \"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\") == \"24\"\nassert solution(\n    \"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\") == \"800\""
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 3\n1\n1 2\n2 3\n1 3\n\"\"\"\n    ) == \"0\"\nassert solution(\n\"\"\"\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n\"\"\"\n    ) == \"24\"\nassert solution(\n\"\"\"\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n\"\"\"\n    ) == \"800\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\nSample Output 2:\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\nSample Output 3:\") == \"800\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution(\n'''\n4 4\n24 10\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '24'\nassert solution(\n'''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3\n1\n1 2\n2 3\n1 3''') == '0'\nassert solution('''4 4\n24 10\n1 3\n2 3\n2 4\n1 4\nSample Output 2:\n24\n\nSample Input 3:\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\nSample Output 3:\n800''') == '2400'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 4\") == \"24\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4', 'First'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5', 'Second'\nassert solution('4\\n1 2 3 4') == '-1', 'Third'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == \"1 4\", \"Should be 1 4\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\", \"Should be 1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"-1\", \"Should be -1\""
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) in [\"1 2 3 4 5\", \"-1\"]\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"-1\"\nassert solution(\"4\") == \"1 4\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1 4\"\nassert solution(\"5\") == \"-1\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"2\") == \"1 4\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 2 4') == '1 4'\nassert solution('5 1 2 3 4') == '1 2 3 4'\nassert solution('4 5 1 3 2') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '-1'\nassert solution('1 2 3 4') == '1 2 3 4'\nassert solution('4') == '1 2 3 4'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '1 4'\nassert solution('5') == '1 2 3 4 5'\nassert solution('3') == '-1'\nprint(solution(input()))"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 3 2 4\n''') == '1 4'\nassert solution('''\n5\n1 2 3 4 5\n''') == '1 2 3 4 5'\nassert solution('''\n4\n2 1 4 3\n''') == '-1'\nprint('All test cases passed!')"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '1 4'\nassert solution('5') == '1 2 3 4 5'\nassert solution('4') == '1 2 3 4'"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4') == '1'\nassert solution('3 3') == '1'\nassert solution('4 4') == '2'\n\n\"\"\""
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 6\\n.#####\\n#####.\") == \"5\"\nassert solution(\"4 8\\n.######\\n.######\\n..#..#..\\n\") == \"8\"\nassert solution(\"3 3\\n...\\n...\\n\") == \"1\""
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3\\n.#####\\n#####.\\n..#..#\\n') == '5'\nassert solution('3 3\\n.#####\\n#####.\\n..#..#\\n') == '1'\nassert solution('2 6\\n.#####\\n#####.\\n..#..#\\n') == '5'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n4\\n.######.\\n.######.\\n..#..#..\\n') == '1'\nassert solution('2\\n4\\n.######.\\n.######.\\n..#..#..\\n') == '5'\n\n'''\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"4 8\") == \"8\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n.#.\n...\n''') == '1'\nassert solution('''\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\n''') == '8'"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == \"1\"\n\nstdin = \"\"\"3 4\n...\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\n''') == \"8\"\nassert solution('''\n3 3\n...\n.#.\n...\nSample Output 3:\n1\n''') == \"1\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 8\n....\n....\n...#.\n...#.\n.####.\n.####.\n....''') == '8'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5 5\") == \"6\"\nassert solution(\"3 3 3\") == \"13\"\nassert solution(\"4 2 6 1 9 7 5 5 7 1 2 3 3\") == \"4 2 6 1 9 7 5 5 7 1 2 3 3\""
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 5\") == \"6\"\nassert solution(\"3 3 3\") == \"13\"\nassert solution(\"3 2 2\") == \"4 2 6 1 9 7 5 5 7 1 2 3 3\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4', 'First'\nassert solution() == '13', 'Second'\nassert solution() == '-1', 'Third'\n\n\"\"\""
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"1 1\"\nassert solution(\"2 5 5\") == \"5 5 5\"\nassert solution(\"4 4 4\") == \"4 4 4\"\nassert solution(\"2 2 2\") == \"2 2 2\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == '6'\n'''\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\") == \"6\"\nassert solution(\"2 5 5\") == \"12\"\nassert solution(\"4 4 4\") == \"13\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"./inputs/input_test1.txt\") == \"6\"\nassert solution(\"./inputs/input_test2.txt\") == \"19 12 2 18 5 5\"\nassert solution(\"./inputs/input_test3.txt\") == \"13\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('2 3 4\\n1 2\\n3 4\\n2 1') == '11\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '19 12 2 18 5 5\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\n\nimport re\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6', 'Wrong answer for input: 4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1'\n\nassert solution('''\n3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13', 'Wrong answer for input: 3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\\n'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3 2\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2 1'\nprint(solution())\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5'\nassert solution('''\n4\n1\n5\n3\n6\n1\n2\n3\nSample Output 4:\n3 2\n''') == '1 0'\nassert solution('''\n4\n1\n5\n3\n6\n1\n2\n3\n''') == '3 2'\n\nassert solution('''\n2\n3\n4\n5\n''') == '0'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1 1\"\nassert solution(\"4\") == \"2 1\"\nassert solution(\"5\") == \"3 1\"\nassert solution(\"5\") == \"5 5\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"1 1\"\n\n---Input---\n\n\"\"\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '3 2'\nassert solution('4') == '1'\nassert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"5\") == \"5 1\"\nassert solution(\"4\") == \"1 5\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5 2\") == \"2 2\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '1 5'"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '2 1'\nassert solution('4') == '1 5'\nassert solution('3') == '1 2'\nassert solution('2') == '1 2'\nassert solution('1') == '1 1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n5\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5 2 3'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3') == '1'\nassert solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1', \"5\"\nassert solution('6') == '5', \"6\"\nassert solution('7') == '7', \"7\"\nassert solution('8') == '3', \"8\"\nassert solution('9') == '4', \"9\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n') == '1'\nassert solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\\n') == '5'\nassert solution('6\\n5 0\\n4 1\\n3 1\\n2 2\\n1 3\\n0 4\\n') == '5'"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '5'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n3 0\n3 1\n3 2\n3 3\n3 4''') == '1'\nassert solution('''5\n4 0\n3 1\n2 2\n1 3\n0 4''') == '5'\nassert solution('''6\n3 0\n1 1\n2 1\n1 3\n0 4\n5 1\nSample Output 3:\n5\n''') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1'\nassert solution('5') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '5'\nassert solution('''\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n''') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\n\nassert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '0'\n\nassert solution('''9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4\\n1\\n2\\n3\\n\"\nassert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == \"4\\n3\\n4\\n5\\n6\\n\""
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\nassert solution('''\n8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''\n9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 2 2\n1 3 1\n2 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''\n8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''\n8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '0'\nassert solution('''\n9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'\n\nassert solution('''\n3\n1 2 2\n1 3 1\n2 4 3\n''') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"10\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\nSample Output 1:\n4\n3\n4\n5\n6\n\nSample Output 2:\n0\n\nSample Output 3:\n5\n1\n2\n3\n6\n7\n''') == '5'\nassert solution('''9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\nSample Output 1:\n4\n3\n4\n5\n6\n7\n''') == '5'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2\nR10 V1 V2 V1 E\n''') == '6'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2\nV1 V2 V1 V1 V2\nSample Output 1:\n5\n''') == '5'\nassert solution('''2 1\nV1 V2 V1 V1 V2\nSample Output 2:\n6\n''') == '6'\nassert solution('''1 2\nR10 V1 V2 V1 E\nSample Output 3:\n30\n''') == '30'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n2 1\nV1 V2 V1 V1 V2\n''') == '6'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1 2\nV1 V2 V1 V1 V2\n\"\"\") == \"5\"\nassert solution(\"\"\"1 2\nR10 V1 V2 V1 E\n\"\"\") == \"30\"\nassert solution(\"\"\"1 1\nV1\n\"\"\") == \"1\"\nassert solution(\"\"\"5 1\nV1\n\"\"\") == \"1\"\nassert solution(\"\"\"1 2\nR10 V1 V2 V1 E\n\"\"\") == \"6\""
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"5\"\nassert solution(\"2 1\") == \"6\"\nassert solution(\"1 2\") == \"7\"\nprint(solution(input()))\n\"\"\"\nimport sys\nimport os\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\nV1 V2 V1 V1 V2') == '5'\nassert solution('2 1\\nV1 V2 V1 V1 V2') == '6'\nassert solution('1 2\\nR10 V1 V2 V1 E') == '30'\nassert solution('2 1\\nR10 V1 V2 V1 E') == '30'"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '30'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '4'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"5\"\nassert solution(\"1 2\") == \"6\"\nassert solution(\"2 1\") == \"30\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\nV1 V2 V1 V1 V2') == '5'\nassert solution('2 1\\nR10 V1 V2 V1 E') == '6'\nassert solution('2 2\\nV1 V2 V1 V1 V2') == '8'\nassert solution('4 3\\nV1 V2 V1 V1 V2') == '17'\nassert solution('6 4\\nR10 V1 V2 V1 V1 V2') == '21'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\""
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4') == '4'\nassert solution('1 2') == '2'\nassert solution('9 6') == 'impossible'\nassert solution('10 11') == 'impossible'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4') == '3'\nassert solution('4 1') == '1'\nassert solution('1 9') == '9'\nassert solution('7 6') == 'impossible'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n10 24\n\"\"\") == \"38\"\nassert solution(\n\"\"\"\n10 11\n\"\"\") == \"impossible\"\nassert solution(\n\"\"\"\n9 216\n\"\"\") == \"546\"\nassert solution(\n\"\"\"\n1414\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''5 1 0.333333 30\n6 1 0.666667 70\n2 4 0.666667 15\n1 2\n''') == '10.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 60 2 1') == '466.662'\nassert solution('3 4 2 1') == '10.00005'\nassert solution('0 2 0.25 8') == '2.0'\nassert solution('0 10') == '10.00005'\nassert solution('1 2') == '2.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 20 2 1\") == \"466.662\"\nassert solution(\"3 4 2 1\") == \"10.00005\"\nassert solution(\"3 4 1 0\") == \"2.0\""
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 12 1 1') == '1.9666', 'Expected: 1.9666'\nassert solution('6 12 2 1') == '4.8', 'Expected: 4.8'\nassert solution('6 12 3 1') == '2.4', 'Expected: 2.4'\nassert solution('10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10') == '55555.0', 'Expected: 55555.0'\nassert solution('9 12 1 0') == '0.0', 'Expected: 0.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''20 60 2 1\n5 15 0.3333\n22 60 0.6667\n0 10''') == '466.662'\nassert solution('''3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2''') == '10.00005'\nassert solution('''3 4 1 0\n0 2 0.25 8\nSample Output 3:\n2.0''') == '2.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n''') == '466.662'\nprint(solution('''\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n'''))\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '0.0002'\nassert solution('5 15 2 1') == '466.662'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 5 1\") == \"0.66666\"\nassert solution(\"2 1 0.75 0.75 0.75\") == \"1.0\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 4 2 1\") == \"10.00005\"\nassert solution(\"5 15 0.33333 30\") == \"466.662\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 20 2 1') == '466.662'\nassert solution('3 4 2 1') == '10.00005'\nassert solution('3 0.1 1 0.2') == '1.2'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n''') == '1.500000000000000'\nassert solution('''\n2\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\nassert solution('''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\nassert solution('''\n3\nblue red 1.0\nred pink 1.5\nblue green 1.0\n''') == '1.500000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1.500000000000000'\nassert solution('2') == '0.000000000000000'\nassert solution('4') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\\n') == '1.500000000000000'\nassert solution('2\\nblue red 1.0\\nred pink 1.5\\n') == '0.000000000000000'\nassert solution('4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\\n') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"3\") == \"1.500000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1.5\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\n\nassert solution('''\n2\nblue red 1.0\nred pink 1.5\n''') == '1.500000000000000'\n\nassert solution('''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\n\nimport sys\nimport io\nimport os\n\nsys.stdin = io.StringIO(os.environ['SOLUTION_INPUT'])\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1.500000000000000\"\nassert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nblue\\nred\\n') == '1.00000000000000'\nassert solution('2\\nblue\\nred\\n') == '0.000000000000000'\nassert solution('4\\nblue\\ngreen\\n') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '0.000000000000000'\nassert solution('2') == '0.000000000000000'\nassert solution('1') == '1.000000000000000'\nassert solution('3') == '1.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1.500000000000000\"\nassert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6''') == '180'\nassert solution('''3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 2:\n22''') == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1 0') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('2 3 2') == 'too many'\nassert solution('1 1 2') == 'too many'\nassert solution('1 1 3') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == 'too many'\nprint('OK')\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n5 4 1 2\n1 4 2 3 4\n2 4 1 2\n1 4 2 3 4\n2 4 1 2\nSample Output 4:\n23\n''') == '22'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1 1 1 0') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('3 1 2') == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 1 1 1') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('3 1 2') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 2:\n22\n''') == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 1 1 1 0') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('3 1 2') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n\"\"\") == \"180\"\n\nassert solution(\"\"\"\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n\"\"\") == \"22\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 8 5') == '20 20'\nassert solution('3 3 2') == '17 17'\nassert solution('1 1') == '1 1'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 8 5\\n...#....\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2') == '20 20'\nassert solution('6 8 5\\n...#....\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2') == '20 20'\nassert solution('6 8 5\\n#...#...#\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2') == '-1 -1'\nassert solution('10 10 100\\n###\\n#.\\n#.\\n###\\n#.\\n###\\n#.\\n###\\n#.\\n###\\n#.\\n###\\n#.\\n###\\n#.\\n###\\n###') == '-1 -1'\n\nprint('all tests passed')"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 8 5\") == \"20 20\"\nassert solution(\"6 8 5\") == \"20 20\"\nassert solution(\"6 8 5\") == \"20 20\"\nassert solution(\"6 8 5\") == \"20 20\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) in [\"20 20\", \"-1 -1\"]"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2\") == \"17 17\"\nassert solution(\"6 8 5\") == \"20 20\"\nassert solution(\"6 8 5\") == \"20 20\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 3') == '20 20'\nassert solution('4 4 2') == '17 17'\nassert solution('6 6 5') == '20 20'\nassert solution('6 6 5') == '17 17'\nassert solution('6 6 5') == '17 17'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '20 20'\nassert solution() == '17 17'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\\n') == '20 20'\nassert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 2\\nright 2\\n') == '17 17'\nassert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nleft 4\\n') == '-1 -1'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == '300'\nassert solution('4') == 'impossible'\nassert solution('10') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '300'\nassert solution('30\\n2\\n2 20 35\\n2 88 200\\n') == '88'\nassert solution('1\\n1\\n0\\n1') == 'impossible'"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n3\n1 2 3 4\n2 5 7\n''') == '1'\nassert solution('''5\n3\n1 3 2 4\n2 4 3\n''') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n100 100\n2 40 65\n2 100 150\n2 300 320\n''') == '88'\nassert solution('''\n100 100\n2 40 65\n2 100 150\n2 300 320\n''') == '88'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '3\\n3\\n2 40 65\\n2 100 150\\n2 300 320'\n) == '300'\nassert solution(\n    '10\\n3\\n2 40 65\\n2 100 150\\n2 300 320'\n) == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\n\nassert solution('''\n2\n2\n2 40 65\n2 100 150\n2 300 320\n''') == '300'\n\nassert solution('''\n10\n3\n2 40 65\n2 100 150\n2 300 320\n''') == '320'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('371') == 'impossible'\nassert solution('310') == '300'\nassert solution('90') == '88'"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3\\n'\n    '2\\n'\n    '2 40 65\\n'\n    '2 100 150\\n'\n    '2 300 320\\n'\n) == 'impossible'\nassert solution(\n    '4\\n'\n    '3\\n'\n    '2 40 65\\n'\n    '2 100 150\\n'\n    '2 300 320\\n'\n    '3 40 60\\n'\n    '4 40 50\\n'\n    '3 20 35\\n'\n    '3 88 200\\n'\n) == '88'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"impossible\"\nassert solution_a(0) == \"impossible\"\n\nimport io\nimport os\nimport sys\n\nfrom operator import xor\nfrom typing import List\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"....\\n..#.\\n#.#.\\n....\") == \"can fold\"\nassert solution(\"#....\\n#.#.#\\n##..#\\n.###.\") == \"cannot fold\"\nassert solution(\"##.#\\n##.#\\n##.#\\n##.#\") == \"can fold\"\nassert solution(\"##.##\\n##.##\\n##.##\\n##.##\") == \"can fold\"\nassert solution(\"##..#\\n##...\\n##.##\\n##.##\") == \"cannot fold\""
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n......\n......\n######\n......\n......\n......\n''') == 'cannot fold'\nassert solution('''\n..##..\n...#..\n..##..\n...#..\n......\n......\n''') == 'can fold'\nassert solution('''\n......\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''#\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"##..#.\") == \"can fold\"\nassert solution(\"#....\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''.....\n...#..\n..##..\n...#..\n......''') == 'can fold'\nassert solution('''.....\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('##.#.#\\n###.#.\\n#.##.##\\n.######') == \"can fold\"\nassert solution('..##..\\n#..#.#\\n#.##..#\\n....#..') == \"cannot fold\"\nassert solution('..#..#\\n.##.##.\\n##...#\\n######.\\n.####.##') == \"can fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"......\\n......\\n######\\n......\\n......\\n......\\n\") == \"can fold\"\nassert solution(\"......\\n#.....\\n#.....\\n#.....\\n......\\n......\\n\") == \"cannot fold\"\nassert solution(\"......\\n...#..\\n...#..\\n...#..\\n......\\n......\\n\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"......#.#.#..#....#..#....#.#.....#......#......#......#..........#............#...........#..#.##..##..##..#.....#.......\") == \"cannot fold\"\nassert solution(\"#....##..##..#..###..........#...........#..#.##.#.##........###...#.##...##.##...#.##..##..##..#..##..##..#.....#.......\") == \"can fold\"\nassert solution
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('###.##\\n######\\n##.###\\n##...#\\n##.###\\n##.###\\n######\\n###.##\\n') == \"can fold\"\nassert solution('#..#.\\n#.#.##\\n#..#.#\\n#.##..\\n#.##.#\\n#...##\\n#..#.#\\n#.#...\\n') == \"cannot fold\""
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n......\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aabcdefffg\") == \"abcdefffg\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n\"\"\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nThe quick brown fox jumps over the lazy dog\n''') == 'over'\nassert solution('''\nI am home\n''') == 'home'\nassert solution('''\nAbc\nabc\naabc\nabc\nabca\nabc\n''') == 'abc'\nassert solution('''\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\""
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    'abcdefgabc'\n    ) == 'abc'\n\nassert solution(\n    'abcbabcba'\n    ) == 'abcba'\n\nassert solution(\n    'aaaa'\n    ) == 'aaa'\n\"\"\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('a ab c') == ''\nassert solution('a abc') == 'a'\nassert solution('abcbabcba') == 'abcba'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\nprint(solution(input()))\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n1 4\n2 5\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n2\n1 4\n2 10005\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n3\n1 4\n2 10\n0 15\n\"\"\") == \"4\""
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '6'\nassert solution('4') == '10'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 4\n2 5\n''') == '4'\nassert solution('''\n2\n1 4\n2 10005\n0 15\n''') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 4\n2 5\n''') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '4', 'First'\nassert solution('2 1') == '4', 'Second'\nassert solution('3 1') == '3', 'Third'\n\n\"\"\""
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 4\n2 5\n0 15\n''') == '4'\nassert solution('''\n3\n1 4\n2 10005\n0 15\n''') == '6''')\n\nassert solution('''\n1 10\n1 11\n0 10\n''') == '6''')"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 4\\n2 5\\n0 15\") == \"4\"\nassert solution(\"2 4\\n2 10005\\n0 15\") == \"6\"\n\nprint(solution(input()))\n\n'''\n\nimport math"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 5\n5 9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2 1\n3 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 2\n3 4\n3 5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7') == '2'\nassert solution('3') == '3'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 2 3 4 4 8 12 24') == '2'\nassert solution('3 7 7 7') == '3'\nassert solution('5 1 2 3 2 1') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n2 3 4 4 8\n''') == '2'\nassert solution('''\n7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''\n3\n7 7 7\n''') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n7\n2 3 4 4 8 12 24\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n7 7 7\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 2 3 2 1\n\"\"\") == \"0\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''\n3\n7 7 7\n''') == '0'\nassert solution('''\n5\n1 2 3 2 1\n''') == '1'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\n7 2 3\n\n\"\"\"\n) == \"2\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"2\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '0'\nassert solution('7') == '2'\nassert solution('3') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\") == \"3\"\nassert solution(\"1 2 1\\nGS\") == \"1\"\nassert solution(\"1 2 10\\nS#\\n#G\") == \"-1\""
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('2 2 10') == '2'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5 4\") == \"3\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"2 2 10\") == \"1\""
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == \"3\"\nassert solution('2 1 2\\nGS\\n') == \"1\"\nassert solution('2 2 1\\nGS\\n') == \"1\"\nassert solution('2 2 1\\nGS\\n') == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 5 4\nS#.F.\n.MFMG\n''') == '3'\nassert solution('''\n2 2 10\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 5 4\nS#.F.\n.MFMG\n''') == '3', 'Sample Test Case 1'\nassert solution('''\n1 2 1\nGS\n''') == '1', 'Sample Test Case 2'\nassert solution('''\n2 2 10\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == '3'\nassert solution('1 2 1\\nGS\\n') == '1'\nassert solution('1 2 1\\nS#\\n#G\\n') == '-1'\nprint('Almost done!')"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 5 4\nS#.F.\n.MFMG\n''') == '3'\nassert solution('''\n2 5 4\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(samples[0]) == '3'\nassert solution(samples[1]) == '1'\nassert solution(samples[2]) == '-1'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 5 4\") == \"3\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"2 2 10\") == \"1\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"2\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sample_input_1) == \"1\", \"First Test\"\nassert solution(sample_input_2) == \"1\", \"Second Test\"\nassert solution(sample_input_3) == \"2\", \"Third Test\""
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1'\nassert solution('3 7') == '1'\nassert solution('3 8') == '2'\nassert solution('3 9') == '2'\nassert solution('3 10') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"R\") == \"1\"\nassert solution(\"RRD\") == \"1\"\nassert solution(\"RRRDRR\") == \"1\"\nassert solution(\"RDRRDRR\") == \"2\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n.S..\n.G..\n..G\n''') == '1', 'First'\nassert solution('''\n3 7\n.......\n.G.##S.\n.......\nLDLDLLDR\n''') == '1', 'Second'\nassert solution('''\n3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '2', 'Third'\nassert solution('''\n3 7\nS..\n.G..\n..G\n''') == '0', 'Fourth'\nassert solution('''\n3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '0', 'Fifth'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(s) == 1\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\nS..\n.#.\n..G\nDRRDD\n''') == '1'\nassert solution('''\n3 7\n.......\n.G.##S.\n.......\nLDLDLLDR\n''') == '1'\nassert solution('''\n3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\nS..\n.#.\n..G\nDRRDD\n''') == '1'\nassert solution('''\n3 7\n.......\n.G.#.S.\n.......\nLDLDLLDR\n''') == '1'\nassert solution('''\n3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDD\") == \"1\"\nassert solution(\"3 7\\nS.G.#.\\n.G.##S\\n..##.\\n...G.\") == \"2\"\nassert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDD\") == \"1\""
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('\\n'.join(['10','2','3'])) == '\\n'.join(['20','4','5'])\nassert solution('\\n'.join(['1000000000','0','0'])) == '\\n'.join(['100020000','0','0'])\nassert solution('\\n'.join(['1000000000','1000000000','0'])) == '\\n'.join(['1000000000','1000000000','0'])\nassert solution('\\n'.join(['1000000000','0','1000000000'])) == '\\n'.join(['1000000000','0','1000000000'])\nassert solution('\\n'.join(['1000000000','0','0','1000000000'])) == '\\n'.join(['1000000000','0','0','1000000000'])\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == \"1000200 799\"\nassert solution(sample_input_2) == \"uncertain\"\nassert solution(sample_input_3) == \"impossible\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'uncertain'\nassert solution('1') == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\n-10 0 100\n-100 -10 200\n''') == '100100'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"1000200 799\"\nassert solution(\"\"\"\n2\n100 0 100\n0 200 199\n\"\"\") == \"uncertain\"\nassert solution(\"\"\"\n2\n100 0 100\n0 200 199\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\nassert solution('''\n2\n100 0 100\n0 200 199\n''') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1000200 799'\nassert solution('2') == 'uncertain'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n100 0 101\n0 200 199\n''') == '1000200 799'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n4 7') == '2\\n1\\n'\nassert solution('2\\n4 7\\n9 8') == '2\\n1\\n'\nassert solution('2\\n4 7\\n14 17') == '2\\n1\\n'\nassert solution('2\\n4 7\\n19 18') == '2\\n1\\n'\nassert solution('2\\n4 8') =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\\n2\\n3\\n4\\n5\\n6\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n4 7\n9 8\n14 17\n19 18\n''') == '2'\nassert solution('''\n2\n4 7\n14 17\n9 8\n19 18\n''') == '1'\n'''\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('4 7') == '2'\nassert solution('4 7') == '1'\nassert solution('4 7') == '2'\nassert solution('4 7') == '1'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('2') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n4 7\\n9 8\\n14 17') == '2'\nassert solution('3\\n4 7\\n9 8\\n14 17') == '1'\nassert solution('3\\n4 7\\n9 8\\n14 17') =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n4 7\n9 8\n14 17\n19 18\n''') == '2 1'\nassert solution('''2\n4 7\n9 8\n14 17\n19 18\n''') == '1 2'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"syntax error\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '2',\n    '4 7',\n    '9 8',\n    '14 17',\n    '19 18',\n    '14 18',\n) == '2 1'\nassert solution(\n    '3',\n    '4 7',\n    '14 17',\n    '9 8',\n    '19 18',\n    '14 18',\n) =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n4 7\n9 8\n''') == '2'\n\nassert solution('''\n2\n4 7\n9 8\n''') == '1'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\nassert solution('160 _ _ 136 _ _ _ _ 170\\n_ _ _ _ _ _ _ 85 63 153\\n') == '8640'\nassert solution('_ 9 1 _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n') =='many'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\") == \"1\"\nassert solution(\"_ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\") == \"8640\"\nassert solution(\"_ _ _ _ _ _ _ 85 63 153\") == \"many\"\n\n'''\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81') == '1'\nassert solution('_ 40 _ _ _ 12 60 _ 90 _') == '1'\nassert solution('160 _ _ 136 _ _ _ _ 170') == '8640'\nassert solution('_ _ _ _ _ _ _ 85 63 153') == '8640'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\") == \"1\"\nassert solution(\"_ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ 170\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"_ 90 22 _ 6 _ _ _ _ 81\\n\"\n    \"_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\n    \"85 55 _ 99 51 _ _ _ _ _\\n\"\n    \"_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\n    \"160 _ _ 136 _ _ _ _ _ 170\\n\"\n    \"_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n''') == \"1\"\nassert solution('''\n85 55 _ 99 51 _ _ _ _ _\n_ _ _ _ _ _ _ 85 63 153\n''') == \"1\"\nassert solution('''\n160 _ _ 136 _ _ _ _ _ 170\n_ _ _ _ 120 _ _ 144 _ _\n''') == \"8640\"\nassert solution('''\n_ 0 _ _ 0 _ _ _ _ _\n_ _ _ _ _ _ _ 0 _ _\n''') == \"many\"\nassert solution('''\n_ 0 _ 0 0\n_ 0 _ 0 0\n''') == \"many\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n''') == '1'\nassert solution('''\n160 _ _ 136 _ _ _ _ _ 170\n_ _ _ _ 120 _ _ 144 _ _\n''') == '8640'"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ 170\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(t) == '2'\nassert solution(t) == '8'\nprint('Congratulations!')\n'''\n\n\n\nimport math\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\nassert solution('''\n10\n1 2\n2 3\n2 4\n1 5\n3 6\n2 7\n7 8\n5 9\n5 10\n''') == '24'"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2\n1 3\n''') == '2'\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\nprint('all tests passed')\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2\n1 3\n''') == '2'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"24\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\nassert solution('''\n10\n2 1\n1 5\n3 1\n4 3\n''') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"2\"\nassert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\") == \"8\"\nassert solution(\"10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10\") == \"24\""
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '3'\nassert solution('apples') == '0'"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\nassert solution('apples') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"3\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"apples\") == \"0\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nsecretmessage\nboot\n''') == 'essa'\n\nassert solution('''\ntreetreetreetree\nwood\n''') == '3'\n\nassert solution('''\noranges\napples\n''') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '3'\nassert solution('oranges') == '0'\nprint('\"{}\" passed all tests.'.format(solution))\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\nprint(solution(''))\n\nassert solution('') == ''\n\nprint(solution('m'))\n\nassert solution('m') == ''\n\nprint(solution('d'))\n\nassert solution('d') == ''\n\nprint(solution('r'))\n\nassert solution('r') == ''\n\nprint(solution('o'))"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(open(\"input.txt\").read().strip()) == \"1\"\nassert solution(open(\"input.txt\").read().strip()) == \"0\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('treetreetreetree') == '3'\n\nassert solution('boot') == '1'\n\nassert solution('apples') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('oranges') == '0'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n<<<\n####\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '4'\nassert solution('5') == '2'"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\nassert solution('3') == '1'\nassert solution('1') == '0'\nprint('You passed all the tests!')\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('5') == '1'\nassert solution('4') == '4'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == '2'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n<^>') == '2'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"4<>\") == \"2\"\nassert solution(\"<>R^<>\") == \"3\"\nassert solution(\"<>^<>\") == \"3\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n>^<\\n####\\n#.R#\\n#..#\\n####\\n\") == \"4\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('2') == '1'\nassert solution('5') == '3'\nassert solution('3') == '1'"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2''') == '3'\nassert solution('''3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1''') == '6'\nassert solution('''3\n3 1 3 2 1 2 3\n3 1 3 2 1 2 3''') == '8'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\nassert solution('''\n2\n7 0 0 20 10 3 0 10\n10 1 0 2 5 2 2 7\n''') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('5') == '9'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\nassert solution('''\n2\n7 0 0 20 10 3 0 10\n10 1 0 2 5 2 2 7\n''') == '11'\n\nassert solution('''\n\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nprint('all tests passed')\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '6'\nprint('all tests passed')\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\nassert solution('''\n2\n7 0 0 20 10 3 0 10\n10 1 0 2 5 2 2 7\n''') == '11'"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2''') == '3'\nassert solution('''3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1''') == '6'\nprint(solution('''3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1'''))\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"163.5274740179\"\nprint(solution(open(\"input.txt\")))\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == '168.7916512460', \"First example\"\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\n''') == '163.5274740179', \"Second example\"\nassert solution('''0.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0\n''') == '3.7320508076', \"Third example\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"40.0 0.0 0.0 0.0\") == \"163.5274740179\"\nassert solution(\"5.0 20.0 5.0 170.0\") == \"163.5274740179\"\nassert solution(\"95.0 0.0 95.0 80.0\") == \"163.5274740179\"\nassert solution(\"0.0 1.0 4.0 1.0\") == \"3.7320508076\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == \"168.7916512460\"\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0''') == \"163.5274740179\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"0.0 1.0 4.0 1.0\") == \"3.7320508076\"\nassert solution(\"40.0 0.0 0.0 0.0\") == \"163.5274740179\""
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == \"168.7916512460\", \"First example\"\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0''') == \"163.5274740179\", \"Second example\"\nassert solution('''1.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0\n''') == \"3.7320508076\", \"Third example\""
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"163.5274740179\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == \"168.7916512460\"\nassert solution('60.0 0.0 50.0 170.0') == \"163.5274740179\"\nassert solution('0.0 1.0 4.0 1.0') == \"3.7320508076\""
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n''') == '168.7916512460'\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\n''') == '163.5274740179'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == \"168.7916512460\"\nassert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == \"163.5274740179\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\n'''\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 5 3\n''') == 'rarity'\nassert solution('''\n9 8 1\n''') == 'canterlot'\nassert solution('''\n5 3 5\n''') =='madam'\n'''\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\n\"\"\"\n\n\nclass Solution:\n    def solve(self, N, K, P):\n        def is_palindrome(string):\n            if len(string) == 1:\n                return True\n            if string[0]!= string[-1]:\n                return False\n            return is_palindrome(string[1:-1])\n        left = 0\n        right = N - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if is_palindrome(string[mid]) and string[mid + 1:mid + P + 1] in string[mid + 1:mid + P + 2]:\n                return string[:mid] + string[mid + P + 1:]\n            if string[mid] == string[mid + 1]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return 'IMPOSSIBLE'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"rarity\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 5 3\n        rarity''') == 'rarity'\nassert solution('''6 1 1\n        rarity''') == 'canterlot'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 5 3\n''') == 'rarity'\nassert solution('''\n9 8 1\n''') == 'canterlot'\n'''\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\""
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([6, 5, 3]) == 'rarity'\nassert solution([9, 8, 1]) == 'canterlot'\nassert solution([5, 3, 5]) =='madam'\n\n---Input---\nstdin = [\"6\", \"5\", \"3\"]\n\n---Output---\nrarity\n\n---Input---\nstdin = [\"9\", \"8\", \"1\"]\n\n---Output---\ncanterlot\n\n---Input---\nstdin = [\"5\", \"3\", \"5\"]\n\n---Output---\nmadam\n\n\"\"\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"blue\") == \"Blue\"\nassert solution(\"leaves\") == \"Leaves\"\nassert solution(\"glowing in autumn sun\") == \"Glowing in autumn sun\"\nassert solution(\"who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International contest- motivation high Programmers have fun!\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"Blue Ridge\nmountain road.\nLeaves, glowing in autumn sun, fall in Virginia.\n\"\"\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\n\nassert solution(\"\"\"Who would know if we had too few syllables?\n\"\"\") == \"Who would know if we had too few syllables?\"\n\nassert solution(\"\"\"International contest-\nmotivation high Programmers have fun!.\n\"\"\") == \"International contest-\\nmotivation high Programmers have fun!.\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"Blue Ridge mountain road.\") == \"Blue Ridge mountain road.\"\nassert solution(\"Leaves, glowing in autumn sun, fall in Virginia.\") == \"Leaves, glowing in autumn sun, fall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\n\nstdin = 'The quick brown fox jumps over the lazy dog.'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. ') == \\\n    'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('Who would know if we had too few syllables? ') == \\\n    'Who would know if we had too few syllables? '\nassert solution('International contest- motivation high Programmers have fun!. ') == \\\n    'International contest- motivation high\\nProgrammers have fun!.'"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nprint(solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.'))\nassert solution('who would know if we had too few syllables?') == 'who would know if we had too few syllables?'\nprint(solution('who would know if we had too few syllables?'))\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest-\\nmotivation high Programmers have fun!.\nprint(solution('International contest- motivation high Programmers have fun!. '))\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nLeaves, glowing in autumn sun,\nfall in Virginia.\n''') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nprint(solution('''\nWho would know if we had too few syllables?\n'''))\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!. \") == \"International contest-\\nmotivation high Programmers have fun!.\"\nprint(solution(input()))\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\nThoreTiemann\\nThoreHusfeldt') == 'ThoreH'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nThoreTiemann\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreH"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    ThoreTiemann\n    ThoreHusfeldt\n    ThoreHusfeldter\n    ThoreHusfeldt\n    \"\"\"\n) == \"Thore is awesome\"\nassert solution(\n    \"\"\"\n    ThoreHusfeldter\n    ThoreHusfeldt\n    ThoreHusfeldt\n    ThoreHusfeldt\n    \"\"\"\n) == \"Thore sucks\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Thore sucks\"\nprint(solution(stdin))"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\nThoreTiemann\nThoreHusfeldt\nThoreHusfeldter''') == 'Thore sucks'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\nThoreTiemann\nThoreHusfeldt\n''') == 'ThoreHusfeldt'"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'ThoreH'\nassert solution('2') == 'Thore sucks'\nassert solution('3') == 'Thore sucks'\nassert solution('4') == 'Thore is awesome'\nassert solution('5') == 'Thore is awesome'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Thore is awesome\"\nassert solution(\"2\") == \"Thore sucks\"\nassert solution(\"3\") == \"Thore is awesome\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"ThoreH\"\nassert solution(\"2\") == \"Thore is awesome\"\nassert solution(\"2\") == \"Thore sucks\"\nprint(solution(input()))\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"Thore sucks\"\nprint(solution(input()))\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == \"33\"\nassert solution(solution.__doc__) == \"33\"\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n\n    def __init__(self):\n        self.matrix = []\n\n    def inputMatrix(self):\n        self.matrix = []\n        row = int(input())\n        for _ in range(row):\n            self.matrix.append(input().split(' '))\n\n    def getMatrix(self):\n        return self.matrix\n\n    def solution(self):\n        ans = 0\n        for row in range(len(self.matrix)):\n            for col in range(len(self.matrix[0])):\n                if row == 0:\n                    if self.matrix[row][col] == 'L':\n                        ans += 2*int(self.matrix[row+1][col])\n                    elif self.matrix[row][col] == 'R':\n                        ans += 2*int(self.matrix[row+1][col+1])\n                elif col == 0:\n                    if self.matrix[row][col] == 'L':\n                        ans += int(self.matrix[row][col+1])\n                    elif self.matrix[row][col] == 'R':\n                        ans += int(self.matrix[row-1][col+1])\n                else:\n                    if self.matrix[row][col] == 'L':\n                        ans += int(self.matrix[row][col-1])\n                    elif self.matrix[row][col] == 'R':\n                        ans += int(self.matrix[row][col+1])\n        return str(ans)\n\n    def __str__(self):\n        return self.solution()\n\n\nclass Test(unittest.TestCase):\n    def setUp(self) -> None:\n        s = Solution()\n        s.inputMatrix()\n        self.matrix = s.getMatrix()\n\n    def test_ans(self):\n        ans = self.matrix\n        s = Solution()\n        assert s.solution() == ans\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"L*R\") == \"25\"\nassert solution(\"L*R*L\") == \"11\"\nassert solution(\"L*P*R\") == \"15\"\nassert solution(\"L*P*R*L\") == \"11\"\nassert solution(\"**\") == \"33\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('L*R') == '25'\nassert solution('P*P') == '6'\nassert solution('L*R*L*R') == '33'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\nprint('all tests passed')\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\n\n---\n\n*** What is it?\nThe following definition gives you a principle of the *Tree Walk*. \n\n- A walk is a sequence of steps where each step is one of the following:\n    * (a) Jump to the left child;\n    * (b) Jump to the right child;\n    * (c) Rest.\n- You can use either (a) or (b) to jump, but not both.\n\n- For each step, you can either move by 1 or by 2, but not both.\n\n- In the binary tree, the root is labeled with 1, and children of each node are labeled with twice the value of the node.\n\n- You can start at any node, not just the root, and you can follow any of the above steps, but cannot go out of the tree.\n\n- Each step takes 1 second to move and each second gives you a pause of 10 seconds.\n\n- For the tree,\n    - The root node (1) is labeled with 1, and the left child (2) is labeled with 2, and the right child (3) is labeled with 3.\n    - The left child (2) is labeled with 2, and the right child (3) is labeled with 3.\n    - The right child (3) is labeled with 3, and the left child (2) is labeled with 2.\n\n- Each jump takes 1 second to move and each second gives you a pause of 10 seconds.\n\n- For the tree, the left child of the root node (1) is labeled with 1, and the right child of the root node (1) is labeled with 2.\n\n- For the tree, the left child of the left child (2) is labeled with 2, and the right child of the right child (3) is labeled with 3.\n\n- For the tree, the right child of the left child (2) is labeled with 2, and the left child of the right child (3) is labeled with 3.\n\n- Each pause takes 1 second to move and each second gives you a pause of 10 seconds.\n\n- For the tree, the left child of the left child (2) is labeled with 2, and the right child of the right child (3) is labeled with 3.\n\n- For the tree, the right child of the left child (2) is labeled with 2, and the left child of the right child (3) is labeled with 3.\n\n- For the tree, the left child of the right child (3) is labeled with 3, and the right child of the left child (2) is labeled with 2.\n\n- The jump (2) is repeated twice, so you can move twice and the pause for each step.\n\n- The left child of the left child (2) is labeled with 2, and the right child of the right child (3) is labeled with 3.\n\n- You can repeat these steps 1, 2, 2, 3, 4, 4, 4, 3, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\nprint('all tests passed')\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''P*P\nL*R\nP*P''') == '6'\nassert solution('''P*P\nL*R\nP*P''') == '25'\nassert solution('''P*P\nP*P''') == '33'\nassert solution('''P*P\n*P''') == '33'\nassert solution('''P*P\nP*P''') == '6'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\nherp is derp') == 'yes', \"Should return 'yes'\"\nassert solution('3\\noskar not lukas') == 'wait what?', \"Should return 'wait what?'\"\nassert solution('4\\ntherp is derp') == 'wait what?', \"Should return 'wait what?'\"\nassert solution('5\\nherp is derp') == 'wait what?', \"Should return 'wait what?'\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\noskar not lukas\noskar is poptart\nlukas is smart\n''') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n' 'herp is derp\\n' 'derp is herp\\n' 'herp is herp\\n' 'derp is derp') == 'yes'\nassert solution('3\\n' 'oskar not lukas\\n' 'oskar is poptart\\n' 'lukas is smart\\n') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n3\nherp is derp\nderp is herp\nherp is herp\n'''\n) == 'yes'\nassert solution(\n'''\n2\noskar not lukas\noskar is poptart\nlukas is smart\n'''\n) == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\nherp is derp\nderp is herp\nherp is herp\n\"\"\") == \"yes\"\nassert solution(\"\"\"\n4\noskar not lukas\noskar is poptart\nlukas is smart\nlukas is smart\n\"\"\") == \"wait what?\"\nassert solution(\"\"\"\n1\nmoo not foo\n\"\"\") == \"yes\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\noskar not lukas\noskar is poptart\nlukas is smart\n''') == 'wait what?'\nassert solution('''\n1\nmoo not foo\n''') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\\n') == 'yes'\nassert solution('3\\noskar not lukas\\noskar is poptart\\nlukas is smart\\n') == 'wait what?'\nassert solution('2\\nherp is derp\\nherp is herp\\nherp is herp\\nherp is herp\\n') == 'yes'\nassert solution('1\\nmoo not foo\\nmoo is poptart\\nmoo is smart\\n') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''oskar not lukas\nlukas is smart''') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == 'wait what?'\nassert solution('4') == 'yes'\nassert solution('5') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\") == \"yes\"\nassert solution(\"2\\noskar not lukas\\noskar is poptart\\nukas is smart\\n\") == \"wait what?\"\nassert solution(\"3\\nmoo not foo\\n\") == \"yes\"\nassert solution(\"4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\\n\") == \"wait what?\"\nassert solution(\"5\\n\") == \"wait what?\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\nACA\nACM\nACM''') == '4'\n\"\"\"\nThis function has a single parameter:\nstdin: a string consisting of lines of nucleotide sequences.\nYour solution should return a single string consisting of the number of nucleotide sequences found in the fossil record that participate in the first evolutionary path and the number of nucleotide sequences found in the fossil record that participate in the second evolutionary path. The genomic sequences in the fossil record are arranged in chronological order.\n\nFor the first example, the output should be \"4 4\". The first line is the number of nucleotide sequences in the fossil record that participate in the first evolutionary path. The second line is the number of nucleotide sequences in the fossil record that participate in the second evolutionary path.\n\nFor the second example, the output should be \"impossible\".\n\nFor the third example, the output should be \"3 3\". The genomic sequences in the fossil record are arranged in chronological order.\n\nThe genome of the single-nucleotide species that currently lives on the planet is AACCMMAA. Each sequence is in the following format: aaaacccc\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n\"\"\") == \"1 4\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'impossible'\nassert solution(input_string=\"\"\"\n5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n\"\"\") == '1 4'\n\nassert solution(input_string=\"\"\"\n3\nACMA\nACM\nACA\nAMA\n\"\"\") == 'impossible'\n\nassert solution(input_string=\"\"\"\n1\nAM\nMA\n\"\"\") == 'impossible'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\nAACCMMAA\\nACA\\nMM') == '1 4\\nMM\\nA\\nAA\\nACA'\nassert solution('1\\nAACCMMAA') == '1 4\\nAACCMMAA'\nprint('Tests passed')\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1 4'\nassert solution('3') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\nSample Input 4:\n2\nAC\nAM\nSample Output 4:\n1 1\n2 1\n\nSample Input 5:\n1\nAM\nSample Output 5:\nimpossible\n''') == '1 1'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1 4'\nassert solution('3') == 'impossible'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\nA\nA\nA\nA''') == 'impossible'\nassert solution('''4\nAC\nCA\nCA\nAC''') == 'impossible'\nassert solution('''5\nAACC\nAA\nA\nAC\nA''') == '1 4'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n''') == '1 4'\nassert solution('''3\nACMA\nACM\nACA\nAMA\n''') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\"\"\") == \"\"\"1 4\nMM\nA\"\"\"\nassert solution(\"\"\"3\nACMA\nACM\nACA\nAMA\n\"\"\") == \"\"\"impossible\"\"\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n20\\n0.5\\n10\\n') == '1\\n18.9029850746\\n'\nassert solution('10\\n100\\n5\\n20\\n') == '10\\n18.9029850746\\n'\nassert solution('10\\n100\\n5\\n20\\n') == '10\\n18.9029850746\\n'"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4 1\n1 0.5 5\n''') == '3'\nassert solution('''20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124'\nassert solution('''10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.9087462439999999'\nassert solution('''5 10 1\n0.5 1 1\n0.5 1 1\n0.5 1 1\n0.5 1 1\n''') == '11.05'\nassert solution('''10 10 1\n0.5 1 1\n0.5 1 1\n0.5 1 1\n0.5 1 1\n''') == '11.1'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124','sample test 1'\nassert solution('''2 4 1\n1 0.5 5\nSample Output 2:\n3''') == '18.9029850746','sample test 2'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 4 1\n1 0.5 5\n''') == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == \"18.9029850746\"\n\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == \"18.9029850746\"\n\"\"\"\n\nimport sys\nimport bisect\n\nn, r, m = list(map(int, input().split()))\nranges = []\nfor i in range(m):\n    t, p, d = list(map(float, input().split()))\n    ranges.append((t, p, d))\n\ntimes, probs, dists = list(map(float, input().split()))\n\nranges.sort()\ntimes = list(map(int, input().split()))\nprobs = list(map(float, input().split()))\ndists = list(map(float, input().split()))"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '6.6666666666'\nassert solution('2 4 1') == '3.3333333333'\nassert solution('10 20 3') == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(s) == \"18.90416667\"\nassert solution([10, 20, 3]) == \"3.0\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 1') == '3'\nassert solution('10 20 3') == '18.9029850746'\nassert solution('100 111 5') == '124'"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '18.9029850746'\nprint('All test cases passed')\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == '2 1 2'\nassert solution(input) == '4 3 4 2'\nassert solution(input) == '2 1 2'\nassert solution(input) == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '2 1 2'\nassert solution('1 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n2 1 2\n''') == '2 1 2'\nassert solution('''4 1\n1''') == '1'\nassert solution('''5 2\n2''') == '1'\nassert solution('''5 4\n4 3 2 1''') == '3 4 1 2'\nprint('all test cases passed!')\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"2 1 2\"\nassert solution(\"4 3\") == \"2 1 2\"\nassert solution(\"5 22\") == \"4 3 4 2\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n2 1 2\n''') == '2 1 2'\nassert solution('''5 22\n4 3 4 2\n''') == '4 3 4 2'\n\nfrom itertools import combinations\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1') == '2 1 2'\nassert solution('6 1') == '5 2 4 1'\nassert solution('3 8') == '6 1 2 3 4 5 7 8'\nassert solution('4 1') == '1 1 2 3'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n2 1 2\n''') == '2 1 2'\nassert solution('''\n2 1\n''') == '1'\nassert solution('''\n5 22\n4 3 4 2\n''') == '4 3 4 2'\nprint('All tests passed!')"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1 3\\n3 4') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7') == '2'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4\\n1 2\\n1 3\\n3 4\\n2 4\\n') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\\n') == '2'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"7 6\") == \"2\"\nassert solution(\"7 5\") == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 4\\n4 5') == '2'\nassert solution('10 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '2'\nassert solution('3 5') == '2'\nassert solution('7 5') == '2'\nassert solution('3 4') == '1'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 6\") == \"2\"\nassert solution(\"7 5\") == \"0\"\nassert solution(\"6 7\") == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == '2'\nassert solution('7 6') == '2'\nassert solution('7 5') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\nassert solution('''7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\n''') == '2'\nassert solution('''7 5\n1 2\n2 3\n3 4\n5 6\n6 7\nSample Output 3:\n0\n\n''') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '2'\nassert solution('4 4\\n1 2\\n1 3\\n3 4\\n2 4\\n') == '2'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '0'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '0'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\nassert solution('''0 20\n1.00 0.10''') == '28.26445910'\nprint(solution('''10 0\n1.00 0.10'''))\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"1.00 0.10\") == \"20.00000000\"\nassert solution(\"-10 10\") == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"1.00000000000001\"\nassert solution(\"2 -8\") == \"1.00000000000001\"\nassert solution(\"-6 -7\") == \"1.00000000000001\"\nassert solution(\"-2 -4\") == \"1.00000000000001\"\nassert solution(\"8 2\") == \"1.00000000000001\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"10.00 1.00\") == \"3.14159265\"\nassert solution(\"-10 10\") == \"3.14159265\""
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''20 0\n1.00 0.10\n''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00\n''') == '3.14159265'\nassert solution('''0 20\n1.00 0.10\n''') == '28.26445910'"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.00000000\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\nassert solution(\"0 20\\n1.00 0.10\") == \"28.26445910\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('20 0') == '20.00000000'\nassert solution('-10 10') == '3.14159265'\nassert solution('0 20') == '28.26445910'"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"-10 10\") == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '28.26445910'\nprint('The local tests passed')\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 100\\n1 100\\n4 70\\n3 70\\n\") == \"170\"\nassert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\\n\") == \"170\"\nassert solution(\"10\\n50 20\\n1 10\\n4 20\\n5 10\\n\") == \"225\"\nassert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\\n\") == \"170\""
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '1'"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 5\") == \"2\"\nassert solution(\"3 5\") == \"3\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70\\n') == '170'\nassert solution('3\\n2 120\\n3 50\\n2 80\\n') == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n2 100\n1 100\n4 70\n3 70\n\"\"\") == \"170\"\nassert solution(\"\"\"\n3\n2 120\n3 50\n2 80\n\"\"\") == \"150\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '170'\nassert solution('2') == '170'\nassert solution('4') == '170'\nassert solution('1') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n2 100\n1 100\n4 70''') == '170'\nassert solution('''4\n2 100\n1 100\n4 70\n3 70\n2 80''') == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70\\n') == '170'\nprint(solution.__doc__)\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5\n2 100\n1 100\n4 70\n3 70\n2 80\n\"\"\"\n) == \"170\"\n\nassert solution(\n\"\"\"\n4\n2 100\n1 100\n4 70\n3 70\n2 80\n\"\"\"\n) == \"150\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"170\"\nassert solution(\"4\") == \"150\"\nassert solution(\"5\") == \"150\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3') == '2'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '2'\nassert solution('''5 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '4'\nassert solution('''7 7\n1 2\n1 3\n2 4\n3 4\n3 5\n4 6\n4 7\n5 6''') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 3') == '2'\nassert solution('1 2') == '1'\nassert solution('4 4') == '0'\nassert solution('6 6') == '4'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '2'\nassert solution('6 6') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 4\n1 2\n1 3\n2 4''') == \"2\"\nassert solution('''4 4\n1 2\n1 3\n2 4\n3 4''') == \"4\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 6') == '5'\nassert solution('4 4') == '3'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '2'\nassert solution('''6 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '5'"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 4') == '2'"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n''') == '2'\n\"\"\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == 2\nassert solution('1 3') == 2\nassert solution('2 4') == 1\nassert solution('2 5') == 2\nassert solution('3 4') == 1\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0.5', solution('1')\nassert solution('8') == '0.0446429', solution('8')\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '3\\n'\n    '1\\n'\n    '0\\n'\n    '2 1 2\\n'\n    '1 0\\n'\n    '1 0\\n'\n    '1 0\\n'\n    'Sample Output 2: 0.0446429'\n    ) == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'\nprint('solution()')\n\n---------------------------------------------------------------\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0.5'\nassert solution('8') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 2\\n1 0\\n1 0') == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == '0.5'\nassert solution(sample_input_2) == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0.5'\nassert solution('2') == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7\n1 2 3 3 2 1\n''') == '3'\nassert solution('''\n6\n1 2 3 3 2 1\n''') == '3'\nassert solution('''\n4\n1 2 1 2\n''') == 'IMPOSSIBLE'\nassert solution('''\n5\n1 2 1 2 1\n''') == '1 2 1 2 1'\nassert solution('''\n5\n1 2 3 4 2\n''') == '1 6 2 5 2'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 3 3 2\n''') == '3\n2\n1 6 1\n2 5 2\n3 4 3\n''')\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n1 2 3 3 2 1\n''') == '3'\nassert solution('''\n4\n1 2 1 2\n''') == 'IMPOSSIBLE'\nprint('PASSED')"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n1 2 3 3 2 1\n''') == '3'\n\nassert solution('''\n4\n1 2 1 2\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n10\n1 2 2 2 2 2 2 3 3 3 3 2 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == \"3\"\nassert solution('4') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '3\\n1 6 1'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n3 1 2 1 1\\n') == '1 6 1\\n2 5 2\\n3 4 3'\nassert solution('5\\n3 1 2 1 1\\n') == 'IMPOSSIBLE'\nassert solution('5\\n1 1 2 1 1\\n') == '1 6 1'\nassert solution('10\\n1 3 2 1 3 2 3 2\\n') == '1 6 1\\n2 5 2\\n3 4 3'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    6\n    1 2 3 3 2 1\n''') == '3\\n1 6 1\\n2 5 2\\n3 4 3\\n'''"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7\n1 2 3 4 5 3\n''') == '2 1 6 1'\nassert solution('''\n9\n1 2 1 2 1 2 3\n''') == '2 1 6 1'\nassert solution('''\n10\n2 3 1 2 1 2 3 4\n''') == '1 6 3'\nassert solution('''\n11\n1 2 1 2 1 2 3\n4 5 4 4 4 4 5\n''') == '1 5 2 3 4 5'\nassert solution('''\n12\n2 2 2 1 3 1 1\n4 5 2 2 2 4 4\n''') == '2 3 4 5 2 1 1'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2 3\n2 3 1\n3 2 1\n''') == '3\n1 6 1\n2 5 2\n3 4 3\n''')"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10 20 30 40 50\\n2 28 27') == '10 20 28 27 30 40 50'\nassert solution('3\\n1 2\\n1 100') == '1 2 100'\nassert solution('10\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n1 2\n1 100\n1 1\n\"\"\") == \"\"\"\n1 2 100\n\"\"\"\nassert solution(\"\"\"\n3\n1 2\n1 100\n1 1\n\"\"\") == \"\"\"\n1 2 100\n\"\"\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 100') == '1 100'\nassert solution('1 1') == '1 1'\nassert solution('2 28') == '2 28'\nassert solution('5 10 20 30 40 50') == '10 20 28 27 30 40 50'\n\n\"\"\"\n\n\nn = int(input())\n\ndata = []\n\nfor i in range(n):\n    data.append(input())\n\ndata.sort()\n\nfor i in data:\n    print(i)"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n1 100\\n1 1') == '1 2 100'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('3') == '1 2 1'\nassert solution('5 10 20 30 40 50') == '10 20 28 27 30 40 50'"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n1 100\\n1 1\\n') == '1 2 100'\nassert solution('2\\n5 10 20 30 40 50\\n2 28 27\\n') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10 20 30 40 50\\n2 28 27\") == \"10 20 28 27 30 40 50\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1 2'\nassert solution('2') == '1 100'\nassert solution('3') == '1 2'\nassert solution('2') == '1 28'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2\n1 100\n1 1''') == '1 2 100'\nassert solution('''3\n1 2\n1 100\n1 1''') == '1 2 100'"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '5 10 20 30 40 50\\n2 28 27') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '2600'\nassert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '506'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0\") == '2600'\nassert solution(\"1\") == '506'\nassert solution(\"2\") == '2600'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '2600'\nassert solution('0') == '2600'\nassert solution('1') == '2600'\nassert solution('2') == '2300'\nassert solution('3') == '2300'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'\nassert solution('3') == '506'"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '25'\nassert solution('3') == '64'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '', 'Should be empty'\nassert solution('1') == '', 'Should be empty'\nassert solution('1') == '', 'Should be empty'\nassert solution('1') == '', 'Should be empty'\nassert solution('1') == '', 'Should be empty'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2562'\nassert solution('4') == '1070'\nassert solution('5') == '6126'\n\n## Solution:"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0\\n') == '2600', \"Wrong\"\nassert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '506', \"Wrong\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"()))\" == \"possible\"\nassert solution(\")))(\" ) == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"possible\"\nassert solution() == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\nassert solution(\"(())\") == \"possible\"\nassert solution(\")(()\") == \"impossible\"\nassert solution(\"(()\") == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(')()())') == 'possible'\nassert solution(')()())') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''()))''') == 'possible', f'(solution) failed; got: {solution(stdin)}'\nprint('\u2705 Test passed')\n\nassert solution('''((()))''') == 'possible', f'(solution) failed; got: {solution(stdin)}'\nprint('\u2705 Test passed')\n\nassert solution('''()()))''') == 'impossible', f'(solution) failed; got: {solution(stdin)}'\nprint('\u2705 Test passed')\n\nassert solution('''(((((()()()(((((()()(()(((((()(()(()((((()((())(((()()()())((((()()())(()))))))))))))))))))))))))))))))))''') == 'possible', f'(solution) failed; got: {solution(stdin)}'\nprint('\u2705 Test passed')\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('((()))') == 'possible'\nassert solution('))((') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('(()))') == 'possible'\nassert solution('(())(') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''()))\n()))''') == \"possible\"\n\nassert solution('''())(\nSample Output 3:\nimpossible''') == \"impossible\"\n\nassert solution('''((((((\nSample Output 4:\nimpossible''') == \"impossible\""
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"(((((()))))\") == \"possible\"\nassert solution(\"((()))\") == \"impossible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3') == '1800'\nassert solution('2 2') == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1800\"\nassert solution(\"2 2\") == \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1800\"\nassert solution(\"2 2\") == \"impossible\"\nassert solution(\"1 3\") == \"1800\"\nassert solution(\"1 2\") == \"impossible\"\nassert solution(\"1 2\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n\") == \"1800\"\nassert solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n\") == \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1800'\nassert solution('2 2') == 'impossible'"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"impossible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n\") == \"1800\"\nassert solution(\"4 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n1 2200 9400 1400\\n\") == \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n\"\"\") == \"1800\"\n\nassert solution(\"\"\"\n2 2\n1 1800 3600 1800\n1 1900 3600 1600\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 1800 900\n1 1900 900\n1 2000 900\n''') == '1800'\nassert solution('''\n2 2\n1 1800 3600\n1 1900 3600\nSample Output 3:\nimpossible\n''') == 'impossible'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\nA1-B2\nA2-B3\nA3-B1''') == 'A1-B1 A2-B2 A3-B3'\nassert solution('''2 3\nA1-B2\nA2-B3\nA3-B1''') == 'A1-B1 A2-B2 A3-B3'\n\nassert solution('''1 1\nA1-A1''') == 'A1-A1'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'A1-B1 A2-C2 B2-C1'\nassert solution('''\n2 2\n''') == 'A1-B1 A2-C2 B2-C1'\n\nassert solution('''\n1 1\n''') == 'A1-A1'\n\nassert solution('''\n2 3\n''') == 'A1-A1 A2-B2 B2-C1'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\n\n'''"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2\n1 2 3 4 5''') == '1-2 4-5 2-3 1-4 5-1 1-5'''\nassert solution('''2 1\n1 2''') == '1-2 1-1 2-1'''\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\", \"Should be A1-B1 A2-C2 B2-C1\"\nassert solution(\"2 2\") == \"A1-B1 A2-C2 B2-C1\", \"Should be A1-B1 A2-C2 B2-C1\"\nassert solution(\"3 3\") == \"A1-B1 A2-B2 A3-C3\", \"Should be A1-B1 A2-B2 A3-C3\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\""
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input_1) == \"A1-B2 B1-A2 A3-B3\", \"Should be A1-B2 B1-A2 A3-B3\"\nassert solution(sample_input_2) == \"A1-C2 A2-B1 B1-C1 A3-B2 C2-B2 B3-C1 C1-B3\", \"Should be A1-C2 A2-B1 B1-C1 A3-B2 C2-B2 B3-C1 C1-B3\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4') == '7'\nassert solution('2 2') == '7'\nassert solution('5 5') == '7'\n\"\"\""
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"4 4\") == \"9\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n.X..\") == \"7\"\nassert solution(\"4 4\\nX..X\") == \"9\""
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\nX.X\\nX..X\\n..X.\\n..XX') == \"7\"\nassert solution('4 4\\n.XX\\nX..X\\n..X.\\n..XX') == \"9\""
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '7'\nassert solution('4 4') == '9'"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\nX.X\\nX..X\\n..X.\\n..XX\") == \"7\"\nprint(solution(\n\"\"\"\n2 2\n..\n..\n\n3 3\n.XX\nXX.\n\n5 5\n.XX.X.\n.XX.X.X\n.X.XX.X\nX..X..X\nXX.X.XX\n\"\"\"))\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n..\n..\n''') == '7'\nassert solution('''\n4 4\nX.XX\nX..X\n..X.\n..XX\n''') == '9'\nassert solution('''\n5 5\n.X.\n.X.\n.X.\n.X.\nX.X\n''') == '4'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2\n.X.\nX.X\n..X\n..X.\n''') == '7'\nassert solution('''\n1 1\nX.\n.X\nX.\n''') == '6'\n'''\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '7'\nassert solution('''\n1 2\nXX.\n.X.\n''') == '9'\nassert solution('''\n10 10\n.XX.\n.X.X\nX.X.\nXX.X\n.XXX\n.X.X\n.XXX\n.XXX\n.X.X\n.X.X\n''') == '17'\nassert solution('''\n5 5\nXX.\nXX.\nXX.\nXX.\nXX.\nX.X\nX.X\n''') == '8'\n'''\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n        \nassert Solution().solve('''\n1 2\nXX.\n.X.\n''') == '9'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '600'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3 2 2 100''') == '600'\nassert solution('''2 0 2 1 100''') == '100'\nassert solution('''2 0 0 0 100''') == '-1'\nassert solution('''5 10 3 1 2 5''') == '1150'\nassert solution('''5 10 3 1 2 5''') == '1150'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '600'\nassert solution('2') == '-1'\nassert solution('3') == '-1'\nassert solution('4') == '-1'\nassert solution('5') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n3 2 2 2\n1 1 1 1 500\nSample Input 3:\n3\n3 2 3 3\n2 2 4 2\nSample Output 3:\n20\n''') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 2 2 100\n1 1 1 1 500\nSample Input 3:\n4\n1 1 1 1 100\n6 1 1 1 100\n5 1 1 1 100\nSample Output 3:\n500\n\nSample Input 4:\n6\n0 0 1 1 2 5\nSample Output 4:\n-1\n\nSample Input 5:\n8\n2 2 2 2 4 4 4 4\nSample Output 5:\n-1\n\nSample Input 6:\n3\n0 0 1 1 2 100\nSample Output 6:\n600\n''') == '600'"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2 2 100\") == \"600\"\nassert solution(\"2 0 2 1 100\") == \"100\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n3 2 2 2 100\n1 1 1 1 500\n\"\"\") == \"600\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '600'\nassert solution('''\n3\n1 2 2 2\n1 1 1 1\n2 2 2 2\n1 2 2 2\n''') == '600'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '0'\nassert solution('2\\n') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"0\""
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0'\nassert solution('12') == '0'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n361\") == \"3\"\nassert solution(\"2\\n11\") == \"0\""
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n361''') == '3'\nassert solution('''2\n11''') == '0'\nassert solution('''4\n941''') == '0'"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0'\nassert solution('11') == '0'\nassert solution('361') == '3'\nassert solution('12') == '1'\nassert solution('13') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n361\n''') == '3'\nassert solution('''\n2\n11\n''') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(s) == \"0\""
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 10') == '10'\nassert solution('3 10') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 10') == '10'\nassert solution('3 10') == 'cancel road trip'\nassert solution('3 10') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 10\n2 100\n1 10\n11 5\n''') == '10'\nassert solution('''\n3 10\n2 100\n1 10\n11 5\n''') == 'cancel road trip'"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 10\n2 100\n1 10\n11 5\n''') == '10'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3, 10, 2, 100, 1, 10, 11, 5]) == '10'\nassert solution([3, 10, 2, 100, 1, 10, 13, 5]) == 'cancel road trip'"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 10\") == \"10\"\nassert solution(\"3 10\") == \"10\"\nassert solution(\"3 10\") == \"cancel road trip\"\nassert solution(\"3 10\") == \"cancel road trip\"\nassert solution(\"3 10\") == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 10\n2 100\n1 10\n11 5\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n3 10\n2 100\n1 10\n13 5\n\"\"\") == \"cancel road trip\"\n\nassert solution(\"\"\"\n3 10\n2 100\n1 10\n11 1\n\"\"\") == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 10') == '10'\nassert solution('2 100') == 'cancel road trip'\nassert solution('1 10') == '1'\nassert solution('11 5') == 'cancel road trip'\nassert solution('3 3') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 10') == '10'\nassert solution('3 10') == 'cancel road trip'\nassert solution('3 10') == 'cancel road trip'"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5\\n') == '10'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n4 9\n2 8\n1 1\n3 4\n5 100\n\"\"\"\n) == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\n    \"\"\"\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\nassert solution('5 7') == '0 7 8 11 15 16 19'\nprint('All Tests Passed')\n\n'''"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 7\n2 2\n3 8\n2 7\n2 4\n3 8''') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 9') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7') == '0 7 8 11 15 16 19'\nassert solution('6') == '0 0 0 0 0 0'"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1 7 8 11 15 16 19\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\nprint('Congratulations, has passed all test cases!')\n\n\"\"\"\n\n\"\"\"\n
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19'\n\"\"\"\n--- Day 5: Binary Boarding ---\nYou board your plane only to discover a new problem: you dropped your boarding pass! You aren't sure which seat is yours, and all of the flight attendants are busy with the flood of people that suddenly made it through passport control.\n\nYou write a quick program to use your phone's camera to scan all of the nearby boarding passes (your puzzle input); perhaps you can find your seat through process of elimination.\n\nInstead of zones or groups, this airline uses binary space partitioning to seat people. A seat might be specified like FBFBBFFRLR, where F means \"front\", B means \"back\", L means \"left\", and R means \"right\".\n\nThe first 7 characters will either be F or B; these specify exactly one of the 128 rows on the plane (numbered 0 through 127). Each letter tells you which half of a region the given seat is in. Start with the whole list of rows; the first letter indicates whether the seat is in the front (0 through 63) or the back (64 through 127). The next letter indicates which half of that region the seat is in, and so on until you're left with exactly one row.\n\nTo save time, only use the information from the actual seat. The last three characters will be exactly the same as the first three characters of the row number. So, for example, the above boarding pass reads 18ABC500, and with that information you can determine that the seat is the upper left one (row 44, column 5).\n\nHere is another example:\n\nBFFFBBFRRR: row 70, column 7, seat ID 567.\nFFFBBBFRRR: row 14, column 7, seat ID 119.\nBBFFBBFRLL: row 102, column 4, seat ID 820.\nWhat is the highest seat ID on a boarding pass?\n\nYour puzzle answer was 922.\n\n--- Part Two ---\nDing! The \"fasten seat belt\" signs have turned on. Time to find your seat.\n\nIt's a completely full flight, so your seat should be the only missing boarding pass in your list. However, there's a catch: some of the seats at the very front and back of the plane don't exist on this aircraft, so they'll be missing from your list as well.\n\nYour seat wasn't at the very front or back, though; the seats with IDs +1 and -1 from yours will be in your list.\n\nWhat is the ID of your seat?\n\nYour puzzle answer was 1049.\n\nBoth parts of this puzzle are complete! They provide two gold stars: **\n\"\"\"\nfrom typing import List\nimport numpy as np\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19'\nassert solution('''\n2\n5\n2\n3\n8\nSample Output 3:\n0 7 8 11 15 16 19''') == '0 7 8 11 15 16 19'\nassert solution('''\n5\n2\n2\n3\n8\nSample Output 4:\n0 7 8 11 15 16 19''') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '3'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n0 3\n0 3''') == '1'\n\nassert solution('''1 5 3\n0 0 1\n3 3\n-3 3\n3 0\n0 3''') == '3'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 0\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '2'\nassert solution('1 5 3') == '1'"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '3'\nassert solution('3 3') == '0'\nassert solution('1 4 1') == '4'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '1'\nassert solution('''\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '3'\nassert solution('''\n1 10 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n0 6\n0 7\n0 9\n''') == '4'\nassert solution('''\n1 50 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n0 6\n0 7\n0 9\n0 12\n0 14\n0 16\n0 18\n0 20\n0 22\n0 24\n0 26\n0 28\n0 30\n0 32\n0 34\n0 36\n0 38\n0 40\n0 42\n0 44\n0 46\n0 48\n''') == '40'"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '3'\nassert solution('1 2 3') == '0'\nassert solution('1 5 3') == '0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1\\n') == '4\\n4\\n2\\n2\\n0\\n'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9\\n') == '2\\n0\\n0\\n2\\n0\\n'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 10000\n1\n1\n1\n1\n1''') == '4'\nassert solution('''5 9\n1\n1\n10\n1\n9''') == '2'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4\\n0\\n2\\n2\\n0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9') == '2'\nassert solution('5 4\\n1\\n1\\n1\\n1\\n1') == '0'\nassert solution('5 8\\n1\\n1\\n1\\n1\\n1\\n1') == '0'\nassert solution('5 20\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4\\n1\\n1\\n1\\n0'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 10000\") == \"4\"\nassert solution(\"5 9\") == \"2\"\nassert solution(\"4 6\") == \"2\"\nassert solution(\"4 8\") == \"0\"\nassert solution(\"4 0\") == \"0\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2\\n0\\n1\\n2\\n0'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10000') == '4'\nassert solution('5 9') == '2'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9\\n') == '2'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10000\\n1') == '4'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9') == '2'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nne\nak\nne\nkava''') == 'DA', \"First\"\nassert solution('''\nne\nne\nak\nne\nkava''') == 'NE', \"Second\"\nassert solution('''\nne\nak\nne\nkava''') == 'DA', \"Third\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\nkava') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\""
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\nkava\nb''') == 'DA'\nassert solution('''2\nne\nb''') == 'NE'\nassert solution('''10\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"NE\"\nprint(\"You're all set!\")\n\n'''\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2\\n0\\n2\\n1\\n'''\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\nSample Output 2:\n0\n0\n3\n2\n''') == '1'"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\nassert solution('5 5 1') == '0'\nassert solution('5 10 5') == '2'\nassert solution('3 3 3') == '6'\nassert solution('4 6 2') == '1'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == \"2\"\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\nSample Output 2:\n0\n0\n3\n2\n''') == \"3\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\nassert solution('''\n10 4 4\n1 2\n2 3\n3 4\n4 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '1'\nprint('all tests passed')\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\n\nprint(solution('''\n5 5 4\n1 2\n2 3\n3 4\n1 5\n5 2\n2 5\n1 4\n4 5\n1 4\n2 4\n1 5\n1 3\n2 4\n4 3\n2 5\n3 4\n4 4\n1 1 3\n2 1 3\n1 2 3\n2 2 4\n1 1 4\n2 2 4\n1 1 3\n2 2 3\n'''))\nassert solution('''\n6 8 4\n1 2\n2 3\n1 3\n3 4\n4 5\n5 6\n1 6\n2 4\n3 5\n4 5\n5 6\n3 5\n4 4\n2 4\n2 5\n2 6\n5 4\n5 5\n5 6\n5 6\n4 4\n4 5\n4 5\n4 6\n5 4\n5 5\n5 6\n5 6\n''') == '2'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '1'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '0'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '1'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == \"2\"\nassert solution('''\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == \"1\"\n'''\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 3') == '1'\nassert solution('3 3') == '2'\n\nassert solution('2 2') == '2'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '1'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 2\\n\"\n    \"1 1\\n\"\n    \"0 1\\n\"\n    \"1 0\\n\"\n    \"1 2 1\\n\"\n    \"2 1 1\\n\") == \"2\"\nassert solution(\n    \"2 2\\n\"\n    \"1 1\\n\"\n    \"0 1\\n\"\n    \"1 0\\n\"\n    \"1 2 1\\n\"\n    \"2 1 3\\n\") == \"1\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n2 2 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n2 2 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n2 2 1\n3 1 2\n\"\"\") == \"2\""
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\n\"\"\"\nimport sys"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 2\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n\"\"\") == \"2\""
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1 2 1\") == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '2'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '3'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 15\nD 4 10 1\nC 6 1\nC 9 3''') == \"40.500000000\"\nassert solution('''3 15\nD 4 10 1\nC 6 1\nC 9 3''') == \"49.000000000\""
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\n''') == '40.500000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '49.000000000'\nassert solution('''\n2 15\nD 4 10 1\nC 6 1\n''') == '40.500000000'\nassert solution('''\n2 20\nD 4 10 1\nC 6 1\n''') == '101.4999999999999'\nassert solution('''\n2 10\nD 4 10 1\nC 6 1\nC 9 3\n''') == '101.4999999999999'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.5'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\n''') == '40.500000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.5'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.5'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '40.500000000', 'First'\nassert solution('''\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '49.000000000', 'Second'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''a 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''a 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n'''"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4\\n2 1 3\\n5 1 3\\n1 4 2\\n0 3\\n3 1 2\\n1 4 2') == 'fail'\nassert solution('2\\n5 10 6\\n1 1 2 3\\n1 3 5 4\\n1 3\\n3 1 2\\n4 2\\n4 2\\n3 1 2\\n1 3\\n5 4\\n1 5\\n1 3\\n4 1\\n5 2\\n1 3\\n2 3\\n4 1\\n1 4\\n5 1\\n2 3\\n5 2\\n1 3\\n3 2\\n1 5\\n1 6\\n5 3\\n3 3\\n2 1\\n2 1\\n2 5\\n2 5\\n3 2\\n1 5\\n2 2\\n4 3\\n4 1\\n3 1\\n1 3\\n5 1\\n5 1\\n1 2\\n1 1\\n1 1\\n5 1\\n5 3\\n3 2\\n1 1\\n2 2\\n2 3\\n4 1\\n1 3\\n3 2\\n1 2\\n3 1\\n1 2\\n3 2\\n1 5\\n1 5\\n3 2\\n2 3\\n3 2\\n1 5\\n4 2\\n1 3\\n2 2\\n2 1\\n1 1\\n3 1\\n2 2\\n5 2\\n1 2\\n2 3\\n2 1\\n5 2\\n2 3\\n4 1\\n4 3\\n3 2\\n2 1\\n4 3\\n2 2\\n3 2\\n2 1\\n1 2\\n1 2\\n5 3\\n5 2\\n1 4\\n2 3\\n1 2\\n4 2\\n1 3\\n3 2\\n3 2\\n2 1\\n3 2\\n2 2\\n3 1\\n3 1\\n2 2\\n3 2\\n2 3\\n3 2\\n5 2\\n4 2\\n5 2\\n5 1\\n1 1\\n4 1\\n2 1\\n3 2\\n1 3\\n5 1\\n1 3\\n1 5\\n1 1\\n1 1\\n1 2\\n2 2\\n2 1\\n2 3\\n5 3\\n3 2\\n3 2\\n1 1\\n1 1\\n3 2\\n1 2\\n1 3\\n3 2\\n4 3\\n4 2\\n2 1\\n3 2\\n1 3\\n2 3\\n2 3\\n1 3\\n4 3\\n5 2\\n2 1\\n5 1\\n4 3\\n4 1\\n2 1\\n5 1\\n5 1\\n5 2\\n3 2\\n1 3\\n2 2\\n2 3\\n4 3\\n3 1\\n5 2\\n2 1\\n2 1\\n3 1\\n1 3\\n1 3\\n4 1\\n2 2\\n2 1\\n5 3\\n3 3\\n3 2\\n2 2\\n2 1\\n3 2\\n1 3\\n4 1\\n4 3\\n4 3\\n2 3\\n3 1\\n1 1\\n4 1\\n2 1\\n3 1\\n2 1\\n1 1\\n3 1\\n2 1\\n1 1\\n1 1\\n1 1\\n4 1\\n1 1\\n1 3\\n1 2\\n1 2\\n1 2\\n5 3\\n3 2\\n4 3\\n5 3\\n1 3\\n1 3\\n1 3\\n4 3\\n1 3\\n1 3\\n1 2\\n1 2\\n1 3\\n3 2\\n1 3\\n2 2\\n2 2\\n2 2\\n3 2\\n1 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 1\\n1 1\\n1 2\\n1 2\\n1 1\\n1 2\\n2 2\\n2 2\\n3 1\\n3 2\\n3 2\\n3 2\\n1 3\\n3 2\\n5 3\\n1 3\\n2 2\\n2 3\\n1 3\\n2 2\\n2 3\\n2 3\\n2 3\\n1 2\\n1 2\\n2 2\\n5 2\\n1 3\\n2 2\\n2 3\\n1 2\\n4 2\\n2 3\\n2 1\\n3 2\\n5 2\\n3 2\\n3 2\\n1 3\\n4 1\\n2 1\\n2 1\\n5 1\\n5 2\\n3 2\\n3 2\\n1 5\\n4 1\\n2 3\\n5 2\\n1 2\\n2 1\\n3 2\\n1 1\\n5 2\\n2 3\\n4 1\\n2 3\\n2 3\\n2 3\\n1 4\\n2 3\\n1 3\\n1 5\\n5 2\\n2 2\\n3 1\\n1 2\\n2 1\\n1 2\\n5 2\\n2 3\\n2 1\\n4 2\\n4 1\\n2 2\\n1 2\\n2 2\\n2 2\\n1 3\\n1 1\\n2 2\\n2 2\\n1 3\\n1 3\\n3 2\\n5 2\\n2 3\\n4 1\\n5 1\\n4 1\\n2 3\\n1"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\n5\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == '5 4 9 3 1 10 7 6 2'\nassert solution('10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\nabc 2 10 3\\nabc 1 6\") == \"4 5 3 1\"\nassert solution(\"10\\nabc 2 10 3\\nabc 1 6\") == \"4 5 3 1\"\nassert solution(\"10\\nabc 2 10 3\\nabc 1 6\\nabc 2 1 5\") == \"7 8 9 1\"\nassert solution(\"10\\nabc 2 10 3\\nabc 1 6\\nabc 2 1 5\\nabc 2 1 5\") == \"7 8 9 1\"\nassert solution(\"5\\nabc 2 10 3\\nabc 1 6\\nabc 2 1 5\\nabc 2 1 5\\nabc 2 1 5\") == \"7 8 9 1\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"5 4 9 3 1 10 7 6 2\"\nprint(solution(\"5\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\"))"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10\\n' +\n            'a 2 10 3\\n' +\n            'b 1 6\\n' +\n            'c 2 1 5\\n' +\n            'd 1 9\\n' +\n            'e 1 4\\n' +\n            'f 1 2\\n' +\n            'g 2 6 8\\n' +\n            'h 0\\n' +\n            'i 1 3\\n' +\n            'j 1 7') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'\n\nstdin = '00:00'\n\nstdin = '01:01'\nstdout = '3'\nprint(stdout)\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('00:00\\n01:01') == '3'\nassert solution('00:08\\n00:00') == '3'\nassert solution('00:00\\n00:00') == '1'\n\n'''"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('00:00') == '3\\n00:00\\n00:01\\n00:02\\n00:03\\n00:04\\n00:05\\n00:06\\n00:07\\n00:08\\n00:09\\n00:10\\n00:11\\n00:12\\n00:13\\n00:14\\n00:15\\n00:16\\n00:17\\n00:18\\n00:19\\n00:20\\n00:21\\n00:22\\n00:23'\nassert solution('00:00') == '3\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00'\nassert solution('01:01') == '2\\n00:00\\n00:01\\n00:02\\n00:03\\n00:04\\n00:05\\n00:06\\n00:07\\n00:08\\n00:09\\n00:10\\n00:11\\n00:12\\n00:13\\n00:14\\n00:15\\n00:16\\n00:17\\n00:18\\n00:19\\n00:20\\n00:21\\n00:22\\n00:23'\nassert solution('01:02') == '1\\n00:00\\n00:01\\n00:02\\n00:03\\n00:04\\n00:05\\n00:06\\n00:07\\n00:08\\n00:09\\n00:10\\n00:11\\n00:12\\n00:13\\n00:14\\n00:15\\n00:16\\n00:17\\n00:18\\n00:19\\n00:20\\n00:21\\n00:22\\n00:23'\nassert solution('01:03') == '1\\n00:00\\n00:01\\n00:02\\n00:03\\n00:04\\n00:05\\n00:06\\n00:07\\n00:08\\n00:09\\n00:10\\n00:11\\n00:12\\n00:13\\n00:14\\n00:15\\n00:16\\n00:17\\n00:18\\n00:19\\n00:20\\n00:21\\n00:22\\n00:23'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"00:00\\n01:01\") == \"3\"\nassert solution(\"00:08\\n00:00\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'\nassert solution('00:08') == '3'\nassert solution('00:00') == '3'\nassert solution('00:00') == '3'"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('00:00\\n01:01\\n') == '3'\nassert solution('00:00\\n00:00\\n') == '2'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''0:00\n1:01''') == '3'\nassert solution('''00:00\n01:01''') == '3'\nassert solution('''00:08\n00:00\n''') == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('())') == '4,8:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n(())\n''') == '4,8:8,8:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('(())') == '4,4:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('()') == '4,4:'\nassert solution('())') == '4,4:'\nassert solution('((()))') == '4,4:4,4:\n\nSample Input 3:\n((((()))))\nSample Output 3:\n4,4:4,4:4,4:\n\nSample Input 4:\n()()(()\nSample Output 4:\n0,0:\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"(((())()))\") == \"4,4:4,4:4,4,4:4,4,4:4,4,4:4,4,4:\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n((\n))\n''') == ''\n\nassert solution('''\n(())\n''') == '4,8:8,8:'\n\nassert solution('''\n()\n''') == '4,4:'\n\nassert solution('''\n()\n''') == ''\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"()\") == \"4,8:8,8:\"\nassert solution(\"(())\") == \"4,4:"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''((()))''') == '4,4:'''\nassert solution('''(())''') == '4,4:'''\nassert solution('''()(((((())''') == '4,4:'''\nassert solution('''(()(())''') == '4,4:'''\nassert solution('''((()())((()))''') == '4,4:'''\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('()') == \"4,4:\"\nassert solution('((())') == \"4,4:4,4:\"\nassert solution('(())()())') == \"4,4:4,4:4,4:4:4,4:4:\"\nassert solution('(())((()(())))()') == \"4,4:4,4:4,4,4:4,4:4:4,4:4:\"\nassert solution('((()())()(((())))()(()))()') == \"4,4:4,4:4,4:4,4:4,4:4:4,4,4:4,4:4:4,4:4:4,4:4:\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '1 1\\n'\n    '26 02 03 03 1'\n) == '5'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1\n26 02 03 03 1\n26 02 03 03 2\n26 02 03 03 3\n''') == \"5\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == '-1'\nassert solution(\"1 1\") == '5'\nassert solution(\"2 1\") == '-1'\nassert solution(\"1 1 2\") == '-1'\nassert solution(\"1 1 2 2 2 3 3 4 4 4 4\") == '-1'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == \"5\"\nassert solution('1 1') == \"-1\""
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"5\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"1 1\") == \"-1\"\n\n\"\"\"\nimport sys\nimport os\nfrom datetime import timedelta"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '5'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\nSample Output 2:\n5\n''') == '185'\n\nassert solution('''\n1 1\n26 02 03 03 2\nSample Output 2:\n185\n''') == '185'\n\nassert solution('''\n1 1\n26 02 03 03 1\nSample Output 2:\n-1\n''') == '-1'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\nassert solution('''\n1 1\n26 02 03 03 2\n''') == '185'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 4 1 2') == '2 3 4 1 2'\nassert solution('4 2') == '1 2 3 4'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\nassert solution('4 2\\n3 4 1 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4 '\nassert solution('''\n4 2\n3 4 1 2\n''') == '2 3 4 1 '\nassert solution('''\n3 3\n4 4 5\n''') == '4 5 4 '\nassert solution('''\n4 4\n3 3 1 1\n''') == '1 3 3 3 4 '\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '5 6 1 2'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n4 5 3 5\\n') == '2 3 4 5'\nassert solution('6 1\\n4 5 3 5 1 2\\n') == '5 6 1 2 3 4'"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '5 6 1 2 3 4'\nassert solution('4 2') == '2 3 4 1'\nassert solution('6 2') == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5 3 4 6 1 2\") == \"5 6 1 2 3 4\"\nassert solution(\"6 5 3 4 2 1\") == \"2 3 4 1 5 6\""
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'\nassert solution('4 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4', 'Wrong'\nassert solution('4 2\\n3 4 1 2') == '2 3 4 1', 'Wrong'\nassert solution('2 2\\n3 4') == '3 4', 'Wrong'\n\nimport sys\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"201\"\nassert solution(\"1374 2\") == \"7413\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\nassert solution('3273 4') == '3731'\nassert solution('9876 4') == '9762'\nassert solution('0 4') == '04'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1234 1\n1234''') == '1234'\nassert solution('''123 4\n123''') == '1374'\nassert solution('''1220 1\n1220''') == '1220'\nassert solution('''1234 1\n1230''') == '1234'\nassert solution('''123 4\n1230''') == '1234'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"72\"\nassert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 8\") == \"8 8\"\nassert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"2 1\"\nassert solution(\"2 3\") == \"3 2\"\nassert solution(\"5 0\") == \"5 0\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n0 0\n1 1\n2 0\n\"\"\") == \"0.733333333333333\"\nassert solution(\"\"\"\n3\n0 0\n1 1\n2 0\n\"\"\") == \"0.666666666666667\"\nprint(solution(input()))\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0.666666666666667'\nassert solution('4') == '0.666666666666667'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0.666666666666667'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n0 0\n1 1\n2 0''') == '0.733333333333333'"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '0.666666666666667'\nassert solution('3') == '0.733333333333333'\n\n'''\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0.6'\nassert solution('4') == '0.66666667'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\") == \"1.142857142857143\"\nassert solution(\"4\") == \"1.142857142857143\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '0.733333333333333'\nassert solution('6') == '0.696969696969697'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0\\n0 1\\n1 1') == '0.733333333333333'\nassert solution('10\\n0 0\\n0 1\\n0 0.2\\n0 0.4\\n0 0.5\\n0 0.6\\n0 0.6\\n0 0.6\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0."
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n1 1\\n2 0') == '0.666666666666667'\nassert solution('3\\n0 0\\n0 1\\n1 1\\n2 0') == '0.666666666666667'\nassert solution('4\\n0 0\\n0 1\\n1 1\\n2 0') == '0.733333333333333'"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == output_string, \"Not right!\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '9'\nassert solution('2 3 4') == '6'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'\nassert solution('2 1 3') == '2'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10') == '21'"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 3 100\n10 1 10\n10 1 10\"\"\") == \"21\"\nassert solution(\"\"\"\n3 3 2\n2 4 3\n1 1 3\"\"\") == \"6\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 4') == '9'\nassert solution('2 3 100') == '21'\nprint(solution(input()))\n\ncode here\n'''"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\") == \"9\"\nprint('All tests passed!')\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20\\n') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10\\n') == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3 -\") == \"1\"\nassert solution(\"6 2 5 -\") == \"2\"\nassert solution(\"9 2 3 -\") == \"0\"\nassert solution(\"6 2 -1\") == \"0\"\nassert solution(\"8 2 1 -\") == \"3\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 2 7 -\n1 1 1 2\n''') == '2'\nassert solution('''9 2 7 -\n1 1 1 2\n''') == '4'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 3 3\n3 1 1\n2 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2''') == '4'\n\nassert solution('''8 3 3\n3 1 1\n2 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2''') == '6'\n\nassert solution('''9 3 3\n3 1 1\n2 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2''') == '4'\n\nassert solution('''15 3 3\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2''') == '18'\n\nassert solution('''20 3 3\n5 1 1\n4 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8 2 7 -\n1 1 1 2''') == '2'\nassert solution('''9 2 7 -\n1 1 1 2\nSample Input 3:\n8 2 7 -\n1 1 1 2\nSample Output 3:\n4''') == '2'\nassert solution('''8 2 7 -\n1 1 1 2\nSample Input 4:\n8 2 7 -\n1 1 1 2\nSample Output 4:\n4''') == '2'\nassert solution('''8 2 7 -\n1 1 1 2\nSample Input 5:\n8 2 7 -\n1 1 1 2\nSample Output 5:\n4''') == '2'\nassert solution('''8 2 7 -\n1 1 1 2\nSample Input 6:\n8 2 7 -\n1 1 1 2\nSample Output 6:\n4''') == '2'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8 2 7 -\n1 1 1 2\n''') == \"2\"\nassert solution('''\n9 2 7 -\n1 1 1 2\n''') == \"4\"\nassert solution('''\n10 1 1 -\n1 1 1 2\n''') == \"1\"\nassert solution('''\n10 1 1 -\n1 1 1 2\n''') == \"0\"\nassert solution('''\n10 1 1 -\n1 1 1 2\n''') == \"1\"\n\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 2 7 -') == '2'\nassert solution('9 2 7 -') == '4'\nassert solution('4 4 1 -') == '1'\nassert solution('4 4 1 *') == '1'\nassert solution('4 4 1 -') == '1'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n8 2 7 -\n1 1 1 2\n''') == '2'\nassert solution('''\n8 2 7 -\n1 2 3 4\n''') == '1'\n\nassert solution('''\n9 2 7 -\n1 1 1 2\n''') == '4'\nassert solution('''\n9 2 7 -\n1 2 3 4\n''') == '3'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 3 -\") == \"0\"\nassert solution(\"8 2 5 -\") == \"1\"\nassert solution(\"9 2 7 -\") == \"4\"\nassert solution(\"5 6 3 -\") == \"3\"\nassert solution(\"9 6 3 -\") == \"3\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n') == '3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '3'\nassert solution('5 5\\n1 2 3\\n2 3 5\\n3 4 5\\n1 4 8') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3') == '3'\nassert solution('4 4') == '2'\nassert solution('5 4') == '1'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '3'\nassert solution('4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4') == '6'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\n2 1') == '6'\nassert solution('3 4\\n2 3 1') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\n2 1') == '6'\nassert solution('3 4\\n2 3 1') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 4\") == \"24\""
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n2 1\n2 3''') == '6'\nassert solution('''3 5\n1 2\n1 2\n1 3\n1 4\n2 3''') == '36'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '24'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n2 3 1\") == \"6\"\nassert solution(\"3 5\\n4 1 2 1\") == \"48\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 4\") == \"24\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\nprint('Tests passed')\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\nprint(solution('''\n2\n1 2\n''')) == '1'\nprint(solution('''\n5\n3 4 5 1 2\n''')) == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\nassert solution('3 4 5 1 2') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2\n''') == '2'\nprint(solution('''\n4\n3 4 2 1\n'''))\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n5\n3 4 5 1 2\n''') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '1'\nassert solution('1 2') == '1'\nassert solution('5') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '2'\nassert solution('5 3 4 5 1 2') == '1'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 4 5 1 2') == '1'\nassert solution('2\\n1 2') == '2'"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n1 3 1\n2 1 2\n1 1 1\n''') == '4'\nassert solution('''\n1 2\n2 3\n4 5\n''') == '2'\nassert solution('''\n1 1\n1 1\n''') == '0'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"9\"\nassert solution(\"3 3\") == \"4\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9'\nassert solution('''3 3\n1 3 1\n2 1 2\n1 1 1\n''') == '4'\nassert solution('''3 3\n1 3 1\n2 1 2\n1 1 1\n''') == '0'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '9'\nassert solution('3 3') == '4'\nassert solution('4 5') == '1'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9') == '6'\nassert solution('2 2 2\\n1 2 1\\n3 3 3') == '4'\nassert solution('4 5 5\\n4 3 1\\n2 3 2\\n3 2 3') == '0'"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '9'\nassert solution('3 3') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n1 3 1\n2 1 2\n1 1 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n1 4 10\n5 2 6\n11 1 3\nSample Output 3:\n4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n1 4 10\n5 2 6\n11 1 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9'\nassert solution('''\n3 3\n1 3 1\n2 1 2\n1 1 1\n''') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 4 10\\n5 2 6\\n11 1 3\\n') == '9'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"9\"\nassert solution(\"3 3\") == \"4\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 5 2 5\") == \"6\"\nassert solution(\"4\\n2 2 2 5\\n3 3\\n4 4\") == \"3\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\", \"Empty\"\nassert solution(\"2 1 3 4\") == \"6\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n') == '6'\nassert solution('4\\n3 1 2 3\\n2 4\\n1 3\\n1 4\\n3 5\\n') == '5'"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 3 4\\n 1 2\\n 1 3\\n 3 4') == '6'\nassert solution('4\\n3 1 5 2\\n1 2\\n1 3\\n2 4') == '3'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n\") == \"6\"\nassert solution(\"4\\n3 4 5 6\\n1 2\\n1 3\\n2 4\\n\") == \"3\"\nprint(\"solution() is correct.\")\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n2 1 3 4\n1 2\n1 3\n3 4''') == '6'\nassert solution('''5\n2 1 4 5 3\n1 2\n1 3\n2 4\n3 4''') == '3'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 10\n5 8\n''') == '18'\nassert solution('''\n2 17\n121 121\n89 98\n''') == '265'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '18'\nassert solution('3') == '265'\nassert solution('1') == '8'\nassert solution('2') == '18'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1 10\\n5 8') == '18'\nassert solution('3\\n17 144\\n121 121\\n89 98') == '265'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 10\n5 8\n''') == '18', 'First'\nassert solution('''\n3\n17 144\n121 121\n89 98\n''') == '265', 'Second'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 10\\n5 8\\n1 10\\n') == '18\\n25\\n10'\nassert solution('2 10\\n1 10\\n5 8\\n') == '18\\n25\\n10'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n10 2\n5 8\n1 9\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2\n8 3\n9 10\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 10\n5 8''') == '18'\nassert solution('''2 1\n3 4''') == '2'\nassert solution('''3 2\n1 2\n3 4''') == '4'\nassert solution('''4 2\n1 2\n3 4''') == '1'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 10\\n5 8\\n') == '18\\n8\\n'\nassert solution('2\\n1 10\\n5 8\\n') == '265\\n25\\n10\\n'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 10\\n5 8\\n') == '18'\nassert solution('2 1\\n7 5\\n') == '8'\nassert solution('3 2\\n7 6\\n') == '10'\nassert solution('4 1\\n7 6\\n') == '0'\nassert solution('5 1\\n7 6\\n') == '0'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 10\\n5 8\\n\") == \"18\\n8\\n\"\nassert solution(\"3\\n17 144\\n121 121\\n89 98\\n\") == \"265\\n25\\n10\\n\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"0.50000000\"\nassert solution(\"5 5\") == \"12.50000000\""
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"0.50000000\"\nassert solution(\"5 5\") == \"12.50000000\""
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"0.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '0.50000000'\nassert solution('5 5') == '12.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '0.5'\nassert solution('5 5') == '12.5'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"0.50000000\"\nassert solution(\"5 5\") == \"12.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.50000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4') == '12.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n0 0\n1 1\n1 0\n''') == '0.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '0.50000000'\nassert solution('5 5') == '12.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '0.50000000'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"4 1 3\") == \"2\"\nassert solution(\"4 0 4\") == \"1\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3\") == \"2\"\nassert solution(\"4 0 4\") == \"1\""
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 1 3\n0 1\n1 2\n2 3\n1''') == '2'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\nassert solution('''4 0 4\n0 2\n0 1\n2 1\n2 3\n\n''') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 0 1\n0 1\n1 2\n2 3\n1\n''') == '1'\nassert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\n\nassert solution('''\n2 1 3\n0 1\n1 2\n2 3\n1\n''') == '1'\n\nassert solution('''\n1 2 3\n0 1\n0 2\n''') == '1'\n\n'''\n//The first line contains three integers, $S$, $E$ and $C$. The first integer ($1\\le S \\le 50{.}000$) denotes the total number of spies in the network (yourself not included), the second integer ($0 \\le E \\le S$) denotes the total number of enemies in the network and the third integer specifies the total number of connections ($0 \\le C \\le 10^5$) between spies in the network.\n\n//Then follow $C$ lines, with two integers $0\\leq S_1<S$ and $0\\leq S_2<S$ on each line, indicating that there is a connection from spy $S_1$ to spy $S_2$. These connections are not symmetric.\n\n//Finally, one line with $E$ integers, indicating that these spies are enemies.\n\n//You may assume that you can message every spy in the network directly.\n\n//You can send any message to any spy in the network (either private or public).\n\n//You may assume that you can send messages to every enemy spy only once.\n\n//Return the minimum number of messages you need to send to other spies, counting both private and public messages.\n''') == '2'"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3') == '2'\nassert solution('4\\n1 1\\n1 2\\n1 3\\n2 1') == '1'\nassert solution('4\\n0 2\\n0 1\\n2 1\\n2 3\\n1 2') == '2'\n\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1 3') == '2'\nassert solution('4 0 4') == '1'"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\nprint('All tests passed.')"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 2 2\n''') == '6', \"First\"\n\nassert solution('''\n4 3 3\n''') == '30', \"Second\"\n\nassert solution('''\n6 7 1\n''') == '60', \"Third\"\n\nassert solution('''\n1 1 2\n''') == '6', \"Fourth\"\n\nassert solution('''\n2 2 2\n''') == '12', \"Fifth\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\""
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\\n\") == \"6\"\nassert solution(\"2 2 2\\n\") == \"30\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2 1\n''') == '6'\nassert solution('''\n1 2 2\n''') == '30'\nassert solution('''\n2 2 2\n''') == '24'"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\n\nfrom math import sqrt\n\nfor a in range(2, 10):\n    for b in range(2, 10):\n        for c in range(2, 10):\n            if a**2 + b**2!= c**2:\n                if a > b:\n                    a, b = b, a\n                if b > c:\n                    b, c = c, b\n                if a == b or a == c:\n                    continue\n                if a == b and a + b == c:\n                    continue\n                # print(a, b, c)\n                print(a, b, c)\n                for d in range(1, 10):\n                    if not (a == d or a + b == d or a + c == d or b == d or b + c == d or c == d):\n                        if sqrt(a**2 + b**2) == sqrt(c**2 + d**2):\n                            if a + b + c + d == 100:\n                                print(a, b, c, d)\n                                print((a, b, c, d))\n                                print((a, b, c, d) % 10**9 + 7)\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n\"\"\"\n\n\"\"\"---SOLUTION---\"\"\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'impossible'\n\nassert solution('1') == '2021'\n\nassert solution('5') == '2022'\n\nassert solution('1') == 'impossible'\n\nassert solution('3') == '2021'"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2020 2020 2020\") == \"2021 2020 2020\"\nassert solution(\"2\\n1 9999999\") == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 9999999\n''') == \"impossible\"\n\nassert solution('''\n3\n2020 2020 2020\n''') == \"2021 2020 2020\"\n\nassert solution('''\n3\n0 0 0\n''') == \"impossible\"\n\nassert solution('''\n3\n2 9999999\n''') == \"impossible\"\n\nassert solution('''\n1\n100 100 100\n''') == \"impossible\""
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 9999999') == \"impossible\"\nassert solution('2 1 9999999') == \"impossible\"\nassert solution('3 2 1 9999999') == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == '2021 2020 2020'\n\nimport os\nimport sys"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2021 2020 2020'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n2020 2020 2020''') == '2021 2020 2020'\nassert solution('''2\n1 9999999''') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 3\n2 3 4\n''') == 'impossible'\nassert solution('''\n0 1 2\n0 1 3\n''') == 'impossible'\nassert solution('''\n3 3 2\n3 2 3\n3 3 1\n''') == 'impossible'\nassert solution('''\n4 5 6\n4 5 7\n5 5 6\n5 5 7\n6 5 5\n6 5 7\n7 5 5\n7 5 6\n''') == 'impossible'\nassert solution('''\n6 5 8\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n''') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('6') == 'impossible'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == \"11\"\nassert solution(input_string_1) == \"2\""
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '1'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"11\""
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"15\\n19\") == \"2\"\nassert solution(\"19\\n15\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('30 70') == '11'\nassert solution('66 69') == '2'"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5') == '1'\nassert solution('30 70') == '11'\nassert solution('66 69') == '2'"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '10'\nassert solution('10') == '100'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '0'\nassert solution('3\\n') == '0'\nassert solution('4\\n') == '0'\nassert solution('5\\n') == '0'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n80 30\n10 40\n90 40\n''') == '1'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'begin repairs'"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2 0\n>@\n>~\n''') == \"2\"\nassert solution('''\n3 5 1\n>>@<<\n>~#~<\n''') == \"4\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\nassert solution('10 10 1') == 'begin repairs'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 0\") == \"2\"\nassert solution(\"3 5 1\") == \"4\""
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n>@\n>~\n''') == '1'\nassert solution('''\n3\n>>@<<\n>~#~<\n''') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2 0\n>@\n>~\n''') == '2'\n\nassert solution('''\n3 5 1\n>>@<<\n>~#~<\n''') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5 0\n>@<\n>~#~<\n>>>>~\n''') == '2'\nassert solution('''\n5 5 1\n>>@<<\n>~#~<\n>>>>~\n''') == '4'\nassert solution('''\n5 5 2\n>>@<<\n>~#~<\n>>~#<\n''') == '1'\nassert solution('''\n5 5 3\n>@<<\n>~#~<\n>>~#<\n''') == '0'\nassert solution('''\n5 5 4\n>>@<<\n>~#~<\n>>~#<\n''') == '0'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 5 0\",\n    \"~@~<\",\n    \">@<<\",\n) == \"4\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\nassert solution('3 5 0') == 'begin repairs'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('143175=120') == '14+31+75=120', f'Expected: 14+31+75=120, got: {solution(\"143175=120\")}'\nassert solution('5025=30') == '5+025=30', f'Expected: 5+025=30, got: {solution(\"5025=30\")}'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"143175=120\"\n) == \"14+31+75=120\", \"Wrong!\"\nassert solution(\n    \"5025=30\"\n) == \"5+025=30\", \"Wrong!\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n\n\"\"\""
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n143175=120\n''') == '14+31+75=120'\nassert solution('''\n5025=30\n''') == '5+025=30'\nassert solution('''\n12345678910111213141516171819202122232425262728293031323334353637383940414214314414615161718192\n''') == '123+45678910111213141516+17+18+19+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''143175=120''') == '14+31+75=120', 'Wrong answer'\nassert solution(\n    '''5025=30''') == '5+025=30', 'Wrong answer'"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('143175=120') == '14+31+75=120', \"Wrong answer\"\nassert solution('5025=30') == '5+025=30', \"Wrong answer\""
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8\n1\n3\n2\n4\n1\n5\n2\n4\n''') == '1 2'\nassert solution('''\n8\n1\n2\n3\n4\n5\n6\n7\n1\nSample Output 3:\n-1\n''') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1 -1\"\nassert solution(\"8\") == \"1 2\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '1 2'\nassert solution('8\\n1\\n2\\n3\\n4\\n1\\n5\\n2\\n4\\n') == '-1'\n\nimport sys\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n8\n1\n2\n3\n4\n5\n6\n7\n1\n''') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2\\n'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '1 2'\nassert solution('4\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '-1'\nassert solution('4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '1 -1'\nassert solution('4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '1 -1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1\n2\n4\n1\n5\n2\n4\nSample Output 3:\n1 2\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1 2'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n3\\n5\\n1\\n4\\n4\\n4\\n4') == '1 2'\nassert solution('10\\n2\\n7\\n5\\n6\\n5\\n4\\n2\\n4') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8\n1\n3\n2\n4\n1\n5\n2\n4\n''') == '1 2'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1101\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"101\") == \"1\"\nassert solution(\"110\") == \"0\"\nassert solution(\"111\") == \"1\""
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n0''') == '0'\nassert solution('''1101''') == '1'\nassert solution('''1\n1''') == '1'\nassert solution('''1\n0''') == '0'\nassert solution('''1\n1''') == '1'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\nassert solution('01') == '0'\nassert solution('1') == '0'\nassert solution('1') == '0'\n\n------------------------------------------\nQuestion\n-----\nhttps://app.codility.com/programmers/lessons/5-prefix_sums/frog_jumps/\n\n------\n1. Take input from STDIN\n2. Read input as string\n3. Store the input in 1D list\n4. Create and return a new list of same length as input, which would contain '0' for each element and '1' for the element '1'\n5. Return the resultant list\n\n'''"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1101') == '1'\nassert solution('1') == '1'\nassert solution('11') == '2'\nassert solution('01') == '1'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1101\"\n) == \"1\"\nassert solution(\n    \"1011\"\n) == \"0\"\nassert solution(\n    \"0111\"\n) == \"2\"\nassert solution(\n    \"1000111\"\n) == \"4\"\nassert solution(\n    \"1101110111\"\n) == \"8\""
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\nassert solution('1011') == '0'\nassert solution('10') == '0'\nassert solution('1000000') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1101') == '1'\nassert solution('101') == '0'\nassert solution('1') == '0'"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1'\nassert solution('2 1') == '0'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 1 6 3 6\") == \"3\"\nassert solution(\"7 3 4 2 6 5 6 1\") == \"2\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"3 1 3 1\") == \"1\"\nassert solution(\"2 2 1\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"7 3 4 2 6 5 6 1\") == \"3\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''\n5 1\n2 1 1 1 1\n2 3\n1 3\n1 3\n2 4\n1 5\n2 6\n3 7\n1 8\n2 9\n3 10\n1 11\n2 12\n3 13\n1 14\n2 15\n3 16\n1 17\n2 18\n3 19\n''') == '18'\nassert solution('''\n2 1\n2 3\n1 2\n''') == '0'\nassert solution('''\n5 1\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n''') == '2'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '0'\nassert solution('5 2') == '2'\nassert solution('5 4') == '1'\nassert solution('5 7') == '2'\nassert solution('5 8') == '2'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1') == '1'\nassert solution('10 1') == '0'\nassert solution('5 2') == '2'\nassert solution('10 2') == '8'\nassert solution('5 3') == '2'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '1\\n0\\n2\\n'\nassert solution('2 1') == '3\\n'"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n\"\"\") == \"\"\"1\n0\n2\n\"\"\", \"Test\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 4\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6 4\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 1\n1 1\n1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 1\n3 1\n\"\"\") == \"1\""
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '1'\nassert solution('2 1') == '0'\nassert solution('3 3') == '2'\nassert solution('7 3 4 2 6 5 6 1') == '3'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1') == '4.000000'\nassert solution('4 2') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '4.000000'\nassert solution('2 4 3 4') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1\\n2 3\\n') == '4.000000', solution.__name__\nprint('You are awesome!!!', solution.__name__, ':)')\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1') == '5.000000'\nassert solution('5 2') == '5.000000'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.000000\"\nassert solution(\"4 2\\n2 4 3 4\") == \"3.666666\""
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 1') == '4'\nassert solution('4 2') == '3.5'\nprint('Done')\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1\\n1 2 3 4') == '5.000000'\nassert solution('5 2\\n2 4 3 4') == '4.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1\") == \"3.333333\"\nprint(solution(input()))\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1\\n2 4 3 4') == '3.666666'\nassert solution('4 2\\n2 4 3 4') == '4.0'"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1\\n2 3\\n4 5') == '4.000000'\nassert solution('2 2\\n4 3 4') == '3.666666'\nassert solution('3 3\\n6 7 7') == '6.666667'\nassert solution('4 4\\n8 9 8 9') == '8.333333'\nassert solution('5 5\\n10 11 10 11') == '10.166667'"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\nassert solution('2 2 5 5') == '0.750'\n\"\"\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\nassert solution('4 3 6 7') == '1.375'\nassert solution('3 5 8 6') == '-1.500'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 5') == '0.750'\nassert solution('3 2 2') == '0.500'\nassert solution('3 2 1') == '1.000'\nassert solution('2 3 4') == '1.000'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n''') == '0.750'\nassert solution('''\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.625'\nassert solution('''\n4 4 5 5\n1.0 1.0\n0.0 0.0\n1.0 0.0\n0.0 1.0\n''') == '0.375'\nassert solution('''\n4 4 5 5\n2.0 2.0\n1.0 1.0\n0.0 0.0\n1.0 0.0\n''') == '0.375'\nassert solution('''\n2 4 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.375'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0') == '0.750'\nassert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0') == '0.625'"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n\"\"\") == \"0.750\"\nassert solution(\"\"\"\n2 3 1\n1.0 1.0\n0.0 1.0\n0.0 1.0\n\"\"\") == \"0.000\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n\"\"\") == '0.625'\nassert solution(\"\"\"\n3 1 0.1 0.2 0.3\n0.2 0.1 0.1 0.2\n0.3 0.2 0.3\n\"\"\") == '0.2'\nassert solution(\"\"\"\n3 1 0.1 0.2 0.3\n0.2 0.1 0.1 0.2\n0.3 0.2 0.3\n\"\"\") == '0.2'\nassert solution(\"\"\"\n3 1 0.1 0.2 0.3\n0.2 0.1 0.1 0.2\n0.3 0.2 0.3\n\"\"\") == '0.2'\nassert solution(\"\"\"\n3 1 0.1 0.2 0.3\n0.2 0.1 0.1 0.2\n0.3 0.2 0.3\n\"\"\") == '0.2'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0') == '0.625'\nassert solution('2 1 2 2\\n1.0 1.0\\n1.0 1.0\\n0.0 0.0') == '0.5'\n\n'''\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 5 5\") == \"0.750\"\nassert solution(\"2 2 5 5\") == \"0.625\"\n\n\"\"\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '2', \"First\"\nassert solution('''\n3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0\n''') == '37', \"Second\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 4') == '41'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 4') == '37'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3\\n1 2 4') == '2'\nassert solution('4\\n4\\n0 3 6\\n4 0 3\\n0 0 2 1\\n0 0 3 0') == '37'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n') == '2'\nassert solution('2 2\\n1 1 1\\n0 0 0\\n0 0 1\\n') == '1'\nassert solution('1 2\\n2 2\\n0 3\\n') == '1'\nassert solution('1 4\\n4 0 4\\n0 0 2\\n0 0 3\\n') == '41'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"4 4\") == \"37\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '42'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"4 4\") == \"37\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 4') == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '37'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"10\"\nassert solution(\"1 1\") == \"2\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 2\n1234\n1 4\n1 4\n1 4\n1 4\n\"\"\") == \"10\"\nassert solution(\"\"\"\n5 4\n1234\n1 1\n1 2\n1 3\n1 4\n\"\"\") == \"1 4\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '3'\nassert solution('10 2') == '7'\nassert solution('10 8') == '3'\nassert solution('100 4') == '4'\nassert solution('100 9') == '4'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n1234\n1 1\n1 2\n1 3\n1 4\n''') == '1'\nassert solution('''\n4\n1234\n1 1\n1 2\n1 3\n1 4\n''') == '4'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2') == '1 2'\nassert solution('6 7') == '3 4 5 6 7'\nassert solution('6 5') == '3 5 4 6 7'\nassert solution('10 4') == '10 9 8 7 6 5 4 3 2 1'\nassert solution('10 3') == '1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1234\\n1 4\\n1 4\\n1 4\\n') == '10\\n14\\n18\\n'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n1234\n1 4\n1 4\n''') == '10'\nassert solution('''\n4 4\n1234\n1 1\n1 2\n1 3\n1 4\n''') == '1'\n\n\"\"\""
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 3\n1234\n1 4\n1 4\n1 4''') == '10'\nassert solution('''4 4\n1234\n1 1\n1 2\n1 3\n1 4''') == '1'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1234\\n1 4\\n1 4\\n1 4\") == \"10\\n14\\n18\\n\"\nassert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"1\\n4\\n9\\n16\\n\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1234\\n1 4\\n1 4\\n1 4') == '10\\n14\\n18\\n','sample test 1'\nassert solution('4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4') == '1\\n4\\n9\\n16\\n','sample test 2'\nassert solution('15\\n4321\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\\n1 19\\n1 20\\n1 21\\n1 22\\n1 23\\n1 24\\n1 25\\n1 26\\n1 27\\n1 28\\n1 29\\n1 30\\n1 31\\n1 32\\n1 33\\n1 34\\n1 35\\n1 36\\n1 37\\n1 38\\n1 39\\n1 40\\n1 41\\n1 42\\n1 43\\n1 44\\n1 45\\n1 46\\n1 47\\n1 48\\n1 49\\n1 50\\n1 51\\n1 52\\n1 53\\n1 54\\n1 55\\n1 56\\n1 57\\n1 58\\n1 59\\n1 60\\n1 61\\n1 62\\n1 63\\n1 64\\n1 65\\n1 66\\n1 67\\n1 68\\n1 69\\n1 70\\n1 71\\n1 72\\n1 73\\n1 74\\n1 75\\n1 76\\n1 77\\n1 78\\n1 79\\n1 80\\n1 81\\n1 82\\n1 83\\n1 84\\n1 85\\n1 86\\n1 87\\n1 88\\n1 89\\n1 90\\n1 91\\n1 92\\n1 93\\n1 94\\n1 95\\n1 96\\n1 97\\n1 98\\n1 99\\n1 100\\n1 101\\n1 102\\n1 103\\n1 104\\n1 105\\n1 106\\n1 107\\n1 108\\n1 109\\n1 110\\n1 111\\n1 112\\n1 113\\n1 114\\n1 115\\n1 116\\n1 117\\n1 118\\n1 119\\n1 120\\n1 121\\n1 122\\n1 123\\n1 124\\n1 125\\n1 126\\n1 127\\n1 128\\n1 129\\n1 130\\n1 131\\n1 132\\n1 133\\n1 134\\n1 135\\n1 136\\n1 137\\n1 138\\n1 139\\n1 140\\n1 141\\n1 142\\n1 143\\n1 144\\n1 145\\n1 146\\n1 147\\n1 148\\n1 149\\n1 150\\n1 151\\n1 152\\n1 153\\n1 154\\n1 155\\n1 156\\n1 157\\n1 158\\n1 159\\n1 160\\n1 161\\n1 162\\n1 163\\n1 164\\n1 165\\n1 166\\n1 167\\n1 168\\n1 169\\n1 170\\n1 171\\n1 172\\n1 173\\n1 174\\n1 175\\n1 176\\n1 177\\n1 178\\n1 179\\n1 180\\n1 181\\n1 182\\n1 183\\n1 184\\n1 185\\n1 186\\n1 187\\n1 188\\n1 189\\n1 190\\n1 191\\n1 192\\n1 193\\n1 194\\n1 195\\n1 196\\n1 197\\n1 198\\n1 199\\n1 200\\n1 201\\n1 202\\n1 203\\n1 204\\n1 205\\n1 206\\n1 207\\n1 208\\n1 209\\n1 210\\n1 211\\n1 212\\n1 213\\n1 214\\n1 215\\n1 216\\n1 217\\n1 218\\n1 219\\n1 220\\n1 221\\n1 222\\n1 223\\n1 224\\n1 225\\n1 226\\n1 227\\n1 228\\n1 229\\n1 230\\n1 231\\n1 232\\n1 233\\n1 234\\n1 235\\n1 236\\n1 237\\n1 238\\n1 239\\n1 240\\n1 241\\n1 242\\n1 243\\n1 244\\n1 245\\n1 246\\n1 247\\n1 248\\n1 249\\n1 250\\n1 251\\n1 252\\n1 253\\n1 254\\n1 255\\n1 256\\n1 257\\n1 258\\n1 259\\n1 260\\n1 261\\n1 262\\n1 263\\n1 264\\n1 265\\n1 266\\n1 267\\n1 268\\n1 269\\n1 270\\n1 271\\n1 272\\n1 273\\n1 274\\n1 275\\n1 276\\n1 277\\n1 278\\n1 279\\n1 280\\n1 281\\n1 282\\n1 283\\n1 284\\n1 285\\n1 286\\n1 287\\n1 288\\n1 289\\n1 290\\n1 291\\n1 292\\n1 293\\n1 294\\n1 295\\n1 296\\n1 297\\n1 298\\n1 299\\n1 300\\n1 301\\n1 302\\n1 303\\n1 304\\n1 305\\n1 306\\n1 307\\n1 308\\n1 309\\n1 310\\n1 311\\n1 312\\n1 313\\n1 314\\n1 315\\n1 316\\n1 317\\n1 318\\n1 319\\n1 320\\n1 321\\n1 322\\n1 323\\n1 324\\n1 325\\n1 326\\n1 327\\n1 328\\n1 329\\n1 330\\n1 331\\n1 332\\n1 333\\n1 334\\n1 335\\n1 336\\n1 337\\n1 338\\n1 339\\n1 340\\n1 341\\n1 342\\n1 343\\n1 344\\n1 345\\n1 346\\n1 347\\n1 348\\n1 349\\n1 350\\n1 351"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5''') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"3 5 4\") == \"1\"\nassert solution(\"6 4 5\") == \"2\""
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 4\\n3 4\\n') == '1'\nassert solution('3\\n1 3\\n3 4\\n') == '1'\nassert solution('4\\n3 2\\n3 4\\n') == '2'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n3 3 2\n1 3\n2 3\n3 4\n''') == '1'\nassert solution(\n'''\n5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 3') == '1'\nassert solution('5 2 4') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('2 3 1') == '3'\nassert solution('3 4 1') == '1'\nassert solution('4 5 1') == '2'\nassert solution('5 4 2') == '3'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('5 2 4') == '1'\nassert solution('8 1 3') == '1'\nassert solution('5 2 2') == '0'\nassert solution('9 2 3') == '2'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 3') == '1'\nassert solution('5 2 4') == '2'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 2 3\\n1 3\\n2 3\\n3 4\"\n    ) == \"2\"\nassert solution(\n    \"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\"\n    ) == \"1\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n9999 0 10000 0 0 1\n9999 0 10000 0 0 1\n''') == 'no'\nassert solution('''\n1\n9999 0 10000 0 0 1\n''') == 'yes'\nassert solution('''\n3\n9999 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'yes'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n') == 'yes'\nassert solution('3\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n') == 'yes'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'no'\nassert solution('2') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'no'\nassert solution('''\n1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'yes'\nassert solution('''\n1\n9998 0 9999 0 0 1\n9999 0 10000 0 0 1\n2\n9997 0 9998 0 0 1\n9998 0 9999 0 0 1\nSample Output 2:\nno\n''') == 'no'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"yes\"\nassert solution(\"2\") == \"no\"\nassert solution(\"3\") == \"no\""
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"yes\", \"Garry and Jerry should be able to see the same cloud cover in the sky!\"\nassert solution(\"2\") == \"no\", \"Garry and Jerry should not be able to see the same cloud cover in the sky!\""
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n\") == \"no\"\nassert solution(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"no\"\nassert solution(\"2\") == \"yes\""
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n0 0 1\n2\n0 1 1\n2 2 2\n1 2 3\n3 3 3\n''') == 'yes'\nassert solution('''3\n0 0 1\n2\n0 1 2\n1 1 2\n''') == 'yes'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n') == 'no'"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 2\\n1 3\\n1 4\\n') == 'YES\\n1 3\\n2 1\\n3 2'"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 3\n1 2\n1 3\n1 4\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n1 1\n1 3\n2 2\n3 2\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n5 5\n1 2\n1 3\n1 4\n1 5\n2 4\n3 4\n3 5\n4 5\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('5 1') == 'YES'\nassert solution('5 2') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == \"YES\\n1 3\\n2 1\\n3 2\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n1 2\n2 3\n1 3\n''') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'NO\\n1 3\\n2 1\\n3 2\\n4 1'\n''')\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'NO'\nassert solution('1') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'YES'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('4 3') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n1 2\n2 3\n3 4\n1 3\n2 4\n''') == 'YES', 'Should be YES'\nassert solution('''\n5 4\n1 2\n1 3\n1 4\n''') == 'NO', 'Should be NO'\nprint('Tests passed')\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\nassert solution('''3 3\n0 = 1\n1 = 2\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'inconsistent'\nassert solution('5 5') == 'consistent'\nprint('all tests passed')\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"inconsistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'consistent'\nassert solution('1 2 3') == 'inconsistent'\nprint(solution())\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\n\"\"\"\n--- Part Two ---\nAs you may have guessed, the game of chess is played on a grid. The chessboard is an $N \\times $N$ board, where $N$ is the size of the chessboard. Each square on the board has a different color: red (upper-left) vs. white (upper-right) vs. blue (lower-left) vs. yellow (lower-right).\n\nFor this part, your friend is trying to find out who has won the tournament.\n\nYou know that the tournament is played between rival teams, and that players take turns placing their pieces on a particular space in the grid (starting with white pieces in the upper-left corner). That is, the first player to move makes the first move on the grid. The first player to move on a space (or the space behind their piece) is the winner. (For example, if white makes the first move on a 7th space, then black wins the game, since they can only move on spaces 4, 5, or 6.)\n\nCan you determine who the winner of the game is?\n\nHere is a starting point: (It does not need to win the game, but it is relevant to the point that you know that the game ends.)\n\nLet $K$ be the number of black and white players in the tournament, respectively.\n\nConsider the following $K$-sized list of lists, $matchsticks$, where each list is a single match:\n\n$matchsticks = [[1,2],\n                [2,1],\n                [1,4],\n                [4,1],\n                [2,4],\n                [4,2]]$\nWrite a function that, given such a list, determines whether any two players have matching pairs of pieces. If so, return those players' identifiers. Otherwise, return an empty list.\n\nFor example, given the following list $matchsticks$, one possible solution is:\n\n[1,2]\n[1,4]\n[2,4]\nBecause we have matches of size 2, the first player to make a match wins.\n\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"inconsistent\"\nassert solution(\"3 3\") == \"inconsistent\"\nassert solution(\"5 5\") == \"consistent\""
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"0 > 1\\n\"\n    \"1 = 2\\n\"\n    \"0 = 2\\n\"\n) == \"inconsistent\"\nassert solution(\n    \"5 5\\n\"\n    \"0 = 1\\n\"\n    \"1 = 2\\n\"\n    \"3 = 4\\n\"\n    \"0 > 3\\n\"\n    \"1 > 4\\n\"\n) == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'''\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"0 > 1\\n\"\n    \"1 = 2\\n\"\n    \"0 = 2\\n\"\n) == \"inconsistent\"\n\nassert solution(\n    \"5 5\\n\"\n    \"0 = 1\\n\"\n    \"1 = 2\\n\"\n    \"3 = 4\\n\"\n    \"0 > 3\\n\"\n    \"1 > 4\\n\"\n) == \"consistent\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1.57079633'\nassert solution('4') == '1.57079633'\nassert solution('5') == '0.78539816'\nassert solution('6') == '3.14159265'\nassert solution('7') == '1.57079633'"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\\n2 3 3\\n1 3 5\") == \"2.82842712475\"\nassert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == \"41938.65135885\"\nassert solution(\"0\\n2 2 2\") == \"3.1415926536\"\nassert solution(\"0\\n2 2 2\\n3 4 5\") == \"3.1415926536\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 0 0\\n2 1 0\\n0 0 0\\n0 0 1\\nSample Output 2:41938.65135885') == '1.57079633'\nassert solution('5\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\nSample Output 2:41938.65135885') == '41938.65135885'\nassert solution('5\\n0 0 0\\n0 0 1\\n0 0 0\\nSample Output 2:41938.65135885') == '0.0'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0 0\\n1 1 0\\n0 0 0') == '1.57079633'\nassert solution('2\\n0 0 0\\n1 1 0\\n0 0 0') == '1.57079633'\nassert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '1.57079633'\n\"\"\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '1.57079633'\nassert solution('4\\n1 2 3\\n-1 2 3\\n0 0 0\\n0 0 1\\n') == '41938.65135885'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 0 0\n1 1 0\n0 0 0\n''') == '1.57079633'\nassert solution('''\n4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n''') == '41938.65135885'\n\n'''\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n'''"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n\") == \"41938.65135885\"\nassert solution(\"3\\n1 1 2\\n0.5 0.5 0\\n-1 -1 0\") == \"2.0921704422\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n1 0 0\n1 1 0\n0 0 0\n0 0 1''') == '1.57079633'\nassert solution('''4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0''') == '41938.65135885'\n\n\"\"\"\nimport math\n\nclass Solution:\n    def answer(self, stdin: str) -> str:\n        '''\n        What is the smallest volume cylinder that can enclose all the stars?\n        What is the area of the cylinder?\n        A cylinder is defined by the radius, length, and height. A cylinder is formed by a point, axis, and a height.\n        If we use a single cylinder to enclose all the stars, then we can find the area and radius of the largest cylinder.\n        For a cylinder to enclose all the stars, we can always place a circle with radius r = distance / 2.\n        We can now check the size of the volume of the cylinder: |r| * |h|.\n        If the cylinder is tilted about its axis, then the length of the cylinder is 3*sqrt(r**2 + h**2), but the radius is equal to h.\n        The equation of the cylinder is |r| * h = length.\n        We can solve for length using this equation:\n        Length = 2 * sqrt(r**2 + h**2)\n        and the equation of the cylinder is:\n        r = length / 2\n        The final answer is the volume of the cylinder.\n        '''\n        def volume(r, h):\n            return math.pi * (r**2) * h\n\n        r, h = list(map(int, stdin.split()))\n        l = 2 * math.sqrt(r**2 + h**2)\n        return str(volume(r, h) + math.pi * r**2)\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '0.2'\nassert solution('''\n3\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.64454015'\nassert solution('''\n4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n0 0 1\n''') == '41938.65135885'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\nassert solution('''\n4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n''') == '41938.65135885'\nassert solution('''\n3\n1 1 1\n1 0 0\n0 0 0\n''') == '5.6717416512000014'\nassert solution('''\n4\n1 1 0\n1 1 0\n0 0 0\n0 0 1\n''') == '3.877586771859961'\nassert solution('''\n5\n1 0 0\n0 1 0\n0 0 0\n0 0 1\n0 0 2\n''') == '0.35'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\na''') == '5'\nassert solution('''12\naabcdefghijklmnopqrstuvwxyz\nb''') == '8'\nassert solution('''9\nabcdxxy\na''') == '5'\nassert solution('''13\naabcdefghijklmnopqrstuvwxyz\na\nabcdxxy\na''') == '5'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\nassert solution(stdin='''\n11\nsabcabcfabc\n''') == \"3\"\nassert solution(stdin='''\n18\ntrutrutiktiktappop\n''') == \"4\"\n'''\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''10\nsabcabcfabc\n''') == '3'\n\nassert solution('''11\ntrutrutiktiktappop\n''') == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"4\"\n\nprint(solution(input))\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('11') == '3'\nassert solution('18') == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('8') == '8'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '2'\nassert solution('3') == 'huge'\nassert solution('5 1 6 3 2 4') == '5'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '5'\nassert solution('3') == 'huge'\nassert solution('4') == 'huge'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n2 3 1\n3 1 2\n3 2 1\n3 3 1\n4 6 5 1 3 2\n4 6 5 1 3 2''') == \"2\"\nassert solution('''7\n3 1 2 1 1 3 1\n1 3 2 2 1 1 1\n1 3 2 1 1 3 1\n3 2 1 1 1 1 1\n1 3 2 1 1 1 3\n3 2 1 1 1 1 1\n3 2 1 1 1 1 2\n2 1 1 1 1 1 1''') == \"1\""
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == \"2\"\nassert solution('6') == \"5\""
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n2 3 1\n3 1 2\n''') == '2'\nassert solution('''6\n5 1 6 3 2 4\n4 6 5 1 3 2\n''') == '5'\nassert solution('''100\n10 1 20 3 4\n100 6 1 20 4\n''') == '10000'\nassert solution('''50\n10 1 20 3 4\n50 6 1 20 4\n''') == '50000'\nassert solution('''30\n1 1 2 3 4\n1 1 2 3 4\n''') == '1'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"6\") == \"5\"\nassert solution(\"3\") == \"huge\"\n\n\"\"\"\n\n\"\"\"\nThe idea is to use the fact that if we have two sorted arrays, one sorted from the left and one sorted from the right, then the difference between the two sorted arrays must be at most 1.\n\nAlgorithm:\n\n1. Take the two largest integers from each list and compare them to see if they are the same. If they are, we can just return 1.\n\n2. If they are not the same, we can divide the array in half.\n\n3. Repeat the same operation, but this time the largest integer is less than both. If it's the same, we can just return 1.\n\n4. If it's not the same, we need to do a lot of work, we need to sort the first half of the array, and sort the second half. Then we can compare the sorted array's left and right side.\n\nIf they are the same, we need to just split the sorted array in half and take the difference. We'll then repeat step 3, 4, etc., until we get to the end.\n\nIf they are not the same, we need to split in half the first sorted array, and sort the second half. Then we need to compare their left and right sides.\n\n5. If they are not the same, we need to do the same as in step 1, but this time we will take the largest of the two numbers from the first sorted array and the smallest of the second sorted array. If they are the same, we can just return 1.\n\n6. If they are not the same, we need to sort the first half of the first sorted array, and sort the second half of the second sorted array. Then we can compare their left and right sides.\n\n7. If they are not the same, we need to do the same as step 3, 4, 5, but this time we will take the smaller of the two numbers from the first sorted array and the larger of the second sorted array.\n\n8. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n9. If they are not the same, we need to do the same as in step 3, 4, 5, 6, but this time we will take the smaller of the two numbers from the first sorted array and the larger of the second sorted array.\n\n10. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n11. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n12. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n13. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n14. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n15. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n16. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n17. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n18. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n19. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n20. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n21. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n22. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n23. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n24. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n25. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n26. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n27. If they are not the same, we need to do"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 3 1') == '2'\nassert solution('6\\n5 1 6 3 2 4') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '4\\n3 1 2 3\\n2 3 1') == '2'\nassert solution(\n    '4\\n5 1 6 3 2 4\\n4 6 5 1 3 2') == '5'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3 1\\n3 1 2\\n') == '2'\nassert solution('6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\\n') == '5'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 1\n0 10 20\n0 10\nSample Output 1:\n4\n\nSample Input 2:\n5 1\n0 10 20\n0 40\n0 50\n0 60\nSample Output 2:\n11\n''') == '11'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '3 1\\n'\n    '0 10 20\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\nassert solution('''2 5\n1 5\n3 4''') == '6'\nassert solution('''2 2\n0 10''') == '8'\nassert solution('''2 3\n0 10\n0 10''') == '8'\nassert solution('''2 1\n0 10''') == '10'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1\\n0 10 20\\n0 10') == '4'\nassert solution('6 1\\n0 10 20 26 40 50\\n0 40') == '9'"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '4'\nassert solution('6 1') == '9'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 1\n0 10 20\n0 10\nSample Input 3:\n8 1\n0 10 20\n0 10\n10 20\n0 30\n0 20\nSample Output 3:\n-1''') == '-1'\nassert solution('''4 1\n0 10 20\n0 10\n0 20\n20 30\n20 40\nSample Output 4:\n10\n''') == '10'"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\n0 10 20\n0 10\nSample Input 3:\n6 1\n0 10 20\n10 20\n20 30\n40 50\n50 60\nSample Output 3:\n13\n''') == '13'\n\nassert solution('''\n3 1\n0 10 20\n0 10\nSample Input 4:\n6 1\n0 10 20\n10 20\n20 30\n40 50\n50 60\n40 60\nSample Output 4:\n9\n''') == '9'\n\nassert solution('''\n2 2\n0 0\n10 10\nSample Input 5:\n3 1\n0 10 20\n0 10\nSample Output 5:\n10\n''') == '10'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '3 1\\n0 10 20\\n0 10\\n') == '4'\nassert solution(\n    '6 1\\n0 10 20 26 40 50\\n0 40\\n') == '9'\nassert solution(\n    '3 1\\n0 10 20\\n0 10\\n') == '4'\nassert solution(\n    '5 1\\n0 10 20 30 40 50\\n0 50') == '11'\nassert solution(\n    '5 2\\n0 10 20 30 40 50\\n0 50') == '10'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 1\n0 10 20\n0 10\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3 2\n0 10 20\n0 40\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '4'\nassert solution('5 1 2 3 4') == '5'\nassert solution('5 1 2 3 4 5') == '6'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('shuffle([1,2,1,2])') == 'equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\n''') == 'not equal'\nassert solution('''sorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\n''') == 'equal'\n\n'''\nsample output\nnot equal\n\n'''\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('shuffle([1,2,1,2])') == 'equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('shuffle([1,2,1,2])') == 'equal'\nprint('YOUR CODE IS CORRECT!')\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"shuffle([1,2,1,2])\") == \"equal\""
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\n\"\"\") == \"not equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))''') == \"not equal\"\nassert solution('''sorted(concat([3,2,1],[4,5,6]))''') == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"concat(shuffle([1,2]),shuffle([1,2]))\"\n    \"shuffle([1,2,1,2])\"\n) == \"not equal\"\nassert solution(\n    \"sorted(concat([3,2,1],[4,5,6]))\"\n    \"[1,2,3,4,5,6]\"\n) == \"equal\"\n\nimport sys\nimport os\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'equal'\nassert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'not equal'''\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == '1'\nassert solution(r\"\"\"\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == 'Oh no'\n\"\"\""
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('3 2') == '1'"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3') == \"Oh no\"\nassert solution('1 2') == \"1\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n''') == 'Oh no'\nassert solution('''\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n''') == '1'\nassert solution('''\n2 2\n2 3\n1 2 1 2\n2 3 1 2\n''') == '2'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\n\nassert solution(stdin=\"1 2\") == \"Oh no\"\nassert solution(stdin=\"3 2\") == \"1\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n''') == 'Oh no', 'First'\n\nassert solution('''\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n''') == '1', 'Second'\n\nassert solution('''\n1 4\n4 2\n1 2 1 2\n2 3 1 2\n''') == 'Oh no', 'Third'\n\nassert solution('''\n1 6\n6 2\n1 2 1 2\n2 3 1 2\n''') == '1', 'Fourth'\n\nassert solution('''\n1 10\n10 2\n1 2 1 2\n2 3 1 2\n''') == 'Oh no', 'Fifth'"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\") == \"3\"\nassert solution(\"4\\n4\\n2\\n3\") == \"impossible\"\nassert solution(\"5\\n5\\n4\\n4\\n2\\n3\") == \"3\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3'\nassert solution('''\n3\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == 'impossible'\nassert solution('''\n4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3'\nassert solution('''\n4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"5 5\") == \"impossible\"\nassert solution(\"8 2\") == \"impossible\"\nassert solution(\"7 4\") == \"impossible\"\nassert solution(\"20 20\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4 5 1\") == \"impossible\"\nassert solution(\"4\\n1 1 1\") == \"impossible\"\nassert solution(\"5\\n2 2 1\") == \"3\"\nprint(\"YOUR CODE IS CORRECT!\")\n\n'''\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == '3'\nassert solution('3 2\\n1 2\\n2 3\\n3 4') == 'impossible'\nprint('all tests passed')\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == '3'\nassert solution('5 5') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == '3'\n'''"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'impossible'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"4\"\n\n'''\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n2 1 1 1 3\n''') == '2'\n\nassert solution('''\n2\n2 1 1 1 3\n''') == '4'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"4\""
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 1 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4\n3 1 4\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5\n4 1 1 1 4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 1 1 1 3\"\n) == \"2\"\n\nassert solution(\n    \"1\"\n) == \"1\"\n\nassert solution(\n    \"22\"\n) == \"4\"\n\nassert solution(\n    \"a\"\n) == \"No quotation\"\n\nassert solution(\n    \"aa\"\n) == \"No quotation\""
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()\n\nSample Input 3:\n1\n20 20\nSample Output 3:\n5\n\nSample Input 4:\n10\n1 2 3 4 5 6 7 8 9\nSample Output 4:\n7\n\nSample Input 5:\n10\n1 2 3 4 5 6 7 8 9 10\nSample Output 5:\n10\n\nSample Input 6:\n10\n12 34 56 7 8 9 10 11 12\nSample Output 6:\n12\n\nSample Input 7:\n10\n1 2 3 4 5 6 7 8 9 10 11 22\nSample Output 7:\n10\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n22\n''') == '4'\nassert solution('''\n2\n2 2 2\n''') == '2'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('4') == ''\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 1 3\") == \"2\"\nassert solution(\"1\") == \"4\"\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\n\"\"\""
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n3 1 5') == '3'\nassert solution('4\\n1 2 3 4') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4 1 3') == '3'\nassert solution('4 5 1 2') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\n\"\"\"\n\na = input()\nb = input()\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\n\n'''\nfrom itertools import combinations\nn = int(input())\nl = list(map(int, input().split()))\nans = 0\n\nfor i in range(2, n+1):\n    for j in range(n):\n        if j+i > n:\n            break\n        elif l[j]%2==0:\n            continue\n        elif l[j+i-1]%2==0:\n            continue\n        elif l[j+i-2]%2==0:\n            continue\n        else:\n            ans += 1\nprint(ans)"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10\n1 2 4 5 7 8 9 10 10\n\"\"\") == \"6\"\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n1 2 4 5 6 7 8 9 10\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''a+b-c''') == '- +d-'\nassert solution('''a-b+d-c''') == '+ -d+'\nassert solution('''knuth-morris-pratt''') == '<any> <empty>'''"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", \"Should return - +d-\".format(solution(\"a+b-c\"))\nassert solution(\"a-b+d-c\") == \"- +d-\", \"Should return - +d-\".format(solution(\"a-b+d-c\"))\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('a+b-c') == '- +d-'\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('a+b-c') == '- +d-', 'WRONG!'\nassert solution('a-b+d-c') == '- +d-', 'WRONG!'\nprint('All Tests Passed!')"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) in (output1, output2)\n'''\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''a+b-c\na-b+d-c''') == '- +d-'''"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''a+b-c''') == '- +d-'\nassert solution('''a-b+d-c''') == '- +d-'\n''')\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", \"Should be - +d-.\"\nassert solution(\"a-b+d-c\") == \"a-b+d-c\", \"Should be a-b+d-c.\"\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''a+b-c''') == '- +d-'\nassert solution('''a-b+d-c''') == '- +d-'\nassert solution('''knuth-morris-pratt''') == '<any> <empty>'''\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"- +d-\n\nprint(solution(\"knuthmorrispratt\"))"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 1') == '3'\nassert solution('3 2') == '3'\nassert solution('3 3') == '5'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 3\") == \"5\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 0\") == \"0\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n''') == '0\\n1\\n1\\n2\\n3\\n3\\n4\\n4\\n5\\n5\\n6\\n6\\n7\\n7\\n8\\n8\\n9\\n9\\n10\\n10\\n'''"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 0') == '1'"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 1') == '2'\nassert solution('3 2') == '3'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 0\") == \"0\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 3\") == \"5\"\nassert solution(\"3 4\") == \"7\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 1') == '3'\nassert solution('3 2') == '2'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"7 6\") == \"2\"\nassert solution(\"3 6\") == \"3\"\n\ninput = stdin.readline().strip().split()\nfrogs_num, position = int(input[0]), list(map(int, input[1:]))\nchanges = int(stdin.readline().strip())\n\nfor change in range(changes):\n    frog_index = int(stdin.readline().strip())\n    frog_change = int(stdin.readline().strip())\n\n    if frog_index == 0:\n        frogs_num += frog_change\n    elif frog_index == 1:\n        position[frog_index] += frog_change\n    elif frog_index == 2:\n        position[frog_index] -= frog_change\n\nprint(frogs_num)\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1\\n0\\n7') == '0\\n1\\n3'\nassert solution('2 2\\n0\\n6\\n1\\n2\\n3\\n4\\n5') == '1\\n3\\n5\\n3\\n4\\n5\\n6\\n7\\n8'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1''') == '2\\n4 6'\nassert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6''') == '0'\nassert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6''') == '4 6'"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n') == '2\\n4 6\\n'\nassert solution('4 8\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n') == '0\\n'\nassert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n') == '0\\n'\nassert solution('5 8\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n') == '2\\n4 6\\n'\nassert solution('3 6\\n1 2 2\\n1 3 2\\n1 4 2\\n2 5 1\\n2 6 2\\n3 5 1\\n4 5 2\\n5 6 3\\n') == '0\\n'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 6\n1 2 1\n2 3 2\n3 4 3\n4 5 2\n5 6 1\n6 7 1\n7 8 2\n8 9 3\n9 10 3\n10 11 2\n11 12 1\n12 13 1\n13 14 1\n14 15 1\n15 16 1\n16 17 1\n17 18 1\n18 19 1\n19 20 1\n20 21 1\n21 22 1\n22 23 1\n23 24 1\n24 25 1\n25 26 1\n26 27 1\n27 28 1\n28 29 1\n29 30 1\n30 31 1\n31 32 1\n32 33 1\n33 34 1\n34 35 1\n35 36 1\n36 37 1\n37 38 1\n38 39 1\n39 40 1\n40 41 1\n41 42 1\n42 43 1\n43 44 1\n44 45 1\n45 46 1\n46 47 1\n47 48 1\n48 49 1\n49 50 1\n50 51 1\n51 52 1\n52 53 1\n53 54 1\n54 55 1\n55 56 1\n56 57 1\n57 58 1\n58 59 1\n59 60 1\n60 61 1\n61 62 1\n62 63 1\n63 64 1\n64 65 1\n65 66 1\n66 67 1\n67 68 1\n68 69 1\n69 70 1\n70 71 1\n71 72 1\n72 73 1\n73 74 1\n74 75 1\n75 76 1\n76 77 1\n77 78 1\n78 79 1\n79 80 1\n80 81 1\n81 82 1\n82 83 1\n83 84 1\n84 85 1\n85 86 1\n86 87 1\n87 88 1\n88 89 1\n89 90 1\n90 91 1\n91 92 1\n92 93 1\n93 94 1\n94 95 1\n95 96 1\n96 97 1\n97 98 1\n98 99 1\n99 100 1\n100 101 1\n101 102 1\n102 103 1\n103 104 1\n104 105 1\n105 106 1\n106 107 1\n107 108 1\n108 109 1\n109 110 1\n110 111 1\n111 112 1\n112 113 1\n113 114 1\n114 115 1\n115 116 1\n116 117 1\n117 118 1\n118 119 1\n119 120 1\n120 121 1\n121 122 1\n122 123 1\n123 124 1\n124 125 1\n125 126 1\n126 127 1\n127 128 1\n128 129 1\n129 130 1\n130 131 1\n131 132 1\n132 133 1\n133 134 1\n134 135 1\n135 136 1\n136 137 1\n137 138 1\n138 139 1\n139 140 1\n140 141 1\n141 142 1\n142 143 1\n143 144 1\n144 145 1\n145 146 1\n146 147 1\n147 148 1\n148 149 1\n149 150 1\n150 151 1\n151 152 1\n152 153 1\n153 154 1\n154 155 1\n155 156 1\n156 157 1\n157 158 1\n158 159 1\n159 160 1\n160 161 1\n161 162 1\n162 163 1\n163 164 1\n164 165 1\n165 166 1\n166 167 1\n167 168 1\n168 169 1\n169 170 1\n170 171 1\n171 172 1\n172 173 1\n173 174 1\n174 175 1\n175 176 1\n176 177 1\n177 178 1\n178 179 1\n179 180 1\n180 181 1\n181 182 1\n182 183 1\n183 184 1\n184 185 1\n185 186 1\n186 187 1\n187 188 1\n188 189 1\n189 190 1\n190 191 1\n191 192 1\n192 193 1\n193 194 1\n194 195 1\n195 196 1\n196 197 1\n197 198 1\n198 199 1\n199 200 1\n200 201 1\n201 202 1\n202 203 1\n203 204 1\n204 205 1\n205 206 1\n206 207 1\n207 208 1\n208 209 1\n209 210 1\n210 211 1\n211 212 1\n212 213 1\n213 214 1\n214 215 1\n215 216 1\n216 217 1\n217 218 1\n218 219 1\n219 220 1\n220 221 1\n221 222 1\n222 223 1\n223 224 1\n224 225 1\n225 226 1\n226 227 1\n227 228 1\n228 229 1\n229 230 1\n230 231 1\n231 232 1\n232 233 1\n233 234 1\n234 235 1\n235 236 1\n236 237 1\n237 238 1\n238 239 1\n239 240 1\n240 241 1\n241 242 1\n242 243 1\n243 244 1\n244 245 1\n245 246 1\n246 247 1\n247 248 1\n248 249 1\n249 250 1\n250 251 1\n251 252 1\n252 253 1\n253 254 1\n254 255 1\n255 256 1\n256 257 1\n257 258 1\n258 259 1\n259 260 1\n260 261 1\n261 262 1\n262 263 1\n263 264 1\n264 265 1\n265 266 1\n266 267 1\n267 268 1\n268 269 1\n269 270 1\n270 271 1\n271 272 1\n272 273 1\n273 274 1\n274 275 1\n275 276 1\n276 277 1\n277 278 1\n278 279 1\n279 280 1\n280 281 1\n281 282 1\n282 283 1\n283 284 1\n284 285 1\n285 286 1\n286 287 1\n287 288 1\n288 289 1\n289 290 1\n290 291 1\n291 292 1\n292 293 1\n293 294 1\n294 295 1\n295 296 1\n296 297 1\n297 298 1\n298 299 1\n299 300 1\n300 301 1\n301 302 1\n302 303 1\n303 304 1\n304 305 1\n305 306 1\n306 307 1\n307 308 1\n308 309 1\n309 310 1\n310 311 1\n311 312 1\n312 313 1\n313 314 1\n314 315 1\n315 316 1\n316 317 1\n317 318 1\n318 319 1\n319 320 1\n320 321 1"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '2'\nassert solution('7 8') == '2'\nprint('\u2705')\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 8') == '2'\nassert solution('5 6') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n\"\"\") == \"2\""
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '0'\nassert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '2 4 6'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"1 2\"\nassert solution(\"3 5\") == \"1 2 3\"\nassert solution(\"8 7\") == \"7\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n''') == '2\\n4 6\\n'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n''') == '2'\nassert solution('''\n5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n''') == '4 6'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '4'\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n''') == '1 2 3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '4'\nassert solution('1 1') == '4'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"4\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"1 3\") == \"6\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"4 5 6\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '4'\nassert solution('6') == '1'\nprint('all test cases passed')"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n12\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '4 5 6'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6''') == '4 5 6 1 2 3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\") == \"4\\n5\\n6\\n1\\n2\\n3\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''12\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6''') == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution('''10\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6''') == '1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"CPCC\") == '1'\nassert solution(\"PPPPCCCC\") == '8'"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\nassert solution('PPPPPCCCC') == '11'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '1'\nassert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\nassert solution('PPPPPP') == '4'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == \"1\"\nassert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\""
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\nassert solution('CCCCCCCCCCCCCCCC') == '6'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n\nassert solution('C') == '1'\nassert solution('P') == '1'\nassert solution('CPCCCC') == '5'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\nprint('\"Run\" is good practice.')"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2 1\n1 2\n2 3\n2\n''') == '1 2 3'\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '3'\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '1 2 3'\nassert solution('''\n3 3 1\n1 2\n2 3\n3\n''') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 1') == '1 2 3'\nassert solution('3 2 1') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2 1\n1 3\n2 3\n3\n''') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 1\n1 2\n2 3\n2\n''') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1\\n2 3\\n3 4\\n1 2\\n') == '1 2 3 4'\nassert solution('1 1 1\\n1 1\\n1 1\\n') == '1'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 1\\n1 2\\n2 3\\n2\\n') == '1 2 3'\nassert solution('3 2 1\\n1 3\\n2 3\\n3\\n') == '1 2 3'\n\nstdin = \"\"\"\n1 2 1\n1 3\n2 3\n3\n\"\"\"\n\nprint(solution(stdin))\n\n\"\"\"\n1 2 1\n1 3\n2 3\n3\n\"\"\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1\\n1 3\\n2 3\\n2\\n') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\\n1 3\\n2 3\\n2\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\") == \"3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2 1\n1 2\n2 3\n2\n''') == '1 2 3'\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '1 3 2'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 1') == '1 2 3'\nassert solution('3 2 1') == '1 2 3'\nassert solution('2 3 1') == '1 2 3'\nassert solution('2') == '1 2 3'\nassert solution('1') == '1 2 3'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n2 4 2 3 4\n''') == '39'\nprint(solution('''\n5 1\n1 0 1 1 1\n'''))\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4 5 6\\n4\") == \"7\"\nassert solution(\"7\\n1 2 3 4 5 6\\n4\") == \"4\"\nassert solution(\"1\\n1 2 3 4 5 6\\n4\") == \"2\"\nassert solution(\"1\\n1 2 3 4 5 6\\n9\") == \"0\"\nassert solution(\"1\\n1 2 3 4 5 6\\n7\") == \"0\""
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n2 4 2 3 4\n''') == '39', 'Test #1 fail'\nassert solution('''5 1\n1 0 1 1 1\n''') == '4', 'Test #2 fail'\nprint('All tests passed!')"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '39'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"39\"\nassert solution(\"5 1\") == \"4\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '39'\nassert solution('5 1') == '4'\nassert solution('20 2') == '17'\n\n'''\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '39', \"Wrong!\"\nassert solution('5 1') == '4', \"Wrong!\""
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '39'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\nassert solution('5 1\\n1 0 1 1 1') == '4'\nassert solution('5 5\\n0 0 0 0 0') == '0'\nassert solution('5 2\\n2 3 4') == '2'"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"10\"\nassert solution(\"5 3 4 2 1\") == \"4\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"1 1 2\"\nassert solution(\"4 6\") == \"1 2 3\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 2 3'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 1 2'\nassert solution('5 2') == '1 1 2'\nassert solution('6 8') == '1 1 2'\nassert solution('13 16') == '1 1 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\nxx.\nxxx''') == '1 1 2'\nassert solution('''4 4\nxx.xxx\nxx.xxx\nxx.xxx\nxx.xxx''') == '1 1 2'\nassert solution('''4 4\nxx.xxx\nxx.xxx\nxx.xxx\nxx.xxx''') == '1 1 2'"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 2 3'\nassert solution('5 5') == '1 2 3 4'\nassert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 2 3'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_data.split('\\n')) == result.split('\\n')\n'''\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"1 1 2\"\nassert solution(\"4 6\") == \"1 1 2\"\n\"\"\""
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\nxx.\nxxx\n...\n''') == '1 1 2'\nassert solution('''\n4 6\nxx....\nxx.xxx\n...xxx\n...xxx\n''') == '1 2 3'\n\n'''\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2 1 3'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n...x\nxx.x\n...x''') == '1 1 3'\nassert solution('''4 6\nxx....\nxx.xxx\n...xxx\n...xxx''') == '2 4 2'\nprint(solution(input()))\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"1\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 1 2\n1 2 1\n0 2 0\n0 1 0\n\"\"\") == \"indistinguishable\"\nassert solution(\"\"\"\n2 0 1\n1 1 1\n0 0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\nassert solution('0 0 0') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 1 2') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == \"indistinguishable\"\nassert solution('2 0 1') == \"0\""
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == \"indistinguishable\"\nassert solution('2 0 1') == \"0\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1 2') == 'indistinguishable'\nassert solution('3 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1 2\n1 2 1\n0 2 0\n0 1 0\n''') == 'indistinguishable'\nassert solution('''\n2 0 1\n1 1 1\n0 0 0\n''') == '0'"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0') == '-1'\nassert solution('1') == '1111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0110\\n1001') == '1111'\nassert solution('0\\n1') == '-1'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0110') == '1111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"1010\") == \"-1\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('0000') == '-1'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10000\") == \"+0000\"\nassert solution(\"1111\") == \"+000-\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"+-1+\"\nassert solution(\"0\") == \"+-0+\"\nassert solution(\"-1\") == \"-+1\"\nassert solution(\"-1\") == \"-+1\"\nassert solution(\"+1\") == \"+1-\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0+1\"\nassert solution(\"11\") == \"0-1+1\"\nassert solution(\"111\") == \"0-1+1+1-1\"\nassert solution(\"1111\") == \"0+1+1+1+1-1\"\nassert solution(\"1010\") == \"0+1+0+1+0-1\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"+1\"\nassert solution(\"111\") == \"+11\"\nassert solution(\"-1\") == \"-1\"\nassert solution(\"-1-1\") == \"-1-\"\nassert solution(\"11-\") == \"11-\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '+1'\nassert solution('11\\n') == '+0-1'\nassert solution('1111\\n') == '+1-0-1'\nassert solution('-1\\n') == '-1'\nassert solution('-1011\\n') == '-1010-1'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-', solution('1111')\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6 4') == '11'\nassert solution('10 20 10') == '45'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 8 3 2') == '9'\nassert solution('5 5 5 5') == '8'\nassert solution('5 6 6 6') == '7'"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 8 3 2') == '9'\nassert solution('1 2') == '2'\nassert solution('1') == '1'\nassert solution('1 1') == '2'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '10'\nassert solution('''\n1 1 1 1\n1 2\n2 1 1 1\n2 2\n''') == '3'\nassert solution('''\n3 4 4 4\n3 4\n4 4 4\n1 2 3 2\n1 4 3 4\n1 2 3 4\n''') == '7'\nassert solution('''\n3 4 4 4\n3 4\n4 4 4\n1 2 3 2\n1 4 3 4\n1 2 3 4\n''') == '10'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 8 3 2') == \"9\"\nassert solution('1 2') == \"2\"\nassert solution('7 3 4') == \"10\"\nassert solution('5 6') == \"9\"\nassert solution('1 3 2') == \"2\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''2 2\n1\n1 2\n''') == '2'\nassert solution('''2 1 1 1\n1 2''') == '2'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n') == '9'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n') == '9'"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n\"\"\") == \"9\"\nassert solution(\"\"\"\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n\"\"\") == \"9\"\nassert solution(\"\"\"\n2 1 1 1\n2 2\n1\n1\n1 2 1\nSample Output 2:\n\"\"\") == \"\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 8 3 2') == \"9\"\nassert solution('1 2') == \"1\"\nassert solution('1 2 3 4') == \"5\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 7 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == \"9\"\n\nassert solution('''\n2 1 1 1\n2 2\n1\n1\n1 2 1\nSample Output 3:\n2\n''') == \"2\"\n\nassert solution('''\n4 1 1 1\n1\n1\n1\n1\n''') == \"4\"\n\nassert solution('''\n5 2 2 1\n2\n2\n2\n2\n1\n''') == \"2\""
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010''') == '2'\n\nassert solution('''3 3 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 3:\n7\n\nassert solution('''3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 4:\n-1''') == '-1'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3 1\n2 2\n1 1 R\n010\n000\n000\n''') == '2', 'Should be 2'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 4 2') == '7'"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '7'\n\"\"\"\n\nn, m, k = [int(x) for x in stdin.strip().split(' ')]\n\nfor i in range(k):\n    x, y, c = [int(x) for x in stdin.strip().split(' ')]\n    m = x\n    n = y\n    \n    def write(w, h):\n        if w < 0:\n            w += h\n        if w > h:\n            w = h\n        if w > h:\n            w -= h\n        w = w // 2\n        for i in range(w):\n            print('L', end='')\n        for i in range(w):\n            print('U', end='')\n        for i in range(w):\n            print('R', end='')\n        for i in range(w):\n            print('D', end='')\n        print()\n    if m == 0:\n        write(n, m)\n    else:\n        if c == 'R':\n            write(n, m)\n        else:\n            write(m, n)\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3 1\n2 2\n1 1 R\n010\n000\n000\n''') == '2'\nassert solution('''\n3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n''') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000') == \"2\"\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == \"7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000') == \"2\"\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == \"7\""
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010\n000\n000''') == '2'\nassert solution('''3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 3:\n7\n''') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010\n000\n000\n''') == \"2\"\nassert solution('''3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n''') == \"7\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '4'\nprint(solution(input()))\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4'\nassert solution('8') == '4'"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '4'"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n1 2\\n2 1') == '1'\nassert solution('1\\n3\\n1 1\\n3 2') == '0'\nassert solution('1\\n2\\n2 3\\n3 4') == '1'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n2 2 1 2 3\n''') == '2'\nassert solution('''\n8\n1 2 4 1 1 2 5 1\n''') == '4'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '4'\nprint('All tests passed!')"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n') == '1'\nassert solution('5\\n2 2 1 2 3') == '2'\nassert solution('8\\n1 2 4 1 1 2 5 1') == '4'\n\nprint('All test cases passed')\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n2 2 1 2 3\n''') == '2'\nassert solution('''8\n1 2 4 1 1 2 5 1\n''') == '4'''\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 2 1 2 3\n''') == '2', \"Sample Test #1 Failed\"\nassert solution('''\n8\n1 2 4 1 1 2 5 1\n''') == '4', \"Sample Test #2 Failed\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == 'NE'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n') == '3'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3') == 'NE'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4') == '1'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\nD 1 4') == '2'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\nD 1 4') == '3'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\nD 1 4\\nP 3\\nD 4 4\\nD 5 6') == '2'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"NE\"\nassert solution(\"\"\"6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\nD 5 5\nP 5\n\"\"\") == \"1 2 3\"\n\"\"\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\nD 4 2\\nD 1 3\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n\") == \"3\"\nassert solution(\"1\\n2\\nD 4 2\\nD 2 4\\nD 5 6\\nD 6 2\\nD 2 4\\nP 4\\nD 6 2\\nP 4\\n\") == \"3\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n\") == \"NE\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n\") == \"3\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"NE\"\n\nassert solution(\"\"\"6\nD 6 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"2 3\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == \"1\"\nassert solution('5') == \"1\"\nassert solution('4') == \"1\"\nassert solution('3') == \"1\"\nassert solution('2') == \"2\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"1\\n3\\nNE\"\nassert solution(\"6\\nD 5 3\\nD 3 5\\nD 6 6\\nP 3\\nD 4 2\\nP 4\") == \"1\\n1\\n2\\n3\\n2\\n3\\n\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == 'NE'\nassert solution('''6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == '1'\nassert solution('''6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == 'NE'"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\n\nassert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''2 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '5'\nassert solution('''2 2 1 10\n0 0\n1 4\n3 2\n''') == '4'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 1 10\") == '2'\nassert solution(\"3 3 5 6\") == '5'"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == '2'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5 2 1') == '2'\nassert solution('3 4 5 6') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''\n3 3 3 3\n0 0 0\n0 0 2\n1 1 1\n''') == '6'\nassert solution('''\n2 2 2 2\n0 0\n0 0\n1 1\n''') == '1'\nassert solution('''\n3 3 3 3\n0 0 0\n0 0 2\n1 1 1\n''') == '4'\n\nprint('All Tests Passed')"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1 10\") == \"2\"\nassert solution(\"3 2 5 6\") == \"5\"\nassert solution(\"1 1 1 6\") == \"6\"\nassert solution(\"1 1 1 6\") == \"6\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == \"2\"\nassert solution(\"3 5 1 7\\n1 1 6\\n1 2 2\\n2 3 3\\n3 4 4\\n4 5 5\\n5 6 6\") == \"7\"\nassert solution(\"2 2 3\\n2 2 3\\n2 2 3\\n1 2 2\\n1 2 2\\n1 1 2\\n2 1 2\\n2 1 2\\n1 1 2\\n2 1 2\\n2 2 2\\n1 2 2\\n1 1 2\\n1 2 2\\n2 2 2\\n1 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n2 2 2\\n2 2 2\\n2 1 2\\n1 1 2\\n1 2 2\\n1 1 2\\n2 1 2\\n2 1 2\\n2 2 2\\n2 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 2 2\\n1 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n2 1 2\\n2 2 2\\n1 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n2 2 2\\n1 2 2\\n2 1 2\\n1 2 2\\n2 1 2\\n2 1 2\\n1 2 2\\n1 1 2\\n1 2 2\\n2 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 1 2\\n2 1 2\\n1 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 1 2\\n2 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 1 2\\n1 1 2\\n1 2 2\\n2 1 2\\n2 2 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3 3 1 10\\n0 0\\n1 4\\n3 2'\n) == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 2 1 10\\n0 0\\n1 4\\n3 2\\n\") == \"2\"\nassert solution(\n    \"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\\n\") == \"5\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\nassert solution('''5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n''') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n-1.4 0.0 1.4\\n0.4 -1.0 0.0 -1.4\\n-0.1 -0.25 -0.5 -1.2 0.0 0.9\\n0.2 0.5 0.5\\n') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nprint(solution('''4\n-3.2 -6.6 2.5\n4.2 -6.9 3.4\n-2.3 6.5 -5.2\n6.8 4.9 -5.3'''))\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2.0000000000'\nassert solution('5') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"2.0000000000\"\nassert solution(\"2\") == \"1.90000000000\"\nassert solution(\"3\") == \"2.0000000000\""
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n\"\"\") == \"2.0000000000\"\nassert solution(\"\"\"\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n\"\"\") == \"2.0000000000\"\nprint(solution(input))\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\nprint(solution('''\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n'''))"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([1, 9, 5]) == '1'\nassert solution([1, 100, 10]) == '9'\nassert solution([10, 5, 3]) == '11'\nassert solution([10, 15, 5]) == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"5\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([1, 9, 5]) == \"1\"\nassert solution([1, 100, 10]) == \"9\"\nassert solution([1, 100, 100]) == \"19\"\nassert solution([1, 1, 1]) == \"3\"\nassert solution([1, 10, 5]) == \"3\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\""
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\nassert solution('4 3 2 1') == '4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\nassert solution('4 3 2 1') == '4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == '1'\n\nSample Input 3:\n4 5\n4 1 2 3 4\n4 3 2 1\nSample Output 3:\n8\n3 3 2 3 1 3 2 1\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('1') == '1'\nassert solution('1 2 3 4') == '4 4 2 4'\nassert solution('4 5 3 2 1') == '4 4 2 4 1'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n1 2\n''') == '1 1'\nassert solution('''\n4 5\n4 1 2 4 4\n4 3 2 1\n''') == '7 4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n\"\"\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1\n1\n1\nSample Input 3:\n5 5\n5 1 2 4 5\n5 3 2 1\nSample Output 3:\n1\n3 4 1 5 2\n\n''') == '5 2 1'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1\n1\n1\n''') == '1'\n\nassert solution('''\n4 5\n4 1 2 4 4\n4 3 2 1\n''') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"4 5\") == \"7\"\nassert solution(\"4 3 2 1\") == \"4 4 2 4 4 1 4\""
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''2 10 3 2\n1 2 3 4''') == '4'\nassert solution(\n'''10 10 5 0\n1 2 3 4 5 6 7 8 9 10''') == '18'\nassert solution(\n'''2 10 3 2\n2 6 8 5''') == '2'\nassert solution(\n'''10 10 5 0\n1 2 3 4 5 6 7 8 9 10''') == '24'\nassert solution(\n'''2 10 3 2\n2 8 7 6''') == '18'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 10 3 2''') == '4'\nassert solution('''10 10 5 0''') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 10 3 2\n10 10 5 0''') == \"4\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\nassert solution('30 30 30 30 30') == '30'"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 10 3 2\n''') == '4'\n\nassert solution('''\n10 10 5 0\n''') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\nassert solution(\"1 100 100 1\") == \"1\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\nassert solution(\"100 100 3 4\") == \"200\"\nassert solution(\"10 10 5 100\") == \"100\"\nassert solution(\"100 100 100 100\") == \"200\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '2 1 20'\n    ) == '10'\n\nassert solution(\n    '6 100 9294'\n    ) == '111'\n\nassert solution(\n    '4 1 5'\n    ) == '1'\n\nassert solution(\n    '5 1 5'\n    ) == '1'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1 20\n0123456789\n''') == '10'\nassert solution('''\n6 100 9294\n23689\n''') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 1 20\n0123456789''') == '10'\nassert solution('''6 100 9294''') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 1 20\"\n) == \"10\"\nassert solution(\n    \"6 100 9294\"\n) == \"111\"\nassert solution(\n    \"5 9 200\"\n) == \"100\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(f'{2 1 20} {23689}') == '111'\nassert solution(f'{6 100 9294} {23689}') == '1'"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1 20\n0123456789\n''') == '10'\n\nassert solution('''\n6 100 9294\n23689\n''') == '111'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '1.50000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '1.50000 2.66667'\nassert solution('5 2') == '1.50000 3.66667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n1 R 3\\n2 S 4\\n2 R 2\\n3 R 2\\n4 R 2\\n5 S 2') == '1.500000 2.666667'\nassert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 R 2\\n5 S 2') == '1.500000 2.666667'\nprint('all tests passed')\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '1.50000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 2.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\nassert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\nassert solution('0 0') == '0.0 0.0'\nassert solution('1 1') == '1.0 1.0'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 2.666667'\nassert solution('1 1 1\\n1 R 2\\n2 S 1\\n3 S 1\\n2 R 1\\n1 R 2\\n4 S 1\\n3 R 1') == '1.000000 1.500000'\nassert solution('1 1 1\\n1 R 2\\n2 S 1\\n3 S 1\\n2 R 1\\n1 R 2\\n4 S 1\\n3 R 1') == '1.000000 1.000000'\nassert solution('1 1 1\\n1 R 2\\n2 S 1\\n3 S 1\\n2 R 1\\n1 R 2\\n4 S 1\\n3 R 1') == '1.000000 1.000000'\nassert solution('1 1 1\\n1 R 2\\n2 S 1\\n3 S 1\\n2 R 1\\n1 R 2\\n4 S 1\\n3 R 1') == '1.000000 1.000000'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1.5 2.5\"\nassert solution(\"5 2\") == \"0.5\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('4 2') == '1.500000 1.666667'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 6\\n101010\\n111001\\n101001\\n') == '3'\nassert solution('4 5\\n10010\\n01010\\n10101\\n01001\\n') == '3'\n\nIf your solution is correct, it will not be marked as wrong - it will just print the output of your solution.\n\nWhile debugging a program Mirko noticed that a bug in the program may be linked with the existence of so called square killers in the program memory. The program memory is a matrix composed of $R$ rows and $C$ columns consisting only of zeroes and ones. A square killer is a square submatrix in memory, consisting of more than one character, that, when rotated $180$ degrees looks exactly the same. For example, the following matrix contains $3$ square killers:\n\n101010     ....10     ......      101...\n111001     ....01     ...00.      111...\n101001     ......     ...00.      101...\n\nmemory      killer      killer      killer\n\nMirko is wondering if there is a connection between the size of the largest square killer and the bug in the program. Help Mirko by writing a program that, given the layout of the memory, outputs the size of the largest square killer. The size of the square killer is the number of rows (or columns) that the killer consists of. In the example above the killer sizes are $2$, $2$ and $3$, respectively.\n\n-----Input-----\nThe first will contain two integers, $R$ and $C$, smaller than or equal to $300$. The next $R$ lines will each contain $C$ characters (\u20180\u2019 or \u20181\u2019) with no spaces.\n\n-----Output-----\nOutput the size of the largest killer on a single line, or output $-1$ if there are no square killers.\n\n-----Examples-----\nSample Input 1:\n3 6\n101010\n111001\n101001\nSample Output 1:\n3\n\nSample Input 2:\n4 5\n10010\n01010\n10101\n01001\nSample Output 2:\n3\n\nSample Input 3:\n4 6\n10100\n1100\n1011\n1110\n1010\n1100\nSample Output 3:\n-1"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == -1\nassert solution(\"\\n\") == -1\nassert solution(\"\\n\\n\") == -1\nassert solution(\"\\n\\n\\n\") == -1\nassert solution(\"\\n\\n\\n\\n\") == -1\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\nassert solution(sys.stdin.read()) == \"3\"\n\n\"\"\"\n\nfrom itertools import combinations\n\nR,C = [int(i) for i in input().split()]\narray = [[int(i) for i in input().split()] for _ in range(R)]\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"7 7\") == \"7\"\nprint(solution(input()))\n'''"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"3\""
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == -1\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\nassert solution(\"101010\") == 3\nassert solution(\"111001\") == 3\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 6') == \"3\"\nassert solution('4 5') == \"3\"\nassert solution('10010') == \"1\"\nassert solution('01010') == \"2\"\nassert solution('10101') == \"2\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"3\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 6') == '3'\nassert solution('4 5') == '3'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == \"-3 -1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\\n\") == \"3 4\\n3 -1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\n\"\"\"\n\nimport math\n\nstdin_file = 'input.txt'\n\n\"\"\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\n0 0\n0 1\n1 0\n0 -1\n-1 0\"\"\") == \"3 -1\"\nassert solution(\"\"\"4\n2 4\n6 -1\n3 5\n-1 -1\"\"\") == \"3 4\""
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"-3 -1\"\nassert solution(\"4\") == \"3 4\"\nassert solution(\"3\") == \"3 -1\"\n\"\"\"\nfrom itertools import combinations, product\nfrom math import factorial"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == '-3 -1'\nprint('all tests passed')\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1\\n3 1'\nassert solution('''\n4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4\\n3 -1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0 0\"\nassert solution(\"5\") == \"-3 -1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0 0\\n0 1\\n1 0\\n0 -1') == '-3 -1'\nassert solution('5\\n2 4\\n6 -1\\n3 5\\n-1 -1') == '3 4'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 6 5 45 20\n0 0\n2 0\n1 1.5\n''') == '2 5.086781'\nassert solution('''\n3 0.25 2 45 20\n0 0\n2 0\n1 1.5\n''') == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2 12.715255\"\nassert solution(\"1 2\\n0 0\\n2 0\\n1 1.5\") == \"1 12.715255\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"1 2\"\nassert solution(\"3 0\") == \"1 2\"\nassert solution(\"3 1.5\") == \"1 4\"\nassert solution(\"3 0.25\") == \"1 4\"\nassert solution(\"3 4\") == \"1 2\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4 9.787632'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6 5 45 20') == '2 5.086781'\nassert solution('3 0.25 2 45 20') == '1 12.715255'\nassert solution('3 0.5 2 45 20') == '1 12.152912'\nassert solution('3 0.25 5 45 20') == '1 12.542714'\nassert solution('3 0.5 5 45 20') == '1 12.563823'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2 10.083336'"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n0 0\n2 0\n1 1.5\n''') == '2 5.086781'\nassert solution('''2\n0 0\n2 0\n1 1.5\n''') == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n0 0\n2 0\n1 1.5\n3 4 5''') == '2 1.5'\n\nassert solution('''3\n0 0\n2 0\n1 1.5''') == '1 1.5'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5 1 0.5 2') == '1 10.28'\nassert solution('4 5 1 2 0.5') == '2 1.5'\nassert solution('3 3 1 2 0.5') == '1 5.581589'\nassert solution('5 2 2 2 2') == '4 3.0'\nassert solution('0 0 0 0 0') == '0 0 0 0 0'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\nassert solution(\"3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\") == \"1 12.715255\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\") == \"8\"\nassert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\") == \"1\""
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '8'\nassert solution('4') == '1'"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\\n') == '8'\nassert solution('4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\\n') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '1\\n'\n    '0 0 1 0\\n'\n    '0 0 0 1\\n'\n    '1 0 1 1\\n'\n    '0 1 1 1\\n'\n    '0 0 1 1\\n'\n    '1 0 0 1\\n'\n    ) == '8'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\nassert solution('''\n10\n5 5 5 5 5 5 5 5 5 5\n4 4 4 4 4 4 4 4 4 4\n3 3 3 3 3 3 3 3 3 3\n1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '288'\nassert solution('''\n10\n5 5 5 5 5 5 5 5 5 5\n4 4 4 4 4 4 4 4 4 4\n3 3 3 3 3 3 3 3 3 3\n1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '288'\nassert solution('''\n10\n5 5 5 5 5 5 5 5 5 5\n4 4 4 4 4 4 4 4 4 4\n3 3 3 3 3 3 3 3 3 3\n1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '468'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8', \"T1\"\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1', \"T2\"\nassert solution('''\n7\n9 0 2 2\n-1 3 2 2\n0 4 5 2\n-3 4 1 4\n-5 0 5 1\n-2 2 6 3\n''') == '2', \"T3\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '8'\nassert solution('4') == '1'"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n0 1 1\\n1 0 1 1\\n0 1 1 1\") == \"8\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '8', \"Wrong answer\"\nassert solution('4') == '1', \"Wrong answer\"\nassert solution('5 1 7 1') == '8', \"Wrong answer\"\nassert solution('1 1 5 1') == '1', \"Wrong answer\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8\n10\n10\n9\n12\n13\n15\n18''') == 'impossible'\n\nassert solution('''1\n1\n1\n1\n1''') == '1 1 1'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n2\n''') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"7\") == \"4 3\"\nassert solution(\"10\") == \"impossible\""
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"4 3\"\nassert solution(\"10\") == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == 'impossible'\nassert solution('4') == '4 3'\nassert solution('3') == '4 3'\nassert solution('8') == '4 3'\nassert solution('9') == 'impossible'"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'impossible'\nassert solution('7') == 'impossible'\nassert solution('10') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('20') == 'impossible'\nassert solution('10') == '4 3'\nassert solution('17') == '4 4'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'impossible'\nassert solution('7') == 'impossible'\nassert solution('10') == '4 3'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '16'\nassert solution('2') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n2\n4\n1\n4''') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"16\"\nassert solution(\"4\") == \"109\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1\n3\n''') == '16'\n\nassert solution('''\n2\n2\n4\n''') == '109'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '9254'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n''') == '109', 'Wrong output'\n\nassert solution('''\n5\n1\n5\n2\n3\n4\n''') == '54', 'Wrong output'\n\nprint('Tests done')"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n4\\n') == '16'\n\nassert solution('4\\n2\\n4\\n') == '109'\n\nassert solution('5\\n1\\n9\\n') == '153'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == \"3\"\nassert solution(sample_input_2) == \"5 1 1 2 2\"\nassert solution(my_input) == \"5 1 1 2 2\""
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"4 3\") == \"1 2 1\"\nassert solution(\"4 3\") == \"1 2 1\"\n\nprint(solution(input()))"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n5 1\\n1 2\\n1 2\\n1 2') == '3'\nassert solution('4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5'"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\nSample Input 3:\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\nSample Output 3:\n4\n1 3 1\n2 3 2\n4 1 0\n2 4 1\n3 1 0\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5 1 1 1 1'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5 1 1 1 2'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n') == '3\\n1 2 1\\n1 2 2'\nassert solution('4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5\\n1 3 1\\n2 3 2\\n4 1 0'\nassert solution('10 3\\n16 10 4 5 3 3\\n9 9 9 9 9\\n1 1\\n') == '8\\n1 1 1\\n1 2 1\\n1 2 2\\n1 2 3\\n1 2 4\\n1 3 1\\n1 3 2\\n1 3 3\\n1 3 4\\n1 4 1\\n1 4 2\\n1 4 3'"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\nprint('All test cases passed')\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"4 3\") == \"4\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"5 3\") == \"3\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"4 3\") == \"5\"\nassert solution(\"10 3\") == \"10\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\nSample Output 2:\nimpossible''') == '1 2'\nassert solution('''2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\nSample Output 2:\n1 2''') == '1 2'"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('6 7') == '1 2 3'\nassert solution('0 1 1') == '1 2'\nassert solution('0 2 2') == '2 1'\nassert solution('3 2 3') == 'impossible'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"impossible\"\nassert solution(\"2 1\") == \"impossible\""
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('2 1') == '1'\nassert solution('10 3') == '10 2 3'\nassert solution('20 3') == 'impossible'\nassert solution('10 1 0') == '10'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1''') == '1 2'\nassert solution('''2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1''') == 'impossible'\nassert solution('''2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\nSample Output 2:\nimpossible\n''') == 'impossible'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\n\nassert solution('''\n2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\n''') == 'impossible'\n\nassert solution('''\n2 2\n2 5\n1 0 0\n3 2 0\n''') == '1 2'\n\nassert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\n\nassert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == 'impossible'"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\nassert solution('''\n2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\n''') == 'impossible'\nprint('All Tests Passed!')"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2 1\") == \"1 2\"\nassert solution(\"2 1\") == \"1 2\"\nassert solution(\"2 1\") == \"1 2\"\nassert solution(\"2 1\") == \"1 2\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('2 1') == 'impossible'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"10\") == \"1 2\"\nassert solution(\"2020\") == \"2 1\""
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\"\"\"\n\nX = int(input())"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('20') == '20 1'"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1 2'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"2 2\"\nassert solution(\"4\") == \"1 2 1\"\nassert solution(\"5\") == \"3 1\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5 2'\nassert solution('2020') == '2020 1'"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nprint('All test cases passed')\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n') == '3 2\\n'\nassert solution('4\\n') == '1 0\\n'\nassert solution('2\\n') == '1 1\\n'\nassert solution('1\\n') == '1 1\\n'\nassert solution('10\\n') == '1 1\\n'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'unique'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\nSample Output 3:\nambiguous\n''') == \"ambiguous\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies''') == \"impossible\",'simple'\nassert solution('''5\n5\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies''') == \"unique\",'small'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'impossible'\nassert solution('1\\n2\\n0') == 'unique'\nassert solution('2\\n1\\n0') == 'impossible'\nassert solution('3\\n3\\n0') == 'impossible'\n\nfor i in range(3, 101):\n    with open(f'input{i}.txt') as f:\n        lines = f.read().splitlines()\n        if len(lines)!= 1:\n            print(f'input{i}:')\n            print(''.join(map(str, lines)))\n            print(''.join(map(str, solution(*lines))))\n            print()\n\nimport os, sys, time\nfrom io import BytesIO\nfrom PIL import Image"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == 'impossible'\nassert solution('''\n3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\nassert solution('''\n2\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\nassert solution('''\n4\n3\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'impossible'\nassert solution('''\n4\n3\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'impossible'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == \"impossible\"\nassert solution('''4\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == \"unique\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    3\n    3\n    0 chocolate\n    1 icecream\n    2 cookies\n    3\n    chocolate\n    icecream\n    cookies\n''') == 'impossible'\nassert solution('''\n    3\n    4\n    0 chocolate\n    1 icecream\n    2 cookies\n    2 chocolate\n    3\n    chocolate\n    icecream\n    cookies\n''') == 'unique'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible'\n\nassert solution('''\n3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\n\nassert solution('''\n5\n6\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\n\nassert solution('''\n5\n2\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'impossible'\n\nassert solution('''\n5\n3\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == \"impossible\"\nassert solution('''\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == \"unique\"\nassert solution('''\n10\n0 cat\n1 chocolate\n2 coffee\n3 milk\n4 icecream\n5 dogs\n6 bread\n7 tomatoes\n8 tomatoes\n9 pizza\n10 pears\n11 cats\n12 chocolates\n13 icecream\n''') == \"ambiguous\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == \"impossible\"\nassert solution('4') == \"unique\"\nassert solution('4\\nchocolate\\ncookies\\nchocolate\\nicecream\\n') == \"unique\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\""
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    abc\n    abc\n    abc\n    abc\n    abcd\n    abcd\n    abcd\n    abcd\n    abc\n    abc\n    abc\n    abc\n    abc\n    \"\"\"\n) == \"3\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 0 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 0 10\n''') == '0'\nassert solution('''\n1 2 10\n''') == '1'\n'''\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 0 1\") == \"0\"\nassert solution(\"0 1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"2\""
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 0 10\n1 2 10''') == '1'"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n''') == '3 zoom out'\n\nassert solution('''\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n''') == '4 pan'\n\nassert solution('''\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n''') == '2 rotate'\n\nassert solution('''\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n''') == '3 pan'\n\nassert solution('''\n...........\n...........\n...........\n...........\n...........\n...........\n...........\n...........\n...........\n...........\n...........\n...........\n''') == '2 zoom in'"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............XX..............................................\n...........XXX..............................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\nSample Output 2:\n3 zoom out\n\"\"\") == \"3 zoom out\""
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('....XXXX....................................................') == \"1 pan\"\nassert solution('..............................................................................') == \"1 pan\"\nassert solution('.................................................................XXXX..............') == \"1 pan\"\nassert solution('...........................................................XXXX............................................') == \"1 pan\"\nassert solution('...........................................................XXXX.....................XXX............................................') == \"1 pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"...................................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \".............................................................."
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('....XXXX....................................................') == '1 pan'\nassert solution('............................................................') == '1 pan'\nassert solution('............................................................') == '1 pan'\nassert solution('............................................................') == '1 pan'\nassert solution('............................................................') == '1 pan'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"....XXXX....................................................\") == \"1 pan\"\nassert solution(\".......................X.........................................\") == \"3 zoom out\"\nassert solution(\".......................XX.........................................\") == \"2 zoom in\"\nassert solution(\"X....................XX.................XX.....................\") == \"1 pan\"\nassert solution(\"X....................XX.................XX.....................\") == \"3 zoom in\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 pan\\n') == '1 pan'\nassert solution('2 pan\\n') == '1 pan'\nassert solution('3 pan\\n') == '1 pan'\nassert solution('4 pan\\n') == '1 pan'\nassert solution('5 pan\\n') == '1 pan'"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 1:\n1 pan\n\nSample Output 2:\n3 zoom out\n\"\"\") == \"1 zoom out\"\n\nassert solution(\"\"\"\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 1:\n1 pan\n\nSample Output 2:\n3 zoom out\n\"\"\") == \"3 zoom out\""
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1  3  1  1  1  2  1  3  4  1  2  4  2  3  4  3  3  4  3  3  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8 20\n  apples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      ''') == 'apples are great!\\ncheck out our\\nfresh apples!'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''20 20\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++''') == '''+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++'''\n\nassert solution('''8 20\napples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      \n''') == '''apples are great!  \n                    \n                    \n                    \n                    \n                    \n                    \n check out our      \n fresh apples!      \n'''"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''8 20\napples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      ''') == 'apples are great!\\n\\n\\n\\n\\n\\n\\n\\ncheck out our\\nfresh apples!'\nprint('All test cases passed.')"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n+-+-+-+-+-+\n|A|A|A|A|\n+-+-+-+\n|B|B|B|\n+-+-+-+\n|C|C|C|\n+-+-+-+-+\n
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8 20\") == \"apples are great!\\n\"\nassert solution(\"7 7\") == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\"\nassert solution(\"3 1\") == \"w3\\n\""
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 20') == 'apples are great!\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\ncheck out our fresh apples!'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"abcd\"\nassert solution(\"7 7\") == \"abcdxyz\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"8 20\n + +++ +++ +\n+ + +++ + +\n+ + +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"*\"*3 + \"3\" + \"*\"*3 + \"\\n\"*2 + \"*\"*5\nassert solution(\"7 7\") == \"*\\n*\\n*\\n*\\n*\\n*\\n*\\n\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 20') == 'apples are great!\\n'\nassert solution('7 7') == '+++++++\\n' +\n                            '+ +++ +\\n' +\n                            '+ + +++\\n' +\n                            '+ +++ +\\n' +\n                            '+ +++ +\\n' +\n                            '+++++++'"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''HH\nH?''') == '1.5'\n\nassert solution('''THH\nTHT''') == '2.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H??\") == \"1.5\"\n\"\"\""
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\n''') == '3.5'\nassert solution(\n'''\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\n''') == '3.2'\nassert solution(\n'''\n?HH\n?HH\n?HH\n?HH\n?HH\n?HH\n?HH\n?HH\n?HH\n?HH\n''') == '3.0'\nassert solution(\n'''\n?H?\n?H?\n?H?\n?H?\n?H?\n?H?\n?H?\n?H?\n?H?\n?H?\n''') == '2.0'\nassert solution(\n'''\nHTH\nHTH\n?HTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\n''') == '4.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('HHHHHHHHHH') == '2.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''H?\n        H?''') == '1.5'\nassert solution('''HH?\n        HH''') == '1.5'\nassert solution('''TT?\n        TT''') == '2.0'\nassert solution('''T?\n        T''') == '1.0'\nassert solution('''?\n        ''') == '0.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"HTH\") == \"2.0\"\nassert solution(\"H\") == \"1.5\"\nassert solution(\"???\") == \"1.5\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('HHHHHHHHHHHHHH') == \"1.5\"\nassert solution('HTTTTTTTTTT') == \"4.0\""
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n\"\"\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('TTTTTT') == '5.0'\nassert solution('?TTT') == '2.5'\n\n--Python--\nfrom typing import List"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n11111\\n11111\\n11111\\n11111') == '1'\nassert solution('4\\n1111\\n1111\\n1111\\n1111') == '6'\nassert solution('10\\n
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0001\n0001\n0011\n1110\n''') == '1'\nassert solution('''\n4\n1111\n1111\n1111\n1111\n''') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '4'\nassert solution('6') == '4'\nassert solution('7') == '4'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '2'\nassert solution('16') == '2'\nassert solution('17') == '5'\nassert solution('32') == '4'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('10') == '2'\nassert solution('16') == '5'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == '0'"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nprint('\"Run\" is good. Great job!')"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n0001\\n0001\\n0011\\n1111') == '1'\nassert solution('4\\n0001\\n0001\\n0011\\n1110') == '6'\nassert solution('4\\n1111\\n1111\\n1111\\n1111') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '1111'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\nh 1 4 1\\nh 10 2 2\\nv 1 10 1\\nv 5 10 3') == '2'\nassert solution('4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3') == '4'"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\\n') == '2'\nassert solution('4\\nh 1 1 1\\nv 2 2 2\\nh 10 1 2\\nv 11 1 3\\n') == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nh 1 4 1\\nh 10 2 2\\nv 1 10 1\\nv 5 10 3\\n') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\nassert solution(['''\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''']) == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''h 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3''') == '4'\nprint(solution('''h 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3'''))\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\nassert solution('''\n4\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\n''') == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\nassert solution('''4\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\n''') == '4'"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 3') == '4'\nassert solution('4 6') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '4'\nassert solution('5 3') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 2\n1 2 3 0\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\nSample Output 3:\n-1\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n\"\"\") == \"4\""
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 5 4 0') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 4') == '-1'\nassert solution('2 5') == '4'\nassert solution('3 6 7') == '4'\nassert solution('2 1 0 0') == '2'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '2'\nassert solution('3 3') == '4'\nassert solution('7 6') == '-1'\nassert solution('2 4') == '2'\nassert solution('2 5') == '2'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4\\n1 0 2 0\\n3 5 4 0') == '2'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n') == '4'\nprint(solution(input))\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\"\nassert solution(\"2 4\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\") == \"4\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\") == \"6\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 3\\n') == '2'\nassert solution('8\\n1 2 1 3 1 3 1 2\\n') == '4'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n1 2 3 3 4 2') == '2'\nassert solution('8\\n1 2 1 3 1 3 1 2') == '4'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\nassert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == '2'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"4\""
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6\n1 2 3 3 4 2\n''') == '2'\nassert solution('''8\n1 2 1 3 1 3 1 2\n''') == '4'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6\n1 2 3 3 4 2\n''') == '2'\n\nassert solution('''8\n1 2 1 3 1 3 1 2\n''') == '4'\n\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1\n''') == '1'\n\nassert solution('''15\n
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 3 4 2') == '2'\nassert solution('9\\n1 2 1 3 1 3 1 2') == '4'\nprint('\"Run\" is good. It is not the only way to get decent results.')"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '4'\nassert solution('''\n3 3 3\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''') == '5'\nassert solution('''\n4 4 4\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''') == '4'\nassert solution('''\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''') == '0'"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n\"\"\") == \"4\"\nprint(\"solution = \", solution(stdin))"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '4'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2') == '4\\n0\\n'"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 2 2\") == \"4\""
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2') == '4'\n\n---Using PrettyPrint---\n\n>>> from io import StringIO\n>>> import sys\n>>> sys.stdin = StringIO('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''')\n>>> solution()\n4\n>>> sys.stdin = StringIO('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''')\n2\n>>> solution()\n2\n\n---Using PrettyPrint---\n\n>>> from io import StringIO\n>>> import sys\n>>> sys.stdin = StringIO('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''')\n>>> solution()\n4\n>>> sys.stdin = StringIO('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''')\n2\n>>> solution()\n2\n\n'''\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 2 2\") == \"4\""
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2\") == \"4\\n0\\n\"\nassert solution(\"3 3 3\\n1 1 1\\n2 2 2\\n2 2 2 1\\n1 1 1 2\") == \"4\\n2\\n\""
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '4'\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''') == '2'\nassert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '0'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == 'impossible'\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == '1'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == '1'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 1\n1 0 1\n1 1 0\n1 1 1''') == '2'\nassert solution('''4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2''') == 'impossible'\nprint('All tests passed')\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '1'\nassert solution('4 3') == '2'\nassert solution('4 2') == 'impossible'"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n0 0 1\n1 0 0 1\n0 1 0 0\n2\n3\n4\n0 0 1 1''') == 'impossible'\nassert solution('''4\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n2\n1\n4\n0 0 1 1''') == '3'\nassert solution('''4\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n2\n1\n4\n0 0 1 1''') == 'impossible'\nassert solution('''4\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n2\n1\n4\n0 0 1 1''') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == '1'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == '1'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == 'impossible'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == '2'\nassert solution('6 3\\n0 0 1 1 2 2\\n1 0 0 1 2 2\\n0 1 1 0 0\\n1 0 0 1 2 2\\n0 2 1 1 0\\n0 0 0 1 1\\n0 1 2 2 0\\n1 0 0 1 1\\n1 2 1 2 0\\n2 0 0 0 1\\n2 2 1 1 0') == '2'\nassert solution('6 4\\n0 0 1 1 2 2\\n1 0 0 1 2 2\\n0 1 1 0 0\\n1 0 0 1 2 2\\n0 2 1 1 0\\n0 0 0 1 1\\n0 1 2 2 0\\n1 0 0 1 1\\n1 2 1 2 0\\n2 0 0 0 1\\n2 2 1 1 0') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == \"impossible\"\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == \"2\"\nassert solution('2 2\\n0 1\\n0 1') == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == '1'\nassert solution('''5 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == 'impossible'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"35\"\nassert solution(\"2\") == \"18\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4') == '18'\nassert solution('6 2') == '1'\nassert solution('100 3') == '2'\nassert solution('100000 3') == '1'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == \"35\"\n\nassert solution('''\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n''') == \"8\"\n\nassert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == \"18\"\n\nassert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == \"2\"\n\nassert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == \"1\""
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 2 3 4') == '1'\nassert solution('10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7') == '18'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n\"\"\") == \"35\"\nassert solution(\"\"\"\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n1 1 2 1\\n3') == '35'\nassert solution('10 3\\n2 1 2 1\\n3') == '18'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(t_s) == t_o"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == '35'\n\nassert solution('''10 3\n2 4\n2\n0 7\n''') == '18'\n\nassert solution('''12 5\n5 4\n5\n0 8\n2 6\n7 7\n''') == '22'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5') == '10'\nassert solution('10 4') == '15'\nassert solution('10 5') == '10'\nassert solution('10 2') == '0'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == '35', \"First\"\nassert solution('''\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n''') == '8', \"Second\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '0 1 3 4 5'"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1\n2\n3\n4\n''') == '0 1 3 6'\nassert solution('''\n5\n3\n2\n4\n1\n5\n''') == '0 1 2 4 6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6\\n'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1\n2\n3\n4\n''') == '0 1 3 6'\n\nassert solution('''\n5\n3\n2\n4\n1\n5\n''') == '0 1 2 4 6'\n\nassert solution('''\n7\n3\n2\n4\n1\n5\n6\n''') == '0 1 2 3 4 6 7'\n\nassert solution('''\n20\n6\n10\n7\n2\n3\n5\n8\n12\n16\n18\n19\n''') == '0 1 2 3 5 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 1001\n''')\n\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '0'\nassert solution('5') == '1'\n\"\"\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4') == '0\\n1\\n3\\n6'\nassert solution('5\\n3\\n2\\n4\\n1\\n5') == '0\\n1\\n2\\n4\\n6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n3\n2\n4\n1\n5''') == '0 1 3 2 4 5'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1\n2\n3\n4\n''') == '0 1 3 6'\n\nassert solution('''\n5\n3\n2\n4\n1\n5\n''') == '0 1 2 4 6'\n\n\"\"\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4\n1 3 2 2\n1 1 3 2\n2 4 7 3\n3 3 5 3\n\"\"\") == \"2 4 1 3\"\nassert solution(\"\"\"4\n0 0 1 1\n1 2 0 3\n2 2 3 3\n4 0 3 1\n\"\"\") == \"4 3 1 2\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4 3 1 2'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 3 2\"\nassert solution(\"5\") == \"1 3 2 3\"\nassert solution(\"6\") == \"1 3 2 3 3\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n\") == \"4 3 1 2\"\nassert solution(\"1\\n4 5 6 5\\n1 2 3 4\\n1 5 6 4\\n2 4 5 6\\n3 6 6 4\\n4 6 5 6\\n5 5 5 5\\n\") == \"1 2 3 4\""
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n0 0 1 1\n1 2 0 3\n2 2 3 3\n4 0 3 1''') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '4 3 1 2'\nassert solution('4') == '2 4 1 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '2 4 1 3'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1 3 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1') == '4 3 1 2'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n') == '4 3 1 2'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n0 0 1 2\n1 2 0 3\n2 2 3 3\n4 0 3 1\n''') == '2 4 1 3'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\nprint(solution.__doc__)\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\", solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\")\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n\"\"\"\n\nimport sys\nimport random"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'Theta wins'\n\n\"\"\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\nSample Output 1:\nTheta wins\n\nSample Input 2:\n89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\nSample Output 2:\nTheta loses''') == 'Theta loses'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'charlatan'\nassert solution('2 1') == 'truther'\n\"\"\""
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n1 not charlatan 1\n1 not charlatan 1\n''') == 'truther'\nassert solution('''\n2 1\n1 and fabulist 1 fabulist 2\n''') == 'fabulist'\nassert solution('''\n3 1\n1 or fabulist 1 fabulist 2\n''') == 'truther'\n\nimport sys\nfrom typing import Tuple\n\nfrom utils import *\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n1 not fabulist 1\n''') == 'truther'\nassert solution('''\n2 1\n1 not charlatan 1\n''') == 'charlatan'\nassert solution('''\n2 1\n1 and fabulist 1\n''') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'truther'\nassert solution('1 2') == 'truther'\nassert solution('1 2') == 'truther'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\nassert solution('1 3\\n1 and not 1 not 1') == 'truther'\nassert solution('2 1\\n1 and not 1 not 1') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2\n1 charlatan 1\n1 not charlatan 1\n\"\"\") == \"charlatan\"\nassert solution(\"\"\"\n2 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"fabulist\"\n\"\"\"\n\nSample Input 1:\n3\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\nSample Output 1:\nfabulist\ntruther\ncharlatan\n\nSample Input 2:\n4\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\nSample Output 2:\ncharlatan\ntruther\nfabulist\n\nSample Input 3:\n5\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 3:\nfabulist\ntruther\ncharlatan\n\nSample Input 4:\n6\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 4:\ncharlatan\ntruther\nfabulist\n\nSample Input 5:\n7\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 5:\ntruther\ncharlatan\nfabulist\n\nSample Input 6:\n8\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 6:\ntruther\ncharlatan\nfabulist\n\nSample Input 7:\n9\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 7:\ntruther\ncharlatan\nfabulist\n\nSample Input 8:\n10\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 8:\ntruther\ncharlatan\nfabulist\n\nSample Input 9:\n11\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 9:\ntruther\ncharlatan\nfabulist\n\nSample Input 10:\n12\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 10:\ntruther\ncharlatan\nfabulist\n\nSample Input 11:\n13\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 11:\ntruther\ncharlatan\nfabulist\n\nSample Input 12:\n14\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 12:\ntruther\ncharlatan\nfabulist\n\"\"\"\nimport collections\n\n\nclass Character:\n    def __init__(self, name, char_type):\n        self.name = name\n        self.type = char_type\n\n    def __repr__(self):\n        return f\"{self.name} {self.type}\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1\\n') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2\\n') == 'fabulist'\nassert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1\\n') == 'truther'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2\\n') == 'truther'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\nassert solution(\"3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"3\""
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"4\", \"First\"\nassert solution(\"3\") == \"4\", \"Second\"\n\"\"\""
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1.00 5.00\\n3.00 3.00') == '4'\nassert solution('2\\n1.00 5.00\\n3.00 3.00') == '3'\nassert solution('3\\n1.00 5.00\\n3.00 3.00') == '2'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1\\n3.00 3.00\\n4.00 2.00\") == \"4\"\nassert solution(\"2\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\") == \"3\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '4'\n\nassert solution('''\n1\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '3'\n\nassert solution('''\n3\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00\n''') == '2'\n\n''')\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '4'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"16\"\nprint(solution())\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5 2') == '16'\nassert solution('3 3 1') == '10'\nassert solution('2 3 2') == '8'\nassert solution('1') == '0'\nassert solution('2 1 1') == '0'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('2 2 1') == '1'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3 1\n.X..\n?.X\n''') == '16'\nassert solution('''\n2 2 2\n.X...\n.X..X\n''') == '2'\nassert solution('''\n2 2 2\n.X...\n.X..X\n''') == '2'\nassert solution('''\n2 2 2\n.X...\n.X..X\n''') == '2'\nassert solution('''\n2 2 2\n.X...\n.X..X\n''') == '2'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 5 2\nR..?.\n.X...\n100 100 7 100 8\n''') == '16'\n\nassert solution('''\n2 4 1\nX..\n.?.\n10 1000 1\n''') == '10'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\") == \"16\"\nassert solution(\"2 2 2\") == \"10\"\nprint(solution('''2 3 1\nX..\n.X..\n10 100 1'''))\nassert solution('''2 2 2\n.X..\nX..''') == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 1') == '1'"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 5 2\nR..?.\n.X...\n100 100 7 100 8\n\"\"\") == \"16\"\n\nassert solution(\"\"\"\n2 3 1\nX..\n.?.\n10 1000 1\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 5 2\nR..?.\n.X...\n100 100 7 100 8\n\"\"\") == \"16\"\nassert solution(\"\"\"3 4 3\n.X..\n.X..\n..X.\n\"\"\") == \"4\"\nassert solution(\"\"\"2 5 2\nR..?.\n.X..\n100 100 7 100 8\n\"\"\") == \"8\"\nassert solution(\"\"\"1 1 1\n.X.\n.X.\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8') == '16'\n\nassert solution('4 2 2\\nR.X..\\nX.X..\\n.X.X.\\nR...') == '4'\n\nassert solution('5 3 3\\n.R..\\n.X..\\n.X..\\n.X..') == '4'\n\nassert solution('2 5 2\\nX.X.\\n.X.\\n.X.\\n.X.\\nX.X') == '0'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\", \"First\"\n\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\", \"Second\"\n\nassert solution(\"\"\"\n100 101 100\n1 1 1\n5 5 5\n10 10 10\n1000 1000 1000\n\"\"\") == \"15.888\", \"Third\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10') == '5.657'\nassert solution('3 3\\n0 4 4\\n1 5 1\\n2 6 1\\nSample Output 2:') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\"\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1.414'"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '1.414'\nassert solution('6 11') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"1.45454545454545\"\nassert solution(\"6 11\") == \"5.64285714285714\""
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"6 11\") == \"5.657\"\n\n---------------------------------------------------"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 6\n0 0 1\n1 0 2\n1 1 3\n2 0 4\n2 1 5\n''') == '5.657', 'Should be 5.657'\n\nassert solution('''\n1 2\n2 1\n''') == '1.414', 'Should be 1.414'\n\nassert solution('''\n100 100\n0 0 1\n1 0 2\n1 1 3\n2 0 4\n2 1 5\n''') == '100.00', 'Should be 100.00'\n\nprint('All tests passed.')"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\"\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\"\nassert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\""
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '1.414'\nassert solution('5 11') == '5.657'"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1 1 1') == '0.433'\nassert solution('4 1 1 1 1') == '0.433'\nassert solution('3 1 1 1') == '1.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 1 1 1 1\n''') == '1.0'\nassert solution('''\n3 1 1 1\n''') == '0.433'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 1 1 1 1\n''') == '1.0'\nassert solution('''\n4 1 1 1 1\n''') == '0.433'\nassert solution('''\n5 10\n6\n7\n8\n9\n10\n''') == '2.0'"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 1 1') == '0.433'\nprint(solution(input()))\n\nSample Input 3:\n3 1 1 1\nSample Output 3:\n1.0\n\nSample Input 4:\n4 3 2 2 1\nSample Output 4:\n1.0\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 1 1') == '1.0'\nassert solution('1 1 1 1') == '1.0'\nprint(solution(input()))\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 3') == '0.3'\nassert solution('3 4 1 1') == '0.3'\nassert solution('3 5 2 2') == '1.0'\nassert solution('1 2 2 1') == '1.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1 1\") == \"0.433\"\nassert solution(\"4 1 1 1\") == \"1.0\"\nassert solution(\"5 1 1 1\") == \"0.433\"\n\n\"\"\""
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1\\n') == '1.0'\nassert solution('2 2 2\\n') == '0.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 1 1') == '1.0'\nassert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n5 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15''') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\nassert solution(\"6 5\\n1 1 5\\n2 2 4\\n1 2 8\\n2 3 7\\n3 2 8\\n3 3 15\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"10 10\") == \"10\"\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"5\"\nassert solution(\"4 5\") == \"4\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"8 10\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n\"\"\"\n) == \"5\"\n\nassert solution(\n\"\"\"\n8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n\"\"\"\n) == \"36\"\n\nassert solution(\n\"\"\"\n10 20\n1 1 10\n2 2 2\n1 3 4\n2 4 6\n3 5 8\n4 6 10\n5 7 12\n6 8 14\n7 8 16\n8 9 20\n9 10 22\n10 11 24\n11 12 26\n12 13 30\n13 14 32\n14 15 34\n15 16 36\n16 17 38\n17 18 40\n18 19 42\n19 20 44\n20 21 46\n21 22 48\n22 23 50\n23 24 52\n24 25 54\n25 26 56\n26 27 58\n27 28 60\n28 29 62\n29 30 64\n30 31 66\n31 32 68\n32 33 70\n33 34 72\n34 35 74\n35 36 76\n36 37 78\n37 38 80\n38 39 82\n39 40 84\n40 41 86\n41 42 88\n42 43 90\n43 44 92\n44 45 94\n45 46 96\n46 47 98\n47 48 100\n48 49 102\n49 50 104\n50 51 106\n51 52 108\n51 53 110\n53 54 112\n53 55 114\n53 56 116\n53 57 118\n53 58 120\n53 59 122\n53 54 124\n53 55 126\n53 56 128\n53 57 130\n53 58 132\n53 59 134\n53 56 136\n53 57 138\n53 58 140\n53 59 142\n53 56 144\n53 57 146\n53 57 148\n53 59 150\n53 59 152\n53 56 154\n53 57 156\n53 57 158\n53 59 160\n53 59 162\n53 56 164\n53 57 166\n53 59 168\n53 59 170\n53 56 172\n53 57 174\n53 59 176\n53 59 178\n53 56 180\n53 57 182\n53 59 184\n53 56 186\n53 57 188\n53 59 190\n53 59 192\n53 56 194\n53 57 196\n53 59 198\n53 59 200\n\"\"\"\n) == \"102\"\n\nassert solution(\n\"\"\"\n20 6\n1 1 2\n2 1 5\n3 2 5\n4 3 7\n5 4 8\n5 5 9\n5 6 7\n5 7 10\n5 8 9\n5 9 10\n5 6 11\n5 7 12\n5 8 13\n5 9 14\n5 10 15\n5 6 16\n5 7 17\n5 8 18\n5 9 19\n5 10 20\n5 6 21\n5 7 22\n5 8 23\n5 9 24\n5 10 25\n5 6 26\n5 7 27\n5 8 28\n5 9 29\n5 10 30\n5 6 31\n5 7 32\n5 8 33\n5 9 34\n5 10 35\n5 6 36\n5 7 37\n5 8 38\n5 9 39\n5 10 40\n5 6 41\n5 7 42\n5 8 43\n5 9 44\n5 10 45\n5 6 46\n5 7 47\n5 8 48\n5 9 49\n5 10 50\n5 6 51\n5 7 52\n5 8 53\n5 9 54\n5 10 55\n5 6 56\n5 7 57\n5 8 58\n5 9 59\n5 10 60\n5 6 61\n5 7 62\n5 8 63\n5 9 64\n5 10 65\n5 6 66\n5 7 67\n5 8 68\n5 9 69\n5 10 70\n5 6 71\n5 7 72\n5 8 73\n5 9 74\n5 10 75\n5 6 76\n5 7 77\n5 8 78\n5 9 79\n5 10 80\n5 6 81\n5 7 82\n5 8 83\n5 9 84\n5 10 85\n5 6 86\n5 7 87\n5 8 88\n5 9 89\n5 10 90\n5 6 91\n5 7 92\n5 8 93\n5 9 94\n5 10 95\n5 6 96\n5 7 97\n5 8 98\n5 9 99\n5 10 100\n\"\"\"\n) == \"100\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5') == '5'\nassert solution('8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15') == '36'\nprint(solution(input()))\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 5') == '5'\nassert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5') == '4'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '2'\nassert solution('2 2') == '2'\nassert solution('3 2') == '3'\nassert solution('1 2 3') == '1'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\nassert solution('2 1 2') == '2'"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n2 1\n1 2\n''') == '1'\nassert solution('''\n3 2\n2 1 3\n1 3\n2 3\n''') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 2') == '3'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1', '1'\nassert solution('2 1') == '1', '2'\nassert solution('2 2') == '1', '2'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n2 1\\n1 2\\n\") == \"1\"\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\\n\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1\n2 1\n1 2\n''') == '1'\nassert solution('''\n3 2\n2 1 3\n1 3\n2 3\n''') == '3'\nassert solution('''\n4 3\n2 1 3\n1 2 4\n''') == '2'\nassert solution('''\n5 4\n2 1 3\n1 5 4\n3 4 1\n''') == '2'"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == \"5\"\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == \"5\"\nassert solution(\"5 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == \"5\"\nassert solution(\"5 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == \"5\"\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == \"-1\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\nassert solution('''6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\nassert solution('''1 10\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 4\\n1 4\\n2 4\") == \"3\"\nassert solution(\"3\\n2 3\\n1 4\\n2 4\") == \"5\"\nassert solution(\"3\\n2 4\\n1 4\\n2 4\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2\\n3\\n1') == '5'\nassert solution('5\\n2\\n3\\n1') == '-1'\nassert solution('6\\n5\\n2\\n3\\n1') == '5'\nprint('all tests passed')\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n\") == \"5\"\nassert solution(\"12 3\\n2 5\\n3 7\\n3 6\\n1 7\\n4 8\\n2 8\\n\") == \"8\"\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n\") == \"-1\"\nassert solution(\"6 6\\n1 5\\n2 5\\n3 5\\n1 6\\n1 6\\n\") == \"2\"\nassert solution(\"12 3\\n2 5\\n3 7\\n3 6\\n1 7\\n4 8\\n2 8\\n\") == \"8\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\nassert solution('''6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n') == '5'\nassert solution('6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n') == '-1'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\nassert solution('''\n6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n2 1') == '-1'\nassert solution('4 3\\n1 2\\n1 3\\n2 3') == '4'\nassert solution('5 4\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6') == '-1'\nassert solution('10 10\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\\n1 19\\n1 20\\n1 21\\n1 22\\n1 23\\n1 24\\n1 25\\n1 26\\n1 27\\n1 28\\n1 29\\n1 30\\n1 31\\n1 32\\n1 33\\n1 34\\n1 35\\n1 36\\n1 37\\n1 38\\n1 39\\n1 40\\n1 41\\n1 42\\n1 43\\n1 44\\n1 45\\n1 46\\n1 47\\n1 48\\n1 49\\n1 50\\n1 51\\n1 52\\n1 53\\n1 54\\n1 55\\n1 56\\n1 57\\n1 58\\n1 59\\n1 60\\n1 61\\n1 62\\n1 63\\n1 64\\n1 65\\n1 66\\n1 67\\n1 68\\n1 69\\n1 70\\n1 71\\n1 72\\n1 73\\n1 74\\n1 75\\n1 76\\n1 77\\n1 78\\n1 79\\n1 80\\n1 81\\n1 82\\n1 83\\n1 84\\n1 85\\n1 86\\n1 87\\n1 88\\n1 89\\n1 90\\n1 91\\n1 92\\n1 93\\n1 94\\n1 95\\n1 96\\n1 97\\n1 98\\n1 99\\n1 100') == '10'\nassert solution('6 4\\n3 5\\n1 5\\n3 6\\n1 6') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\nassert solution('''\n8 8\n1 4\n4 5\n1 5\n1 6\n5 6\n1 7\n3 5\n3 6\n3 7\n2 6\n2 7\n2 8\n''') == '-1'\nassert solution('''\n10 3\n1 4\n1 5\n2 4\n2 5\n3 4\n3 5\n3 6\n4 5\n4 6\n5 5\n5 6\n5 7\n6 6\n6 7\n6 8\n7 5\n7 6\n7 7\n8 5\n8 6\n8 7\n''') == '3'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1') == '4.00'\nassert solution('6 3') == '9.00'"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 1\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\nassert solution('''\n5 2\n-1 1\n0 10\n-1 0\nSample Output 3:\n3.50\n''') == '3.50'\nassert solution('''\n4 4\n4 4\n0 0\n0 0\n0 0\n''') == '0.00'\nassert solution('''\n10 9\n-2 -1\n-3 -2\n-5 -4\n-7 6\n-9 -8\n-10 -9\n0 -10\n10 0\n-10 10\n-7 -7\n0 0\n-6 -6\n-10 -8\n''') == '13.50'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 3') == '4.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '9.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1\\n1 1\\n5 1\\n5 5') == '3.00'\nassert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2') == '4.00'"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '1.00'\nassert solution('3 3') == '3.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1') == '4.00'\nassert solution('4 2') == '2.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2\\n') == '4.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 1') == '4.00'\nassert solution('6 3') == '9.00'\nassert solution('10 0') == '0.00'"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3'\nassert solution('''\n3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\") == \"2 1 2 3\"\nassert solution(\"3 3 4\") == \"1 2 1 2\""
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3 2') == '2 1 2 3'\nassert solution('3 3 4') == '1 2 1 2'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 2') == '2 1 2 3'\nassert solution('3 3 4') == '1 2 1 2'"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\") == \"2 1 2 3\"\nassert solution(\"3 3 4\") == \"3 1 1 2 2\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nSample Input 3:\n4 3 2\nPAINT 2 0 0 3 3\nSAVE\nPAINT 3 0 3 3 3\nLOAD 1\nSample Output 3:\n2 1 2 3\n1 2 1 2''') == '2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\\n'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nPAINT 2 0 0 3 3\n''') == '2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\\n'\nassert solution('''3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1\\n1 3 1\\n1 1 1\\n1 2 1\\n'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3'\nassert solution('''3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3'\nprint(solution('''3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''')) == '3 1 1'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3'\nassert solution('''\n3 3 4\nPAINT 3 0 3 3 3\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4 3\n1 4 2 3\"\"\") == \"1 4 2 3\"\nassert solution(\"\"\"5 1\n-1\n\"\"\") == \"-1\""
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 5') == '1 4 2 3 5'\nassert solution('2 2 3 3 4') == '2 4'\nassert solution('4 5 3 2 1') == '1 2 3 4'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n10\n2 5 9\n''') == '1 4 2 5 9'\nassert solution('''9\n7\n5 5 5 6 2 3\n''') == '5 5 5 6 2 3'\nassert solution('''10\n15\n1 2 5 6 3 5 6 7 8 9 10\n''') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5 1') == '1 4 2 3', 'Test 1'\nassert solution('4 5 1') == '-1', 'Test 2'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n3 3\") == \"1 2 3\"\nassert solution(\"4 1\\n1 3 2 4\") == \"1 3 4\"\nassert solution(\"1 1\\n2 2\") == \"-1\""
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1 3'\nassert solution('5 1') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"1 4 2 3\"\nassert solution(\"5 1\") == \"-1\""
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '1 2 3'\nassert solution('2 1') == '1'\n\nimport sys\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"1 2 3\"\nassert solution(\"4 3\") == \"1 2 3 4\"\nassert solution(\"5 1\") == \"5\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '1 4 2 3'\nassert solution('4 3') == '1 4 2 3'\nassert solution('4 2') == '-1'\n\nsolution('5 2')\n-------"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n4 2\n2 1\n1 3''') == '1'\n\nassert solution('''4\n5 0\n2 6\n8 6\n5 7''') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"1\"\nassert solution(\"4 5 0\") == \"0\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '0'\nassert solution('6') == '0'\nassert solution('7') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 4\\n1 2\\n1 3\") == \"1\"\nassert solution(\"4\\n5 0\\n2 6\\n8 6\\n5 7\") == \"0\"\nprint(solution())"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n4 5\\n2 6\\n8 6') == '1'\nassert solution('2 2\\n4 2\\n2 5\\n8 5') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\", \"Test 1 Failed\"\nassert solution(\"2\") == \"0\", \"Test 2 Failed\"\n\nSolution:\n\nimport itertools"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 3\\n4 5\\n6 7') == '0'\nassert solution('5\\n2 3\\n4 5\\n6 7') == '1'\nassert solution('1\\n4 2\\n2 3\\n2 4') == '0'\nassert solution('1\\n5 2\\n2 3\\n5 3') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n2 2\n1 1\n3 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n1 1\n2 5\n1 2\n1 6\n2 6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10\n5 8\n2 8\n5 4\n3 7\n8 6\n7 6\n4 6\n8 8\n9 8\n7 2\n2 8\n3 7\n4 5\n5 8\n3 6\n3 4\n3 7\n4 6\n4 2\n\"\"\") == \"2\""
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 0 1\") == \"1000 100000\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4 0 3') == '4 140'\nassert solution('2 1 0 1') == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 0 1') == '1000 100'\nassert solution('4 4 0 3') == '4 140'\nassert solution('5 2 0 1 1') == '10000 100'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\"\nassert solution(\"4 1 0 1\") == \"1 1000\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\nassert solution('''\n2 1 0 1\n0 1 1000 100\n''') == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n\"\"\") == '4 140'\nassert solution(\"\"\"\n2 1 0 1\n0 1 1000 100\n\"\"\") == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4 0 3') == '4 140'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100000\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"impossible\"\nassert solution([5, 2]) == \"impossible\"\nassert solution([5, 2, 6, 2, 7, 8, 3]) == \"3\"\nassert solution([3, 1, 4, 5]) == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n10 10\\n5 7\\n4 8') == '3\\n'\nassert solution('10\\n20 20\\n10 10\\n20 20') == '2\\n'\n\n'''\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n'.join([\n    '5 7',\n    '4 5',\n    '3 6',\n    '8 2',\n    '4 5',\n    '2 3',\n    '7 8'\n])) == '3'\n\nassert solution('\\n'.join([\n    '3',\n    '1 2',\n    '3 4',\n    '2 3',\n    '4 5',\n    '1 2',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '4 5',\n    '3 4',\n    '4 5',\n    '5 6',\n    '3 5',\n    '2 3',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '4 5',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '3 4',\n    '4 5',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '4 5',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    "
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\\\n10 20\n15 10\n15 20\n20 20\n15 15\n5 10\n10 10\n5 15\n20 10\n10 10\n10 20\n5 15\n\"\"\"\n) == \"3\"\nassert solution(\n    \"\"\"\\\n10 20\n15 10\n15 20\n20 20\n15 15\n5 10\n10 10\n5 15\n20 10\n10 10\n10 20\n5 15\n\"\"\"\n) == \"impossible\"\nassert solution(\n    \"\"\"\\\n12 2\n6 6\n6 6\n\"\"\"\n) == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 7\\n8 3\\n5 7') == '3\\n'\nassert solution('8 2\\n8 3\\n5 7\\n') == 'impossible\\n'\nprint('All test cases passed!')"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 1\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n''') == '3'\nassert solution('''\n10 2\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n''') == 'impossible'\nassert solution('''\n20 3\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n''') == '3'\nassert solution('''\n50 2\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n''') == '2'\nassert solution('''\n90 1\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n''') == 'impossible'\n\n\"\"\"\n\n\nfrom math import sqrt"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n8 3\\n5 7\\n') == '3\\n'\nassert solution('4\\n8 1\\n6 7\\n') == 'impossible\\n'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n4\\n3 1 2 2\\n5 1 4 5\\n10 10 3 4\\n5 5 2 6 7\\n1 10 5 5\\n2 9 5 4\\n3 10 4 7\\n5 2 4 6\\n4 3 4 2\\n') == '2\\n'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\") == \"5\"\nassert solution(\"120\") == \"120\"\nassert solution(\"51090942171709440000\") == \"21\"\nassert solution(\"1574258\") == \"3\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"51090942171709440000\") == \"21\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\""
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"51090942171709440000\") == \"21\"\nassert solution(\"120\") == \"5\"\nprint(\"YOUR CODE IS CORRECT!\")\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\nassert solution(\"\") == \"\""
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2\") == \"45\"\nassert solution(\"10 1 2\") == \"10\""
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"45\"\nassert solution(\"10 1 2\") == \"45\"\nassert solution(\"100 100 100\") == \"5\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 1 2\n''') == '45'\nassert solution('''\n3 3 3\n''') == '10'\n'''\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\nassert solution('5 2 2') == '4'"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 3') == '10'\n\nassert solution('5 2 5') == '35'\n\nassert solution('2 2 3') == '10'\n\nassert solution('7 4 8') == '63'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1 2\n''') == '45'\nprint('Solution:')\nprint(solution(stdin))\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\""
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\nprint(solution(input()))\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"45\""
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"20\"\nassert solution(\"5 1\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"impossible\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6\n2 1\n3 1\n4 1\n5 9\n1 1\n1 1\nSample Input 3:\n1\n5\nSample Output 3:\nimpossible\n\"\"\"):\n    pass\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"impossible\"\nassert solution(\"5 0\") == \"0\"\nassert solution(\"5 2\") == \"12\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1 0\") == \"0\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1\n4\n5\n2\n5\n10\nSample Input 3:\n6\n4 5\n9 10\n2 1\n8 3\n5 6\nSample Output 3:\n15\n''') == 'impossible'"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == '18'\nprint(solution('''\n10\n5 5\n6 1\n9 4\n9 8\n8 5\n7 1\n4 3\n'''))\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == 'impossible'\nassert solution('5 1') == '18'\nassert solution('2 10') == 'impossible'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\") == \"20\"\nassert solution(\"\"\"\n6\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n10\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '18'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"5\") == \"impossible\"\nassert solution(\"10\") == \"impossible\"\nassert solution(\"15\") == \"impossible\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == '18'\n\nassert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == '20'\n\nassert solution('''\n3\n2 3\n6 8\n9\n''') == 'impossible'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2') == '3'\nassert solution('3\\n-1 -1 -1\\n5 5 5\\n10 10 10') == '11'\nprint('all tests passed')\n'''\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '5'\n'''"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n3\\n-1 -1 -1\\n5 5 5\\n10 10 10\") == \"11\"\nassert solution(\"1\\n2\\n-1 -1 -1\\n5 5 5\\n10 10 10\") == \"8\"\nassert solution(\"3\\n-1 -1 -1\\n5 5 5\\n10 10 10\") == \"6\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n1 5 10\n7 8 2\n\"\"\") == \"11\"\nassert solution(\"\"\"\n2\n1 5 10\n7 8 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n-1 -1 -1\n5 5 5\n10 10 10\n\"\"\") == \"11\"\nassert solution(\"\"\"\n4\n-1 -1 -1\n5 5 5\n10 10 10\n11 11 11\n\"\"\") == \"17\""
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n1 5 10\n7 8 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n-1 -1 -1\n5 5 5\n10 10 10\n\"\"\") == \"11\"\nassert solution(\"\"\"\n4\n0 0 0\n5 5 5\n10 10 10\n15 15 15\n\"\"\") == \"20\"\nassert solution(\"\"\"\n5\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n1 1 1\n1 2 2\n1 3 3\n''') == '4'\n''')\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == '3'\n\"\"\"\n\nstdin = __import__('sys').stdin.read().splitlines()\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 5 10\n7 8 2\n''') == '3'\nassert solution('''\n3\n-1 -1 -1\n5 5 5\n10 10 10\n''') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 5 10\n7 8 2\n''') == '3'\nassert solution('''\n3\n-1 -1 -1\n5 5 5\n10 10 10\n''') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"11\"\nassert solution(\"4\") == \"9\"\nassert solution(\"5\") == \"20\"\nassert solution(\"6\") == \"42\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n1000\n1000\n0000\n0010\n''') == '0'\nassert solution('''\n3 1\n110\n011\nSample Output 3:\n1\n''') == '1'"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == '2'\nassert solution(\"4 2\") == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2\\n10 11') == '2'\nassert solution('3 3\\n101 11') == '1'\nassert solution('4 4\\n1000 101') == '0'\nassert solution('5 5\\n0000 1111') == '0'\nprint('all test cases passed')"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'\nassert solution('10 10') == '17'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5 2\n100\n010\n010\n000\n011\n100\n\"\"\") == '0'\nassert solution(\n\"\"\"\n5 3\n100\n010\n010\n000\n011\n\"\"\") == '2'\nassert solution(\n\"\"\"\n5 4\n100\n010\n010\n000\n011\n\"\"\") == '1'\nassert solution(\n\"\"\"\n5 5\n100\n010\n010\n000\n011\n\"\"\") == '3'\nassert solution(\n\"\"\"\n5 6\n100\n010\n010\n000\n011\n\"\"\") == '5'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'\nassert solution('1000 1000') == '0'\nassert solution('1000 1000') == '0'\nassert solution('1000 1000') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '0'\nassert solution('3 3') == '0'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n11\n11''') == '1'\nassert solution('''3\n10\n00\n''') == '0'\nassert solution('''6\n111\n110\n101\n110\n111\n101\n''') == '3'"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1 2 3\n2\n3\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\\n3\\n2\") == \"1\"\nassert solution(\"3\\n1 2 3\\n3\\n2\") == \"1\"\nassert solution(\"3\\n1 2 3\\n3\\n2\") == \"1\"\nassert solution(\"3\\n1 2 3\\n3\\n2\") == \"1\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"1\""
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3\\n3') == \"1\"\nassert solution('3\\n1 3 2\\n2') == \"5\"\nassert solution('3\\n1 3 2\\n3') == \"1\"\nassert solution('1\\n3\\n3') == \"1\"\nassert solution('3\\n1 3 2\\n2') == \"1\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n3\n2''') == '1'\nassert solution('''3\n1 2 3\n3\n2''') == '2'\nassert solution('''3\n1 2 3\n3\n2''') == '5'\nassert solution('''1\n5\n0''') == '5'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\n1 3 2\n2\"\"\") == \"1\"\n\nassert solution(\"\"\"4\n1 2 4\n3\nSample Output 3:\n2\n\nSample Input 4:\n5\n3 4 1 2\n1\nSample Output 4:\n3\n\nSample Input 5:\n2\n1\nSample Output 5:\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('5') == '3'\n\n\"\"\""
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3'\n) == '1'\n\nassert solution(\n    '3'\n) == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    3\n    1 2 3\n    3\n    ''') == '1'\nassert solution('''\n    3\n    1 3 2\n    2\n    ''') == '5'\n''')\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '1'\nassert solution('10') == '1'\nassert solution('15') == '1'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 100\\n\") == \"0\"\nassert solution(\"10 10 1\\n\") == \"19\"\nassert solution(\"10 10 0\\n\") == \"11\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 100 20\\n') == '0'\nassert solution('10 10 1\\n') == '19'\nassert solution('50 50 1\\n') == '0'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 100 20\n''') == '0'\nassert solution('''\n10 10 1\n''') == '19'\nassert solution('''\n100 100 20\n''') == '0'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\""
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\""
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 100 20') == \"0\"\nassert solution('10 10 1') == \"19\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c''') == 'SHIP IT'\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\nprint('All test cases passed')\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nclassa classb myfilec execd libe') == 'c'\nassert solution('4\\nclassa classb myfilec execd\\nimport d, b, c\\nclassa 1\\nimport d\\nimport c\\nclassb 1\\nimport c') == 'c'"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == 'SHIP IT'\nassert solution('5\\nclassa classb myfilec execd libe') == 'SHIP IT'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0') == 'SHIP IT'\n\nimport collections"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nc 1\\nimport c\\nd 0\\n\") == \"SHIP IT\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe\\nlibe 0\\n\") == \"SHIP IT\"\n\n---Input---\n6\n\n6\nfrom a import *\nfrom b import *\nfrom c import *\nfrom d import *\nfrom e import *\nfrom f import *\n\n7\nfrom a import *\nfrom b import *\nfrom c import *\nfrom d import *\nfrom e import *\nfrom f import *\nfrom g import *\nfrom h import *\nfrom i import *\nfrom j import *\nfrom k import *\nfrom l import *\n\n8\nfrom a import *\nfrom b import *\nfrom c import *\nfrom d import *\nfrom e import *\nfrom f import *\nfrom g import *\nfrom h import *\nfrom i import *\nfrom j import *\nfrom k import *\nfrom l import *\nfrom m import *\nfrom n import *\nfrom o import *\nfrom p import *\nfrom q import *\nfrom r import *\nfrom s import *\nfrom t import *\nfrom u import *\nfrom v import *\nfrom w import *\nfrom x import *\nfrom y import *\nfrom z import *\n\n9\nfrom a import *\nfrom b import *\nfrom c import *\nfrom d import *\nfrom e import *\nfrom f import *\nfrom g import *\nfrom h import *\nfrom i import *\nfrom j import *\nfrom k import *\nfrom l import *\nfrom m import *\nfrom n import *\nfrom o import *\nfrom p import *\nfrom q import *\nfrom r import *\nfrom s import *\nfrom t import *\nfrom u import *\nfrom v import *\nfrom w import *\nfrom x import *\nfrom y import *\nfrom z import *\n\n10\nfrom a import *\nfrom b import *\nfrom c import *\nfrom d import *\nfrom e import *\nfrom f import *\nfrom g import *\nfrom h import *\nfrom i import *\nfrom j import *\nfrom k import *\nfrom l import *\nfrom m import *\nfrom n import *\nfrom o import *\nfrom p import *\nfrom q import *\nfrom r import *\nfrom s import *\nfrom t import *\nfrom u import *\nfrom v import *\nfrom w import *\nfrom x import *\nfrom y import *\nfrom z import *\nfrom abc import *\nfrom abc.abc import *\nfrom abstract import *\nfrom abstractmethod import *\nfrom abstractproperty import *\nfrom attribute import *\nfrom base import *\nfrom binop import *\nfrom boolop import *\nfrom break_continue import *\nfrom cast import *\nfrom comprehension import *\nfrom dictcomp import *\nfrom dotted_name import *\nfrom expr import *\nfrom sliceop import *\nfrom star_args import *\nfrom stmt import *\nfrom ternaryop import *\nfrom unaryop import *\nfrom type_ignore import *\nfrom yield import *\nfrom yieldfrom import *\n\n-----\n\nclass S:\n\n    def __init__(self, *args):\n        self.s = args"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nc 1\\nimport c\\n\") == \"SHIP IT\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n\") == \"c\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == 'SHIP IT', 'First'\n\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT', 'Second'\n\nassert solution('''10\nx z y w e f d g a\nz 1\nimport x\nimport w\nimport f\nimport z\na 2\nimport a\nimport e\nimport g\ne 3\nimport e\nimport d\nimport f\nimport g\nimport h\nimport i\nimport j\nimport k\nimport l\nimport m\nimport n\nimport o\nimport p\nimport q\nimport r\nimport s\nimport t\nimport u\nimport v\nimport w\nx 1\nimport x\nimport y\nimport z\n''') == 'SHIP IT', 'Third'\n\nassert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == 'SHIP IT', 'Fourth'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0') == 'c'\nassert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'c'\nassert solution('10\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'SHIP IT'"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'SHIP IT'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe') == 'SHIP IT'\nassert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == ''\nassert solution('4\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"SHIP IT\"\nassert solution(\"1\\n1\\nimport 2\\nimport 3\\n\") == \"SHIP IT\"\nassert solution(\"4\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c\\n\") == \"a, c\"\nassert solution(\"6\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n\") == \"classa, myfilec\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'c'\nassert solution('5\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'SHIP IT'\nassert solution('10\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\nSample Output 2:') == 'SHIP IT'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == \"1\"\nprint
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\nassert solution('5+3+x+5+3+x') == '2'\nassert solution('5+3+x+5+3+x+5+3+x') == '1'\nassert solution('5+3+x+5+3+x+5+3+x+5+3+x+5+3+x+5+3+x+5+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5+3+x''') == '1'\nassert solution('''20+3+x''') == '2'\nassert solution('''1+2+1+3+4''') == '5'\nassert solution('''1+2+1+3+4+2+3+4''') == '4'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('5+3+x+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'yes'\nassert solution('1 2 3') == 'yes'\nassert solution('4 5 6') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 10') == 'yes'\nassert solution('2 10') == 'no'\n\n\"\"\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"yes\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 10\\n1 15\\n0 20\\n') == 'yes'\nassert solution('2 10\\n0 15\\n5 20\\n') == 'no'\nassert solution('3 10\\n0 5\\n0 1\\n5 20\\n') == 'no'\nassert solution('4 10\\n0 5\\n0 1\\n5 20\\n') == 'yes'\nassert solution('5 10\\n0 5\\n0 1\\n5 20\\n') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'yes'\nassert solution('2 3') == 'no'\nassert solution('1 2 5') == 'yes'\nassert solution('2 1 3') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 10\\n1 15\") == \"yes\"\nassert solution(\"2 10\\n0 15\") == \"no\""
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 10\n0 15\n5 20\n''') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'yes'\nassert solution('2 10\\n1 15\\n0 20') == 'no'\nprint('all tests passed')\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == 'yes\\n', \"test 1 failed\""
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"yes\", \"1st sample\"\nassert solution(\"2 10\\n1 15\\n0 20\\n\") == \"no\", \"2nd sample\""
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4 4') == '0.25'\nassert solution('4 4 4') == '0.25'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'\nassert solution('''3\n1\n5 red\n4\n2 green\n''') == '0'\nassert solution('''3\n1\n4 red\n4\n5 green\n''') == '1.0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 3') == '0.25'\nassert solution('6 6 6') == '0'\nprint('PASSED')\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\\n5 1 2\\n3 4 2\\n8 4 1\\n\") == \"0.25\"\nassert solution(\"5 4 4\\n3\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n\") == \"0\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n'''\n) == '0.25'\nassert solution(\n'''\n4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n'''\n) == '0'\nassert solution(\n'''\n2 2 2\n2\n2\n'''\n) == '0.5'\nassert solution(\n'''\n4 4 4\n2\n2 red\n1 yellow\n2 red\n'''\n) == '0.25'\nassert solution(\n'''\n4 4 4\n2\n2 green\n6 yellow\n10 red\n14 green\n4 red\n'''\n) == '0.25'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4 4') == '0.25'\nassert solution('4 4 4') == '0.25'\nassert solution('1') == '1'\nassert solution('5') == '0'\nassert solution('4 4 4') == '0.25'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n\") == \"0\""
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n\"\"\") == \"0.25\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 4') == '0.25'\nassert solution('4 4 4') == '0.25'\nassert solution('0 0 0') == '1'\nassert solution('1') == '0.5'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4 4\") == \"0.25\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"5\") == \"0.5\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 7\") == \"3\"\nassert solution(\"6 8\") == \"inf\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 4\") == \"4\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == '3'\nassert solution('6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == 'inf'\nassert solution('5 6\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\nassert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input_1) == '3'\nassert solution(sample_input_2) == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n7\\n1 3\\n1 4\\n3 2') == '3'\nassert solution('6\\n8\\n1 3\\n1 4\\n3 2') == '2'\nassert solution('5\\n3\\n1 4\\n3 2') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n2 2\\n\") == \"2\"\nassert solution(\"2 2\\n2 2\\n\") == \"inf\"\nassert solution(\"3 1\\n3 2\\n\") == \"3\"\nassert solution(\"4 1\\n4 2\\n\") == \"inf\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"inf\"\nprint(\"All test cases passed\")\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\nassert solution('6 10') == 'inf'\nassert solution('5 12') == 'inf'\nassert solution('5 23') == 'inf'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == '4'\nassert solution('''\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\nassert solution('''\n4 4\n3 3 3 3\n''') == '4'\nassert solution('''\n4 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n''') == '2'\nassert solution('''\n4 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\n1 2 3 4\n''') == '4'\nassert solution('''12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '4', 'Wrong'\nassert solution('12 3') == '2', 'Wrong'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '4'\nassert solution('12 3') == '2'"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('4\\n1 2 3 4') == '4'\nassert solution('12\\n2 3 4 5 6 7 4 7 8 8 12 12') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 2 3\n''') == '2'\nassert solution('''\n4\n1 2 3 4\n''') == '4'\nassert solution('''\n12\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"1\", \"1st example\"\nassert solution(\"3 2\") == \"2\", \"2nd example\"\nassert solution(\"13 3\") == \"4\", \"3rd example\"\nassert solution(\"13 13\") == \"4\", \"4th example\""
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == \"4\"\nassert solution(\"12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\\n\") == \"2\"\nprint('All test cases passed.')"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'NO TYPO'\nassert solution('2') == 'NO TYPO'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\nhoose\nhose\nnose\nnoises\nnoise\"\"\") == \"hoose, noise\"\nassert solution(\"\"\"4\nhose\nhoose\noose\nmoose\nSample Output 3:\nhose, noise\"\"\") == \"moose, noise\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\nhoose\nhose\nnose\nnoises\nnoise''') == \"hoose, noise\"\n\nassert solution('''4\nhose\nhoose\noose\nmoose\n''') == \"hoose, noise\"\n\nassert solution('''3\nhose\nhoose\noose\n''') == \"hoose, noise\"\n\nassert solution('''2\nhose\nhoose\n''') == \"hoose\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == 'NO TYPOS'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\nhoose\\nhose\\nnoises\\noise\") == \"hoose\\nmoose\\nnoise\"\nassert solution(\"4\\nhose\\nhoose\\noose\\nmoose\") == \"hoose\\nmoose\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\nhoose\nhose\nnoises\n''') == 'hoose'\nassert solution('''3\nhose\nhose\nnoises\n''') == 'noises'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"NO TYPOS\"\nassert solution(\"1\") == \"NO TYPOS\"\nassert solution(\"2\") == \"NO TYPOS\"\nassert solution(\"3\") == \"NO TYPOS\"\nassert solution(\"4\") == \"NO TYPOS\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\nhoose\nhose\nnose\nnoises\nnoise\n''') == 'hoose,noise,nose'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\nhoose\nhose\nnose\nnoises\nnoise''') == '''hoose\nnoises\nnoise'''\nassert solution('''4\nhose\nhoose\noose\nmoose\nSample Output 3:\nhoose\nmoose\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\\\n3\nhoose\nhose\nnoises\n''') == 'hoose, noises'\n\nassert solution('''\\\n4\nhoose\nhose\noose\nmoose\n''') == 'hoose, moose'\n\nassert solution('''\\\n5\nhoose\nhose\nnose\nnoises\nnoise\n''') == 'hoose, noise, noises'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '2'\nassert solution('2 3') == '5'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == '2'\nassert solution(\"2 3\") == '5'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'\nassert solution('5 4') == '0'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"3 3\") == \"5\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n3\n''') == '2\nassert solution('''\n2 3\n4\n''') == '0\nassert solution('''\n1 2\n3\n''') == '16\nassert solution('''\n1 2\n3\n''') == '2\n''')\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"5\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1\n3\nSample Output 1:\n2\n2\n5''') == '2\\n2\\n5'\nassert solution('''2 3\n4\nSample Output 2:\n0\n16\n8''') == '0\\n16\\n8'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '2'\nassert solution('3') == '2'\nassert solution('4') == '0'\nassert solution('5') == '16'\nassert solution('10') == '0'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n50 45 45\n10 0 0\n10 1 1\n20 2 2\n30 2 2\n''') == '44.72135955', solution\nassert solution('''4\n50 45 45\n10 0 0\n10 1 1\n20 2 2\n30 2 2\n20 3 3\n''') == '68.52419365', solution\nassert solution('''5\n50 45 45\n10 0 0\n10 1 1\n20 2 2\n30 2 2\n20 3 3\n20 4 4\n''') == '104.52666859', solution\nassert solution('''6\n50 45 45\n10 0 0\n10 1 1\n20 2 2\n30 2 2\n20 3 3\n20 4 4\n20 5 5\n''') == '56.92764986', solution\nassert solution('''7\n50 45 45\n10 0 0\n10 1 1\n20 2 2\n30 2 2\n20 3 3\n20 4 4\n20 5 5\n20 6 6\n''') == '103.80450876', solution\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n50 45 45\n''') == '68.52419365'\nassert solution('''\n4\n50 40 60 50\n''') == '93.05869785'\nassert solution('''\n5\n40 50 80 60 50\n''') == '92.60123805'\nassert solution('''\n5\n40 60 40 50 60\n''') == '109.464346859'\nassert solution('''\n10\n
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(t) == \"44.72135955\"\nprint(solution(t))"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n50 45 45\n''') == \"68.52419365\"\nassert solution('''\n2\n0 0 0\n''') == \"0.0\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == '44.72135955'\nassert solution(\"2\") == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"44.72135955\"\nassert solution(\"2\") == \"68.52419365\""
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '44.72135955'\nassert solution('2\\n') == '68.52419365'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3 1 5\n1 2\nSample Input 3:\n2 4 1 2\n1 3 1\nSample Output 3:\n1\n1\n0\n2\n''') == '1'\n\nassert solution('''2 4 1 2\n1 3 1\nSample Input 4:\n2 5 1 2\n1 3 1\nSample Output 4:\n1\n1\n0\n2\n''') == '1'\n\nassert solution('''2 3 1 5\n1 2\nSample Input 5:\n2 5 1 2\n1 3 1\nSample Output 5:\n0\n0\n0\n1\n''') == '0'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1 5\") == \"1\"\nassert solution(\"3 4 2 3\") == \"1\"\nassert solution(\"7 5 4 3\") == \"1\"\nassert solution(\"9 7 5 4 3\") == \"2\"\nassert solution(\"10 10 10 10 10 10\") == \"0\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4 2 3') == '1'\nassert solution('2 2 2') == '2'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4 2 3') == '1'\nassert solution('3 4 2 3') == '1'\nassert solution('4 6 3 2') == '1'\nassert solution('3 2 4 5') == '3'\nassert solution('3 4 2 3') == '2'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '2'"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 5\") == \"1\"\nassert solution(\"3 4 2 3\") == \"0\"\nprint(\"Congratulations! Your solution beats 98.67% of users!\")\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '2'\n\n\"\"\""
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 2 3') == '1'\nassert solution('2 3 1 5') == '3'\nassert solution('3 4 2 3') == '2'\nassert solution('5 4 2 3') == '2'\nassert solution('5 4 2 3') == '3'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4 2 3\n1 3 1\n''') == '1'\n\nassert solution('''\n3 4 2 3\n1 3 1\n''') == '1'\n\nassert solution('''\n2 3 1 5\n1 2\n''') == '1'\n\nassert solution('''\n3 4 2 3\n1 2\n''') == '0'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '2'"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2 5\n1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"5 3\n2 2 3 2 2\n\"\"\") == \"2\"\nprint('\"Run\" is good. How is \"Check\"?')"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n1 1\\n\") == \"3\"\nassert solution(\"5 3\\n2 2 3 2 2\\n\") == \"2\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 5\n1 1\n''') == '3'\n\nassert solution('''3 3\n1 2 1\n''') == '2'\n\nassert solution('''5 4\n2 2 3 1 2\n''') == '2'"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5\\n1 1') == '3'\nassert solution('5 3\\n2 2 3 2 2') == '2'\nprint(solution('''5 3\n1 1\n2 2 3 2 2'''))\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 1\n3\n''') == '3'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"3\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"10 10\") == \"9\"\nassert solution(\"6 6\") == \"5\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5') == '3'\nassert solution('5 3') == '2'\nassert solution('5 4') == '1'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5') == '3'\nassert solution('5 3') == '2'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5') == '3'\nassert solution('5 3') == '2'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n100 100\\n50 50\") == \"50\"\nassert solution(\"2\\n0 50\\n50 0\") == \"25\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n100 100\n50 50\n''') == '50', 'First'\nassert solution('''\n1\n0 0\n''') == '0', 'Second'\nassert solution('''\n5\n100 100 100 100 100\n50 50 50 50 50\n''') == '50', 'Third'\nassert solution('''\n10\n0 0 1 1 0 0 1 0 1 1 1 0 1 1 1 1 1\n0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '31.23', 'Fourth'\nassert solution('''\n1000\n
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '50'\nassert solution('0 50') == '25'\nassert solution('1 100') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n100 100\\n50 50\\n') == '50'"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '25'\nassert solution('0 50') == '50'\nassert solution('100 100') == '50'\n\"\"\""
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n100 100\\n50 50\") == \"50\"\nassert solution(\"2\\n0 50\\n50 0\") == \"25\""
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '50'\nassert solution('100 100') == '50'\nassert solution('0 50') == '25'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n0 50\\n50 0') == '25'\nassert solution('2\\n100 100') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n0 50\n50 0\n''') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n100 100\\n50 50\") == \"50\"\nassert solution(\"2\\n0 50\\n50 0\") == \"25\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n100\n200\n2010\n\"\"\") == \"160\"\n\nassert solution(\"\"\"\n4\n400\n500\n100\n200\n\"\"\") == \"400\"\n\nassert solution(\"\"\"\n6\n100\n200\n200\n100\n200\n100\n\"\"\") == \"500\""
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '160'\nassert solution('3') == '250'\nassert solution('4') == '300'\nprint(solution('''3\n100\n200\n2010'''))\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''\n2\n100\n200\n''') == '160'\nassert solution(\n'''\n3\n100\n200\n2010\n''') == '250'"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n100\n200\n''') == '160'\nassert solution('''\n2\n100\n200\n''') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '160'\nassert solution('3') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n100\n200\n2010\n''') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n100\n200\n''') == '160'\nassert solution('''3\n100\n200\n2010\n''') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n100\n200\n''') == '160'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n100\n200''') == '160'\nassert solution('''3\n100\n200\n2010''') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n100\\n200\\n') == '160'\nassert solution('2\\n100\\n200\\n2010\\n') == '250'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n0 1 1\n2 3 1\n''') == \"2\"\n\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 5\") == \"0\""
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 5') == '0'"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n0 1 1\\n2 3 1\\n\") == \"0\"\nassert solution(\"1 1\\n0 0\\n1 1\\n\") == \"2\"\nassert solution(\"5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n\") == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '2'\nassert solution('4 5') == '0'\nassert solution('15 5') == '1'\nassert solution('10 1') == '1'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == \"2\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 2\n0 1 1\n2 3 1\n''') == '2'\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 5\") == \"0\""
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n3 3 2\") == \"1 1\"\nassert solution(\"4 3\\n3 3 2\") == \"1 1\"\nassert solution(\"4 2\\n3 3\") == \"2 3\""
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1 1\\n1 2\\n2 3 4'"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"1 1\"\nassert solution(\"4 2\") == \"1 2\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 3\n3 3 2 1\n3 3 3''') == '1 1\\n1 2\\n2 3 4'\nassert solution('''4 3\n3 3 2 1\n3 3 3''') == '1 1\\n1 2\\n-1'\nassert solution('''4 3\n3 3 2 1\n5 3\nSample Output 3:\n-1\nSample Input 4:\n10 3\n6 3 2 3 2 1 3 5 5 5 4 5 5\nSample Output 4:\n0\n''') == '0'\nassert solution('''10 3\n6 3 2 3 2 1 3 5 5 5 4 5 5\nSample Output 4:\n-1\nSample Input 5:\n8 2\n2 2 3 4 5 6 7 8\nSample Output 5:\n1 1\n''') == '1 1'\nassert solution('''8 2\n2 2 3 4 5 6 7 8\nSample Output 5:\n1 1\n''') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3\\n3 3 2 1') == '1 1'\nassert solution('4 2\\n3 3 2 1') == '-1'\nassert solution('5 3\\n3 3 2 1\\n2 3 3') == '3 4 5 6 7 8 9'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n3 3 2\n3 3 3\n''') == '1 1'\n\nassert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 1'\n\nassert solution('''\n2 2\n1 1\n''') == '2 2'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n3 3 2\n3 3 3''') == '1 1\\n2 3 4'\nassert solution('''4 2\n3 3 2 2\n6 3''') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 1'\nassert solution('''\n4 2\n3 3 2 2\n6 3\n''') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 1\n1 2\n2 3 4\n''')\n\nassert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '-1\n'''\n\n###########################################################################################################################################\n###########################################################################################################################################\n###########################################################################################################################################\n\n\n\n\n'''\nWOW\n\n'],\n      'lst': [['M', 'S', 'F'],\n     ['T', 'F', 'F'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S',"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '1 1\\n1 2\\n2 3 4'\nassert solution('4 2') == '-1'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\n''') == '10.0\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == '4.0\n'''"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 10\\n0 0 D\\n10 1 L\") == \"10.0\\n10.0\\n0.0\"\nassert solution(\"4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D\") == \"10.0\\n4.0\\n1.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\nSample Output 1:\n10.0\n10.0\n0.0''') == '10.0\\n10.0\\n0.0'\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\nSample Output 2:\n10.0\n4.0\n1.0\n''') == '10.0\\n4.0\\n1.0'"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 10') == '10.0'\nassert solution('4 3 7') == '10.0 4.0 1.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '10.0\\n10.0\\n0.0\\n'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\n''') == '10.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 10\") == \"10.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution_stdin) == \"10.0\\n4.0\\n1.0\"\nprint('\"Run\" is good. Type some math to get credit!')"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"10.0\\n4.0\\n1.0\"\nassert solution() == \"10.0\\n10.0\\n10.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 10') == '10.0'\nassert solution('4 3 7') == '10.0'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz''') == 'we will avenge our dead parrot arr'\nassert solution('''wl jkd''') == 'Impossible'\nassert solution('''\"\"\"\"''') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz\nwl jkd''') == 'we will avenge our dead parrot arr'\n\nassert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz\nwl hxxqyy\n''') == 'Impossible'\n\nassert solution('''tlksjzxn\n''') == 'tlksjzxn'\n\nassert solution('''x\n''') == 'x'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"Impossible\""
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('eo ii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\nassert solution('edce eowiu ecnu yus klm') == 'Impossible'\nassert solution('iiu rlm') == 'Impossible'\nassert solution('s uu ') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\""
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nHamburg Bremen\n1\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\n\"\"\") == \"68.3\"\nassert solution(\"\"\"\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\nAmsterdam Rotterdam\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('input.txt') == '4.18446744073709551615'"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"Hamburg Bremen\n1\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\"\"\") == '68.3'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('Hamburg Bremen') == '68.3'\nassert solution('Amsterdam Rotterdam') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''Hamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n''') == '68.3'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''Hamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n''') == '68.3'\nassert solution('''Amsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\nBremen Hamburg\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"68.3\"\nassert solution(\"\"\"\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('\\n'.join(['Hamburg Bremen', '3', 'Hamburg Bremen 15 68 10 5', 'Hamburg Bremen 46 55 50 60', 'Bremen Frankfurt 14 226 10 120'])) == '68.3'\nassert solution('\\n'.join(['Amsterdam Rotterdam', '1', 'Amsterdam Utrecht 10 22 5 10', 'Amsterdam Utrecht 10 22 5 10', 'Amsterdam Utrecht 10 22 5 10'])) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('Hamburg Bremen') == '68.3'\nassert solution('Bremen Hamburg') == 'IMPOSSIBLE'\n\nassert solution('Rotterdam Utrecht') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Hamburg Bremen') == '68.3'\nassert solution('Bremen Frankfurt') == 'IMPOSSIBLE'\nassert solution('Amsterdam Rotterdam') == '10.5'\n'''\n\n'''\n\nfrom math import *\nimport random"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '4'"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '1'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\\n') == '3'\nassert solution(\n    '2\\n*.*\\n...\\n*.*\\n') == '4'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n*-*.*\n|.|.|\n*.*-*\"\"\") == \"3\"\n\nassert solution(\"\"\"3\n*-*.*\n|.|.|\n*.*-*\"\"\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '4'\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*') == '3'\nassert solution('2\\n*.*\\n...\\n*.*') == '4'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '4'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1111\n1 1\n1 1\n1 1\n1 2\n3 2\n''') == 'impossible', 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"impossible\"\nassert solution(\"12210020\") == \"4\""
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'impossible'\nassert solution('2\\n12\\n2\\n1\\n1\\n1\\n12\\n1\\n2\\n') == '4'\nassert solution('4\\n12210020\\n12210020\\n12210020\\n12210020\\n12210020\\n12210020\\n') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n111\n2\n1\n1\n''') == '4'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n111\") == \"impossible\"\nassert solution(\"4\\n1110\") == \"3\"\nassert solution(\"4\\n1112\") == \"impossible\"\nassert solution(\"4\\n1220\") == \"3\"\nassert solution(\"4\\n1221\") == \"4\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8\") == \"impossible\"\nassert solution(\"4\") == \"4\""
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"impossible\"\nassert solution(\"12210020\") == \"4\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1111\n''') == 'impossible'\nassert solution('''\n8\n12210020\n''') == '4'\nassert solution('''\n10\n12210020\n12210020\n12210020\n12210020\n12210020\n''') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8') == 'impossible'\nassert solution('4') == '4'\nassert solution('12210020') == '4'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"Bill will be bitten.\"\nassert solution(\"1\\n5\\n5\\n1\") == \"Bill enters at (0.00, 500.00) and leaves at (500.00, 500.00). Bill will be bitten.\"\nprint(solution(input()))\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4') == 'Bill will be bitten.'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'Bill enters at (0.00, 0.00) and leaves at (0.00, 0.00).'\nassert solution('1') == 'Bill enters at (0.00, 0.00) and leaves at (0.00, 0.00).'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n500 500 499\n0 0 999\n1000 1000 200\nSample Input 3:\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 3:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\n''') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n500 500 499\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4') == 'Bill will be bitten.'\n\n\"\"\"\n\nn = int(input())\nsnakes = []\n\nfor i in range(n):\n    snakes.append([int(i) for i in input().split(' ')])"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\nassert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\\n\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\\n\") == \"Bill will be bitten.\""
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n\"\nassert solution(\"4\") == \"Bill will be bitten.\\n\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\\n\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\\n\") == \"Bill will be bitten.\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 3') == 'xxooooo'\nassert solution('2 3') == 'xx'"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 3') == '++xx+o++'\n\nassert solution('8 3') == 'xxoooooo'\n\nassert solution('10 3') == 'xxoo+oo+oo+o++'"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''8 3\n++xx+x++\n''') == '++xx+o++'\nassert solution('''8 3\n--xx+x++\n''') == '--xxoo+'\nassert solution('''8 3\n++x+++x++\n''') == '++xooo++'\nassert solution('''8 3\nxx+xx+x++\n''') == 'xxoooooo'\nassert solution('''8 3\n--x++x++\n''') == '--xooo+'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([1, 1]) == \"--oo+--\", \"Should be --oo+--\"\nassert solution([1, 0]) == \"--oo+--\", \"Should be --oo+--\"\nassert solution([2, 1]) == \"o+oo--\", \"Should be o+oo--\"\nassert solution([2, 0]) == \"oo+--\", \"Should be oo+--\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    8 3\n    ++x++\n    \"\"\"\n) == \"\"\"\n++x++\n\"\"\".strip()\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"++xx+o++\"\nassert solution(\"8 3\") == \"xxoooooo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([8, 3]) == \"++xx+o++\"\nassert solution([8, 4]) == \"xxooo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8 3\n++xx+x++''') == '++xx+o++'\nassert solution('''8 3\nxxxxxxxx''') == 'xxoooooo'\nassert solution('''10 2\nxx+xxxxx++x+x+xx''') == 'xx+ooooxxxooo+xx'\nassert solution('''10 2\nxx+x+xx+xx''') == 'xx+xx'\nassert solution('''5 3\n+++++++''') == '+++++++'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 7\\n++x+x++\\n\"\n    ) == \"++x+o++\"\nassert solution(\n    \"5 7\\n+x++x++\\nxooxxx+\\n++x+x+x\\n+++x+xx\\n++x+x+x+x\"\n    ) == \"xoooxxx++\"\nassert solution(\n    \"8 3\\n++xx+x++\\n\"\n    ) == \"xxooooo\""
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\n++xx+x++\n--xx+x++\n++xx+x++\n''') == '++xx+x++'\nassert solution('''8\n++xx+x++\n--xx+x++\n++xx+x++\n''') == 'xxooo++'\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Sample Input 1') == 'Sample Output 1'\nassert solution('Sample Input 2') == 'Sample Output 2'"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\nlost is close to lose\n\"\"\") == \"\"\"\nclose: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n\"\"\"[:-1]\n\nassert solution(\"\"\"\nthe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nLost is Close to Lose\n\"\"\") == \"\"\"close: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n\"\"\".strip()\nassert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"clock: oclock\nhe: hen the\nhen: hen when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n''') == 'oclock: clock\\nhen: hen the\\ntill: will\\nwhen: hen\\nwill: till\\ndef solution(stdin: str) -> str:\\n    pass\\n'"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"Sample Input 1:\") == \"close: lose\\the: hen\\nin: inc\\nis: in\\nlose: close lost\\nThe fox said, \\\"When?\\\", \\\"Not till 12 o'clock\\\", \\\"That clock is stopped, it will never strike., he said.\\\"\"\nassert solution(\"Sample Input 2:\") == \"clock: oclock\\the: hen the\\nhen: he when\\nis: it\\nit: is\\ntill: will\\nwhen: hen\\nwill: till\\ndef solution(stdin: str) -> str:\"\n\nSample Input 3:\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\nSample Output 3:\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('lost is close to lose') == 'close: lose', 'First'\nassert solution('The fox said, \"When?\"') == 'clock: oclock', 'Second'"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\") == \"oclock: clock\\the: hen the\\ntill: will\\nwhen: hen\\nwill: till\\ndef solution(stdin: str) -> str:\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"clock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"clock: oclock\\the: hen the\\then: he when\\tis: it\\tis: is\\till: will\\twhen: hen\\twill: till\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\the: hen\""
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10\\n1 2 7 3 8 9 4 5 10 6\\n') == '1'\nassert solution('5\\n3 8 1 9 4 5 2 7 10 6\\n') == '2'\nassert solution('1000\\n3 6 5 7 1 8 9 4 2 10\\n') == '3'\nprint('All test cases passed.')\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('10\\n3 8 1 9 4 5 2 7 10 6') == '2'\nassert solution('50\\n8 9 3 2 6 7 1 4 5') == '3'"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 7 3 8 9 4 5 10 6') == '1 2'\nassert solution('10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('10 3 1 4 2') == '3 1'\nassert solution('2 4 3 1') == '2 3 1 4'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == \"1\"\nassert solution('2') == \"1\"\nassert solution('3') == \"2\"\nassert solution('4') == \"2\"\nassert solution('5') == \"3\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\nassert solution(\"10\\n3 8 1 9 4 5 2 7 10 6\") == \"2\"\nassert solution(\"1000000\\n1\") == \"1\"\nassert solution(\"1000000\\n1 2\") == \"1\"\nassert solution(\"1000000\\n1 2 3\") == \"2\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10\\n1 2 7 3 8 9 4 5 10 6') == '1'\nassert solution('10\\n3 8 1 9 4 5 2 7 10 6') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\\n\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"1 2 7 3 8 9 4 5 10 6\\n\") == \"1 2 7 3 8 9 4 5 10 6\"\nassert solution(\"3 8 1 9 4 5 2 7 10 6\\n\") == \"3 8 1 9 4 5 2 7 10 6\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3') == '1\\n2\\n3'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\n1 2 7 3 8 9 4 5 10 6\n''') == '1'\nassert solution('''\n10\n3 8 1 9 4 5 2 7 10 6\n''') == '2'\n'''\nYou will not be tested for this problem.\n'''"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\""
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '1/1'\nassert solution('0.142857') == '1/7'\nassert solution('1.6 1') == '5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('2.71 2') == '1/11'\nassert solution('-2.71 2') == '-1/11'\nassert solution('-1.6 2') == '-5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\""
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nprint(solution(input()))\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\nassert solution(\"1.6 3\") == \"8/9\"\nassert solution(\"1.6 2\") == \"5/3\"\nassert solution(\"1.6 2.5\") == \"5/3\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1\\n') == '6'\nassert solution('1\\n0 0 0\\n0 0 1\\n1 1 1\\n') == '10'\nassert solution('2\\n0 0 0\\n0 0 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '16'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n0 0 0\n0 0 1\n''') == '6'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 0 0\n0 0 1\n0 0 2\n''') == '6'\nassert solution('''\n3\n0 0 0\n0 0 1\n0 0 2\n''') == '10'\nassert solution('''\n6\n0 0 0\n0 0 1\n0 0 2\n0 0 3\n0 0 4\n0 0 5\n0 0 6\n0 0 7\n0 0 8\n0 0 9\n0 0 10\n0 0 11\n0 0 12\n0 0 13\n0 0 14\n0 0 15\n0 0 16\n0 0 17\n0 0 18\n0 0 19\n0 0 20\n0 0 21\n0 0 22\n0 0 23\n0 0 24\n0 0 25\n0 0 26\n0 0 27\n0 0 28\n0 0 29\n0 0 30\n0 0 31\n0 0 32\n0 0 33\n0 0 34\n0 0 35\n0 0 36\n0 0 37\n0 0 38\n0 0 39\n0 0 40\n0 0 41\n0 0 42\n0 0 43\n0 0 44\n0 0 45\n0 0 46\n0 0 47\n0 0 48\n0 0 49\n0 0 50\n0 0 51\n0 0 52\n0 0 53\n0 0 54\n0 0 55\n0 0 56\n0 0 57\n0 0 58\n0 0 59\n0 0 60\n0 0 61\n0 0 62\n0 0 63\n0 0 64\n0 0 65\n0 0 66\n0 0 67\n0 0 68\n0 0 69\n0 0 70\n0 0 71\n0 0 72\n0 0 73\n0 0 74\n0 0 75\n0 0 76\n0 0 77\n0 0 78\n0 0 79\n0 0 80\n0 0 81\n0 0 82\n0 0 83\n0 0 84\n0 0 85\n0 0 86\n0 0 87\n0 0 88\n0 0 89\n0 0 90\n0 0 91\n0 0 92\n0 0 93\n0 0 94\n0 0 95\n0 0 96\n0 0 97\n0 0 98\n0 0 99\n0 0 100\n0 0 101\n0 0 102\n0 0 103\n0 0 104\n0 0 105\n0 0 106\n0 0 107\n0 0 108\n0 0 109\n0 0 110\n0 0 111\n0 0 112\n0 0 113\n0 0 114\n0 0 115\n0 0 116\n0 0 117\n0 0 118\n0 0 119\n0 0 120\n0 0 121\n0 0 122\n0 0 123\n0 0 124\n0 0 125\n0 0 126\n0 0 127\n0 0 128\n0 0 129\n0 0 130\n0 0 131\n0 0 132\n0 0 133\n0 0 134\n0 0 135\n0 0 136\n0 0 137\n0 0 138\n0 0 139\n0 0 140\n0 0 141\n0 0 142\n0 0 143\n0 0 144\n0 0 145\n0 0 146\n0 0 147\n0 0 148\n0 0 149\n0 0 150\n0 0 151\n0 0 152\n0 0 153\n0 0 154\n0 0 155\n0 0 156\n0 0 157\n0 0 158\n0 0 159\n0 0 160\n0 0 161\n0 0 162\n0 0 163\n0 0 164\n0 0 165\n0 0 166\n0 0 167\n0 0 168\n0 0 169\n0 0 170\n0 0 171\n0 0 172\n0 0 173\n0 0 174\n0 0 175\n0 0 176\n0 0 177\n0 0 178\n0 0 179\n0 0 180\n0 0 181\n0 0 182\n0 0 183\n0 0 184\n0 0 185\n0 0 186\n0 0 187\n0 0 188\n0 0 189\n0 0 190\n0 0 191\n0 0 192\n0 0 193\n0 0 194\n0 0 195\n0 0 196\n0 0 197\n0 0 198\n0 0 199\n0 0 200\n0 0 201\n0 0 202\n0 0 203\n0 0 204\n0 0 205\n0 0 206\n0 0 207\n0 0 208\n0 0 209\n0 0 210\n0 0 211\n0 0 212\n0 0 213\n0 0 214\n0 0 215\n0 0 216\n0 0 217\n0 0 218\n0 0 219\n0 0 220\n0 0 221\n0 0 222\n0 0 223\n0 0 224\n0 0 225\n0 0 226\n0 0 227\n0 0 228\n0 0 229\n0 0 230\n0 0 231\n0 0 232\n0 0 233\n0 0 234\n0 0 235\n0 0 236\n0 0 237\n0 0 238\n0 0 239\n0 0 240\n0 0 241\n0 0 242\n0 0 243\n0 0 244\n0 0 245\n0 0 246\n0 0 247\n0 0 248\n0 0 249\n0 0 250\n0 0 251\n0 0 252\n0 0 253\n0 0 254\n0 0 255\n''') == '10'\nassert solution('''\n5\n0 0 0\n0 0 1\n0 0 2\n0 0 3\n0 0 4\n''') == '6'\nassert solution('''\n5\n0 0 0\n0 0 1\n0 0 2\n0 0 3\n0 0 4\n''') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1\\n') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"2\") == \"10\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '15'\nassert solution('5') == '18'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n0 0 0\n''') == '6'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '10'\nassert solution('''\n3\n0 0 0\n0 0 1\n0 1 2\n''') == '15'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n0 0 0\\n0 0 1\\n\") == \"6\"\nassert solution(\"2\\n0 0 0\\n0 0 1\\n\") == \"10\""
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n5\n-1 2 -1\n2 2\n1 -1 1\n\"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"\n10\n-1 2 -1\n-1 2 2\n-1 -1 1\n1 2 -1\n-1 4 -1\n-1 -1 -1\n1 -1 1\n-1 -1 -1\n1 -1 -1\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input_1) == \"1\"\nassert solution(sample_input_2) == \"1\"\nassert solution(input_data) == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5\\n-1 2 -1\\n2 2\\n1 -1 1\\n\") == \"1\"\nassert solution(\n    \"6\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\\n\") == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n-1 2 -1\\n2 2\\n1 -1 1') == '1'\nassert solution('7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"6\") == \"1\"\n\nprint(solution(open(\"input.txt\").read()))\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1', \"Wrong!\"\nassert solution('4') == '2', \"Wrong!\""
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n-1 2 -1\\n2 2\\n1 -1 1\\n\") == \"1\"\nprint(solution(\"7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\\n\"))\n\"\"\"\n\n\"\"\"\n-1\n-2\n-3\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n\"\"\""
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n-1 2 -1\\n2 2') == '1'\nassert solution('7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\\n') == '1'\nassert solution('10\\n-1 -1 2 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 2 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('01') == '2'\nassert solution('100') == '4'\nassert solution('10011') == '4'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1001') == \"3\"\nassert solution('1111') == \"1\"\nassert solution('1011') == \"2\"\n\n\"\"\""
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1001\") == \"3\"\nassert solution(\"1111\") == \"1\""
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\nassert solution('10') == '1'\nassert solution('11') == '0'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n1''') == '2'\nassert solution('''0\n0''') == '1'\nassert solution('''1\n1''') == '2'\nassert solution('''1\n2''') == '2'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"LLL\"\n\nassert solution(\"\"\"\n5\n1 2 2 1 2\n\"\"\") == \"LLRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1') == 'LLL'\nassert solution('2 1 1') == 'LLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 2 1 2\n''') == \"LLRLL\"\nassert solution('''10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n''') == \"RRLLRLLRLLRRLLRRLRRRLLRLLRRLLRLLRRLLRRLRLLRRLRRLLRRLLRRLRRLLRRRRLLRRLRRLLRRRLLRRRRLLRRRLLRRRLRRRLRRRRRLLRRRRRLLRRRRLRRRLRRRLLRRRRLRRRRRLLRRRLRRRRRRRRRRLRRRRRRLRRRLLRRRRLRRRRRLRRRRRLLRRRRRRLRRRRLRRRRRLRRRRRRLRRRRRLLRRRRRLRRRLLRRRRLRRRRLLRRRLRRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRLRRRRRLRRRLRRRRRLLRRRRRRLRRRRLRRRRRRLRRRLRRRRRRRRLRRRRRLLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRR"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"LLRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"LLL\"\nassert solution(\"4\") == \"LLRR\"\nassert solution(\"5\") == \"LLRLL\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"LLRLLRLL\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"LLL\"\nassert solution(\"4\") == \"RLRR\"\nassert solution(\"5\") == \"LLRRRLL\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1\\n') == 'LLL'\nassert solution('5 1 2 2 1\\n') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 1 1\n''') == 'LLL'\nassert solution('''5\n1 2 2 1 2\n''') == 'LLRLR'\nassert solution('''9\n1 1 1 2 1 1 1 1 1\n''') == 'LLLLRRLLRR'\nassert solution('''10\n1 1 1 2 1 1 1 1 1\n''') == 'LLRRLLRRLL'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 1 1\n''') == 'LLL'\nassert solution('''\n5\n1 2 2 1 2\n''') == 'LLRLR'"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 10 7') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 6 7') == '25000000000021'\nassert solution('7 7 10') == '49000000000070'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3,2,1]) == \"Poor girl!\"\nassert solution([7,7,10]) == \"49000000000070\""
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6 7') == '49000000000070'\nassert solution('7 7 10') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'Poor girl'\nassert solution('''\n5 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '49000000000070'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([6, 7, 9]) == 'Poor girl!'\nassert solution([3, 4, 3]) == 'Poor girl!'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '49000000000070'\nassert solution('''\n7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '25000000000021'\nassert solution('''\n8 8 9\n1 2 1000000\n2 3 1000000\n3 4 5000000\n4 5 6000000\n5 6 7000000\n6 7 8000000\n7 1 8000000\n''') == '1000000000000'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000''') == '49000000000070'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\nassert solution('1 2 1000000') == 'Poor girl'\nassert solution('2 3 2000000') == 'Poor girl'\nassert solution('3 4 3000000') == 'Poor girl'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"Yeah!\\n2\\n1\\n2\\n2\\n3\\n3\\n\"\nassert solution(\"3 3\\n0 2\\n1 3\\n2 1\\n1 2\\n3 0\\n\") == \"Yeah!\\n2\\n1\\n2\\n2\\n3\\n3\\n\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2\\n2 1\\n0 0\\n2 2\\n1 0') == 'Yeah!'\nassert solution('5 5\\n0 1\\n1 0\\n2 3\\n3 2\\n4 4\\n4 0\\n5 3\\n3 3\\n4 2\\n2 1\\n0 0\\n5 2\\n2 4\\n4 1\\n5 0\\n1 0\\n3 4\\n5 4\\n4 3\\n3 2\\n2 1\\n1 0\\n2 2\\n3 4\\n2 0\\n2 3\\n1 1\\n1 0\\n2 0\\n0 0') == '0'\nassert solution('5 5\\n0 1\\n1 0\\n2 3\\n3 2\\n4 4\\n4 0\\n5 3\\n3 3\\n4 2\\n2 1\\n0 0\\n5 2\\n2 4\\n4 1\\n5 0\\n1 0\\n3 4\\n5 4\\n4 3\\n3 2\\n2 1\\n1 0\\n2 2\\n3 4\\n2 0\\n2 3\\n1 1\\n1 0\\n2 0\\n0 0') == '0'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4') == '2\\n2\\n0\\n1\\n2\\n2'"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"Yeah!\"\nassert solution(\"4 5\") == \"Yeah!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4') == '2'\nassert solution('4 4') == '2'\nassert solution('4 4 1 1 2 3 3 2 2') == '2'\nassert solution('4 4 1 1 2 3 3 2 2') == 'Yeah!'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == '2\\n'\nassert solution('4 4') == '2\\n'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 4\n0 1\n1 0\n2 3\n3 3''') == 'Yeah!'\nassert solution('''2 4\n0 1\n1 0\n2 3\n3 3\nSample Input 3:\n3 4\n0 1\n1 0\n2 3\n3 2\nSample Output 3:\n1\n2\n0\n1\n2\n2\n\n''') == '1'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"2\\n2\\n0\\n1\\n2\\n2\\n3\\n\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"2\\n0\\n1\"\nassert solution(\"5 5\") == \"1\\n0\\n1\\n0\\n1\"\nassert solution(\"5 5\") == \"1\\n0\\n1\\n0\\n1\""
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1 2\\n') == 'POSSIBLE'\nassert solution('2\\n1 2\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\n') == 'POSSIBLE\\n1 3\\n2 3'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'IMPOSSIBLE'\nassert solution('3') == 'POSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'POSSIBLE'\nassert solution('2') == 'IMPOSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n') == 'POSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\", \"Just testing\"\nassert solution(\"3\") == \"POSSIBLE\", \"Just testing\"\nassert solution(\"2\") == \"POSSIBLE\", \"Just testing\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"POSSIBLE\"\nassert solution(\"1 1 2\") == \"POSSIBLE\"\nassert solution(\"2 1 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1 1\\n') == 'POSSIBLE\\n1 3\\n2 3\\n'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 2\\n\") == \"POSSIBLE\"\nassert solution(\"2\\n1 2\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\") == \"POSSIBLE\"\nassert solution(\"3\\n1 1 2\") == \"IMPOSSIBLE\"\nassert solution(\"4\\n2 1 3 2\") == \"POSSIBLE\""
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nprint('all tests passed')\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0 0 0\n1 0 0\n0 1 0\n0 0 1\n''') == '0.5 0.5 0.5'\nassert solution('''\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\n''') == '0.0 0.0 -0.0'\nassert solution('''\n0 0 0\n1 0 0\n0 1 0\n0 0 1\n''') == '0.5 0.5 0.5'\nassert solution('''\n0 0 0\n-1 0 0\n0 1 0\n0 0 1\n''') == '0.0 0.0 0.0'\nassert solution('''\n-1 0 0\n0 0 0\n1 0 0\n0 0 1\n''') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0\") == \"0.5 0.5 0.5\", \"First Test Case\"\nassert solution(\"1 0 0\") == \"1.0 0.0 0.0\", \"Second Test Case\"\nassert solution(\"0 1 0\") == \"0.0 0.0 1.0\", \"Third Test Case\"\nassert solution(\"0 0 1\") == \"0.0 0.0 0.0\", \"Fourth Test Case\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0 0 0\n1 0 0\n0 1 0\n0 0 1\n''') == '0.5 0.5 0.5'\nassert solution('''\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\n''') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\""
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"0.0 0.0 -0.0\"\nassert solution(\"\"\"\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"0.5 0.5 0.5\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n9 9 9 9 9\n''') == '5'\nassert solution('''\n10\n2 2 2 2 2 2 2 2 2\n''') == '8'\nassert solution('''\n2\n17 17 17\n''') == '0'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n6 2 3 2 2 2 1 5 6\n''') == '2'\nassert solution('''10\n3 6 2 3 2 2 2 1 5 6\n''') == '2'\nassert solution('''5\n3 6 2 3 2 2 1 5 6\n''') == '3 2 2 1 5'\nassert solution('''7\n3 6 2 3 2 2 1 5 6\n''') == '3 2 2 1 5'\nassert solution('''7\n3 6 2 3 2 2 1 5 6\n''') == '2 2 1 5'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n3 6 2 3 2 2 2 1 5 6\nSample Output 1:\n2\n3 2 2 1 5\n3 2 2\n6 6\n\"\"\") == \"\"\"\n3\n2 2 2 1 5\n3 2 2\n6 6\n\"\"\".strip()\n\nassert solution(\"\"\"\n4\n7 8 9 10 11 12 13 14\nSample Output 2:\n0\n7 8 9 10 11\n7 8 9 10\n10 11 12 13\n10 11 12\n13 14\n\"\"\") == \"\"\"\n0\n7 8 9 10 11\n7 8 9 10\n10 11 12 13\n10 11 12\n13 14\n\"\"\".strip()\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0 2'\nassert solution('3') == '2 1 2'\n\"\"\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 2\n3''') == '2'\nassert solution('''1\n2''') == '1'\nassert solution('''5\n1 1 1 2 2\n5''') == '5'\nassert solution('''5\n1 2 1 1 1\n4''') == '3'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"10\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3 10\") == \"3 10\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"3 2\"\nassert solution(\"2\") == \"3 2\"\nassert solution(\"3\") == \"3 2 1\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0\\n1\\n2\"\nassert solution(\"10\") == \"2\\n2\\n1\""
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n3 6 2 3 2 2 2 1 5 6\n''') == '2'\nassert solution('''\n3\n17 17 17\n''') == '0'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n3 6 2 3 2 2 2 1 5 6\n3 2 2 1 5 6\n''') == '2'\nprint('All test cases passed...')"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == '74.6666666667'\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE'\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n2 3\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 1') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == '74.6666666667'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 1') == 'IMPOSSIBLE'\nassert solution('3 2 1') == '74.6666666667'"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('\\n'.join(['3 2 1', '1 2 7', '2 3 8', '1'])) == 'IMPOSSIBLE'\nassert solution('\\n'.join(['3 2 1', '1 2 7', '2 3 8', '1'])) == '74.6666666667'\nassert solution('\\n'.join(['3 2 1', '1 2 7', '2 3 8', '1'])) == '75.0'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE'\nprint(solution('''\n1 1 1\n1\n'''))\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\") == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == '74.6666666667'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 1\\n1 2 7\\n2 3 8\\n1') == \"IMPOSSIBLE\"\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\") == \"74.6666666667\"\nprint(\"All test cases passed\")"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n''') == '1'\n\nassert solution('''7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n''') == '2'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\n\"\"\"\n\nN, E = map(int, input().split())\nedges = [[] for _ in range(N)]\nfor i in range(E):\n    a, b = map(int, input().split())\n    edges[a-1].append(b-1)\n    edges[b-1].append(a-1)"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"7 7\") == \"1\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\\n') == '1\\n2\\n1\\n2\\n2\\n1\\n'"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '1'\nassert solution('7 7') == '2'\n\"\"\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"7 7\") == \"2\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"7 7\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_test_1) == \"1\\n2\\n1\\n2\\n1\\n2\\n1\"\nassert solution(input_test_2) == \"0\\n0\\n1\\n1\\n2\\n2\\n1\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"7 7\") == \"2\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_stdin()) == \"1\"\nassert solution(input_stdin()) == \"1\"\nprint(\"Congratulations! Your solution is correct.\")\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n0\n0\n0''') == '3'\nassert solution('''4\n2\n1\n0\n3\n0\n4\n''') == '2'\nassert solution('''5\n2\n1\n0\n3\n0\n4\n''') == '3'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n10 5 10\\n0\\n15\\n30\\n45\\n') == '10'\nassert solution('4\\n10 5 10\\n0\\n15\\n30\\n45\\n') == '5'\nassert solution('4\\n10 5 10\\n0\\n15\\n30\\n45\\n') == '10'\nassert solution('4\\n10 5 10\\n0\\n15\\n30\\n45\\n') == '10'\nassert solution('4\\n10 5 10\\n0\\n15\\n30\\n45\\n') == '5'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 10 2') == '10'\nassert solution('4 10 3') == '5'\n\nimport re\nprint(solution(re.sub(r\"([^\\d]+)(\\d+)\", r\"\\1\\2\", stdin)))\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 10 2\n0\n15\n30\n45\n''') == '10'\n\nassert solution('''4 10 3\n0\n15\n30\n45\n''') == '5'\n\nassert solution('''5 10 2\n0\n15\n30\n45\n''') == '10'\n\nassert solution('''10 10 3\n0\n15\n30\n45\n''') == '5'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 10 2\n0\n15\n30\n45\n''') == '10'\nassert solution('''6 3\n1\n3\n5\n7\n9\n''') == '7'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"6\"\nassert solution(\"30\") == \"14\"\nassert solution(\"50\") == \"25\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"10\"\nassert solution([4, 10, 3]) == \"5\"\nprint(\"ALL TEST CASES PASSED\")"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(t1) == \"10\"\nassert solution(t2) == \"5\""
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4 10 2\n0\n15\n30\n45\"\"\") == \"10\"\nassert solution(\"\"\"4 10 3\n0\n15\n30\n45\"\"\") == \"5\""
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 10 2\n0\n15\n30\n45\n''') == '10'\nassert solution('''\n4 10 3\n0\n15\n30\n45\n''') == '5'\nprint('Tests Passed!')\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n50 50 50\n25 25 25''') == '1'\nprint(solution('''4 3\n200 100 300 400\n50 50 50 50\n300 50 50 50\n50 50 100 50'''))"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 2\n50 50 75\n25 25 25\n''') == '2'\n\nassert solution('''5 2\n50 50 50 50\n25 25 25 25\n''') == '1'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 2\n50 50 75\n25 25 25 25\n10 10 10 10\n2 5 2\n6 5 1\n5 5 2''') == '1'\nassert solution('''10 2\n100 100 100 100\n25 25 25 25 25\n15 15 15 15 15\n8 8 8 8 8\n8 8 8 8 8\n6 6 6 6 6\n6 6 6 6 6\n5 5 5 5 5\n4 4 4 4 4\n3 3 3 3 3\n3 3 3 3 3\n2 2 2 2 2\n2 2 2 2 2''') == '2'\nprint('all test cases passed')"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n3 3 2\\n2 5 1\\n') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1\\n5 25\\n10 50\\n20 30\\n30 50\\n') == '3'\nassert solution('4 2\\n50 50 75\\n25 25 25\\nSample Output 2:\n1\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\n50 50 75\n25 25 25\n''') == '2'\nassert solution('''\n5 2\n50 50 50 50\n25 25 25 25\n''') == '1'\nassert solution('''\n6 2\n40 45 44 47 43\n11 12 13 20 19 17\n''') == '3'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 2\n50 50 75\n25 25 25\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2\n10 5 10\n20 20 10\n5 20 20\n5 5 20\n10 10 5\n10 20 10\n10 10 10''') == '1'\nassert solution('''10 2\n25 10 25 10\n10 10 25 10\n20 20 20 20\n10 10 20 10\n20 20 10 20\n10 10 20 20\n10 10 20 10''') == '9'\nassert solution('''10 2\n10 10 10 10\n10 10 10 10\n20 20 20 20\n10 10 20 10\n20 20 20 20\n10 10 20 20\n10 10 20 10\n20 20 20 20\n10 10 20 20''') == '9'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4\\n.LX.\\n.X..\\n....\\n.L..') == '1'\nassert solution('4 4\\n.X.L\\n.X..\\n.X.L\\n.X..') == '2'\nassert solution('4 4\\nX.LX\\n.X..\\n.X.L\\n.X..') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n.LX.\\n.X..\\n....\\n.L..\") == \"1\"\nassert solution(\"4 4\\n.X..\\n.X..\\n...L\\n.X..\") == \"2\""
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n...L\n.X..''') == '1'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4\\n.LX.\\n.X..\\n...L\\n.X..') == '1'\nassert solution('4 4\\n.XLX\\n.X..\\n...L\\n.X..') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n....\n.L..\n''') == \"1\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n.X..\n.X..''') == '1'\nassert solution('''4 4\n.XLX\n.X..\n...L\n.X..''') == '2'"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n.L.L\n.LL\nLL.L\nLLLLLL.LL\nL.LLLLLL.LL\n''') == '1'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"1\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n.X.\n.X..\n...L\n.X..\n''') == \"1\"\nassert solution('''\n3 4\n.L.\n.X..\n...L\n.X..\n''') == \"0\"\nassert solution('''\n1 1\n.X.\n''') == \"1\"\nassert solution('''\n2 2\n.X.\n''') == \"1\"\nassert solution('''\n4 4\n.X.\n.X.\n....\n.X..\n''') == \"1\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n.X..\n...L\n.L..\n''') == '1'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_data) == 'home'\n\nstdin = \"\"\"\n3 2 1\n1 1\n2 0 2\n2 1 3\n1 2\n\"\"\"\nassert solution(stdin) == 'home'\n\nstdin = \"\"\"\n7 3 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n1 2\n\"\"\"\nassert solution(stdin) == 'detention'\n\nstdin = \"\"\"\n8 5 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n1 2\n2 2 4\n2 2 5\n1 3\n\"\"\"\nassert solution(stdin) == 'home'\n\nstdin = \"\"\"\n12 5 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n2 2 5\n2 3 6\n1 3\n1 2\n2 2 4\n2 2 5\n1 3\n1 2\n1 4\n2 4 5\n2 5 6\n1 4\n\"\"\"\nassert solution(stdin) == 'home'\n\nstdin = \"\"\"\n1 1\n3\n1 2 3\n\"\"\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"home\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'\n\nSample Input 3:\n20 0 0\n0 1\n1 1\n0 1\n0 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n0 9\n1 10\n1 11\n1 12\n1 13\n1 14\n0 15\n1 16\n1 17\n0 18\n1 19\n0 20\n1 21\n0 22\n1 23\n0 24\n1 25\n1 26\n1 27\n0 28\n0 29\n1 30\n1 31\n1 32\n1 33\n0 34\n1 35\n0 36\n0 37\n1 38\n1 39\n1 40\n1 41\n1 42\n1 43\n0 44\n1 45\n0 46\n0 47\n1 48\n0 49\n1 50\n0 51\n1 52\n0 53\n1 54\n0 55\n1 56\n0 57\n1 58\n0 59\n1 60\n1 61\n1 62\n0 63\n1 64\n1 65\n1 66\n1 67\n0 68\n1 69\n0 70\n0 71\n1 72\n1 73\n0 74\n1 75\n0 76\n0 77\n1 78\n1 79\n0 80\n1 81\n1 82\n1 83\n1 84\n1 85\n0 86\n1 87\n0 88\n0 89\n1 90\n1 91\n1 92\n1 93\n0 94\n1 95\n1 96\n1 97\n0 98\n1 99\n0 100\n0 101\n1 102\n1 103\n1 104\n1 105\n0 106\n1 107\n0 108\n1 109\n1 110\n1 111\n1 112\n0 113\n1 114\n1 115\n1 116\n1 117\n1 118\n1 119\n0 120\n1 121\n0 122\n1 123\n1 124\n1 125\n1 126\n1 127\n0 128\n1 129\n0 130\n1 131\n1 132\n1 133\n0 134\n1 135\n0 136\n0 137\n1 138\n1 139\n1 140\n1 141\n0 142\n1 143\n1 144\n1 145\n1 146\n1 147\n0 148\n1 149\n1 150\n1 151\n0 152\n1 153\n1 154\n1 155\n1 156\n1 157\n1 158\n1 159\n1 160\n1 161\n1 162\n1 163\n1 164\n1 165\n0 166\n1 167\n1 168\n1 169\n1 170\n1 171\n1 172\n0 173\n1 174\n1 175\n1 176\n1 177\n1 178\n1 179\n1 180\n1 181\n1 182\n1 183\n1 184\n1 185\n1 186\n1 187\n1 188\n1 189\n1 190\n1 191\n1 192\n1 193\n1 194\n1 195\n1 196\n1 197\n1 198\n1 199\n1 200\n1 201\n1 202\n1 203\n1 204\n1 205\n1 206\n1 207\n1 208\n1 209\n1 210\n1 211\n1 212\n1 213\n0 214\n1 215\n1 216\n1 217\n1 218\n1 219\n1 220\n1 221\n1 222\n1 223\n0 224\n1 225\n0 226\n1 227\n1 228\n1 229\n1 230\n1 231\n1 232\n1 233\n1 234\n1 235\n1 236\n1 237\n1 238\n1 239\n1 240\n1 241\n1 242\n1 243\n1 244\n1 245\n1 246\n1 247\n1 248\n1 249\n1 250\n1 251\n1 252\n1 253\n1 254\n1 255\n1 256\n1 257\n1 258\n1 259\n1 260\n1 261\n1 262\n1 263\n1 264\n1 265\n1 266\n1 267\n1 268\n1 269\n1 270\n1 271\n1 272\n1 273\n1 274\n1 275\n1 276\n1 277\n1 278\n1 279\n1 280\n1 281\n1 282\n1 283\n1 284\n1 285\n1 286\n1 287\n1 288\n1 289\n1 290\n1 291\n1 292\n1 293\n1 294\n1 295\n1 296\n1 297\n1 298\n1 299\n0 300\n1 301\n1 302\n1 303\n1 304\n1 305\n1 306\n1 307\n1 308\n1 309\n1 310\n1 311\n1 312\n1 313\n1 314\n1 315\n1 316\n1 317\n1 318\n1 319\n1 320\n1 321\n1 322\n1 323\n0 324\n1 325\n1 326\n1 327\n1 328\n1 329\n1 330\n1 331\n1 332\n1 333\n1 334\n1 335\n1 336\n1 337\n1 338\n1 339\n1 340\n1 341\n1 342\n1 343\n1 344\n1 345\n1 346\n1 347\n1 348\n1 349\n1 350\n1 351\n1 352\n1 353\n1 354\n1 355\n1 356\n1 357\n1 358\n1 359\n1 360\n1 361\n1 362\n1 363\n1 364\n1 365\n1 366\n1 367\n1 368\n1 369\n1 370\n1 371\n1 372\n1 373\n1 374\n1 375\n1 376\n1 377\n1 378\n1 379\n1 380\n1 381\n1 382\n1 383\n1 384\n1 385\n1 386\n1 387\n1 388\n1 389\n1 390\n1 391\n1 392\n1 393\n1 394\n1 395\n1 396\n1 397\n1 398\n1 399\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2 1') == 'home'\nassert solution('4 2 1') == 'home'\nassert solution('5 2 1') == 'detention'\nassert solution('4 2 1') == 'detention'\nassert solution('5 2 2') == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2 1') == 'home'\nassert solution('5 2 1') == 'home'\nassert solution('3 2 3') == 'detention'\nassert solution('4 2 2') == 'detention'\nassert solution('6 2 2') == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3''') == 'home'\nassert solution('''5 2 2\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n4 3''') == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n') == 'home'\nassert solution('6 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n3 2 5\\n1 3\\n') == 'detention'\nassert solution('8 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n3 2 5\\n3 2 6\\n1 3\\n') == 'home'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'\nprint('Tests passed')\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"home\"\nassert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\") == \"detention\"\nassert solution(\"10 1 1\\n1 1\\n1 2\\n2 1\\n2 1\") == \"home\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"allatral\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\nt"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"tralalal\") == \"allatral\", \"1\"\nassert solution(\"zzzz\") == \"-1\", \"2\"\nassert solution(\"tralalal\") == \"tralalal\", \"3\""
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''abc\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"-1\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('tralalal') == 'allatral'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"allatral\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aaabaaaaa') == 'aaabaaaaa'\nassert solution('aaa') == 'aaa'\nassert solution('aaaa') == '-1'\nassert solution('aabaaa') == 'aaabaaa'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '5'\nassert solution('3 2 1 6 4 5') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n''') == '5'\nassert solution('''\n6\n3 2 1 6 4 5\n''') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('1') == '0'\nassert solution('5') == '4'\n\n'''\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"8\""
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 2 3 4\n3\n1 2\n1''') == '2'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('6\\n3 2 1 6 4 5') == '8'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '18'\nassert solution('100\\n1 2 3 4 5 6 7 8 9 10') == '22'"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('6\\n3 2 1 6 4 5') == '8'"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'\nassert solution('3 2 1 6 4 5') == '8'\nassert solution('123456789') == '86'\nassert solution('123456789 100') == '65'"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n10\n''') == '1'\nassert solution('''\n4\n10\n''') == '2'\nassert solution('''\n3\n10\n''') == '1'\nassert solution('''\n5\n10\n''') == '2'\nassert solution('''\n6\n10\n''') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47''') == '1'\n\nassert solution('''8\n3\n3\n3\n2\n2\n2\n1\n1\n2\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n2\n1\n1\n1\n1\n1''') == '2'\n\nassert solution('''44\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1''') == '1'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('523') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '2'\nassert solution('7') == '5'\nassert solution('10') == '7'\nassert solution('100') == '10'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n14\n''') == '1'\nassert solution('''\n3\n''') == '1'\nassert solution('''\n4\n''') == '2'\nassert solution('''\n7\n''') == '4'\nassert solution('''\n54\n''') == '6'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"47\") == \"1\"\nassert solution(\"523\") == \"2\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('47\\n') == '1'\nassert solution('523\\n') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('47') == '1'\nassert solution('523') == '2'\n\"\"\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5') == '0'\nassert solution('3 1 5') == '0'\nassert solution('2 2') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\nassert solution('4 5') == '0'\nassert solution('8 5') == '1'\nassert solution('100 6') == '99999'\nassert solution('99999 6') == '99999'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"4 5\") == \"0\""
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5') == '0'\nassert solution('2 2') == '1'\nassert solution('0 1 10') == '0 1 10'\nassert solution('1 2 10') == '1 2 10'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n2 2\n0 1 20\n1 0 5\n'''\n) == '1 0 5'\nassert solution(\n'''\n3 4\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n'''\n) == '1 0 5'\nassert solution(\n'''\n5 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n'''\n) == '2 0 20'\nassert solution(\n'''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n'''\n) == '3 2 10'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 5') == '0 1 10'\nassert solution('2 2 5') == '1 0 5'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2\\n0 1 20\\n1 0 5\\n') == '1 0 5\\n0 1 15'"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"0\\n1 15\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '1 0 15'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5\\n1 2 3 5\\n2 3') == '1'\nassert solution('5 3\\n1 3 2 1 5\\n1 3') == '5'\nassert solution('5 3\\n1 3 2 1 5\\n2 3') == '3'\nassert solution('4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n4 5\\n5 5') == '2'\nassert solution('10 3\\n1 3 2 1 5\\n1 3') == '10'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 4\\n4 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4') == '1'\nassert solution('5 4\\n4 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5') == '1'\nprint('all passed')\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"5 6\") == \"5\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6\\n1 3 2 1 5\\n1 3') == '5'\nassert solution('4 3\\n4 4 8 12') == '1'\nassert solution('6 5\\n5 6 8 12 9 10\\n10 6\\n9 9\\n8 6\\n7 5\\n6 5\\n5 6\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n6 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'\nassert solution('4 4 8 12') == '2'\nprint('You passed all tests!')"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\nassert solution(\"4 3\") == \"1\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\n''') == '5'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n4 3 2 1 5') == '5'\nassert solution('5 6\\n1 3 2 1 5') == '5'\nassert solution('10\\n4 3 2 1 5\\n4 3 2 1 5') == '5'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"5 6\") == \"4\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"4 4 8 12\") == \"5\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'\nassert solution('4 4 8 12') == '3'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(test) == '7'\nassert solution(input) == '24'\nassert solution('1311') == '24'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"0210200\"\n) == \"7\"\n\nassert solution(\n    \"11\"\n) == \"1\""
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1000000000''') == '1000000000'\n\nassert solution('''\n1\n100000000''') == '999999999'\n\nassert solution('''\n1\n10000000000''') == '9999999999'\n\nassert solution('''\n1\n1000000000000''') == '999999999999'\n\nassert solution('''\n1\n10000000000000''') == '99999999999999'"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('020302') == '7'\nassert solution('1311') == '24'\n\nassert solution
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"02210\") == \"4\"\nassert solution(\"1311\") == \"24\""
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0123456789') == '1'\nassert solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789') == '1'\nassert solution('1234') == '4'\nassert solution('123445') == '5'\nassert solution('123445678') == '10'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('020302') == '7'\nassert solution('1311') == '24'\nassert solution('13112') == '25'\nassert solution('131112') == '25'\nassert solution('1311212') == '25'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '1234',\n) == '1234', \"First\"\nassert solution(\n    '2222',\n) == '0', \"Second\"\nassert solution(\n    '1311',\n) == '1', \"Third\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('021302') == '7'\nassert solution('1311') == '24'\nassert solution('112') == '1'"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '7'\nassert solution(input()) == '24'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 10') == '3 1 3 10'\nassert solution('5 20') == '1 15 5 15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 20\\n###########.#.#.#.\\n###########...#.###.\\n##########..##.#..##.\\n###########.###...#.##\\n###########.###...#.###\\n##########.###...#.###') == '1 15 5 15'\nassert solution('3 10\\n###########.#.\\n###########.###\\n##########.###') == '3 1 3 10'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 10\") == \"3 1 3 10\"\nassert solution(\"5 20\") == \"1 15 5 15\"\nassert solution(\"1 1 10\") == \"2 3 4 5\"\nassert solution(\"1 1 1\") == \"2 3 4 5\"\n\nassert solution(\"2 1 1\") == \"1 1 1\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 6\\n#.##...#.\\n##...##.\\n##...#..\\n##...###.\\n#.##.##.\\n##...##.\\n##...##.\\n') == '1 15 5 15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 10') == '3 1 3 10'\nassert solution('5 20') == '1 15 5 15'"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\\n') == '1 1 3 10'\n\nassert solution('5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##.\\n###########..#.#.##.##.\\n###########.###...#.##.\\n') == '1 15 5 15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 20') == '1 15 5 15'"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\nassert solution(\"100 0.00153797\") == \"100.00153797\"\nassert solution(\"123 0.00153797\") == \"123.00153797\"\nassert solution(\"1000 0.00153797\") == \"1000.00153797\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n\nfor i in range(1,20):\n    print(solution(f'{i} 1.000'))\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '16.339203308'\nassert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''50 0.125\n201 1.000''') == '16.339203308'\nprint('Almost there!') if abs(__import__('code').run(__import__('path').realpath(__file__),'solution', globals(), locals(), ['solution']) - __import__('code').run(__import__('path').realpath(__file__),'solution', globals(), locals(), ['solution']) < 10**-6 else print(abs(__import__('code').run(__import__('path').realpath(__file__),'solution', globals(), locals(), ['solution']) - __import__('code').run(__import__('path').realpath(__file__),'solution', globals(), locals(), ['solution']) < 10**-6)\nprint('TESTS PASSED')\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n0.5 1\n''') == '2'\n\nassert solution('''\n4 3\n1 11\n0.4 1\n''') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 1\n0.5 1\n''') == '2'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 3') == '3'\nassert solution('5 7') == '4'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 4') == '1'\nassert solution('10 10') == '7'\nassert solution('15 15') == '13'\nassert solution('25 25') == '13'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 1\n0.5 1\n\"\"\") == \"2\"\nassert solution(\"\"\"4 3\n1 11\n0.4 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 2 1\") == \"2\"\nassert solution(\"4 3\") == \"3\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2\\n0.5 1') == '2'\nassert solution('4 3\\n1 11\\n0.4 1') == '3'\n'''\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n0.5 1\\n') == '2'\nassert solution('4 3\\n1 11\\n') == '3'\n\"\"\"\nimport math\nimport re"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '10.5'\nassert solution([]) == '-1'\nassert solution(['7', '1']) == '10.5'\nassert solution(['10', '0']) == '-1'\nassert solution(['3', '2']) == '10.5'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"10.5\"\nassert solution(\"1\\n7 1\\n3 2\\n10 0\\n\") == \"10.5\"\nassert solution(\"1\\n0 1\\n0 2\\n10 0\\n\") == \"-1\"\nassert solution(\"0\\n1 1\\n3 2\\n10 0\\n\") == \"10.5\"\nassert solution(\"1\\n1 1\\n2 2\\n10 0\\n\") == \"10.5\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '10.5'\nassert solution('3') == '-1'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '10.5'\nassert solution('3') == '-1'\nassert solution('2') == '0.5'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '10.5'\nassert solution('3') == '-1'\nassert solution('3') == '-1'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2.5'\nassert solution('4') == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 0\n2 1\n3 2\n0 3''') == '-1'\nassert solution('''10\n1 0\n2 1\n3 2\n0 3''') == '10.5'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n4 1\n4 2\n4 0\n''') == '-1'\nassert solution('''\n6\n6 1\n6 2\n5 0\n''') == '12.0'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n7 1\\n3 2\\n10 0\\n') == '10.5'\nassert solution('3\\n7 1\\n3 2\\n10 0\\n') == '-1'\nassert solution('0\\n0 0\\n') == '0'\nassert solution('0\\n0 0\\n') == '-1'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"10.5\"\nassert solution(\"3\\n7 1\\n3 2\") == \"10.5\"\nassert solution(\"3\\n2 1\\n4 0\\n0 3\") == \"-1\""
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '1'\nassert solution('2 0.5\\n2 0.5\\n1 0.5') == '1'\nassert solution('1 0.5\\n2 0.5\\n1 0.5') == '0'\nassert solution('1 0.5\\n1 0.5\\n2 0.5') == '0'\nassert solution('1 0.5\\n2 0.5\\n2 0.5') == '0'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 0.5\") == \"1\"\nassert solution(\"2 0.5\") == \"2\"\nassert solution(\"2 0.51\") == \"2\"\nassert solution(\"1 0.49\") == \"2\""
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '1'\nprint('All test cases passed!')"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 0.5') == '1'\nassert solution('2 0.5') == '1'\nassert solution('2 0.51') == '2'\nassert solution('1 0.49') == '2'"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\nassert solution('1000000') == '1000000'\n\"\"\"\nimport math"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 0.5\\n2 0.5\\n1 0.5') == '1'\nassert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 0.5\n2 0.51\n1 0.49''') == '1'\nassert solution('''5 0.5\n5 0.51\n1 0.49\n4 0.49\n3 0.49''') == '4'\nassert solution('''5 0.5\n5 0.51\n1 0.49\n4 0.49\n3 0.49\n3 0.5''') == '2'\nassert solution('''6 0.5\n6 0.51\n1 0.49\n4 0.49\n3 0.49\n3 0.51''') == '3'\nassert solution('''6 0.5\n6 0.51\n1 0.49\n4 0.49\n3 0.49\n3 0.51''') == '3'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49\\n') == '2'\nassert solution('1\\n2 0.5\\n1 0.49\\n') == '2'\nassert solution('10\\n1 0.5\\n9 0.5\\n5 0.5\\n6 0.5\\n1 0.5\\n') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\nassert solution(\"2 0.5\\n2 0.51\\n1 0.51\") == \"1\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n\"\"\") == \"yes\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5 2') == 'yes', 'test 1 failed'\nassert solution('4 2 4') == 'no', 'test 2 failed'\nassert solution('4 5 2') == 'no', 'test 3 failed'\nassert solution('5 4 4') == 'no', 'test 4 failed'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'yes'\nassert solution('''\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\nSample Output 3:\nno\n''') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    4 5 2\n    3 3 3 3\n    0 1\n    0 3\n    1 3\n    1 2\n    2 3\n    \"\"\"\n) == \"yes\"\n\nassert solution(\n    \"\"\"\n    10 1\n    8 9 7 9 7\n    0 1\n    2 3\n    5 6\n    6 7\n    7 8\n    9 10\n    0 11\n    1 12\n    2 13\n    3 14\n    4 15\n    \"\"\"\n) == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"yes\"\n\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == \"yes\"\nprint(solution('''\n5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n'''))\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"no\"\nassert solution(\"5 4 4\") == \"yes\"\nassert solution(\"3 3 3 3\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n') == 'yes\\n'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4 4\") == \"yes\"\nassert solution(\"3 3 3 3\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == 'yes'\nassert solution('''\n5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'yes'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n5\n5\n5\n5''') == '2 1\\n1 2\\n2 3\\n3 4\\n4 5'\nassert solution('''4\n20\n15\n17\n14''') == '5 8\\n8 5\\n5 2\\n2 7\\n7 4\\n4 1'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\\\n3\n5\n5\n5\n\"\"\") == \"2\\n1\\n2\\n7\\n\"\nprint(solution(input()))"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2 1 2\"\nassert solution(\"4\") == \"5 8 7 6\""
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1,2,3\") == \"1\"\nassert solution(\"5,4,3,2,1\") == \"4\"\nassert solution(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\") == \"5\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2 1'\nassert solution('4') == '5 8'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\nassert solution('4') == '1 3 2 4'\nassert solution('5') == '1 3 5 2 4'\nassert solution('6') == '1 3 5 2 4 6'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n5\\n5\") == \"2\\n1\\n2\"\nassert solution(\"4\\n20\\n15\\n17\\n14\") == \"5\\n8\\n2\\n7\"\nassert solution(\"15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"5 8\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\npython') == 'python'\nassert solution('2\\npython') == 'python'\nassert solution('3\\npython') == 'python'\nassert solution('4\\npython') == 'python'\nassert solution('5\\npython') == 'python'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\npython\n^ -n 10\n''') == 'python'\nassert solution('''\n2\npython\njava\n^ -n 10\n''') == 'java'\nassert solution('''\n3\npython\njava\n^ -n 10\n''') == 'python'\nassert solution('''\n4\njava\njava\n^ -n 10\n''') == 'java'\nassert solution('''\n5\njava\njava\n^ -n 10\n''') == 'java'\n'''\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\npython\\njava\\njava\\n') == 'python\\njava\\n'\nassert solution('2\\npython\\njava\\n^\\n^\\n^\\n^\\n^\\n^\\n^\\n^\\n^\\n^\\n^\\n^\\n') == 'python\\njava\\njava'\nassert solution('3\\npython\\njava\\njava\\n') == 'python\\njava\\njava'\nassert solution('4\\npython\\njava\\njava\\n') == 'python\\njava\\njava'\nassert solution('5\\npython\\njava\\njava\\n') == 'python\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'python\\npython main.py\\npython main.py -n 10'\nassert solution('5') == 'python\\njava\\njava\\npython\\npython main.py\\npython main.py -n 10'"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\npython\np^ main.py\n^ -n 10\n''') == 'python\\npython main.py\\npython main.py -n 10\\n'\nassert solution('''\n5\npython\njava\n^\n^^^\n^^^\n''') == 'python\\njava\\njava\\npython\\njava\\n'\n'''\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\npython\\n^\\nmain.py\\n^-n 10\\n') == 'python main.py\\npython main.py -n 10'\nassert solution('2\\npython\\njava\\n^\\nmain.py\\n^-n 10\\n') == 'python main.py\\njava main.py -n 10'\nassert solution('3\\n') == ''\nassert solution('3\\npython\\njava\\n^\\nmain.py\\n^-n 10\\n') == 'python main.py\\npython main.py -n 10'\nassert solution('4\\n') == ''\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''python\np^ main.py\n^ -n 10''') == 'python main.py -n 10'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\npython\np^ main.py\n^ -n 10\n''') == 'python\\npython main.py\\npython main.py -n 10'\n\nassert solution('''\n5\npython\njava\n^\n^^^\n^^^\n''') == 'python\\njava\\njava\\npython\\njava\\npython'\n'''\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\npython\njava\njava\npython\njava\n''') == 'pythonjava'\n\nassert solution('''\npython\njava\njava\npython\njava\njava\njava\npython\njava\njava\njava\njava\njava\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\npython\npython\npython\njava\npython\njava\npython\njava\npython\npython\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\npython\") == \"python\"\nassert solution(\"1\\np^ main.py\") == \"python main.py\"\nassert solution(\"2\\np^ main.py\") == \"java\"\nassert solution(\"3\\np^ main.py\") == \"\"\nassert solution(\"4\\np^ main.py\") == \"\""
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n\"\"\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('heretheyaremakessense') == 'impossible'\nassert solution('ohmygod') == 'impossible'"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\n\nassert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\n\nassert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\ntihssnetnceemkaesprfecetsesne\n5\nmakes\nperfect\nsense\nsentence\nthis\n''') == 'this sentence makes perfect sense', \"First\"\nassert solution('''\nhitehre\n2\nthere\nhello\n''') == 'impossible', \"Second\""
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hello\") == \"impossible\"\nassert solution(\"\") == \"impossible\"\nassert solution(\"m\") == \"impossible\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''tihssnetnceemkaesprfecetsesne\n5\nmakes\nperfect\nsense\nsentence\nthis\n''') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense', solution\nassert solution('hello') == 'impossible', solution\nassert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense', solution\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('this sentence makes perfect sense') == 'this sentence makes perfect sense'\nassert solution('this sentence makes perfect sense') == 'this sentence makes perfect sense'\nassert solution('thissentencemakesperfectsense') == 'thissentencemakesperfectsense'\nassert solution('this sentence makes perfect sense') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('hitehre') == 'this sentence makes perfect sense'\nassert solution('tihssnetnceemkaesprfecet sesne') == 'this sentence makes perfect sense'\n\nassert solution('thissentencee mkaes prfecet sesne') == 'thissentencee mkaes prfecet sesne'\nassert solution('tihssnetnceemkaesprfecet sesne') == 'thissentencee mkaes prfecet sesne'\nassert solution('tihssnetnceemkaesprfecet sesne') == 'thissentencee mkaes prfecet sesne'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n') == '4\\n'\nassert solution('2 2\\n') == '16\\n'"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n\") == \"4\\n\"\nassert solution(\"2 2\\n\") == \"16\\n\"\nassert solution(\"3 3\\n\") == \"9\\n\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('3 3') == '25'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2''') == '4'\nassert solution('''2 2''') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"2 2\") == \"16\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"0\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n\") == \"4\"\nassert solution(\"2 2\\n\") == \"16\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"\n1 1\n\"\"\") == \"1\"\nassert solution(r\"\"\"\n2 1\n\"\"\") == \"1\"\nassert solution(r\"\"\"\n2 2\n\"\"\") == \"2\"\nassert solution(r\"\"\"\n5 2\n\"\"\") == \"30\"\nassert solution(r\"\"\"\n5 5\n\"\"\") == \"183\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '2'\nassert solution('6') == '2'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4\"\nassert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4') == '4'\nassert solution('10') == '9'\nassert solution('11') == '10'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"1\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\nabcbab\n2\ncb\ncbab\n''') == \"2\"\n\n'''\n    The number of untileable cells = the number of tiles that cannot be used to cover the street.\n    \n    The first pattern contains two letters, so the number of tiles = 2.\n    The second pattern contains two letters, so the number of tiles = 1.\n    The third pattern has one letter, so the number of tiles = 1.\n'''"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6\nabcbab\n2\ncb\ncbab\nbac\nbaba\n''') == '4'\n\"\"\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '6'\nassert solution('''24\n3\n10 10\n30 10\n20 20\n''') == '4'"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '4'\nassert solution('3') == '3'\nassert solution('4') == '7'\nassert solution('5') == '9'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"3\"\nassert solution(\"25\") == \"2\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"2\\n\"\n    \"3\\n\"\n    \"1 1\\n\"\n    \"2 2\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"2 3\\n\"\n    \"1 1\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '6'\n\nassert solution('''24\n3\n10 10\n30 10\n20 20\n''') == '4'\n\nassert solution('''50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '17.071067'\n\nassert solution('''24\n3\n10 10\n30 10\n20 20\n''') == '20'\n\nassert solution('''50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '17.071067'"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"6\"\nassert solution(\"3\") == \"1.00001\"\nassert solution(\"10\") == \"10\"\nassert solution(\"16\") == \"22\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"100\") == \"2\"\nassert solution(\"10000\") == \"2\"\nassert solution(\"1000000\") == \"2\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\\n') == '6\\n85\\n90\\n95\\n100\\n105'\nassert solution('24\\n3\\n10 10\\n30 10\\n20 20\\n') == '4\\n17.071067\\n20\\n22.928932'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"50\n4\n110 10\n80 10\n80 0\n110 0\"\"\"\n    ) == \"6\"\n\nassert solution(\n\"\"\"24\n3\n10 10\n30 10\n20 20\nSample Output 2:\n4\n17.071067\n20\n22.928932\"\"\"\n    ) == \"4\"\n\nassert solution(\n\"\"\"50\n4\n110 10\n80 10\n80 0\n110 0\nSample Output 1:\n6\n85\n90\n95\n100\n105\n\"\"\"\n    ) == \"6\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''20\n4\n10 10\n30 10\n20 20\n''') == '6'\nassert solution('''50\n4\n10 10\n80 10\n80 0\n110 0\nSample Output 1:\n6\n85\n90\n95\n100\n105''') == '6'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n\") == \"yes\"\n\nassert solution(\"10 7\\n\") == \"yes\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 11') == 'yes'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([10, 11]) == \"yes\"\nassert solution([10, 7]) == \"no\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"no\""
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\nassert solution('11 11') == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"no\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3\\n1 6\\n2 5\\n3 4'\nprint('Congratulations!')\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('10 30') == '3'\nassert solution('20 40') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3 4\n2 5\n1 6\n''') == '3 1 6 2 5'\nassert solution('''5\n10 30\n20 40\n30 50\n10 60\n30 40\n''') == '3 10 60 30 50 20'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n3 4\n2 5\n1 6\n''') == '3'\nassert solution('''\n5\n10 30\n20 40\n30 50\n10 60\n30 40\n''') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3 4\\n2 5\\n1 6') == '3\\n1 6\\n2 5\\n3 4'"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n2 4\n1 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n20 10\n30 40\n10 50\n50 60\n20 50\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n5 10\") == \"3 1 5 10\"\nassert solution(\"2\\n15 50\") == \"2 15 50\"\nassert solution(\"3\\n12 34\") == \"3 12 34\"\nassert solution(\"4\\n50 50 50 50\") == \"4 50 50 50\""
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n5 4\n2 5\n1 6\n3 7''') == '3'\nassert solution('''\n3\n3 4\n2 5\n1 6''') == '1 6'\nassert solution('''\n4\n10 30\n20 40\n30 50\n10 60\n30 40''') == '3'\nassert solution('''\n5\n10 30\n20 40\n30 50\n10 60\n30 40''') == '3'\nassert solution('''\n10\n30 40\n10 60\n10 60\n20 60\n30 60\n30 60\n20 60\n10 60\n30 60\n10 60''') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n3 4\n2 5\n1 6\n''') == '3'\n\nassert solution('''5\n10 30\n20 40\n30 50\n10 60\n30 40\n''') == '3'"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"5836\"\nassert solution(\"5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"1828\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '5836'\nassert solution('''5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"5836\"\nassert solution(\"5 2\") == \"1828\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"5836\"\nassert solution(\"5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"1828\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '5836'\nassert solution('''5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1') == '5836'\nassert solution('5 2') == '1828'\nassert solution('5 3') == '2828'\nassert solution('5 4') == '2828'\nassert solution('5 5') == '2828'"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"5836\"\nassert solution(\"5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"1828\"\nassert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"5836\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '5836'\nassert solution('5 2') == '1828'"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'impossible'\nassert solution('6') == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\n\"\"\"\n\nclass Person:\n    def __init__(self, name, age, bday):\n        self.name = name\n        self.age = age\n        self.bday = bday\n\nclass PersonList(list):\n    def __init__(self):\n        super().__init__()\n\n    def search(self, name):\n        for person in self:\n            if person.name == name:\n                return person\n\n    def add(self, person):\n        self.append(person)\n\n    def remove(self, person):\n        self.remove(person)\n\n    def __str__(self):\n        return f\"{self}\"\n\n    def __repr__(self):\n        return f\"{self}\"\n\n\nclass Constituents(PersonList):\n    def __init__(self):\n        super().__init__()\n\nclass Federals(PersonList):\n    def __init__(self):\n        super().__init__()\n\nclass NoCount(PersonList):\n    def __init__(self):\n        super().__init__()"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"50\"\nassert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\\n8 100 300 200\\n9 100 400 200\") == \"impossible\""
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\nassert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == 'impossible'\nassert solution('''5\n7 696 34\n1 70 95 98\n2 750 50 54\n4 792 1030 38\n4 792 1030 38\n3 792 1030 38\n''') == '50'\nassert solution('''4\n7 696 34\n1 70 95 98\n2 744 1408 54\n3 792 1030 38\n4 792 1030 38\n3 792 1030 38\n''') == 'impossible'\nassert solution('''5\n7 696 34\n1 70 95 98\n2 744 1408 54\n4 792 1030 38\n4 792 1030 38\n3 792 1030 38\n''') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99''') == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == \"50\"\nassert solution('''\n4\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n3 2301 3299 0\n3 2301 2399 0\n''') == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\n\nassert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99''') == '50'\nassert solution('''3\n7 100 200 200\n8 100 300 200\n9 100 400 200''') == 'impossible'\nassert solution('''6\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\nSample Output 2:\nimpossible''') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"2 1\") == \"50\"\nassert solution(\"2 2\") == \"impossible\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5.0') == '0 0 0 0 1', \"Wrong\"\nassert solution('4.5') == '0 0 0 1 1', \"Wrong\"\nassert solution('0.0') == '0 0 0 0 0', \"Wrong\"\nassert solution('1.0') == '0 0 0 0 0', \"Wrong\"\nassert solution('1.5') == '0 0 0 0 0', \"Wrong\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5.0') == '0 0 0 0 1', \"Wrong result\"\nassert solution('4.5') == '0 0 0 1 1', \"Wrong result\""
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5.0') == '0 0 0 0 1', solution('5.0')\nassert solution('4.5') == '0 0 0 1 1', solution('4.5')"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0.5') == '0 0 0 1 1'"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8 3 1\n1 7 8 2 6 4 3 5''') == '8'\nassert solution('''8 2 1\n1 7 8 2 6 4 3 5''') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5') == '8'\nassert solution('8 2 1\\n1 7 8 2 6 4 3 5') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 2 1\n2 6 8 2 6\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8 3 1\n1 7 8 2 6 4 3 5''') == \"8\"\nassert solution('''8 2 1\n1 7 8 2 6 4 3 5''') == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 1') == '4'\nassert solution('8 3 1') == '8'\nassert solution('20 3 1') == '17'\nprint('YOUR CODE SUCCESSFULLY EXECUTED.')"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '8 3 1\\n1 7 8 2 6 4 3 5\\n') == '8', 'First Test Case'\nassert solution(\n    '8 2 1\\n1 7 8 2 6 4 3 5\\n') == '3', 'Second Test Case'"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8 3 1\") == \"8\"\nassert solution(\"8 2 1\") == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5\\n') == '8'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5\\n') == '8'\nassert solution('8 2 1\\n1 7 8 2 6 4 3 5\\n') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n\"\"\""
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\"\nassert solution(\"1\\n10\") == \"5\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"2\"\nassert solution(\"7 6\") == \"3\"\nassert solution(\"1000000000 5\") == \"1000000001\"\nassert solution(\"4 8\") == \"4\"\nassert solution(\"8 1\") == \"8\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2\n2 3 4 1''') == '3'\nassert solution('''6 3\n2 2 2 4 4 4''') == '4'"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"6 3\") == \"4\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 3\") == \"4\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 2 4 4 4') == '3'\nassert solution('4 6') == '4'\nassert solution('12 3') == '6'\nassert solution('50 100') == '4'\nassert solution('4 4') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '3'\nassert solution('6 3') == '4'\nassert solution('6 3') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2') == '3'\nassert solution('6 3') == '4'"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '3'\nassert solution('6 3') == '4'\nassert solution('20 20') == '20'"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2\\n2 3 4 1') == '3'\nassert solution('6 3\\n2 2 2 4 4 4') == '4'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1 1.732050''') == '1.732050808'\nassert solution('''1 1 3.0''') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1.732050') == '1.7320508'\nassert solution('1 1 3.0') == '-1'\nassert solution('1 1 1.00000000000') == '1.00000000000'\nassert solution('1 1 1.0000001') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3.1 1.2 3') == '1.7320508'\nassert solution('1.9 1.2 3') == '-1'\n\"\"\""
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.732050808\"\nassert solution(\"1 1 3.0\") == \"-1\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1.732050') == '1.7320508'\nassert solution('1 1 3.0') == '-1'\nprint('Congratulations! All test cases passed.')"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r\"\"\"\n1 1 1.732050\n\"\"\") == \"1.7320508\"\nassert solution(r\"\"\"\n1 1 3.0\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1.732050') == '1.7320508', solution('1 1 3.0')\nassert solution('1 1 3.0') == '-1'"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 2.414213') == '-1'\n\"\"\"\n\n\nimport math\n\nclass Solution:\n    def solve(self, *args):\n        a, b, c = sorted(map(float, args))\n        if a + b > c and b + c > a and a + c > b:\n            return (b * c) / math.sqrt(a**2 + b**2 + c**2)\n        else:\n            return -1\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3 4 2\\n.75') == '2.4999999987500003'\nassert solution('2\\n0 100 10\\n0 -100 100\\n.80') == '9.999999999000002'"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution(\n'''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\nassert solution(\n'''\n1\n3 4 2\n.75\n''') == '3.125000000000003'\nassert solution(\n'''\n3\n0 0 1\n1 3 1\n2 0 1\n1 1 1\n1 2 1\n''') == '4.096111111111'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"2.4999999987500003\"\nassert solution(\"2\") == \"9.999999999000002\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution('''2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution('''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"2.4999999987500003\"\nassert solution(\"2\") == \"9.999999999000002\"\nassert solution(\"0.75\") == \"2.4999999987500003\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 -100 100 100 2\n.75\nSample Output 3:\n5.3500000000000003\n''') == '5.3500000000000003'\n\nassert solution('''\n4\n0 1 1 1.5\n.75\nSample Output 4:\n7.6000000000000005\n''') == '7.6000000000000005'\n\nassert solution('''\n5\n0 0.5 0.5 0.5 0\n.75\nSample Output 5:\n2.8999999999999998\n''') == '2.8999999999999998'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n0 1 2\n.75\n\"\"\") == \"2.4999999987500003\"\nassert solution(\"\"\"\n2\n0 1 2\n.75\n\"\"\") == \"9.999999999000002\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution('''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 4 2\\n.75') == '2.4999999987500003'\nassert solution('2\\n0 100 10\\n0 -100 100\\n.80') == '9.999999999000002'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"0\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 6') == '0'\nassert solution('4 5') == '3'\nassert solution('2 1 6') == '3'"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 3') == '0'\nassert solution('4 5') == '3'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\n\nassert solution('''3 5\n1 1 4 2 3\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '0'\n\nassert solution('''3 10\n1 1 4 2 3 4 5 6 7 8\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '2'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1 6\n2 1 6\n3 1 6''') == '0'\nassert solution('''4\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\nprint('Tests passed')\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3'\nassert solution() == '2'"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\\n') == '3'\nassert solution('4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\\n') == '2'\nassert solution('6 3\\n1 1 6\\n1 1 5 1 2\\n2 1 6\\n') == '0'\nassert solution('6 3\\n1 1 6\\n1 1 5 1 2\\n2 1 6\\n') == '3'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 6\\n\"\n    \"1 1 5 1 2\\n\"\n    \"2 1 6\"\n    ) == \"3\"\n\nassert solution(\n    \"2 3\\n\"\n    \"1 1 5 1 2\\n\"\n    \"2 1 6\\n\"\n    ) == \"2\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4\\n1 2 3 4 5') == '3'\nassert solution('1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3') == '2'"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n1 3\\n2 4') == '0'\nassert solution('3\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5') == '3'\nassert solution('5\\n10 10 10 10 10\\n20 20 20 20 20\\n30 30 30 30 30 30\\n40 40 40 40 40 40\\n50 50 50 50 50 50') == '2'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1 7 1000000007\") == \"1\"\nassert solution(\n    \"3 2 1000000007\") == \"4\""
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    2 5 1\n    ''') == '1'\nassert solution('''\n    3 2 3\n    ''') == '2'\n''')\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n1 7 1000000007\n''') == '1'\n\nassert solution(\n'''\n2 2 1000000007\n''') == '2'\n\nassert solution(\n'''\n3 2 1000000007\n''') == '4'\n\nassert solution(\n'''\n3 5 1000000007\n''') == '1'\n\nassert solution(\n'''\n10 10 1000000007\n''') == '0'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\""
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\n\n'''"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 7 1000000007''') == '1'\nassert solution('''3 2 1000000007''') == '4'\nassert solution('''5 2 1000000007''') == '8'\nassert solution('''4 2 1000000007''') == '0'\nassert solution('''1 1 1000000007''') == '0'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 10') == '5'\nassert solution('3 5') == '8'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_str) == '5'\nprint(solution(input_str))\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '5'\nassert solution('10 10') == '10'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 10\n6\n''') == '5'\nassert solution('''\n10 10\n11\n''') == '8'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '5'\nassert solution('10 10') == '10'\nassert solution('6 2') == '8'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 10\n6''') == '5'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6') == '5'\nassert solution('2 5') == '8'\nassert solution('3 5') == '5'\nprint(solution(''))"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n10') == '5'\nassert solution('3 5') == '8'\nassert solution('10\\n3') == '9'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"8\"\nassert solution(\"10 10\") == \"5\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 10\\n6') == '5'\nassert solution('3 5\\n11') == '8'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5 3') == '2'\nassert solution('4 5 3') == '3'"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\nassert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '3'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5 3\") == \"2\"\nassert solution(\"4 5 3\") == \"3\"\nassert solution(\"4 5 3\") == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == '2'"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == \"3\""
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4\") == \"2\"\nassert solution(\"5 2 3\") == \"3\"\nassert solution(\"3 5 3\") == \"1\""
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2 4\\n0 1 1\\n0 3 1\") == \"2\"\nassert solution(\"3 4 5\\n0 1 1\\n0 2 1\\n0 3 1\\n1 2 1\") == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\nassert solution(\"3\\n1 2\\n0 1\\n0 3 1\") == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5 3\") == \"2\"\nassert solution(\"4 5 3\") == \"3\"\nassert solution(\"4 5 2\") == \"2\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"2\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"3\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"4\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '3'\nassert solution('5 1') == '3'\nassert solution('4 2') == '4'\nassert solution('4 2') == '4'"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n4 2\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120''') == '3'\nassert solution('''4 1\n10\n10\n1 10\n1 10\n1 10\nSample Output 3:\n3\n''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n10\n20\n30\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2\n5\n10\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n1\n10\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 1\n10\n10\n1 10\n1 10\n1 10\n''') == '3'\nassert solution('''\n2 2\n10\n10\n1 10\n1 10\n1 10\n''') == '2'\n'''\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n\nassert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == '3'\nassert solution('3 1') == '3'\nassert solution('1 1') == '1'\n\nprint(solution(*input()))"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3'\nassert solution('3 2') == '2'\nassert solution('4 1') == '1'\nassert solution('4 2') == '2'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120''') == \"3\"\n\nassert solution('''2 1\n10 20\n1 10\n1 20\n2 20\n3 20\n4 20\n5 20\n6 20\n7 20\n8 20\n9 20''') == \"4\"\n\nassert solution('''1 1\n10 10\n2 20\n3 30\n4 40\n5 50\n6 60\n7 70\n8 80\n9 90\n10 100\n11 100\n12 100\n13 100\n14 100\n15 100''') == \"2\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3\n3\n''') == '1'\n\nassert solution('''\n5\n4\n2\n2\n1\n''') == '6'"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '5'\nassert solution('3') == '5'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2\n3\n4\n1\n2\n''') == '1'\nassert solution('''\n5\n3\n4\n2\n1\n2\n''') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n2\n2\n2\n2\n2\n2\n1\n1\n1\n2\n2\n2\n2\n2\n2\n2''') == '5', \"Wrong\"\n\nassert solution('''10\n3\n3\n3\n4\n4\n5\n5\n6\n6\n4\n3\n3\n2\n1\n1\n2\n2\n2\n2\n2\n2\n1\n1\n2\n1\n2\n2\n2\n1\n1\n2\n1\n2\n1\n1\n1\n2\n2\n2\n2\n1\n1\n1\n2\n2\n2\n2\n2\n1\n2\n1\n1\n1\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n2\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n2\n1\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n2\n2\n2\n1\n1\n1\n1\n1\n2\n2\n1\n1\n2\n1\n1\n1\n2\n1\n1\n1\n2\n2\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n2\n2\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n2\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n2\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\") == \"1\"\nassert solution(\"5\\n2\") == \"5\""
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"10\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '5'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n\n###"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n2 1\n0 11 9\n1 0 10\n0 0 0\n\"\"\") == \"2\"\nassert solution(\n    \"\"\"\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\nassert solution('''\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 3\") == \"2\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\nassert solution('''\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1\n0 11 9\n1 0 10\n0 0 0\n0 0 0\n0 0 0\n''') == '2', 'First'\nassert solution('''3 2\n1 2 3\n1 2 1\n0 0 0\n''') == '1', 'Second'\nassert solution('''4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1', 'Third'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '-1'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '-1'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n4 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10\n\"\"\") == \"\"\"\n4 3 5\n0 1 2\n0 2 1\n1 2 1\n1 3 1\n2 3 2\n\"\"\".strip()"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5 0 3\") == \"3 1 5\"\nassert solution(\"2 1 0 1\") == \"1 2 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\""
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10') == '4 3 5'\nassert solution('2 1 0 1\\n0 1 100000\\nSample Output 2:') == '2 100000 1'\nassert solution('2 1 0 1\\n0 1 100000\\n2 3 10\\nSample Output 2:') == '2 100000 1'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 100000 1'\nprint(solution(input()))\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 2 0 1\"\n) == \"2 1 100000\"\nassert solution(\n    \"4 3 0 3\"\n) == \"3 2 100000\"\nassert solution(\n    \"5 2 0 1 2 1 1\"\n) == \"3 2 100000 1 2 1 1\""
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5 0 3') == '3 4 5'\nassert solution('2 1 0 1') == '2 2 1'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2 0'\n\nassert solution() == '2 0'\n\n---Input---\n1\n1 1\n2\n\n---Output---\n2 2\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\nassert solution(\"2 3\\nSMS.M\\nM.MS\") == \"2 0\"\nassert solution(\"2 4\\n.S.M.\\n.M.S.\\nS.M.\\nM.M.\") == \"2 0\"\nassert solution(\"2 4\\n.S.M.\\n.M.S.\\nS.M.\\nM.M.\") == \"2 0\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == '2 0'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\nSMS\\nMMS\\n') == '3 5'\n\n===========================================\n\nclass Solution:\n    def solve(self, *args):\n        return (sum(1 for i in range(1, args[0]) for j in range(1, args[1])\n                    if (abs(i - args[2]) + abs(j - args[3])) == 1),\n                sum(1 for i in range(1, args[0]) for j in range(1, args[1])\n                    if (abs(i - args[2]) + abs(j - args[3])) == 2))\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == str(3) + \"\\n\" + str(5)\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\nSMS\nMMS\n''') == '3 5'\nprint('All Tests Passed')\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\nSMS\\nMMS') == '3 5'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\nMSM\nM.M\n''') == '5 5'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\nSMS\nMMS\n''') == '3 5'\n\nassert solution('''\n2 3\nSMS\nMMS\n''') == '0 0'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n12\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1'\n\nassert solution('''\n13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '3'\n\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\n''') == '1'\n\nassert solution('''\n4\n0"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('\\n'.join(['2', '0 B', '1 B', '2 E a', '2 E b', '2 S', '5 G a', '5 T a', '5 E a', '5 E b', '1 S', '10 E a', '10 G b', '1 T a'])) == '2'\nassert solution('\\n'.join(['3', '0 B', '1 B', '2 E a', '2 E b', '2 S', '5 G a', '5 T a', '5 E a', '5 E b', '1 S', '10 E a', '10 G b', '1 T a'])) == '4'\nassert solution('\\n'.join(['5', '0 B', '1 B"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n    3\n    0 B\n    1 B\n    2 E a\n    2 E b\n    2 S\n    5 G a\n    5 T a\n    5 E a\n    5 E b\n    1 S\n    10 E a\n    10 G b\n    1 T a\n    '''\n) == '2'\n\nassert solution(\n    '''\n    6\n    0 B\n    1 B\n    1 T a\n    2 E a\n    2 S\n    5 T a\n    '''\n) == '1'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '''\n1\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n'''\n) == '2'\nassert solution(\n    '''\n3\n0 B\n1 B\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n'''\n) == '3'\n\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n    def test_problem_solution(self):\n        import solution\n        output = solution.solution("
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\nassert solution('10 E a\\n') == '3 c'\nassert solution('6 b\\n') == '6 c'\nassert solution('1 T a\\n') == '1 c'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7\n0 B\n1 B\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1'\n\nassert solution('''\n3\n0 B\n1 T a\n2 S\nSample Output 3:\n0\n7 b\n''') == '1'\n\nassert solution('''\n10\n0 B\n1 T a\n2 S\n2 G a\n5 G a\n5 T a\n5 E a\n5 E b\n2 S\n4 E a\n8 E b\n9 E c\n10 T a\n10 G b\n1 T a\n''') == '1'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\nassert solution('12') == '1'\nassert solution('13') == '3'\nassert solution('14') == '6'"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '1'\nassert solution('6 b') == '6 b'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\nassert solution('''\n3 c\n6 c\n''') == '1'\n\nassert solution('''\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n0 B\n1 S\n0 T\n1 T a\n2 E a\n2 S\n''') == '1'\nassert solution('''\n3\n0 B\n1 S\n2 E a\n2 E b\n''') == '2'\nassert solution('''\n5\n0 B\n1 S\n2 E a\n2 S\n''') == '1'\nassert solution('''\n3\n0 T\n1 S\n2 E a\n2 S\n''') == '3'\nassert solution('''\n6\n0 T\n1 S\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n''') == '6'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5') == \"40\"\nassert solution('288 291') == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '40'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 5\\n\") == \"40\"\nassert solution(\"288 291\\n\") == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.readline()[:-1]"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6') == '40'\nassert solution('1 1') == '40'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\""
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4') == '18', 'Basic Tests'\nassert solution('1 100') == '1000000', 'Basic Tests'\nassert solution('100 20') == '10020', 'Basic Tests'\nassert solution('50 3') == '23', 'Basic Tests'\nassert solution('100000 100') == '10010001', 'Basic Tests'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"COG\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"\") == \"0\"\nassert solution(\"a\") == \"0\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"COG\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\nCAT\nDOG''') == 'COG', f'Should be \"COG\", not {solution('''2\nCAT\nDOG''')}'\nassert solution('''1\nCAT\n''') == 'CAT', f'Should be \"CAT\", not {solution('''1\nCAT''')}'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'COG'\nassert solution('2') == '0'"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\nCAT\nDOG''') == \"DOG\"\nassert solution('''2\nCAT\nDOG''') == \"CAT\"\n\n'''\nSample Input 1:\n3\nCAT\nDOG\nCOT\nSample Output 1:\nCAT\n3\n\nSample Input 2:\n2\nCAT\nDOG\nSample Output 2:\n0\n-1\n\n'''"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\nCAT\\nDOG\") == \"COG\"\nassert solution(\"1\\nCAT\\nDOG\") == \"COG\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"CAT\"\nassert solution(\"2\") == \"DOG\"\nassert solution(\"3\") == \"COT\""
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\nCAT\\nDOG\\nCOT') == 'CAT'\nassert solution('5\\nCAT\\nDOG\\nCOT') == 'COT'\nassert solution('3\\nCAT\\nDOG\\nCOT') == 'DOG'\nassert solution('1\\nCAT') == 'CAT'\nassert solution('5\\nCAT\\nDOG\\nCOT') == 'COT'\n\nn = int(input())\nd = input()\nans = 0\nmin_ans = 100000\nwhile d in dic.keys():\n    ans += 1\n    d = d[1:] + d[0]\n    if d in dic.keys():\n        min_ans = min(min_ans, ans)\nprint(d)\nprint(min_ans)\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\nCAT\\nDOG\") == \"DOG\"\nassert solution(\"5\\nCAT\\nDOG\\nCAT\\nDOG\\nCAT\\nDOG\") == \"DOG\"\nassert solution(\"1\\nCAT\\n3\\nCAT\\nCAT\") == \"CAT\"\nassert solution(\"3\\nCAT\\nCAT\\nCAT\") == \"CAT\"\nassert solution(\"2\\nCAT\\nCAT\") == \"CAT\"\n\nstdin = input()\nn = int(stdin)\ndct = dict()\nfor i in range(n):\n    dct[stdin[i]] = i"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\nCAT\\nDOG') == 'COG', 'First'\nassert solution('2\\nCAT\\nCOT') == 'COT', 'Second'\nassert solution('3\\nCAT\\nDOG\\nCOT') == 'CAT', 'Third'\nassert solution('3\\nCAT\\nDOG\\nCOT') == 'CAT', 'Fourth'\nassert solution('3\\nCAT\\nDOG\\nCOT') == 'CAT', 'Fifth'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 3\n1 3\n1 4\n''') == '9'\n\nassert solution('''\n5 5\n0 0\n0 0\n0 0\n''') == '0'\n\nassert solution('''\n8 8\n1 3\n1 4\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n''') == '1'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1\\n') == '1\\n'\n\nassert solution('4 3\\n') == '6\\n'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"5 1\") == \"9\""
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 3\") == \"6\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('10 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n3 5\n/.... \\\n/..... \\\n.......\n.......\n.......\n''') == '3'\nassert solution(\n'''\n5 5\n/..... \\\n/...... \\\n........\n........\n........\n''') == '-1'\nassert solution(\n'''\n4 5\n.......\n........\n........\n........\n........\n''') == '4'\nassert solution(\n'''\n7 5\n
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n.V.\n..V.\n''') == '3'\n\nassert solution('''\n10 4\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHH.HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == '3'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 5\\n\"\n    \".V.\\n\"\n    \"./.V.\\n\"\n    \"..#..\\n\"\n    \".V.#.\\n\"\n    \".V./\\n\"\n) == \"3\"\nassert solution(\n    \"2 5\\n\"\n    \"V...\\n\"\n    \"H...V\"\n) == \"-1\"\nassert solution(\n    \"1 1\\n\"\n    \".\\n\"\n) == \"0\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5') == '3'\nassert solution('2 5') == '-1'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n.V..\\n..H.V\") == \"3\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\\\n5 5\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5') == '3'\nassert solution('2 5') == '-1'"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n.V..V..V\\n.#.H.H.#\\n..#...\\n.V..V..V\") == \"3\"\nassert solution(\"4 4\\n.V...\\n.#.H.\\n.V..V\\n..#..\") == \"0\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\\\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n\"\"\") == \"\"\"\\\nAMBIGUOUS\n\"\"\", '''\\\nOne of the solutions is just the longest possible reconstruction.\n'''\nassert solution(\"\"\"\\\n3\nab\nac\n\"\"\") == \"\"\"\\\nAMBIGUOUS\n\"\"\", '''\\\nThe length of the longest possible reconstruction is at least 5.\n'''\nassert solution(\"\"\"\\\n2\nba\nbc\n\"\"\") == \"\"\"\\\nAMBIGUOUS\n\"\"\", '''\\\nThe second longest reconstruction does not share any prefixes with the first one.\n'''\nassert solution(\"\"\"\\\n1\nab\n\"\"\") == \"\"\"\\\nAMBIGUOUS\n\"\"\", '''\\\nNo optimal reconstruction exists, since there is only one of the input text fragments.\n'''\nassert solution(\"\"\"\\\n10\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n\") == \"AMBIGUOUS\", \"Sample Test 1\"\nassert solution(\"4\\n\") == \"AMBIGUOUS\", \"Sample Test 2\"\nassert solution(\"6\\n\") == \"AMBIGUOUS\", \"Sample Test 3\"\nassert solution(\"8\\n\") == \"AMBIGUOUS\", \"Sample Test 4\"\nassert solution(\"10\\n\") == \"AMBIGUOUS\", \"Sample Test 5\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"AMBIGUOUS\"\nassert solution(\"a b\") == \"AMBIGUOUS\"\nassert solution(\"a b c\") == \"AMBIGUOUS\"\nassert solution(\"n fox jumps ove\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('\\n'.join([str(x) for x in range(1, 5)])) == \"AMBIGUOUS\"\nassert solution('\\n'.join([str(x) for x in range(5, 10)])) == \"AMBIGUOUS\"\nassert solution('\\n'.join([str(x) for x in range(10, 15)])) == \"AMBIGUOUS\"\nassert solution('\\n'.join([str(x) for x in range(15, 20)])) == \"AMBIGUOUS\"\nassert solution('\\n'.join([str(x) for x in range(20, 25)])) == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n' + 'cdefghi'*2 + 'efghijk'*2 + 'efghijx' + 'abcdefg' + '\\n') == \"AMBIGUOUS\"\n\nassert solution('\\n'.join(['n' + 'fox'*2 + 'o'*2 + 'uick' + 'brown' + 'f'*2 + '\\n' + 'y'*2 + 'dog.' + '\\n' + 'rown' + 'fox'*2 +'mps' + 'over' + 'the' + 'lazy' + 'dog'*2 + '\\n']*2) + '\\n') == \"AMBIGUOUS\"\n\nassert solution('n fox jumps ove\\n' + 'uick brown f\\n' + 'y dog.\\n' + 'rown fox\\n' +'mps over the l\\n' + 'the lazy dog') == \"AMBIGUOUS\"\n\nassert solution('\\n'.join(['n' + 'fox'*2 + 'o'*2 + 'uick' + 'brown' + 'f'*2 + '\\n' + 'y'*2 + 'dog.' + '\\n' + 'rown' + 'fox'*2 +'mps' + 'over' + 'the' + 'lazy' + 'dog'*2 + '\\n']*2) + '\\n') == \"AMBIGUOUS\"\n\nassert solution('n fox jumps ove\\n' + 'uick brown f\\n' + 'y dog.\\n' + 'rown fox\\n' +'mps over the l\\n' + 'the lazy dog') == \"AMBIGUOUS\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n''') == 'AMBIGUOUS'\nassert solution('''\n3\nx\ny\nz\n''') == 'AMBIGUOUS'\nassert solution('''\n9\nx\ny\nz\nu\nv\nw\nx\ny\nz\n''') == 'AMBIGUOUS'\nassert solution('''\n9\nx\ny\nz\nz\ny\nx\nu\nv\nw\n''') == 'AMBIGUOUS'\nassert solution('''\n7\no\nd\nu\nd\na\nn\na\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7\nfox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n''') == 'AMBIGUOUS'\nassert solution('''10\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n''') == 'AMBIGUOUS'\nassert solution('''100\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n9 9 9 9 9') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"7\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"5\na b c\nd e\nf g\nh i\nj\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"3\nfish\ndog\ncat\ndog\ncat\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"8\nuick\nbrown\nfox\njumps\nlazy\nfox\n\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"5\nHannah\nRose\nSean\nJill\nJill\n\"\"\") == \"AMBIGUOUS\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7\\nn fox jumps ove\\nuick brown f\\nThe quick b\\ny dog.\\nrown fox\\nmps over the l\\nthe lazy dog') == 'The quick brown fox jumps over the lazy dog.'\nassert solution('3\\nab\\nxcd\\nghi') == 'AMBIGUOUS'\nassert solution('10\\nab\\nxcd\\nghi\\nab\\nxcd\\nghi\\nab\\nxcd\\nghi\\nab\\nxcd\\nghi\\nab\\nxcd\\nghi\\nab\\nxcd\\nghi') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '--+0-', 'Dodging all the ships failed.'\n\nassert solution('''\n1 2\n1 1 2\n-2 0 2\nSample Output 2:\n0+-\n''') == '--+0-', 'Dodging all the ships failed.'\n\nassert solution('''\n3 2\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '+-+-', 'Dodging all the ships failed.'\n\nassert solution('''\n5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\nSample Output 1:\n+-+-\n\nSample Input 2:\n3 2\n1 2 1\n-2 0 2\nSample Output 2:\n+-+0-\n''') == '+-+0-', 'Dodging all the ships failed.'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2 3\") == \"--0-0-\"\nassert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\\n\") == \"--+0-0--\""
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '--+0-', 'First example'\nassert solution('''3 2\n1 2 1\n-2 0 2\n''') == '0+-', 'Second example'\nassert solution('''3 4\n1 2 3\n-2 -1 2\n-2 3 3\n-3 -3 -1\n''') == '--+--', 'Third example'\nassert solution('''4 4\n-2 0 2\n0 3 2\n1 2 2\n-2 -3 3\n''') == '-++--', 'Fourth example'\nassert solution('''5 5\n2 3 2\n-1 -1 2\n-2 -1 2\n1 1 2\n-1 -1 2\n''') == '-+--', 'Fifth example'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '--+0-', solution('5 6')\nassert solution('3 2') == '0+-', solution('3 2')"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '--+0-'\nassert solution('''3 2\n1 2 1\n-2 0 2\n''') == '0+-'\nassert solution('''3 1\n0 1\n-2 0 2\n''') == 'impossible'\nassert solution('''5 3\n-2 -1 0\n1 2 -1\n-1 -2 1\n2 -2 0\n-1 -1 -1\n''') == 'impossible'\nassert solution('''5 2\n-1 1\n0 0\n-1 -1\n-1 0\n-1 -1\n''') == '+-0'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1') == '--+0-'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1''') == '+--'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '--+0-'\n\nassert solution(\n'''\n3 2\n1 2 1\n-2 0 2\n''') == '0+-'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '0+-', 'Should output 0+- if possible'\nassert solution('-3 -2 3') == '--+0-', 'Should output--+0- if possible'\nassert solution('-2 -2 4') == '--+0-', 'Should output--+0- if possible'\nassert solution('2 3 3') == '+-0-+-', 'Should output +-0-+- if possible'\nassert solution('-1 1 2') == '+--0--', 'Should output +--0-- if possible'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '0+-', f'Solution is {solution(\"3 2\")}'\nassert solution('5 6') == '--+0-', f'Solution is {solution(\"5 6\")}'\nassert solution('2 3') == '0+-', f'Solution is {solution(\"2 3\")}'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '2'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 2') == '1'\nassert solution('1 2 1') == '1'\nassert solution('1 2 1 1') == '1'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 2\n1 1\n1 1\n1 1\n1 1\n1 1\nSample Output 1:\n0\nSample Output 2:\n0\n''') == '4\\n0'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n1 1\n1 1\n1\n1 1 1\n2 2 2\n''') == '4'\n\nprint(solution('''\n3 3\n1 2\n1 1\n1\n1 1 1\n2 2 2\n'''))\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"YES\"\nassert solution(\"3 4\") == \"NO\""
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"3 3\") == \"NO\"\nprint(solution())\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"YES\""
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB''') == 'YES'\nprint('TESTS: OK')\n\nassert solution('''4 4\nWWRR\nWRRR\nWRRR\n''') == 'NO'\nprint('TESTS: OK')\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"YES\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\nRBBB\\nBWB\") == \"YES\"\nassert solution(\"3 3\\nWRRR\\nWRRR\\nWBBB\\n\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n2 1\\n1 1') == 'YES'\nassert solution('2 2\\n2 2\\n2 2') == 'YES'\nassert solution('2 1\\n1 1\\n2 1') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'YES'\nassert solution('3 4') == 'NO'\n\n'''"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\n\nimport re\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3 5\n1\n2\n3\n3\n2\n1\n''') == \"1\", \"Wrong\"\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\"\nassert solution(\"4 4 5\") == \"3\"\nassert solution(\"5 4 5\") == \"2\""
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 5\") == \"1\"\nassert solution(\"6 3 5\") == \"3\"\nassert solution(\"10 10 10 10\") == \"5\"\nassert solution
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 5\\n1\\n2\\n3') == '1'\nassert solution('6 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '3'\nassert solution('6 3 5\\n1\\n2\\n3\\n2\\n1\\n3') == '3'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3 2') == '1'\nassert solution('2\\n3 4') == '1'\nassert solution('2\\n3 4') == '2'\nassert solution('4\\n3 2') == '2'\nassert solution('2\\n3 4') == '2'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\nassert solution('5 3 1') == '3'\nassert solution('3 2 5') == '1'\nassert solution('6 2 1') == '4'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3 5\n1\n2\n3''') == '1'\nassert solution('''6 3 5\n1\n2\n3\n3\n2\n1\n''') == '3'\nprint('All tests passed!')"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 2\\n1 2\\n3 3\") == \"3 2\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 2\\n1 2\\n3 3\") == \"3 2\"\nassert solution(\"5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\") == \"12 3\""
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n0 2\n1 2\n3 3\n\"\"\") == \"3 2\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0 2'\nassert solution('2') == '1 3'\nassert solution('3') == '3 3'\nassert solution('4') == '10 9'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 2\n1 2\n3 3\n''') == '3 2'\nassert solution('''\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n''') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0 2\\n1 3\\n3 3') == '3 2'\nassert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5') == '12 3'\nassert solution('6\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\\n5 4') == '10 6'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2 1'\nassert solution('3') == '1 1 1'\nassert solution('5') == '1 1 1 1 1'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2 2'\nassert solution('5') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n1') == '1 1'\nassert solution('3\\n2\\n1\\n1\\n3\\n2\\n1') == '3 2'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0 2\\n1 2') == '3 2'\nassert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5') == '12 3'"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 0\\n0\") == \"100\"\nassert solution(\"3\\n0 1 1\\n1\") == \"0010\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"100\"\nassert solution(\"0\") == \"000\"\nassert solution(\"1 1\") == \"001\"\nassert solution(\"1 1 1\") == \"010\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\") == \"100\"\nassert solution(\"3\\n0\") == \"010\"\nassert solution(\"3\\n1 1\") == \"001\"\nassert solution(\"3\\n1 1 1\") == \"010\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1\n0\n0\n3\n''') == '100'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '100'\nassert solution('1') == '00'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\n''') == '100\\n000\\n01\\n01\\n01\\n01\\n01\\n01\\n'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '100'\nassert solution('3') == '0100'\nassert solution('4') == '0111'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n0\n0\n3\n1\n0\n2\n1\n0\n''') == '0110'\nassert solution('''\n2\n0\n0\n3\n1\n0\n2\n1\n0\n''') == '10010'\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\nSample Input 3:\n3\n0\n1 1\n1\n1 1\n1\n1\nSample Output 3:\n0000\n1001\n0010\n101\n010\n000\n100\n''') == '0000'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n0\n1\n0\n0\n''') == '100'\nassert solution('''\n2\n0\n1 1\n1\n1 1\n1\n1\n''') == '00101'\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\n''') == '011110'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 1') == '3'\nassert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 1') == '2'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 1') == '1'\nprint('all tests passed')"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3'\n\nassert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '2'\n'''\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\nassert solution([[1,2],[2,3],[2,3],[3,4]]) == \"2\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 1\n1 2\n2 3\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 2\n1 2\n1 2\n3 4\n3 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 2\n3 3\n3 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2 2\n3 3\n3 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1\n1 2\n2 3\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n8 1\n1 2\n2 5\n4 7\n4 8\n5 3\n6 6\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1 10\n10 1\n1 2\n5 7\n9 9\n10 5\n1 9\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5 5\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"0\"\n\nprint(solution(input()))"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '3'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '4'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3'\nassert solution('''\n100 1\n1 100\n1 200\n2 200\n1 300\n3 300\n1 500\n2 500\n1 600\n2 600\n2 600\n3 600\n3 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '3'\n'''\n'''\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 1') == '3'\nassert solution('4 2') == '3'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '90.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '90.00000000'\nassert solution('5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '126.86989765'\nassert solution('20 10 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == 'Impossible'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == '90.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 450') == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 500\") == \"126.86989765\"\nassert solution(\"5 6 450\") == \"126.86989765\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"Impossible\"\nassert solution('2 1 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == \"90.00000000\"\nassert solution('5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == \"126.86989765\""
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n\") == \"90.00000000\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\"\n) == \"90.00000000\"\nassert solution(\n    \"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\"\n) == \"126.86989765\"\nassert solution(\n    \"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\"\n) == \"Impossible\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 100\") == \"90.00000000\"\nassert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 500 0 0\") == \"Impossible\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(37) == 4\nassert solution(30014) == 7\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n5\n3\n4\n5\n4\n5\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\"\"\") == \"7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\"\n\nassert solution(\"\"\"37\n3\n2\n8\n3\n5\n4\n6\n7\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\"\"\") == \"8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''37\n37\n37\n37\n37\n37\n37\n37''') == '4'\nassert solution('''30014\n30014\n30014\n30014\n30014\n30014\n30014\n30014''') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n\nstdin = \"\"\"\n36\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n10\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''37\n30014\n85 29929\n88 29926\n785 29229\n788 29226\n7785 22229\n7788 22226\n7789 22225''') == \"7\"\nassert solution('''37\n30014\n85 29929\n88 29926\n785 29229\n788 29226\n7785 22229\n7788 22226\n7789 22225''') == \"8\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\"\nassert solution(\"15\") == \"8\"\nassert solution(\"715\") == \"9\"\nassert solution(\"1525\") == \"11\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 1\\n') == '3.5'\nassert solution('3 3 2\\n') == '4.9'\n\n-- Java cases --\nInput\nOur program receives a string of numbers separated by a space. Write a regular expression to match the exact format.\n\nNote:\nn is a positive integer, d is an integer in the range [1, 500], r is an integer in the range [1, n].\n\nSample Input 1:\n2 3 1\nSample Output 1:\n3.5\n\nSample Input 2:\n3 3 2\nSample Output 2:\n4.9\nSample Output 3:\n4.99\n\nExplanation\n\nRegular expressions are useful in this problem.\n\nThe regular expression that the program will use to match the input must not contain any parentheses.\n\nFor example, if you want to match a number like 2, with the following input:\n\n2 3 1\n\nthe program should see this input as:\n\n2 3 1\n\nThe regular expression, \"2 3 1\" does not contain any parentheses. If you try to match such an input, the program will try to find the first whole number followed by a colon and a space, which will not match in this example.\n\nTherefore, the program must try to find such a regular expression in order to match such an input.\n\nThe regular expression that the program will use to match the input must contain at least one parenthesis, and it must not contain any parentheses. If you want to match a number like 2, with the following input:\n\n2 3 1\n\nthe program should see this input as:\n\n2 3 1\n\nThe regular expression, \"2 3 1\" does contain at least one parenthesis. However, it must not contain any parentheses. If you try to match such an input, the program will see the whole string and try to match a whole number followed by a colon and a space, which would not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\nThe regular expression that the program will use to match the input must contain at least one parenthesis, and it must not contain any parentheses. If you want to match a number like 2, with the following input:\n\n2 3 1\n\nthe program should see this input as:\n\n2 3 1\n\nThe regular expression, \"2 3 1\" does contain at least one parenthesis. However, it must not contain any parentheses. If you try to match such an input, the program will see the whole string and try to match a whole number followed by a colon and a space, which would not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\nSo, the regular expression that the program will use to match the input must not contain any parentheses. If you try to match such an input, the program will see the whole string and try to match a whole number followed by a colon and a space, which would not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\n-- Python cases --\nInput\nOur program receives a string of numbers separated by a space. Write a regular expression to match the exact format.\n\nNote:\nn is a positive integer, d is an integer in the range [1, 500], r is an integer in the range [1, n].\n\nSample Input 1:\n2 3 1\nSample Output 1:\n3.5\n\nSample Input 2:\n3 3 2\nSample Output 2:\n4.9\nSample Output 3:\n4.99\n\nExplanation\n\nRegular expressions are useful in this problem.\n\nThe regular expression that the program will use to match the input must not contain any parentheses.\n\nFor example, if you want to match a number like 2, with the following input:\n\n2 3 1\n\nthe program should see this input as:\n\n2 3 1\n\nThe regular expression, \"2 3 1\" does not contain any parentheses. If you try to match such an input, the program will try to find the first whole number followed by a colon and a space, which will not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\nThe regular expression that the program will use to match the input must contain at least one parenthesis, and it must not contain any parentheses. If you want to match a number like 2, with the following input:\n\n2 3 1\n\nthe program should see this input as:\n\n2 3 1\n\nThe regular expression, \"2 3 1\" does contain at least one parenthesis. However, it must not contain any parentheses. If you try to match such an input, the program will see the whole string and try to match a whole number followed by a colon and a space, which would not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\nThe regular expression that the program will use to match the input must contain at least one parenthesis, and it must not contain any parentheses. If you want to match a number like 2, with the following input:\n\n2 3 1\n\nthe program should see this input as:\n\n2 3 1\n\nThe regular expression, \"2 3 1\" does contain at least one parenthesis. However, it must not contain any parentheses. If you try to match such an input, the program will see the whole string and try to match a whole number followed by a colon and a space, which would not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\nSo, the regular expression that the program will use to match the input must not contain any parentheses. If you try to match such an input, the program will see the whole string and try to match a whole number followed by a colon and a space, which would not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\n-- Java cases --\nInput\nOur program receives a string of numbers separated by a space. Write a regular expression to match the exact format.\n\nNote:\nn is a positive integer, d is an integer in the range [1, 500], r is an integer in the range [1, n].\n\nSample Input 1:\n2 3 1\nSample Output 1:\n3.5\n\nSample Input 2:\n3 3 2\nSample Output 2:\n4.9\nSample Output 3:\n4.99\n\nExplanation\n\nRegular expressions are useful in this problem.\n\nThe regular expression that"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 1\\n') == '3.5'\nassert solution('3 3 2\\n') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 1\n''') == '3.5'\nassert solution('''\n3 3 2\n''') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == \"1.5\"\nassert solution(\"1 1 2\") == \"2.5\"\nassert solution(\"1 2 1\") == \"2.5\"\nassert solution(\"2 1 2\") == \"4.9\"\nassert solution(\"2 2 1\") == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3 1\n''') == '3.5'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 5 1\") == \"6.0\"\nassert solution(\"1 100 1\") == \"100.0\"\nassert solution(\"5 5 2\") == \"3.100000000000001\""
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\""
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\nassert solution('12 3 5 3') == '2'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 5 1 5\n''') == '19'\nassert solution('''\n12 12 1 12\n''') == '4'\nprint(solution('''\n1 5 1 5\n'''))\nprint(solution('''\n12 12 1 12\n'''))\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == \"4\"\nassert solution([1, 5, 1, 5]) == \"19\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 5 1 5\n''') == '19'\nassert solution('''\n12 12 1 12\n''') == '4'''\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 5 1 5\n''') == '19'\n\nassert solution('''\n10 9 8 7\n''') == '15'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 5\n1 2\n3 4\n2 6\n2 5\n2 3\n1 5''') == '4'\nassert solution('''1 20\n2 20\n2 30\n3 30\n2 40\n2 44\n2 45\n2 46\n2 47\n2 48\n2 49\n2 50\n2 51\n2 52\n2 53\n2 54\n2 55\n2 56\n2 57\n2 58\n2 59\n2 60\n2 61\n2 62\n2 63\n2 64\n2 65\n2 66\n2 67\n2 68\n2 69\n2 70\n2 71\n2 72\n2 73\n2 74\n2 75\n2 76\n2 77\n2 78\n2 79\n2 80\n2 81\n2 82\n2 83\n2 84\n2 85\n2 86\n2 87\n2 88\n2 89\n2 90\n2 91\n2 92\n2 93\n2 94\n2 95\n2 96\n2 97\n2 98\n2 99\n3 99\n3 100\n4 100\n4 101\n4 102\n4 103\n4 104\n4 105\n4 106\n4 107\n4 108\n4 109\n4 110\n4 111\n4 112\n4 113\n4 114\n4 115\n4 116\n4 117\n4 118\n4 119\n4 120\n4 121\n4 122\n4 123\n4 124\n4 125\n4 126\n4 127\n4 128\n4 129\n4 130\n4 131\n4 132\n4 133\n4 134\n4 135\n4 136\n4 137\n4 138\n4 139\n4 140\n4 141\n4 142\n4 143\n4 144\n4 145\n4 146\n4 147\n4 148\n4 149\n4 150\n4 151\n4 152\n4 153\n4 154\n4 155\n4 156\n4 157\n4 158\n4 159\n4 160\n4 161\n4 162\n4 163\n4 164\n4 165\n4 166\n4 167\n4 168\n4 169\n4 170\n4 171\n4 172\n4 173\n4 174\n4 175\n4 176\n4 177\n4 178\n4 179\n4 180\n4 181\n4 182\n4 183\n4 184\n4 185\n4 186\n4 187\n4 188\n4 189\n4 190\n4 191\n4 192\n4 193\n4 194\n4 195\n4 196\n4 197\n4 198\n4 199\n5 199\n5 200\n5 201\n5 202\n5 203\n5 204\n5 205\n5 206\n5 207\n5 208\n5 209\n5 210\n5 211\n5 212\n5 213\n5 214\n5 215\n5 216\n5 217\n5 218\n5 219\n5 220\n5 221\n5 222\n5 223\n5 224\n5 225\n5 226\n5 227\n5 228\n5 229\n5 230\n5 231\n5 232\n5 233\n5 234\n5 235\n5 236\n5 237\n5 238\n5 239\n5 240\n5 241\n5 242\n5 243\n5 244\n5 245\n5 246\n5 247\n5 248\n5 249\n5 250\n5 251\n5 252\n5 253\n5 254\n5 255\n6 254\n6 253\n6 252\n6 251\n6 250\n6 249\n6 248\n6 247\n6 246\n6 245\n6 244\n6 243\n6 242\n6 241\n6 240\n6 239\n6 238\n6 237\n6 236\n6 235\n6 234\n6 233\n6 232\n6 231\n6 230\n6 229\n6 228\n6 227\n6 226\n6 225\n6 224\n6 223\n6 222\n6 221\n6 220\n6 219\n6 218\n6 217\n6 216\n6 215\n6 214\n6 213\n6 212\n6 211\n6 210\n6 209\n6 208\n6 207\n6 206\n6 205\n6 204\n6 203\n6 202\n6 201\n6 200\n6 199\n6 198\n6 197\n6 196\n6 195\n6 194\n6 193\n6 191\n6 190\n6 189\n6 188\n6 187\n6 186\n6 185\n6 184\n6 183\n6 182\n6 181\n6 180\n6 179\n6 178\n6 177\n6 176\n6 175\n6 174\n6 173\n6 172\n6 171\n6 170\n6 169\n6 168\n6 167\n6 166\n6 165\n6 164\n6 163\n6 162\n6 161\n6 160\n6 159\n6 158\n6 157\n6 156\n6 155\n6 154\n6 153\n6 152\n6 151\n6 150\n6 149\n6 148\n6 147\n6 146\n6 145\n6 144\n6 143\n6 142\n6 141\n6 140\n6 139\n6 138\n6 137\n6 136\n6 135\n6 134\n6 133\n6 132\n6 131\n6 130\n6 129\n6 128\n6 127\n6 126\n6 125\n6 124\n6 123\n6 122\n6 121\n6 120\n6 119\n6 118\n6 117\n6 116\n6 115\n6 114\n6 113\n6 112\n6 111\n6 110\n6 109\n6 108\n6 107\n6 106\n6 105\n6 104\n6 103\n6 102\n6 101\n6 100\n6 99\n6 98\n6 97\n6 96\n6 95\n6 94\n6 93\n6 92\n6 91\n6 90\n6 89\n6 88\n6 87\n6 86\n6 85\n6 84\n6 83\n6 82\n6 81\n6 80\n6 79\n6 78\n6 77\n6 76\n6 75\n6 74\n6 73\n6 72\n6 71\n6 70\n6 69\n6 68\n6 67\n6 66\n6 65\n6 64\n6 63\n6 62\n6 61\n6 60\n6 59\n6 58\n6 57\n6 56\n6 55\n6 54\n6 53\n6 52\n6 51\n6 50\n6 49\n6 48\n6 47\n6 46\n6 45\n6 44\n6 43\n6 42\n6 41\n6 40\n6 39\n6 38\n6 37\n6 36\n6 35\n6 34\n6 33\n6 32\n6 31\n6 30\n6 29\n6 28\n6 27\n6 26\n6 25\n6 24\n6 23\n6 22\n6 21\n6 20\n6 19\n6 18\n6 17\n6 16\n6 15\n6 14\n6 13\n6 12\n6 11\n6 10\n6 9\n6 8\n6 7\n6 6\n6 5\n6 4\n6 3\n6 2\n6 1\n6 0\n6 -1\n6 -2\n6 -3\n6 -4\n6 -5\n6 -6\n6 -7\n6 -8\n6 -9\n6 -10\n6 -11\n6 -12\n6 -13\n6 -14\n6 -15\n6 -16\n6 -17\n6 -18\n6 -19\n6 -20\n6 -21\n6 -22\n6 -23\n6 -24\n6 -25\n6 -26\n6 -27\n6 -28\n6 -29\n6 -30\n6 -31\n6 -32"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 5\n''') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 10') == '2'\nassert solution('1 5') == '1'\nassert solution('1 12') == '2'\nassert solution('1 12 10') == '2'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\nassert solution('2 3') == '0'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 5\n''') == '4'\nassert solution('''\n1 12\n''') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 5\n''') == '4'\nassert solution('''\n1 12\n''') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2') == '1'\nassert solution('3\\n10') == '3'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(r\"\"\"\n1 5\n\"\"\") == \"4\"\nassert solution(r\"\"\"\n1 10\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4 5\") == \"2 4\"\nassert solution(\"3 10 1\") == \"10 1\"\nassert solution(\"3 1 2\") == \"2\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\nassert solution(\"codar\") == \"1\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4\\n\"\n    \"0 2 0 1\\n\") == \"8\"\nassert solution(\n    \"5\\n\"\n    \"1000000 1 1 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n\"\n    \"0 2 0 1\"\n    ) == \"8\"\n\nassert solution(\n    \"5\\n\"\n    \"1000000 1 1 1 1\"\n    ) == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == \"8\"\nassert solution('1000000') == \"0\"\nassert solution('0') == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n0 2 0 1\n''') == '8'\nassert solution('''5\n1000000 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1000000 1 1 1 1') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n1000000 1 1 1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10\n1000000000000001 1000000000000001 1000000000000001 1000000000000001 1000000000000001\n\"\"\") == \"1000000000000001\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"0\""
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '0'\nassert solution('5\\n1000000 1 1 1 1') == '0'\nprint('Tests passed')\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n\n''') == 'zyz', \"Expected 'zyz' but got '{}'\".format(solution('''\n3\n\n'''))\n\nassert solution('''\n5\n\n''') == '-1', \"Expected '-1' but got '{}'\".format(solution('''\n5\n\n'''))"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2\n''') == 'zyz'\nassert solution('''\n2 1\n''') == -1\nassert solution('''\n2 3\n''') == 'zyz'\n\nassert solution('''\n2 4\n''') == 'zyz'\nassert solution('''\n2 5\n''') == 'zyz'"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 651\") == \"zyz\"\nassert solution(\"3 1\") == \"-\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == -1\nassert solution(\"abca\") == \"aba\"\nassert solution(\"ababac\") == \"aba\"\nassert solution(\"ababad\") == \"aba\"\nassert solution(\"zyzzy\") == \"zyzzy\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 650\n''') == 'zyz'\nassert solution('''\n2 651\n''') == '-1'\nassert solution('''\n100 2\nabcdefghijklmnopqrstuvwxyz\n''') == 'zyz'\nassert solution('''\n100 3\nabcdefghijklmnopqrstuvwxyz\n''') == 'zyz'\nassert solution('''\n100 5\nabcdefghijklmnopqrstuvwxyz\n''') == 'zyz'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n2 5\n''') == 'zyz'\n\nassert solution('''\n2 1\n2 2\n''') == '-1'\n\nassert solution('''\n1 1\n2 5\n''') == 'zyz'\n\nassert solution('''\n1 1\n2 2\n''') == '-1'\n\nassert solution('''\n1 1\n1 4\n''') == '1'"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 651') == 'zyz'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"abab\"\nassert solution(\"2 2\") == \"zyz\"\nassert solution(\"1 3\") == \"ababab\"\nassert solution(\"2 3\") == \"zyzzzyz\"\nassert solution(\"1 4\") == \"abababab\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\nprint(solution(input()))"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    6\n    0 10 0\n    10 0 1\n    12 8 1\n    5 5 0\n    11 2 1\n    11 3 0\n''') == '4'\nassert solution('''\n    10\n    6 1 1\n    0 2 0\n    2 1 1\n    6 1 1\n    8 2 0\n    4 4 0\n    4 0 0\n    2 3 1\n    6 1 0\n    6 3 1\n''') == '8'\n\nprint(solution('''\n    10\n    6 1 1\n    0 2 0\n    2 1 1\n    6 1 1\n    8 2 0\n    4 4 0\n    4 0 0\n    2 3 1\n    6 1 0\n    6 3 1\n'''))"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0') == '4'\nassert solution('10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1') == '8'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 0\") == \"0\"\nassert solution(\"6 1 1\") == \"1\""
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n10 0 10 0\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0') == '4'\nassert solution('5\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1') == '8'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('10') == '0'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\") == \"4\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '8'\nassert solution('10') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '4'\nassert solution('10') == '8'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '1'\nassert solution('1 2 10') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\nassert solution(stdin=\"2 4 3\\n3 4 5 7\\n1 2 10\\n\") == '2'\nassert solution(stdin=\"3 5 2\\n1 4 7 9 11\\n2 3\\n\") == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\n\nprint(solution())\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\n\"\"\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\nassert solution('3 5 2') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 4 3\n3 4 5 7\n1 2 10\n''') == '0'\nassert solution('''3 5 2\n1 4 7 9 11\n2 3\n''') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\nassert solution('3 5 2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4 3\") == \"0\"\nassert solution(\"3 5 2\") == \"2\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n3 2\") == \"1\"\nassert solution(\"1 2\\n3 4\") == \"3\"\nassert solution(\"2\\n3 4\") == \"2\"\n\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        print(out)\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"2 3\n3 2\"\"\"\n        output = \"\"\"1\n-2 -1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1 2\n3 4\"\"\"\n        output = \"\"\"3\n-1 1\n2 1\n0 -2\"\"\"\n        self."
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2') == '1'"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n3 2\n''') == '1'\nassert solution('''\n3 3\n2 2\n''') == '1'\nassert solution('''\n1 2\n2 1\n''') == '2'\nassert solution('''\n1 2\n1 1\n''') == '2'\nassert solution('''\n1 2\n2 1\n''') == '2'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"-2 -1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"0 0\") == \"2\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\n3 2\n''') == '1'\n\nassert solution('''\n2 5\n3 2\n''') == '3'\n\nassert solution('''\n1 3\n3 2\n''') == '2'\n\nassert solution('''\n1 5\n2 3\n''') == '3'\n\nassert solution('''\n2 2\n1 2\n''') == '3'"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == '3'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"1\""
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 2') == '1'\n\nassert solution('1 2') == '2'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 4\") == \"3\""
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '0 -1'"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '4', \"Wrong solution\"\nprint(\"A+\")\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\nIVO\nJASNA\nJOSIPA''') == '4'\nassert solution('''5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA''') == '24'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\nIVO\nJASNA\nJOSIPA''') == '4'\nassert solution('''5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA''') == '24'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1', \"1st example\"\nassert solution('3') == '4', \"2nd example\"\nassert solution('4') == '24', \"3rd example\"\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '4'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '0'"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '4'\nassert solution('5') == '24'\n\nassert solution('''5\nMARIA\nMARCEAU\nMARIA\nMARCELO\nMARCELA\nMARCELIA\nMARCAE''') == '24'\nassert solution('''3\nIVO\nJASNA\nJOSIPA\n''') == '4'\nassert solution('''4\nMARISA\nMARISA\nMARI\nMARI\n''') == '12'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"4\", \"Wrong\"\nassert solution(\"5\") == \"24\", \"Wrong\""
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\") == \"4\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\") == \"24\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\nIVO\nJASNA\nJOSIPA\n\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"\n5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA\n\"\"\"\n) == \"24\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 3 1') == '3'\nassert solution('3 2 3 1') == '3'\nassert solution('4 2 3 1') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"39\""
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 2 3 1\n2 3 4 1\n3 4 5 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1 2 3 1\n2 3 4 1\n3 4 5 1\n\"\"\") == \"39\"\nassert solution(\"\"\"\n1 2 3 1\n3 1 5 6\n1 9 4 7\n\"\"\") == \"41\"\nassert solution(\"\"\"\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n\"\"\") == \"39\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 2 3 1\n3 1 5 6\n1 9 4 7\n\"\"\") == \"3\"\n\"\"\"\n-----Hint-----\nSolving the problem is quite straight forward.\n\nIt is exactly the same problem you saw in class, but now you have to make use of the knowledge you gained in class.\n\nIn class, we saw that we can build a DP table that accumulates the minimum value of $f_i$ for each $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nWe then compute $min_i{f_i}$, where we have to make sure that $min_i{f_i}$ is >= 0.\n\nSo we can loop through each $i$ and accumulate the minimum value of $f_i$ for each $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nNow, we can check if there is any profit in that position, and it's worth buying!\n\nUsing the formula:\n\n$min_i{f_i} = f_i - p_i - m_i$\n\nIf we have to buy from position $i$, then the profit that we have gained from selling the snacks is $min_i{f_i}$, and we need to use the total profit from the machine to get at least $min_i{f_i}$.\n\nWe can use a dynamic programming approach:\n\nLet $dp$ be an array of size $n$, initialized to $0$s.\n\nThe first element of $dp$ is the minimum profit from position $1$ to $n$, since we can buy from position $1$ only.\n\nAnd we initialize $dp[1]$, since we have to buy at position $1$.\n\nThen, we loop through all $i$ to $n$:\n\n$dp[i] = min(dp[i-1], dp[i-2] + min_i{f_i})$, where $i$ is the position in the machine, and $min_i{f_i}$ is the minimum value of $f_i$ for all $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nSo, we can say that\n\n$dp[n] = min(dp[n-1], dp[n-2] + min_i{f_i})$\n\nwhere $n$ is the position in the machine, and $min_i{f_i}$ is the minimum value of $f_i$ for all $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nIf there is no profit from position $i$, then we can say that\n\n$dp[i] = dp[i-1]$\n\nNow, we can see that we must have a profit from position $i$, and we can only buy at position $i$ if we get at least $min_i{f_i}$.\n\nSo we can say that we must buy from position $i$, and we can get at least $min_i{f_i}$ to get at least $min_i{f_i}$, so we can say that\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nNow, we can say that\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nwhere $i$ is the position in the machine, and $min_i{f_i}$ is the minimum value of $f_i$ for all $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nThen, we can say that\n\n$dp[n] = max(dp[n-1], dp[n-2] + min_i{f_i})$\n\nand\n\n$dp[n] = max(dp[n-1], dp[n-2] + min_i{f_i})$\n\nwith $n$ being the position in the machine, and $min_i{f_i}$ being the minimum value of $f_i$ for all $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nSo, we can say that we can buy from position $i$, and we can get at least $min_i{f_i}$ to get at least $min_i{f_i}$, so we can say that\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nNow, we can say that\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nwhere $i$ is the position in the machine, and $min_i{f_i}$ is the minimum value of $f_i$ for all $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nThen, we can say that we must have a profit from position $i$, and we can only buy at position $i$ if we get at least $min_i{f_i}$.\n\nSo, we can say that\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nSo, we can say that there is profit in position $i$ if and only if\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nor\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nwhere $i$ is the position in the machine, and $min_i{"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39'\nassert solution('''\n4\n1 4 2 2\n1 4 1 2\n2 1 4 2\n2 3 3 2\n''') == '13'"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\\n4 5 6 1\\n5 6 7 1') == '39'\nassert solution('5\\n2 2 3 8\\n3 1 5 6\\n1 9 4 7\\n8 8 8 7') == '62'\n\n'''"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 3 1\n2 3 4 1\n3 4 5 1''') == '3'\nassert solution('''3\n2 2 3 8\n3 1 5 6\n1 9 4 7''') == '39'\nassert solution('''3\n1 2 3 1\n2 3 4 1\n3 4 5 1''') == '3'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '5.2696518641'\nassert solution('1') == '9'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n10 10 -10 10\n2\n4 4 -2 -4\nSample Input 3:\n1\n6 5 4 -2 -2 -2 2 2\nSample Output 3:\n6\n''') == '4.2696518641'\n\nassert solution('''\n1\n7 5 4 -2 -2 -2 2 2\nSample Input 4:\n1\n6 3 -2 -2 -1 2 1\nSample Output 4:\n5.39112222222\n''') == '6.39112222222'\n\nassert solution('''\n1\n4 3 -2 -2 -1 2 1\nSample Input 5:\n1\n9 2 1 1\nSample Output 5:\n2\n''') == '2.2'\n\nimport itertools\nfrom functools import reduce"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1''') == '5.2696518641'\n\nimport unittest\nimport io\nfrom collections import namedtuple\nfrom typing import NamedTuple\n\nclass Test_solution(unittest.TestCase):\n\n    def test_solution(self):\n        def test_input(self):\n            input_data = \"\"\"2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\"\"\"\n            expected_output = \"\"\"5.2696518641\"\"\"\n            self.assertEqual(expected_output, solution(input_data))\n\n    def test_edge_case_input(self):\n        input_data = \"\"\"1\n8 10 4 -1 -1 1 -1 1 1 -1 1\"\"\"\n        expected_output = \"\"\"8.0000066438\"\"\"\n        self.assertEqual(expected_output, solution(input_data))\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '5.2696518641'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"5.2696518641\"\nassert solution(\"1\") == \"9\""
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"5.2696518641\"\nassert solution(\"1\") == \"9\"\nprint('Tests finished')"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"5.2696518641\"\nassert solution(\"3\") == \"9.0\"\nassert solution(\"4\") == \"9.0\"\nassert solution(\"5\") == \"8.0\""
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"9.0\"\nprint(solution(input_))\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1''') == '5.2696518641'\nassert solution('''1\n8 9 3 -14 -14 14 -14 0 20''') == '9'\nassert solution('''3\n2 3 -1 3 1 2 3''') == '0.0'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '5.2696518641'\nassert solution('''\n3\n1 -1 0\n2 0 -1\n3 0 0\n''') == '1.6923076924'\nassert solution('''\n3\n-5 -5 1\n1 1 -1\n1 -1 -1\n''') == '1.6923076924'\nassert solution('''\n10\n-5 -5 1\n1 1 -1\n1 -1 -1\n-1 -1 1\n-1 1 -1\n-1 -1 -1\n1 1 -1\n1 -1 -1\n1 -1 1\n-1 1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n1 1 1\n1 1 -1\n1 1 1\n1 1 1\n''') == '10.6923076923'\n\nsolution('''\n1\n1 2\n1 1\n''') == '0.5'\nsolution('''\n2\n1 2\n1 1\n''') == '2.5'\n\nsolution('''\n10\n-5 -5 1\n1 1 -1\n1 -1 -1\n-1 -1 1\n-1 1 -1\n-1 -1 -1\n1 1 -1\n1 -1 -1\n1 -1 1\n-1 1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n1 1 1\n1 1 -1\n1 1 1\n1 1 -1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n1 1 1\n1 1 -1\n1 1 1\n1 1 -1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n1 1 1\n2 0 2\n3 1 1\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1 1\\n2 0 2\\n3 1 1\") == \"1\"\nassert solution(\"3\\n4 1 1\\n5 2 3\\n5 0 3\") == \"8\"\nassert solution(\"4\\n4 1 1\\n5 2 3\\n5 0 3\") == \"24\"\nassert solution(\"5\\n4 1 1\\n5 2 3\\n5 0 3\") == \"-1\"\nassert solution(\"6\\n4 1 1\\n5 2 3\\n5 0 3\") == \"4\"\n\n\"\"\"\nimport math\n\nfrom itertools import product\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == '1'\nprint(solution(input))\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"8\"\nassert solution(\"\"\"\n3\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2\n3 2 1\n1 0 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n2 1 1\n2 0 2\n3 1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '-1'\nassert solution('3') == '8'\nassert solution('4') == '4'\nassert solution('5') == '24'\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == -1, \"solution needs to return a valid solution\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '-1', 'First'\nassert solution('3') == '1', 'Second'\nassert solution('4') == '8', 'Third'\nassert solution('5') == '4', 'Fourth'\nassert solution('6') == '24', 'Fifth'\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 1') == '1'\nassert solution('3\\n4 1 1') == '8'\nassert solution('3\\n5 1 1') == '4'\nassert solution('3\\n5 2 3') == '24'\nassert solution('3\\n5 0 3') == '-1'"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"1\n\nassert solution(\"\"\"\n3\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"4\n\nassert solution(\"\"\"\n4\n10 1 1 1\n5 2 3\n6 2 4\n4 1 1\n\"\"\") == \"4\n\nassert solution(\"\"\"\n4\n5 1 1\n4 0 2\n3 1 1\n\"\"\") == \"4\n\nassert solution(\"\"\"\n4\n5 1 1\n4 0 2\n3 1 1\n5 1 1\n\"\"\") == \"6"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1 1\n2 0 2\n3 1 1\n''') == '1'\nassert solution('''3\n4 1 1\n5 2 3\n5 0 3\n''') == '8'\nassert solution('''5\n4 1 1\n5 2 3\n5 0 3\n5 4 2\n''') == '4'\nassert solution('''6\n4 1 1\n5 2 3\n5 0 3\n5 4 2\n''') == '24'\nassert solution('''3\n3 1 1\n2 1 1\n3 1 1\n''') == '-1'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n''') == '3'\n\nassert solution('''\n6 6\n''') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n6 6\\n\") == \"240\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\n''') == '3'\nassert solution('''6 6\n''') == '240'\nprint('You passed all the tests!')\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\n2 3\n1 2''') == '3'\nassert solution('''6 6\n2 3\n1 2\n3 2''') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n3 4') == '3'\nassert solution('6 6') == '240'\nassert solution('2 2\\n1 1') == '2'"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"6 6\") == \"240\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '3'\nassert solution('1 5') == '11'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n\n'''"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''SEND+MORE=MONEY''') == '9567+1085=10652'\nassert solution('''A+A=A''') == 'impossible'\nprint(\"You passed {}% of the test cases. Nice job!\" % ((solution('SEND+MORE=MONEY') == '9567+1085=10652') * 100.0))\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\nassert solution('GOOD') == 'impossible'\n\n\"\"\"\n\n\n\"\"\"\n1. Try to understand the question\n2. Create a recursive function to solve\n3. Create a function that will check for the right recursion\n4. Create a function that will solve the puzzle\n\"\"\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('C+B=A') == '2+1=3'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('C+B=A') == '2+1=3'\n\nNote: The puzzle is not a problem if it is impossible to make the equality hold for any given puzzle, but the tests for that are included for completeness.\n\"\"\"\n\nimport sys\nimport math\n\ns = sys.stdin.readline().strip()\nprint(solution(s))"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\n\nassert solution('A+A=A') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\nprint(solution(input()))"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n0 1 2 3') == '14'\nassert solution('5\\n1 1 2 1 1') == '1'\nprint(solution(input()))"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"14\"\nassert solution(\"15\") == \"4\"\nassert solution(\"20\") == \"7\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0 1 2 3\n''') == '14'\nassert solution('''\n5\n1 1 2 1 1\n''') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n0 1 2 3\n''') == '14'\nassert solution('''\n5\n1 1 2 1 1\n''') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1 2 3') == '14'\nassert solution('5\\n1 1 2 1 1') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '14'\nassert solution('3') == '3'\nassert solution('2') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2 3\n7\n''') == '1'\nassert solution('''1 2 3\n4 5 6\n''') == '2'\nassert solution('''3 2 1\n4 5 6\n''') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1 2 3\\n\") == \"14\"\nassert solution(\"4\\n0 1 2 3\\n\") == \"1\"\nassert solution(\"5\\n1 1 2 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '14'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 7 8 0\n7 0 0 10\n''') == '-1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_str) == output_str\n\nOUTPUT\n\nSample Case 1\nSample Case 2\n'''\n\n\nimport math"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\nassert solution('''\n4 4\n1 2 3 0\n4 0 5 6\n7 0 0 10\n7 0 0 10\n''') == '-1'\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\nassert solution('''\n3 3\n0 1 2\n0 0 2\n1 2 0\n''') == '-1'\nassert solution('''\n2 2\n1 0\n0 0\n''') == '1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '88'"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == \"88\", \"Wrong\"\n\nassert solution('''\n4 4\n1 2 3 0\n1 2 3 0\n1 2 3 0\n1 2 3 0\n''') == \"90\", \"Wrong\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4') == '88'\nassert solution('4 4') == '-1'\n\n---Input Format---\nThe first line contains $n$ and $m$ separated by a single space.\nThe next $n$ lines contain $m$ space-separated integers describing the contents of the checkerboard.\nThe first integer of each line is the column number.\nThe next integer is the row number.\n\n---Output Format---\nOutput a single integer, the minimum possible sum that can be achieved by replacing the 0 cells with the numbers of positive integers to make a valid Magic Checkerboard.\n\nSample Output 1:\n88\n\nSample Output 2:\n-1\n\"\"\""
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == '88'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n') == '88'\nassert solution('5 5\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n2 3 4 5\\n8 9 0 1\\n') == '-1'\n\n'''"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"9999700002.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 1\n1 1\n''') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\nprint('all tests passed')"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1\\n1 1') == '0.000'\nassert solution('5\\n1 99999\\n9999 99999') == '9999700002.000'\nassert solution('4\\n1 1\\n1 1\\n1 1\\n1 1') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0.000'\nassert solution('1') == '0.000'\nassert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\nassert solution('99999 99999') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n1 1\n1 1\n\"\"\") == \"0.000\"\nassert solution(\"\"\"\n2\n1 99999\n99999 99999\n\"\"\") == \"9999700002.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0.000'\nassert solution('2') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 1\n1 1\n''') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"9999700002.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 8 1 6\") == \"3\"\nassert solution(\"3 4 1 2\") == \"3\"\n\ninput()"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == 'Infinity'\nassert solution('3 4 1 2') == 'Infinity'\nassert solution('2 7 8 5 1 3') == '4'\nassert solution('5 2 8 5 1 3') == '5'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == '3'"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n1\n2\n3\n4\n5\n''') == 'Infinity'\nassert solution('''\n4\n1 2\n1 3\n2 4\n3 4\n''') == 'Infinity'\n\n'''"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == \"3\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == '3'\nassert solution('3 4 1 2') == '3'\nassert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5') == '3'\nassert solution('3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2\\nSample Output 2:') == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == '3'\nassert solution('5 6 2 1') == '4'\nassert solution('4 2 3') == '4'\nassert solution('2 3 2') == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1') == 'impossible'\nassert solution('3 1') == '000,001,011,010,110,111,101,100'"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 1\n1\n2\n2\n2\n1\n1\n1\n''') == \"impossible\"\n\n'''\n\nn, p = map(int, input().split())\npalette = {i for i in range(1, n+1)}"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 1\n5\n3 1\n1\n2 1\n5 2\n3 2''') == 'impossible'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n6 1\n1\n\"\"\") == \"impossible\"\n\nassert solution(\n\"\"\"\n3 1\n1\n\"\"\") == \"000\""
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == \"impossible\"\nassert solution('6 1') == \"impossible\""
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 1\\n1\") == \"impossible\"\nassert solution(\"3 1\\n1\") == \"000\"\nassert solution(\"4 1\\n1\") == \"111\"\nassert solution(\"5 1\\n1\") == \"011\"\nassert solution(\"6 1\\n2\") == \"000\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 1') == 'impossible'\nassert solution('3 1') == '000'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == 'impossible'\nassert solution('4 5') == '1100'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1\n1\n''') == 'impossible'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 1\n1\n''') == 'impossible'\nassert solution('''3 1\n1\n''') == '000'\nassert solution('''4 1\n1\n''') == '111'\nassert solution('''5 1\n1\n''') == '100100'\nassert solution('''5 1\n2\n''') == '1101'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '2'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"2\"\nassert solution(\"100\") == \"2\"\nassert solution(\"1000\") == \"4\"\nassert solution(\"10000\") == \"4\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"9\") == \"1\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"2\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"99\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"90\") == \"9\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\") == \"1\\n2\"\nassert solution(\"90\\n10\") == \"10\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string_1) == \"1\"\nassert solution(input_string_2) == \"10\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"1\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"1\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '2'\nassert solution('7') == '7'\nassert solution('12345678') == '3'\nassert solution('123456789') == '4'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n2 3 3\n4 1 10\n2 7 3\nSample Output 1:\n2\n\nSample Input 2:\n5\n3 1 3 3\n5 8 7 10\n4 1 2 6\nSample Output 2:\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n2 3 3\n4 1 10\n2 7 3\nSample Output 1:\n2\n\nSample Input 2:\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\nSample Output 2:\n1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n1 3 7 8\nSample Output 1:\n1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n1 3 3\n5 8 7 10\n4 1 2 6\nSample Output 1:\n2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n10\n3 1 3 3\n5 8 7 10\n4 1 2 6\n1 3 7 8\n1 5 6 7 8\n9 1 2 3 4 5\nSample Output 1:\n3\n\"\"\") == \"2\""
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 3\\n4 1 10\\n2 7 3') == '1'\nassert solution('3\\n2 3 3\\n4 1 10\\n2 7 3') == '2'\nassert solution('2\\n2 3 3\\n4 1 10\\n2 7 3') == '0'\nassert solution('2\\n1 3 4\\n1 2 3\\n2 3 4') == '1'\nassert solution('5\\n8 7 6\\n5 8 1 3\\n4 7 1 3\\n8 1 3 2') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n2 3 3\n4 1 10\n2 7 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n4 1 10\\n2 7 3\\n') == '1'\nassert solution('2\\n2 1 10\\n2 7 3\\n') == '1'\nassert solution('3\\n2 3 3\\n2 7 3\\n') == '2'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '3\\n'\n    '2 3 3\\n'\n    '4 1 10\\n'\n    '2 7 3\\n'\n) == '2'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2 3 3\\n4 1 10\\n2 7 3') == '2'\nassert solution('4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n2 3 3\n4 1 10\n2 7 3\n''') == '2'\nassert solution('''\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n2 3 3\n4 1 10\n2 7 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n2 3 3\n4 1 10\n2 7 3\n''') == '2'\nassert solution('''4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\nassert solution('''5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '0'\nassert solution('''4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '0'\nassert solution('''5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '0'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"aaaaaaaa\") == \"3\"\nassert solution(\"aaaaabaaaa\") == \"3\"\nassert solution(\"aaaaaaaaaaa\") == \"4\"\nassert solution(\"aaaaabaaaaaaa\") == \"4\"\n\n'''\n\n\n'''\nThis is the solution to the first test case.\n'''"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1') == '7'\n\ns = 'cbbd'\ns = 'bacb'\ns = 'abcd'\ns = 'aaaaaabbbbbbaa'\ns = '''\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n12\\n8\\n5') == '9'\nassert solution('2\\n4\\n2') == '3'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 1') == '7'\nassert solution('9 3') == '5'\nassert solution('1 5') == '11'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nbeginning\n1 5\n4 8\n1 9\n''') == '5'\nassert solution('''\n6 1\nvelvet\n1 6\nSample Output 2:\n7\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 1\") == \"7\"\nassert solution(\"9 3\") == \"11\"\nassert solution(\"6 3\") == \"7\"\nassert solution(\"6 1\") == \"7\"\nassert solution(\"6 3\") == \"7\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3\\n5 4\\n9 8') == '6'\nassert solution('6 3\\n5 4\\n9 8') == '7'"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"abc\") == \"\"\nassert solution(\"level\") == \"2\"\nassert solution(\"aab\") == \"2\"\nassert solution(\"iloveme\") == \"6\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5 6') == '7'\nassert solution('1 2 3 4 5 6 7') == '11'\nassert solution('abdacbade') == '7'\nassert solution('abcdef') == '7'\nassert solution('aaa') == '7'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1') == '7'\nassert solution('10 1') == '10'\nassert solution('100 1') == '100'\nassert solution('10000 1') == '10000'\nassert solution('12345 1') == '12345'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 3') == '3'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == '2'\nassert solution('3 1') == '1'\nassert solution('2 3') == '23'\nassert solution('1 23') == '23'\nassert solution('2 17') == '17'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n3 1\n2 2\n1 1\n''') == '2'\nassert solution('''\n2 3\n1 23\n2 17\n''') == '23'\n\nassert solution('''\n5 7\n1 2\n1 3\n2 1\n2 4\n3 2\n3 4\n3 5\n4 1\n4 2\n''') == '4'\n\nassert solution('''\n5 5\n1 2\n1 3\n2 1\n2 4\n3 2\n3 4\n3 5\n4 1\n4 2\n''') == '3'\n\nassert solution('''\n1000000000 6\n0 0\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '678910110'"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 4\n3 1\n2 2\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 1\n1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 5\n1 2\n1 3\n2 4\n2 5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4') == '2'\nassert solution('2 3') == '23'\nassert solution('1 23') == '23'\nassert solution('2 17') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 3\n1 23\n2 17\n\"\"\") == \"23\"\nassert solution(\"\"\"\n2\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1 1\n2 2\n1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"2\"\nassert solution(\"2 3\") == \"23\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 4\n3 1\n2 2\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 3\n1 23\n2 17\n\"\"\") == \"23\"\nassert solution(\"\"\"\n1 1000000000\n1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == \"23\"\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 4\n3 1\n2 2\n1 1\n''') == '2'\nassert solution('''\n5 6\n4 2\n1 1\n2 2\n2 4\n2 5\n2 5\n1 4\n''') == '4'\nassert solution('''\n2 3\n2 2\n2 4\n''') == '2'\n''')\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0.0000000000\"\nassert solution(\"2\") == \"0.0000000000\"\nassert solution(\"3\") == \"0.0000000000\"\nassert solution(\"4\") == \"0.0000000000\"\nassert solution(\"5\") == \"0.0000000000\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n2 2\\n3 3\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\") == \"0.0000000000\"\nassert solution(\"20\\n-10 -5\\n-4 -10\\n4 -4\\n-4 -5\\n-4 -6\\n10 1\\n10 2\\n10 3\\n20 5\\n20 4\\n20 3\\n20 2\\n20 1\\n\") == \"7.28894286936\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 4 0\") == \"0.0000000000\"\nassert solution(\"4 2 3 3 2\") == \"10.0000000000\"\nassert solution(\"2 2 0 0 0 0\") == \"0.0000000000\"\n\n----------------------------------------\n\nSolution by Maniaraja:"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3') == '0.0000000000'\nassert solution('6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0') == '9.476048311178'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n0 0\n2 0\n2 2\n''') == '0.0000000000'\n\nassert solution('''4\n0 0\n2 0\n2 2\n''') == '0.0000000000'\n\nassert solution('''6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n''') == '9.476048311178'\n\"\"\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3''') == '0.0000000000'\nassert solution('''6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0''') == '9.476048311178'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n''') == '0.0000000000'\n\nassert solution('''\n6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n''') == '9.476048311178'"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0.0000000000'\nassert solution('2') == '0.0000000000'\nassert solution('3') == '0.0000000000'\nassert solution('4') == '0.0000000000'\nassert solution('5') == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"0.0000000000\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3') == '0.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n2 0\n1 1\n0 2\n-2 0\n0 -2\n5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20\n''') == '8.0000000000'\nassert solution('''5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20\n''') == '0.0200000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0.2 0\\n0 -0.2') == '8.0000000000'\nassert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n0 0.2\\n-0.2 0\\n0 0.0\\n-0.2 0') == '8.0000000000'\nassert solution('5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n') == '0.0200000000'"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 0\\n1 1\\n0 1\\n0 0\\n') == '8.0000000000'\nassert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\nassert solution('5\\n1 0\\n0 2\\n0 1\\n-1 0\\n0 0\\n') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"2.0000000000\"\nassert solution(\"10\") == \"17.499999999\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 0\n1 1\n0 2\n-2 0\n0 -2''') == '8.0000000000'\nassert solution('''5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20''') == '0.0200000000'"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20\n''') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 1\\n1 2\") == \"8.0000000000\"\nassert solution(\"5 0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n\") == \"0.0200000000\"\nprint(\"All test cases passed!\")\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 0\\n0 1\") == \"8.0000000000\"\nassert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\") == \"8.0000000000\"\nassert solution(\"5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\") == \"0.0200000000\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '8.0000000000'\nassert solution('5') == '0.0200000000'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2\") == \"2\"\nassert solution(\"4 3 3\") == \"2\"\nassert solution(\"9 2 3\") == \"2\"\nassert solution(\"11 2 2\") == \"3\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n9 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\nassert solution('''\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 10 4 3') == '2'\nassert solution('9 10 4 3') == '1'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''9 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\nassert solution('''10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\nassert solution('''10 3 3\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '2'"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 1 1\n1 1 1 1 1\n''') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 3') == '2'\nassert solution('10 2 2') == '2'\nassert solution('10 20 20') == '0'\nassert solution('10 50 50') == '1'\nassert solution('100 100 100') == '0'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n9 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\nassert solution('''\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('9 4 3\\n1 1 9 9 1 6 6 39 9\\n') == '2'\nassert solution('10 2 2\\n1 1 1 1 1 2 2 2 2 2 2\\n') == '2'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 3') == '3.666666667'\nassert solution('2 4 7') == '12.0'\nassert solution('1 1 1') == '1.0'\nassert solution('3 4 6') == '5.0'\nassert solution('3 8 1') == '3.0'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n\"\"\""
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 5') == '3.33333333'\nassert solution('8 10 4') == '4.0'\nassert solution('7 6 4') == '3.4'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\nassert solution('5 5 3') == '3.3333333333'\nassert solution('1 2 3 4 5') == '3.75'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''4 11 4\n10 10 10 10\n''') == '20.000000000'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000'\nprint('Tests passed')\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\n\"\"\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\nassert solution(\"6 3600\") == \"3\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 42\n5 123456789''') == '16317634'\nassert solution('''1 0\n0 1''') == '1'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2,42]) == \"2\"\nassert solution([5,123456789]) == \"16317634\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 42\n''') == '2'\nassert solution('''\n5 123456789\n''') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"10 4\") == \"1\"\nassert solution(\"10000000000\") == \"1\""
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 42''') == '2'\nassert solution('''5 123456789''') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 42''') == '2'\nassert solution('''5 123456789''') == '16317634'''\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\n\"\"\""
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4'\nprint('All test cases passed!')"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 1 1\") == \"1\"\nassert solution(\"3 1 0 0 2\") == \"2\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n''') == '0'\nassert solution('''\n3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6''') == '4'\nassert solution('''3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6''') == '4'\nassert solution('''3 3 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6''') == '0'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\""
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'\n\"\"\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'\nassert solution('3 1 1 1 8') == '4'\nassert solution('3 1 1 1 8') == '4'\nassert solution('3 1 1 1 8') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'\nassert solution('''10 5 1\n10 10\n20 20\n22 22\n23 23\n24 24\n20 20\n20 20\n22 22\n23 23\n24 24\n''') == '5'\nassert solution('''10 5 1\n10 10\n20 20\n22 22\n23 23\n24 24\n20 20\n20 20\n22 22\n23 23\n24 24\n''') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1 10 10\\n8 8\\n5 1\") == \"3\"\nassert solution(\"5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45\\n\") == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1''') == '3'\nassert solution('''5 1 10 10\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n3''') == '3'\n\n'''"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1 10 10') == '3'\nassert solution('5 1 100 100') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 100 100\") == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1 10 10') == '3'\nassert solution('5 1 100 100') == '3'\nassert solution('5 1 10 10') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ABC\") == \"2\"\nassert solution(\"ABBBAAAA\") == \"3\"\nassert solution(\"BBBCCCBB\") == \"3\"\nassert solution(\"CCCCAAAC\") == \"3\"\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 3"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 4\nassert solution('CCCCAAAC') == -1\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == 2\nassert solution(\"ABBBAAAA\") == 3\nassert solution(\"BBBCCCBB\") == 4\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3'\nassert solution(\"ABC\") == '2'\nassert solution(\"ABBBAAAA\") == '3'\nassert solution(\"BBBCCCBB\") == '3'\nassert solution(\"CCCCAAAC\") == '4'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n\nA\nB\nC\n''') == '2'\n\nassert solution('''\n\nA\nB\nA\n''') == '-1'\n\nassert solution('''\n\nA\nA\nA\n''') == '-1'\n\nassert solution('''\n\nA\nA\nB\nC\n''') == '2'\n\nassert solution('''\n\nA\nB\nC\nD\nE\n''') == '2'"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('ABC') == '2'\nassert solution('ABBBAAAA') == '3'\nassert solution('BBBCCCBB') == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 3"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    'ABC\\nABC\\nABC\\n') == '2'\nassert solution(\n    'ABBBAAAA\\nBBBCCCBB\\nCCCCAAAC\\n') == '3'\nassert solution(\n    'ABABABABA\\nBBBBBBBB\\nCCCCCCCC\\n') == '-1'\nassert solution(\n    'ABABABABA\\nBBBBBBBB\\nCCCCCCCC\\n') == '1'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 2\nassert solution('BBBCCCBB') == 3\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    A\n    B\n    AA\n    BBB\n    AAA\n    \"\"\"\n) == \"3\"\nassert solution(\n    \"\"\"\n    A\n    ABA\n    BBB\n    ABABA\n    AAAAAB\n    \"\"\"\n) == \"3\""
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\nA\nB\nAA\nBBB\nAAA\n''') == '3'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == '3'\nassert solution('''5\nA\nA\nA\nA\nA\n''') == '3'\nassert solution('''5\nA\nAA\nBBB\nAAA\n''') == '3'\nassert solution('''5\nA\nB\nAA\nBBB\nAAA\n''') == '2'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\nA\nB\nAA\nBBB\nAAA\n''') == \"3\"\nassert solution('''\n5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == \"3\"\nassert solution('''\n5\nA\nA\nAA\nBBB\nAAA\n''') == \"2\"\nassert solution('''\n5\nA\nA\nAA\nBBB\nAAA\n''') == \"2\"\nassert solution('''\n5\nA\nA\nAA\nBBBBB\nAAA\n''') == \"3\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\nA\nB\nAA\nBBB\nAAA''') == '3'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB''') == '3'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB''') == '4'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAA''') == '2'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\nassert solution('3') == '3'\nassert solution('7') == '4'\nassert solution('10') == '8'\nassert solution('100000000') == '2'"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\nA\nB\nAA\nBBB\nAAA\n\"\"\") == \"3\"\n\nassert solution(\"\"\"5\nA\nABA\nBBB\nABABA\nAAAAAB\n\"\"\") == \"3\""
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\nA\nB\nAA\nBBB\nAAA\n''') == \"3\"\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == \"3\"\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == \"3\"\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == \"3\"\nassert solution('''5\nA\nAAA\nBBB\nAAABA\nAAAAAB\n''') == \"3\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"3\"\nprint(solution(__import__(\"sys\").stdin.read()))\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nA\\nB\\nAA\\nBBB\\nAAA') == '3'\nassert solution('5\\nA\\nAB\\nAA\\nBBBB') == '3'\nassert solution('10\\nAAA\\nAAAAAAABB\\nAB\\n
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 10 2 2') == '0.1909090909'\nassert solution('100 10 2 2') == '0.1909090909'\nassert solution('100 10 2 1') == '0.1909090909'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0.1', \"Wrong answer\"\nassert solution('1000000000') == '0.1909090909', \"Wrong answer\"\nassert solution('100 10 2 1') == '0.1', \"Wrong answer\"\nassert solution('100 10 2 2') == '0.1909090909', \"Wrong answer\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 2 1') == '0.1'\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"0.1909090909\""
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n100 10 2 1\\n') == '0.1'\nassert solution('1\\n100 10 2 2\\n') == '0.1909090909'"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input 1:\n100 10 2 1\nSample Output 1:\n0.100000001\n\nSample Input 2:\n100 10 2 2\nSample Output 2:\n
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n10 10 2 1\n\"\"\") == \"0.1\"\nassert solution(\"\"\"\n100 10 2 2\n\"\"\") == \"0.1909090909\n\"\"\")\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(ABABABcABABAbAbab) == '4'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    'ABABABcABABAbAbab') == '4'\nassert solution(\n    'ABABABcABABAbAbab') == '5'\nassert solution(\n    'ABABABcABABAbAbab') == '0'\nassert solution(\n    'AABAABBBABABABbAB') == '5'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ABABABcABABAbAbab') == '5'\n\"\"\""
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\n\nimport sys\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r'''\nABABABcABABAbAbab\n2\n2 2\n3 4\n''') == '4'\nassert solution(r'''\nABABABcABABAbAbab\n2\n0 2\n0 7\n''') == '2'\nassert solution(r'''\nABABABcABABAbAbab\n4\n0 4\n1 1\n0 3\n''') == '4'\nassert solution(r'''\nABABABcABABAbAbab\n2\n1 6\n1 7\n''') == '5'\nassert solution(r'''\nABABABcABABAbAbab\n3\n0 5\n1 1\n0 3\n''') == '4'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(ABABABcABABAbAbab) == \"4\"\nassert solution(AABAABABcAABAbAbab) == \"5\"\nassert solution(\"\") == \"0\"\nassert solution(\"a\") == \"0\"\nassert solution(\"AABBAABcAABAbAbab\") == \"5\""
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ABABABcABABAbAbab') == '5'\nassert solution('ABABABcABABAbAbab') == '4'\nassert solution('ABABABcABABAbAbab') == '4'\nassert solution
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ABABABcABABAbAbab') == '4'\nassert solution('ABABABcABABAbAbab') == '0'\nassert solution('ABABABcABABAbAbab') == '5'\nassert solution('ABABABcABABAbAbab') == '0'\nassert solution('ABABABcABABAbAbab') == '5'"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAbab\") == \"2\"\nassert solution(\"ABABABcABABAbAbab\") == \"5\""
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n0 0 1\\n\") == \"2\"\n\nassert solution(\"4 3\\n0 0 1\\n\") == \"2\"\n\nassert solution(\"4 3\\n0 0 1\\n\") == \"2\"\n\nassert solution(\"7 3\\n0 0 1 2 3 4 5 6\\n\") == \"7\"\n\nassert solution(\"8 3\\n0 0 1 2 3 4 5 6\\n\") == \"8\""
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '2'\nassert solution('6 5') == '2'\nassert solution('4 4') == '3'\n'''"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == '2'\nassert solution('5 5') == '4'\nassert solution('5 0') == '1'\nassert solution('5 1') == '2'\n\"\"\"\n\nN, D = map(int, input().split())\n\nn = 0\n\nfor i in range(1,N+1):\n    n += 1\n    if i%2!= 0:\n        n += 1\n    if i < N:\n        n += abs(int(input())-i)\nprint(n)"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '2'\nassert solution('5 3') == '3'\nassert solution('8 4') == '5'\nassert solution('12 4') == '7'\nassert solution('10 4') == '4'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0\n1\n2\n''') == '2'\nassert solution('''\n2\n1\n2\n''') == '3'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"2\""
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '2'\nassert solution('5 6 3 2') == '3'\nassert solution('4 8 3 2') == '3'\nassert solution('10 20 5 6') == '5'"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '2'\nassert solution('5 4') == '4'\nassert solution('4 4') == '4'\nassert solution('8 5') == '5'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"2\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '2'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 8 8 8') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '2'\nassert solution('1') == '0'\n\n\"\"\""
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"10 3 1 2 1\") == \"1\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '2'"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\nassert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\") == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 4 2 1\n9 -5 6\n5 1 2\n1 4 5\n-4 7 8\n-2 3 4\n''') == '0'\n\nassert solution('''\n1 2 3\n4\n-1\n''') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\nassert solution('''\n1 2\n1 2\n''') == '1'\nassert solution('''\n2 2\n2 2\n''') == '0'\nassert solution('''\n0 1\n0 1\n''') == '1'\n'''\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\n\n'''\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n5 1 5 2 5 -2\n2 3 8 -1 5 7\n10 -4 3 7 8 9\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1\n5 2 -4 4 -3 4 6\n3 4 -4 5 3 5 7\n10 -2 4 8 -3 7 -1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1\n4 2 6 5 5 6\n0 0 0 0 0 0\n5 5 6 6 5 5\n0 4 6 5 6 6\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n10 3 -10 9 2\n0 1 1 1 1 1\n0 0 0 0 0 0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1\n6 0 0 0 0 0\n\"\"\") == \"0\""
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\\n1\\n3\\n\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 7\\n\"\n    \"1 2 1\\n\"\n    \"1 2 3\\n\"\n    \"1 3 2\\n\"\n    \"1 4 1\\n\"\n    \"2 3 4\\n\"\n    \"2 4 4\\n\"\n    \"3 4 4\\n\"\n    \"3\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n) == \"1\\n2\\n3\\n4\""
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '3'\n\nassert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '2'\n\nassert solution('''\n3 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '3'\n\nassert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '3'\n\nassert solution('''\n3 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '1'"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2\\n1 3') == '1'\nassert solution('1 2\\n1 3') == '2'"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\") == \"1\"\nassert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\") == \"2\"\nassert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\") == \"3\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1\\n2\\n3\\n', \"Wrong answer\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 7\") == \"1\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"7 5\") == \"3\"\nassert solution(\"2 4\") == \"4\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\\n2\\n3\\n\"\nprint(solution())"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n') == '1'\nassert solution('4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n') == '2'\nassert solution('8 2\\n1 3 1\\n4 5 4\\n7 8 3\\n2 4 1\\n6 8 5\\n9 7 2\\n5 9 1\\n6 3 2\\n') == '7'\nassert solution('4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n') == '4'\nassert solution('4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n') == '3'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\") == \"1\"\nassert solution(\"10 1\\n1 3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 10\\n\") == \"8\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 3 4 5\n6''') == '3 2 1 5 4 6'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6\n1 5 4 3 2 6\n1 2 5 4 3 6\n''') == '2'\n\nassert solution('''5\n1 5 4 3 2\n1 2 5 4 3\n''') == '1'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2 5 4 3\n1 2 5 4 3\n''') == '2'\n\nassert solution('''\n2\n1 2\n1 2\n''') == '1'\n\n'''\nAnother way to solve this question is to just use the number of distinct integers from the given lists, and then use them as the numbers of proclamations.\n'''\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"6\\n\"\n    \"1 5 4 3 2 6\\n\"\n    \"1 2 5 4 3 6\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 6 2 4 5') == '1 4 2 3 6 5'\nassert solution('5 7 2 6 4 1 3') == '1 3 2 4 5 7'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 2 3 4 5 6') == '1 2 3 4 5 6'\nassert solution('6') == '6'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 3 2 5 4\n5 2 1 3 4\n3 2 1 5 4\n1 2 3 5 4\n''') == '1 2 3 5 4'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 5 4 3 2\n1 2 5 4 3 6''') == '2'\n\n'''\n\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\ns = list(map(int, sys.stdin.readline().strip().split()))\nr = list(map(int, sys.stdin.readline().strip().split()))\n\ns_dict = {s[i]: i for i in range(n)}\nr_dict = {r[i]: i for i in range(n)}\n\nfor i in range(n):\n    if s_dict[r[i]] < s_dict[r[i-1]]:\n        print(i + 1)\n        break\n\nfor i in range(n-1):\n    if r_dict[s[i]] > r_dict[s[i+1]]:\n        print(i + 1)\n        break"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 2 5 4 3 6', \"Expected `1 2 5 4 3 6`\"\nassert solution() == '1 2 5 4 3 6', \"Expected `1 2 5 4 3 6`\"\nassert solution() == '1 2 5 4 3 6', \"Expected `1 2 5 4 3 6`\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '60'\n\nassert solution('''\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '-1'\n\nassert solution('''\n3 1 1 2\n1 1 1 1\n1 1 1 1\n''') == '1'\n\nassert solution('''\n3 1 1 2\n1 1 2 2\n1 1 2 2\n''') == '-1'\n\nassert solution('''\n3 3 1 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '60'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([\n    \"2 1 2\",\n    \"3 2 3\",\n    \"3 3 3\"\n]) == \"3\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '60'\n\nassert solution('''\n3 3 1\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4 2') == '60'\nassert solution('5 4 5') == '-1'\n\"\"\"\nimport sys\n\nclass Solution:\n    def solve(self, n, m, k):\n        # n = num of items\n        # m = num of shops\n        # k = num of required items\n        # I am an honest person I am a very clever person and I know if I get a negative solution\n        # Try all possible combinations of items, and calculate minimum cost to buy all items\n\n        # Do the optimization\n        # if the store can buy the item\n        #   + calculate the cost to buy the item\n        # if not, skip it\n        #     + calculate the cost to buy the knockoff item\n        #     + if the knockoff can be bought\n        #         + calculate the cost to buy the item\n        #     else, do nothing\n        #     + if not, skip it\n        #     + calculate the cost to buy the knockoff item\n        #     + if the knockoff can be bought\n        #         + calculate the cost to buy the item\n        #     else, do nothing\n        #     + if not, skip it\n        #     + calculate the cost to buy the item\n        # else, skip it\n        #     + calculate the cost to buy the knockoff item\n        #     + if the knockoff can be bought\n        #         + calculate the cost to buy the item\n        #     else, do nothing\n        #     + if not, skip it\n        #     + calculate the cost to buy the knockoff item\n        #     + if the knockoff can be bought\n        #         + calculate the cost to buy the item\n        #     else, do nothing\n        #     + if not, skip it\n        #     + calculate the cost to buy the item\n\n        # minimum cost\n        # the knwonoff can be bought\n        # calculate the cost to buy the item\n        # if not, skip it\n        # if not, calculate the cost to buy the knockoff item\n        # if not, calculate the cost to buy the item\n        # minimum cost\n        # calculate the cost to buy the item\n\n        if k == 0 or k > m:\n            return -1\n\n        # knwonoff can be bought\n        # calculate the cost to buy the item\n        dp = [[sys.maxsize for _ in range(m)] for _ in range(n+1)]\n        dp[0][0] = 0\n        # if not, skip it\n        for item_idx in range(1, n):\n            for shop_idx in range(m):\n                if shop_idx == 0:\n                    dp[item_idx][shop_idx] = dp[item_idx-1][shop_idx] + 30\n                elif shop_idx == 1:\n                    dp[item_idx][shop_idx] = dp[item_idx-1][shop_idx] + 50\n                else:\n                    dp[item_idx][shop_idx] = min(\n                        dp[item_idx-1][shop_idx-1] + 10,\n                        dp[item_idx-1][shop_idx] + 20,\n                        dp[item_idx-1][shop_idx-1] + 20)\n        # calculate the cost to buy the item\n        for item_idx in range(n):\n            for shop_idx in range(m):\n                if shop_idx == 0:\n                    dp[item_idx][shop_idx] = dp[item_idx][shop_idx] + 30\n                elif shop_idx == 1:\n                    dp[item_idx][shop_idx] = dp[item_idx][shop_idx] + 50\n                else:\n                    dp[item_idx][shop_idx] = min(\n                        dp[item_idx][shop_idx-1] + 10,\n                        dp[item_idx][shop_idx] + 20,\n                        dp[item_idx][shop_idx-1] + 20)\n\n        # knwonoff can be bought\n        # calculate the cost to buy the item\n        for item_idx in range(n):\n            for shop_idx in range(m):\n                if shop_idx == 0:\n                    dp[item_idx][shop_idx] = dp[item_idx][shop_idx] + 30\n                elif shop_idx == 1:\n                    dp[item_idx][shop_idx] = dp[item_idx][shop_idx] + 50\n                else:\n                    dp[item_idx][shop_idx] = min(\n                        dp[item_idx][shop_idx-1] + 10,\n                        dp[item_idx][shop_idx] + 20,\n                        dp[item_idx][shop_idx-1]"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 2') == '60'\nassert solution('5 5 3') == '-1'\nassert solution('6 6 5') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '60'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 2') == '60'\nassert solution('1 1 1') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 2\") == \"1\"\nassert solution(\"3 3 2\") == \"3\"\nassert solution(\"3 3 1\") == \"2\"\nassert solution(\"1 4 3\") == \"4\"\nassert solution(\"3 4 1\") == \"3\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3 3 2\\n'\n    '1 30 2 50\\n'\n    '2 70 3 10\\n'\n    '3 20 1 80') == '60'\n\nassert solution(\n    '2 2 3\\n'\n    '3 1 1 1') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_data) == \"60\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n''') == 'Case #1: 1\nassert solution('''\n2\n5\n0 0 0\n0 1 0\n0 0 5\n''') == 'Case #2: 2\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"Case #1: 1\\nCase #2: 2\""
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1\n0 0\n1 1\n3\n5 0 0\n0 1000 0\n0 0 2000\n3\n''') == 'Case #1: 1\\nCase #2: 2\\n'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1\\nCase #2: 2\\n'''\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n10000 0 0\n0 10000 0\n0 0 10000\n''') == 'Case #1: 1'\nassert solution('''\n1\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3\n    10000 0 0\n    0 10000 0\n    0 0 10000\n''') == 'Case #1: 1\\nCase #2: 2\\n'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n''') == 'Case #1: 1\nassert solution('''\n2\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #2: 2"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10000 0 0\\n0 10000 0\\n0 0 10000\") == \"Case #1: 1\\nCase #2: 2\"\nassert solution(\"2\\n5000 0 0\\n0 2000 0\\n0 0 4000\") == \"Case #1: 1\\nCase #2: 2\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '6 6 6 1\\n'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '12 12 12 3\\n'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '12 12 12 1\\n'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"6 6 6 1\"\nassert solution(\"\"\"+1 3 H 5\n+1 3 C 1\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"1 3 6 1\"\nassert solution(\"\"\"+1 2 C 3\n+1 2 C 1\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"2 2 6 2\"\nassert solution(\"\"\"+1 2 C 3\n+1 2 C 1\n+1 3 H 5\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"1 2 6 2\"\nassert solution(\"\"\"+1 2 H 3\n+1 2 C 1\n+1 3 H 5\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"2 1 6 2\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"-1 1 O 2\\n+1 2 C 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"-1 1 O 2\\n+1 2 C 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '2 3 9 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '1 2 6 1'\n'''"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\\\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\\\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n'''\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"+1 2 H 2 O 1\") == \"6 6 6 1\"\nassert solution(\"-1 1 O 2\") == \"5 6 9 1\"\nassert solution(\"+1 2 C 1 O 2\") == \"4 2 4 1\"\nassert solution(\"-1 3 C 6 H 12 O 6\") == \"2 3 2 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 1 2 H 2 O 1\n-1 1 2 C 1 O 2\n-1 3 2 C 6 H 12 O 6\n0 0\n''') == '5 5 5 2'\nassert solution('''\n+1 6 H 3 O 1\n-1 6 O 3 C 5 H 12 O 6\n-1 3 H 12 O 6\n-1 6 C 5 O 1\n0 0\n''') == '1 2 2 3 3 2'\nassert solution('''\n+1 6 H 3 O 1\n-1 6 O 3 C 5 H 12 O 6\n-1 3 H 12 O 6\n-1 6 C 5 O 1\n0 0\n''') == '1 2 3 1 1 2 1'\nassert solution('''\n+1 6 H 3 O 1\n-1 6 O 3 C 5 H 12 O 6\n-1 3 H 12 O 6\n-1 6 C 5 O 1\n0 0\n''') == '1 2 3 1 1 2 1'\n''')\n\n-----------------------------------------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n10 10\n0 0\n10 10\n3 10\n''') == '8.75'\nassert solution('''\n4\n20 20\n0 0\n20 0\n10 10\n0 0\n10 10\n20 20\n''') == '20.5'\nassert solution('''\n10\n10 10\n20 10\n20 0\n0 20\n0 0\n0 0\n10 10\n''') == '24.0'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '20.83'\nassert solution('10') == '20.83'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n30 50\n20 0\n100 0\n100 40\n20 40''') == '20.83'\n\nassert solution('''3\n20 0\n20 0\n20 0''') == '18.66'\n\nassert solution('''2\n20 0\n20 0''') == '20.0'\n\nassert solution('''1\n0 0''') == '0.0'\n\nassert solution('''4\n100 0\n0 100\n20 0\n100 0\n20 0''') == '20.0'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\nassert solution('4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '21.48'\n\n\"\"\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"20.83\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n30 50\n20 0\n100 0\n100 40\n20 40\n''') == '20.83'\n\nassert solution('''\n2\n1 1\n2 1\n''') == '1.5'\n\nassert solution('''\n3\n10 10\n15 -5\n-25 0\n''') == '20.0'\n\nassert solution('''\n6\n-50 50 50 50 50 50\n-25 0 0 0 0 0\n25 50 50 50 50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n25 0 0 0 0 0\n-50 -50 -50 -50 -50 -50\n''') == '50.0'\n\nassert solution('''\n5\n5 10\n0 0\n15 0\n-5 0\n-15 0\n''') == '20.0'"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n30 50\n20 0\n100 0\n100 40\n20 40\n''') == '20.83'\nassert solution('''\n4\n-30 -50\n-20 0\n100 0\n100 40\n20 40\n''') == '-20.83'\n\n'''\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n30 50\n20 0\n100 0\n100 40\n20 40''') == '20.83'\nassert solution('''5\n30 0\n20 0\n100 0\n100 0\n20 0''') == '21.42'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n2\n0 0\n3 3\n''') == \"6.75\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4\\n\"\n    \"30 50\\n\"\n    \"20 0\\n\"\n    \"100 0\\n\"\n    \"100 40\\n\"\n    \"20 40\\n\"\n) == \"20.83\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4') == '5'\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4') == '6'\nassert solution('1 2 3 4') == '6'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 3\n3 4 5\n6 7 8\n''') == '49'\nassert solution('''\n1 2 3\n4 5 6\n7 8 9\n''') == '49'\nassert solution('''\n10 10\n10 1 5 1\n6 7 8 2\n9 9 5 4\n10 8 5 3\n7 6 9 8\n7 1 2 3\n''') == '53'\nassert solution('''\n10 10\n10 9 8 7\n4 1 2 3\n6 5 9 5\n10 8 5 3\n7 6 9 8\n7 1 2 3\n''') == '30'\nassert solution('''\n10 10\n7 8 5 4\n10 8 5 3\n7 6 9 8\n7 1 2 3\n''') == '17'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3 4\\n5 6') == '49'"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '49'\nassert solution('5 5') == '0'\nassert solution('7 3') == '33'\n\n-----Explanation-----\nIn the first test case, there are no subgrids.\n\nIn the second test case, there are no $1{\\times }1$ subgrids.\n\nIn the third test case, there are $1{\\times }1$ subgrids.\n\nIn this case, the subgrids are:\n\n* 1x1 = $1$\n* 2x1 = $2$\n* 3x1 = $3$\n* 1x2 = $5$\n* 2x2 = $6$\n* 3x2 = $4$\n\nIn the fourth test case, there are $2{\\times }1$ subgrids.\n\nIn this case, the subgrids are:\n\n* 1x1 = $1$\n* 2x1 = $2$\n* 3x1 = $3$\n* 1x2 = $5$\n* 2x2 = $6$\n* 3x2 = $4$\n\n-----Hint-----\nYou need to use the base case ($2^0$) and recurrence relation (see problem description).\n\n\"\"\""
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 5\n7 6 4\n9 8 3\n''') == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 5\\n7 6 4\\n9 8 3') == '49'\nassert solution('4 4\\n1 2 3 4\\n5 1 2 3 4') == '49'\nassert solution('1 1\\n1 1') == '0'\nassert solution('1 3\\n2 4\\n3 3') == '3'\nassert solution('1 1\\n1 2\\n1 3') == '1'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '3'\nassert solution('4 2 3 1') == '4'\nassert solution('4 2 3 1 2') == '4'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 5\n7 6 4\n9 8 3\n''') == '49'\n\"\"\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '49'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3') == '49'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 15') == '##CROSSWORD####'\nassert solution('3 5') == '#####CROSSWORD##'\nassert solution('3 1') == '#####CROSSWORD##'\n\"\"\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 15\n##.........####\n1\nCROSSWORD''') == '##CROSSWORD####'\nassert solution('''1 15\n##.........####\n1\nCROSSWORD\n2\nCROSSWORD\n3\nCROSSWORD''') == '##CROSSWORD####CROSSWORDCROSSWORD####'\nassert solution('''1 15\n##CROSSWORD##\n1\nCROSSWORD\n2\nCROSSWORD\n3\nCROSSWORD''') == '##CROSSWORD##CROSSWORDCROSSWORDCROSSWORD'\nassert solution('''1 25\n###..##..#.####\n1\nCROSSWORD\n2\nCROSSWORD\n3\nCROSSWORD\n4\nCROSSWORD\n5\nCROSSWORD''') == '###..##..#.####CROSSWORDCROSSWORDCROSSWORDCROSSWORDCROSSWORDCROSSWORD'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5\\n' * 4) == '1' * 5\nassert solution('1 1\\n1\\n1\\n1\\n1\\n' * 4) == '1' * 5\nassert solution('10\\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n' * 4) == '1' * 5\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n' * 4) == '1' * 5\n\n'''"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'CROSSWORD'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 15\n##.........####\n1\nCROSSWORD''') == '##CROSSWORD####'\nassert solution('''\n1 10\n    ##.........####\n1\nCROSSWORD''') == '##CROSSWORD####'\n'''\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 4\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 10\\n#.#.#.#\\n###.#.\\n##.#.##\\n######.\\n######.\\n##.###.\\n#.#####\\n#.#.#.#\\n#.###.#\") == \"######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n#.#####\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n#.###.#\\n#.#.#.#\\n#.#.#.#\"\n\nprint(solution())"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 15\\n\"\n                \"##.........####\\n\"\n                \"1\\n\"\n                \"CROSSWORD\\n\") == \"##CROSSWORD####\"\n\nassert solution(\"1 1\\n\"\n                \"##\\n\"\n                \"1\\n\"\n                \"CROSSWORD\\n\") == \"##CROSSWORD####\"\n\nassert solution(\"1 15\\n\"\n                \"##.........####\\n\"\n                \"1\\n\"\n                \"CROSSWORD\\n\") == \"##CROSSWORD####\"\n\nassert solution(\"1 15\\n\"\n                \"##.........####\\n\"\n                \"1\\n\"\n                \"CROSSWORD\\n\") == \"##CROSSWORD####\"\n\nassert solution(\"1 1\\n\"\n                \"##\\n\"\n                \"1\\n\"\n                \"CROSSWORD\\n\") == \"##CROSSWORD####\""
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"\"\"##CROSSWORD####\n1\nCROSSWORD\n\"\"\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('\\n'.join(\n    [\n        '1 15',\n        '#.#...#.#',\n        '#.#.#..#',\n        '..#.#.#.',\n        '.#....#.',\n        '#..#....',\n        '#######.'\n    ])) == '#.#####.##.'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1\\n2 7 6\\n9 5 1\\n4 3 8') == '31'\nassert solution('5 1\\n6 1 8\\n6 2 7\\n7 2 6\\n5 3 5\\n7 4 9\\n5 8 1\\n6 2 6\\n2 7 6\\n2 5 3\\n6 3 5\\n2 5 8\\n3 2 3') == '37'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1\\n2 7 6\\n9 5 1\\n4 3 8') == '31'"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3') == '31'\nassert solution('1\\n4\\n7') == '17'\nassert solution('3\\n5\\n1') == '15'\nassert solution('3\\n5\\n3') == '9'\nassert solution('3\\n5\\n5') == '10'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 1\\n\"\n    \"2 7 6\\n\"\n    \"9 5 1\\n\"\n    \"4 3 8\\n\"\n) == \"31\"\nassert solution(\n    \"8 5\\n\"\n    \"4 7 2 1\\n\"\n    \"8 3 6 4 5\\n\"\n    \"2 9 4 5 8\\n\"\n    \"6 7 3 9 1\\n\"\n    \"7 2 3 4 2 5\\n\"\n    \"6 1 5 1 6\\n\"\n    \"4 8 5 3 6\\n\"\n    \"3 8 6 5 4\\n\"\n) == \"16\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2') == \"3\"\nassert solution('6 3') == \"5\"\nassert solution('1 10') == \"15\"\nassert solution('6 4') == \"1\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 2') == '7'\nassert solution('2 2') == '6'\nassert solution('3 2') == '4'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\nassert solution('''\n10 2\n1 7 6\n2 9 5\n3 4 8\n''') == '29'\nassert solution('''\n50 1\n-2 6 9\n8 3 -1\n3 7 5\n''') == '29'\nassert solution('''\n50 2\n5 2 1\n4 2 4\n3 3 2\n''') == '11'"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1\\n2 7 6\\n9 5 1\\n4 3 8\\n') == '31'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n2 2\n3 3\n''') == '4'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '31'\nassert solution('3 1 2 4 5 3 6 7') == '31'\nassert solution('1 2') == '3'\nassert solution('2 2') == '4'\nassert solution('1 2 3 4 5') == '6'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 1]) == '2'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '3 1\\nBWW') == '2'\nassert solution(\n    '3 1\\nBWB') == '1'\nassert solution(\n    '6 2\\nBWBWBWBWBWB') == '3'\nassert solution(\n    '6 1\\nBWBW') == '4'\nassert solution(\n    '6 3\\nBBWWBWBW') == '6'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 1], \"BBW\") == \"2\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2'\nassert solution('5 1') == '4'"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"5 2\") == \"4\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2'\nassert solution('7 1') == '6'\nassert solution('11 3') == '6'\n\"\"\""
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"2\"\n\n'''\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1\\nBBW\\n') == '2'\nassert solution('3 1\\nBBW\\n') == '2'\nassert solution('3 1\\nBBW\\n') == '2'\nassert solution('3 2\\nBBWW\\n') == '1'\nassert solution('3 2\\nBBWW\\n') == '1'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\nBBW\n1\nB''') == '2', f'First Test Case Failed: {solution('''\n1\nBBW\n1\nB''') == \"2\"}\nassert solution('''\n2\nBW\n2\nW''') == '3', f'First Test Case Failed: {solution('''\n2\nBW\n2\nW''') == \"3\"}\nassert solution('''\n3\nBWB\n3\nBWW\n3\nBWBW\n3\nBWBW\n3\nBBWW\n3\nBBWWB\n3\nBBWBB\n3\nBWBWB\n3\nBWBWB\n3\nBWBWB\n3\nBBWWBW\n3\nBBWWBW\n3\nBBWBBW\n3\nBBWBBWB\n3\nBBWBWBW\n3\nBBWBWBW\n3\nBBWBBWBW\n3\nBBWBBWBWB\n''') == '5', f'Second Test Case Failed: {solution('''\n3\nBWB\n3\nBWB\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 1]) == \"2\"\n\n2\n1\n1\n1\n2\n1\n4\n1\n5\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1\n3 2 1\n1 2 3''') == '0.556'\nprint('Solution:', solution('''3 1\n3 2 1\n1 2 3'''))\nassert solution('''6 4\n4 1 3 2 3\n2 3 3 1''') == '2.889'\nprint('Solution:', solution('''6 4\n4 1 3 2 3\n2 3 3 1'''))\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0.556\"\nprint(solution())\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1\\n3 2 1\\n1 2 3') == \"0.556\"\nassert solution('10 10\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == \"0.125\"\nassert solution('100 100\\n3 2 1\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '0.556'\nassert solution('3 1') == '0.556'\nassert solution('3 2 1') == '0.556'\nassert solution('1 2 3') == '0.556'\nassert solution('1 2 3') == '0.556'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 1\n3 2 1\n1 2 3\n''') == '0.556'\nassert solution('''\n1\n10\n20\n100\n200\n100\n200\n100\n200\n100\n''') == '0.813'\nprint(solution('''\n1\n3\n'''))\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1\n3 2 1\n1 2 3\n\"\"\") == \"0.556\"\nassert solution(\"\"\"\n3 3\n1 2 1\n1 2 3\n\"\"\") == \"3.000\"\nassert solution(\"\"\"\n6 1\n3 2 1\n1 2 3\n1 3 2\n2 1 1\n1 1 1\n\"\"\") == \"3.000\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1\\n3 2 1') == '0.556'\nassert solution('4 1\\n1 2 1 2\\n2 1 3\\n3 1 4') == '1.000'\nassert solution('2 2\\n2 3 2\\n3 4 2') == '0.000'\nassert solution('2 2\\n2 3 2\\n3 4 2') == '0.000'\nassert solution('10 1\\n5 2 1\\n2 4 1\\n8 7 1\\n3 4 1\\n4 2 1\\n9 4 1\\n1 1 1\\n3 8 1\\n1 5 1\\n2 1 1\\n2 6 1\\n4 4 1\\n6 3 1\\n7 4 1\\n4 1 1\\n2 1 1') == '0.000'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '0.556'\nassert solution('1 2 3') == '0.555'"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2 1\\n1 2 3') == '0.556'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n3 2 1\n1 2 3\n\"\"\") == \"0.556\"\n\nassert solution(\"\"\"\n2\n1 1\n1 1\n\"\"\") == \"0.5\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 4 3 2\n3 3 2 4''') == '3'\nassert solution('''5 4 3 2\n3 2 4 2''') == '2'\nassert solution('''5 4 3 2\n3 1 2 3''') == '1'\nprint(\"All test cases passed.\")"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 3 5') == '3'\nassert solution('4 1 1 2') == '4'\nassert solution('5 5 6 6') == '5'"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4 3 2') == '3'\nassert solution('100 200 100 100') == '30'\nassert solution('4 3 3 2') == '2'\n\"\"\""
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 4 3 2\\n\") == \"3\"\nassert solution(\n    \"4 5 3 2\\n\") == \"3\"\nassert solution(\n    \"10 10 10 10\\n\") == \"4\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 4 3 2\") == \"3\"\nassert solution(\"2 4 3 2\") == \"4\"\nassert solution(\"3 4 3 2\") == \"5\"\nassert solution(\"4 4 3 2\") == \"4\"\nassert solution(\"5 4 3 2\") == \"5\"\n\n----\n'''\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n5 4 3 2') == '3'\nassert solution('4\\n5 4 3 2') == '2'\nassert solution('4\\n5 4 3 2') == '3'\nassert solution('4\\n5 4 3 2') == '2'\nassert solution('4\\n5 4 3 2') == '1'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4 3 2') == '3'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 4 3 2\n0 0 1\n''') == '3'\nassert solution('''\n5 4 3 2\n0 1 0\n''') == '4'\nassert solution('''\n5 4 3 2\n0 0 0\n''') == '5'\nassert solution('''\n5 4 3 2\n0 0 2\n''') == '6'\nassert solution('''\n5 4 3 2\n1 1 1\n''') == '5'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 2 5') == '5'\nassert solution('5 3 3 5') == '5'\nassert solution('5 4 3 2') == '3'\n\n'''"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 4 3 2\n1 2\n1 3\n1 4\n1 5\n''') == \"2\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"13\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 3 6\n2 5 8\n3 3 5\n5 3 6''') == '13'\n\n'''\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 3 6\n2 5 8\n3 3 5\n5 3 6''') == '13'\nassert solution('''6\n0 0 0\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6''') == '18'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == \"13\"\nprint(solution(input))\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 3 6\") == \"13\"\nassert solution(\"2 5 8\") == \"13\"\nassert solution(\"3 3 5\") == \"13\"\nassert solution(\"5 3 6\") == \"13\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == '13'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\n1 3 7\n2 5 6\n3 2 5\n4 5 8\n5 7 1\n6 2 1\n7 2 7\n8 4 3\n9 4 1\n10 3 6\n''') == '13'\nassert solution('''\n10\n1 3 2\n2 4 3\n3 2 2\n4 5 1\n5 2 5\n6 5 2\n7 1 4\n8 5 3\n9 2 7\n10 3 3\n''') == '33'\n'''\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4.00000 5.00000') == '3.00000'\nassert solution('5.00000 1.00000') == '3.00000'\nassert solution('2.00000 1.00000') == '1.00000'\nassert solution('1.00000 1.00000') == '0.00000'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10.000000 20.123456\\n1') == '3.141593'\nassert solution('10.000000 20.123456\\n2') == '0.000000'\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\nclass Graph:\n    def __init__(self, vertex):\n        self.vertex = vertex\n        self.graph = []\n        self.graph_matrix = []\n        self.dist = []\n        self.visited = []\n        self.parent = []\n\n    def addEdge(self, u, v, w):\n        self.graph.append([u, v, w])\n\n    def addWeight(self, u, v, w):\n        self.graph_matrix.append([u, v, w])\n\n    def print_solution(self, dist):\n        print(\"Vertex \\tDistance from Source\")\n        for node in range(self.vertex):\n            print(node, \"\\t\", dist[node])\n\n    def dijkstra(self, src):\n        self.dist = [math.inf] * self.vertex\n        self.dist[src] = 0\n        self.parent = [-1] * self.vertex\n\n        for node in range(self.vertex):\n            min = math.inf\n            u = -1\n\n            for v in range(self.vertex):\n                if self.dist[v] < min and self.graph[v][0]!= node:\n                    min = self.dist[v]\n                    u = v\n\n            if self.dist[u]!= math.inf:\n                self.visited.append(u)\n\n            self.dist[u] = min + self.graph[u][2]\n\n            self.parent[u] = self.graph[u][1]\n\n        self.print_solution(self.dist)\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1.000000 2.000000\n3.000000 2.000000\n4.000000 1.000000\n''') == '3.141593'\nassert solution('''1.000000 2.000000\n3.000000 2.000000\n4.000000 1.000000\n5.000000 1.000000\n6.000000 2.000000\n7.000000 1.000000\n8.000000 2.000000\n9.000000 1.000000\n10.000000 2.000000\n''') == '2.000000'\nassert solution('''1.000000 2.000000\n3.000000 2.000000\n4.000000 1.000000\n''') == '0.000000'\nassert solution('''1.000000 2.000000\n3.000000 2.000000\n4.000000 1.000000\n5.000000 1.000000\n6.000000 2.000000\n7.000000 1.000000\n8.000000 2.000000\n9.000000 1.000000\n10.000000 2.000000\n11.000000 1.000000\n12.000000 2.000000\n13.000000 1.000000\n14.000000 2.000000\n15.000000 1.000000\n16.000000 2.000000\n17.000000 1.000000\n18.000000 2.000000\n19.000000 1.000000\n20.000000 2.000000\n''') == '2.000000'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == \"3.141593\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"3.141593\"\nprint(solution(input()))\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1.000000 20.123456') == '3.141593'\nassert solution('10.000000 20.123456') == '3.141593'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456\\n') == '3.141593'\nprint(solution(input()))\n'''\n\n\nimport math\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        roost = list(map(float,stdin.split()))\n        min_dist = math.inf\n        for i in range(1,len(roost)):\n            temp = abs(roost[0]-roost[i])\n            if temp < min_dist:\n                min_dist = temp\n        return str(min_dist)"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '10.000000 20.123456\\n'\n    '1\\n'\n    '13.141593 20.123456\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    "
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2.1111036'\nassert solution('20 20') == '7.3333333'\nassert solution('10.000000 20.123456') == '4.6916667'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2.13333333333333'\nassert solution('5') == 'impossible'\n\n'''\nfrom decimal import *\nimport re\n\nDecimal('0.1') + Decimal('0.1')\nDecimal(10) / Decimal(2)"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('2') == '2.13333333333333'\nassert solution('5') == '3.13333333333333'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2.13333333333333'\nassert solution('6') == '2.068055555555556'\nassert solution('30') == '0.0'\nassert solution('10000') == 'impossible'"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n4 4\n2\n''') == \"2.13333333333333\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"1 1\") == \"1.0\"\nassert solution(\"1 2\") == \"2.0\"\nassert solution(\"1 2 3\") == \"2.0\"\nassert solution(\"1 2 3 4\") == \"3.0\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"impossible\"\nassert solution(\"1\") == \"1.0\"\n\"\"\"\nimport math\n\nn = int(input())\ndists = []\nfor i in range(n - 1):\n    dists.append(int(input()))\n\ncnt = 0\navg = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        # print(dists[i], dists[j])\n        if i < j:\n            avg += math.ceil((dists[i] + dists[j]) / 2)\n        cnt += 1\n\navg = avg / cnt\n\nprint(avg)\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n4 4\n2\n\"\"\") == \"2.13333333333333\"\nassert solution(\"\"\"\n4\n1\n1\n3\n2\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n4\\n2\\n\") == \"2.13333333333333\"\nassert solution(\"3\\n2\\n3\\n\") == \"impossible\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2\n5\n3\n3\n5\n3\n10\n3\n2\n5\n3\n10\n''') == '2.13333333333333'\n\nassert solution('''\n4\n4\n8\n7\n4\n4\n3\n10\n2\n8\n7\n3\n10\n''') == 'impossible'\n\nassert solution('''\n4\n4\n2\n1\n4\n2\n1\n10\n4\n3\n10\n''') == '4.25'\n\nassert solution('''\n4\n4\n4\n2\n2\n2\n1\n2\n10\n3\n3\n4\n3\n3\n10\n''') == 'impossible'\n\nassert solution('''\n4\n4\n4\n2\n4\n4\n1\n2\n10\n3\n3\n4\n3\n3\n10\n''') == 'impossible'"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('7') == '18'"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '36'\nassert solution('4') == '0'\nassert solution('8') == '6'\nassert solution('100') == '1870'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\\n\") == \"1\\n\"\nassert solution(\"10\\n\") == \"32\\n\"\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == '12'\nassert solution('1000000') == '122000000'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7') == '18'"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '18'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '0'\nassert solution('5') == '6'\nassert solution('50') == '32'\nassert solution('250') == '30'\nassert solution('999') == '63'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '35'\nassert solution('100') == '2470'\nassert solution('1000') == '26796'\nassert solution('10000') == '27124'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer''') == '3'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '4'\n\nassert solution('''\n35 M classicism programming\n0 F baroque skiing\n43 F baroque chess\n30 M baroque soccer\n''') == '3'\n\nassert solution('''\n19 M autumn to spring\n1 F autumn\n3 M autumn\n19 M spring\n5 F spring\n3 M autumn\n6 M spring\n''') == '5'\n\nassert solution('''\n12 M autumn to spring\n1 M autumn\n2 F autumn\n1 M spring\n2 F spring\n3 M autumn\n5 M spring\n3 F spring\n''') == '7'\n\nassert solution('''\n31 M autumn to spring\n1 M autumn\n0 M autumn\n2 F autumn\n1 F autumn\n0 F autumn\n3 M autumn\n3 F autumn\n1 F autumn\n2 F autumn\n0 M autumn\n1 M autumn\n1 F autumn\n0 M autumn\n2 F autumn\n0 F autumn\n1 M autumn\n1 F autumn\n0 M autumn\n2 F autumn\n3 F autumn\n2 M autumn\n3 F autumn\n1 F autumn\n2 M autumn\n1 F autumn\n1 M autumn\n0 M autumn\n1 F autumn\n1 F autumn\n2 M autumn\n2 F autumn\n0 M autumn\n2 M autumn\n0 F autumn\n1 F autumn\n2 F autumn\n1 F autumn\n3 M autumn\n0 M autumn\n1 M autumn\n2 F autumn\n2 F autumn\n1 M autumn\n2 F autumn\n''') == '9'"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '3'\n'''"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''0 M baroque skiing\n0 M baroque chess\n0 M baroque hiking\n10 M baroque surfing\n0 M baroque walking\n0 M baroque biology\n10 F baroque surfing\n0 F baroque swimming''') == '4'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"35 M\n0 M\n43 M\n30 F\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n25 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n30 M baroque baseball\n25 F classicism programming\n''') == '3'\nassert solution('''\n35 M classicism programming\n0 F baroque skiing\n43 M baroque chess\n30 F baroque soccer\n30 M baroque baseball\n25 F classicism programming\n''') == '3'\nassert solution('''\n10 M classicism programming\n0 F baroque skiing\n43 M baroque chess\n30 F baroque soccer\n30 M baroque baseball\n25 F classicism programming\n''') == '2'\n\n'''"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '1'\n) == '0'\nassert solution(\n    '2'\n) == '1'\nassert solution(\n    '3'\n) == '2'\nassert solution(\n    '4'\n) == '3'\nassert solution(\n    '5'\n) == '4'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0 M baroque skiing\\n43 M baroque chess\") == \"3\"\nassert solution(\"35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\") == \"3\"\nassert solution(\"0 M baroque skiing\\n0 M baroque chess\\n43 M baroque programming\") == \"3\"\nassert solution(\"35 M classicism programming\\n43 M baroque chess\\n43 M baroque programming\") == \"4\"\n\nimport sys\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\\n') == '3'\nassert solution('5\\n15 M classical music\\n15 M classical music\\n30 M classical music\\n30 F classical music\\n') == '3'\nassert solution('1\\n15 M classical music\\n15 M classical music\\n20 M classical music\\n20 F classical music\\n') == '2'\nassert solution('1\\n15 M classical music\\n15 M classical music\\n20 M classical music\\n20 F classical music\\n') == '1'\nassert solution('10\\n75 M classicism programming\\n85 M classicism programming\\n75 F classicism programming\\n85 M classicism programming\\n75 M classicism programming\\n85 M classicism programming\\n') == '10'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '3'\n''')\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2 1\"\nassert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\\ne 2 4\") == \"1 1\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '1\\n2\\n1\\n1\\n1\\n'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1\na 0\na 1\n2\na 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\na 1\nb 2\na 2\nc 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\na 1\na 1\nb 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\nc 1\nc 2\nc 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\na 1\nb 1\na 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"a 1\") == \"1\"\nassert solution(\"a 1\") == \"1\"\nassert solution(\"a 1\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\n\nfor i in range(N):\n    command = stdin.readline().split()\n    if command[0] == 'a':\n        a, b = int(command[1]), int(command[2])\n        print(a - b)\n    elif command[0] == 'b':\n        b, c = int(command[1]), int(command[2])\n        print(b - c)\n    else:\n        a, b, c, d = int(command[1]), int(command[2]), int(command[3]), int(command[4])\n        print(a + b + c + d)"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2\\n1\\n2\\n'"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0\\n2\\n1\") == \"2\\n\"\nassert solution(\"5\\n0\\n1\\n2\\n1\\n3\") == \"1\\n\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2'\nassert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '1'\nassert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2'\nassert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2'\nassert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0\\n1\\n2\\n2 3\\n4\\n') == '2 1'\nassert solution('1\\n1\\n1\\n1 1\\n') == '1'"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    0\n    a 1\n    a 2\n    b 2 3\n    b 4\n''') == '''\n    2\n    1\n    1\n    2\n    2\n'''\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1\\n') == '5'\nassert solution('10 2\\n') == '10'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\") == \"5\"\nassert solution(\"6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\") == \"7\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '5'\nassert solution('''\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '6'\nassert solution('''\n2 5\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '2'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\\n') == '5'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 1') == '5'\nassert solution('13 1') == '6'\nassert solution('50 3') == '5'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'\n\n---\n\nSample Input:\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\nSample Output:\n0\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '5'\nprint(solution('''\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n'''))\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'\nassert solution('1 1\\n') == '0'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'\nassert solution('6\\n1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '1'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"10 10\") == \"2\"\nassert solution(\"10 10 3 4\") == \"2\"\nassert solution(\"11 10 3 4\") == \"2\""
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 2\n1 3\n1 4\n2 3\n2 4\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == '4'\nassert solution('4\\n4') == '0'"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5') == '4'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n\") == \"0\"\nassert solution(\"7 7\\n3 4\\n2 4\\n3 5\\n4 5\\n2 4\\n1 4\\n1 5\\n\") == \"8\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5') == '4'\n\nassert solution('2 2') == '1'\n\nassert solution('1 2') == '0'\n\nassert solution('2 3') == '0'\n\nassert solution('3 4') == '2'"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\nassert solution('2 2\\n1 3\\n1 4\\n2 3\\n2 4') == '0'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '1'\n\nassert solution('1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '5'\n\n\"\"\""
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 2') == '0'\nassert solution('1 3') == '1'\nassert solution('1 4') == '0'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n\") == \"4\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '0'\nassert solution('10\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n5 6\\n5 7\\n5 8\\n6 7\\n6 8\\n7 8\\n') == '1'"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2 4\\n3 4\\n2 4'\nassert solution('3\\n1 2\\n2 3\\n3 4\\n') == '2 4\\n3 4\\n2 4'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2 4'\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n''') == '2 5'\nassert solution('''\n6\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '2 4'\n''')\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2 4\\n3 4\\n2 4'\nassert solution('2\\n1 2\\n2 3\\n3 4\\n') == '2 4\\n3 4\\n2 4'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n1 2\\n2 3\\n3 4\"\n) == \"2 3\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n2 3\\n3 4\") == \"2 3\"\nassert solution(\"6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"2 4\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\\n2 3\\n3 4\\n\") == \"2\\n3 4\\n2 4\"\nassert solution(\"1\\n3 4\\n1 2\\n2 3\\n\") == \"2\\n4 4\\n3 4\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3\\n1 2\\n2 3\") == \"2 4\"\nassert solution(\"4\\n4\\n4\\n3 2\\n2 3\") == \"3 2\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2 3'\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '4 4'\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2 4'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n1 2\n2 3\n3 4''') == '2 4 3'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n2 3\n3 4''') == '2 4'''\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"5\"\nassert solution(stdin=\"3 1\\n2 1\\n3 5\\n7 2\") == \"5\"\nassert solution(stdin=\"2 1\\n3 5\\n7 2\") == \"0\"\nassert solution(stdin=\"2 1\\n3 5\\n7 2\") == \"5\"\nassert solution(stdin=\"2 1\\n3 5\\n7 2\") == \"0\""
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '5'\nassert solution('2 1') == '4'\nassert solution('3 5') == '0'\nassert solution('7 2') == '6'\nassert solution('11 2') == '6'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\nassert solution('''\n2 5\n1 4\n2 1\n4 5\n7 2\n''') == '1'\nassert solution('''\n1 2\n1 3\n2 1\n3 5\n7 2\n''') == '0'\nassert solution('''\n1 5\n1 4\n2 1\n4 5\n7 2\n''') == '0'\nassert solution('''\n1 5\n1 3\n2 1\n3 5\n7 2\n''') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '3'\nassert solution('2 1') == '0'\nassert solution('3 5') == '5'\nassert solution('7 2') == '4'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2\\n') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '5'"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n') == '2'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2 2 4\n1 1\n1 1\n0 0\n0 1\n1 2\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n3 2 5\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n10 20 2\n1 1\n2 2\n1 3\n1 4\n2 1\n3 2\n3 3\n3 4\n4 5\n5 5\n\"\"\") == \"9\"\nassert solution(\n\"\"\"\n10 20 3\n2 2\n1 2\n4 5\n2 3\n3 4\n4 4\n5 5\n5 5\n\"\"\") == \"9\"\nassert solution(\n\"\"\"\n10 5 7\n1 1\n2 2\n1 3\n3 3\n3 4\n4 4\n4 5\n5 5\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\"\"\") == \"2\"\nassert solution(\"\"\"1 5 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\"\"\") == \"1\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5 3') == '2'\nassert solution('3 5 3') == '3'\nassert solution('10 10 10') == '10'"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n3 1\n4 2\n0 0\n1 3\n2 2\n0 3\n4 4\n0 0\n''') == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 7 2\n1 1\n2 2\n1 3\n0 0\n1 5\n3 4\n3 0\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 5 5\n0 0\n1 1\n0 3\n0 0\n0 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 4 4\n0 0\n1 1\n0 0\n1 0\n1 1\n1 1\n0 0\n\"\"\") == \"1\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 C\\n2 C\\n1 C\\n\") == \"GHOST\"\nassert solution(\"4 3\\n3 C\\n2 C\\n1 C\\n\") == \"SAFE\"\nassert solution(\"1\\n\") == \"SAFE\"\nassert solution(\"1\\n\") == \"SAFE\"\nassert solution(\"1\\n\") == \"SAFE\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 3\n3 C\n2 C\n1 C\n\"\"\") == \"GHOST\""
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4\\n3 C\\n2 C\\n1 C\\n') == 'GHOST'\n\n\"\"\"\n\nstdin = input()\nwires = stdin.split('\\n')\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == 'GHOST'\nassert solution('3 2') == 'SAFE'\nassert solution('5 7') == 'SAFE'\nassert solution('1 1') == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\nCC') == 'GHOST'\nassert solution('4 4\\nCCCCCCCC') == 'SAFE'\nassert solution('4 3\\nCCCCCCCC') == 'SAFE'\n\n\"\"\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3\\n3 C\\n2 C\\n1 C') == 'GHOST'\nassert solution('4 3\\n3 C\\n2 C\\n1 C') == 'SAFE'\nassert solution('4 3\\n3 C\\n2 C\\n1 C') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == 'GHOST'\nassert solution('5 2') == 'SAFE'\nassert solution('100 3') == 'GHOST'\n\"\"\""
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 C\\n2 C\\n1 C\\n') == 'GHOST'\nassert solution('6 3\\n1 1 2 2 2 2\\n3 3\\n5 1\\n2 1\\n3 2\\n') == 'SAFE'\nassert solution('5 3\\n1 1 2 2 2\\n3 3\\n5 1\\n2 1\\n3 2\\n') == 'GHOST'\nassert solution('6 3\\n3 C\\n2 C\\n1 C\\n1 C\\n3 C\\n') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'SAFE'\nassert solution('2') == 'GHOST'\nassert solution('3') == 'SAFE'\nassert solution('4') == 'GHOST'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '5'\nassert solution('5 2.2') == '2.2'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\nassert solution(\"5 0.20\\n1 2.40\\n\") == \"1\"\nassert solution(\"1000 1 1 1 1 1\\n\") == \"1\"\nassert solution(\"1000 1 1 1 1 1\\n\") == \"1\"\nassert solution(\"1000 1 1 1 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '2'\n\nimport math\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '2'\nassert solution('0.01 2.00') == '2'\nassert solution('0.01 10.00') == '10'\nassert solution('1 1.00') == '1'\n\nimport math"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_data) == \"2\"\nprint(solution(input_data))"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 3\n0.00 0.01\n''') == '1'\n\nassert solution('''\n1 2\n0.00 0.00\n''') == '2'\n\n'''\n---Solution---\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '2'\nassert solution('100 200') == '200'\nassert solution('1') == 'no fika'\nassert solution('2') == '2'\nassert solution('10') == 'no fika'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0.00 0.00') == '1'\nassert solution('3\\n2.00 4.00') == '3'\nassert solution('3\\n0.00 2.00') == 'no fika'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '2'\nassert solution('2 3.00') == '2'\nassert solution('2 2.00') == 'no fika'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n0.00 2.00\") == \"2\"\nassert solution(\"2 1\\n0.00 2.00\") == \"no fika\"\nassert solution(\"2 2\\n0.00 2.00\") == \"no fika\"\n\n'''\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n1 0\n4 0\n0 0\n0 0\n5 0\n\"\"\") == \"5.0000\"\nassert solution(\"\"\"\n5\n0 0\n10 0\n2\n30 0\n15 0\nSample Output:\n10\n\"\"\") == \"10.0000\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\nassert solution('5\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0') == '100'"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '10'\nassert solution('1') == '1'\nassert solution('2') == '10'\n'''"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"10\"\n\n\"\"\""
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n0 0\n10 0\n2\n30 0\n15 0\n\"\"\") == \"10\"\nassert solution(\"\"\"\n10\n0 0\n30 0\n15 0\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n1\n0 0\n10 0\n1\n\"\"\") == \"10\"\nassert solution(\"\"\"\n1\n10 0\n1 0\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"10.0\"\n\n------------------\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\\n0 0\\n10 0\") == \"10\"\nassert solution(\"2\\n0 0\\n10 0\\n20 10\") == \"10\"\nassert solution(\"2\\n0 0\\n10 0\\n20 10\\n30 20\") == \"10\"\nassert solution(\"2\\n0 0\\n10 0\\n20 10\\n30 20\\n40 20\") == \"10\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '10'\nassert solution('0 0') == '0'\nassert solution('10 0') == '10'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\nassert solution('3\\n0 0\\n10 0\\n20 0\\n15 0') == '20'\nassert solution('3\\n0 0\\n0 0\\n20 0\\n15 0') == '20'\nassert solution('3\\n0 0\\n10 0\\n20 0\\n15 0') == '20'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\nassert solution('1\\n10 5\\n7 4') == '5'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\nW 2 2\nE 2 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1\nW 3 0\nE 3 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\nW 5 0\nW 5 1\nE 17 4\nE 17 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\nW 0 0\nE 2 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1\nW 0 0\nE 0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 2\nW 2 3\nW 8 2\nE 1 3\nSample Input 2:\n4 2\nW 4 0\nW 8 2\nE 4 2\nSample Output 2:\n1\n\n\"\"\") == \"1\""
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n8 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n8 3\nW 10 0\nE 17 4\nE 10 3\n\"\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 2 3 4 5 6 7 8\nE 1 5 6 7\nE 8 4 7\nE 7 6 5\nW 1 7 6\nW 8 5 4\nE 4 7 6\nE 7 1 2\nW 1 7 8\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\n\"\"\") == \"8\"\nassert solution(\"\"\"\n1 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\n\"\"\") == \"13\"\nassert solution(\"\"\"\n0 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nW 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nW 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nW 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nW 0 0 0 0 0 0 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 5 1 4\nE 5 1 5\nE 1 2 3\nE 4 5 6\nW 7 8 1\nE 1 1 1\nW 9 7 3\nE 4 2 7\nE 2 7 9\nE 5 1 4\nW 4 3 6\nW 6 6 7\nW 9 7 8\nE 5 3 7\nE 4 5 4\nE 3 2 7\nW 2 5 9\nW 9 9 7\nW 9 7 9\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n6 4\\n3 1 3 2 0\\n') == \"0\"\nassert solution('2\\n2 3\\n1 1 2\\n') == \"1\"\nassert solution('1\\n5 7\\n1 1 2 3 4\\n') == \"1\"\nassert solution('1\\n6 4\\n4 4 4 3 3\\n') == \"1\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 5\nE 2 2\nW 5 0\nE 5 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2\\nW 10 0\\nW 10 3\\nE 17 4\\nW 21 0\\nW 21 3\\nE 17 4\\n') == '0'\nassert solution('5 2\\nW 10 0\\nW 10 3\\nE 17 4\\nW 21 0\\nW 21 3\\nE 17 4\\n') == '1'\nassert solution('5 2\\nW 10 0\\nW 10 3\\nE 17 4\\nW 21 0\\nW 21 3\\nE 17 4\\n') == '2'\nassert solution('5 2\\nW 10 0\\nW 10 3\\nE 17 4\\nW 21 0\\nW 21 3\\nE 17 4\\n') == '3'\nassert solution('5 2\\nW 10 0\\nW 10 3\\nE 17 4\\nW 21 0\\nW 21 3\\nE 17 4\\n') == '4'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4 2\nW 2 0\nW 2 3\nE 16 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 3\nW 10 0\nW 10 3\nE 16 4\nW 17 5\nE 17 8\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 2\nW 10 0\nW 10 3\nE 15 4\nW 16 5\nE 16 8\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n10 5\nW 10 0\nW 10 3\nE 15 4\nW 16 5\nE 16 8\nW 17 7\nE 17 8\nW 18 9\nE 18 10\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n8 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\\n\") == \"3\"\nassert solution(\"5\\n\") == \"1\"\nassert solution(\"5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\\n\") == \"4\"\nassert solution(\"5\\n7\\n8\\n5 6\\n3 4\\n5 13\\n6 10\\n\") == \"2\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n8\n5 6\n3 4\n5 13\n6 10\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n1\n10 10\n5 5\n20 20\n10 10\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\nassert solution('8') == '8'\nassert solution('5 6') == '4'\nassert solution('3 4') == '2'\nassert solution('5 13') == '4'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10') == '3'\nassert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10') == '4'\nassert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10') == '5'\nassert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10') == '4'\nassert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10') == '3'\n\"\"\"\n\nn = int(input())\nw, h = zip(*[map(int, input().split()) for _ in range(n)])\nw.sort(reverse=True)\nh.sort(reverse=True)\n\nanswer = 1\nfor i in range(n):\n    if h[i] < w[i]:\n        answer += 1\nprint(answer)"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\nassert solution('5 8') == '3'\nassert solution('5 6') == '2'\nassert solution('3 4') == '2'\nassert solution('5 13') == '5'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n8\n5 6\n3 4\n5 13\n6 10\n''') == '3'\nassert solution('''\n4\n5 8\n5 6\n3 4\n5 13\n6 10\n''') == '4'\n'''\nThe clue is the round-trip time in seconds it takes Demetrios to visit store 1, then return to his ship. If t = 3 and h = 8, then after the trip, the sea level rises by one foot. So the maximum number of gold stores is at least 3, and the trip is maximum 4 seconds.\n\n''')"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '3'\nassert solution('5 1 2 3') == '4'\nassert solution('5 1 1 2 3') == '4'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '3'\nassert solution('5 8') == '3'\nassert solution('5 6') == '2'\nassert solution('3 4') == '1'\nassert solution('5 13') == '2'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\") == \"3\""
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 1') == 'ABB'\nassert solution('3 3 2') == 'ABBACCC'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"ab\\nba\"\nassert solution(\"4 4\") == \"abb\\nabaa\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"ABCABCABC\", \"should be ABCABCABC\"\nassert solution
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 4\n10 3 3\n''') == 'impossible'\n\nassert solution('''\n3 2\n10 1 3\n''') == 'AB'\n\nassert solution('''\n4 5\n10 1 5 2\n''') == 'CB'\n\nassert solution('''\n3 3\n3 3 3\n''') == 'BC'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 4\") == \"ABC\"\nassert solution
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 4\n5 4 5\n''') == 'impossible'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n10 3 3\") == \"ABACB\"\nassert solution(\"4 5\\n5 1 2\") == \"ABBAA\"\nassert solution(\"4 5\\n5 1 2\") == \"ABBAA\"\n\"\"\""
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2\\n10 3 3') == 'ABC'\nassert solution('4 2\\n10 3 2') == 'BABC'\nassert solution('4 2\\n4 2 4') == 'ABBBB'\nassert solution('4 2\\n10 3 1') == 'ABCABA'\nassert solution('4 2\\n10 2 3') == 'AABBBB'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n10 3 3\n''') == 'impossible'\nassert solution('''\n8 4\n10 3 3 3\n''') == 'ABCABCABC'\nassert solution('''\n8 5\n1 2 3 4 5\n''') == 'ABCDDCDABC'\nassert solution('''\n8 6\n1 2 3 4 5 6\n''') == 'ABCADCDABC'\nassert solution('''\n4 4\n1 3 3\n''') == 'ABBCCDADBC'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2\\n8 6 5') == 'ABCB'\n\nassert solution('12 2\\n8 7 5') == 'CAB'\n\nassert solution('12 1\\n8 7 5') == 'CBA'\n\nassert solution('12 3\\n8 6 5') == 'CBA'\n\nassert solution('12 5\\n8 7 5') == 'ABC'"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''11\n    BETWEEN\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'''\n) == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution(\n    '''13\n    VOWELS\n    BETWEEN\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'''\n) == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution(\n    '''9\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'''\n) == 'SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution(\n    '''5\n    NO\n    VOWELS\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'''\n) == 'NO SHADING AND NO ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution(\n    '''1\n    BETWEEN\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'''\n) == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nprint('All tests passed!')\n''')\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n8\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n\"\"\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\"\"\"\n--- Part Two ---\n\nNow that you've constructed the dictionary, you'd like to make a new message by removing some vowels from the no-vowels message. For this second puzzle, you are given the dictionary and the no-vowels message as input.\n\nGiven an integer $n$ and a dictionary of no-vowels words, which is given in the first line of input, construct the original no-vowels message by removing the vowels. The original message can be constructed from the dictionary by removing the dictionary words. For example, consider the following dictionary and no-vowels message:\n\nNOVIOSHBDAS\n\nThe original message is:\n\nBNOSNHIOSDRSKQFDBSPADZNHTATVIMZNYZ\n\nWrite a single line of code to answer this question.\n\n\"\"\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(\"12\") == \"SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(\"13\") == \"SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\IQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\nBDCDACABC\") == \"BDCDACABC\"\nassert solution(\"1\\nACBD\") == \"ACBD\"\nassert solution(\"3\\n\"\n\"B A\") == \"B A\"\nassert solution(\"3\\n\"\n\"B A\"\n\"C D\") == \"B A\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN''') == 'BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN', \"Wrong answer\"\n''')\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\nassert solution(\"camelcase\") == \"0\"\nassert solution(\"mamamamamamamam\") == \"0\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '12'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\nassert solution(\"abracadabra\") == \"0\"\nassert solution(\"abracadabraabcdefghijklmnopqrstuvwxyz\") == \"4\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abrahellehhelleh') == '12'"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('abrahellehhelleh') == '12'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\nassert solution(\"rachelhellabracadabra\") == \"0\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''abrahellehhelleh''') == '12'\nassert solution('''abracadabra''') == '0'\nassert solution('''axaaxaaxa''') == '0'\nassert solution('''abcdefghijklmnopqrstuvwxyz''') == '40'\nassert solution('''aabbccdd''') == '0'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1\\n1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"65\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 1 1 1 1 1\n1 2 1 3\n1 3 1 4\n1 4 1 5\n1 5 1 6\n''') == '340'\nassert solution('''\n5\n1 1 1 1 1\n1 2 1 3\n1 3 1 4\n1 4 1 5\n1 5 1 6\n''') == '340'\nassert solution('''\n5\n1 1 1 1 1\n1 2 1 3\n1 3 1 4\n1 4 1 5\n1 5 1 6\n''') == '210'\nassert solution('''\n5\n1 1 1 1 1\n1 2 1 3\n1 3 1 4\n1 4 1 5\n1 5 1 6\n''') == '210'\nassert solution('''\n5\n1 1 1 1 1\n1 2 1 3\n1 3 1 4\n1 4 1 5\n1 5 1 6\n''') == '170'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n15\n1 1 2 1 2 3 1 3 3 2 3 3 3 1 1 1 1 1 2\n''') == '70'\nassert solution('''\n6\n2 2 3 1 1 3 2\n''') == '40'\nassert solution('''\n7\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n''') == '150'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n65\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\nassert solution('''\n14\n3 1 5 1 5 2 4 3 2 2 2 3 2 4 2 3 5 1\n1 1 5 2 4 3 2 2 2 2 3 2 2 2 2 2 3 2 3 2 2 2 2 3 2 3 2 2 2 3 2 2 2 2 2 3 2 3 2 2 2 2 2 3 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n10\n7\n8\n7\n''') == '7'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '12'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '7'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '6'\n'''\nimport sys\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 5') == '10'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"10\"\nassert solution(input) == \"7\""
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"10\") == \"10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"10\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n10\n''') == '7'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n10\n''') == '8'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n10\n''') == '7'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n10\n''') == '8'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n10\n''') == '7'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '7'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '8'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"7\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"8\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"7\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"8\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '10\\n7\\n8\\n7\\n'\nassert solution('''6 5\n1 2 3 4 5 6\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '6\\n8\\n'\n\nassert solution('''10 2\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '12\\n8\\n'\n\nassert solution('''9 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n1 4\n1 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n'''\n\nassert solution('''3 5\n1 2 3 4 5\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '3\\n5\\n'"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 5\") == \"7\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"7\"\nassert solution(\"0 1\") == \"8\"\nassert solution(\"0 4\") == \"7\"\nassert solution(\"1 4\") == \"8\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('10 10 10') == '20'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1''') == '6'\nassert solution('''2 2 1\n-2 1\n-1 -2\n1 0\n2 1\n2 2''') == '1'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('1 2') == '2'\nassert solution('4 2') == '2'"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '6'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('3 4 5') == '2'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1''') == '6'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4 7\") == \"6\"\nassert solution(\"-2 0\") == \"0\"\nassert solution(\"0 -1\") == \"0\"\nassert solution(\"-2 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 7\\n-2 0\\n0 -1') == '6'\nassert solution('2 4 7\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1') == '5'\nassert solution('2 4 7\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n3 4\\n4 -1') == '4'\nassert solution('2 4 7\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n3 4\\n4 -1\\n4 5\\n5 -1') == '4'\nassert solution('2 4 7\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n3 4\\n4 -1\\n4 5\\n5 -1\\n5 6\\n6 -1') == '4'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\"\n) == \"6\"\nassert solution(\n    \"1\\n3\\n-1\\n\"\n) == \"1\"\nassert solution(\n    \"1\\n1\\n1\\n\"\n) == \"2\"\nassert solution(\n    \"5\\n0\\n1\\n2\\n3\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('1') == '1'\nassert solution('2 4 7') == '6'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 4 40') == '3'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '3'\nassert solution('1 0.00001 1 1') == '3'\nassert solution('1 0.001 1 1') == '2'\nassert solution('1 0.5 1 1') == '4'\nassert solution('1 0.0000001 1 1') == '2'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    3\n    1\n    4\n    40\n''') == '3'\nassert solution('''\n    3\n    1\n    4\n    42\n''') == '4'\nassert solution('''\n    3\n    1\n    3\n    63\n''') == '3'\nassert solution('''\n    3\n    1\n    2\n    3\n''') == '3'\nassert solution('''\n    1\n    3\n    4\n    2\n''') == '2'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 4 40') == '3'\nassert solution('1.1 1.4 40') == '3'\nassert solution('3 3.4 5') == '4'\nassert solution('3.3 4.5 5') == '4'\nassert solution('3.3 4.5') == '3'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 4 40') == '3'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 4 40') == '3'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 4 40') == '3'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\n1 4\n40\n\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1 4\n''') == '3'\n\nassert solution('''\n2 1 4\n''') == '2'\n\nassert solution('''\n3 1 1\n''') == '2'\n\nassert solution('''\n3 1 0.4\n''') == '1'\n\nassert solution('''\n3 1 0.1\n''') == '2'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 1 4 40\n\"\"\") == \"3\"\nassert solution(\"\"\"4.1 1 4 40\n\"\"\") == \"2\"\nassert solution(\"\"\"40 1 4 3\n\"\"\") == \"4\"\nassert solution(\"\"\"40 1 3 3\n\"\"\") == \"3\"\nassert solution(\"\"\"3 1 1.1 4 40\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"5 10 20 -5 5 2\") == \"20\"\nassert solution(\"10 -10 10 -20 -5 5 2\") == \"10\""
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n0 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '0'"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99'\nassert solution('4 2\\n2 5 1 5\\n0 1 1 0\\n1 0 1 1\\n0 0 0 0') == ''\nassert solution('3 3\\n10 20 -1\\n10 20 -1\\n20 10 -1') == '2'\nassert solution('2 5\\n0 0\\n-1\\n10 10\\n-1\\n-1\\n0 -1\\n-1\\n-1') == '0'\nassert solution('3 5\\n1 6 0\\n0 7 1\\n5 0 2\\n1 3 3\\n2 4 2\\n-1\\n0 5\\n0 4\\n2 3\\n1 5\\n3 4') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n1 0 1\n2 5 0\n0 3 -1\n''') == ''\nassert solution('''\n1 1 1\n1 1 1\n1 1 1\n''') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\n\n'''\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\n\nassert solution('''\n1 2 3\n1 1 1\n1 2 1\n1 3 1\n''') == '3'\n\nassert solution('''\n3 4 6\n2 4 1\n1 3 1\n3 1 1\n''') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\nassert sorted(solution()) == sorted([])\nassert sorted(solution('')) == sorted([])\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n\"\"\") == \"99\"\nassert solution(\n\"\"\"\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n3 352\n93 8\n92 76\n99\n0\n70\n66\n71\n97\n0\n76\n0\n87\n66\n74\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n3\n3\n93\n82\n44\n44\n99\n0\n70\n66\n71\n97\n0\n76\n0\n87\n66\n74\n\"\"\") == \"44\"\nassert solution(\n\"\"\"\n2\n2\n99\n0\n0\n0\n0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == ''\nassert solution('''\n3 352\n0 83 89 41 77 58 63 94 69 32 92 77 93 69 38 65 77 58 63 94 77 41 31 32 93 69 29 34 71 58 58 30 71 89 81\n62 96 44 75 21 55 41 38 45 75 21 55 41 38 45 75 21 55 41 38 45 75 21 55 41 38 45 75 21 55 41 38 45 75 21\n''') == '99'\nassert solution('''\n3 352\n0 83 89 41 77 58 63 94 69 32 92 77 93 69 38 65 77 58 63 94 77 41 31 32 93 69 29 34 71 58 58 30 71 89 81\n62 96 44 75 21 55 41 38 45 75 21 55 41 38 45 75 21 55 41 38 45 75 21 55 41 38 45 75 21 55 41 38 45 75 21\n63 94 69 32 92 77 93 69 38 65 77 58 63 94 77 41 31 32 93 69 29 34 71 58 58 30 71 89 81\n''') == '99'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n') == '99'\nprint(solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''')) == '99'\nassert solution('2 2\\n0 1\\n0 0\\n0 1\\n') == '0'\nprint(solution('''\n2 2\n0 1\n0 0\n0 1\n''')) == '0'\nassert solution('1 2\\n0 0\\n1 0\\n') == '0'\nprint(solution('''\n1 2\n0 0\n1 0\n''')) == '0'\nassert solution('2 2\\n0 0\\n0 1\\n') == '0'\nprint(solution('''\n2 2\n0 0\n0 1\n''')) == '0'\nassert solution('3 2\\n0 0\\n0 0\\n') == '0'\nprint(solution('''\n3 2\n0 0\n0 0\n''')) == '0'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '2\\n4\\n3\\n1\\n'"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '2'\nassert solution('7') == '2'\nassert solution('11') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4') == '2 3'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2') == '2\\n3 4'\nassert solution('3\\n2 3\\n1 2\\n1 3') == '2\\n2 3'\nassert solution('5\\n3 1 2\\n3 2 4\\n2 4 5\\n4 5 2\\n3 4 6') == '3\\n4 5 2'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2 4\\n3 4\\n'\n\"\"\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2\\n3 4\\n4 2\\n'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2 3\\n4 2'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4 2 3 4\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n2\\n3') == '9.0'\nassert solution('2\\n1\\n2\\n3') == '12.00000'\nassert solution('2\\n3\\n2\\n1') == '12.00000'\nassert solution('3\\n1\\n2\\n3') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\\n\") == \"9.0000\"\nassert solution(\"4\\n2 3\\n3 2\\n4 1\\n\") == \"12.00000\"\nassert solution(\"4\\n3 2\\n2 1\\n4 1\\n\") == \"12.00000\"\nassert solution(\"4\\n2 3\\n4 1\\n\") == \"9.0\""
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '9.0000'\nassert solution('1 1') == '9.0000'\nassert solution('2 2') == '12.00000'\nassert solution('3 2') == '12.00000'\nassert solution('4 1') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"10.0\"\nprint(solution(open(\"input.txt\")))\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n2 3\\n3 4\") == \"9.0000\"\nassert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\") == \"12.00000\"\nprint(\"Solution = OK\")\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1\\n2 2\\n3 2\\n4 1\\n') == '9.0000'"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n2 2\n3 2\n4 1\n''') == \"9.0000\"\nassert solution('''\n4\n1 1\n2 2\n3 2\n4 1\n''') == \"12.00000\"\nassert solution('''\n5\n1 1\n2 2\n3 2\n4 2\n5 1\n''') == \"12.00000\"\n''')\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n1\n2\n3\n''') == '9.0000'\nassert solution('''4\n1 1\n2 2\n3 2\n4 1\n''') == '12.00000'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n2 2\n3 2\n4 1\n''') == '9.0'\nassert solution('''\n1 1\n2 2\n3 2\n4 1\n5 2\n6 1\n7 2\n8 3\n9 4\n10 3\n11 3\n12 2\n13 1\n14 3\n15 2\n16 3\n17 1\n18 2\n19 1\n20 3\n21 3\n22 3\n23 2\n24 3\n25 2\n26 1\n27 2\n28 3\n29 2\n30 1\n31 2\n32 2\n33 2\n34 2\n35 2\n36 1\n37 2\n38 2\n39 2\n40 3\n41 3\n42 2\n43 2\n44 3\n45 2\n46 2\n47 2\n48 3\n49 3\n50 3\n51 2\n52 3\n53 2\n54 2\n55 2\n56 3\n57 3\n58 2\n59 3\n60 3\n61 2\n62 2\n63 2\n64 3\n65 3\n66 2\n67 2\n68 3\n69 2\n70 2\n71 3\n72 2\n73 2\n74 3\n75 2\n76 2\n77 2\n78 3\n79 2\n80 3\n81 2\n82 3\n83 2\n84 3\n85 2\n86 2\n87 2\n88 2\n89 2\n90 2\n91 2\n92 2\n93 2\n94 2\n95 2\n96 3\n97 3\n98 3\n99 3\n100 3\n101 2\n102 3\n103 2\n104 3\n105 2\n106 3\n107 2\n108 3\n109 2\n110 3\n111 3\n112 3\n113 3\n114 3\n115 3\n116 3\n117 3\n118 3\n119 3\n120 3\n121 3\n122 3\n123 3\n124 3\n125 3\n126 3\n127 3\n128 3\n129 3\n130 3\n131 3\n132 3\n133 3\n134 3\n135 3\n136 3\n137 3\n138 3\n139 3\n140 3\n141 3\n142 3\n143 3\n144 3\n145 3\n146 3\n147 3\n148 3\n149 3\n150 3\n151 3\n152 3\n153 3\n154 3\n155 3\n156 3\n157 3\n158 3\n159 3\n160 3\n161 3\n162 3\n163 3\n164 3\n165 3\n166 3\n167 3\n168 3\n169 3\n170 3\n171 3\n172 3\n173 3\n174 3\n175 3\n176 3\n177 3\n178 3\n179 3\n180 3\n181 3\n182 3\n183 3\n184 3\n185 3\n186 3\n187 3\n188 3\n189 3\n190 3\n191 3\n192 3\n193 3\n194 3\n195 3\n196 3\n197 3\n198 3\n199 3\n200 3\n201 3\n202 3\n203 3\n204 3\n205 3\n206 3\n207 3\n208 3\n209 3\n210 3\n211 3\n212 3\n213 3\n214 3\n215 3\n216 3\n217 3\n218 3\n219 3\n220 3\n221 3\n222 3\n223 3\n224 3\n225 3\n226 3\n227 3\n228 3\n229 3\n230 3\n231 3\n232 3\n233 3\n234 3\n235 3\n236 3\n237 3\n238 3\n239 3\n240 3\n241 3\n242 3\n243 3\n244 3\n245 3\n246 3\n247 3\n248 3\n249 3\n250 3\n251 3\n252 3\n253 3\n254 3\n255 3\n256 3\n257 3\n258 3\n259 3\n260 3\n261 3\n262 3\n263 3\n264 3\n265 3\n266 3\n267 3\n268 3\n269 3\n270 3\n271 3\n272 3\n273 3\n274 3\n275 3\n276 3\n277 3\n278 3\n279 3\n280 3\n281 3\n282 3\n283 3\n284 3\n285 3\n286 3\n287 3\n288 3\n289 3\n290 3\n291 3\n292 3\n293 3\n294 3\n295 3\n296 3\n297 3\n298 3\n299 3\n300 3\n301 3\n302 3\n303 3\n304 3\n305 3\n306 3\n307 3\n308 3\n309 3\n310 3\n311 3\n312 3\n313 3\n314 3\n315 3\n316 3\n317 3\n318 3\n319 3\n320 3\n321 3\n322 3\n323 3\n324 3\n325 3\n326 3\n327 3\n328 3\n329 3\n330 3\n331 3\n332 3\n333 3\n334 3\n335 3\n336 3\n337 3\n338 3\n339 3\n340 3\n341 3\n342 3\n343 3\n344 3\n345 3\n346 3\n347 3\n348 3\n349 3\n350 3\n351 3\n352 3\n353 3\n354 3\n355 3\n356 3\n357 3\n358 3\n359 3\n360 3\n361 3\n362 3\n363 3\n364 3\n365 3\n366 3\n367 3\n368 3\n369 3\n370 3\n371 3\n372 3\n373 3\n374 3\n375 3\n376 3\n377 3\n378 3\n379 3\n380 3\n381 3\n382 3\n383 3\n384 3\n385 3\n386 3\n387 3\n388 3\n389 3\n390 3\n391 3\n392 3\n393 3\n394 3\n395 3\n396 3\n397 3\n398 3\n399 3\n400 3\n401 3\n402 3\n403 3\n404 3\n405 3\n406 3\n407 3\n408 3\n409 3\n410 3\n411 3\n412 3\n413 3\n414 3\n415 3\n416 3\n417 3\n418 3\n419 3\n420 3\n421 3\n422 3\n423 3\n424 3\n425 3\n426 3\n427 3\n428 3\n429 3\n430 3\n431 3\n432 3\n433 3\n434 3\n435 3\n436 3\n437 3\n438 3\n439 3\n440 3\n441 3\n442 3\n443 3\n444 3\n445 3\n446 3\n447 3\n448 3\n449 3\n450 3\n451 3\n452 3\n453 3\n454 3\n455 3\n456 3\n457 3\n458 3\n459 3\n460 3\n461 3\n462 3\n463 3\n464 3\n465 3\n466 3\n467 3\n468 3\n469 3\n470 3\n471 3\n472 3\n473 3\n474 3\n475 3\n476 3\n477 3\n478 3\n479 3\n480 3\n481 3\n482 3\n483 3\n484 3\n485 3\n486 3\n487 3\n488 3\n489 3\n490 3\n491 3\n492 3\n493 3\n494 3\n495 3\n496 3\n497 3\n498 3\n499 3\n500 3\n501 3\n502 3\n503 3\n504 3\n505 3\n506 3\n507 3\n508 3\n509 3\n510 3\n511 3\n512 3\n513 3\n514 3\n515 3\n516 3\n517 3\n518 3\n519 3\n520 3\n521 3\n522 3\n523 3\n524 3\n525 3\n526 3\n527 3\n528 3\n529 3\n530 3\n531 3\n532 3\n533 3\n534 3\n535 3\n536 3\n537 3\n538"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 2') == '9.00000'\nassert solution('1\\n1 1') == '9.00000'\nassert solution('1\\n1 1\\n1 1') == '9.0'\nassert solution('2\\n1 1\\n2 2') == '12.00000'\nassert solution('3\\n1 1\\n2 2\\n3 2') == '12.00000'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n'\nassert solution('00') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n'\n\"\"\""
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"DI 1\"\nassert solution(\"255\") == \"DI 1\"\nassert solution(\"4\") == \"DI 1\"\nassert solution(\"8\") == \"DI 1\"\nassert solution(\"11\") == \"DI 1\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n'\nassert solution('-1') == 'ST X\\nPH X\\nDI X\\n'\nassert solution('0') == 'ST X\\nST X\\nDI X\\n'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n') == 'DI'\nassert solution('2\\n') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\n'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"ST A\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\nassert solution(\"100\") == \"ST A\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\n\n\"\"\""
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'DI A'\nassert solution('2') == 'ST A'\nassert solution('3') == 'AD'\nassert solution('4') == 'DI A'\nassert solution('5') == 'DI X'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'DI Y\\n'\n\"\"\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'ST A\\nPH A\\nPH X\\nAD\\nDI X\\n'\nassert solution('6') == 'ST A\\nST X\\nST Y\\nPH A\\nPH X\\nPH Y\\nAD\\nDI X\\nDI Y\\nDI Y\\n'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'AD'\nassert solution('2') == 'ST Y'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5 6\") == \"2\"\nassert solution(\"2 2 1\") == \"1\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\") == \"2\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000') == '2'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 6') == '2'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 10 10') == '1'\nassert solution('1 1 1') == '1'\nassert solution('10 1 1') == '10'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 1 1') == '1'"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\") == '2'"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 100 1') == '1'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == '2'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\n\n'''\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\nprint(solution('''\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n'''))"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == \"abaaba\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \"\"\") == \"abaaba\"\nassert solution(\"\"\"5\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \"\"\") == \"NONE\"\nassert solution(\"\"\"5\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \"\"\") == \"a\"\nassert solution(\"\"\"5\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \"\"\") == \"a\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\nNONE\nabaaba\nNONE\nabbbbbbbbbbbbbbbbba\na\n''') == 'abaabaabbbbbbbbba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nnone on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n') == 'NONE'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nNONE\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nNONE\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n') == 'NONE'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nNONE\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n') == 'NONE'\n'''\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == \"abaaba\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('\\n'.join([\n    'S -> aSa',\n    'S -> bSb',\n    'S -> a',\n    'S -> b',\n    'S -> ',\n    'S -> ',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> ',\n    'S -> ',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    '"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome''') == 'abaaba'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"6\""
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\nassert solution('4\\n10 10 0 2\\n1 3 7\\n2 0\\n4\\n') == '12'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '4'\nassert solution('''\n4\n0 0 1 1\n1 1 1 1\n2 1 1 1\n1 1 1 1\n''') == '0'\nassert solution('''\n4\n4 2 2 3\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '5'\nassert solution('''\n4\n4 5 2 2\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '2'\nassert solution('''\n5\n4 0 2\n1 3 7\n2 0\n4\n''') == '5'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n\") == \"4\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2 3 4\\n4 5 3 6\\n0 0') == '1'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 0') == '2'\nassert solution('100\\n1 2 3 4 5 6 7 8 9 10\\n0 0') == '2'\nassert solution('5\\n2 3 1 0 5\\n0 0') == '1'\nassert solution('5\\n2 3 1 0 5\\n0 0') == '2'\n\n'''"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '1'\nassert solution('5') == '4'\nassert solution('8') == '6'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\ndisparity = 0\nfor i in range(n):\n    disparity = max(disparity, abs(a[i] - b[i]))\n\nprint(disparity)"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n1\\n4\\n') == '2'\nassert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n1 3\n3 2\n''') == '4', 'wrong'\nassert solution('''5\n4 5 0 2\n1 3 7\n2 0\n4\n3 2\n''') == '4', 'wrong'\nassert solution('''5\n5 5 0 2\n1 3 7\n2 0\n4\n3 2\n''') == '3', 'wrong'"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'GO FOR IT', \"First\"\nassert solution('4 4') == 'NO WAY', \"Second\"\n\n-- Python cases --\n\n```python\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == \"GO FOR IT\"\nassert solution('2 4') == \"SUCCESS\"\nassert solution('2 6') == \"GO FOR IT\"\nassert solution('2 7') == \"NO WAY\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\"\nassert solution(\"5 3\") == \"SUCCESS\"\nassert solution(\"3 2\") == \"NO WAY\"\nassert solution(\"5 5\") == \"SUCCESS\"\nassert solution(\"3 3\") == \"NO WAY\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == 'GO FOR IT'\nassert solution('2 10\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == 'NO WAY'\nassert solution('2 11\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == 'NO WAY'\nassert solution('2 20\\n4 4\\nWWWWWWWWWWWWWW\\nWSBB\\nWWWWWWWWWWWWWW\\nWBWG') == 'NO WAY'\nassert solution('2 100\\n4 4\\nWWWWWWWWWWWWWWWW\\nWSBB\\nWWWWWWWWWWWWWWWW\\nWBWG') == 'NO WAY'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\") == \"GO FOR IT\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWBWG\\n\") == \"NO CHANCE\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWBWG\") == \"NO WAY\"\n\"\"\""
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n4 4\\nWWWW\") == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\nWWWW\nWSBB\nWWWW\nWBWG\n''') == \"GO FOR IT\"\nassert solution('''\n3 2\n2 2\nSWSW\n''') == \"NO CHANCE\"\nassert solution('''\n5 5\nSBBG\nSWSWS\nSWSWS\nSBSB\n''') == \"GO FOR IT\"\nassert solution('''\n1 1\nS\n''') == \"SUCCESS\"\nassert solution('''\n1 1\nG\n''') == \"NO CHANCE\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"GO FOR IT\"\nassert solution(\"2 2\") == \"GO FOR IT\"\nassert solution(\"3 3\") == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\"\nassert solution(\"5 10\") == \"NO WAY\"\nassert solution(\"4 4\") == \"NO CHANCE\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW') == 'GO FOR IT'\nassert solution('2 3\\n4 4\\nWBWG\\nWSBB\\nWWWW') == 'NO WAY'\nassert solution('1 2\\n3 2\\nBBB\\nWWW\\nBBB') == 'SUCCESS'\nassert solution('5 5\\n5 5\\nBBBBBBBBBB\\nBBBBBBBBBB\\nBBBBBBBBBB') == 'NO WAY'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''3 6\n5 5 9\n''') == '16'\nassert solution('''3 3\n4 4 4\n''') == '0'\nassert solution('''2 2\n2 1 1\n''') == '1'\nassert solution('''1 1\n1 1\n''') == '1'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 900\") == \"2243\"\nassert solution(\"4 900 100\") == \"2243\"\nassert solution(\"4 900 100 200\") == \"2243\"\nassert solution(\"4 900 100 200 300\") == \"2243\"\nassert solution(\"4 900 100 300 200\") == \"2243\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == \"2243\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''\n5 200\n900 1200 600 900 1200\n''') == '1900'\n'''"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''\n5 100\n10 40 30 10 10\n''') == '1232'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == '2243'"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 900\n800 700 400 300 200\n\"\"\") == \"2243\"\nassert solution(\"\"\"\n10 4\n1 2 5 1 3 2 5 2 3\n\"\"\") == \"10\"\nassert solution(\"\"\"\n10 4\n1 2 3 2 3 2\n\"\"\") == \"12\"\nassert solution(\"\"\"\n5 20\n8 7 12 7 4\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n900\\n800 700 400 300 200') == '2243'\nassert solution('2\\n200\\n900\\n800 700 400 300 200') == '1900'\nassert solution('1\\n300\\n200\\n900\\n800 700 400 300 200') == '1902'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == '2243', f\"Wrong result for '{input}'\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\") == \"2243\"\nassert solution(\"4 0\") == \"0\"\nassert solution(\"4 100\\n800 700 400 300 200\") == \"2243\"\nassert solution(\"3 1\\n2 1 1\") == \"2\"\nassert solution(\"2 4\\n5 4 1 1\") == \"3\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == 'yes\\nyes\\nno\\nno\\n'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"yes\\nyes\\n\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3\n''') == 'yes\\nyes\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\n'''\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'no\\nyes\\nno\\n'\nassert solution('10 10') == 'yes\\nyes\\nyes\\n'\nassert solution('1 3') == 'yes\\n'\nassert solution('2 5') == 'no\\n'\nassert solution('3 10') == 'no\\n'\n\"\"\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3') == 'no'\nassert solution('20 1\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3') == 'yes'"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3\n''') == 'yes\\n'\nassert solution('''\n5 3\n? 1 2\n= 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n?"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5 4\n? 1 2\n= 1 4\n= 2 4\n? 2 3\n= 2 4\n= 3 4\n? 1 3\n= 1 4\n= 3 4\n?\"\"\") == \"yes\\nno\""
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n') == 'yes'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4\\n? 1 3') == 'no'\nassert solution('2 2\\n= 1 3') == 'yes'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4\\n? 1 3\\n= 1 8\\n? 1 3\\n') == 'no\\nyes'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n10 5 4 8 3''') == '2'\nassert solution('''10 8\n1 1 3 1 9 8''') == '3'\n''')\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '2'\nassert solution('1 2') == '1'\nassert solution('5 1 2') == '1'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n10 5 4 8 3\") == \"2\"\nassert solution(\"5 3\\n1 2 4 5 6\") == \"4\"\nassert solution(\"5 3\\n1 2 3 4 5 6\") == \"0\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 2 3') == '0'\nassert solution('10 5 4 8 3') == '2'\nassert solution('1 2 3 4 5 6 7 8') == '0'\nassert solution('5 5 5 5 5 5 5 5 5') == '1'\nassert solution('20 7 5 1 9 5 2 5 5 9 5 5 2 5 5') == '4'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '2'\nassert solution('10 5 4 8 3') == '1'\nassert solution('1000000000 3') == '2'\nprint('Congratulations, done!')\nInput:\n3 3\n1 2 3\nOutput:\n0\n\nInput:\n2 1\n1 2\nOutput:\n1\n'''\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '2'\nassert solution('6 4') == '1'\nassert solution('3 3') == '1'\nassert solution('6 3') == '1'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n10 5 4 8 3\n''') == '2'\n'''\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n10 5 4 8 3\") == \"2\"\nassert solution(\"20 1\\n6 7 5 9 1\\n\") == \"0\"\nassert solution(\"1 3\\n7 5 9 1\\n\") == \"0\"\nassert solution(\"2 4\\n7 8 5 1\\n\") == \"1\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == '2'\nassert solution('5 5 5 5 5\\n10 10 10 10 10') == '1'\n'''\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 127\") == \"1083\""
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 127') == '1083'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 127\") == \"1083\"\n\n\"\"\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 127\") == \"1083\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1'\nassert solution('1') == '1'\nassert solution('6') == '6'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1083\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 127') == '1083'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 127') == '1083'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 1\n''') == '10'\nassert solution('''\n4 1\n''') == '10'\nassert solution('''\n5 1\n''') == '10'\nassert solution('''\n5 1\n''') == '10'\nassert solution('''\n1 1\n''') == '0'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 7') == '1081'\nassert solution('1 1000') == '1083'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?\"\n) == \"2.0000000000\"\n\n'''\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\n'''\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 4\\n\"\n    \"How much is 6 times 9? 42\\n\"\n    \"How much is 9 times 6? 42\\n\"\n    \"Is there intelligent life on Earth? Probably\\n\"\n    \"What is the air speed velocity of an unladen swallow? African?\") == \"2.0\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2.0000000000'\nassert solution('20\\nWhat is the air speed velocity of an unladen swallow? African?') == '-2.0000000000'\nassert solution('10\\nHow much is 9 times 6? 42\\nHow much is 6 times 9? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '3.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '2.0'\nassert solution('5 5') == '0.5'\nassert solution('0 0') == '0.5'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4') == '2.0000000000'\nassert solution('0 0') == '0.0000000000'\nassert solution('1') == '1.0000000000'\n\"\"\""
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"2.0000000000\"\nassert solution(\"5 1\") == \"2.0000000000\"\nassert solution(\"5 1000\") == \"3.0\"\nassert solution(\"5 10000\") == \"3.0000000000\"\nassert solution(\"5 100000\") == \"3.0000000000\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4') == '2.0000000000'\nassert solution('5 5') == '3.000000119'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4') == '2.0000000000'\nassert solution('1 1') == '1.0'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '2.0000000000'\nassert solution('2') == '2.0000000000'\nassert solution('3') == '2.0000000000'\nassert solution('4') == '2.0000000000'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 6') == 'IMPOSSIBLE'\nassert solution('5 2') == 'POSSIBLE'\nassert solution('5 10') == 'POSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"3 6\") == \"POSSIBLE\"\nassert solution(\"3 2\") == \"POSSIBLE\"\nassert solution(\"2 4\") == \"POSSIBLE\"\nassert solution(\"3 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 6\") == \"IMPOSSIBLE\"\nassert solution(\"1 2\") == \"POSSIBLE\""
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'IMPOSSIBLE'\nassert solution('''3 5\nmonkey 2\nlion 3\nmonkey 1\npenguin 1\npenguin 2''') == 'POSSIBLE'\nassert solution('''3 5\nmonkey 2\nlion 3\nmonkey 1\npenguin 1\npenguin 2\npenguin 3''') == 'FALSE ALARM'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 6\\n\"\n    \"monkey 2 lion penguin\\n\"\n    \"lion 3 monkey penguin lion\\n\"\n    \"penguin 1 monkey\\n\"\n) == \"POSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\nmacro 2 micro\\n\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3 6\n    monkey 2 lion penguin\n    lion 3 monkey penguin lion\n    penguin 1 monkey\n    ''') == 'POSSIBLE'\nassert solution('''\n    3 6\n    monkey 2 lion penguin\n    lion 3 monkey penguin lion\n    penguin 1 monkey\n    ''') == 'IMPOSSIBLE'\nassert solution('''\n    1\n    1\n    ''') == 'FALSE ALARM'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'POSSIBLE'\nassert solution('4 1') == 'IMPOSSIBLE'\nassert solution('5 2') == 'IMPOSSIBLE'\nassert solution('5 4') == 'IMPOSSIBLE'"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 3\nlion 2 monkey\npenguin 1\n''') == 'POSSIBLE'\n\nassert solution('''\n2 4\nmonkey 3 lion\npenguin 1\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n3 4\nmonkey 1 lion\npenguin 1\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n3 4\nmonkey 2 lion\npenguin 2\n''') == 'POSSIBLE'\n\nassert solution('''\n3 5\nmonkey 1 lion\npenguin 1\n''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('1') == 'random sequence'"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4') == '4(1)4(3)3'\nassert solution('10000\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"100\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"2\") == \"random sequence\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n111 222 333\n22 333\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\n13 13\n14 14\n15 15\n16 16\n17 17\n18 18\n19 19\n20 20\n21 21\n22 22\n23 23\n24 24\n25 25\n26 26\n27 27\n28 28\n29 29\n30 30\n31 31\n32 32\n33 33\n34 34\n35 35\n36 36\n37 37\n38 38\n39 39\n40 40\n41 41\n42 42\n43 43\n44 44\n45 45\n46 46\n47 47\n48 48\n49 49\n50 50\n51 51\n52 52\n53 53\n54 54\n55 55\n56 56\n57 57\n58 58\n59 59\n60 60\n61 61\n62 62\n63 63\n64 64\n65 65\n66 66\n67 67\n68 68\n69 69\n70 70\n71 71\n72 72\n73 73\n74 74\n75 75\n76 76\n77 77\n78 78\n79 79\n80 80\n81 81\n82 82\n83 83\n84 84\n85 85\n86 86\n87 87\n88 88\n89 89\n90 90\n91 91\n92 92\n93 93\n94 94\n95 95\n96 96\n97 97\n98 98\n99 99\n100 100\n''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''\n100\n7 5 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''\n100\n7 5 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'random sequence'\nassert solution('2') == 'random sequence'\nassert solution('3') == 'random sequence'\nassert solution('4') == 'random sequence'\nassert solution('5') == 'random sequence'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''\n1\n4 2 5\n4 5 1\n0 1 2 3\n''') == 'random sequence'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"random sequence\"\nassert solution(\"100\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100 4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('200') == 'random sequence'\nassert solution('4') == 'random sequence'\nassert solution('1004') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('1000') == 'triple correlation 4(1)4(3)3 found'\nassert solution('1234567890') == 'random sequence'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1\\n39\\n10\\n') == '40.5'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1\n39\n10\n40\n''') == '40.5'\nassert solution('''\n1\n1.4\n''') == '1.4'\nassert solution('''\n2\n1.1\n2.4\n''') == '3.1'\nassert solution('''\n3\n2.3\n1.4\n1.3\n''') == '2.3'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '40.5'\nassert solution('1 5') == '7.5'\nassert solution('4 3') == '4.5'\nassert solution('1 1') == '2.5'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == '40.5'\nassert solution('4 1') == '44.0'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '3.9'\nassert solution('4 2') == '5.1'\nassert solution('9 5') == '10'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n39\\n10\\n\") == \"40.5\"\nassert solution(\"5 3\\n10 1\\n20 2\\n1 4\\n2 8\\n9 5\\n\") == \"22.4\"\nassert solution(\"5 4\\n10 1\\n20 2\\n1 4\\n2 8\\n9 5\\n\") == \"22.3\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1\\n39\\n10\\n40') == '40.5'\nprint(solution('''5 2\n11\n17\n5\n9\n10'''))\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1\n39\n10\n40\n''') == \"40.5\""
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n10\n10''') == '9.5'\n\nassert solution('''2\n10\n9\n10''') == '10'\n\nassert solution('''3\n10\n8\n10''') == '8.5'\n\nassert solution('''5\n10\n10\n8\n10\n2''') == '8.5'\n\nassert solution('''6\n10\n10\n10\n8\n10\n2''') == '8.5'"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    3 1\n    39\n    10\n    ''') == '40.5'\nprint('Check complete')"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4 1 2 4 1 3') == 'Impossible'\nassert solution('4 6') == '2008'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'Impossible'\nprint(solution(__import__('sys').stdin.read()))"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 6') == 'Impossible'\nassert solution('1 2 3') == '1988'\nassert solution('1 2 3 4') == 'Impossible'\nassert solution('1 2 3 4 5') == '1985'\nassert solution('1 2 3 4 5 6') == '1985'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == 'Impossible'\nassert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == '2008'\n\n'''\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 6') == 'Impossible'\n\nSample Input:\n8 17\n2 3 1987\n2 5 1987\n3 1 1987\n3 4 1987\n2 5 1987\n3 2 1987\n2 4 1987\n3 4 1987\nSample Output:\n2008\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 6') == 'Impossible'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 6') == 'Impossible'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '2008'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"4 6\"\n    \"1 2 1987\"\n    \"2 3 1987\"\n    \"1 3 1987\"\n    \"2 4 1987\"\n    \"1 4 1987\"\n    \"3 4 1987\"\n    ) == \"Impossible\"\nassert solution(\n    \"4 4\"\n    \"1 1 1987\"\n    \"2 2 1987\"\n    \"3 3 1987\"\n    \"4 4 1987\"\n    ) == \"1987\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2 1987\\n3 4 1987\") == \"1985\"\nassert solution(\"10 10\\n1 2 1987\\n3 4 1987\\n4 5 1987\\n5 4 1987\") == \"1985\"\nassert solution(\"5 5\\n1 2 1987\\n1 3 1987\\n3 4 1987\\n3 5 1987\\n4 5 1987\") == \"1985\""
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"impossible\"\nassert solution([int(i) for i in stdin.strip().split()]) == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([4,0,1]) == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n') == '3'\nassert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n') == '4'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([\"4 0 1\", \"N 1 2\", \"C 1 2\", \"N 1 3\", \"C 1 1\"]) == \"3\"\nassert solution([\"4 0 1\", \"N 1 2\", \"C 1 2\", \"N 1 3\", \"C 1 1\", \"C 1 1\", \"C 1 1\"]) == \"3\"\nassert solution([\"5 1 3\", \"C 1 1\", \"C 1 2\", \"N 2 3\", \"N 3 1\"]) == \"impossible\"\nassert solution([\"6 0 2\", \"C 1 2\", \"C 2 1\", \"C 2 2\", \"C 3 1\", \"C 3 2\", \"C 3 3\"]) == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 0 1') == '3'\nassert solution('6 0 2') == 'impossible'\nassert solution('5 0 1') == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == 'impossible'\nassert solution('''\n5 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == '3'\nassert solution('''\n1 0 1\nN 1 2\n''') == 'impossible'\n''')\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1''') == '3'\nassert solution('''5 3 2\nN 1 2\nC 1 2\nN 1 3\nC 1 1\nN 1 4\nN 2 4\nC 2 1''') == 'impossible'\nassert solution('''4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\nN 1 4\nN 2 4\nC 2 1\nN 3 4\nC 3 1''') == '4'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 0 1') == 'impossible'\nassert solution('4 0 1') == '3'\n\n\"\"\"\nfrom collections import defaultdict\nfrom math import inf\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 0 1\\n') == 'impossible'\nassert solution('4 0 1\\n1 2\\n') == '3'\nassert solution('4 0 1\\n1 2\\n1 3\\n') == '3'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 2') == '3'\nassert solution('3 3 2') == '2'\nassert solution('3 2 1') == 'impossible'\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 10\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == 0\nassert solution(\"()\") == 1\nassert solution(\"(())\") == 2\nassert solution(\")\") == 1\nassert solution(\"()()\") == 2\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n)\n((()\n)()\n''') == 10\n\nassert solution('''5\n(()((()\n)()\n''') == 5\n\nassert solution('''2\n()\n''') == 2\n\nassert solution('''4\n(((()\n)())\n''') == 5\n\nassert solution('''5\n((((()\n)())\n(())\n(((()\n)()\n))\n''') == 10\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n)\n))\n('('\n)\n(\n)\n)\n''') == 10\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == 0\nassert solution(\"()\") == 1\nassert solution(\"()()\") == 4\nassert solution(\"()((()()(((()((()())()())))))()(()))()(()()()())()()()((((()()(()()())((()()()(()))))()()()()()()()(()()))()()())()()()()()())()()()()()()()())()()()()()()()())()()()()()()()())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()())\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n3\n())\n((()\n)()\n''') == '10'\nassert solution(\n'''\n5\n(())\n((()\n)())\n(()(\n))\n''') == '5'\nassert solution(\n'''\n6\n(()(\n(()(\n))((\n))\n(()(\n))()\n''') == '13'\nassert solution(\n'''\n6\n(())\n(()(\n))\n()\n(()(\n))\n''') == '12'\nassert solution(\n'''\n10\n()()()\n(()(\n())(\n))\n()\n((()\n))\n''') == '18'\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n()\n((()\n)()\n''') == 10\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n(\n)\n''') == 1\n\nassert solution('''\n1\n()\n''') == 0\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '5'\nassert solution('7') == '7'\n\"\"\""
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"()\") == \"1\"\nassert solution(\"(())\") == \"2\"\nassert solution(\")())\") == \"4\"\nassert solution(\"((()\") == \"1\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n') == '85293'\nassert solution('6\\n3 h\\n6 a\\n7 a\\n12 h\\n20 h\\n5 a\\n4 h\\n9 a\\n18 h\\n16 a\\n15 h\\n13 h\\n11 h\\n11 a\\n10 a\\n7 h\\n4 a\\n8 a\\n2 a\\n2 h\\n6 a\\n14 h\\n9 a\\n3 a\\n17 a\\n15 a\\n7 h\\n3 a\\n11 h\\n8 a\\n9 a\\n5 a\\n13 a\\n16 h\\n4 a\\n6 a\\n9 a\\n6 a\\n11 a\\n7 h\\n12 a\\n12 h\\n8 a\\n10 a\\n16 a\\n16 a\\n7 a\\n11 h\\n9 a\\n13 a\\n15 a\\n8 h\\n7 a\\n2 a\\n8 a\\n15 h\\n11 a\\n4 a\\n18 h\\n14 a\\n7 h\\n12 a\\n11 a\\n11 a\\n12 h\\n6 a\\n16 a\\n9 a\\n11 a\\n5 a\\n14 a\\n13 a\\n7 a\\n12 a\\n16 h\\n9 a\\n9 a\\n11 a\\n13 a\\n12 a\\n5 a\\n14 a\\n16 a\\n16 a\\n8 a\\n12 a\\n15 a\\n9 a\\n10 a\\n11 a\\n15 a\\n12 h\\n11 a\\n4 a\\n8 a\\n7 a\\n14 a\\n13 a\\n6 a\\n3 a\\n15 a\\n14 a\\n10 a\\n16 a\\n11 a\\n7 h\\n7 a\\n8 a\\n6 a\\n5 a\\n3 a\\n4 a\\n8 a\\n15 h\\n10 a\\n11 a\\n9 a\\n8 h\\n5 a\\n13 a\\n4 a\\n13 a\\n4 h\\n10 a\\n9 a\\n12 a\\n11 h\\n13 h\\n10 a\\n11 a\\n13 a\\n15 a\\n7 h\\n11 h\\n6 a\\n14 h\\n12 a\\n8 a\\n14 a\\n7 a\\n10 a\\n10 a\\n12 a\\n14 a\\n9 a\\n6 a\\n3 a\\n8 a\\n2 a\\n12 a\\n9 a\\n8 a\\n9 a\\n12 h\\n7 a\\n10 a\\n10 a\\n7 h\\n14 a\\n10 a\\n11 a\\n13 a\\n15 a\\n11 h\\n13 a\\n4 a\\n7 a\\n6 a\\n12 a\\n13 a\\n7 a\\n8 a\\n2 a\\n9 a\\n7 a\\n8 a\\n6 a\\n15 a\\n11 a\\n12 a\\n15 a\\n7 a\\n10 a\\n7 h\\n8 a\\n11 a\\n14 a\\n9 a\\n9 a\\n10 a\\n3 a\\n13 a\\n14 a\\n13 a\\n10 a\\n7 a\\n6 a\\n8 a\\n5 a\\n6 a\\n14 a\\n13 a"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n377 a\n455 h\n180 a\n\"\"\") == \"85293\"\nassert solution(\"\"\"\n7\n377 a\n455 h\n180 a\n213 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\") == \"163469\"\nassert solution(\"\"\"\n6\n377 a\n455 h\n180 a\n213 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\") == \"141278\"\nassert solution(\"\"\"\n7\n377 a\n455 h\n180 a\n213 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\") == \"13401\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9') == '85293'\nassert solution('9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\nassert solution('10\\n11 11\\n22 22\\n33 33\\n44 44\\n55 55\\n66 66\\n77 77\\n88 88\\n99 99\\n
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n377\\na\\n455\\nh\\n180\\na\\n211\\na\\n134\\na\\n46\\nh\\n111\\nh\\n213\\nh\\n17\\na\\n15\\n1\\n2\\n1\\n4\\n1\\n6\\n1\\n2\\n3\\n2\\n4\\n2\\n5\\n5\\n5\\n6\\n4\\n7\\n4\\n7\\n8\\n5\\n7\\n7\\n8\\n6\\n7\\n8\\n7\\n8\\n9\\n7\\n9\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n7\\n8\\n9\\n7\\n9\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\\n377\\n455\\n180\\n211\\n134\\n46\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n\") == \"85293\"\nassert solution(\"1\\n377\\n455\\n180\\n211\\n134\\n46\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n\") == \"85293\"\nassert solution(\"9\\n377\\n455\\n180\\n211\\n134\\n46\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n\") == \"85293\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '85293'\nassert solution('4') == '85292'\nassert solution('3') == '85291'\nassert solution('2') == '85290'\nassert solution('1') == '85289'\n\n\"\"\"\nimport itertools\nimport re\n\nimport pytest\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\nassert solution(\"6\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"0\"\nassert solution(\"9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\nassert solution(\"6\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"0\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 4\\n3 4\\n2 3\") == \"85293\"\nassert solution(\"4\\n0 4\\n3 4\\n2 3\\n2 3\") == \"85293\"\nassert solution(\"5\\n0 4\\n3 4\\n2 3\\n2 3\") == \"85293\"\nassert solution(\"6\\n0 4\\n3 4\\n2 3\\n2 3\\n2 3\") == \"85293\"\nassert solution(\"7\\n0 4\\n3 4\\n2 3\\n2 3\\n2 3\") == \"85293\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n1 3\\n1 4\\n2 4') == '5'\nassert solution('1\\n2\\n1 3\\n2 4\\n1 4\\n2 5') == '5'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 6') == '3'\nassert solution('10 8') == '1'\nassert solution('10 20') == '2'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5') == '5'\nassert solution('1 2') == '1'\nassert solution('1 3') == '1'\nassert solution('2 3') == '1'\nassert solution('1 4') == '2'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '4 5\\n'\n    '1 2\\n'\n    '1 3\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '2 4\\n'\n) == '5'\nassert solution(\n    '1 2\\n'\n    '1 3\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '2 4\\n'\n) == '0'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n') == '5'\nassert solution('2 10\\n1 2\\n3 4\\n5 6\\n7 8\\n2 1\\n3 2\\n4 5\\n5 2\\n1 3\\n6 7\\n4 6\\n7 4\\n5 5\\n5 3\\n') == '5'\nassert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n') == '2'\nassert solution('3 3\\n1 2\\n2 2\\n3 3\\n') == '1'\nassert solution('10 10\\n1 2\\n2 3\\n3 5\\n5 1\\n1 4\\n5 4\\n1 2\\n4 5\\n5 2\\n') == '2'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2\\n1 3\\n2 3\") == \"5\"\nassert solution(\"5 7\\n1 2\\n3 4\\n4 5\\n1 4\\n3 5\\n5 6\\n4 6\\n1 7\\n4 7\") == \"5\"\nassert solution(\"6 7\\n1 2\\n3 4\\n4 5\\n5 6\\n6 7\\n1 4\\n5 6\\n1 7\\n2 7\") == \"5\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n\"\"\") == \"5100\"\nassert solution(\"\"\"\n4\n5 butterfly 1 humongous coffee mug\n2 budgie 3 bulky bee queen\n3 dog 1 goofy beast\n2 bat 1 friendly wild boar\n4 duck 5 purple-backed quail\n\"\"\") == \"33200\"\nassert solution(\"\"\"\n2\n5 eagle 1 small brown owl\n3 blackbird 5 bright white birds\n3 blackbird 1 cirno cresson\n3 owl 3 hairy green cresson\n3 owl 2 brown cresson\n3 owl 1 violet cresson\n2 cresson 1 vibrant yellow cresson\n\"\"\") == \"4000\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n''') == '5100'"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"3 1 aaabaaajss\") == \"30000\"\nassert solution(\"1 1 cat\") == \"1000000\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n''') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 caterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n7 mouse 1 electromouse 5 rat\\n7\\n1500 aaabaaajss\\n2500 pigeon\\n3000 butterfly\") == \"5100\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '5100'\nassert solution('3\\n3 caterpillar 3 pupa 7 butterfly') == '5100'\nassert solution('3\\n3 dove 3 pigeon 7 aaabaaajss\\n3 mouse 1 electromouse 5 rat') == '5100'\nassert solution('7\\n0 pika 1 aaaa aaabaaajss\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 aaaabaaa 1 pika 1 pika 1 aaaa 1 pika 1 aaaa 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 aaaabaaa 1 pika 1 pika 1 aaaa 1 pika 1 aaaa 1 pika 1 pika 1\\n7 mouse 1 aaaabaaa 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1500\"\nassert solution(\"4\") == \"4630\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly''') == '5100'\nassert solution('''2\n1 cat\n2 dog\n3 cow\n5 turtle\n10 elephant\n20 horse\n30 rabbit\n40 bat''') == '5100'\nassert solution('''2\n1 cat\n2 dog\n3 cow\n5 turtle\n10 elephant\n20 horse\n30 rabbit\n40 bat''') == '5500'\nassert solution('''2\n1 cat\n2 dog\n3 cow\n5 turtle\n10 elephant\n20 horse\n30 rabbit\n40 bat''') == '5500'\nassert solution('''2\n1 cat\n2 dog\n3 cow\n5 turtle\n10 elephant\n20 horse\n30 rabbit\n40 bat''') == '8100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '15000'\nassert solution('3\\n3 caterpillar 3 pupa 7 butterfly') == '15000'\nassert solution('3\\n3 caterpillar 3 pupa 7 butterfly\\n3 owl 3 owl') == '17500'\nassert solution('3\\n3 caterpillar 3 pupa 7 butterfly\\n3 mouse 1 electromouse 5 rat') == '20000'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == \"15500\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3') == '-1'\nassert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5') == '6\\n1\\n2\\n3\\n1\\n4\\n5'"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '6'\nassert solution('10') == '-1'\nassert solution('9') == '-1'\nassert solution('100000') == '-1'\nassert solution('1000') == '-1'"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\"\n) == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\nassert solution(\n    \"3\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\"\n) == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6':\n    print('Test passed')\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '6'\nassert solution('1') == '-1'\nassert solution('8') == '1'\nassert solution('1') == '2'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nassert solution('10\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 2 1 2 1\\n4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '10'\nassert solution('2 2\\n1 2 1 2 1\\n4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '9'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1 2 1') == '10'\nassert solution('4') == '0'\nassert solution('4') == '0'"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1 2 1') == '10'\nassert solution('4') == '10'\nassert solution('1 2 O 3') == '8'\nassert solution('1 2 R 5') == '10'\nassert solution('1 2 R 6') == '8'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2 O 3\n2 1 O 3\n1 2 R 5\nSample Input 2:\n3 2\n1 2 O 3\n2 1 O 3\n1 2 R 5\nSample Output 2:\n10\n''') == '10'\n\nassert solution('''1\n1\nSample Input 3:\n1\n1\nSample Output 3:\n0\n''') == '0'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == '10'\nassert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n1 2 R 5\n''') == '20'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == \"10\"\nassert solution('''\n5 3\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == \"10\"\nassert solution('''\n2 5\n2 1 O 3\n2 1 O 3\n1 2 R 5\n''') == \"3\"\nassert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == \"10\"\nassert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == \"9\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == '10'\n\n'''\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5\\n1 2 1 2 1\\n4') == '10'\nassert solution('2 4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '6'"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6') == '10'\nassert solution('10 10') == '10'\nassert solution('10 15') == '20'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n0 1\\n1 2\\n2 3') == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0 1\\n1 2\\n2 3') == '1'\nassert solution('10\\n5 6\\n10 7\\n6 9\\n10 8\\n5 2\\n2 7\\n1 9\\n1 8\\n7 9\\n2 6\\n4 3\\n0 1\\n1 2\\n2 3') == '3'\nassert solution('6\\n8 5\\n4 7\\n5 3\\n6 4\\n2 5\\n6 7\\n1 3\\n2 4\\n1 6\\n3 7\\n1 8\\n2 5\\n0 6\\n3 4\\n0 1\\n1 2\\n2 3') == '7'\nassert solution('6\\n7 5\\n4 3\\n5 2\\n6 4\\n2 5\\n6 7\\n1 3\\n2 4\\n1 6\\n3 7\\n1 8\\n2 5\\n0 6\\n3 4\\n0 1\\n1 2\\n2 3') == '6'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5\\n0 1\\n1 2\\n2 3\\n') == '1'\nassert solution('3 4\\n0 1\\n0 2\\n1 2\\n') == '2'\nassert solution('4 5\\n0 1\\n0 2\\n0 3\\n1 2\\n') == '3'\nassert solution('1 2\\n1 2\\n') == '1'\nassert solution('2 3\\n3 2\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 3') == '2'\nassert solution('4 2') == '1'\n\nhttps://leetcode.com/problems/topological-sorting-of-a-directed-graph/\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '1 2 3'\nprint(solution('5 5'))"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 3\n0 1\n1 2\n2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5\n0 1\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '1'\nassert solution('4 5') == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    4 3\n    0 1\n    1 2\n    2 3\n    ''') == '1'\nassert solution('''\n    5 7\n    0 1\n    0 2\n    0 3\n    1 4\n    2 5\n    2 6\n    ''') == '5'\n''')\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == \"0.5\\n\"\nassert solution(\"3\\n3\\n1\") == \"0.5\\n\"\nassert solution(\"5\\n6\\n5\\n4\\n3\\n2\\n1\") == \"0.8\\n\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"0.5\"\nassert solution(\"20\") == \"0.9994545454545\"\nassert solution(\"50\") == \"0.9936505436504\"\nassert solution(\"100\") == \"0.9989010989011\"\nassert solution(\"150\") == \"0.99999999999996\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0.962962962963'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0.5'\nassert solution('4') == '0.95'\nassert solution('100') == '0.95'\n\"\"\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '0.962962962963'\n\"\"\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '0.962962962963'\nassert solution('5') == '0.50208120219'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n\") == \"0.962962962963\"\nassert solution(\"2\\n\") == \"0.9044296860221\"\nassert solution(\"3\\n\") == \"0.8660254037844\"\nassert solution(\"4\\n\") == \"0.8353069137755\"\nassert solution(\"5\\n\") == \"0.7663807929689\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n4\\n4\\n4') == '0.962962962963'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n2\n3\n4''') == '0.962962962963'\nassert solution('''5\n10\n20\n10\n20\n2\n1''') == '0.8823529411765'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '0.962962962963'\nassert solution('100') == '0.946210794539'\nassert solution('1000') == '0.945982971522'\nassert solution('10000') == '0.945952410973'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0 0'\nassert solution('3') == '0 40000000 0'\nassert solution('5') == '0 0 40000000 0 40000000'\nassert solution('10') == '0 0 40000000 0 40000000 0 0 40000000 0 0 40000000 0 0 40000000 0 0 40000000 0 0'\nassert solution
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2 0\"\nassert solution(\"3\") == \"0 2 0\"\nassert solution(\"4\") == \"0 40000000 0\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2\n''') == '0 0\\n40000000 0\\n0 40000000\\n'''\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0 0\\n' * 3\nassert solution('100') == '0 40000000\\n0 40000000\\n0 40000000\\n' * 100\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0 0\\n40000000 0\\n0 40000000'"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0 0\\n40000000 0\\n0 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0 0'\nassert solution('6') == '40000000 0'\nassert solution('10') == '0 40000000'\nassert solution('15') == '40000000 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\\n\"\nassert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\\n\"\nassert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\\n\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n0 0\n40000000 0\n0 40000000''') == '0 0\\n40000000 0\\n0 40000000'\n\nYour task is to complete the function solution() which takes stdin as input and returns a string.\n\nNote that the function is expected to return a single line of output.\n\nIf your code is too slow, don\u2019t worry about getting a time limit exceeded error, it\u2019s fine to fail a test case, but your program should still pass.\n\nAlso, keep in mind that your program will be graded by the online submission server and its input and output will be different than the one provided.\n\nNote that the judging program will run code in main before your code runs, so don\u2019t worry about anything being printed to the judge\u2019s output.\n\n---Input Format---\nThe first and only line of each test case contains an integer $N \\in \\{1 \\leq N \\leq 400000 \\}$.\n\n---Constraints---\nNo more than 400,000 calls will be made to your code.\n\n---Output Format---\nFor each test case, your code must print a single line containing two integers $0 \\le x, y \\le 4 \\cdot 10^7$, denoting the coordinates of a vertex making up your main office. The coordinates can be given in any order and must adhere to your main office\u2019s restrictions as described in the problem statement.\n\nInput:\n3\n0 0\n40000000 0\n0 40000000\nOutput:\n0 0\n40000000 0\n0 40000000\n\"\"\"\nfrom itertools import permutations\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\") == \"0 0\\n40000000 0\\n0 40000000\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 4 5 6') == \"impossible\", \"Should be impossible\"\nassert solution('4 5 6 5 2') == \"impossible\", \"Should be impossible\"\nassert solution('1 3 5 4 2') == \"1\", \"Should be 1\"\nassert solution('2 2 2 2 2') == \"2\", \"Should be 2\"\nassert solution('3 5 5 5 5') == \"impossible\", \"Should be impossible\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('5 5 5 2') == '2'\nassert solution('1 1 1 1') == 'impossible'"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('3 6 8 5') == '3*6-8*5'\nassert solution('5 2 4 6') == '5*2*4-6*2'\nassert solution('2 5 8 9') == '2*5+8*9'\nassert solution('4 4 4 4') == '4*4'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"1 2 3\") == \"Impossible\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('2 2 2 2') == 'impossible'\nassert solution('1 1 2 3') == '1'\nassert solution('3 3 5 3') == '2'\nassert solution('5 5 5 5') == 'impossible'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"8 5 6 2\") == \"3\"\nassert solution(\"20 9 8 2\") == \"4\"\nassert solution(\"1 2 3 4\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5 5 2') == \"1\"\nassert solution('4 5 6 2') == \"3\"\nassert solution('5 5 5 4') == \"3\"\nassert solution('2 6 5 4') == \"impossible\"\nassert solution('2 5 5 2') == \"2\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"1 2 3 4\") == \"2\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([\"3 5 5 2\"]) == \"1\"\nassert solution([\"10 3 5 2\"]) == \"impossible\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"10 3 2 4\") == \"0\"\nassert solution(\"3 3 3 3\") == \"3\"\nassert solution(\"12 4 5 4\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([20, 3, 5, 5]) == '2'\nassert solution([20, 3, 5, 5, 0, 0, 0]) == '2'\nassert solution([20, 3, 5, 5, 10, 0, 0]) == '2'\nassert solution([20, 3, 5, 5, 20, 0, 0]) == '0'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 5 5') == '2'\nassert solution('10 3 5 5') == '1'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3 5 5') == '2'\nassert solution('9 10 2 3') == '1'\nassert solution('10 5 4 5') == '0'"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('20 3 5 5') == '2'\nassert solution('50 50 100 50') == '1'\nassert solution('50 50 50 50') == '0'\nassert solution('50 50 50 50 1') == '1'"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''20 3 5 5''') == '2'''\nassert solution('''20 2 5 5''') == '4'''\nassert solution('''20 3 -5 -5''') == '0'''\nassert solution('''20 3 -10 -10''') == '0'''\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('20 3 5 5') == '2'\nassert solution('30 0 0 0') == '-1'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('20 3 5 5\\n0 0 0\\n30 0 0\\n0 0 0') == '2'\nassert solution('100 4 6 4\\n0 0 0\\n50 0 0\\n0 0 0') == '-2'\nassert solution('5 1 2 5\\n-10 2 2\\n-20 2 2\\n-30 2 2') == '-4'\nassert solution('10 8 4 8\\n-10 2 2\\n-20 2 2\\n-30 2 2') == '5'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 2 6\n-1 -2 -3 -4\n-1\n2 3\n1 4\n-1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 2 1\n0\n1\n1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 3 3\n5\n4\n-1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0\n''') == '2'\nprint(solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0\n'''))\nprint(solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0\n'''))\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('20 3 5 5') == '2'\nassert solution('1 20 5 5') == '0'\nassert solution('0 0 0') == '0'\nassert solution('0 -10 0') == '0'\nassert solution('30 0 0') == '0'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"12 34 56 78 90 12 34 56 78 90 12 34 56 78 90\"\n    ) == \"12 14\"\n\"\"\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('13') == '12 14'"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n8') == '7 11'"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '12'\nassert solution('14') == '12'\nassert solution('1437') == '1441'\nassert solution('961') == '962'\nassert solution('962') == '962'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('13') == '12 14'\nassert solution('23') == '13 14'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('123') == '12'\nassert solution('12') == '14'\nassert solution('1234') == '14'\nassert solution('1234321') == '14'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('11') == '11'\nassert solution('1000') == '1000'\nassert solution('1234567890') == '1234'\nassert solution('54321') == '543'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6\n3\n2\n2\n9\n13''') == '6 12'\nassert solution('''9\n1\n4\n5\n8''') == '9 8 7 6 5 4'\nassert solution('''2\n2\n3\n5\n6\n7\n8''') == '2 4'\nassert solution('''20\n1\n7\n8\n2\n3\n4\n6\n5''') == '20 14 6 18 1 19 7 8 2 3 4'\nassert solution('''1\n1\n3\n5\n7\n9''') == '1 2 3 6 7 9'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('11') == '11'\nassert solution('21') == '21'\nassert solution('1211') == '1214'\nassert solution('73738') == '73741'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('13') == '12 14'\nassert solution('1') == '2 4'\nassert solution('123') == '2 4 5'\nassert solution('125') == '2 5'\nassert solution('12') == '2'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '0'\nassert solution('1 2 3 4 5') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\nassert solution([0, 0, 0]) == '1'\nassert solution([1, 0, 0]) == '0'\nassert solution([1, 1, 0]) == '0'\nassert solution([3, 0, 0]) == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('10\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n0 1\n1 1\n0 0\n''') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('100\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '6'\nassert solution('2\\n1 1\\n0 0\\n0 0\\n0 0\\n0 0\\n') == '2'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\n1 0 1\n2 0 1\n3 0 1\n3 0 0\n3 0 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n0 0 0 0\n1 0 1 0\n2 0 1 0\n3 0 0 1\n3 0 0 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '0'\nassert solution('''\n5\n1 1 1\n1 1 1\n3 1 1\n3 1 1\n3 1 1\n''') == '1'\nassert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '2'\nassert solution('''\n5\n0 0 0\n0 0 1\n1 0 1\n1 0 0\n1 0 1\n''') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\n0 0 0\n1 0 1\n3 0 1\n\"\"\"\n    ) == \"1\"\nassert solution(\n\"\"\"\n3\n0 0 0\n1 0 1\n3 0 1\n\"\"\"\n    ) == \"0\"\nassert solution(\n\"\"\"\n8\n0 0 0\n1 0 1\n2 0 1\n3 0 1\n4 0 1\n5 0 1\n6 0 1\n7 0 1\n\"\"\"\n    ) == \"7\"\nassert solution(\n\"\"\"\n4\n0 0 0\n1 0 1\n2 0 1\n3 0 1\n4 0 1\n\"\"\"\n    ) == \"4\"\nassert solution(\n\"\"\"\n4\n0 0 0\n1 0 1\n2 0 1\n3 0 1\n4 0 1\n\"\"\"\n    ) == \"0\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '1'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n1 0 1\\n2 0 1\\n3 0 0\\n3 0 1\\n4 0 0\\n4 0 1\\n4 0 0\\n') == '1'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n1 0 1\\n2 0 1\\n3 0 0\\n3 0 1\\n4 0 0\\n4 0 1\\n4 0 0\\n') == '0'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n1 0 1\\n2 0 1\\n3 0 0\\n3 0 1\\n4 0 0\\n4 0 1\\n4 0 0\\n') == '0'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3\"\n) == \"\\n1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1'\nassert solution('4 6') == '1 1\\n1 3\\n1 2\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1 1\"\nassert solution(\"2 4\") == \"1 2\"\nassert solution(\"3 4\") == \"2 1\"\nassert solution(\"3 3\") == \"2 2\"\nassert solution(\"4 4\") == \"1 1\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\\n'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n1 1\n2 2\n1 3\n2 1\n1 2\n2 3''') == '1 2\\n2 1\\n1 2\\n2 3\\n1 3\\n2 1\\n1 2'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1 1\"\nassert solution(\"2 2\") == \"1 1\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"2 2\") == \"1 2\"\nassert solution(\"3 3\") == \"1 1 1\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n\") == \"1 1\"\nassert solution(\"2 3\\n\") == \"2 2\"\nassert solution(\"1 3\\n\") == \"1 2\"\nassert solution(\"2 1\\n\") == \"2 1\"\nassert solution(\"1 2\\n\") == \"1 2\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\nassert solution('6 6') == '1 1 2 2 3 3\\n1 3 2 1 4 5\\n4 5 2 1 3 6\\n2 5 1 4 3 6\\n3 5 2 4 1 6\\n2 6 1 5 3 4\\n6 5 1 4 2 3\\n'\nassert solution('6 6') == '1 1 2 2 3 3\\n1 3 2 1 4 5\\n4 5 2 1 3 6\\n2 5 1 4 3 6\\n3 5 2 4 1 6\\n2 6 1 5 3 4\\n6 5 1 4 2 3\\n'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 1') == '0.66666667'\nassert solution('6 4') == '0.44444444'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == \"3.33333333\"\nassert solution('''\n3 10\n0 10 1\n0 10 1\n1 0 1\n''') == \"3.33333333\"\nassert solution('''\n3 10\n0 10 1\n1 0 1\n1 0 1\n''') == \"3.33333333\"\nassert solution('''\n3 10\n0 10 1\n1 0 1\n1 0 1\n''') == \"3.33333333\"\nassert solution('''\n3 10\n0 10 1\n1 0 1\n0 10 1\n''') == \"3.33333333\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\n\nassert solution('''\n3 5\n0 0.5 1.5\n0 0.5 1.5\n0 0.5 1.5\n''') == '3.33333333'\n\nassert solution('''\n3 10\n0 0.1 1.5\n0 0.1 1.5\n0 0.1 1.5\n''') == '0.55555556'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 10\") == \"0.66666667\"\nassert solution(\"3 10\") == \"0.33333333\"\nassert solution(\"3 10\") == \"1.4000000000000002\"\nassert solution(\"3 10\") == \"0.25000000010000002\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 10\\n0 10 1\\n0 10 1\\n0 10 1\\n') == '3.33333333'\nassert solution('3 10\\n0 10 1\\n0 10 1\\n0 10 1\\n') == '3.33333333'\nassert solution('2 2\\n0 0\\n0 0\\n') == '0.5'\nassert solution('10 10\\n1 1\\n0 0\\n0 0\\n') == '0.25'\nassert solution('2 2\\n0 0\\n0 0\\n') == '1.0'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 10 1\") == \"2.6666667\"\nassert solution(\"2 10 1\") == \"2.6666667\"\nassert solution(\"3 10 1\") == \"3.3333333\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 10\n0 10 1\n0 10 1\n0 10 1\n\"\"\") == \"3.33333333\"\nassert solution(\"\"\"\n2 10\n0 10 1\n0 10 1\n\"\"\") == \"3.33333333\"\nassert solution(\"\"\"\n3 10\n0 10 1\n0 10 1\n0 10 1\n\"\"\") == \"3.33333333\"\nassert solution(\"\"\"\n2 10\n0 10 1\n0 10 1\n\"\"\") == \"2.666666667\"\n\n\"\"\""
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 5\n3 10 1\n3 10 1''') == '4.5'\n\nassert solution('''2 3\n1 10 1\n1 10 1''') == '1.3333333333333333'\n\nassert solution('''3 4\n3 5 6\n5 7 8\n7 9 10''') == '5.6'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\nassert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3 3 2') == '1'\nassert solution('2\\n1 3 5 2') == '2'\nassert solution('3\\n2 1 1 2') == '2'"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''3\n3 3 2\n''') == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n1\n3 1 2\n''') == '1'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n1\n3 1 2\n''') == '0'\nassert solution('''\n10\n3 2 1 1 1 2\n1 2 1 1 1 2\n''') == '2'\nassert solution('''\n10\n1 1 1 1 1 1 2\n1 1 1 1 1 1 2\n''') == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 3 2') == '1'\nassert solution('3\\n5 5 4') == '2'\nassert solution('5\\n8 4 8 8 4') == '3'\nassert solution('5\\n5 5 5 5') == '3'\nassert solution('5\\n9 9 9 9 9') == '4'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2 3 1\\n\") == \"1\"\nassert solution(\"10\\n20 30 40 50 60 70 80 90 100\\n\") == \"2\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n3 3 2') == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\n\"\"\""
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\n\"\"\""
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n3 3 2\nSample Output:\n1\n''') == '1'\n\nassert solution('''\n3\n2 2 4\nSample Output:\n0\n''') == '0'\n\nassert solution('''\n5\n1 1 1 1 1\nSample Output:\n1\n''') == '1'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\naba\nbbb\n''') == '2'"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'\nassert solution(\"abba\") == '2'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\naba\nbaba\ncaba\n''') == '3'\nassert solution('''6\naabaaa\nbbaa\nababab\naaaa\nbbbba\nabaaaa\n''') == '2'\nassert solution('''6\naba\nbab\naba\naba\naaa\nabaaaa\n''') == '2'\nassert solution('''6\naba\nababab\naba\nababab\naaa\nabaaaa\n''') == '3'\nassert solution('''6\naba\nabb\naba\naba\naaa\nabaaaa\n''') == '2'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == '2'\nassert solution(\"2 2\") == '3'\nassert solution(\"3 1\") == '3'\nassert solution(\"4 1\") == '4'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\nabba\n''') == '2'\n\nassert solution('''\n4 5\naabab\nabcd\nabab\naabc\n''') == '3'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"a\") == \"0\"\nassert solution(\"aab\") == \"1\"\nassert solution(\"aba\") == \"2\"\nassert solution(\"abb\") == \"1\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\naba\\n2\\naba\\n3\\naba\\n4\\naba\\n') == '3'\nassert solution('1\\nb\\n2\\na\\n3\\nc\\n') == '3'\nassert solution('1\\na\\n2\\nb\\n3\\nc\\n') == '2'\nassert solution('1\\na\\n2\\na\\n3\\nc\\n') == '1'\nassert solution('1\\nc\\n2\\na\\n3\\nb\\n') == '1'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\nSample Input:\n5 3\nbaa\nSample Output:\n2"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()[:-1]\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n2 3\n1 2\n3 4\n''') == '3'\nassert solution('''\n5 2\n1 2\n3 4\n''') == '3'\nassert solution('''\n5 2\n3 4\n2 4\n1 5\n3 4\n''') == '4'\nassert solution('''\n10 2\n2 3\n3 4\n6 8\n3 2\n8 7\n1 2\n9 4\n4 5\n5 2\n''') == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2\n2 3\n2 4\n''') == '3'\nassert solution('''5 2\n1 3\n2 4\n2 4\n3 5\n''') == '5'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2\") == \"2\"\nassert solution(\"2 2\\n3 3\") == \"1\"\nassert solution(\"10 10\\n10 1\\n2 2\\n3 3\\n1 1\\n2 3\\n1 1\\n3 4\\n2 5\\n3 6\\n3 6\\n1 5\\n4 6\\n3 4\") == \"4\"\nassert solution(\"10 10\\n10 1\\n2 2\\n3 3\\n1 1\\n2 3\\n1 1\\n3 4\\n2 5\\n3 6\\n3 6\\n1 5\\n4 6\\n3 4\") == \"1\"\nassert solution(\"1 1\\n3 3\\n2 4\\n5 5\\n3 6\\n1 2\\n3 3\\n5 5\\n4 5\") == \"1\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n2 4') == '3'\nassert solution('4 4\\n1 2\\n2 3\\n2 4\\n2 4') == '3'\nassert solution('5 5\\n1 2\\n2 3\\n2 4\\n3 4\\n3 4') == '4'\nassert solution('5 5\\n1 2\\n2 3\\n2 4\\n3 4\\n3 4') == '4'\nassert solution('6 6\\n1 2\\n2 3\\n2 4\\n3 4\\n3 5\\n3 4\\n3 5\\n3 5') == '5'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n2 3\\n2 4') == '3'\nassert solution('4 3\\n1 2\\n2 3\\n2 4') == '2'\nassert solution('4 3\\n2 3\\n1 2\\n2 3\\n2 4') == '4'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '3'\nassert solution('5 1') == '4'\nassert solution('3 3') == '4'\nassert solution('10 3') == '6'\n\n---Input is read from STDIN (standard input)---\n-----Output is printed to STDOUT (standard output)-----\n\"\"\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''\n5 6\n1 2\n2 3\n2 4\n3 5\n3 4\n4 5\n4 6\n''') == '4'\nassert solution('''\n100 100\n1 2\n2 3\n1 3\n4 5\n3 6\n''') == '2'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1\\n2 3\\n1 2') == '3'\nassert solution('5 1\\n2 3\\n3 4\\n4 5\\n1 2') == '4'\nassert solution('1 1\\n3 1\\n4 3\\n5 2\\n5 3\\n1 2') == '3'\nassert solution('1 1\\n3 1\\n4 3\\n5 3\\n1 2') == '1'"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''\n4 3\n1 2\n2 3\n1 4\n''') == '4'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('\\n'.join([\"3 2\", \"1 0\", \"0 1\", \"1000 1\", \"1 3\", \"2 3\", ])) == '1'\nassert solution('\\n'.join([\"3 2\", \"1 0\", \"0 1\", \"1 3\", \"2 3\", ])) == '0'\nassert solution('\\n'.join([\"4 3\", \"2 2\", \"0 0\", \"1 1\", \"3 3\", ])) == '1'\nassert solution('\\n'.join([\"5 4\", \"0 0\", \"1 1\", \"2 2\", \"3 3\", ])) == '0'"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3') == '1'\nassert solution('3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3') == '1'\nassert solution('10\\n') == '0'\nassert solution('1\\n1\\n10\\n') == '0'\nassert solution('10\\n') == '0'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '1'\nassert solution('''\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '0'\nassert solution('''\n3 2\n0 1\n1 2\n4 5\n1 3\n2 3\n''') == '1'\nassert solution('''\n3 2\n1 0\n0 1\n4 5\n1 3\n2 3\n''') == '0'\nassert solution('''\n3 2\n1 0\n0 1\n4 5\n1 3\n2 3\n''') == '0'\n''')"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 2\n1 0\n0 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 2\n1 0\n1 1\n3 3\n3 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5\n-10 -5\n-5 -10\n-10 10\n-5 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2\n0 2\n0 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n0\n1\n2\n3\n4\n5\n6\n\"\"\") == \"\"\"\n1\n\"\"\".strip()\n\nassert solution(\"\"\"\n1\n2\n3\n4\n5\n6\n7\n\"\"\") == \"\"\"\n2\n\"\"\".strip()\n\nassert solution(\"\"\"\n1\n10\n7\n2\n3\n4\n5\n6\n\"\"\") == \"\"\"\n2\n\"\"\".strip()\n\nassert solution(\"\"\"\n1\n6\n7\n3\n4\n5\n2\n\"\"\") == \"\"\"\n1\n\"\"\".strip()\n\nassert solution(\"\"\"\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n\"\"\") == \"\"\"\n10\n\"\"\".strip()\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n3 4\n2 4\n1 3\n10 2\n3 2\n3 1\n10 1\n2 3\n9 1\n9 0\n''') == '0'\n\nassert solution('''\n10\n3 4\n2 4\n1 3\n10 2\n3 2\n3 1\n10 1\n2 3\n9 1\n9 0\n''') == '1'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 2') == '0'\nassert solution('1 1') == '1'\nassert solution('3 2') == '0'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"1\"\n\nassert solution(\n    \"\"\"\n3 2\n1 0\n0 1\n1 1\n0 2\n1 3\n1 4\n2 4\nSample Output:\n0\n0\n\"\"\"\n    ) == \"0\"\n\nassert solution(\n    \"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"1\"\n\nassert solution(\n    \"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n0 2\n1 4\n0 5\n1 6\n2 7\n\"\"\") == \"1\"\n\nassert solution(\n    \"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n0 2\n1 4\n0 5\n1 6\n2 7\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\\n') == '1'\nassert solution('3 3\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\\n') == '1'\nassert solution('6 8\\n5 3\\n0 0\\n2 1\\n0 3\\n4 4\\n5 2\\n') == '0'\nassert solution('5 5\\n0 0\\n4 4\\n0 1\\n1 4\\n0 3\\n') == '2'\nassert solution('8 8\\n1 1\\n2 2\\n5 5\\n6 6\\n7 7\\n') == '1'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '7'\nassert solution('1') == '1'\n\"\"\"\n\nimport itertools\nimport math\nimport re\n\nn = int(input())\n\nmatrix = []\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\n\nrow_lst = []\ncol_lst = []\n\nfor i in range(n):\n    row_lst += matrix[i]\n    col_lst += list(zip(*matrix))[i]\n\nrow_lst = list(set(row_lst))\ncol_lst = list(set(col_lst))\n\nmatrix = [[matrix[i][j] for j in col_lst] for i in row_lst]\nrow_lst = list(itertools.chain.from_iterable(matrix))\ncol_lst = list(itertools.chain.from_iterable(zip(*matrix)))\n\nmatrix = [[matrix[i][j] for j in range(len(matrix[i])) if matrix[i][j]!= 0] for i in range(len(matrix))]\nrow_lst = list(itertools.chain.from_iterable(matrix))\ncol_lst = list(itertools.chain.from_iterable(zip(*matrix)))\n\nrow_lst = list(set(row_lst))\ncol_lst = list(set(col_lst))\n\nmatrix = [[matrix[i][j] for j in col_lst if matrix[i][j]!= 0] for i in range(len(matrix))]\nrow_lst = list(itertools.chain.from_iterable(matrix))\ncol_lst = list(itertools.chain.from_iterable(zip(*matrix)))\n\nrow_lst = list(set(row_lst))\ncol_lst = list(set(col_lst))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(1, n + 1))\n\nmatrix = [[matrix[i][j] for j in col_lst if matrix[i][j]!= 0] for i in range(len(matrix))]\nrow_lst = list(itertools.chain.from_iterable(matrix))\ncol_lst = list(itertools.chain.from_iterable(zip(*matrix)))\n\nrow_lst = list(set(row_lst))\ncol_lst = list(set(col_lst))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(1, n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(1, n + 1))\n\nmatrix = [[matrix[i][j] for j in col_lst] for i in row_lst]\nrow_lst = list(itertools.chain.from_iterable(matrix))\ncol_lst = list(itertools.chain.from_iterable(zip(*matrix)))\n\nrow_lst = list(set(row_lst))\ncol_lst = list(set(col_lst))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(1, n + 1))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(1, n + 1))\n\nrow_lst = list(range(n, 0, -1))\ncol_lst = list(range(1, n + 1))\n\nrow_lst = list(range(n, 0, -1))\ncol_lst = list(range(1, n + 1))\n\nrow_lst = list(range(n, 0, -1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(1, n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n1\n1\n3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2\n3\n1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '7'\nassert solution('3 2 2') == '5'\nassert solution('5 2 1') == '7'\nassert solution('3 2 1') == '3'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n''') == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3') == '7'\n\nSample Input:\n6\n1 2 3\n2 2 2\n4 2 1\n4 2 3\n1 2 3\n1 2 2\nSample Output:\n1\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n5 1\n1 5\n1 1\n5 2\n3 2\n2 5\n3 4\n3 1\n1 4\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n5\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\nSample Output:\n6\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n4\n2 1\n1 1\n1 2\n2 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '7'\nassert solution('2 2 2') == '6'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n3 2 2\n3 2 2\n3 2 1\n3 2 1\n3 2 3''') == '7'\n\nassert solution('''7\n2 4 2\n4 3 2\n3 4 1\n1 4 1\n3 4 3\n1 4 3''') == '16'\n\nassert solution('''5\n2 4 2\n4 3 2\n3 4 1\n1 4 1\n3 4 3''') == '10'"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n''') == '7'\n\"\"\"\nThe trees are growing very quickly, so the total height of the forest is very high, and there are no any trees in between any of the trees. The whole forest is enclosed in a square grid and every tree is of the same size.\n\nIn the next few questions, we will use the same forest to measure the heights and growth speed of trees."
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"20\""
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100') == '20'\nassert solution('1\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '20'\nassert solution('3 3') == '12'\n\"\"\""
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n10\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100\n\"\"\") == \"20\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100\n''') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '20'\nassert solution('5 2') == '20'\nassert solution('5 2') == '20'\nassert solution('5 2') == '20'\nassert solution('5 2') == '20'"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '5 2\\n' +\n    'linearalgebra 10\\n' +\n    'calculus1 10\\n' +\n    'calculus2 20\\n' +\n    'honorsanalysis1 50\\n' +\n    'honorsanalysis2 100') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '20'\nassert solution('5 2') == '20'\nassert solution('5 2') == '20'\nassert solution('5 2') == '20'\nassert solution('5 2') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '20'\nassert solution('1 2') == '2'\nassert solution('3 4') == '10'\nassert solution('4 6') == '12'\nassert solution('5 6') == '10'\n\"\"\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100\n''') == '20'\nassert solution('''\n1 5\nalg\nalg1\nalg2\ncal1\ncal2\n''') == '20'\nassert solution('''\n2 5\ncat\ncat1\ncat2\ncat3\ncat4\n''') == '20'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\nassert solution('''\n1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == '1'"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2\") == \"1\"\nassert solution(\"10 20 2\") == \"8\"\nassert solution(\"10 20 2\") == \"8\""
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\n'''\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '6'\nassert solution('6 3 3') == '0'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4') == '6'\nassert solution('4 4') == '6'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\nassert solution('''\n8 1 4\n1 2 1\n1 3 3\n2 4 2\n3 4 1\n4 5 4\n4 6 6\n5 5 5\n6 6 6\n''') == '7'\nassert solution('''\n3 3\n3 4 3\n1 4 3\n2 4 1\n2 3 3\n''') == '2'\nassert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\nassert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '10'"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n2\n1 3\n1 3\n''') == '6'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1 1\n2\n3\n1 2\n2 3 1''') == \"2\"\nassert solution('''3 1 1\n3\n2\n2 3 1''') == \"impossible\"\nassert solution('''3 1 1\n1\n2\n2 3 1''') == \"impossible\"\nassert solution('''3 1 1\n2\n2\n1 1''') == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5 3 1\n5\n1 3\n2 4\n1 2\n3 2\n1 1\n\"\"\") == \"impossible\""
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1') == 'impossible'\nassert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1') == '2'\n\n'''"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1') == '2'\nassert solution('1\\n3') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1\\n') == 'impossible'\nassert solution('3 5 2\\n3\\n4\\n1 2\\n2 3 1\\n1 1\\n') == '2'\nassert solution('5 6 3\\n4\\n3\\n1 2\\n2 3 1\\n1 1\\n') == 'impossible'"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 1') == 'impossible'\nassert solution('5 1 2') == '2'\nassert solution('5 2 2') == 'impossible'\nassert solution('8 1 3') == '3'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2') == 'impossible'\nassert solution('3 3 1\\n3 1 3\\n1 1 2') == '2'\nassert solution('2 3\\n1 1 2\\n3 3') == 'impossible'\nassert solution('4\\n3 2 4\\n1 1 3\\n2 2 4\\n2 1 1') == 'impossible'\nassert solution('2\\n2 2 2\\n2 2 2\\n1 1\\n2 2') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == \"impossible\"\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == \"impossible\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"500.00\"\nsys.stdin = open('input.txt')\nprint(solution())\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"500.00\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n250 250\\n250 750') == '500.00'\nassert solution('100\\n1 1\\n2 2') == '101.00'\nassert solution('1\\n1\\n1') == '0.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == '500.00'\nassert solution('''\n1\n250 250\n250 750\n''') == '750.00'\n'''"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n250 250\n250 750''') == '500.00'\nassert solution('''3\n100 100\n100 100\n100 100''') == '800.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2 3') == '500.00'\nassert solution('3\\n2 3') == '900.00'\nassert solution('10\\n2 2 1 1 1 2 2 3 3') == '1000.00'\nassert solution('10\\n2 2 2 3 3 3 3 3') == '1250.00'\nassert solution('100\\n1 2 3 1 2 2 2 2') == '100.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n10 10\n10 7\n5 5''') == '150.00'\nassert solution('''\n2\n0 0\n1 1''') == '1.00'\nassert solution('''\n2\n2 3\n1 2\n1 2''') == '3.00'\nassert solution('''\n3\n1 1\n1 3\n1 5''') == '3.00'\nassert solution('''\n3\n5 5\n5 3\n4 3''') == '4.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"500.00\"\nprint(solution())"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == '500.00'\n\n'''\n\nclass Solution:\n    def solution(self, stdin):\n        def distance(a, b):\n            return abs(a[0] - b[0]) + abs(a[1] - b[1])\n        \n        goat_cnt = int(stdin.splitlines()[0])\n        post_cnt = goat_cnt\n        goat_pos = []\n        post_pos = []\n        for i in range(goat_cnt):\n            goat_pos.append(list(map(int, stdin.splitlines()[i+1].split())))\n        for i in range(post_cnt):\n            post_pos.append(list(map(int, stdin.splitlines()[i+1].split())))\n        \n        max_distance = 0\n        for i in range(goat_cnt):\n            for j in range(i+1, goat_cnt):\n                distance = distance(goat_pos[i], goat_pos[j])\n                for k in range(post_cnt):\n                    if distance < distance(post_pos[k], goat_pos[i]) and distance < distance(post_pos[k], goat_pos[j]):\n                        distance = distance(post_pos[k], goat_pos[i]) + distance(post_pos[k], goat_pos[j])\n                if max_distance < distance:\n                    max_distance = distance\n        \n        return '%.2f' % max_distance"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '500.00'\nassert solution('10') == '20.00'\nassert solution('100') == '50.00'\nassert solution('300') == '100.00'\nassert solution('1000') == '500.00'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n2 100 10\n100 1 10\n''') == '0'\nassert solution('''\n2 5\n1 5 2 3 5\n''') == '4'\n'''\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3\n2 100 10\n100 1 10\n''') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '0'\nassert solution('4 5') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n2 100 10\n100 1 10\n''') == '0'\nassert solution('''\n3 5\n2 200 10 50 10\n100 10 30 50\n100 5 30 50\n''') == '101'\nassert solution('''\n3 5\n2 200 10 50 10\n100 10 30 50\n100 5 30 50\n''') == '101'\nassert solution('''\n2 5\n2 100 10\n100 10 30 50\n100 5 30 50\n''') == '0'\nassert solution('''\n3 5\n2 200 10 50 10\n100 10 30 50\n100 5 30 50\n''') == '101'\n'''"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '0'\n\n---Input is small enough to use a faster solution---"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '0'\nassert solution('1 0') == '1000000000'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n3 100 10') == '0'\nassert solution('4 4\\n1 1 1\\n2 2 2\\n1 2 2\\n4 5 5') == '0'\nassert solution('5 1\\n100 100 100 100 100\\n1 1 1 1 1\\n2 2 2 2 2\\n1 2 2 2 2\\n5 5 5 5 5\\n100 100 100 100 100\\n1 1 1 1 1') == '0'\nassert solution('4 5\\n100 100 100 100 100\\n1 1 1 1 1\\n2 2 2 2 2\\n1 2 2 2 2\\n4 5 5 5 5\\n100 100 100 100 100\\n1 1 1 1 1') == '0'\nassert solution('100 100 100 100 100\\n1 1 1 1 1\\n2 2 2 2 2\\n1 2 2 2 2\\n4 5 5 5 5\\n100 100 100 100 100\\n1 1 1 1 1') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"0\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"2 2 2\") == \"5\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 2') == '0'\nassert solution('3 3') == '3'\nassert solution('5 3') == '7'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '2'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '2'\nprint(solution('''\n80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n'''))\nassert solution('40 50 30 20\\n0 50 25 25 20\\n50 30 20 25 20\\n40 40 30 20 20') == '2'\nprint(solution('''\n40 50 30 20\n0 50 25 25 20\n50 30 20 25 20\n40 40 30 20 20\n'''))\nassert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '2'\nprint(solution('''\n80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n'''))\nassert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35\\n5 50 25 20 50 35\\n75 50 25 20 50 35\\n') == '3'\nprint(solution('''\n80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n'''))\nassert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '1'\nprint(solution('''\n0 50 25 20 50 35\n25 20 25 20 20\n50 25 20 20 20\n'''))\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 5 5\\n1 4\\n1 6 7 5\\n3 6\\n5 4\\n') == '2'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"2\"\n\nassert solution(\"\"\"75 5 25 20 50 35\n50 5 25 35\"\"\") == \"1\"\n\nassert solution(\"\"\"75 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"1\"\n\nassert solution(\"\"\"75 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"1\"\n\nassert solution(\"\"\"75 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"1\""
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3 3 1') == '2'\nassert solution('4 3 3 2') == '1'\nassert solution('4 3 3 3') == '0'\nassert solution('8 5 8 3 5 8 5 8') == '1'\nassert solution('10 5 10 10 10 10 10 10 10') == '2'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"2\"\nassert solution(\"\"\"30 20 5\n20 10 20 10\n10 30 20\"\"\") == \"1\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"2\"\n\nassert solution(\"\"\"25 30 3 3\n40 50 20 25\n50 20 50 40\n40 50 30 40\"\"\") == \"1\"\n\nassert solution(\"\"\"50 30 3 2\n40 50 20 25\n50 20 50 40\n40 50 30 40\"\"\") == \"1\"\n\nassert solution
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"80 50 3 2\\n\"\n    \"75 5 25 20 50 35\\n\"\n    \"50 5 25 35\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4 3 2') == '2'\nassert solution
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n1112\n2211\n''') == 'AAAA'\nassert solution('''\n3 3\n1112\n1112\n1112\n''') == 'AAAA'\nassert solution('''\n3 3\n2211\n2211\n''') == 'AAAA'\n\n''') == 'AABBBB'\nassert solution('''\n3 2\n2211\n2211\n''') == 'AABBBB'\nassert solution('''\n3 3\n2211\n2211\n''') == 'AABBBB'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAABBBBBB\"\nassert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAABBBBBB\"\nassert solution(\"2 2\\n1 1\\n1 2\") == \"impossible\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"AAAA\\n...A\\n....\\n\"\nassert solution(\"6 5\") == \"AAAA\\n....\\n...B\\n...B\\nBBBB\\n...B\\n\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'AAAA'\nassert solution('2') == '..A'\nassert solution('3') == '....'\nassert solution('4') == '...C'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAA\\n...A\\n....\\n\"\nassert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAA\\n...A\\nBBBB\\n...B\\nCCCC\\n\"\nassert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAA\\n...A\\nBBBB\\n...B\\nCCCC\\n\""
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n2211\n1112\n1112''') == \"AAAA\"\nassert solution('''5 5\n2211\n1111\n1111\n1111\n1111\n2211''') == \"BBBB\"\nassert solution('''3 5\n2211\n2211\n1111\n2211\n2211\n1111''') == \"BBBB\"\nassert solution('''5 5\n1111\n2211\n2211\n2211\n2211\n1111''') == \"BBBB\"\n\nprint('Tests passed')"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n4\\n2211') == 'AAAA'\nassert solution('2\\n3\\n2211') == 'BBBB'\nassert solution('3\\n2\\n2211') == '....'"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4') == 'AAABB'\nassert solution('3 3') == 'AAABC'"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1111\n2122\n2123\n''') == \"AAAABBBB\"\nassert solution('''\n4 3\n1111\n1111\n1111\n''') == \"AAAABBBB\"\nassert solution('''\n5 5\n2121\n2121\n2122\n2122\n2123\n''') == \"AAAABBBB\"\nassert solution('''\n3 3\n2211\n1112\n1112\n''') == \"AAAABBBB\"\nassert solution('''\n3 3\n2211\n1112\n1112\n''') == \"AAAABBBB\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"AAAABBBB\"\nassert solution(\"3 2\") == \"ABA\""
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '9'\nprint(solution('''1 1 2\n2 1 1 2\n'''))\nprint(solution('''1 1 2\n2 1 1 2\n'''))"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '13'\nassert solution('4 3 1 2 1') == '7'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3''') == '12'\nassert solution('''4\n2 2 2 1\n1 1 1 1\n1 2 2 2\n2 2 1 1''') == '2'\nassert solution('''3\n3 1 2 2\n2 1 1 2\n2 1 1 2''') == '3'\nassert solution('''8\n1 1 1 2\n2 1 2 1\n3 1 2 1\n4 1 4 1\n5 2 5 1\n6 1 6 1\n7 1 6 1\n8 2 2 2\n2 1 1 1\n1 4 3 3''') == '7'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3') == '9'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '5'\nassert solution('4 3 1 2 1 3') == '7'\nassert solution('1 4 1 2 1 3') == '8'\nassert solution('3 1 3 2') == '3'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3 2 1') == '2'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '14'\nassert solution('4 3 1 2 1') == '1'"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '9'\n\nassert solution('''\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '18'\n\nassert solution('''\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '18'\n\nassert solution('''\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '18'\n\nassert solution('''\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '18'"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1 2\n3 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4\n1 2\n2 3\n1 2 3\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n1 4 1 2 1 3\n''') == '9'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '6 2 2 8\\n'\n    '0 0 6\\n'\n    '3 4 7\\n'\n    '0 8 8\\n'\n    '6 8 8\\n'\n    '6 0 6\\n'\n    '6 4 8\\n'\n    '3 4\\n'\n    '1 5\\n'\n) == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5') == '20.396078'\nassert solution('4 0 0 0\\n0 1\\n0 2\\n0 3\\n3 1\\n3 2\\n4 0\\n5 2\\n5 3\\n4 3') == 'IMPOSSIBLE'\n\n\"\"\"\n\nn, s, t, q = map(int, input().split())\n\nhills = []\nfor hill in range(n):\n    hills.append(list(map(int, input().split())))\n\nspring_counts = list(map(int, input().split()))\ntown_counts = list(map(int, input().split()))"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('0 0 6') == '20.396078'\nassert solution('3 4 7') == 'IMPOSSIBLE'\nassert solution('0 8 8') == '20.396078'\nassert solution('6 8 8') == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 2 2 8\") == \"20.396078\"\nassert solution(\"3 4 7\") == \"Impossible\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\") == \"20.396078\"\nassert solution(\"6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n\") == \"IMPOSSIBLE\"\nassert solution(\"20\\n4 2 4\") == \"IMPOSSIBLE\"\nassert solution(\"5 5 10\") == \"10\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5') == '20.396078'\nassert solution('5 1 4\\n4 4 7\\n3 8 7\\n3 8 0\\n4 4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('3 4') == 'IMPOSSIBLE'\n\nassert solution('3 4') == '5.000000'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2 2 8\") == \"20.396078\"\nassert solution(\"0 0 6\") == \"Impossible\"\nassert solution(\"3 4 7\") == \"10.657921\"\nassert solution(\"6 8 8\") == \"Impossible\"\nassert solution(\"6 0 6\") == \"5.714286\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('2 2 2 8') == '10.096078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"20.396078\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n') == 'b'\nassert solution('abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n') == 'c'\nassert solution('abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n') == 'd'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'c'\n\nassert solution('''\naa\ncc\ndd\nee\nff\ngg\nhh\nii\njj\nkk\nll\nmm\nnn\noo\npp\nqq\nrr\nss\ntt\nuu\nvv\nww\nxx\nyy\nzz\n''') == 'g'\n\nassert solution('''\naaaa\nbbbb\ncccc\ndddd\neeee\nffff\ngggg\nhhhh\niiii\njjjj\nkkkk\nllll\nmmmm\nnnnn\nooo\npppp\nqqqq\nrrrr\nssss\ntttt\nuuuu\nvvvv\nwwww\nxxxx\nyyyy\nzzzz\n''') == 'g'\n\nassert solution('''\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == 'g'\n\nassert solution('''\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == 'g'"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'b'\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n2\n3\n1 3\n''') == 'd'\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n4\n2\n1 2\n''') == 'e'\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n5\n3\n1 5\n''') == 'd'\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n6\n2\n1 6\n''') == 'a'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\") == \"bbb\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\") == \"ccc\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nabc\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'b'\nassert solution('''\nabc\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'd'"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\") == \"b\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n3\\n1\\n2\") == \"c\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n3\\n3\") == \"e\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n3\\n4\") == \"f\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n3\\n6\") == \"o\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abca') == 'b'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'c'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'n'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n\") == \"b\"\n\nSample Input:\nabcdefg\nabcdegfhijkl\nnopsvxqrstuvwzyz\n1\n2\n1 8\nSample Output:\na\nc\ne\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abca') == 'c'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'c'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 't'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(t1) == \"abc\"\nassert solution(t2) == \"cba\"\nassert solution(t3) == \"abccbaabc\"\nassert solution(t4) == \"bc\"\nassert solution(t5) == \"xy\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n') == '12'\nassert solution('3\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n') == '16'\nassert solution('2\\nhobotnica\\nrobot\\n') == '11'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''hobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija''') == \"12\\n10\\n16\\n7\"\nprint(solution('''hobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija'''))\nassert solution('''s\nt\nr\no\nb\no\nt\nc\nh\no\nt\nn\na\nc\nt\no\np\no\nr\ne\nt\ni\nn\na\ns\nt\ni\nn\ne\n''') == \"6\\n4\\n5\\n4\\n3\\n2\\n2\\n1\\n1\"\nprint(solution('''s\nt\nr\no\nb\no\nt\nc\nh\no\nt\nn\na\nc\nt\no\np\no\nr\ne\nt\ni\nn\na\ns\nt\ni\nn\ne\n'''))\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija''') == '12'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n\") == \"12\""
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n') == '12'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"15 12 10\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '10'\nassert solution('2') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(solution.__doc__) == '16'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\nhobotnica\\nrobot\\nhobi') == '12'\nassert solution('5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrakija') == '16'"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"JQ IRKEYFG EXQ\"\n) == \"THIS IS A TEST\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('1 1\\nA') == 'A'\n'''\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('\\n'.join(['JQ', 'IRKEYFG', 'EXQ'])) == 'THIS IS A TEST'\nassert solution('\\n'.join(['JQ', 'IRKEYFG', 'EXQ'])) == 'THIS IS A TEST'\nassert solution('\\n'.join(['JQ', 'IRKEYFG', 'EXQ'])) == 'THIS IS A TEST'\nassert solution('\\n'.join(['JQ', 'IRKEYFG', 'EXQ'])) == 'THIS IS A TEST'\nassert solution('\\n'.join(['JQ', 'IRKEYFG', 'EXQ'])) == 'THIS IS A TEST'\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\nA B C D\nE F G\nH I J\nK L\n''') == 'THIS IS A TEST'\nassert solution('''\n1 1\nA\n''') == 'A'\nassert solution('''\n1 1\nA\n''') == 'A'\n'''\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n14 4\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\nassert solution('''\n8 9\nA C D E F G\n''') == 'ABCDEFG'\nassert solution('''\n15 7\nB K Q X Y Z\n''') == 'BCKEZYZ'\nassert solution('''\n3 2\nX Y\n''') == 'XY'\nassert solution('''\n15 7\nA B C D E F G H I J\n''') == 'ABCDEFGHIJ'\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\n'''\n\n\n'''\n---Solution---\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('3 7\\nO'*1000000) == 'O'*1000000\n'''\nimport time\nimport numpy\nimport matplotlib.pyplot as plt\nfrom itertools import chain\n\nstart = time.time()\n\nn, x = map(int, input().split())\ntext = input()\n\na = numpy.array(list(range(n)), dtype=numpy.int)\nb = numpy.array(list(range(n, n*2)), dtype=numpy.int)\nc = numpy.array(list(range(n*2, n*3)), dtype=numpy.int)\nd = numpy.array(list(range(n*3, n*4)), dtype=numpy.int)\ne = numpy.array(list(range(n*4, n*5)), dtype=numpy.int)\n\nz = numpy.zeros(2**20 + 1, dtype=numpy.int)\n\nfor i in range(n):\n    z[a[i]] = ord(text[i]) - ord('A')\n    z[b[i]] = ord(text[i]) - ord('A') + 1\n    z[c[i]] = ord(text[i]) - ord('A') + 26\n    z[d[i]] = ord(text[i]) - ord('A') + 27\n    z[e[i]] = ord(text[i]) - ord('A') + 28\n\na_num = numpy.zeros(x + 1, dtype=numpy.int)\nb_num = numpy.zeros(x + 1, dtype=numpy.int)\nc_num = numpy.zeros(x + 1, dtype=numpy.int)\nd_num = numpy.zeros(x + 1, dtype=numpy.int)\ne_num = numpy.zeros(x + 1, dtype=numpy.int)\n\nfor i in range(x + 1):\n    a_num[i] = z[z + i]\n    b_num[i] = z[z + x + i]\n    c_num[i] = z[z + x*2 + i]\n    d_num[i] = z[z + x*3 + i]\n    e_num[i] = z[z + x*4 + i]\n\na = a_num\nb = b_num\nc = c_num\nd = d_num\ne = e_num\n\na = numpy.append(a, numpy.zeros(n*2, dtype=numpy.int))\nb = numpy.append(b, numpy.zeros(n*2, dtype=numpy.int))\nc = numpy.append(c, numpy.zeros(n*2, dtype=numpy.int))\nd = numpy.append(d, numpy.zeros(n*2, dtype=numpy.int))\ne = numpy.append(e, numpy.zeros(n*2, dtype=numpy.int))\n\na = numpy.append(a, numpy.zeros(n*3, dtype=numpy.int))\nb = numpy.append(b, numpy.zeros(n*3, dtype=numpy.int))\nc = numpy.append(c, numpy.zeros(n*3, dtype=numpy.int))\nd = numpy.append(d, numpy.zeros(n*3, dtype=numpy.int))\ne = numpy.append(e, numpy.zeros(n*3, dtype=numpy.int))\n\na = numpy.append(a, numpy.zeros(n*4, dtype=numpy.int))\nb = numpy.append(b, numpy.zeros(n*4, dtype=numpy.int))\nc = numpy.append(c, numpy.zeros(n*4, dtype=numpy.int))\nd = numpy.append(d, numpy.zeros(n*4, dtype=numpy.int))\ne = numpy.append(e, numpy.zeros(n*4, dtype=numpy.int))\n\na = numpy.append(a, numpy.zeros(n*5, dtype=numpy.int))\nb = numpy.append(b, numpy.zeros(n*5, dtype=numpy.int))\nc = numpy.append(c, numpy.zeros(n*5, dtype=numpy.int))\nd = numpy.append(d, numpy.zeros(n*5, dtype=numpy.int))\ne = numpy.append(e, numpy.zeros(n*5, dtype=numpy.int))\n\na = numpy.append(a, numpy.zeros(n*6, dtype=numpy.int))\nb = numpy.append(b, numpy.zeros(n*6, dtype=numpy.int))\nc = numpy.append(c, numpy."
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nSample Input:\n4 2\nHZC A PQA\nSample Output:\nZHZS HZCPQ A\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n14 4\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\n\nassert solution('''\n10 4\nABC ABC ABC\n''') == 'ABCABCABC'\n\nassert solution('''\n5 4\nACBABCD BCBABCD\n''') == 'ABBCABBD'\n\nassert solution('''\n7 4\nBAAABBBAAABBBBBAA\n''') == 'BAAABBBAAABBBBBAA'\n\nassert solution('''\n7 2\nAAA BBBBBBBBBBBB\n''') == 'AAA BBBBBBBBBBBB'"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2.6\") == \"135\"\nassert solution(\"2.6\") == \"270\""
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2.6\") == \"135\"\nassert solution(\"1.6\") == \"135135\"\nassert solution(\"5776\") == \"702702\"\nassert solution(\"2.78\") == \"No solution\""
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1.1') == '135'\nassert solution('2.6') == '135135'\nassert solution('5.6') == '270270'\nassert solution('9.6') == 'No solution'"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2.6') == '135'\nassert solution('0.000001') == '0'\nassert solution('0.6') == '0'\nassert solution('1.6') == '135'\nassert solution('2.1') == '135135'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2.6') == '135'\nassert solution('2.5') == '135135'\nassert solution('2.4') == '135135135'\nassert solution('2.3') == '135135135135'\nassert solution('2.2') == '135135135135135135'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2.6\") == \"135\"\nassert solution(\"5776\") == \"76\"\nassert solution(\"1.3\") == \"No solution\"\nassert solution(\"5.3\") == \"No solution\"\nassert solution(\"9.4\") == \"No solution\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    1.3\n    7.8\n    2.0\n    ''') == '135135270270'\n\nassert solution('''\n    1.2\n    7.9\n    2.0\n    ''') == '135135270270'\n\nassert solution('''\n    1.3\n    7.8\n    2.0\n    ''') == '135135270270'\n\nassert solution('''\n    2.3\n    7.8\n    2.0\n    ''') == '135135270270'\n\nassert solution('''\n    2.2\n    7.8\n    2.0\n    ''') == '135135270270'"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2.6') == '135'\nassert solution('4.6') == '135135'\nassert solution('6.7') == '135135'\nassert solution('5.6') == '135135'\nassert solution('4.5') == '135135'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2.6') == '135'\nassert solution('1.5') == '135135'\nassert solution('1.3') == '135135'\nassert solution('1.1') == '135135135'"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2.6\") == \"135\"\nassert solution(\"3.2\") == \"270\"\nassert solution(\"4.4\") == \"360\"\nassert solution(\"8.8\") == \"808080\"\nassert solution(\"4.3\") == \"420\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\nassert solution('''\n5\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\n'''\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4'\nassert solution('1\\n0 1') == '4'\nassert solution('2\\n3 4') == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '4'\nassert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3') == '2'\nassert solution('2\\n0 1\\n3 4\\n5 5\\n6 6\\n1 3\\n2 2\\n1 4\\n1 5\\n2 6\\n3 7\\n4 6\\n5 4\\n6 5') == '1'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\nassert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\nassert solution('''\n10\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\n\n'''\n===============================================================================================================\n===============================================================================================================\n===============================================================================================================\n\nTask 1\n\n===============================================================================================================\n===============================================================================================================\n===============================================================================================================\n\n\n--- Day 1: Report Repair ---\n\nAfter saving Christmas five years in a row, you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.\n\nThe tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them stars. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.\n\nTo save your vacation, you need to get all fifty stars by December 25th.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n\nBefore you leave, the Elves in accounting just need you to fix your expense report (your puzzle input); apparently, something isn't quite adding up.\n\nSpecifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.\n\nFor example, suppose your expense report contained the following:\n\n1721\n979\n366\n299\n675\n1456\nIn this list, the two entries that sum to 2020 are 1721 and 299. Multiplying them together produces 1721 * 299 = 514579, so the correct answer is 514579.\n\nOf course, your expense report is much larger. Find the two entries that sum to 2020; what do you get if you multiply them together?\n\n--- Part Two ---\n\nThe Elves in accounting are thankful for your help; one of them even offers you a starfish coin they had left over from a past vacation. They offer you a second one if you can find three numbers in your expense report that meet the same criteria.\n\nUsing the above example again, the three entries that sum to 2020 are 979, 366, and 675. Multiplying them together produces the answer, 241861950.\n\nIn your expense report, what is the product of the three entries that sum to 2020?\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_1) == \"4\"\nassert solution(input_2) == \"1\""
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '0'\nassert solution('1 4 1 4 5') == '1'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == \"4\""
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2') == '0.0000000 0.0000000'\nassert solution('3\\n1 2\\n1 3') == '0.0000000 0.0000000 -1.0000000 0.0000000'\n\"\"\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000''') == '1.0000000 0.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n1 2\n1 3\n1 4\n\"\"\") == \"\"\"0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\"\"\".strip()\n\nassert solution(\"\"\"4\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"\"\"0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\"\"\".strip()\n\nassert solution(\"\"\"5\n1 2\n1 3\n1 4\n1 5\n1 6\n\"\"\") == \"\"\"0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\"\"\".strip()\n\nassert solution(\"\"\"9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n4 5\n4 6\n4 7\n4 8\n4 9\n5 6\n5 7\n5 8\n5 9\n6 7\n6 8\n6 9\n7 8\n7 9\n8 9\n\"\"\") == \"\"\"0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n''') == '1.0000000 0.0000000\\n'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n''') == '0.0000000 0.0000000\\n'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n1.0000000 0.0000000\n0.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n''') == '1.0000000 0.0000000\\n'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n1.0000000 0.0000000\n0.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n''') == '0.0000000 0.0000000\\n'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n1.0000000 0.0000000\n0.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n''') == '0.0000000 0.0000000\\n'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\nassert solution(\"3\\n1 2\\n2 3\\n3 4\\n\") == \"0.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\"\nassert solution(\"2\\n1 2\\n\") == \"0.0000000 0.0000000\\n0.0000000 1.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('20\\n3 4\\n4 8\\n7 2\\n8 7\\n10 5\\n14 7\\n17 5\\n19 7\\n13 7\\n16 7\\n4 3\\n9 5\\n18 2\\n20 4\\n13 4\\n15 4\\n15 4\\n14 4\\n13 4\\n4 2\\n4 4\\n13 2\\n4 3\\n10 4\\n10 3\\n9 4\\n6 4\\n6 4\\n5 4\\n4 1\\n14 4\\n17 4\\n19 4\\n12 4\\n14 4\\n14 4\\n4 4\\n11 4\\n11 4\\n4 2\\n5 4\\n13 4\\n13 4\\n16 4\\n12 4\\n6 4\\n10 5\\n10 5\\n10 5\\n10 5\\n9 5\\n9 5\\n10 5\\n8 5\\n7 5\\n8 5\\n7 5\\n9 5\\n13 5\\n14 5\\n15 5\\n14 5\\n13 5\\n9 5\\n11 5\\n13 5\\n11 5\\n11 5\\n5 5\\n13 5\\n7 5\\n8 5\\n10 5\\n10 5\\n10 5\\n10 5\\n8 5\\n7 5\\n7 5\\n7 5\\n10 5\\n11 5\\n11 5\\n12 5\\n7 5\\n8 5\\n10 5\\n10 5\\n10 5\\n7 5\\n9 5\\n8 5\\n7 5\\n10 5\\n11 5\\n11 5\\n11 5\\n10 5\\n9 5\\n7 5\\n7 5\\n8 5\\n8 5\\n8 5\\n7 5\\n11 5\\n13 5\\n13 5\\n8 5\\n10 5\\n10 5\\n10 5\\n9 5\\n8 5\\n11 5\\n13 5\\n7 5\\n8 5\\n8 5\\n7 5\\n10 5\\n11 5\\n11 5\\n12 5\\n7 5\\n8 5\\n10 5\\n10 5\\n8 5\\n10 5\\n9 5\\n8 5\\n10 5\\n8 5\\n7 5\\n7 5\\n7 5\\n8 5\\n11 5\\n13 5\\n14 5\\n16 5\\n18 5\\n20 5\\n21 5\\n22 5\\n23 5\\n24 5\\n25 5\\n26 5\\n27 5\\n28 5\\n29 5\\n31 5\\n32 5\\n33 5\\n34 5\\n35 5\\n36 5\\n37 5\\n38 5\\n39 5\\n40 5\\n41 5\\n42 5\\n43 5\\n44 5\\n45 5\\n46 5\\n47 5\\n48 5\\n49 5\\n50 5\\n51 5\\n52 5\\n53 5\\n54 5\\n55 5\\n56 5\\n57 5\\n58 5\\n59 5\\n60 5\\n61 5\\n62 5\\n63 5\\n64 5\\n65 5\\n66 5\\n67 5\\n68 5\\n69 5\\n70 5\\n71 5\\n72 5\\n73 5\\n74 5\\n75 5\\n76 5\\n77 5\\n78 5\\n79 5\\n80 5\\n81 5\\n82 5\\n83 5\\n84 5\\n85 5\\n86 5\\n87 5\\n88 5\\n89 5\\n90 5\\n91 5\\n92 5\\n93 5\\n94 5\\n95 5\\n96 5\\n97 5\\n98 5\\n99 5\\n100 5\\n101 5\\n102 5\\n103 5\\n104 5\\n105 5\\n106 5\\n107 5\\n108 5\\n109 5\\n110 5\\n111 5\\n112 5\\n113 5\\n114 5\\n115 5\\n116 5\\n117 5\\n118 5\\n119 5\\n120 5\\n121 5\\n122 5\\n123 5\\n124 5\\n125 5\\n126 5\\n127 5\\n128 5\\n129 5\\n130 5\\n131 5\\n132 5\\n133 5\\n134 5\\n135 5\\n136 5\\n137 5\\n138 5\\n139 5\\n140 5\\n141 5\\n142 5\\n143 5\\n144 5\\n145 5\\n146 5\\n147 5\\n148 5\\n149 5\\n150 5\\n151 5\\n152 5\\n153 5\\n154 5\\n155 5\\n156 5\\n157 5\\n158 5\\n159 5\\n160 5\\n161 5\\n162 5\\n163 5\\n164 5\\n165 5\\n166 5\\n167 5\\n168 5\\n169 5\\n170 5\\n171 5\\n172 5\\n173 5\\n174 5\\n175 5\\n176 5\\n177 5\\n178 5\\n179 5\\n180 5\\n181 5\\n182 5\\n183 5\\n184 5\\n185 5\\n186 5\\n187 5\\n188 5\\n189 5\\n190 5\\n191 5\\n192 5\\n193 5\\n194 5\\n195 5\\n196 5\\n197 5\\n198 5\\n199 5\\n200 5\\n201 5\\n202 5\\n203 5\\n204 5\\n205 5\\n206 5\\n207 5\\n208 5\\n209 5\\n210 5\\n211 5\\n212 5\\n213 5\\n214 5\\n215 5"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.0000000 0.0000000 -1.0000000 0.0000000 1.0000000'\n\"\"\""
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '0.0 0.0\\n1.0 0.0\\n-1.0 0.0\\n0.0 1.0\\n0.0 -1.0'"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n\"\n\n\"\"\"\n\n--- Part Two ---\n\nNow, the company has gone through a significant amount of redesign, and you are happy with the new designs. It is easy to say that no two connections can intersect (i.e., there are no cycles). However, they also need to be on the same line, but they must be at least $10^{-6}$ apart.\n\nYou have a limited number of ways to arrange the new connections, but there must be an exact number.\n\nThe company has recently decided to give you a circular board, and it is sure that all the lines are going to be connected on a loop.\n\nYour task is to find a way to arrange the new connections so that the resulting graph is connected and that the lines are all on the same line.\n\nIn this problem, you can only place each connection point on the circuit board once.\n\n-----Input-----\nThe input consists of:\n - One line with one integer $n$ ($2 \\le n \\le 1000$), the number of connection points. The points are numbered from $1$ to $n$.\n - $n-1$ lines, each with two integers $a$ and $b$ ($1 \\le a,b \\le n$), describing a connection between $a$ and $b$.\n\nThe points are numbered from $1$ to $n$.\n\n-----Output-----\nOutput $n$ lines, the $i$th of which contains two real numbers $x_ i,y_ i$, the coordinates of point $i$. To make the production feasible, the following restrictions apply:\n - The distance between each pair of points should be at least $10^{-4}$.\n - The length of each edge should be $1$, up to an absolute error of at most $10^{-6}$.\n - Edges that are not incident to the same vertex should be at least a distance $10^{-6}$ apart.\n - The coordinates may not exceed an absolute value of $3000$.\n\nIf there are multiple valid solutions, you may output any one of them.\n\n-----Examples-----\nSample Input:\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n1.0000000 0.0000000\n1.0000000 -1.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n-1.0000000 0.0000000\n-1.0000000 -1.0000000\n\"\"\""
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n''') == '1'\nassert solution('''\n1\n2\n2\n''') == '2'\nassert solution('''\n5\naaa\na*a\n*a*a\nab*a\naba\na*a\na*a*a\n''') == '3'\nassert solution('''\n1\n2\n2\n''') == '1'\n'''\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 5\nb*a\nacb\n*b*a\nac*b\nb*a\n\"\"\") == \"2 3 1 1 1 1\"\nassert solution(\"\"\"\n4 4\naab\nbac\nabc\ncba\n\"\"\") == \"2 1 1 1\"\n\"\"\") == \"6 7 2 7 5\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '3 3\\n'\n    'aaa\\n'\n    'abc\\n'\n    'aba\\n'\n    'a*a\\n'\n    'aaa*\\n'\n    '*aaa\\n') == '2'\nassert solution(\n    '4 3\\n'\n    'abc\\n'\n    'abc\\n'\n    'ab*\\n'\n    'aba\\n') == '2'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\n''') == '2'\n\nassert solution('''\n4 3\naa\nbb\ncc\na*a\naaa*\n''') == '1 1 1 1'\n\nassert solution('''\n4 4\na*a\naa*\naaa*\naaa\na*a\na*a\na*a\n''') == '1 1 2 1 1'\n\nassert solution('''\n4 4\na*a\naa*\naaa*\naaa\na*a\na*a\na*a\n''') == '1 1 1 1 1'\n\nassert solution('''\n4 4\na*a\naa*\naaa*\naaa\na*a\na*a\na*a\n''') == '1 1 1 1 1'"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '1', \"Wrong answer\"\nassert solution('2\\n') == '0', \"Wrong answer\"\nassert solution('3\\n') == '1', \"Wrong answer\"\nassert solution('4\\n') == '1', \"Wrong answer\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\naaa\nabc\naba\na*a\naaa*\n*aaa\n\"\"\") == \"2\\n1\\n1\"\nassert solution(\"\"\"\n3\naaa\nabc\naba\na*a\naaa*\n*aaa\n\"\"\") == \"2\\n1\\n1\"\nassert solution(\"\"\"\n5\nabc\ncba\nde*f\naba\na*a\n\"\"\") == \"3\\n1\\n1\\n2\\n1\\n1\"\nassert solution(\"\"\"\n5\nabc\ncba\nde*f\naba\na*a\n\"\"\") == \"3\\n1\\n1\\n2\\n1\\n1\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa') == '2'\nassert solution('4 4\\naab\\nbba\\nbba\\n*b*') == '1'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3 3\n    aaa\n    abc\n    aba\n    a*a\n    aaa*\n    *aaa\n''') == '2'\nassert solution('''\n    4 6\n    *k*l\n    k*l\n    k*l\n    k*l\n    k*l\n    *k*l\n''') == '1'\nassert solution('''\n    3 4\n    *t*o\n    *e*\n    *p*\n    *p*\n    *p*\n''') == '1'\n\n'''\n\nimport sys\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '0'\n\nprint(solution('5'))\n\nSample Input:\n3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\nSample Output:\n2\n1\n1\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 1 1 1 1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\nassert solution('4 2\\nOO\\nOO\\nOX\\nOX\\nXO\\nXO\\nXO\\nXO\\n') == '0'\nassert solution('4 2\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\n') == '1'\nassert solution('4 2\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\nassert solution(\"3 2\\nXO\\nXO\\nOX\") == \"0\"\nassert solution(\"4 2\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nOX\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\nOX\nOX\nOX\n''') == '1'\nassert solution('''\n3 3\nOX\nOX\nXO\n''') == '0'\nassert solution('''\n2 2\nOX\nOX\n''') == '1'\nassert solution('''\n4 4\nOX\nOX\nOX\nOX\nOX\n''') == '1'\nassert solution('''\n4 4\nOX\nOX\nOX\nXO\n''') == '0'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\nassert solution(\"4 3\\nOXX\\nOXO\\nOXO\\nOXO\\nOXO\\nOXO\\nOOX\\nOOX\\n\") == \"0\"\nassert solution(\"4 3\\nOXX\\nOXO\\nOXO\\nOXO\\nOXO\\nOXO\\nOOX\\nOOX\\n\") == \"1\"\n\nTest cases\nSample input\n4 2\nOX\nOX\nOX\nOX\nOX\nOO\nXO\nOO\nSample output\n1\n0\n\nIf the pegs are all down, then the target board is the same as the starting board. If the pegs are all up, then the target board is the same as the starting board. If there is a hole in the middle of the target board, then the starting and target board are different.\n\nIf the target board is the same as the starting board, then the answer is 1. If the target board is different than the starting board, then the answer is 0.\n\nIf there is a hole in the middle of the target board, then the answer is 1. If there is no hole in the middle, then the answer is 0.\n\nIf the target board is different than the starting board, and there is a hole in the middle of the target board, then the answer is 1. If there is no hole in the middle, then the answer is 0.\n\"\"\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == \"1\", \"Wrong!\"\nassert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == \"0\", \"Wrong!\"\nassert solution('''\n3 2\nXO\nOX\nXO\n''') == \"0\", \"Wrong!\"\nassert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == \"1\", \"Wrong!\"\nassert solution('''\n10 3\nXO\nOX\nXO\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '0'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '1'\nassert solution('''\n4 4\n
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 4\") == \"1\"\n\n-----------------\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n2 0\n0 2\n-2 0\n0 -2\n''') == \"16\"\n\nassert solution('''\n''') == \"0\"\n\nassert solution('''\n3\n1 0\n0 2\n0 -2\n''') == \"8\""
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 0\\n0 2\\n-2 0\\n0 -2') == '16'\nprint(solution('4\\n2 0\\n0 2\\n-2 0\\n0 -2'))\n\n'''\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 0\\n0 2\\n-2 0\\n0 -2') == \"16\""
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 0') == '16'\nassert solution('0 2') == '16'\nassert solution('-2 0') == '16'\nassert solution('0 -2') == '16'"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 0\n0 2\n-2 0\n0 -2\n''') == '16'\nassert solution('''\n3 0\n0 2\n0 -2\n''') == '3'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2 0\\n0 2\\n-2 0') == '16'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0') == '0'\nassert solution('0 2') == '2'\nassert solution('-2 0') == '0'\nassert solution('0 -2') == '2'\n\nstdin = '''\n2 0\n0 2\n-2 0\n0 -2\n'''\n\nstdin = '''\n2 0\n-1 1\n-2 0\n1 -1\n'''\n\nstdin = '''\n3\n-3 -2 1\n1 -3 2\n0 0 0\n'''\n\nstdin = '''\n5\n-4 -2 3 0\n-3 -2 -1 0\n1 -3 2 -4\n0 3 -1 -2\n-3 -4 -1\n'''\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '16'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 8 2 -2') == '80'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"80\"\n__import__('print').write(solution(stdin))\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n8 8 2 -2\") == \"80\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 10 50\n8 8 2 -2\n''') == '80'\n'''\n--- Part Two ---\nA few weeks later, Nick went to the forum to ask if you had any comments that need to be removed. Like before, they only asked for comments on either the alternating chain or its scores, but they also asked if they had to wait at least $k$ seconds before removing a comment.\n\nEach answer was either correct or incorrect.\n\nIf a comment is incorrect, it still exists in the forum; its score remains the same, and it is still removed. However, it is not possible to undo the removal because it's the only way for any comment to have a score of $0$. So the only way to remove a comment is to wait for it to have a score of $0$. To make the comment chain alternating after it had been removed, it is necessary to create an account.\n\nIt also takes $k$ seconds to create an account and use it to remove a comment. After the comment is removed, it is no longer in the forum. This result in the scores of all comments in the chain being either -1 or 1, which is also an alternating chain.\n\nNick can apply these operations in any order, any number of times. How fast can he make the comment chain alternating?\n\nFor example, consider Sample Input 2 below, where the scores in the comment chain are $5, 1, 2, -1$, and it takes Nick $10$ seconds to create an account and $50$ seconds to remove the last comment. In this case it is optimal to first remove the third comment, which leaves a comment with a score of $1$, and then report the first comment. This results in the scores $5, -1, 1$, which is an alternating chain. The time used for this is $90$ seconds.\n\n-----Input-----\nThe input consists of:\n - One line with three integers $n$, $c$, and $r$ ($1 \\leq n \\leq 5\\cdot 10^5$, $1 \\leq c,r \\leq 10^9$), the number of comments in the chain, the time it takes to create a fake account and the time it takes to remove a comment respectively.\n - One line with $n$ integers $s_1, \\ldots, s_ n$ ($-10^9 \\leq s_ i \\leq 10^9$ for all $i$), the current score of each comment in the chain.\n\n-----Output-----\nOutput the smallest time to make the comment chain alternating by applying the operations above.\n\n-----Examples-----\nSample Input:\n4 10 50\n8 8 2 -2\nSample Output:\n90\n\n'''"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 10 50\n8 8 2 -2\n''') == '80'\n\nassert solution('''\n2 5 6\n-5 1 4 6\n''') == '65'\n\nassert solution('''\n6 10 1\n-1 -1 5 1\n''') == '6'\n\nassert solution('''\n5 10 20\n-3 -1 4 -2 2\n''') == '20'\n\nassert solution('''\n5 10\n5 1 -2\n''') == '10'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 10 50') == '80'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4 10 50\n8 8 2 -2\n\"\"\") == \"80\"\n\nassert solution(\n\"\"\"\n5 10 40\n1 2 2 2 2\n\"\"\") == \"40\"\n\nassert solution(\n\"\"\"\n5 10 40\n-2 -2 -2 2 2\n\"\"\") == \"40\"\n\nassert solution(\n\"\"\"\n1 10 40\n2 2 2 2\n\"\"\") == \"40\"\n\nassert solution(\n\"\"\"\n10 10 10 10\n-2 -2 -2 -2 -2\n\"\"\") == \"30\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n1\n4\n1\n-1\n-2\n1\n-3\n4\n-4\n-5\n-6\n2\n-7\n3\n-8\n'''\n    ) == '80', 'Should return the time it takes to make the comment chain alternating'\n    assert solution(\n    '''\n2\n-3\n4\n-2\n3\n2\n-3\n2\n4\n-1\n1\n'''\n    ) == '60', 'Should return the time it takes to make the comment chain alternating'\n    assert solution(\n    '''\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 10 50\\n8 8 2 -2\") == \"80\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\nassert solution('''\n0 8\n1 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '2.92633828'\nassert solution('''\n0 8\n1 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.0'\nassert solution('''\n0 8\n1 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '2.92633828'\nassert solution('''\n0 8\n1 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '2.92633828'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '3.000000000'\nassert solution('5 1') == '4.9999999999'\nassert solution('5 9') == '4.9999999999'\nassert solution('3') == '2.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 8') == '4.000000000'\nassert solution('0 0 10 10') == '4.000000000'\nassert solution('5 1') == '1.000000000'\nassert solution('5 9') == '1.000000000'\nassert solution('3') == '1.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\"\"\") == \"3.000000000\"\nassert solution(\"\"\"1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n3\n3\n3\n3\n3\n3\n\"\"\") == \"9.0000000000\"\nassert solution(\"\"\"1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 8') == '0.000000000'\nassert solution('1 20') == '6.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3') == '3.000000000'\n\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n3\\n3') == '3.000000000'\n\nassert solution('10\\n-10 10\\n20 20\\n50 50\\n20 20\\n50 50') == '3.00000'\n\nassert solution('2\\n1 1\\n0 0') == '1.0'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 8\\n0 0 10 10\\n5 1\") == \"3.000000000\"\nassert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\") == \"8.000000000\"\nassert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"11.000000000\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '3.000000000'\nassert solution('5 1') == '5.000000000'\nassert solution('5 9') == '5.000000000'\nassert solution('3') == '1.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\n\nassert solution('''10 1\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\n\nassert solution('''10 9\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\n\nassert solution('''1 9\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '2.000000000'\n\nassert solution('''10 0\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '0.000000000'"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\nassert solution_debug(None) == '1'"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 1') == '2'\nassert solution('8 1') == '2'\nassert solution('12 3') == '3'\nassert solution('15 3') == '4'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"3 5\") == \"1\"\nassert solution(\"10 5\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"7 5\") == \"1\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 3\n0 1 0 0\n1 2\n2 3\n2 4\n4 3\n4 2\n4 1\nSample Output\n1\n''') == '1'\n\nassert solution('''\n6 3\n0 1 0 0\n1 2\n2 3\n2 4\n4 3\n4 2\n4 1\nSample Output\n1\n''') == '1'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '4 3'\n    '0 1 0 0'\n    '1 2'\n    '2 3'\n    '2 4'\n    ) == '1'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"5 5\") == \"3\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n0 1 0 0\n1 2\n2 3\n2 4\n''') == '1'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_data) == \"1\"\n\"\"\"\n\nn, m = list(map(int, input().split()))\nfriends = []\nfor _ in range(m):\n    a, b = list(map(int, input().split()))\n    friends.append((a, b))\n\norange = 0\npurple = 0\n\nfor i in range(m):\n    if friends[i][0] == 1:\n        orange += 1\n    else:\n        purple += 1\n\norange_friends = [orange]\npurple_friends = [purple]"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\n\"\"\"\n\nn, m = map(int, stdin.split())\n\nfriends = []\nfor i in range(1, n):\n    friends.append([i, 0])\n\nfor _ in range(m):\n    a, b = map(int, stdin.split())\n    friends[a-1][1] += 1\n    friends[b-1][1] += 1\n\nfriends = sorted(friends)\n\nx = 0\ny = 0\nfor i in friends:\n    x += i[1]\n    y += 1\n    if x == y:\n        break\n\nprint(y)\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == \"1\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\nassert solution('6 4\\n0 0\\n0 1\\n1 2\\n0 2\\n2 0\\n1 3\\n2 1\\n3 2\\n2 3\\n1 0\\n3 1\\n2 0\\n1 2\\n3 1\\n2 1\\n0 0\\n1 1\\n2 1\\n2 0\\n1 2\\n0 0\\n0 1\\n1 0\\n2 0\\n1 2\\n0 0\\n0 1\\n2 0\\n1 2\\n0 1\\n1 2\\n1 1\\n2 2\\n1 0\\n1 2\\n2 1\\n1 1\\n1 1\\n2 1\\n2 0\\n1 1\\n1 2\\n2 2\\n2 0\\n0 2\\n0 1\\n2 2\\n2 1\\n2 2\\n1 0\\n2 2\\n2 1\\n1 1\\n1 0\\n1 1\\n1 1\\n2 1\\n2 0\\n2 0\\n2 0\\n1 2\\n2 1\\n1 0\\n2 1\\n1 1\\n2 1\\n2 1\\n2 1\\n1 1\\n1 1\\n1 1\\n2 1\\n2 1\\n1 2\\n1 1\\n2 1\\n1 1\\n2 1\\n1 1\\n2 1\\n1 1\\n1 2\\n1 1\\n2 1\\n1 1\\n1 2\\n1 2\\n2 1\\n2 1\\n2 0\\n1 1\\n2 1\\n1 2\\n2 1\\n2 1\\n1 1\\n1 2\\n1 0\\n1 1\\n2 1\\n2 1\\n0 2\\n0 2\\n0 1\\n1 0\\n0 1\\n1 1\\n0 1\\n0 1\\n0 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 1\\n1 1\\n1 0\\n1 0\\n1 0\\n1 0\\n1 1\\n1 1\\n0 1\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n0 1\\n0 1\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 1\\n0 1\\n0 1\\n1 1\\n0 0\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n0 1\\n1 1\\n1 1\\n0 0\\n0 1\\n0 1\\n0 1\\n1 0\\n1 1\\n0 1\\n0 1\\n1 1\\n0 1\\n1 0\\n0 1\\n1 1\\n0 1\\n1 1\\n1 1\\n0 1\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n1 1\\n0 1\\n1 0\\n0 1\\n1 1\\n0 1\\n0 1\\n1 1\\n1 0\\n1 1\\n1 1\\n0 1\\n1 0\\n0 0\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n0 0\\n0 1\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 1\\n0 1\\n0 0\\n0 1\\n0 1\\n1 0\\n1 1\\n1 1\\n1 0\\n1 1\\n1 1\\n0 1\\n0 1\\n1 1\\n0 1\\n1 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n1 0\\n1 1\\n0 1\\n1 1\\n1 0\\n1 1\\n0 1\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 1\\n1 0\\n1 0\\n1 0\\n1 0\\n0 0\\n0 1\\n0 0\\n0 0\\n1 0\\n1 1\\n0 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n1 1\\n1 0\\n1 1\\n0 1\\n1 0\\n0 0\\n1 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\nassert solution('2 2\\n0 0\\n0 1\\n1 0\\n1 1') == '1.5707963267949'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('5 5') == '22.06840261138916'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('5 5') == '7.574576'\nassert solution('3 3') == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == \"6.283185\"\nassert solution('1 2') == \"0.000277\"\nassert solution('2 5') == \"0.000250943740234375\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2''') == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"6.283185\""
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2\n1 3\n2 1\n\"\"\") == \"6.283185\"\nassert solution(\"\"\"\n1 1\n1 2\n2 1\n\"\"\") == \"6.283185\"\nassert solution(\"\"\"\n2\n3 1\n2 2\n\"\"\") == \"0.785398\"\nassert solution(\"\"\"\n2\n3 2\n2 3\n\"\"\") == \"1.5707963267949\"\nassert solution(\"\"\"\n5\n2 3\n1 2\n3 1\n4 2\n3 4\n\"\"\") == \"8.52361\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '1 2 3'\nassert solution(input()) == '1 3 5 2'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3 4\"\nassert solution(\"5\") == \"1 2 3 4 5\"\nassert solution(\"6\") == \"1 2 3 4 5 6\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0\n2\n3\n1\n''') == '1 2 3'\nassert solution('''\n0\n4\n5\n2\n8\n7\n3\n1\n''') == '1 2 3'\n'''\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2 3') == '1 2 3'\nassert solution('2\\n1 3') == '1 2 3'\nassert solution('3\\n1 2') == '1 2 3'\nassert solution('4\\n1 3 2') == '1 3 2 4'\nassert solution('5\\n1 3 2 4') == '1 3 2 4 5'\n\"\"\"\nfrom collections import deque\n\nn = int(input())"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1 2'\nassert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('10') == '1 2 3 4 5 6 7 8 9'"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"5\") == \"2 1 4 3\"\nassert solution(\"9\") == \"2 1 4 3 5 6 7 8\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"2\") == \"1 2\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n') == '1 2 3'\nassert solution('3\\n1 2 3\\n') == '1 2 3'\nassert solution('5\\n1 2 3 4 5\\n') == '1 2 3 4 5'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"1 2 3\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 2\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"1 2 3 4\""
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\nprint(\"All tests passed!\")\nassert solution() == \"2\"\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\nassert solution(\"2 4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '1'\nassert solution('4 5') == '2'\nassert solution('4 6') == '3'\nassert solution('3 3') == '1 2 3'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1 2'\nassert solution('4 4') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\nassert solution('''\n3\n1 2\n1 3\n2 4\n''') == '1 2 3 4'\nassert solution('''\n1\n1 2\n''') == '1 2'\nassert solution('''\n2\n1 2\n''') == '1 2'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n3 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\nassert solution(\n'''\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4\\n1 2\\n1 3\\n2 4') == '1 2 3 4'\nassert solution('5 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '1 2 3 4'\nassert solution('10 10\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 5\\n4 5') == '1 2 3 4'\nassert solution('10 10\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 5\\n4 5\\n5 6') == '1 2 3 4'\nassert solution('6 7\\n2 3\\n1 2\\n3 4\\n1 5\\n4 6\\n2 5') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n1 2\n1 3\n2 4\n3 4\n''') == '1'\nassert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1\\n1 2\\n') == '1'\n\nassert solution('2 2\\n1 2\\n2 1\\n') == '2'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n1 2\\n') == '1'\n\nassert solution('3 4\\n1 2\\n2 4\\n3 1\\n') == '2'\n\nassert solution('5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 4\\n') == '5'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 2\\n\") == \"1\"\nassert solution(\"4 3\\n1 2\\n1 3\\n2 3\\n\") == \"3\"\nassert solution(\"2 1\\n1 2\\n\") == \"1\"\nassert solution(\"3 5\\n1 2\\n1 3\\n3 2\\n\") == \"2\"\nassert solution(\"10 9\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\\n1 19\\n1 20\\n1 21\\n1 22\\n1 23\\n1 24\\n1 25\\n1 26\\n1 27\\n1 28\\n1 29\\n1 30\\n1 31\\n1 32\\n1 33\\n1 34\\n1 35\\n1 36\\n1 37\\n1 38\\n1 39\\n1 40\\n1 41\\n1 42\\n1 43\\n1 44\\n1 45\\n1 46\\n1 47\\n1 48\\n1 49\\n1 50\\n1 51\\n1 52\\n1 53\\n1 54\\n1 55\\n1 56\\n1 57\\n1 58\\n1 59\\n1 60\\n1 61\\n1 62\\n1 63\\n1 64\\n1 65\\n1 66\\n1 67\\n1 68\\n1 69\\n1 70\\n1 71\\n1 72\\n1 73\\n1 74\\n1 75\\n1 76\\n1 77\\n1 78\\n1 79\\n1 80\\n1 81\\n1 82\\n1 83\\n1 84\\n1 85\\n1 86\\n1 87\\n1 88\\n1 89\\n1 90\\n1 91\\n1 92\\n1 93\\n1 94\\n1 95\\n1 96\\n1 97\\n1 98\\n1 99\\n1 100\\n\") == \"3\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1\n1 2\n''') == '1'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1\\n1 2') == '1'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1\""
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\n1 2\n''') == '1'\nassert solution('''\n1 1\n1 2\n''') == '2'\nassert solution('''\n1 1\n1 2\n''') == '1'\n''')"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 2\\n\") == \"1\"\nassert solution(\"4 1\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\nassert solution(\"4 1\\n1 2\\n3 2\\n1 3\\n2 4\\n\") == \"3\"\nassert solution(\"4 1\\n1 2\\n2 3\\n2 4\\n2 5\\n3 4\\n\") == \"3\"\nassert solution(\"4 1\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n1 2\") == \"1\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10\n1\n3\n5\n8\n10\n''') == '45'\nassert solution('''\n13\n3\n5\n8\n10\n12\n''') == '100'\nassert solution('''\n15\n9\n14\n1\n8\n6\n2\n4\n10\n11\n13\n7\n''') == '330'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '45'\nassert solution('10') == '0'\nassert solution('20') == '100'\nassert solution('100') == '10000'\nassert solution('10') == '0'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '45'\nassert solution('4') == '12'\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '45'\n\nSample Input:\n2\nSample Output:\n0\n\"\"\""
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"45\""
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '45'\nassert solution('1000') == '11156547075292934116855706023618772367287935093209403637165212932489090766069781444188949693633454434845254515163616458325971092722038463394232441101093689629753303782643267855122301093'\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '45'\nassert solution('1000000') == '8967'\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '10'\nassert solution('3') == '30'\nassert solution('4') == '60'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '45'\nassert solution('10') == '700'\nassert solution('100') == '1440'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"3\"\nassert solution(\"100000\") == \"55\"\nassert solution(\"100000000\") == \"3141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367895889783680633895534581284197113020995735852875962349671305468261938526316697238944730953125\"\n\"\"\"\n\nstdin = input()\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 20 20\") == \"4\"\n\"\"\"\n\n\"\"\"\n\u89e3\u9898\u601d\u8def\uff1a\n\u7b2c\u4e00\u79cd\uff1a\u4f7f\u7528\u4ece\u5927\u5230\u5c0f\u7684\u65b9\u6cd5\uff0c\u53ea\u9700\u8981\u904d\u5386\u4e24\u6b21\u6570\u7ec4\uff0c\u53d6\u6700\u5c0f\u503c\uff0c\u904d\u5386\u5f97\u5230\u6700\u5927\u503c\n\u7b2c\u4e8c\u79cd\uff1a\u9996\u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u5728\u4e24\u6b21\u904d\u5386\u5f97\u5230\u6700\u5927\u503c\u7684\u65f6\u5019\uff0c\u9009\u62e9\u6700\u5927\u503c\u7684\u524dn-1\u4e2a\u503c\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"5 20 20\n7 11 9 12 2\n\"\"\") == \"4\"\nprint(\"All tests passed!\")"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 20 20\\n7 11 9 12 2\") == \"4\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 20 20\\n7 11 9 12 2\"\n) == \"4\"\nprint(solution(\n    \"5 20 20\\n7 11 9 12 2\"\n))"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 20 20\") == \"4\"\nassert solution(\"7 11 9 12 2\") == \"6\"\nassert solution(\"7 1 9 12 2\") == \"7\"\nassert solution(\"3 1 9 12 2\") == \"2\"\nassert solution(\"5 3 9 12 2\") == \"1\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 20 20\n7 11 9 12 2\n''') == '4'\nassert solution('''\n10 10 10\n3 8 8 8\n''') == '1'\nassert solution('''\n20 20 20\n7 11 9 12 2\n''') == '2'\nassert solution('''\n5 20 20\n20 20 20\n''') == '1'\n''')"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 20 20') == '4', 'Should be 4'\nassert solution('7 11 9 12 2') == '3', 'Should be 3'\n\n'''"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 20 20') == \"4\"\nassert solution('7 11 9 12 2') == \"4\"\nassert solution('5 3 5') == \"1\"\nassert solution('5 6 9') == \"3\"\nassert solution('4 4 4') == \"1\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 20 20\n10 20 15\n''') == '4'\n\nassert solution('''\n3 20 20\n7 20 8\n''') == '1'\n\nassert solution('''\n5 20 20\n10 10 5 1\n''') == '1'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 20 20\") == \"4\"\nassert solution(\"7 11 9 12 2\") == \"4\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 4\njoe 1 antonio1\njoe 1 antonio1\njoe 1 antonio1\njoe 1 antonio1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 4\njoe 1 antonio1\njoe 1 antonio1\njoe 1 antonio1\njoe 1 antonio1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 3\njane 1 antonio1\njane 1 antonio1\njane 1 antonio1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == \"2\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '2'\nassert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '2'\nassert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\n') == '1'\nassert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 harrypotter1\\n') == '1'\nassert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 harrypotter1\\n') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\") == \"2\""
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings') == '2'\nassert solution('10 5\\nkenny 10 harrypotter1\\ncharlie 10 lordoftherings\\njenny 10 harrypotter1\\nlaura 10 lordoftherings') == '3'\nassert solution('10 20\\nkenny 10 harrypotter1\\ncharlie 10 lordoftherings\\njenny 10 harrypotter1\\nlaura 10 lordoftherings') == '1'"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\nkenny harrypotter 1\\ncharlie 1 lordoftherings\\njenny harrypotter 1\\nlaura harrypotter 1\\n') == \"2\"\nassert solution('2 2\\nkenny harrypotter 1\\ncharlie 1 lordoftherings\\njenny harrypotter 1\\nlaura harrypotter 1\\n') == \"1\"\nassert solution('2 2\\ncharlie harrypotter 1\\njenny harrypotter 1\\nlaura harrypotter 1\\n') == \"1\"\nassert solution('2 3\\nkenny harrypotter 1\\ncharlie harrypotter 1\\njenny harrypotter 1\\nlaura harrypotter 1\\n') == \"1\"\nassert solution('1 1\\n') == \"1\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings') == '2'\nassert solution('3 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 harrypotter1') == '2'\nassert solution('10 2\\njenny 1 harrypotter1\\nlaura 1 harrypotter1\\nkenny 1 harrypotter1\\nharrypotter 1 harrypotter1\\ncharlie 1 harrypotter1\\nlaura 1 harrypotter1\\nharriet 1 harrypotter1\\nharrypotter 1 harrypotter1\\nkenny 1 harrypotter1') == '3'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '2'"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"2 1\"\nassert solution(\"0\") == \"0 0\"\nassert solution(\"111\") == \"3 1\"\n\"\"\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\n01') == '2 1'\nassert solution('2 2\\n00 01') == '3 2'\n\n'''\n\nk = int(input())\nli = input()\ncount = 1\nflag = 0\nls = []\nfor i in range(0,k):\n    ls.append(li[i])\nprint(ls)\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '2 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"1 2\"\n\nstdin = \"\"\"\n3\n100\n1 1\n0\n1 1\n1 1\n1 0\n0\n0\n1 1\n0\n0\n1 1\n1 1\n1 0\n1 1\n0\n0\n0\n1 1\n1 1\n0\n0\n1 1\n0\n0\n0\n1 1\n0\n0\n1 1\n1 1\n0\n1 1\n0\n0\n1 1\n1 1\n0\n1 1\n0\n0\n0\n1 1\n0\n0\n1 1\n0\n0\n1 1\n0\n0\n1 1\n0\n0\n0\n1 1\n1 1\n0\n0\n0\n1 1\n0\n0\n1 1\n1 1\n0\n1 1\n0\n0\n1 1\n1 1\n0\n1 1\n0\n0\n1 1\n0\n0\n1 1\n1 1\n0\n1 1\n0\n0\n0\n0\n1 1\n0\n0\n0\n0\n0\n0\n1 1\n1 1\n0\n0\n0\n0\n0\n0\n1 1\n1 1\n0\n0\n1 1\n0\n0\n1 1\n1 1\n0\n0\n0\n1 1\n1 1\n0\n0\n1 1\n1 1\n0\n0\n0\n1 1\n0\n0\n1 1\n0\n0\n0\n1 1\n1 1\n0\n0\n1 1\n1 1\n0\n0\n0\n1 1\n0\n0\n0\n0\n0\n1 1\n1 1\n0\n0\n0\n1 1\n0\n0\n1 1\n1 1\n0\n0\n0\n0\n0\n1 1\n0\n0\n0\n0\n0\n0\n0\n1 1\n1 1\n0\n0\n1 1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1 1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1 1\n1 1\n0\n0\n1 1\n1 1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1 1'\nassert solution('01') == '2 1'\nassert solution('11') == '2 2'\nassert solution('001000111') == '2 4'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '2 1'\nassert solution(input()) == '2 3'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"01\") == \"1 1\"\nassert solution(\"00\") == \"1\"\nassert solution(\"111\") == \"2 2\"\nassert solution(\"01100000\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n00\n1\n0\n''') == '2 1'\n\nassert solution('''\n4\n00\n11\n11\n''') == '1 4'\n\nassert solution('''\n6\n00\n10\n01\n11\n00\n''') == '3 3'\n\n'''\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n1 0\n1 0\n1 1\n''') == '1 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n01\") == \"1 2\"\nassert solution(\"1\\n00\") == \"1 1\"\nassert solution(\"1\\n11\") == \"1 1\"\nassert solution(\"1\\n11\") == \"1 1\"\nassert solution(\"1\\n00\\n01\\n11\") == \"1 2 2\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n5\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Input:\n5\n3\n2 1\n1 1\n2 2\n2 2\n3 1\nSample Output:\n4 5\n2 1\n1 1\n22\n2 1\n2 2\n2 2\n3 1\n\"\"\") == \"2 2\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n3\n1 1\n1 1\n2\n1 2\n1 1\n\"\"\") == \"2 2\\n3 3\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n4 4\n2 3\n1 2\n3 2\n1 3\n3 2\n1 2\n1 1\n3 2\n3 2\n1 1\n3 2\n2 1\n1 3\n3 2\n2 1\n3 2\n\"\"\") == \"3 2\"\n\nassert solution(r\"\"\"\n4 4\n2 3\n1 2\n3 2\n1 3\n3 2\n1 2\n1 1\n3 2\n3 2\n1 1\n3 2\n\"\"\") == \"2 1\"\n\nassert solution(r\"\"\"\n2 3\n2 2\n2 2\n\"\"\") == \"2 2\"\n\nassert solution(r\"\"\"\n1 2\n\"\"\") == \"1 2\"\n\nassert solution(r\"\"\"\n3 3\n1 2\n3 3\n1 2\n\"\"\") == \"3 3\""
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4 3'\nassert solution('1\\n3') == '1 2 3'\nassert solution('2\\n') == '2'\nassert solution('4\\n') == '4'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n4 1\\n2 123\\n2 2\\n21\\n10\") == \"3 3\\n2123\\n1012\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Input:\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n''') == '''2123\n1012\n2233\n2233\n'''\n\nassert solution('''\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n''') == '''3 4\n2123\n1012\n2233\n2233\n'''\n\nassert solution('''\n5 1\n1\n1 2\n1 3\n1 4\n1 5\nSample Output:\n1\n1\n1\n1\n1\n1\n''') == '''3 3\n12\n23\n12\n13\n12\n'''\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Input:\n4\n4 1\n2 123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2 123\n1012\n2123\n----\n2233\n2233\n1111\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '4 3'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '4 3'\nassert solution('4 2') == '12'\nassert solution('10 10') == '1012'"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'pango\\nxorg-x11\\nfreetype\\nglib2\\nzlib\\nglib2\\nlibjpeg\\nlibtiff\\npcre\\nxorg-x11\\nlisp\\nfreetype\\npcre\\n'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\natk\\nfreetype\\nglib2\\npango\\nxorg-x11-libs\\nlisp\\npcre\\n0\\n\""
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\npango\\nzlib\\ngtk2\\nvim-X11\\n'\n\n'''\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n12\ngcc\nlibc\npython\nbzip2\ngo\nzlib\nlibtiff\nxz\nzstd\nliblzma\nzstd\ngzip\nlibgcc\ngcc\nzlib\npython3\nbzip2\nzlib\nzstd\nzstd\ngzip\nzstd\n''') == 'bzip2 zstd go libc gcc liblzma liblzma zlib python zstd python3 zstd gzip zlib zlibzstd libzlib libzstd libzstd liblzma liblzma libzstd libzstd zlib zstd gzip libgcc libzlib liblzma liblzma libzstd libzstd libzstd libzstd libzstd zstd zstd gzip libgcc libzlib liblzma liblzma libzstd libzstd libzstd libzstd zstd zstd gzip liblzma liblzma zstd zstd gzip zstd libgcc libzlib liblzma liblzma zstd zstd gzip zstd libzstd libzstd libzstd zstd libzstd gzip zstd liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzlib libzlib zstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip liblzma liblzma zstd zstd gzip libzlib libzlib zstd libzstd libzstd zstd gzip liblzma liblzma zstd zstd gzip zstd libgcc libzlib liblzma liblzma zstd zstd gzip zstd libzstd libzstd libzstd zstd gzip liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzlib libzlib zstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip liblzma liblzma zstd zstd gzip zstd libgcc libzlib liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip liblzma liblzma zstd zstd gzip libzlib libzlib zstd libzstd libzstd zstd gzip libzstd libzstd libzstd zstd gzip zstd libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip liblzma liblzma zstd zstd gzip zstd libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip zstd libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd z"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0\\n') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\npango\\nzlib\\ngtk2\\nxorg-x11-libs\\nvim-X11\\nxorg-x11\\nglib2\\nfreetype\\npcre\\n'"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"atk\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk,grep,libjpeg,freetype,gtk2,libattr,libtiff,pango,pcre,xorg-x11-libs,vim-common,vim-X11,emacs,libattr,freetype,zlib,atk,pango,libjpeg,libtiff,glib2,pcre,pcre,gtk2,freetype,xorg-x11,xorg-x11-libs,freetype,pcre,xorg-x11,pango,zlib,gtk2,pango,libattr,lisp,atk,grep,pango,glib2,pcre,freetype,xorg-x11,gtk2,pango,xorg-x11-libs,pcre,freetype,gtk2,lisp,atk,pango,pcre,pcre,emacs,freetype,xorg-x11,freetype,gtk2,pango,xorg-x11,freetype,gtk2,xorg-x11,freetype,pcre,emacs,grep,xorg-x11,emacs,libattr,gtk2,xorg-x11,xorg-x11-libs,zlib,freetype,atk,pango,xorg-x11,xorg-x11-libs,gtk2,freetype,pcre,pcre,lisp,atk,freetype,xorg-x11,xorg-x11-libs,pango,freetype,gtk2,xorg-x11,gtk2,freetype,gtk2,xorg-x11,gtk2,freetype,pcre,gtk2,freetype,gtk2,pango,gtk2,pango,gtk2,pango,freetype,xorg-x11,pango,xorg-x11,xorg-x11-libs,freetype,pcre,gtk2,gtk2,gtk2,gtk2,pango,gtk2,pango,gtk2,pango,gtk2,xorg-x11,freetype,pango,xorg-x11,freetype,pango,freetype,gtk2,freetype,freetype,pango,pango,pango,pango,freetype,xorg-x11,pango,pango,xorg-x11,pango,xorg-x11,gtk2,gtk2,freetype,freetype,pango,freetype,pango,freetype,xorg-x11,freetype,pango,gtk2,gtk2,freetype,gtk2,pango,xorg-x11,gtk2,pango,freetype,gtk2,pango,gtk2,pango,gtk2,pango,freetype,pcre,atk,xorg-x11,xorg-x11-libs,freetype,gtk2,pango,xorg-x11,gtk2,pango,freetype,xorg-x11,gtk2,pango,xorg-x11,freetype,pcre,pcre,freetype,pcre,gtk2,gtk2,pango,gtk2,xorg-x11,freetype,pango,xorg-x11,gtk2,xorg-x11,pango,xorg-x11,gtk2,xorg-x11,gtk2,xorg-x11,xorg-x11-libs,xorg-x11,gtk2,xorg-x11,xorg-x11-libs,gtk2,xorg-x11,gtk2,xorg-x11,xorg-x11-libs,xorg-x11,xorg-x11,gtk2,gtk2,pango,xorg-x11,pango,gtk2,pango,freetype,xorg-x11,pango,xorg-x11,freetype,xorg-x11,xorg-x11-libs,xorg-x11,xorg-x11-libs,gtk2,xorg-x11,xorg-x11,xorg-x11,xorg-x11-libs,freetype,xorg-x11,pango,gtk2,xorg-x11,xorg-x11,pango,xorg-x11,gtk2,pango,xorg-x11,xorg-x11,xorg-x11,xorg-x11-libs,xorg-x11,xorg-x11,gtk2,xorg-x11,gtk2,xorg-x11,gtk2,xorg-x11,xorg-x11,gtk2,xorg-x11,gtk2,xorg-x"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('14\\nlibattr\\nvim-common\\ngtk2 libattr\\nvim-common\\nglibtiff\\natk\\npango\\nglib2\\natk') == 'atk\\npango\\nglib2\\nlibattr\\ngtk2\\nvim-common\\nxorg-x11-libs\\nfreetype\\npcre\\n'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n12\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk freetype gtk2 libattr libjpeg pango glib2 vim-X11 pango xorg-x11 lisp pcre grep pcre xorg-x11-libs freetype vim-common gtk2 zlib libtiff atk libattr libjpeg libtiff libjpeg zlib libattr libjpeg atk zlib libjpeg pango zlib freetype freemit gtk2 xorg-x11 xorg-x11-libs freetype vim-X11 vim-common gtk2 pango glib2 pango glib2 pango freetype freemit gtk2 xorg-x11 xorg-x11-libs pango freetype freemit gtk2 gtk2 xorg-x11 xorg-x11-libs freetype pango xorg-x11 xorg-x11-libs freetype freemit\n'''\nSample Input:\n9\npandas datetime\npandas datetime\npandas datetime\nmatplotlib\nmatplotlib\nnumpy\nnumpy\nmatplotlib\npandas\npandas\nnumpy\nnumpy\nmatplotlib\nnumpy\nmatplotlib\npandas\n0\nSample Output:\npandas matplotlib numpy datetime\nnumpy matplotlib pandas datetime\nmatplotlib matplotlib pandas datetime\nnumpy numpy pandas matplotlib pandas\nmatplotlib numpy pandas numpy\nnumpy numpy pandas numpy\npandas pandas pandas\n0\n'''\nimport collections\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nclass TestSolution(unittest.TestCase):\n    def test_given_cases(self):\n        for n, case in enumerate(stdin.split('\\n')[:-1]):\n            data = case.split()\n            n_packages = int(data[0])\n            packages = collections.deque(data[1:])\n            order = collections.deque()\n            for i in range(n_packages):\n                package = list(packages)\n                if not package:\n                    break\n                order.append(package.pop(0))\n            order_str =''.join(sorted(order))\n            if n == 0:\n                if order_str!= 'cannot be ordered':\n                    print(order_str)\n                    break\n            else:\n                if order_str!= ''.join(sorted(set(order_str))):\n                    print(order_str)\n                    break\n        "
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nvim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\nfreetype') == 'atk\\nfreetype\\npango\\nzlib\\nglib2\\nglib2\\nlibjpeg\\nlibattr\\nvim-common\\ngtk2\\nxorg-x11-libs\\nxorg-x11\\npango\\n'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '12'\nassert solution('1 5') == '18'\nassert solution('4 8') == '16'\nassert solution('3 2') == '3'\nassert solution('1 2') == '12'\n\nimport sys\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('32 20') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"16\"\nassert solution(\"9 2\") == \"16\"\nassert solution(\"11 1\") == \"10\"\nassert solution(\"18 1\") == \"10\"\nassert solution(\"20 1\") == \"10\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('32 20') == '16'\nassert solution('-10 2') == '8'"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"32 20\") == \"16\""
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"32 20\") == \"16\""
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '16'"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"32 20\") == \"16\""
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n....\n.#.#\n....\n''') == '13'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 5\n.########\n.########\n.##...#.\n.###..#.\n#########\n#########\n#########\n#########''') == '13'"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 4\n....\n.#.#\n....\n\"\"\") == \"5 13\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n....\n...#\n''') == '2 3'\n\nassert solution('''3 3\n....\n...#\n''') == '1 2'\n\nassert solution('''3 3\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '2'\nassert solution('1 2') == '3'\nassert solution('1 3') == '3'\nassert solution('1 4') == '4'\nassert solution('2 1') == '5'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n...#\n...#\n.###\n''') == '5 13'\n\nassert solution('''\n4 3\n###\n##.\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n8 8\n...##...\n..##..#.\n.##...##\n##...#..\n.###.###\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4\\n...#\\n.#.#\\n....') == \"13\"\n\nassert solution('3 3\\n...##\\n#.###\\n.###.\\n.####\\n') == \"0\"\n\nassert solution('4 4\\n.##.\\n...#\\n###.\\n#...\\n') == \"4\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\\\n3\n...\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n1\\n2\\n') == '5 13'\nassert solution('1\\n2\\n1\\n2\\n') == '5 13'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '5'\nassert solution('5 4') == '4'\nassert solution('3 4') == '5'\nassert solution('9 9') == '7'\nassert solution('1') == '?'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"1 2 5 1\") == \"5\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"1 2 5 1\") == \"5\"\nassert solution(\"3 3\") == \"5\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 2 5 1\n2 3 3 1\n3 1? 0''') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '5'\nassert solution('4 3') == '4'\nassert solution('5 4') == '5'\nassert solution('6 5') == '5'\nassert solution('7 5') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\\n') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '5'\nassert solution('1 2 5 1') == '5'\nassert solution('2 3 3 1') == '1'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\n\n'''\n    def solution(stdin: str) -> str:\n        pass\n    return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        "
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\") == \"5\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n    1 2\n    2 3\n    3 1\n    ''') == '5'\n\nassert solution(\n    '''\n    3 3\n    1 2 5 1\n    2 3 3 1\n    3 1? 0\n    ''') == '5'\n\nassert solution(\n    '''\n    1 2\n    2 3\n    3 1\n    ''') == '5'\n\nassert solution(\n    '''\n    1 2\n    2 3\n    3 1\n    ''') == '5'\n\nassert solution(\n    '''\n    1 2\n    2 3\n    3 1\n    ''') == '5'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '5'\n\"\"\"\n\n###############################################################################\n##\n## Sample Inputs\n##\n###############################################################################\n\nTEST_INPUT_1 = '''\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n'''\n\nTEST_INPUT_2 = '''\n3 5\n2 1 7 5\n1 3 5 1\n5 3? 3\n3 1 2 1\n'''\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n-1 0\n-1 1\n0 1\n''') == '0'\nassert solution('''\n2 3\n-1 0\n1 -1\n0 1\n''') == '1'\nassert solution('''\n2 3\n-1 0\n1 0\n0 1\n''') == '2'\nassert solution('''\n2 3\n-1 0\n1 1\n0 1\n''') == '2'\nassert solution('''\n2 3\n-1 0\n1 2\n0 1\n''') == '2'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 2') == '1'\nassert solution('2 1') == '1'\nassert solution('3 1') == '2'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '0'\nassert solution('1 4') == '1'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3') == '0'\nassert solution('2\\n4 2\\n3') == '3'"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3\n-1 0\n-1 1\n0 1\n''') == '3'\nassert solution('''\n1 4\n0 0\n0 0\n1 0\n''') == '4'\nassert solution('''\n5 6\n0 0\n1 0\n0 0\n0 0\n0 0\n''') == '5'\nassert solution('''\n2 3\n-1 0\n-1 1\n0 1\n''') == '2'"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '0'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\") == \"3\"\nassert solution(\"10 100\\n1 0\\n1 1\\n10 1\\n20 1\\n5 10\\n5 20\\n3 10\\n3 20\\n5 20\\n8 20\\n0 10\\n8 10\\n15 10\\n0 20\\n15 20\\n6 20\") == \"10\"\nassert solution(\"10 10\\n10 20\\n2 20\\n2 20\\n5 10\\n5 20\\n3 10\\n3 20\\n5 20\\n8 20\\n0 10\\n0 20\\n15 10\\n15 20\\n6 20\") == \"10\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n-1 0\n-1 1\n0 1\n''') == '0'\nassert solution('''\n1 7\n0 1\n0 2\n0 3\n1 4\n0 5\n1 6\n''') == '4'\n'''\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4\\n-1 -1') == '3'\nassert solution('4 2\\n-1 1') == '2'\nassert solution('3 1\\n-1 -1') == '2'\n\"\"\""
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2 3\n-1 0\n-1 1\n0 1\n\"\"\") == \"0\""
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\n') == '0'\nassert solution('5 7\\n') == '4'\nassert solution('13 30\\n') == '14'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n3\n4\n6''') == '4'\nassert solution('''2\n2\n3\n2''') == '3'\nassert solution('''3\n3\n4\n3''') == '2'\nassert solution('''4\n3\n4\n2''') == '3'\nassert solution('''5\n1\n1\n1''') == '5'"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"3\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n9 6 2 4') == '6'\nassert solution('2\\n7 9 8 5') == '1'\nassert solution('3\\n5 2 3 6') == '2'\nassert solution('4\\n2 4 4 4') == '1'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n9 6 2 4\n\"\"\") == \"6\"\nassert solution(\"\"\"\n6\n3 1 1 3 1 3 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n8\n7 8 7 7 8 7 7 7 7\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == '6'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"5\") == \"6\"\n\"\"\"\nimport time\nfrom math import sqrt\n\nfrom utils import *\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1 1 3 2') == \"2.000000\"\nassert solution('1 1 1 2 2') == \"2.000000\"\nassert solution('1 0 0 2 3') == \"2.000000\"\nassert solution('1 3 2 4 5') == \"2.000000\"\nassert solution('1 1 2 2 2') == \"2.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 1 1 3 2''') == '2.000000'\nassert solution('''2 5 1''') == '2.000000'"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"10 10 1 10\") == \"10000.0\"\n\"\"\"\nfrom collections import namedtuple\n\nCoordinate = namedtuple('Coordinate', ('x', 'y'))\nCoordinate.__repr__ = lambda self: f'({self.x}, {self.y})'\n\nassert Coordinate(1, 2) == Coordinate(x=1, y=2)\nassert Coordinate(1, 2).x == 1\nassert Coordinate(1, 2).y == 2\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"3 3 1 3 1\") == \"2.500000\"\n\"\"\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '1.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\n\nassert solution('2 5 1') == '4.99999'"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 1 1 3 2\"\"\") == \"2.000000\"\nassert solution(\"\"\"2 5 1\"\"\") == \"1.000000\""
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '2.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"2 5 1\") == \"3.000000\""
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '96'\nassert solution('4') == '4964'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '5'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3,2,4]) == 96\nassert solution([3,1,2,3]) == 18\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '96'\n\"\"\""
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '96'\nassert solution('5') == '1068'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n1 2\n2 3\n4\n1 2\n1 3\n1 4\nSample Input:\n5\n1 2\n2 3\n4\n1 2\n1 3\n4\nSample Output:\n16\n''') == \"96\""
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"96\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '96'\nassert solution('2') == '81'\nassert solution('3') == '96'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == '96', 'Should be 96'\n\nassert solution('''\n4\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == '48', 'Should be 48'\n\nassert solution('''\n5\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == '64', 'Should be 64'\n'''\n\n'''"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('3\\n0 0\\n0 1\\n1 0\\n1 1') == '4'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\\n\") == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '3'\nassert solution('6\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n1 3\\n2 3\\n3 3\\n') == '5'\nassert solution('50\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n1 3\\n2 3\\n3 3\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\\n6 4\\n6 5\\n6 6\\n7 7\\n7 8\\n7 9\\n') == '8'\n\"\"\""
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n2 1\\n2 0\\n1 1\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('7\\n-2 -2\\n0 1\\n0 2\\n-1 -1\\n0 0\\n1 1\\n2 0') == '2'\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n0 0\\n0 1\\n1 0\\n1 1\\n\") == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('6\\n0 0\\n1 0\\n2 1\\n3 2\\n4 3\\n5 4') == '6'\nassert solution('100000\\n0 0\\n0 1\\n1 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6') == '153'\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\nassert solution(\"3\\n0 0\\n1 0\\n1 1\") == \"2\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 8\\n3 1\\n1 4\\n') == '10'\nassert solution('3 2\\n2 1\\n1 2\\n') == '9'\nassert solution('3 3\\n2 1\\n1 2\\n') == '6'"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 8\\n3 1\\n1 4') == '10\\n10\\n9'\nassert solution('5\\n10 30 20 70 40\\n20 50 20 80\\n30 40 40 20\\n40 20 20 20\\n20 20 20 20') == '100\\n100\\n100\\n90'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2 8\n3 1\n1 4\n''') == '10'\nassert solution('''3\n2 8\n3 1\n1 4\n''') == '10'\nassert solution('''10\n2 8\n3 1\n1 4\n''') == '13'\nassert solution('''10\n2 8\n3 1\n1 4\n''') == '13'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2\n2 1\n''') == '10'\nassert solution('''\n3 5\n3 1\n2 5\n''') == '10'\nassert solution('''\n5 8\n5 1\n4 7\n3 2\n3 4\n''') == '10'\nassert solution('''\n1 3\n4 6\n5 3\n1 2\n4 5\n''') == '10'\nassert solution('''\n10 7\n8 3\n6 1\n4 2\n7 5\n2 4\n4 3\n6 5\n5 2\n4 1\n7 3\n''') == '12'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '10'\nassert solution('2 8') == '10'\nassert solution('3 1') == '9'\nassert solution('1 4') == '10'"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 8') == '10'\nassert solution('3 1') == '9'\nassert solution('1 4') == '9'"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\\n10\\n9\""
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"10\""
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 8\\n3 1\\n1 4\\n') == '10\\n10\\n9'\nassert solution('5\\n4 2\\n3 1\\n1 1\\n5\\n') == '10\\n10\\n9\\n8\\n7'\nassert solution('1\\n1\\n') == '0'\nprint('Tests Passed')\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == \"IMPOSSIBLE\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n.F.') == 'IMPOSSIBLE'\nassert solution('4 4\\n####\\n#JF#\\n#.J#\\n#.J#') == '3'"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 4\\n###') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n####\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5\\n######\\n#.J#\\n#..#\\n#..#') == 'IMPOSSIBLE'\nassert solution('5 5\\n######\\n#.J#\\n#..#\\n###') == '3'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4\\n####\\n#JF#\\n#..#\\n#..#') == 'IMPOSSIBLE'\n\nassert solution('4 4\\n#.#.\\n##.#\\n###.\\n#.J\\n.JF') == '2'\n\nassert solution('4 4\\n#####\\n###.#\\n#.#F\\n#F.J\\n###.#\\n#####') == '3'\n\nassert solution('4 4\\n###.\\n###.#\\n#.#F\\n#F.J\\n###.#\\n#####') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"IMPOSSIBLE\", \"1st example\"\nassert solution(\"5 3\") == \"IMPOSSIBLE\", \"2nd example\"\nassert solution(\"5 1\") == \"IMPOSSIBLE\", \"3rd example\"\nassert solution(\"7 2\") == \"IMPOSSIBLE\", \"4th example\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5\\n.##.#.#\\n#######\\n#.#.###\\n######.') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\nassert solution(\"4 4\\n#####\\n#JF#\\n#..#\\n#..#\") == \"3\""
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\n\nassert solution(\"4 4\\n####\\n#.JF#\\n#..#\\n#..#\") == \"3\"\n\nassert solution(\"4 4\\n####\\n#JF.\\n#..#\\n#..#\") == \"3\"\n\nassert solution(\"4 4\\n####\\n#JF..\\n#..#\\n#..#\") == \"5\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n6\n1 1\n1 2\n1 2\n4\n\"\"\") == \"0.3\"\n\nassert solution(\"\"\"\n1\n6\n1 1\n1 2\n1 2\n2\n\"\"\") == \"0.0\"\n\nassert solution(\"\"\"\n1\n6\n2 4\n4\n\"\"\") == \"0.16666666667\"\n\nassert solution(\"\"\"\n1\n6\n3 4\n5\n\"\"\") == \"0.3333333333\"\n\nassert solution(\"\"\"\n1\n5\n1 1\n1 2\n1 2\n2\n\"\"\") == \"0.16666666667\""
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 2') == '0.3333333333'"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"0.3333333333333333\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 2\\n2\\n1 1\\n') == '0.3333333333'\n\"\"\"\n\nn, m, d = list(map(int, input().split()))\nh_all = list(map(int, input().split()))\nh_opp = list(map(int, input().split()))"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 2 2\n2\n1 1\n\"\"\") == \"0.3333333333\"\nassert solution(\"\"\"\n3 2 1\n1 2 2\n2\n\"\"\") == \"0.3333333333\"\nassert solution(\"\"\"\n2 2 1\n2\n1 1\n\"\"\") == \"0.5\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\nprint('PASSED')\n\"\"\""
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2 2\n2\n1 1\n\"\"\") == \"0.3333333333\"\nprint(solution(\"\"\"\n1 1\n2\n1\n\"\"\") == \"0.5\")\nprint(solution(\"\"\"\n2\n1 1\n\"\"\") == \"1\")"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 2') == '0.3333333333'"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\\n2\\n1 1\") == \"0.3333333333\"\nassert solution(\"2 2 2\\n2\\n1 1\") == \"0.33\"\nassert solution(\"2 2 2\\n2\\n1 1\") == \"0.3\"\nassert solution(\"2 2 2\\n2\\n1 1\") == \"0.32\"\nassert solution(\"2 2 2\\n2\\n1 1\") == \"0.319999999999\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 2\\n2\\n1 1\\n') == '0.3333333333'\nassert solution('10 1 2\\n1 1\\n') == '0.3333333333'\nassert solution('9 1 2\\n1 1\\n') == '0.3333333333'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1023'\nassert solution(input_stdin) == '1023'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n11') == '2'\nassert solution('3\\n111') == '0'\nassert solution('4\\n11111') == '2'\nassert solution('5\\n1101111') == '3'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1') == '11'\nassert solution('4\\n2') == '110'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == '1023'\nassert solution('50') == '103'\nassert solution('-1') == '0'\nassert solution('1*1') == '1'\nassert solution('10') == '1023'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '113'\nassert solution('3') == '111'\nassert solution('2') == '11'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1023'\nSample Input:\n5\n0011\nSample Output:\n1\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1023\"\n\n\"\"\""
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10\\n1') == '1023'\nassert solution('10\\n1*1') == '1023'\nassert solution('10\\n11') == '1'\nassert solution('10\\n1101') == '1'\nassert solution('10\\n1111') == '1'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"1\"\nassert solution(\"1011\") == \"1\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10\\n11\") == \"1023\"\nassert solution(\"10\\n01\") == \"1023\"\n\"\"\"\n\nstdin = input()\nn = int(stdin)\nstring = stdin\npattern = []\n\nfor i in range(1, n+1):\n    pattern.append([1] * i + [0])\n\npattern = ''.join(map(str, pattern))\n\nprint(len(pattern) - len(string))\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"6\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n2 1\n3 3\n5 3\n7 7\n10 3\n''') == '6'\n\nassert solution('''2 2\n4 1\n5 3\n7 3\n10 3\n''') == '7'\n\nassert solution('''10 8\n10 1\n1 10\n2 10\n10 10\n''') == '7'\n\nassert solution('''100 100\n10 1\n1 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2''') == '6'\nassert solution('''1 2''') == '1'\nassert solution('''4 5''') == '12'\nassert solution('''0 0''') == '0'\nassert solution('''3 0''') == '3'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '6'\nassert solution('0 0') == '0'\nassert solution('1 1') == '1'\nassert solution('3 3') == '9'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"6 5\") == \"3\"\nassert solution(\"4 6\") == \"2\"\nassert solution(\"5 5\") == \"4\"\nassert solution(\"6 3\") == \"0\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '6'\nassert solution('3 2') == '4'\nassert solution('3 3') == '7'\nassert solution('4 4') == '8'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n3 4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"1 1\") == \"1\"\nprint(solution(input()))\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '6'\nassert solution('0 0') == '0'\nassert solution('1 1') == '1'\nassert solution('2 2') == '3'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1500\\n1500\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1500\\n1500\\n1500\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n\"\"\") == \"2930\"\nassert solution(\"\"\"\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n\"\"\") == \"Impossible\"\nassert solution(\"\"\"\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n500\n\"\"\") == \"Impossible\"\nassert solution(\"\"\"\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n7\n\"\"\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == 'Impossible', 'Tests'\nassert solution('3\\n8 10 1\\n1 2 3 5\\n7 3 2 1') == '3180', 'Tests'\nassert solution('4\\n8 10 1\\n1 2 3 5\\n7 3 2 1\\n2 3 4 5') == '5180', 'Tests'\nassert solution('5\\n8 10 1\\n1 2 3 5\\n7 3 2 1\\n2 3 4 5\\n4 5 6 7') == '2930', 'Tests'\nassert solution('6\\n8 10 1\\n1 2 3 5\\n7 3 2 1\\n2 3 4 5\\n4 5 6 7\\n2 6 7 8') == '3180', 'Tests'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n\"\"\") == \"2930\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500''') == '2930'\n\nassert solution('''50 20 7\n20\n30\n50\n60\n70\n80\n90\n100''') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == '2930', 'First'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible', 'Second'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible', 'Third'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible', 'Fourth'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible', 'Fifth'"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1000 2000 7') == '2930'\nassert solution('100') == 'Impossible'\nassert solution('480') == 'Impossible'\nassert solution('500') == 'Impossible'\nassert solution('550') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1000 2000 7\") == \"2930\"\nassert solution(\"100\") == \"Impossible\"\nassert solution(\"480\") == \"Impossible\"\nassert solution(\"500\") == \"Impossible\"\nassert solution(\"550\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1000 2000 7\n100\n480\n500\n550\n1000''') == '2930'\nassert solution('''1000 2000 7\n100\n480\n500\n550\n1000''') == 'Impossible'\nassert solution('''1000 2000 7\n100\n480\n500\n550\n1000''') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nassert solution('1000 2000 7\\n1000\\n480\\n500\\n550\\n1000\\n1400\\n1500') == 'Impossible'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"0 1 2\") == \"1\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 2 1') == '1'\nassert solution('5 2 1') == '3'\nassert solution('4 1 0') == '0'\nassert solution('0 2 0') == '0'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n1\n2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n1\n2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n2\n3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3\\n0\\n0\\n1') == '2'\nassert solution('1 2 3\\n0\\n0\\n1\\n2') == '2'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n0\\n0\\n1') == '2'\nassert solution('2 5 8\\n0 1\\n0\\n0\\n1\\n0') == '1'"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n0\\n0\\n1') == '2'\n\"\"\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('0 0 0') == '0'\nassert solution
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 3\\n0\\n0\\n1\") == \"2\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2 3\n0\n0\n1\n''') == '2', f'Should be 2 but printed {solution(stdin)}'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\"\nassert solution(\"1 2 3\\n0\\n1\\n0\") == \"1\"\nassert solution(\"1 2 3\\n1\\n1\\n0\") == \"1\""
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5') == '10'\nassert solution('5 5\\n-2 -1 -3\\n-4 3 -5\\n-1 -3 3\\n3 2 -5') == '68'\nassert solution('10 10\\n-3 -2 -3\\n-1 -2 -1\\n1 -3 3\\n1 2 -5') == '136'\nassert solution('5 5\\n-2 -1 -3\\n-4 3 -5\\n-1 -3 3\\n3 2 -5\\n-1 1 1') == '2'\nassert solution('5 5\\n-2 -1 -3\\n-4 3 -5\\n-1 -3 3\\n3 2 -5\\n-1 1 1') == '0'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\n'''\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\nassert solution('''\n2 2\n1 1\n''') == '3'\nassert solution('''\n1 2\n-1 -1\n''') == '0'\nassert solution('''\n2 2\n-1 -1\n''') == '0'\nassert solution('''\n1 2\n2 2\n''') == '0'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\nassert solution('''\n3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '20'\nassert solution('''\n10\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '20'\nassert solution('''\n10\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '25'\nassert solution('''\n15\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '25'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\nassert solution('''\n3 2\n-4 -5\n-1\n1\n''') == '0'\nprint(solution(input()))\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n') == '12'\nassert solution('2\\n1\\n') == '2'\nassert solution('3\\n4\\n') == '12'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\"\n) == \"10\"\nassert solution(\n    \"5 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n\"\n) == \"14\"\nassert solution(\n    \"3 1\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n\"\n) == \"24\"\nassert solution(\n    \"10 20\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n\"\n) == \"100\"\nassert solution(\n    \"10 10\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n\"\n) == \"1000\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\"\"\") == \"10\"\nassert solution(\"\"\"2 2\n-1 -2\"\"\") == \"1\"\nassert solution(\"\"\"1 1\n-1 -2\"\"\") == \"0\"\nassert solution(\"\"\"2 2\n-2 -3\"\"\") == \"1\"\nassert solution(\"\"\"1 2\n0 0\"\"\") == \"0\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\") == \"10\"\nassert solution(\"4 4\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\") == \"20\"\nassert solution(\"10 0\\n-1 -2 -3\\n-4 -5 -6\\n-7 -8 -9\\n0 1 2\\n3 4 5\\n6 7 8\\n9 0 -1\") == \"63\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n2 1 1\\n3 4 2') == '10'\nassert solution('4\\n5\\n4 5 4 5\\n4 4 4 4 4\\n4 4 4 4 4\\n4 4 4 4 4\\n4 4 4 4 4\\n4 4 4 4 4\\n4 4 4 4 4\\n4 4 4 4 4') == '23'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '3100'\nassert solution('1 2 1000') == '1000'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '1000'\nassert solution('5 3') == '1150'\nassert solution('5 3') == '4000'\nassert solution('3 3') == '1000'\nassert solution('3 3') == '4000'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '3100'\nassert solution('5 4') == '10000'\nassert solution('5 4 1') == '10000'\nassert solution('5 5') == '10000'\nassert solution('5 6') == '15000'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n\"\"\") == \"3100\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\nassert solution('''\n10 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n1 3 400\n''') == '3200'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '3100'\n\"\"\"\n\n\nclass Graph:\n\n    def __init__(self):\n        self.d = {}\n\n    def add_edge(self, u, v, w):\n        self.d[u] = self.d.get(u, []) + [(v, w)]\n        self.d[v] = self.d.get(v, []) + [(u, w)]\n\n    def path_between(self, s, e):\n        visited = set()\n        q = collections.deque([(s, 0)])\n        while q:\n            u, dist = q.popleft()\n            if u == e:\n                return dist\n            visited.add(u)\n            for v, w in self.d[u]:\n                if v not in visited:\n                    q.append((v, dist + w))\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2''') == '3100'\nassert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2''') == '3700'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\nassert solution(\"4 1\\n4 3 1000\\n3 5 1000\\n4 5 500\\n2\\n2 4 300\\n3 5 300\") == \"4100\"\nassert solution(\"5 1\\n5 3 1000\\n3 5 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"4500\"\nassert solution(\"6 2\\n6 5 1000\\n5 6 1000\\n5 7 500\\n2\\n2 5 300\\n3 6 300\") == \"6200\"\nassert solution(\"8 2\\n6 3 1000\\n5 6 1000\\n5 7 500\\n2\\n1 5 300\\n3 6 300\\n3 7 300\") == \"6250\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == '-1'\nassert solution(\"\"\"\n2 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n\"\"\") == '3100'\nassert solution(\"\"\"\n3 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n\"\"\") == '-1'\n\"\"\"\n---\n\n---\n\n---\n\n---\n\n\"\"\"\n\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2\n0 1\n''') == '1'\n\nassert solution('''\n2 1\n0 1\n0 1\n''') == '2'\n\nassert solution('''\n3 1\n0 1\n0 1\n''') == '0'\n\nassert solution('''\n5 10\n0 1\n0 1\n0 1\n0 1\n0 1\n''') == '3'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0\"\nassert solution([\n    \"2 1\",\n    \"0 1\"\n]) == \"0\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 1\n0 1\n0 2\n0 3\n0 4\n0 5\n''') == '0'\n\nassert solution('''\n5 1\n0 1\n1 2\n1 3\n0 4\n4 5\n''') == '3'\n\nassert solution('''\n1 2\n0 1\n''') == '2'\n\nassert solution('''\n1 2\n0 1\n0 2\n''') == '2'\n\nassert solution('''\n1 2\n0 1\n0 2\n''') == '2'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0'\nassert solution('2 1\\n0 1') == '0'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1\n0 1\n''') == '0'\nassert solution('''\n2 2\n0 1 2\n''') == '1'\n\nassert solution('''\n2 3\n0 1 2\n0 2 3\n''') == '2'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '0'\nassert solution('3 2') == '1'\nassert solution('10 2') == '5'\nassert solution('10 5') == '4'\nassert solution('100 2') == '35'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n0 1') == '0'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 1') == '3'\nassert solution('4 2') == '2'\n'''\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n0 1\n''') == '0'\n\nassert solution('''\n2 2\n0 1\n0 1\n''') == '1'\n\nassert solution('''\n4 3\n0 1\n0 2\n0 3\n''') == '3'\n\nassert solution('''\n2 2\n0 1\n0 1\n''') == '1'\n\nassert solution('''\n4 3\n0 1\n0 2\n0 3\n''') == '2'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1\\n0 1') == '0'\nassert solution('2 4\\n0 1 1 0\\n0 2 2 1 1\\n0 3 3 2 1 1\\n0 4 4 3 2 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n') == '4'\nassert solution('2 1\\n0 1\\n0 1\\n0 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n') == '4'\nassert solution('2 1\\n0 1\\n0 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n') == '5'\nassert solution('2 10\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n') == '6'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 10') == '10'\n\nclass TestSolution(unittest.TestCase):\n\n    def test_sample(self):\n        self.assertEqual(solution(input_string=\"1 10\"), \"10\")\n\n    def test_input(self):\n        self.assertEqual(solution(input_string=\"0 -1\"), \"0\")"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 2') == '2'\nassert solution('1 5') == '1'\nassert solution('5 10') == '1'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 1\") == \"1\"\n\nprint(solution())\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 10\n''') == '10'\nassert solution('''\n1 1\n''') == '0'\nassert solution('''\n3 5\n''') == '3'\nassert solution('''\n0 5\n''') == '6'\nassert solution('''\n1 2\n''') == '1'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"1 100\") == \"99\"\nassert solution(\"9 10000\") == \"999999\"\nassert solution(\"1 99999\") == \"999999\"\nassert solution(\"1 9999999\") == \"999999999\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 2') == '0'\nassert solution('2 3') == '1'\nassert solution('3 4') == '2'\nassert solution('5 6') == '1'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 10\") == \"10\"\n\nassert solution(\"2 10\") == \"10\""
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 2') == '0'\nassert solution('4 5') == '0'\n\n------------------\n###Note\n###This test only covers one edge case, $X = Y$, so any other possible case can be covered if needed.\n'''"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 10\") == \"10\"\n\nassert solution(\"6 2\") == \"2\"\n\nassert solution(\"9 9\") == \"0\"\n\nassert solution(\"-3 -3\") == \"0\"\n\nassert solution(\"-42 -45\") == \"2\""
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_value) == \"10\"\n\"\"\""
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\\n') == '0'\nassert solution('5\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10') == '2'\nassert solution('10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10') == '9'\nassert solution('15\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10') == '4'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n    6\n    0 0\n    1000 0\n    0 1000\n    1000 1000\n    100 100\n    ''') == '0'\n    assert solution(\n    '''\n    1\n    0 0\n    1 1\n    ''') == '1'\n    assert solution(\n    '''\n    4\n    0 0\n    1000 0\n    0 1000\n    1000 1000\n    100 100\n    ''') == '4'\n    '''\n    3\n    0 0\n    1000 0\n    0 1000\n    100 100\n    ''') == '3'\n    '''\n    2\n    0 0\n    1000 0\n    0 1000\n    100 100\n    ''') == '2'\n    '''\n    1\n    0 0\n    ''') == '1'\n    '''\n    5\n    0 0\n    1000 0\n    0 1000\n    1000 1000\n    100 100\n    ''') == '5'\n    '''\n    3\n    0 0\n    1000 0\n    0 1000\n    100 100\n    ''') == '3'\n'''\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n0 0\n1000 0\n0 1000\n1000 1000\n0 1000\nSample Output:\n3\n''') == '0', 'Should be 0'\nassert solution('''\n5\n0 0\n0 0\n0 1000\n1000 1000\n0 1000\nSample Output:\n1\n''') == '1', 'Should be 1'\nassert solution('''\n5\n0 0\n0 0\n0 1000\n1000 1000\n0 1000\nSample Output:\n0\n''') == '0', 'Should be 0'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0 0\n1000 0\n0 1000\n1000 1000\n''') == '0'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('6') == '0'\nassert solution('10') == '2'\nassert solution('100') == '2'\nassert solution('1000') == '3'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n0 0\n1 1\n2 2''') == '1'\n\nassert solution('''3\n1 2\n3 3\n4 4''') == '0'\n\nassert solution('''4\n0 0\n1000 0\n0 1000\n1000 1000\nSample Output:\n2\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n0 0\n1000 0\n0 1000\n1000 1000\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n-10000 0\n0 10000\n10000 0\n10000 10000\n-20000 0\n-10000 0\n0 20000\n10000 0\n10000 10000\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n10000 0\n0 10000\n10000 10000\n10000 0\n-20000 0\n-10000 0\n0 20000\n10000 0\n10000 10000\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4\n0 0\n1000 0\n0 1000\n1 1000\n1 0\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4\n0 0\n1000 0\n0 1000\n1 1000\n1 0\n\"\"\") == \"1\""
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == \"0\"\nassert solution(\"4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == \"1\""
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0.5 1\"\nassert solution(\"1 2\") == \"0.5 1.00000001\"\nassert solution(\"1 3\") == \"0.5 1.00000001\"\nassert solution(\"1 4\") == \"0.5 1.00000001\"\nassert solution(\"1 5\") == \"0.5 1.00000001\""
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0.500000000 1.000000000'\nassert solution('2 1') == '-1'"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n0 1 0.5') == '0.500000000 1.000000000'\nassert solution('2 2\\n0 2 0.5 0.1 0.5') == '0.500000000 1.000000000'\nprint(solution('''2 1\n0 1 0.5\nSample Input:\n4 3\n0 1 0.5 0.5\nSample Output:\n0.5\n0.5\n'''))"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '0.500000000 1.000000000'\nassert solution('3 1') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1\n0 1 0.5\n''') == '0.500000000 1.000000000', 'First'\nassert solution('''2 1\n0 2 0.5\n''') == '-1.000000000 1.000000000', 'Second'\n'''"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n0 1 0.5\n''') == '0.500000000 1.000000000'\n\nassert solution('''2\n0 1 0.5\n0 0 1\n''') == '0.500000000 1.000000000'\n\nassert solution('''2\n0 1 0.5\n0 0 0.5\n''') == '0.500000000 1.000000000'\n\nassert solution('''1\n0 1 0.5\n0 1 0.5\n''') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n0 1 0.5\\n') == '0.500000000 1.000000000', 'First example'\nassert solution('2 100000\\n0 1 0.5\\n') == '-1.000000000 1.000000000', 'Second example'\nassert solution('10\\n1 3 0.5\\n2 2 0.5\\n3 3 0.5\\n4 3 0.5\\n5 3 0.5\\n6 3 0.5\\n7 3 0.5\\n8 3 0.5\\n9 3 0.5\\n10 3 0.5\\n') == '0.4999999 0.4999999 0.4999999', 'Third example'"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 1\n0 1 0.5\n0 2 0.5\n0 3 0.5\n\"\"\") == \"\"\"0.500000000 1.000000000\"\"\"\nassert solution(\"\"\"\n3 1\n0 1 0.1\n0 2 0.2\n0 3 0.3\n\"\"\") == \"\"\"0.100000000 1.000000000\"\"\"\nassert solution(\"\"\"\n5 1\n0 1 0.5\n0 2 0.5\n0 3 0.4\n0 4 0.3\n0 5 0.2\n\"\"\") == \"\"\"0.500000000 1.000000000\"\"\"\nassert solution(\"\"\"\n5 1\n0 1 0.5\n0 2 0.5\n0 3 0.4\n0 4 0.3\n0 5 0.2\n\"\"\") == \"\"\"0.500000000 1.000000000\"\"\"\nassert solution(\"\"\"\n3 1\n0 1 0.5\n0 2 0.5\n0 3 0.3\n\"\"\") == \"\"\"0.300000000 1.000000000\"\"\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n0 1 1\n1 0 0.5\n2 1 1\n\"\"\") == \"1.500000000 1.000000000\"\nassert solution(\"\"\"\n3\n0 1 0.5\n1 0 0.5\n2 1 1\n\"\"\") == \"1.500000000 1.000000000\"\nassert solution(\"\"\"\n10\n1 1 0.5\n2 2 0.5\n2 1 1\n3 1 1\n4 1 1\n4 2 1\n4 1 1\n4 2 1\n5 2 0.5\n5 1 0.5\n5 1 0.5\n6 2 1\n6 1 1\n6 2 1\n6 1 1\n\"\"\") == \"2.000000000 -1.000000000\"\nassert solution(\"\"\"\n3\n0 1 0.5\n1 0 0.5\n2 1 1\n\"\"\") == \"-1.000000000\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n0 0.5\n0 0.5\n0 0.5\n1 0.5''') == '1.000000000 1.000000000 0.500000000 1.000000000 1.000000000 0.500000000 1.000000000 0.500000000 0.500000000 1.000000000 0.500000000'\nassert solution('''1\n0 1\n0 0.5\n0 0.5\n1 0.5''') == '0.500000000 0.500000000 0.500000000 0.500000000 1.000000000 0.500000000 0.500000000 1.000000000 0.500000000 1.000000000 0.500000000'\nassert solution('''2\n0\n1 0.5\n0 0.5\n0 0.5\n0 0.5''') == '1.000000000 1.000000000 0.500000000 1.000000000 0.500000000 1.000000000 0.500000000 1.000000000 0.500000000'\nassert solution('''1\n0\n1 0.5\n0 0.5\n0 0.5\n0 0.5''') == '0.500000000 0.500000000 1.000000000 0.500000000 0.500000000 1.000000000 0.500000000 0.500000000 1.000000000 0.500000000'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"7\""
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 1\n4 1\n1 5\n10 10\n10 8\n''') == '7'\n\nassert solution('''\n5\n1 1\n4 1\n1 5\n10 10\n10 8\n''') == '9'\n\nassert solution('''\n2\n3 3\n3 2\n''') == '3'\n\n'''"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '1'\nassert solution('6') == '1'\nassert solution('1 1') == '1'\nassert solution('3 3') == '1'\nassert solution('9 4') == '1'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '7'\nassert solution('1 1') == '1'\nassert solution('4 1') == '2'\nassert solution('1 5') == '2'\nassert solution('10 10') == '4'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"7\"\nassert solution([6]) == \"7\"\nassert solution([1,1]) == \"7\"\nassert solution([4,1]) == \"6\"\nassert solution([1,5]) == \"5\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"7\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10\n''') == '7'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1 1'\nassert solution('4 1') == '4 1'\nassert solution('1 5') == '1 5'\nassert solution('10 10') == '10 10'\nassert solution('10 8') == '10 8'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"7\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0 1'\nassert solution('2') == '1 1'"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\") == \"8-a\"\nassert solution(\"1\\na\\n2\") == \"2\"\nassert solution(\"2\\na\\n3-b 5-b\\n6-a 2-b\\n2\") == \"2\"\nassert solution(\"2\\naba\\nbba\\n1\") == \"3-b\""
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '9-b'\nassert solution('''\n2\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\n''') == '8-a'\nassert solution('''\n1\na\n2-a\n0\n''') == '1'\nassert solution('''\n2\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == '2-a'\nassert solution('''\n2\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == '2-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\nab\\n3-b 5-b\\n6-a 2-b\\n2') == '8-a'\nassert solution('1\\na\\nb') == 'a'\nassert solution('1\\na\\nb') == 'b'"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\na b') == '9-b'\nassert solution('2\\na b\\n5-b 6-b\\n3-a 2-b\\n2\\na b') == '8-a'\nprint('Solution:')\nprint(solution(input()))\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '9-b'\nassert solution('''\na\nb\nb\na\nc\n''') == '8-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\na\\nb\\n') == 'b\\na\\nb\\n'\nassert solution('2\\na\\nb\\n') == 'a\\nb\\na\\n'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nab\\n3-b 5-b\\n6-a 2-b\\n0') == '8-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\na b\") == \"9-b\"\nassert solution(\"6-a 2-b\") == \"8-a\"\nassert solution(\"2\\nab\") == \"5-b\"\nassert solution(\"6-a 2-b\\naba\") == \"6-a 2-b\"\nassert solution(\"2\\nab\\naba\") == \"6-a 2-b\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n\"\"\") == \"8-a\"\n\nassert solution(\"\"\"\n3\na\nb\n2\n\"\"\") == \"2-b\"\n\nassert solution(\"\"\"\n10\na\na\n2\nb\n\"\"\") == \"5-b\"\n\nassert solution(\"\"\"\n3\na\nb\n2\n\"\"\") == \"3-b\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n8\n4\n3\n4\n5\n3\n8\n7''') == '3246R3246'\nassert solution('''1\n1\n1''') == '1'\nassert solution('''2\n8\n4\n3\n4\n5\n3\n8\n7''') == '3246R3246'\nassert solution('''5\n3\n1\n1\n1\n1\n1\n1''') == '3246U3246'"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '123', \"First\"\nassert solution('2') == '2', \"Second\"\nassert solution('3') == '3', \"Third\"\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '3246'\nassert solution('3\\n') == '3246'\nassert solution('10\\n') == '3246'\nassert solution('20\\n') == '3246'\nassert solution('100\\n') == '3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"126R126\"\nassert solution(\"2\") == \"R2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\necho\\n1') == '3246R3246'\n\"\"\""
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '3246'\nassert solution('2') == '3246R3246'\nassert solution('3') == '3246D3246R3246'\nassert solution
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"3246\"\nassert solution(\"2\") == \"3246\"\nassert solution(\"3\") == \"3246\"\nassert solution(\"3\") == \"3246\"\nassert solution(\"4\") == \"3426\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '3246'\nassert solution('2') == '3246'\nassert solution('3') == '3246'\nassert solution('4') == '3246'\nassert solution('5') == '3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"1097121\"\nassert solution(\"5\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n5 7\n5 8\n''') == 'YES'\nassert solution('''\n5 5\n5 7\n4 7\n4 8\n''') == 'NO'\nassert solution('''\n10 5\n4 8\n4 5\n4 6\n5 7\n5 8\n6 8\n4 7\n6 5\n''') == 'YES'\nassert solution('''\n1 1\n3 4\n2 3\n''') == 'NO'"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n1 2\n1 3\n''') == 'YES'\nassert solution('''3 1\n1 2\n1 3\n''') == 'YES'\nassert solution('''5 2\n1 2 1 3 1\n2 3 1 2\n3 3 1 3\n3 4 2 4\n4 5 2 5\n5 3 1 3''') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'YES'\nassert solution('1 3') == 'NO'\nassert solution('2 2') == 'YES'\nassert solution('2 3') == 'NO'\nassert solution('3 3') == 'YES'"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1\n1 2\n1 3''') == 'YES'\n\nassert solution('''5 2\n2 4\n1 2\n2 2\n2 2\n2 1''') == 'NO'\n\nassert solution('''10 5\n1 4\n3 4\n5 4\n7 4\n3 4\n5 4\n5 4\n7 4\n1 4\n3 4\n5 4\n7 4\n7 4\n3 4\n5 4\n7 4''') == 'YES'\n\nassert solution('''8 1\n2 5\n2 6\n3 6\n3 7\n4 7\n4 8\n4 9\n5 8\n6 8\n6 9\n6 9\n5 8''') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"10 1\") == \"YES\"\nassert solution(\"100 1\") == \"YES\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1') == 'NO'\nassert solution('10 1') == 'YES'\nassert solution('10 2') == 'YES'\nassert solution('10 3') == 'YES'\nassert solution('10 4') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'YES\\n1 2\\n1 3'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == 'YES'\nassert solution('4 5') == 'YES'\nassert solution('7 1') == 'NO'\nassert solution('4 2') == 'YES'\nassert solution('1 1') == 'YES'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'YES\\n1 2\\n1 3'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"18\"\nassert solution(\"2\") == \"36\"\nassert solution(\"2\") == \"42\"\n\"\"\"\n\n\nclass Cell:\n    def __init__(self, strength, left=False, right=False, above=False, below=False):\n        self.strength = strength\n        self.left = left\n        self.right = right\n        self.above = above\n        self.below = below\n\n    def __str__(self):\n        return str(self.strength)\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '2'\nassert solution('10') == '12'\n\"\"\""
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\n1\n300003\n300003\n300003\n300003\n300003\nSample Output:\n176''') == '176'\nassert solution('''9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333\n''') == '176'"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9') == '176'\nassert solution('1') == '0'\nassert solution('6 6') == '0'\nassert solution('333333') == '0'\nassert solution('300003') == '8'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333\n''') == '176'\nassert solution('''\n2\n1\n2\n3\n1\n''') == '21'\nassert solution('''\n2\n1\n0\n''') == '1'"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '1\\n'\n    '1\\n'\n    '6 6\\n'\n    '333333\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '333333\\n'\n    ) == '176'\n\nassert solution(\n    '10\\n'\n    '0\\n'\n    '10 10\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0'\nassert solution('1') == '1'\n\nassert solution('9') == '176'\nassert solution('1000000000') == '10000000000000000000000000000'\n\n'''\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '176'\nassert solution('7') == '280'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"17\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('123456789') == '123'\nassert solution('1223456789') == '123'\nassert solution('122345678901') == '1223456789'\nassert solution('12345678901234567890123456789') == '123456789'\nassert solution('1234567890123456789012345678901') == '12345678901'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '012'\nassert solution('100000000000') == '112'\nassert solution('11223344') == '223'\nassert solution('10000000000000000') == '100'\nassert solution('1000000000000000000') == '100'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"012\"\nassert solution(\"100\") == \"100\"\nassert solution(\"25\") == \"25\"\nassert solution(\"10\") == \"10\"\nassert solution(\"21\") == \"21\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '12'\nassert solution('1234567890') == '123'\nassert solution('1000000000000') == '100'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"12\"\nassert solution(\"4\") == \"4\"\nassert solution(\"999\") == \"999\"\nassert solution(\"756443\") == \"754\""
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '12'\nassert solution('12') == '12'\nassert solution('36') == '36'\nassert solution('13') == '13'\nassert solution('100') == '10'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '016'\n\"\"\""
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"333\"\nassert solution(\"1\") == \"1\"\nassert solution(\"15\") == \"555\"\nassert solution(\"1000\") == \"1313\"\nassert solution(\"1680\") == \"1680\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"12\"\nassert solution(\"9876543210\") == \"987\"\nassert solution(\"1234\") == \"12\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('1234') == '12'\nassert solution('123400') == '12'\nassert solution('123400000') == '12'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 1\n(())\n480\n-570\n928\n''') == '?', 'First'\nassert solution('''\n4 1\n(())\n480\n-570\n928\n''') == '480', 'Second'\nassert solution('''\n4 1\n((()\n480\n-570\n928\n''') == '480', 'Third'\n'''\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 1\n((()\n480\n617\n-570\n928\n''') == '480'\nassert solution('''4 1\n(((()\n480\n617\n-570\n928\n''') == '480'\nassert solution('''4 1\n((((((()\n480\n617\n-570\n928\n''') == '-570'\nassert solution('''4 1\n(((((((((()\n480\n617\n-570\n928\n''') == '928'\nassert solution('''4 1\n(((((((((((()\n480\n617\n-570\n928\n''') == '480'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 1') == '?', 'Should be \"??\"'\n\nassert solution('6 1') == '480', 'Should be \"480\"'\n\nassert solution('10 1') == '928', 'Should be \"928\"'\n\nassert solution('9 1') == '?', 'Should be \"??\"'\n\nassert solution('13 1') == '-570', 'Should be \"-570\"'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1') == '?', \"Wrong solution\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"??\"\nassert solution(\"3 2\") == \"??\"\nassert solution(\"3 1\") == \"4\"\nassert solution(\"4 3\") == \"??\"\nassert solution(\"2 2\") == \"4\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 1') == '?', \"Should be '?', but got '{}'\".format(solution('4 1'))\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '?', 'Should be \"?\"'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '-1'\nassert solution('4 5 6') == '4'\nassert solution('8 8 8 8') == '1'\n\nprint(solution())\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '?'\nassert solution('3 3') == '1000'\nassert solution('5 1') == '1000'\nassert solution('5 2') == '1000'\n\"\"\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"??\"\nassert solution(\"3 3\") == \"??\"\nassert solution(\"6 6\") == \"18\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"5 6\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\") == \"3 1 3 5\\n2 2 4\\n5 6\"\n\"\"\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n') == '2 4\\n5 6\\n7 8 9 10 11 12 13\\n'\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4\\n3 1 3 5\\n2 2 4\") == \"2 4\"\nassert solution(\"2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\" == \"5 6\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n13\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '''2 4\n5 6\n7 8 9 10 11 12 13\n'''\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n\"\"\") == \"\"\"\n2 4\n5 6\n7 8 9 10 11 12 13\n\"\"\".strip()\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'none'\nassert solution('2') == '2 4'\nassert solution('3') == '5 6'\nassert solution('4') == '7 8 9 10 11 12 13'"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '2 4'\nassert solution('''10\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == 'None'\nassert solution('''18\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '2 4'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4\") == \"2 4\"\nassert solution(\"3 1 3 5\") == \"3 1 3 5\"\nassert solution(\"2 2 4\") == None\nassert solution(\"3 1 3 6\") == None\nassert solution(\"2 2 6\") == None\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '5 6'\nassert solution('''3\n1 2\n1 4\n1 3\n''') == '1 3'\nassert solution('''4\n1 2\n2 3\n1 3\n1 4\n''') == '1 3'\nassert solution('''6\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '6 5'\nassert solution('''8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n''') == '1 3'"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n\nassert solution('''4 3\n1 2 3\n1 3\n2 3\n3 4\n''') == '1 3 4'\n\nassert solution('''2 3\n2 5\n3 4\n''') == '1 3'\n\nassert solution('''2 2\n4 2\n1 3\n2 4\n''') == '1 2'\n\nassert solution('''6 2\n1 2 3 4 5 6\n2 4\n3 5\n1 4\n4 5\n5 1\n''') == '1 2 3 4 5 6'"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\nassert solution(\"15 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"50 50 50 50 50\"\nassert solution(\"10 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"10 10 10 10 10\"\nassert solution(\"1 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"1 1 1 1 1 1\"\nassert solution(\"1 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"1 1 1 1 1 1\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution('5 5') == '35 39 36 27 29'\n\n---Input---\nSample Input 1:\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\nSample Output 1:\n11 17 14 39\nSample Output 2:\n17 27 35 39\n\nSample Input 2:\n4 7\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n4 5\n4 6\n4 7\nSample Output 2:\n6 7\n9 8\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2''') == '35 39 36 27 29'\nassert solution('''3 3\n1 2 3\n1 2 4\n1 3 2''') == '2 2 4'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n1 2 3\\n1 4 8\\n2 3 12\") == \"35 39 36 27 29\"\nassert solution(\"15 15\\n1 2 3 4\\n5 1 2 3\\n8 5 4 1\\n9 7 2 3\\n4 9 5 1\\n4 5 3 2\\n4 3 5 2\\n4 2 5 1\\n2 2 3 2\\n5 2 4 2\\n6 6 5 1\\n9 9 8 7\\n5 5 8 4\\n2 5 3 2\\n5 7 2 3\\n3 3 5 2\\n5 4 5 1\\n4 4 6 1\\n2 4 5 3\\n4 7 4 1\\n6 5 8 2\\n3 6 6 1\\n1 1 4 2\\n3 6 5 2\\n4 1 8 3\\n5 4 1 1\\n4 5 6 1\\n5 5 2 1\\n7 3 2 5\\n5 6 4 1\\n6 7 6 1\\n2 4 7 6\\n5 5 5 2\\n4 5 7 2\\n7 6 5 2\\n6 5 4 1\\n3 2 3 2\\n2 7 6 2\\n5 8 4 2\\n7 6 7 2\\n4 4 3 2\\n8 5 1 1\\n4 4 1 2\\n6 4 8 2\\n5 1 6 1\\n2 3 6 3\\n6 3 6 1\\n8 5 8 2\\n2 5 2 3\\n6 4 6 1\\n1 3 6 1\\n2 6 7 2\\n5 6 4 2\\n1 5 2 1\\n2 5 5 1\\n1 6 6 2\\n8 4 5 2\\n6 6 5 2\\n3 4 4 2\\n5 6 6 1\\n6 5 4 1\\n4 1 2 2\\n3 5 8 1\\n5 3 2 1\\n2 5 5 3\\n7 8 7 3\\n4 7 6 2\\n8 6 7 2\\n7 3 8 1\\n3 4 8 1\\n7 6 8 1\\n6 8 6 1\\n8 7 4 2\\n2 1 8 1\\n3 6 2 1\\n4 1 3 1\\n2 5 8 1\\n3 2 4 1\\n6 6 4 1\\n7 4 5 3\\n3 6 3 1\\n4 8 1 2\\n4 3 4 1\\n5 6 5 3\\n3 5 6 3\\n3 6 5 3\\n1 1 2 1\\n5 1 6 1\\n3 5 5 3\\n4 6 6 3\\n8 5 6 2\\n3 6 5 2\\n3 4 5 1\\n2 5 5 3\\n3 5 4 3\\n6 7 7 2\\n4 7 5 2\\n5 5 5 2\\n6 6 7 2\\n5 5 5 2\\n6 7 3 2\\n7 7 3 2\\n3 2 3 2\\n3 7 5 2\\n3 2 5 2\\n7 4 5 2\\n3 2 5 2\\n4 5 5 1\\n4 5 5 2\\n7 2 3 3\\n2 6 7 1\\n4 6 7 1\\n6 6 6 1\\n4 7 6 1\\n2 7 3 2\\n5 6 5 3\\n1 3 5 2\\n8 5 5 2\\n8 6 6 2\\n5 5 8 2\\n4 4 4 3\\n5 5 7 2\\n3 4 5 2\\n4 5 7 2\\n5 5 8 2\\n7 3 8 1\\n5 5 5 2\\n2 4 5 2\\n6 7 6 2\\n2 2 3 2\\n6 6 5 1\\n6 6 6 1\\n2 2 6 1\\n3 3 3 2\\n6 6 6 2\\n2 6 6 2\\n4 5 3 2\\n6 5 6 1\\n5 6 5 2\\n5 4 6 2\\n3 3 5 2\\n5 7 2 2\\n5 7 7 2\\n7 5 7 2\\n7 7 5 2\\n4 3 6 2\\n6 7 4 2\\n5 7 8 2\\n6 7 7 2\\n4 8 7 2\\n2 7 6 2\\n4 6 5 2\\n6 5 7 2\\n7 6 5 2\\n5 7 7 2\\n6 6 5 2\\n2 3 4 2\\n8 5 5 2\\n3 2 4 1\\n8 5 6 2\\n4 6 5 3\\n4 6 6 2\\n7 8 6 2\\n5 6 6 2\\n5 4 6 1\\n7 5 4 1\\n6 6 6 1\\n2 5 6 1\\n6 5 5 2\\n5 6 6 2\\n4 6 6 2\\n3 5 6 3\\n6 6 6 1\\n1 1 2 1\\n4 5 7 1\\n4 4 5 3\\n4 2 5 3\\n2 5 2 3\\n4 4 4 2\\n6 7 6 2\\n5 7 5 2\\n4 4 5 2\\n4 5 6 3\\n6 6 5 2\\n4 4 6 2\\n6 6 6 2\\n3 5 6 2\\n5 6 6 2\\n4 4 5 2\\n4 3 6 2\\n4 4 6 1\\n4 5 4 2\\n2 3 6 3\\n2 6 7 2\\n5 6 5 2\\n3 2 5 2\\n6 6 5 2\\n4 4 6 1\\n8 6 6 2\\n5 7 5 2\\n6 6 5 2\\n8 6 6 2\\n5 6 6 2\\n5 7 5 2\\n3 2 3 2\\n5 6 5 2\\n4 6 6 2\\n4 6 6 2\\n7 5 6 2\\n3 2 5 2\\n2 6 7 1\\n2 2 5 1\\n5 7 6 2\\n5 7 6 2\\n2 6 7 1\\n4 6 6 2\\n5 6 6 2\\n6 6 6 2\\n5 4"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution('6 6') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\nassert solution('''\n10 10\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n\n'''\n\n##########################################################################################################################################"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2') == '35 39 36 27 29'\nassert solution('6 6\\n3 3 3 4 4 4\\n3 3 3 5 4 5\\n4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5\\n3 3 3 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5\\n3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution('1 1') == '0'\nassert solution('3 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\n2 3 1') == '0 672'\nassert solution('2 3\\n3 2 1') == '1 672'\n\nSample Input 2:\n3 4\n5 1 5 1\nSample Output:\n0 5976"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n3 2 1\n''') == '0 672'\nassert solution('''\n1 20\n10 11\n''') == '3 545'\n'''\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1\\n2 3 1') == '6 72'\n\nstdin = \"\"\"3 3\n2 2 1\nSample Output:\n0 672\"\"\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 2 1') == '0 672', \"Wrong\"\nassert solution('2\\n3 2 1') == '1 672', \"Wrong\"\nassert solution('1\\n4 4 1') == '1 1536', \"Wrong\"\nassert solution('2\\n4 4 1') == '1 936', \"Wrong\"\nassert solution('1\\n5 5 1') == '1 3108', \"Wrong\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n3 2 1\") == \"0 672\"\nassert solution(\"3 5\\n1 2 2 1\") == \"1 3155\"\nassert solution(\"3 7\\n1 2 1 3 1 1 2 2\") == \"1 3185\"\nassert solution(\"3 5\\n2 2 2 2 1\") == \"1 3155\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"672\"\nassert solution(\"2 2 1\") == \"1\"\nassert solution(\"3 3 1\") == \"1\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([\n    '5 5',\n    '2 2 1 1 1'\n]) == '0 672'\n\nassert solution([\n    '4 4',\n    '2 2 0 1'\n]) == '0 672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '0 672'\nassert solution('5 3') == '9 3897'\n\nimport math"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4') == '0 4'\nassert solution('3 3') == '0 6'\nassert solution('10 10') == '20'\n\"\"\"\n\nfrom test_utils import *"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500001'\nassert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n3 1 10') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 100\") == \"2.500000\"\nassert solution(\"4 5 1\") == \"Impossible\"\nassert solution(\"4 6 1\") == \"Impossible\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 4') == 'Impossible'\nassert solution('2 1 10') == '0.750000'\nassert solution('2 1 100') == '1.000000'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n') == '2.500000'\nassert solution('2 2 100\\n1 1 1\\n2 2 10\\n') == 'Impossible'\nassert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '2.500000'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n\nassert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n3 8 30\\n3 12 18\\n\") == \"Impossible\"\n\nassert solution(\"5 1 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n3 8 30\\n3 12 18\\n4 8 20\\n4 12 20\") == \"3.14285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n') == '2.500000'\nassert solution('4 5 100\\n0 10 10\\n1 10 5\\n2 2 18\\n2 40 50\\n') == 'Impossible'\nassert solution('1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\nassert solution('2 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == 'Impossible'\nassert solution('3 3 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500001'\n\n'''\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == \"2.500000\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\nassert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == 'Impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n5 3 4\n''') == \"3\"\nassert solution('''\n4\n2 3 1 2\n''') == \"4\"\n\n## Sample Test 2"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 4\\n') == '3'\nassert solution('3 5 4\\n') == '3'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5 3 4\n''') == '3'\nassert solution('''\n4\n5 3 6 7\n''') == '3'\n\nassert solution('''\n4\n5 3 6 7\n''') == '4'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('3 3') == '1'\nassert solution('5 3 4') == '2'"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('3 2 5') == '4'\nassert solution('3 2 4') == '2'\nassert solution('3 2 5 2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3 4\n5 5 4''') == '3'\nassert solution('''5 3 1\n5 5 4''') == '1'\nassert solution('''5 3 1\n1 1 4''') == '1'\nassert solution('''5 3 1\n3 5 4''') == '2'\nassert solution('''5 3 1\n1 2 4''') == '2'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n5 3 4') == '3'\nassert solution('3\\n5 3 2 2 2') == '4'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\n1 2 3 4 5\n4\n1\n2\n3\n4\n5\n3\n2\n4\n3\n5\n''') == '4'\nassert solution('''\n10\n1 2\n3 4\n5 6\n7 8 9\n10\n11 12\n13 14\n15 16\n17 18 19\n20\n''') == '10'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"4 10 9\") == \"4\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1 1\n''') == '2'\nassert solution('''\n2 2 2\n''') == '2'"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 2') == '4'\nassert solution('10 1 5') == '8'\n\n-------------------\n\nIf x = 2, then y = 1, 1, 3, 5, 7, 9, etc.\n\nFor each i in range(N):\n    n = (x + i) % p\n    y = (y + i) % p\n    Find x > y\n\nNow, we have to give some insight that this is a sequence of integers.\n\nx = 2\ny = 1\n\nwhile x <= N:\n    x += y\n    y += 1\n\nLet p be prime. In this case p = 10.\n\nWe start by the case of x = 1 and y = 1.\n\nFor i = 0, x = 1, y = 1\ni = 0 = x = 1, y = 1\nx = 2, y = 0, i = 1\nx = 3, y = 0, i = 1\nx = 4, y = 0, i = 1\nx = 5, y = 0, i = 1\nx = 6, y = 0, i = 1\nx = 7, y = 0, i = 1\nx = 8, y = 0, i = 1\nx = 9, y = 0, i = 1\nx = 10, y = 0, i = 1\nx = 11, y = 0, i = 1\nx = 12, y = 0, i = 1\nx = 13, y = 0, i = 1\nx = 14, y = 0, i = 1\nx = 15, y = 0, i = 1\nx = 16, y = 0, i = 1\nx = 17, y = 0, i = 1\nx = 18, y = 0, i = 1\nx = 19, y = 0, i = 1\nx = 20, y = 0, i = 1\nx = 21, y = 0, i = 1\nx = 22, y = 0, i = 1\nx = 23, y = 0, i = 1\nx = 24, y = 0, i = 1\nx = 25, y = 0, i = 1\nx = 26, y = 0, i = 1\nx = 27, y = 0, i = 1\nx = 28, y = 0, i = 1\nx = 29, y = 0, i = 1\nx = 30, y = 0, i = 1\nx = 31, y = 0, i = 1\nx = 32, y = 0, i = 1\nx = 33, y = 0, i = 1\nx = 34, y = 0, i = 1\nx = 35, y = 0, i = 1\nx = 36, y = 0, i = 1\nx = 37, y = 0, i = 1\nx = 38, y = 0, i = 1\nx = 39, y = 0, i = 1\nx = 40, y = 0, i = 1\nx = 41, y = 0, i = 1\nx = 42, y = 0, i = 1\nx = 43, y = 0, i = 1\nx = 44, y = 0, i = 1\nx = 45, y = 0, i = 1\nx = 46, y = 0, i = 1\nx = 47, y = 0, i = 1\nx = 48, y = 0, i = 1\nx = 49, y = 0, i = 1\nx = 50, y = 0, i = 1\nx = 51, y = 0, i = 1\nx = 52, y = 0, i = 1\nx = 53, y = 0, i = 1\nx = 54, y = 0, i = 1\nx = 55, y = 0, i = 1\nx = 56, y = 0, i = 1\nx = 57, y = 0, i = 1\nx = 58, y = 0, i = 1\nx = 59, y = 0, i = 1\nx = 60, y = 0, i = 1\nx = 61, y = 0, i = 1\nx = 62, y = 0, i = 1\nx = 63, y = 0, i = 1\nx = 64, y = 0, i = 1\nx = 65, y = 0, i = 1\nx = 66, y = 0, i = 1\nx = 67, y = 0, i = 1\nx = 68, y = 0, i = 1\nx = 69, y = 0, i = 1\nx = 70, y = 0, i = 1\nx = 71, y = 0, i = 1\nx = 72, y = 0, i = 1\nx = 73, y = 0, i = 1\nx = 74, y = 0, i = 1\nx = 75, y = 0, i = 1\nx = 76, y = 0, i = 1\nx = 77, y = 0, i = 1\nx = 78, y = 0, i = 1\nx = 79, y = 0, i = 1\nx = 80, y = 0, i = 1\nx = 81, y = 0, i = 1\nx = 82, y = 0, i = 1\nx = 83, y = 0, i = 1\nx = 84, y = 0, i = 1\nx = 85, y = 0, i = 1\nx = 86, y = 0, i = 1\nx = 87, y = 0, i = 1\nx = 88, y = 0, i = 1\nx = 89, y = 0, i = 1\nx = 90, y = 0, i = 1\nx = 91, y = 0, i = 1\nx = 92, y = 0, i = 1\nx = 93, y = 0, i = 1\nx = 94, y = 0, i = 1\nx = 95, y = 0, i = 1\nx = 96, y = 0, i = 1\nx = 97, y = 0, i = 1\nx = 98, y = 0, i = 1\nx = 99, y = 0, i = 1\nx = 100, y = 0, i = 1\nx = 101, y = 0, i = 1\nx = 102, y = 0, i = 1\nx = 103, y = 0, i = 1\nx = 104, y = 0, i = 1\nx = 105, y = 0, i = 1\nx = 106, y = 0, i = 1\nx = 107, y = 0, i = 1\nx = 108, y = 0, i = 1\nx = 109, y = 0, i = 1\nx = 110, y = 0, i = 1\nx = 111, y = 0, i = 1\nx = 112, y = 0, i = 1\nx = 113, y = 0, i = 1\nx = 114, y = 0, i = 1\nx = 115, y = 0, i = 1\nx = 116, y = 0, i = 1\nx = 117, y = 0, i = 1\nx = 118, y = 0, i = 1\nx = 119, y = 0, i = 1\nx = 120, y = 0, i = 1\nx = 121, y = 0, i = 1\nx = 122, y = 0,"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 1') == '2'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 1') == '2'\nassert solution('7 3 1') == '18'\nassert solution('10 10 5') == '6'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1') == '2'\nassert solution('2 10 10') == '35'\nassert solution('3 8 3') == '10'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 1') == '2'\n\nstdin = \"\"\"\n5 2\nSample Input:\n1 1\nSample Output:\n8\n\"\"\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\n\n\"\"\"\n\nn, x, y = list(map(int, input().split()))\n\nx_plus_one_list = []\n\nfor i in range(n):\n    x_plus_one_list.append(x + i)\n\ny_plus_one_list = []\nfor i in range(n):\n    y_plus_one_list.append(y + i)"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 5') == '7'\nassert solution('2 4 7') == '9'\nassert solution('100 10 20 30 40 50 60 70 80 90') == '120'\n\nInput:\n4\n100 101\n200 201 202\n300 301\n300 300\n\nOutput:\n201\n'''\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort(reverse=True)\n\nmax = a[0] ^ a[1]\n\nfor i in range(2, n):\n    max = max ^ a[i]\n\nprint(max)"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 5\\n') == '7'\nassert solution('2\\n4 3 5\\n') == '9'\nassert solution('6\\n5 4 3 2 1\\n') == '5'\nassert solution('5\\n1 2 3 4 5\\n') == '5'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '2\\n1 2\\n'\n) == '1'\nassert solution(\n    '4\\n1 2 3 4\\n'\n) == '0'"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 3 5\") == \"7\"\nassert solution(\"3 3\") == \"7\"\nassert solution(\"1 3 1\") == \"1\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 5') == '7'\nassert solution('1\\n2 3') == '2'\nassert solution('1\\n3') == '1'\nassert solution('2\\n3') == '1'\nassert solution('2\\n3\\n5') == '6'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 5') == '7'\nassert solution('4\\n1 2 3 4') == '3'\nassert solution('4\\n1 2 4 5') == '4'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2\\n\"\n    \"1 2 3\"\n) == \"7\"\n\nassert solution(\n    \"5\\n\"\n    \"1 2 3 4 5\"\n) == \"9\"\n\nassert solution(\n    \"1\\n\"\n    \"1 2\"\n) == \"1\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n2\n3''') == '1'\nassert solution('''2\n3\n4''') == '0'\nassert solution('''8\n7\n6\n5''') == '5'\nassert solution('''4\n5\n6\n7''') == '1'\nassert solution('''4\n7\n6\n5''') == '3'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 3 5''') == '7'\nassert solution('''3\n1 3 5''') == '4'\nassert solution('''4\n1 3 5''') == '0'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3 5') == '7'\nassert solution('2 3 5') == '9'\nassert solution('3 2 3') == '6'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n\"\"\") == \"\"\"\njets\njets\n\"\"\".strip()\nassert solution(\"\"\"\n4\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n\"\"\") == \"\"\"\njets\n\"\"\".strip()\nassert solution(\"\"\"\n1\n1\nfred dinosaur 2\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\n\"\"\") == \"\"\"\ndinosaur\ndinosaur\n\"\"\".strip()\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 'john rhinocerous jets'\nassert solution(\"3\") == 'john rhinocerous jets'\nassert solution(\"4\") == 'john rhinocerous jets'"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == 'fred jetsons\\njohn jets\\nruth rockets\\n'\nassert solution('''\n5\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rocks\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == 'fred jetsons\\njohn jets\\nruth rockets\\n'\nassert solution('''\n2\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rocks\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == 'impossible\\n'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n6\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n2\\nfred dinosaur 2 jets') == 'john jets\\nruth rockets'\nassert solution('1\\n3\\njohn dinosaur 2 jets') == 'john jets'\nassert solution('3\\n6\\n' + '\\n'.join(['mary rhinocerous 2 jetsons' + '\\n' + 'ruth platypus 1 rockets' * 5 for _ in range(6)])) =='mary rhinocerous rockets' * 5 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'john rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 + 'john rhinocerous' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 + 'john rhinocerous' * 2 + 'john rhinocerous' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus'"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n3\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n\"\"\") == \"john jets\\n\"\nassert solution(\"\"\"\n10\n4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n\"\"\") == \"john jets\\n\"\nassert solution(\"\"\"\n2\n2\njohn rhinocerous 1 jets\nmary rhinocerous 2 jets\n\"\"\") == \"john rhinocerous 1 jets\\n\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n5\\njohn fred dinosaur 2 jets jetsons') == 'john jets'\nassert solution('2\\n4\\nmary rhinocerous 2 jetsons rockets') =='mary rhinocerous jetsons rockets'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(s) == \"john jets\\n\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\njohn rhinocerous 2 jets\nruth platypus 1 rockets\nmary rhinocerous 2 jetsons\nfred dinosaur 2 jets''') == 'john jets\\nruth rockets\\n'\n'''\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n2\n3\n1\n2\n3\n2\n2\n1\n2\n3\n1\n2\n2\n3\n1\n2\n3\n2\n1\n2\n2\n2\n2\n1\n2\n2\n1\n2\n1\n2\n1\n2\n3\n2\n1\n2\n3\n2\n2\n1\n2\n1\n1\n3\n3\n2\n1\n2\n2\n1\n2\n3\n2\n1\n2\n1\n2\n2\n1\n2\n1\n2\n2\n1\n1\n3\n3\n2\n1\n2\n1\n2\n2\n1\n2\n1\n2\n1\n2\n2\n1\n2\n1\n2\n1\n2\n1\n1\n1\n1\n1\n2\n2\n2\n1\n2\n1\n1\n2\n2\n1\n2\n1\n1\n1\n1\n1\n1\n1\n2\n2\n1\n2\n2\n1\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\") == \"Impossible\"\nassert solution(\"5\\n1\") == \"john\"\nassert solution(\"5\\n2\") == \"ruth\"\nassert solution(\"3\\n1\") == \"john\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"1 2 1\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n4 3\\n-10 9\\n-2 3') == '1 2 1'\nassert solution('2\\n1 2\\n-1 4') == '1 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n2\n2\n3\n3\n1\n2\n1\n2''') == '1 2 1'''\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n-10 9\n-2 3\n''') == '1 2 1'\nassert solution('''\n10 9\n-2 3\n''') == '3 3 3 3 3 3 3 3 3 3 3'\nassert solution('''\n7 10\n-2 3\n-4 7\n-5 4\n-6 5\n-8 8\n-9 2\n''') == '1 2 1 2 1 1 2 2'\nassert solution('''\n6 5\n-2 3\n-4 7\n-5 4\n-6 5\n-8 8\n-9 2\n''') == '1 2 1 2 1 1 1 2'\nassert solution('''\n7 9\n-2 3\n-4 7\n-5 4\n-6 5\n-8 8\n-9 2\n''') == '1 1 2 2 2 2 1 2'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0 0'\nassert solution('5') == '1 1 1 1 1'"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1 2 1\"\nassert solution(\"3 4 3\") == \"1 2 1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n4 3\\n-10 9\\n-2 3') == '1 2 1'\n'''"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n10 1\n-10 -1''') == '3 1 1'\nassert solution('''5\n8 5\n-8 -8\n-2 -3\n-10 -2\n-6 -3\n-5 -3''') == '1 2 1 2 1'\n\nprint('All tests passed!')\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n2 1\n1 2''') == '1 2'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\nassert solution(\"3 3 5 4 3 6\") == \"3.5\"\nassert solution(\"5 5 5 5 5\") == \"5.5\"\n\"\"\""
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 7') == '2.125'\nassert solution('3 2 3') == '1.0'\nassert solution('5 1 4') == '3.25'\nassert solution('6 10 10') == '2.125'\nassert solution('1') == '1.0'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'First'\nassert solution('''\n4\n2 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'Second'\nassert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'Third'\nassert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'Fourth'\nassert solution('''\n4\n2 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'Fifth'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\""
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2.125\"\nassert solution(\"2\\n1 1 1\") == \"1.0\"\n\n// For some reason, this test seems to always pass but not sure why\nassert solution(\"100\\n1 1 1\") == \"1.0\"\n\"\"\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2 5\n2 3 6\n''') == '2.125'\nassert solution('''\n5\n1 2 4\n4 3 6\n3 5 7\n2 3 8\n2 4 5\n3 1 7\n''') == '3.125'\nassert solution('''\n5\n1 2 4\n4 3 6\n3 5 7\n2 3 8\n2 4 5\n3 1 7\n''') == '2.125'\nassert solution('''\n5\n1 1 7\n2 3 3\n2 5 2\n6 1 6\n2 4 6\n''') == '4.5'\nassert solution('''\n1\n1 1 7\n1 2 5\n3 2 3\n1 2 4\n2 3 6\n3 1 7\n''') == '3.0'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n    1 2 1\n    2 1 2\n    3 1 1''') == '2.125'\n\nassert solution('''4\n    1 3 7\n    3 2 2\n    5 2 4\n    6 3 3''') == '2.125'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125'\nassert solution('''\n7\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 8 8\n''') == '2.125'\nassert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 8 8\n''') == '3.0'\nassert solution('''\n7\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 8 8\n''') == '3.0'\nassert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 8 8\n''') == '1.0'\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('*.*') == ['main.c', 'a.out']\n\n\n\"\"\"\n\np=input()\nn=int(input())\narr=[]\nfor i in range(n):\n    arr.append(input())\nprint(*sorted(list(set([i for i in arr if i.find(p)>-1]))),sep='\\n')"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\nassert solution(\"a*\") == [\"a.out\"]\nassert solution(\"*\") == [\"main.c\", \"a.out\", \"readme\"]\nassert solution(\"*.*.*\") == [\"main.c\", \"a.out\", \"readme\"]\n\n---"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('*.*') =='main.c a.out'\nassert solution('abcdefghijk') == 'abcdefghijk'\nassert solution('abcdefghijk.') == 'abcdefghijk'\nassert solution('a.c*') == 'a.c*'\nassert solution('*.*abcdefghijk.') =='main.c a.out'\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''*.*''') == ['main.c', 'a.out','readme', 'yacc']\nassert solution('''*.*''') == ['main.c', 'a.out','readme', 'yacc']\nassert solution('''*.*''') == ['main.c', 'a.out','readme', 'yacc']\n''')"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\nassert solution(\"*.c\") == [\"main.c\"]\nassert solution(\"*.c*\") == [\"main.c\"]\nassert solution(\"*.c*t\") == []\n\"\"\"\nimport sys\nP = sys.stdin.readline().rstrip()\nN = int(sys.stdin.readline())\nfiles = []\nfor i in range(N):\n    files.append(sys.stdin.readline().rstrip())"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('*.*') == ['main.c', 'a.out', 'def solution(stdin: str) -> str:']\nassert solution('*.c') == ['main.c']\nassert solution('*.py') == ['main.py','solution.py']\nassert solution('*.txt') == ['main.txt', 'a.out','readme', 'def solution(stdin: str) -> str:']\nassert solution('*.txt') == ['main.txt', 'a.out','readme', 'def solution(stdin: str) -> str:']\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\nassert solution(\"*.c\") == [\"main.c\"]\nassert solution(\"*.py\") == [\"yacc\"]"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('*.*') == ['main.c', 'a.out','readme']\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('*.*') == ['main.c', 'a.out','readme']\n\n'''\n\nimport re\n\nwhile True:\n    try:\n        string = input()\n        P = re.compile(string)\n        fileName = input()\n        N = int(input())\n        filenames = []\n        for i in range(N):\n            filenames.append(input())\n        print(*filenames, sep=\"\\n\")\n    except:\n        break"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('*.*') == ['main.c', 'a.out','readme']\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\nassert solution('1 100\\n0.500000') == '0.500000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '0.5'\nassert solution('1 2') == '0.500000'\nassert solution('1 2') == '0.500000'\nassert solution('1 2') == '0.500000'\nassert solution('1 2') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"0.500000\"\nassert solution(\"1 2\") == \"0.5\"\nassert solution(\"1 3\") == \"0.50\"\nassert solution(\"1 4\") == \"0.499\"\nassert solution(\"1 5\") == \"0.499\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000''') == '0.500000'\nassert solution('''1 1\n1.00000\n0.200000\n0.000000\n0.000000\n0.000000\n0.000000''') == '0.250000'\nassert solution('''1 1\n0.500001\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000''') == '0.000000'\nassert solution('''1 2\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000''') == '0.000000'\nassert solution('''1 2\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000''') == '0.000000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n0.500000\\n0.500000\") == \"0.5\"\nassert solution(\"2 2\\n0.500000\\n0.500000\") == \"0.5\"\nassert solution(\"3 3\\n0.500000\\n0.500000\") == \"0.3\"\nassert solution(\"3 3\\n0.500000\\n0.500000\") == \"0.3\"\n\n\"\"\"\n\n\n\nimport math"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1\n0.500000\n\"\"\") == \"0.500000\"\nassert solution(\"\"\"\n3 2\n0.500000 0.500000 0.500000\n0.500000 0.500000 0.500000\n\"\"\") == \"0.250000\"\nassert solution(\"\"\"\n4 5\n0.750000 0.000000 0.000000 0.000000\n0.000000 0.000000 0.000000 0.000000\n0.000000 0.000000 0.000000 0.000000\n\"\"\") == \"0.000000\"\nassert solution(\"\"\"\n10 10\n
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0.500000'\nassert solution('0.010001') == '0.010001'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0.5'\nassert solution('0.500000 1.000000') == '0.5'\nassert solution('0.5') == '0.5'\nassert solution('0.000000001 1') == '0.5'\nassert solution('0.0') == '0.5'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0.500000'\nassert solution('0.5000001 0.5000002 0.5000003 0.5000004 0.5000005') == '0.500000'\nassert solution('0.0000000 0.0000001 0.00000000 0.00000001 0.00000012 0.00000015') == '0.0000001'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('20 70.9') == '0.9999999999'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"0.0\"\nprint(solution(__import__(\"sys\").stdin.read()))\n\n--python solution.py --fileinput 5.1.txt -o 5.2.txt"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('100 50.00') == '0.00'\nassert solution('-10 0.00') == '-0.00'\nassert solution('0 0.00') == '0.00'\nassert solution('0 0.01') == '-0.01'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0.05 49.9') == '0.0'\nassert solution('0.15 49.9') == '0.0'\nassert solution('0.5 49.9') == '0.0'\nassert solution('0.05 0.9') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0 47.9') == '0.0'"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"0.0\""
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 49.9') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('3 2.9') == '2.1'\nassert solution('4 1.9') == '2.1'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''0 49.9\n0 99.9\n0 100.9\n0 100.1\n0 99.9\n0 49.9''') == '0.0'\nassert solution('''50 49.9\n50 99.9\n50 100.9\n50 100.1\n50 99.9\n50 49.9''') == '0.0'\n'''"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    0 49.9\n    ''') == '0.0\nassert solution('''\n    3 49.9\n    ''') == '3.0\nassert solution('''\n    99 49.9\n    ''') == '99.0\nassert solution('''\n    0 49.9\n    0 49.9\n    ''') == '0.0\nassert solution('''\n    0 49.9\n    0 49.9\n    ''') == '0.0\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n2 3\\n3 1\\n4 1') == '4 1 2\\n1 3\\n2 3\\n3 1\\n'\nassert solution('5\\n1 2\\n1 3\\n2 4\\n4 5\\n5 3\\n4 2\\n3 1\\n2 5\\n5 4\\n4 3\\n3 1\\n1 5\\n5 2\\n3 4\\n1 4\\n4 1\\n3 2\\n2 5\\n5 1\\n4 3\\n4 1\\n1 4\\n3 2\\n2 5\\n5 2\\n4 3\\n4 1\\n2 5\\n5 2\\n3 1\\n2 4\\n4 3\\n2 3\\n5 1\\n3 4\\n2 4\\n4 1\\n4 3\\n2 5\\n1 5\\n5 4\\n3 1\\n3 4\\n2 5\\n5 2\\n1 3\\n4 1\\n5 3\\n2 1\\n1 2\\n3 4\\n2 5\\n4 3\\n3 4\\n5 2\\n1 4\\n4 1\\n3 5\\n1 1\\n5 1\\n3 1\\n5 2\\n3 4\\n1 1\\n2 5\\n1 5\\n5 1\\n2 4\\n3 3\\n4 4\\n1 3\\n2 1\\n5 1\\n1 5\\n4 2\\n4 3\\n2 5\\n4 1\\n2 3\\n2 5\\n5 5\\n2 4\\n4 3\\n4 1\\n5 1\\n3 4\\n2 4\\n3 4\\n3 4\\n5 2\\n4 4\\n5 4\\n3 4\\n1 5\\n3 3\\n4 5\\n1 5\\n2 3\\n3 2\\n5 2\\n3 4\\n2 1\\n5 1\\n1 5\\n5 4\\n2 4\\n4 4\\n1 1\\n4 5\\n1 4\\n4 2\\n1 2\\n4 1\\n5 2\\n1 5\\n3 1\\n1 4\\n1 4\\n4 1\\n3 2\\n3 1\\n4 1\\n2 5\\n5 3\\n3 2\\n1 2\\n5 4\\n1 5\\n2 4\\n4 1\\n3 5\\n1 4\\n4 1\\n1 2\\n4 1\\n3 1\\n1 4\\n4 1\\n2 3\\n1 3\\n4 1\\n2 3\\n4 1\\n4 3\\n1 4\\n1 3\\n2 4\\n2 3\\n1 4\\n4 3\\n2 5\\n1 5\\n1 1\\n2 5\\n5 3\\n3 5\\n3 4\\n3 4\\n3 1\\n5 3\\n2 5\\n4 1\\n1 3\\n5 1\\n4 4\\n5 4\\n5 1\\n3 4\\n2 5\\n4 4\\n4 1\\n5 3\\n4 2\\n5 4\\n5 4\\n4 3\\n4 1\\n5 1\\n1 5\\n2 2\\n4 5\\n1 5\\n1 1\\n2 5\\n5 3\\n1 2\\n3 5\\n2 5\\n5 2\\n5 1\\n5 1\\n5 1\\n4 3\\n1 3\\n1 4\\n2 4\\n5 3\\n2 4\\n1 4\\n1 1\\n5 3\\n5 1\\n4 4\\n1 3\\n3 4\\n2 4\\n3 4\\n5 1\\n4 4\\n4 4\\n5 1\\n1 4\\n3 4\\n2 5\\n5 4\\n4 5\\n1 4\\n4 2\\n2 1\\n2 2\\n5 1\\n2 4\\n3 4\\n2 5\\n5 3\\n4 3\\n2 5\\n4 2\\n3 2\\n1 3\\n5 1\\n4 3\\n5 1\\n5 3\\n1 1\\n3 4\\n4 1\\n5 1\\n4 4\\n4 2\\n5 2\\n3 4\\n1 5\\n4 5\\n5 3\\n2 5\\n5 5\\n2 4\\n5 1\\n4 3\\n4 1\\n4 3\\n5 3\\n2 4\\n4 1\\n2 4\\n5 3\\n2 1\\n4 1\\n5 1\\n1 4\\n2 5\\n1 1\\n5 3\\n3 4\\n5 2\\n1 5\\n4 1\\n3 4\\n4 1\\n2 5\\n2 4\\n1 5\\n5 1\\n4 2\\n5 4\\n1 5\\n4 5\\n5 4\\n5 3\\n4 5\\n3 4\\n3 4\\n1 1\\n1 1\\n3 5\\n5 1\\n2 4\\n5 5\\n4 1\\n2 5\\n1 4\\n1 5\\n2 4\\n3 4\\n1 4\\n5 2\\n3 4\\n4 1\\n3 4\\n3 4\\n1 4\\n1 1\\n5 4\\n1 5\\n5 5\\n2 1\\n5 1\\n1 4\\n2 4\\n5 1\\n4 1\\n1 4\\n4 4\\n5 4\\n4 4\\n5 5\\n2 5\\n4 3\\n4 1\\n5 4\\n4 4\\n3 5\\n2 5\\n3 4\\n2 1\\n1 5\\n2 5\\n1 4\\n1 5\\n3 5\\n4 5\\n1 4\\n2 5\\n2 1\\n3 5\\n3 5\\n1 5\\n5 3\\n1 5\\n5 2\\n4 5\\n4 1\\n2 5\\n2 5\\n5 4\\n3 4\\n5 4\\n4 1\\n5 4\\n1 1\\n3 4\\n4 1\\n5 4\\n4 5\\n2 4\\n5 5\\n5 2\\n4 4\\n1 5\\n5 3\\n4 2\\n1 5\\n3 4\\n1 4\\n2 4\\n5 2\\n3 4\\n4 5\\n1 5\\n2 5\\n5 3\\n4 1\\n5 5\\n3 4\\n4 5\\n1 4\\n5 2\\n4 5\\n3 1\\n1 5\\n1 5\\n5 5\\n1 4\\n1 4\\n3 5\\n1 4\\n3 5\\n5 2\\n1 5\\n3 5\\n1 5\\n4 2\\n1 4\\n2 5\\n4 3\\n3 4\\n2 5\\n4 1\\n3 4\\n5 3\\n1 4\\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2') == '1 2\\n2 1\\n'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 1\n4 1\n''') == '''\n4 1\n2 1\n3 2\n1 3\n'''"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n4\") == \"1 2\\n2 3\\n3 1\\n4 1\""
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 2\\n3 1\\n4 1\\n') == '4 1\\n2 1\\n3 2\\n1 3'\nassert solution('5 2\\n1 2\\n3 1\\n4 1\\n') == '4 1\\n2 1\\n3 2\\n1 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 2\n2 3\n3 1\n4 1\n''') == '4 1\\n2 1\\n3 2\\n1 3'''"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 1\\n4 1') == '4 1 2 1 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 1\\n4 1\\n') == '4 1\\n2 1\\n3 2\\n1 3\\n'\n\nassert solution('10\\n10 1 5 2 4 3 6 5 3 2\\n5 2\\n6 3\\n7 4\\n8 1\\n9 3\\n10 8\\n') == '10 1\\n2 5\\n3 2\\n4 3\\n6 7\\n8 4\\n9 1\\n10 8'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2\n2 3\n3 1\n4 1\n''') == '''\n4 1\n2 1\n3 2\n1 3\n'''\nassert solution('''\n1 2\n2 3\n3 1\n4 1\n''') == '''\n4 1\n2 1\n3 2\n1 3\n'''\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n2 3\\n3 1\\n4 1\\n') == '4 1\\n2 1\\n3 2\\n1 3'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3') == '1'\nassert solution('6 5\\n2 1 6 3 5 3\\n5 1 3 2 4 5\\n1 1 1 1 1') == '2'\nassert solution('6 5\\n2 1 6 3 5 3\\n5 1 3 2 4 5\\n1 1 1 1 1') == 'forever'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"6 5\n2 1 6 3 5 3\"\"\") == \"1\"\nassert solution(r\"\"\"5 6\n2 1 6 3 5\n1 2 5 3 5\"\"\") == \"2\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3') == '1'\nassert solution('6\\n5\\n3') == '0'\nassert solution('6\\n5\\n1 2 3') == '1'\nassert solution('2\\n1 2 3\\n1 1 2 3') == '1'\nassert solution('1\\n1') == '1'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '1'\nassert solution('10 10\\n1 1 1 1 1\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2') == '2'\nassert solution('6 9\\n1 1 1 1 1 1\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2') == '0'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3') == '1'\nassert solution('10 4\\n5 3 7 7 1 2 5') == '0'\nassert solution('10 4\\n5 3 7 7 1 2 5\\n1 2 5\\n1 3 5\\n1 4 5\\n1 5 5\\n1 6 5') == '3'\nassert solution('10 4\\n5 3 7 7 1 2 5\\n1 2 5\\n1 3 5\\n1 4 5\\n1 5 5\\n1 6 5\\n1 7 5') == '1'\nassert solution('10 4\\n5 3 7 7 1 2 5\\n1 2 5\\n1 3 5\\n1 4 5\\n1 5 5\\n1 6 5\\n1 7 5\\n1 8 5') == '0'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 5\n2 1 6 3 5 3\n1 2 5 3 5''') == '1'\nassert solution('''\n10 10\n2 1 2 3 5 3\n1 2 5 3 5''') == '2'\nassert solution('''\n10 10\n1 2 3 5 3\n2 1 2 5''') == 'inf'\nassert solution('''\n4 4\n2 2 2 2\n1 1 2 1\n2 2 1 1\n1 1 2 2''') == '1'\nassert solution('''\n5 5\n2 1 6 3 5 3\n1 2 5 3 5\n4 4 4 4\n3 3 3 3\n2 2 2 2''') == 'inf'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '0'\nassert solution('6 5') == '1'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"\n5\n1 2 5 3 5\n1 2 5 3 5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n2 1 6 3 5 3\") == \"1\"\nassert solution(\"10 5\\n1 1 3 3 2 1 1 1 1 1\\n\") == \"4\"\nassert solution(\"10 2\\n1 1 3 3 2 1 1 1 1 1\\n\") == \"4\"\nassert solution(\"10 3\\n1 1 3 3 2 1 1 1 1 1\\n\") == \"6\"\nassert solution(\"10 4\\n1 1 3 3 2 1 1 1 1 1\\n\") == \"10\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\") == \"1\"\nassert solution(\"6 5\\n3 2 1 3 2 3\\n1 2 5 3 5\") == \"2\"\n\"\"\"\nfrom typing import List\nfrom collections import deque\nimport math\n\nm = int(input())\na = list(map(int, input().split(\" \")))\nk = int(input())\nb = list(map(int, input().split(\" \")))\n\na.sort()\nans = 0\ncnt = 0\nq = deque()\n\nfor i in range(m):\n    cnt += a[i]\n    q.append((a[i] / cnt, i))\n\nfor i in range(k):\n    x, y = b[i]\n    y -= 1\n\n    # find nearest index\n    while q and q[0][0] > x:\n        # update weight, update index\n        _, j = q.popleft()\n        cnt -= a[j]\n        q.append((a[j] / cnt, j))\n\n    # update the index\n    if q:\n        _, j = q.popleft()\n        if y > j:\n            q.append((a[j] / cnt, j))\n        elif y < j:\n            q.appendleft((a[j] / cnt, j))\n    else:\n        break\n\n    # update the weight\n    cnt += x\n\nprint(cnt)\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 1 10\n0 1 1 2 6\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 1 10\n0 1 1 2 6\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n1 1 1\n1 2 2\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 10\") == \"3\"\nassert solution(\"3 3 3\") == \"impossible\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 2 6\") == \"3\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('3 1 2') == '4'\n\n'''\n\nstdin = '''3 2 10\n0 1 1 2 6\n'''"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'\nassert solution('5 7 100000\\n
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"1\"\nassert solution(input + '0 1 1 2 3') == \"4\"\nassert solution(input + '0 1 1 2 3 6') == \"1\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '3'\nprint(solution(input))"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'\nassert solution('1 1 10\\n0 1 1 2 6') == 'impossible'\nassert solution('5 1 5\\n0 1 1 2 3\\n3 2 2\\n4 4 4') == '11'\nassert solution('3 2 6\\n0 1 1 2 3\\n4 4 4') == 'impossible'\nassert solution('3 3 7\\n0 1 1 2 3\\n4 4 4') == 'impossible'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 1 10\n0 1 1 2 6\n''') == '3'\nassert solution('''\n3 4 5\n0 1 3 2\n''') == '0'\nassert solution('''\n7 5 10\n1 2 3 4 5 6 7\n''') == '1'\nassert solution('''\n5 1 10\n1 2 3 4 5\n''') == '5'\nassert solution('''\n10 15 20\n1 2 3 4 5 6 7 8 9\n''') == '15'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 1 10\n0 1 1 2 6''') == '3'\nassert solution('''5 1 1 1 1\n0 0 1 1 1''') == 'Impossible'\n'''\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 5\n1 4\n3 3\n2 2\n1 1\n1 3\n1 5\n1 6\n5 6\n5 1\n4 3\n3 4\n1 2\n3 1\n''') == '1 2'\nassert solution('''\n2 10\n11 1\n1 11\n2 5\n1 7\n4 7\n5 1\n1 9\n4 8\n3 7\n1 6\n2 2\n4 4\n''') == '4 3 2 5 1'\nassert solution('''\n1 0\n''') == '1'\nassert solution('''\n1 1\n''') == '1'\nassert solution('''\n2 2\n1 1\n''') == '2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 99\n1 99\n''') == '2 1 2'\nassert solution('''\n2 100\n99 1\n1 99\nSample Output:\n1\n''') == '1 2'\n\nassert solution('''\n3 100\n99 1\n1 99\n1 99\nSample Output:\n2\n1 3\n''') == '2 1 3'\n\nassert solution('''\n10 100\n99 1\n1 99\n2 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\nSample Output:\n2\n2 1 1 3\n''') == '2 1 1 3'\n\nassert solution('''\n10 100\n99 1\n1 99\n2 99\n1 99\n1 99\n2 99\n1 99\n1 99\n1 99\n1 99\nSample Output:\n2\n1 1 2 3\n''') == '1 1 2 3'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 100\\n99 1\\n1 99\\n') == '2\\n1 2'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 100\\n99 1\\n1 99') == '1 2'\nassert solution('5 9\\n9 9\\n9 9\\n9 9\\n9 9') == '4'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '3'\nassert solution('1 100') == '1 1'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 100\\n99 1\\n1 99\\n') == '2\\n1 2'\nassert solution('1 1\\n1 2\\n1 3\\n') == '1\\n1 2'\nassert solution('1 100\\n99 1\\n1 99\\n') == '1\\n2 1'\nassert solution('1 100\\n1 1\\n1 1\\n') == '1\\n1 1'\nassert solution('1 100\\n99 1\\n1 99\\n') == '1\\n1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 100\\n99 1\\n1 99') == '2\\n1 2'\nassert solution('1 1\\n1 1') == '1'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"1\n99 1\n1 99\n2\n1 2\n\"\"\"\n) == \"\"\"2\n1 2\n\"\"\".replace('\\n', '')\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('99 1') == '1 99'\nassert solution('1 99') == '1 99'\nassert solution('99 1') == '1 99'\nassert solution('1 99') == '1 99'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"H\") == \"H\"\nassert solution(\"T\") == \"T\"\nassert solution(\"0.5\") == \"0.5\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\nassert abs(0.5 - solution('H\\nT\\n0.5')) <= 10**-6\nassert abs(0.5 - solution('H\\nT\\n0.1')) <= 10**-6\n\n\"\"\""
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\n\nstdin = 'H\\nT\\n1'\nassert solution(stdin) == '0.5'\n\nstdin = 'TT\\nTT\\n0.5'\nassert solution(stdin) == '0.5'\n\nstdin = 'TT\\nTT\\n1'\nassert solution(stdin) == '0.5'\n\nstdin = 'TT\\nTT\\n0.25'\nassert solution(stdin) == '0.5'\n\nstdin = 'TT\\nTT\\n0.25'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"H\\nT\\n0.5\") == \"0.5\"\nassert abs(solution(\"H\\nT\\n0.5\") - 0.5) <= 10**-6\nassert solution(\"H\\nT\\n0.0\") == \"0.0\"\nassert abs(solution(\"H\\nT\\n0.0\") - 0.0) <= 10**-6\nassert solution(\"H\\nT\\n1.0\") == \"1.0\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0.5') == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('H\\nT') == '0.5'\nassert solution('H\\nT\\n0.5') == '0.5'\nprint('Congratulations, have a nice day!')\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('H') == 'H'\nassert solution('T') == 'T'\nassert solution('0.5') == '0.5'\nassert solution('-0.5') == '0.5'"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''H\nT\n0.5''') == '0.5'\nassert solution('''H\nH\n0.5''') == '0.5'\nassert solution('''H\nH\n0.1''') == '0.1'\nassert solution('''H\nT\n0.1''') == '0.1'\nassert solution('''H\nH\n0.01''') == '0.01'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('H\\nT') == '0.5'"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"5\") == \"1 3 5 7 9 11 13 15\"\nassert solution(\"6\") == \"1 3 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '8\\n1 3 5 7 9 11 13 15'"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n\") == \"1 3 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"1\") == \"1 3 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '8\\n1 3 5 7 9 11 13 15'\nassert solution('1') == '7\\n1 3 5 7 9 11 13 15'\nassert solution('2') == '7\\n1 3 5 7 9 11 13 15'\nassert solution('3') == '7\\n1 3 5 7 9 11 13 15'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n8\n1 4\n9 2 3\n10 5\n1 5\n6 2\n''') == '1 4 5 7 9 11 13 15'\nassert solution('''\n13\n3\nn'''))"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '8 1 3 5 7 9 11 13 15'\nassert solution('6') == '1 3 5 7 9 11 13 15'\n\"\"\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"1 3 5 7 9 11 13 15\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('6') == '1 2 3 4 5 6'\nassert solution('7') == '1 2 3 4 5 6'\nassert solution('10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('30') == '1 2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"1 3 5 7 9 11 13 15\"\n\nimport pytest\nimport sys\nimport io\nimport os\nimport math\n\nfrom typing import Callable, List\nfrom collections import Counter, defaultdict\n\nclass Solution:\n    def __init__(self) -> None:\n        pass\n\n    def solve(self, A: int) -> int:\n        pass\n\n    def test_solve(self):\n        assert self.solve(5) == 8\n        assert self.solve(6) == 1 3 5 7 9 11 13 15"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 5 7') == '3'\nassert solution('3') == '1'\nassert solution('2 2') == '0'\nassert solution('2 5') == '1'\nassert solution('1 5') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '3'\nassert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '1'\nassert solution('''4\n3\n1\n2\n1''') == '0'\nassert solution('''10\n3\n1\n2\n1\n2\n3\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12''') == '1'"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n''') == '0'\nassert solution('''\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n''') == '3'\nassert solution('''\n1\n2\n3\n5\n''') == '1'\nassert solution('''\n5\n4\n3\n2\n1\n''') == '0'\nassert solution('''\n3\n3\n1\n''') == '2'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 5 7') == '3'\nassert solution('3') == '1'\nassert solution('2 2') == '0'\nassert solution('2 5') == '1'\nassert solution('1 5') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '1'\nassert solution('1') == '0'\nassert solution('3') == '1'\n\nn = int(input())\nl = list(map(int, input().split()))\nq = int(input())\nqueries = []\nfor i in range(q):\n    queries.append(list(map(int, input().split())))\n\nres = [0] * q\nfor i in range(q):\n    res[i] = solution(str(l[queries[i][0] - 1] ^ l[queries[i][1] - 1]))\n\nfor i in range(q):\n    print(res[i])"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\n\n\"\"\"\n\nk = int(input())\nx = [int(input()) for _ in range(k)]"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3'\n\nassert solution('1\\n1\\n1\\n') == '0'\n\nassert solution('1\\n1\\n1\\n') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 5 7\\n3') == '3\\n1\\n'\nassert solution('5\\n1 3 5 7\\n3') == '1\\n1\\n0\\n'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n5') == '3\\n1\\n1\\n1\\n0\\n'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n5') == '3\\n1\\n1\\n1\\n1\\n'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3\\n1\\n0'\n\"\"\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\") == \"3\"\nassert solution(\"3\\n10 20 30 40\\n10 20 30 40\\n20 30 40\\n30 40\\n\") == \"20\"\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\nassert solution('2 3\\n0 0 3 0') == '3'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1\\n1 1 -2 0') == '0'\nassert solution('1 5\\n1 1 -2 0') == '1'\nassert solution('2 4\\n1 1 -2 0') == '2'"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1\\n1 -2 0') == '0'\nassert solution('1 100\\n1 -2 0') == '0'\nassert solution('5 1\\n1 1 -2 0\\n1 1 -2 0\\n1 -2 0 0\\n1 -2 0 -1\\n1 1 -2 0') == '3'\nassert solution('5 5\\n1 1 -2 0\\n1 -2 0 -1\\n1 -2 0 -1\\n1 1 -2 0') == '4'\nassert solution('5 5\\n1 1 -2 0\\n1 -2 0 -1\\n1 -2 0 -1\\n1 1 -2 0') == '3'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 1 -2 0\") == \"0\"\nassert solution(\"2 5\\n2 1 -2 0\") == \"1\"\nassert solution(\"2 5\\n4 0 -2 0\") == \"2\"\nassert solution(\"2 5\\n4 0 -2 0\") == \"3\"\nassert solution(\"2 5\\n4 0 -2 0\") == \"4\"\n\"\"\""
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n1 -2 0') == '0'\nassert solution('2 1\\n1 1 -2 0') == '0'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n1 1 -2 0\n''') == '0'\nassert solution('''\n2 2\n1 -2 0\n1 -2 0\n''') == '2'\nassert solution('''\n2 2\n1 -2 0\n1 2 0\n''') == '3'\nassert solution('''\n2 2\n1 -2 0\n1 -1 0\n''') == '1'\nassert solution('''\n3 4\n5 5 -2 0\n4 5 -2 0\n1 1 -2 0\n''') == '4'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '0'\nassert solution('3 1') == '2'\nassert solution('4 1') == '1'\nassert solution('5 1') == '4'\nassert solution('6 1') == '5'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\nassert solution('5 5\\n-1 -1 -2 0 1 2') == '1'\n\nimport numpy as np\nfrom itertools import combinations\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 -2 0') == '0'\nassert solution('1 1 -2 0') == '1'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"2 1\\n1 1 -2 0\") == \"0\"\nassert solution(\"2 2\\n1 1 -1 1\\n0 -1 -1 -2\") == \"1\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '60'\nassert solution('2') == '60'\nassert solution('1') == '61'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '194'\nassert solution('3') == '1227'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n''') == '194'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '194'\nassert solution('1') == '2019 10 25'\nassert solution('5') == '2019 10 25 2020 10 30'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '194'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"194\"\nassert solution(\"3\") == \"2019 10 25\"\nassert solution(\"1\") == \"2019 10 18\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '194'\nassert solution('3') == '1979 6 10'\nassert solution('4') == '1973 6 10'\nassert solution('5') == '1967 5 16'\nassert solution('6') == '1968 5 24'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '194'\nassert solution('1') == '0'\nassert solution('5') == '32'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '194'\nassert solution('1') == '1930'\nassert solution('3') == '1930'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"negative-infinity -5\"\nassert solution(\"6 10 10 10 10 0\") == \"positive-infinity -5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 1 2 1 1\n0 1 1 0 0\n1 0 2 0 0\n1 1 0 1 0\n''') == 'negative-infinity -5'\nassert solution('''\n1 1 1 1 1 1\n0 0 0 0 0 0\n0 0 0 0 0 0\n1 0 0 0 0 0\n1 0 0 0 0 0\n1 0 0 0 0 0\n''') == 'negative-infinity -5'\nassert solution('''\n1 -1 1 0 0\n-1 -1 0 0 0\n-1 1 0 1 0\n-1 1 0 0 0\n-1 1 0 0 0\n-1 1 0 0 0\n''') == 'negative-infinity -5'\nassert solution('''\n-1 1 1 1 1 1\n0 0 0 0 0 0\n0 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n''') == 'negative-infinity -5'\nassert solution('''\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == 'negative-infinity -5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == '5 12.5'\nassert solution('6 10 10 10 10 0') == 'negative-infinity -5'"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '''\nnegative-infinity 0\n5 12.5\nnegative-infinity -5\n'''\nassert solution('''\n5 0 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '''\nnegative-infinity 0\nnegative-infinity -5\nnegative-infinity -5\n'''\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '''negative-infinity -5\n-5 10.5\n-5 -5.5\n-5 -5.5\nnegative-infinity'''\n\nassert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '''negative-infinity -5\n-5 10.5\n-5 -5.5\n-5 -5.5\nnegative-infinity'''\n\nassert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '''negative-infinity -5\n-5 10.5\n-5 -5.5\n-5 -5.5\nnegative-infinity'''"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '5 12.5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == 'negative-infinity -5'\nassert solution('6 10 10 10 10 0') == 'negative-infinity negative-infinity'\nassert solution('6 10 10 5 10 0') == 'negative-infinity negative-infinity'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10 10 10 10 0') == '5 12.5'\nassert solution('6 10 10 10 10 0') == '6 12.5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n-100 100\n-100 100\n-100 100\n-100 100\n''') == 'negative-infinity -5\\n5 12.5\\nnegative-infinity -5\\n5 12.5\\nnegative-infinity -5\\n'\n\nprint(solution(open('input.txt')))\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == 'negative-infinity 0\n''' == 0\n\nassert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '5 12.5\n''' == 'negative-infinity -5'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4') == '2'\n\n'''"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4') == '2'\nassert solution('50 10000') == 'IMPOSSIBLE'\nassert solution('100 30000') == '2'\nassert solution('400 0') == 'IMPOSSIBLE'\nassert solution('50 10000') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == \"1\"\nassert solution('2 4') == \"2\"\nassert solution('1 1') == \"IMPOSSIBLE\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n\nassert solution('''\n5 5\n200 30000\n300 10000\n400 0\n500 10000\n600 10000\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"IMPOSSIBLE\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == '2'\nassert solution('5 7') == '3'\nassert solution('10 10') == 'IMPOSSIBLE'\nassert solution('2 2') == 'IMPOSSIBLE'\nassert solution('1 1') == '1'"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0') == '2'\nassert solution('4 4\\n100 30000\\n200 20000\\n300 10000\\n400 -40000') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"5 2\") == \"IMPOSSIBLE\"\nassert solution(\"100 30000\") == \"2\"\nassert solution(\"200 20000\") == \"2\"\nassert solution(\"300 10000\") == \"2\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"\"\"345 2\nrotS 2 1\nnegR 2\n\"\"\"\nassert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"\"\"345 2\nrotS 2 1\nnegR 2\n\"\"\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 2\n-1 -2\n1 2 3\n\"\"\") == \"345 2\"\n\nassert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\"\n\nassert solution(\"\"\"\n2 3\n1 2 3\n-2 1 2\n-1 -2 1\n1 1 -1\n\"\"\") == \"180 3\"\n\nassert solution(\"\"\"\n3 3\n1 2 3\n-2 1 2\n-1 -2 1\n1 1 -1\n\"\"\") == \"180 3\"\n\nassert solution(\"\"\"\n3 3\n1 2 3\n4 5 6\n-2 1 2\n-1 -2 1\n1 1 -1\n\"\"\") == \"360 3\""
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"5\"\nassert solution(\"1\") == \"1\"\nassert solution(\"-2\") == \"2\"\nassert solution(\"-10\") == \"4\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2\\nrotS 2 1\\nnegR 2'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n1 1\n2 1\n''') == '1'\nassert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\nSample Output:\n345 2\nrotS 2 1\nnegR 2\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n''') == \"345 2\\nrotS 2 1\\nnegR 2\\n\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\\n') == '345 2\\nrotS 2 1\\nnegR 2\\n'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3 4\n    1 -2 5 200\n    -8 0 -4 -10\n    11 4 0 100\n    \"\"\"\n    ) == \"345 2\"\n    assert solution(\n    \"\"\"\n    3 4\n    1 2 3\n    2 4 5\n    3 4 6\n    \"\"\"\n    ) == \"5\"\n    assert solution(\n    \"\"\"\n    3 4\n    1 2 3\n    2 4 5\n    3 4 6\n    \"\"\"\n    ) == \"0\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\\n') == '345 2\\nrotS 2 1\\nnegR 2\\n'\n\nassert solution('3 2\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n') == '12 34\\nrotR 2 1\\nnegR 2\\n'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3 2') == '0.5'\nassert solution('2\\n3 1 1') == '0.5'\nassert solution('3\\n3 2') == '0'\nassert solution('4\\n3 2') == '0'\nassert solution('5\\n3 2') == '0'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '0.5'\nassert solution('3 2') == '0.75'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2\n3 1 1\n''') == '0.5'\nassert solution('''4 3\n2 3 4\n''') == '3.5'\nassert solution('''2 3\n1 1 2\n''') == '1'\nassert solution('''2 2\n5 5 5\n''') == '1.5'\nprint('You passed all tests!')"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n3 1 1') == '0.5'\n\nimport math\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '0.5', 'First'\nassert solution('3 2') == '1', 'Second'\nprint('Almost done! Go check your tests!')\n\"\"\""
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '0.5'\n\n'''\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2\n3 1 1\n''') == '0.5'\nassert solution('''3 3\n1 1 1\n''') == '1.0'\n'''\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '0.5'\nassert solution('3 3') == '0.3333333333333333'\n\n
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3 1 1') == '0.5'\nassert solution('5 3\\n6 7 4 7') == '1.0'\nassert solution('5 6\\n5 7 4 7') == '0.5'\nprint('Tests passed')"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n3 1 1\") == \"0.5\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 4\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5'\nassert solution('''\n10 10\n1 4\n1 4\n2 4\n2 4\n3 4\n3 4\n3 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n1 4\n3 4\n5 4\n1 5\n3 5\n''') == '1 4 5 2 6 7'\n\nassert solution('''\n5 4\n1 4\n3 4\n5 4\n1 5\n3 5\n''') == '1 4 5 3 6 7'\n\nassert solution('''\n9 8\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 3 6 7 2'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 5\n1 4\n2 2\n3 3\n1 1\n1 3\n1 5\n2 2\n3 3\n''') == '1 4 5'\n\nassert solution('''\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 2 7 9'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 2 6 7 8 9'\nassert solution('''\n7 9\n1 2\n4 5\n3 6\n1 6\n5 8\n7 9\n''') == '1 6 2 4 5 7'\nassert solution('''\n7 5\n1 2\n4 3\n2 6\n1 6\n4 5\n7 8\n''') == '2 6 1 4 3 5 7'\nassert solution('''\n7 4\n1 2\n4 5\n2 3\n1 6\n5 8\n7 9\n''') == '1 2 3 4 6 5 7 9'\nassert solution('''\n5 3\n1 2\n4 5\n2 3\n1 6\n5 7\n8 9\n''') == '1 6 2 4 5 7 8 9'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n10 10\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"1 4 5 2 6 7 3 8 9 6 8 5 9\"\n\nassert solution(\"\"\"\n3 5\n1 4\n5 4\n1 5\n\"\"\") == \"1 4 5\"\n\nassert solution(\"\"\"\n2 5\n1 4\n5 4\n1 5\n\"\"\") == \"1 4 5\"\n\nassert solution(\"\"\"\n2 2\n1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n8 5\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"2 6 7 3 8 9 6 8 5 9\"\n\nprint(solution(*map(int, input().split())))\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5\n1 2\n3 4\n4 1\n3 4\n''') == '1 4 5 2 3 4'\nassert solution('''\n5 5\n1 2\n3 4\n4 1\n3 4\n''') == '1 4 5 2 3 4'\nassert solution('''\n6 3\n1 5\n3 5\n5 1\n5 2\n3 4\n''') == '1 5 5 3 5 2 4'\nassert solution('''\n7 6\n1 5\n1 6\n6 2\n5 4\n5 1\n6 3\n4 3\n''') == '1 5 1 6 2 5 4 6 3'\nassert solution('''\n1 5\n1 6\n5 1\n5 2\n6 1\n6 2\n''') == '1 5 1 6 2 5 4 6 3'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5\\n2 6 7\\n3 8 3\\n8 9 8\\n6 8 5\\n5 9 5'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n8\n2\n5\n\"\"\") == \"1 4 5 2 6 7 3 8\"\nassert solution(\"\"\"\n4\n3\n5\n8\n6\n\"\"\") == \"1 4 5 6 7 8 3\"\nassert solution(\"\"\"\n1\n5\n7\n\"\"\") == \"1 5 7\"\nassert solution(\"\"\"\n8\n4\n3\n5\n2\n6\n\"\"\") == \"2 3 5\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"1 4 5 2 6 7 3 8 9\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '1 2 3'\nassert solution('2 2') == '1 2'\nassert solution('5 4') == '1 4 2 5'\nassert solution('5 5') == '1 4 4 5'\nassert solution('3 10') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11 2') == '13500'\nassert solution('12000') == '13500'\nassert solution('9000') == '13500'\nassert solution('4500') == '13500'\nassert solution('10000') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 2') == '13500'\nassert solution('11 2') == '13500'\nassert solution('10 0') == '0'\nassert solution('0 0') == '0'\nassert solution('0 0') == '0'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''11 2\n    12000\n    9000\n4500\n    10000\n12000\n    11000\n    12000\n    18000\n    10000\n    9000\n    12000''') == '13500'\nassert solution('''100 11\n    12000\n    9000\n4500\n    10000\n    12000\n    11000\n    12000\n    18000\n    10000\n    9000\n    12000''') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n    5 1\n    4000\n    3000\n    5000\n    8000\n    8000\n\"\"\") == \"13500\"\nprint(solution(r\"\"\"\n    5 1\n    4000\n    3000\n    5000\n    8000\n    8000\n\"\"\") == \"13500\")\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    11 2\n    12000\n    9000\n    4500\n    10000\n    12000\n    11000\n    12000\n    18000\n    10000\n    9000\n    12000''') == '13500'\nprint(solution('''\n    11 2\n    12000\n    9000\n    4500\n    10000\n    12000\n    11000\n    12000\n    18000\n    10000\n    9000\n    12000'''))"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 2') == '13500'\nassert solution('12000') == '13500'\nassert solution('9000') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"11 2\") == \"13500\"\nassert solution(\"9000\") == \"13500\"\n\"\"\""
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11 2') == '1350'\nassert solution('12000') == '1350'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11 2\") == \"1350\"\nassert solution(\"12000\") == \"1350\"\nassert solution(\"9000\") == \"1350\"\nassert solution(\"4500\") == \"1350\"\nassert solution(\"10000\") == \"1350\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n\"\"\") == \"13500\"\nassert solution(\"\"\"\n12 10\n10 20 30 40 50 60\n15 50\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4\nSample Output:\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 16') == \"\"\"Hot_cross_buns!=\n________Hot_cross_buns!=\nHot_cross_buns!_=___Hot_cross_buns!_=\n________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nOne_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nOne_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\n________One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\n________Hot_cross_buns!=\nHot_cross_buns!=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nOne_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\n________One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\n________Hot_cross_buns!=\nHot_cross_buns!=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 0 1 1 2 2 2\n2 2 2 2 2 2 2 2\n3 3 3 2 3 2 3 2\n4 4 4 4 4 4 4 4 4\n''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\n''')\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 16\") == \"\"\"Hot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\nSample Output:\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n________Hot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n'\n\nprint(solution('''\n2 20\nhot_cross_buns! hot_cross_buns! =\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2''') == '''Hot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 16\") == \"\"\"Hot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 4 4 4 4\nSample Output:\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 16\\n4 4 4 4 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\nassert solution('4 4 2\\n1 3 5 2\\n2 5 6 4\\n3 4 2 1\\n4 2 5 1') == '4'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 1') == '33'\nassert solution('2 2 1') == '10'\nassert solution('3 2 1') == '10'\nassert solution('2 1 1') == '10'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('3 2 1 2') == '70'\nassert solution('3 2 1 2 2') == '77'\nassert solution('3 2 1 2 2 2') == '85'\nassert solution('3 2 1 2 2 2 2') == '86'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\nassert solution('5 7 7\\n2 1 1 1 2\\n1 2 3 4\\n3 3 1 1\\n3 4 4 4\\n4 1 3 3\\n4 1 2 3') == '0'\nprint('all tests passed')\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('10 3 1') == '33'\nassert solution('10 3 2') == '36'\nassert solution('2 4 4') == '42'\nassert solution('9 4 4') == '42'\n\"\"\"\n\n\nimport math\nfrom bisect import bisect_left\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('2 2 1') == '10'\n\nassert solution('3 1 1') == '10'\nassert solution('2 1 1') == '10'\n\nassert solution('3 2 2') == '60'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n    3 2 1\n    1 2 10\n    1 4 6 6\n    1 6 10 5\n    2 10 30 33\n    '''\n    ) == '33'"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == \"33\"\nassert solution(\"5 2 3 2\") == \"13\"\nassert solution(\"5 5 5 5 5\") == \"15\"\nassert solution(\"20 10 10 20 10 10 10 20 20\") == \"55\"\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n\"\"\") == \"33\"\n\nassert solution(\"\"\"\n2 1\n2 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 2\n1 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 3\n1 2\n1 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 2\n1 2\n3 4\n\"\"\") == \"0\""
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\\n') == '33'\nassert solution('2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\\n') == '70'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n20 15 10\\n7 7\\n30 0') == '405'"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n1\n20 15 10\n7 7\n30 1\n\"\"\") == \"375\"\nassert solution(\"\"\"\n5\n20 15 10\n7 7\n30 1\n40 0\n50 0\n\"\"\") == \"475\"\nassert solution(\"\"\"\n5\n20 15 10\n7 7\n30 1\n40 0\n50 0\n\"\"\") == \"475\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    3\n    20 15 10\n    7 7\n    30 0\n''') == '405'\n\nassert solution('''\n    3\n    20 15 10\n    7 7\n    30 0\n    30 0\n    30 0\n    30 0\n''') == '405'\n\nassert solution('''\n    3\n    20 15 10\n    7 7\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n''') == '405'\n\nassert solution('''\n    3\n    20 15 10\n    7 7\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n''') == '405'\n\nassert solution('''\n    3\n    20 15 10\n    7 7\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n''') == '405'"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\nassert solution('''\n3\n20 15 10\n7 7\n30 1\n''') == '1044'\nassert solution('''\n3\n20 15 10\n7 7\n30 15\n''') == '1044'\nassert solution('''\n3\n20 15 10\n7 7\n30 16\n''') == '945'\nassert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n10 10 20 10\n5 0 0 0\n10 0 0 0\n0 0 0 0\n5 0 0 0\n''') == \"75\"\nassert solution('''\n4\n10 10 20 10\n5 0 0 0\n10 0 0 0\n0 0 0 0\n5 0 0 0\n''') == \"55\"\n'''\nFirst run:\ninput:\n3\n20 15 10\n7 7\n30 0\noutput:\n405\n\nSecond run:\ninput:\n4\n10 10 20 10\n5 0 0 0\n10 0 0 0\n0 0 0 0\n5 0 0 0\noutput:\n55\n'''"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\nassert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\n\nSample Input:\n2\n1\n2\n1 2\nSample Output:\n4\n''' == '4')\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n2\n3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n20 15 10\\n7 7\\n30 0') == '405'\nassert solution('2\\n1 1 2\\n0 0 0\\n1 1 3\\n0 0 1\\n0 0 0\\n1 1 4\\n1 1 5\\n0 0 0\\n0 0 0') == '15'"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n20 15 10\\n7 7\\n30 0') == '405'\nprint('Solution: ', solution(input()))\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 2 4 7\n''') == '28 4 21 14.000000'\n'''\nYou are given a string,, of length, comprised of letters 'L' and 'G'.\n\nFor each letter in, you need to count the number of 'L' letters in a substring of, starting from.\n\nFind the number of distinct letter substrings of, and assign that value to a variable,.\n\nThen, compute and print the number of distinct letter substrings of, in ascending order. Each distinct string should be printed on a new line.\n\nFunction Description\n\nComplete the function countLetters in the editor below. The function must return an integer that corresponds to the number of distinct letter substrings of, in ascending order.\n\ncountLetters has the following parameter(s):\n\ns: a string\nInput Format\n\nThe first line contains a single integer, the number of distinct letter substrings of.\nThe second line contains  space-separated string, the substring.\n\nConstraints\n\n, where,\nOutput Format\n\nPrint the number of distinct letter substrings of, in ascending order.\n\nSample Input\n\n2\nTGLLGG\nTGLLGG\nSample Output\n\n1\n2\nExplanation\n\nTGLLGG has 4 distinct letter substrings.\nTGLLGG, G, L, and G, are the distinct letter substrings."
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 4 7') == '28 4 21 14.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"28 4 21 14.0\"\nassert solution(\"1\\n6\") == \"1 1 1 1 1 1\"\nassert solution(\"4\\n1 1 2 3\") == \"1 2 3 1 2\"\nassert solution(\"4\\n1 2 3 5\") == \"1 1 5 1 2\"\nassert solution(\"4\\n1 2 3 4\") == \"1 2 3 4 1\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '28 4 21 14.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 4\\n1 2\\n1 3\\n4 5') == '15.0 14.0 20.0'"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n4 5 7') == '28 4 21 14.0'\nassert solution('3\\n4 5 7 8 9') == '28 4 21 14.0'\nassert solution('1\\n2') == '3 3'\n'''\nimport math"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 4 7\\n') == '28 4 21 14.0'\nassert solution('3\\n5 5 5\\n') == '10 15 15 10.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 2 4 7\n''') == '28 4 21 14.0'\n\n\"\"\""
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'\n'''"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"1 2 3\"\"\") == \"28 21 14\"\nassert solution(\"\"\"1 1 1\"\"\") == \"28 1 1\"\nassert solution(\"\"\"1 1 2 3\"\"\") == \"28 1 1\"\nassert solution(\"\"\"1 1 2 3\"\"\") == \"28 1 1\"\nassert solution(\"\"\"1 1 1 2 3\"\"\") == \"28 1 1\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes'\nassert solution('''\n4 3\n1 2 3\n2 3 4\n3 1 4\n''') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n1 2 3 4\\n4 3 2 1\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\"\nassert solution(\"3 4\\n1 2 3 4\\n4 3 2 1\\n2 3 4 1\") == \"no\"\nprint(solution(input()))"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2\\n1 2 3\\n1 3 4') == 'yes\\n1 2 3 4'\nassert solution('3 2\\n1 2 3\\n2 3 1') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 3\n2 4 1 5 6\n4 5 2 6 3 1\n3 1 6 5 2 4\n6 5 4 2 1 3\n1 4 3 2 6 5\"\"\") == \"\"\"yes\n1 2 3 4 \n2 3 4 1 \n3 4 1 2 \n4 1 2 3\n1 4 3 2\n6 5 4 2 1\n3 1 6 5 2 4\n5 6 5 2 1 3\n4 2 3 1 6 5\"\"\".strip()\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'\n\"\"\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'\nassert solution('10 10\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n5 6 7 8\\n7 8 1 2\\n1 2 3 4\\n3 4 1 2\\n4 5 6 7\\n6 7 1 2\\n5 6 7 8\\n8 1 2 3\\n7 8 1 2\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\\n\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\\n\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\nassert solution(\"4 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n\") == \"yes\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"\n10 10\n1 2 3 4 5 6 7 8 9 10\n2 3 4 1 6 7 8 9 10\n3 4 1 6 7 8 9 10\n4 1 6 7 8 9 10\n5 6 7 8 9 10\n6 7 8 9 10\n7 8 9 10\n8 9 10\n9 10\n10\"\"\") == \"\"\"yes\n1 2 3 4 5 6 7 8 9 10 \n2 3 4 1 6 7 8 9 10 \n3 4 1 6 7 8 9 10 \n4 1 6 7 8 9 10 \n5 6 7 8 9 10\n6 7 8 9 10 \n7 8 9 10 \n8 9 10 \n9 10\"\"\"[:-1]\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n10 10 -10 -4 10\n''') == '10.000000000'\nassert solution('''\n2\n1 2\n''') == '1.50000000000001'\n'''\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n10 10 -10 -4 10\n''') == '10.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n10 10 -10 -4 10\\n') == '10.000000000'\n\"\"\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0.0'\nassert solution('3') == '10.0'\nassert solution('6') == '11.0'\nassert solution('6') == '11.0'\nassert solution('3') == '0.0'"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n2 2 -10 -4 2') == '2.0'\n\"\"\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n10 10 -10 -4 10\n''') == '10.0'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n10 10 -10 -4 10\n''') == '10.000000000'\nassert solution('''\n4\n1 3 -2 -3\n''') == '1.3333333333'\n\"\"\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10.000000000\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000000'\nassert solution('10\\n10 10 -10 -4 10') == '10.000000000'\n'''"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n10 10 -10 -4 10\\n') == '10.0'\nassert solution('5\\n10 10 -10 -4 10\\n1') == '0.0'\nassert solution('5\\n10 10 -10 -4 10\\n-1') == '0.0'\nassert solution('5\\n10 10 -10 -4 10\\n-1 -3') == '0.0'\nassert solution('5\\n10 10 -10 -4 10\\n-1 -3 -5') == '10.0'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 1\nassert solution('3') == 2\nassert solution('10') == 10"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'\nassert solution('4\\n5\\n3\\n2\\n3') == '2'\nassert solution('4\\n5\\n3\\n2\\n10') == '1'\nassert solution('4\\n5\\n3\\n2\\n10') == '2'\nassert solution('1\\n2\\n10\\n10') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n30\n3\n2\n45\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n4\n3\n2\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n7\n3\n2\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n7\n6\n3\n2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n7\n6\n5\n4\n\"\"\") == \"1\""
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3\\n2\\n1') == '1'\nassert solution('6\\n1\\n5\\n4\\n3\\n7\\n10') == '1'\nassert solution('10\\n1\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1') == '1'\nassert solution('16\\n1\\n13\\n10\\n7\\n6\\n5\\n4\\n3\\n2\\n1') == '2'\nassert solution('1\\n2\\n3\\n4\\n5') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2\\n4\\n10\\n3\") == \"1\"\nassert solution(\"5\\n3\\n5\\n10\\n3\") == \"0\"\nassert solution(\"5\\n3\\n4\\n10\\n3\") == \"0\"\nassert solution(\"5\\n3\\n2\\n10\\n3\") == \"1\"\nassert solution(\"5\\n3\\n2\\n10\\n3\") == \"0\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n30\\n3\\n2\\n45\") == \"1\"\nassert solution(\"4\\n10\\n2\\n5\\n5\\n4\\n3\\n7\") == \"8\"\nassert solution(\"10\\n24\\n1\\n8\\n13\\n10\\n12\\n5\\n6\\n4\") == \"8\"\nassert solution(\"10\\n20\\n1\\n8\\n15\\n10\\n12\\n5\\n6\\n4\") == \"8\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'\nassert solution('6\\n2\\n5\\n9\\n20\\n18') == '2'\nassert solution('15\\n3\\n5\\n9\\n7\\n13') == '2'\nassert solution('1\\n3\\n6\\n10') == '0'\nassert solution('5\\n1\\n3\\n4\\n2\\n2') == '3'\n\"\"\"\nimport math\n\nn = int(input())\nfactors_dict = {}\n\nfor num in range(2, 10**9+1):\n    if num not in factors_dict:\n        factors_dict[num] = []\n    for j in range(num, 10**9+1, num):\n        if j not in factors_dict:\n            factors_dict[j] = []\n        factors_dict[num].append(j)\n        factors_dict[j].append(num)"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"3\\n\") == \"2\"\nassert solution(\"5\\n\") == \"3\"\nassert solution(\"9\\n\") == \"4\"\nassert solution(\"9\\n\") == \"4\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.360000000\"\nassert solution(\"10 10 0.0 0.1\\n1 2 10\\n2 3 10\\n3 4 10\\n4 5 10\\n5 6 10\\n6 7 10\\n7 8 10\\n8 9 10\\n9 10 0.1\\n\") == \"0.000000000 -0.450000000\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000'\nassert solution('10 1.000 1.000\\n2 3 7\\n3 4 5\\n4 5 1\\n5 7 8\\n7 8 1\\n1 7 6\\n6 6 2\\n8 1 8\\n1 1 1\\n') == '-0.880000000 0.000000000'\nassert solution('2 5 8\\n3 4 7\\n1 4 5\\n1 5 7\\n2 5 2\\n4 5 1\\n5 7 8\\n7 8 1\\n1 7 6\\n6 6 2\\n8 1 8\\n1 1 1\\n') == '0.000000000 1.360000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\\n'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000\nassert solution('''\n10 10 5.0 0.66\n5 8 8\n4 6 1\n6 9 1\n8 3 1\n5 7 7\n6 5 5\n3 5 3\n''') == '0.000000000 1.360000000\n'''\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2 2 1 3\") == \"0.800000\"\nassert solution(\"1 1 2 2 1 3\") == \"0.800000\"\nassert solution(\"3 3 5 3 5 3\") == \"1.08\"\nassert solution(\"2 2 2 1 1 2 1 2 1\") == \"0.9595959595959598\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 6 3.0 0.66\") == \"0.000000000 1.360000000\"\nassert solution(\"2 4 8\") == \"0.000000000 1.000000000\"\nassert solution(\"4 6 1\") == \"0.000000000 1.000000000\"\nassert solution(\"3 6 1\") == \"0.000000000 1.000000000\"\nassert solution(\"4 5 5\") == \"0.000000000 0.360000000\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000'\n\nassert solution('''\n6 6 2.0 0.33\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.000000000'\n\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000'\n\nassert solution('''\n6 6 2.0 0.33\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.000000000'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('12') == '2'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '4\\n'\n    '0 0\\n'\n    '0 3\\n'\n    '3 3\\n'\n    '3 0\\n'\n    '2\\n'\n    '1 1\\n'\n    '2 2'\n) == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '4'\nassert solution('8') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n\"\"\"\n) == \"4\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n2') == '4', 'First example'\nassert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\\n') == '2', 'Second example'\nprint('The local tests passed')"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2''') == \"4\"\nassert solution('''1\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2''') == \"2\"\nassert solution('''10\n0 0\n0 5\n5 5\n5 0\n5 -3\n3 -3\n3 0\n2\n1 2\n2 2\n10\n-2 -2\n-2 -3\n-3 -3\n-3 0\n-3 1\n-2 2\n-2 2\n-2 1\n-1 1\n-1 0\n0 1\n0 0\n-1 -1\n-1 0\n0 -1\n0 1\n2\n2\n2\n2\n2\n1\n0\n0\n-1\n-1\n-1\n0\n-1\n1\n1\n0\n2\n2\n1\n1\n-2\n-2\n-1\n-1\n0\n1\n0\n0\n-1\n0\n0\n0\n-1\n-1\n-2\n-2\n0\n-1\n0\n1\n1\n-1\n-1\n0\n0\n0\n0\n-1\n1\n1\n0\n-1\n0\n1\n0\n0\n1\n-1\n-1\n-1\n0\n0\n0\n-1\n0\n-1\n0\n0\n0\n0\n-1\n-1\n1\n-1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n3 0\n2 1\n3 2\n3 0\n1 1\n2 2''') == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 0\") == \"2\"\nassert solution(\"4 0\") == \"4\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"4 3\") == \"4\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 0\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 0\\n0 1\\n0 2\\n0 3') == '2 3 1'\nassert solution('5 0\\n0 1\\n0 2\\n0 3\\n0 4') == '4 2 1'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 0') == '2'\nassert solution('4 0\\n0 1') == '3 2'\nassert solution('4 0\\n0 2\\n0 1') == '3 1 2'\nassert solution('4 0\\n0 3\\n0 2\\n0 1') == '3 1 2'\nassert solution('4 0\\n0 3\\n0 2\\n0 1\\n1 0') == '4 1 2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 0\") == \"2\"\nassert solution(\"4 0 1\") == \"3 2\"\nassert solution(\"4 0 1 2\") == \"3 1 2\"\nassert solution(\"4 0 1 2 3\") == \"3 1 2\"\nassert solution(\"4 0 1 2 3 4\") == \"3 1 2\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"2 3\"\nassert solution(\"4 0\") == \"2 3\"\nassert solution(\"8 3\") == \"2 3\"\n\"\"\""
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\nSample Output:\n0\n2 1\n0 3\n\"\"\") == \"0 2 1\"\n\nassert solution(\"\"\"\n2 3\n1 2\n0 3\nSample Output:\n0\n1 2\n0 3\n\"\"\") == \"0 1 2\"\n\nassert solution(\"\"\"\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n0 1\n0 2\n0 3\nSample Output:\n3 2 1\n\"\"\") == \"3 2 1\""
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\n\"\"\") == \"3 2 1\"\nassert solution(\"\"\"\n3 0\n1 0\n2 0\n\"\"\") == \"3 1 2\"\nassert solution(\"\"\"\n1 0\n2 0\n\"\"\") == \"1 0 2\"\nassert solution(\"\"\"\n2 0\n3 0\n\"\"\") == \"2 0 3\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 0\n0 1\n0 2\n0 3\n''') == '''\n2\n3 2\n3 1\n'''\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 0 0\\n0 1.5 0\\n\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"ok\"\nassert solution(\"3\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'ok'\nassert solution('2 3') == 'ok'\nassert solution('2 1.5 0') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n0 0 0\n0 1.5 0\n''') == 'ok'\nassert solution('''\n2\n0 0 0\n0 1.5 0\n''') == 'crash'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n0 0 0\n0 1.5 0\n''') == 'ok'\nassert solution('''3\n0 0 0\n0 1.5 0\n0 2.5 0\n''') == 'ok'\nassert solution('''4\n0 0 0\n0 1.5 0\n0 2.5 0\n0 3.5 0\n''') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n0 0 0\n0 1.5 0\n0 2 0\n\"\"\") == \"ok\"\nassert solution(\"\"\"\n1\n0 0 1\n\"\"\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"ok\"\nassert solution(\"2\") == \"ok\"\nassert solution(\"3\") == \"not ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 1.5 0\\n1 0.0 0') == 'ok'\nassert solution('2\\n0 0 0\\n0 1.5 0\\n1 0.0 0') == 'crash'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == \"ok\"\nassert solution(test_input_2) == \"crash\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n0 0 0\n0 1.5 0\n\"\"\") == \"ok\"\nassert solution(\"\"\"\n2\n0 0 0\n0 1.5 0\n\"\"\") == \"crash\""
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4''') == '2'\n\nassert solution('''10 10\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10''') == '10'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\"\nassert solution(\"1\\n1\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n1\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == '2\\nR 2\\nG 2'"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'R 0'"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n0\\n1\\n1\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n') == '2'\nassert solution('3\\n2\\n1\\n2\\n1\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n') == '1'\nassert solution('10\\n7\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n') == '0'\nassert solution('30\\n14\\n15\\n17\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '2'\n\nassert solution('5 3\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '2'\n\nassert solution('3 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '3'"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2\\n0 2\") == \"1\"\nassert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\") == \"2\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 3 3 3\") == \"2\"\nassert solution(\"4 2 6 1 2\") == \"2\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('2 1 2 2') == '3'\nassert solution('2 1 2 1') == '2'"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('2 3 7 3') == '3'\nassert solution('12 3 9 10 4 5 5 7 6') == '4'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('3 1 2 4 5 6') == '4'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('10 1 2 3') == '3'\nassert solution('15 5 15 3') == '1'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('1 1 1 1') == '1'\n\"\"\""
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2 2 3') == '2'\nassert solution('1 1 2 1') == '1'"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('7 8 3 3') == '1'\nassert solution('4 5 3 3') == '0'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n    4\nYYY\nNYY\nYNY\n\"\"\") == \"2 1 2 3\"\n\nassert solution(\"\"\"\n    3\nYYY\nNYY\nYNY\n\"\"\") == \"3 1 2\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1 2 3'\nassert solution('2') == '1 2 3'\nassert solution('3') == '1 2 3'\nassert solution('4') == '1 2 3'\nassert solution('5') == '1 2 3'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\nYYY\\nNYY\\nYNY') == '2 3 1 2'\nassert solution('3\\nYYY\\nNYY\\nYNY') == '3 1 2 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\nYYY\\nNYY\\nYNY\") == \"2 3 1 2\"\nassert solution(\"3\\nYYY\\nNYY\\nYNY\\nYYY\\nYYY\\nYYY\") == \"2 5 1 2\"\nassert solution(\"3\\nYYY\\nNYY\\nYNY\\nYYY\\nYYY\\nYYY\") == \"1 1 1 1\"\nassert solution(\"3\\nYYY\\nYYY\\nYYY\\nYYY\\nYYY\\nYYY\") == \"1 1 1 1\"\nassert solution(\"3\\nYYY\\nYYY\\nYYY\\nYYY\\nYYY\\nYYY\") == \"1 1 1 1\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\nYYY\\nNYY\\nYNY\\n\") == \"2 1 2\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3 1 2'\nassert solution('2 2') == '3 1 2'\nassert solution('2 1') == '3 1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2 1 2'\nassert solution('2') == '1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"10\") == \"5 6 7 8 9\"\nassert solution(\"1\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nNYY\nYYY\nYNY\n''') == '3 1 2'\nassert solution('''\nNYY\nYYY\nYYY\n''') == '3 1 2'\n'''\n    n = int(stdin)\n    starts = []\n    for i in range(n):\n        starts.append(int(stdin.split()[i]))\n    starts.sort()\n    l, r = 0, starts[-1]\n    ans = 0\n    while l < r:\n        mid = (l + r) // 2\n        count = 1\n        for i in range(1, n):\n            if starts[i] >= mid:\n                count += 1\n        if count >= n:\n            ans = mid\n            l = mid + 1\n        else:\n            r = mid\n    return str(ans)"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\nx.x\\n...\\n\") == \"1\\n0\"\n\nassert solution(\"2 2\\nx.x\\nx.x\\nx.x\\n\") == \"1\\n0\"\n\nassert solution(\"3 3\\nx.x\\nx.x\\nx.x\\nx.x\\n\") == \"0\\n1\\n0\"\n\nassert solution(\"3 5\\nx.x\\nx.x\\nx.x\\nx.x\\n\") == \"0\\n0\\n1\\n0\\n0\"\n\nassert solution(\"10 10\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\n\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\nx..\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2') == '4\\n0\\n5'\nprint(solution(input()))\n\n(2,1,3,1,4)\n(2,2,3,1)\n(2,3,3,1)\n(2,4,3,1)\n(2,5,3,1)\n(2,6,3,1)\n(2,7,3,1)\n(2,8,3,1)\n(2,9,3,1)\n(2,10,3,1)\n(2,11,3,1)\n(2,12,3,1)\n(2,13,3,1)\n(2,14,3,1)\n(2,15,3,1)\n(2,16,3,1)\n(2,17,3,1)\n(2,18,3,1)\n(2,19,3,1)\n(2,20,3,1)\n(2,21,3,1)\n(2,22,3,1)\n(2,23,3,1)\n(2,24,3,1)\n(2,25,3,1)\n(2,26,3,1)\n(2,27,3,1)\n(2,28,3,1)\n(2,29,3,1)\n(2,30,3,1)\n(2,31,3,1)\n(2,32,3,1)\n(2,33,3,1)\n(2,34,3,1)\n(2,35,3,1)\n(2,36,3,1)\n(2,37,3,1)\n(2,38,3,1)\n(2,39,3,1)\n(2,40,3,1)\n(2,41,3,1)\n(2,42,3,1)\n(2,43,3,1)\n(2,44,3,1)\n(2,45,3,1)\n(2,46,3,1)\n(2,47,3,1)\n(2,48,3,1)\n(2,49,3,1)\n(2,50,3,1)\n(2,51,3,1)\n(2,52,3,1)\n(2,53,3,1)\n(2,54,3,1)\n(2,55,3,1)\n(2,56,3,1)\n(2,57,3,1)\n(2,58,3,1)\n(2,59,3,1)\n(2,60,3,1)\n(2,61,3,1)\n(2,62,3,1)\n(2,63,3,1)\n(2,64,3,1)\n(2,65,3,1)\n(2,66,3,1)\n(2,67,3,1)\n(2,68,3,1)\n(2,69,3,1)\n(2,70,3,1)\n(2,71,3,1)\n(2,72,3,1)\n(2,73,3,1)\n(2,74,3,1)\n(2,75,3,1)\n(2,76,3,1)\n(2,77,3,1)\n(2,78,3,1)\n(2,79,3,1)\n(2,80,3,1)\n(2,81,3,1)\n(2,82,3,1)\n(2,83,3,1)\n(2,84,3,1)\n(2,85,3,1)\n(2,86,3,1)\n(2,87,3,1)\n(2,88,3,1)\n(2,89,3,1)\n(2,90,3,1)\n(2,91,3,1)\n(2,92,3,1)\n(2,93,3,1)\n(2,94,3,1)\n(2,95,3,1)\n(2,96,3,1)\n(2,97,3,1)\n(2,98,3,1)\n(2,99,3,1)\n(2,100,3,1)\n(2,101,3,1)\n(2,102,3,1)\n(2,103,3,1)\n(2,104,3,1)\n(2,105,3,1)\n(2,106,3,1)\n(2,107,3,1)\n(2,108,3,1)\n(2,109,3,1)\n(2,110,3,1)\n(2,111,3,1)\n(2,112,3,1)\n(2,113,3,1)\n(2,114,3,1)\n(2,115,3,1)\n(2,116,3,1)\n(2,117,3,1)\n(2,118,3,1)\n(2,119,3,1)\n(2,120,3,1)\n(2,121,3,1)\n(2,122,3,1)\n(2,123,3,1)\n(2,124,3,1)\n(2,125,3,1)\n(2,126,3,1)\n(2,127,3,1)\n(2,128,3,1)\n(2,129,3,1)\n(2,130,3,1)\n(2,131,3,1)\n(2,132,3,1)\n(2,133,3,1)\n(2,134,3,1)\n(2,135,3,1)\n(2,136,3,1)\n(2,137,3,1)\n(2,138,"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '0'\nassert solution('4 3') == '5'\nassert solution('5 3') == '0'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\nx..\\n...\\n...') == '4'\nassert solution('3 3\\nx.x.\\n...\\n...') == '0'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\") == \"4\\n0\\n5\\n\"\n\nassert solution(\"\"\"\n6 6\nx.\nxxxx\nxxxx\nxxxx\nxxxx\nxxx.\nx.\n\"\"\") == \"16\\n0\\n16\\n\"\n\nassert solution(\"\"\"\n1 1\n1\n\"\"\") == \"0\\n\"\n\nassert solution(\"\"\"\n3 5\nx.\nxxx\nxxx\nxxx\nxxx\nxxx\n\"\"\") == \"2\\n0\\n2\\n\"\n\nassert solution(\"\"\"\n7 7\nxxxxxx\nxxx.xx\nxxx.xx\nxx.xxx\nx.xxx\nxx.xx\nxx.xx\n\"\"\") == \"15\\n0\\n15\\n\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '4 0 5'"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"\n1 1\n1 1\n1 1\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n2 3\n.x.\n...\n.x.\n\"\"\"\n) == \"1\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '5'\nassert solution('3 3\\nx..\\n...\\nx..') == '0'\n\"\"\"\n\n\"\"\"\nRuntime: 40 ms, faster than 94.92% of Python3 online submissions for Squared Distance from a Random Point to the Left or Right of a Matrix.\nMemory Usage: 14.2 MB, less than 100.00% of Python3 online submissions for Squared Distance from a Random Point to the Left or Right of a Matrix.\n\"\"\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\nx.\n...\n...\n''') == '4'\nassert solution('''\n3\nx.\n...\n...\n''') == '0'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"10 20\") == \"19\"\nassert solution(\"8 2\") == \"7\"\nassert solution(\"10 2\") == \"5\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n3\n4\n5 3\n\"\"\") == \"4.114 -2.842\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n5\n3\n4\n5 3\"\"\") == \"4.114 -2.842\"\nassert solution(\"\"\"\n5\n3\n1\n2\n1\"\"\") == \"4.944 3.100\"\nassert solution(\"\"\"\n2\n3\n1\n3\n5\"\"\") == \"4.944 3.100\"\nassert solution(\"\"\"\n5\n3\n1\n2\n3\"\"\") == \"4.944 3.100\"\nassert solution(\"\"\"\n3\n1\n4\n4\n4\"\"\") == \"4.944 3.100\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1.118 2.037\"\nassert solution(\"1\") == \"0.000 0.000\"\nassert solution(\"1 2\") == \"0.000 0.000\"\nassert solution(\"1 3\") == \"0.000 0.000\"\nassert solution(\"1 2 3\") == \"0.000 0.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == \"4.114 -2.842\"\nassert solution('3') == \"6.297 -0.784\"\nassert solution('3') == \"5.000 3.000\"\nassert solution('2') == \"0.000 0.000\"\nassert solution('1') == \"0.000 0.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n2\n5\n3\n4\n5 3\n\"\"\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\\n\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\nassert solution(\"3\\n5\\n3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3.100'\nassert solution('2') == '1.000'\nassert solution('4') == '3.000'\nassert solution('5') == '3.000'\nassert solution('5 3') == '2.000'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\n3\n1\n\"\"\") == \"3.100\"\n\nassert solution(\"\"\"\n3\n1\n2\n\"\"\") == \"3.100\"\n\nassert solution(\"\"\"\n3\n2\n5\n3\n\"\"\") == \"4.114 -2.842\"\n\nassert solution(\"\"\"\n5\n6\n3\n2\n5\n3\n\"\"\") == \"6.297 -0.784\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n5\\n3') == '4.114 -2.842'\nassert solution('2\\n5\\n2') == '4.000 -1.000'\nassert solution('10\\n20\\n10') == '9.994 -0.001'\nassert solution('10\\n20\\n10') == '9.994 -0.001'\nassert solution('10\\n20\\n10') == '9.994 -0.001'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1.118 2.037\"\nassert solution(\"2\") == \"4.114 -2.842\"\nassert solution(\"3\") == \"1.118 2.037\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3\\n2 1 2 3') == '3'\nassert solution('5 3\\n2 1 2 3\\n8') == '10'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '8'\nassert solution('''\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '13'\nassert solution('''\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '10'\nassert solution('''\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '8'\nassert solution('''\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '10'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"3\\n5\\n8\\n\"\nprint(solution('''6 2\n3\n2\n5\n8\n4\n7'''))\n\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\nSample Output:\n3\n5\n8\n10\n13\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 5\n2 3 5 7\n2\n3\n5\n6\n8''') == '3 5 8 10 13'\n\nassert solution('''4 10\n1 2 2 3\n1\n2\n1\n2\n1\n2\n1\n1\n1\n1\n''') == '1 1 1 2 3 1 1 2 2'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8') == '3\\n5\\n8\\n10\\n13'"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8') == '3\\n5\\n8'\n\n\"\"\""
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"10\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"3\\n5\\n8\\n10\\n13\\n\"\nassert solution(\"2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"8\\n10\\n\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\") == \"10\"\nassert solution(\"3 4\") == \"7\"\nassert solution(\"5 5\") == \"10\""
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 5 7') == '3'\nassert solution('2') == '5'\nassert solution('5') == '8'\nassert solution('6') == '10'\nassert solution('8') == '13'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n''') == \"0\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('6 4\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '1'\nassert solution('6 5\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '2'\nassert solution('5 5\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '4'\nassert solution('100 5\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '43'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3\\n1 3\\n0 0') == '2'\nassert solution('6\\n1 2\\n2 3\\n2 4\\n2 5\\n1 2 5') == '2'\nassert solution('6\\n3 1\\n2 2\\n2 3\\n3 4\\n5 1\\n5 2') == '3'"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4') == '2'\nassert solution('5 6') == '0'\nassert solution('3 5 4 6') == '2'"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('3 3\\n0 1\\n1 2\\n2 3\\n3 4\\n2 5\\n1 2 5') == '0'\nassert solution('1 1\\n0 1') == '1'\nassert solution('2 4\\n0 1\\n1 2\\n2 3\\n1 4\\n2 3') == '3'\nassert solution('3 3\\n0 1\\n1 2\\n2 3\\n3 4\\n2 5\\n1 2 5') == '1'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n\"\"\") == \"0\"\nassert solution(\"\"\"\n7 4\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n0 1\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6 5\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n0 1\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 4\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n0 1\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n7 4\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n0 1\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n3 2 0 1\\n0 1 2\\n1 2 3\\n2 3 1\\n1 5 3\\n1 2 3 4 5\\n') == '1'\nassert solution('6\\n3 2 0 1\\n1 2 3\\n2 3 4\\n2 4 1\\n1 5 3\\n5 4 1\\n1 2 3 4 5\\n') == '0'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('2\\n0 1\\n1 2\\n2 3') == '1'\nassert solution('2\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2') == '0'\n\n'''"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"6 4\") == \"1\"\nassert solution(\"6 5\") == \"2\"\nassert solution(\"6 6\") == \"1\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"106\\n107\\n71\""
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '106\\n107\\n71'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1''') == '106'\nassert solution('''1 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1''') == '107'\nassert solution('''3 3\n100 2 5 C1 L1 C1 U1 C1\n50 2 5 C1 L1 C100 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1''') == '106'\nassert solution('''3 3\n100 2 5 C1 L1 C100 U1 C1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1''') == '107'\nassert solution('''3 2\n100 2 5 C1 L1 C100 U1 C1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1''') == '106'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '107'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"106\\n107\\n71\\n\"\nprint(solution())"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '106'\nassert solution('1 1') == '107'\nassert solution('70 3 1 C1') == '71'\nprint('AC')\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n') == '106\\n107\\n71'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n') == '106\\n'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '107'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n') == '107\\n'\nassert solution('1\\n1 2\\n3 1 C1 L1 C1 U1 C1\\n2 3\\n4 3 C1 L1 C1 U1 C1\\n5 4\\n6 4 C1 L1 C1 U1 C1\\n7 5\\n8 1 C1 L1 C1 U1 C1\\n') == '106\\n107\\n71\\n'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"51\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('AA') == '51'\nassert solution('BB') == '0'\nprint(solution(input()))\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"AA\") == \"51\"\n\n### \n## Your code goes here\n## Hint: One way to solve this problem is to count all palindromic strings of length $2N$, and then filter those that are in the window of $S$.\n##\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nAA\nAA''') == '51'\nassert solution('''\nAA\nAA''') == '51'"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"AA\") == \"51\"\nassert solution(\"A\") == \"1\"\n'''"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"AA\") == \"51\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('AA') == '51'\nassert solution('AAB') == '50'\nassert solution('ABCD') == '76'\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('AB') == 2\nassert solution('AA') == 4\nassert solution('AC') == 5\nassert solution('AAAB') == 6\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"51\"\n\n---Input is sufficient---\nYour submission script will test the correctness of your code using stdin/stdout.\nYour output will be sent to stdout by your code.\n---Your code is already written correctly---\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''AA''') == \"5\"\nassert solution('''AB''') == \"3\"\nassert solution('''AAB''') == \"0\"\n''')"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71''') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"no ties\"\nassert solution(\"3\") == \"1 2\"\nassert solution(\"4\") == \"no ties\"\nassert solution(\"5\") == \"no ties\"\nassert solution(\"6\") == \"no ties\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"no ties\"\nassert solution(\"\"\"\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"no ties\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"1 2\"\nassert solution(\"1\\n3\\n5\\n7\\n9\") == \"1 3\"\nassert solution(\"2\\n4\\n5\\n7\\n9\") == \"2 4\"\nassert solution(\"1\\n2\\n4\\n5\\n7\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\") == \"1 2\"\nassert solution(\"10\\n
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '2 1'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\nassert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\nassert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\nassert solution(\"6\\n20 44 52 68\\n1 23 31 57 64\\n8 25 40 49 61\\n15 26 42 53 71\\n9 17 35 55 61\\n4 27 42 54 71\") == \"1 2\"\nassert solution(\"10 25 31 57 64\\n8 17 35 55 61\\n6 20 44 52 68\\n4 27 42 54 71\\n9 23 31 58 63\\n15 26 42 53 71\\n11 25 40 49 61\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'no ties'\nassert solution('3') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n') == '1 2'\nassert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n') == '1 2'\nassert solution('3\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n') == '1 2'\nassert solution('4\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n') == '1 2'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 2\n1 2\n''') == '0'\nassert solution('''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '0'\nassert solution('''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '2'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0'\nassert solution('1') == '1'\nassert solution('3 2 1') == '0'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3') == '1'"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0'\nassert solution('3 2 1') == '0'\nassert solution('1 2 3') == '0'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0'\nassert solution('3 2 1') == '0'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3') == '2'\n'''\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3') == '0'\nprint(solution(input()))\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1 2 3') == '1'\nassert solution('3\\n2 3 1') == '0'\nassert solution('4\\n1 4 3 2\\n2 1 3 1') == '0'\nassert solution('2\\n2 4 1 1\\n2 3 1') == '1'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('10') == '2'\nassert solution('100') == '6'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n3 2 1\n1 2 3\n1 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4\n5 3 2 1\n2 3 1 2\n2 1 3 1\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n5 1 1\n1 1 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n3 2 1\n1 2 3\n1 2 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '0.4'\nassert solution('3') == '0'\nassert solution('10') == '0.2'\nassert solution('16') == '0.171428571429'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0.5'\nassert solution('4') == '0.454545454545'\nassert solution('10') == '0.454545454545'\nassert solution('16') == '0.454545454545'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3') == '0.4'\nassert solution('10\\n1 2 3\\n10 2 3') == '0.2'\nassert solution('16\\n1 2 3\\n10 2 3') == '0.171428571429'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3') == '0.4'\nassert solution('5\\n1 2 3\\n10 2 3\\n16 3 4') == '0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n6 2 3\n10 2 3\n16 3 4\nSample Output:\n0.4\n0\n0.2\n0.171428571429\n0.228571428571\n''') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3') == '0.4\\n0'\nassert solution('2\\n6 2 3\\n10 2 3') == '0'\nassert solution('4\\n1 5 3\\n6 2 3\\n10 2 3') == '0'\nprint('all tests passed')\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '0.4\\n0.2\\n0.171428571429\\n0.228571428571'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\\n'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\nprint(solution('''4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n'''))\nassert float(solution('''4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''')) == 0.4\nprint(float(solution('''4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''')))\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\\n'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 5\n3 3\n4 5\n-1 -6\n''') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n'\nprint('All tests passed!')\n\n\"\"\"\n--- Day 1: Report Repair ---\n\nAfter saving Christmas five years in a row, you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.\n\nThe tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them stars. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.\n\nTo save your vacation, you need to get all fifty stars by December 25th.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n\nBefore you leave, the Elves in accounting just need you to fix your expense report (your puzzle input); apparently, something isn't quite adding up.\n\nSpecifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.\n\nFor example, suppose your expense report contained the following:\n\n1721\n979\n366\n299\n675\n1456\nIn this list, the two entries that sum to 2020 are 1721 and 299. Multiplying them together produces 1721 * 299 = 514579, so the correct answer is 514579.\n\nOf course, your expense report is much larger. Find the two entries that sum to 2020; what do you get if you multiply them together?\n\nans:"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1 * 2 = 2\\n2 + 1 = 3\\n3 - 1 = 2\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n3 4\") == \"1 + 2 = 3\\n3 * 3 = 9\"\n\nassert solution(\"3\\n1 2\\n3 4\\n3 2\") == \"1 + 2 = 3\\n3 * 3 = 9\\n3 + 2 = 5\"\n\nassert solution(\"2\\n3 2\\n3 2\") == \"3 * 3 = 9\\n3 + 2 = 5\"\n\nassert solution(\"4\\n3 3\\n3 2\\n3 1\") == \"3 * 3 = 9\\n3 + 2 = 5\\n3 + 1 = 4\"\n\nassert solution(\"3\\n-3 -1\\n-2 1\") == \"-3 - 1\\n-2 * 1 = -2\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 5\n3 3\n4 5\n-1 -6\n''') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('''\n5\n1 5\n3 3\n4 5\n-1 -6\n0 0\n0 0\n''') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n0 0 = 0\\n0 0 = 0'\nassert solution('''\n5\n1 1\n0 0\n1 1\n-1 -1\n1 1\n0 0\n''') == '1 + 1 = 2\\n0 0 = 0\\n1 + 1 = 3\\n-1 - 1 = 2\\n1 + 1 = 4\\n0 0 = 0'\n''')\nassert solution('''\n5\n3 3\n1 1\n4 4\n-1 -1\n0 0\n0 0\n''') == '3 * 3 = 9\\n1 + 1 = 2\\n4 - 4 = 0\\n-1 - 1 = 2\\n1 + 1 = 3\\n0 0 = 0\\n0 0 = 0'\n''')\n'''\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 5\\n3 3\\n4 5\\n-1 -6\\n') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n', \"First example test\"\nassert solution('2\\n1 5\\n3 3\\n4 5\\n-1 -6\\n') == 'impossible', \"Second example test\"\nassert solution('5\\n1 5\\n3 3\\n4 5\\n-1 -6\\n') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n', \"Third example test\"\n\ninput = open('input.txt')\nn = int(input.readline().strip())\npairs = []\nfor i in range(n):\n    pairs.append(list(map(int, input.readline().strip().split())))\n\nexprs = {}\nfor i in range(n):\n    for j in range(i + 1, n):\n        exprs[pairs[i] + pairs[j]] = {\n            '+': pairs[i],\n            '-': pairs[j],\n            '*': pairs[i] * pairs[j]\n        }\n\nexprs = {k: v for k, v in exprs.items() if v['+']!= v['-'] and v['*']!= v['+'] and v['+']!= v['-']}\n\nanswers = []\nfor pair in pairs:\n    answers.append((pair,\n                    exprs[pair]['+'],\n                    exprs[pair]['-'],\n                    exprs[pair]['*']\n                   ))"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"1 + 2 = 3\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"5\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\nimpossible\"\nassert solution(\"1\\n1\") == \"impossible\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n4\\n-1\\n') == '1 + 3 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('2\\n2\\n2\\n2\\n') == 'impossible'\n\n'''\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('6\\n1 -5\\n3 -3\\n4 -5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('1\\n2 3\\n4 5\\n-1 -6') == '2 * 3 = 6\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('2\\n2 3\\n4 5\\n-1 -6') == '2 + 3 = 5\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('3\\n2 3\\n4 5\\n-1 -6') == '2 * 3 = 6\\n4 - 5 = -1\\n-1 - -6 = 5'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4\n1 5\n3 3\n4 5\n-1 -6\n\"\"\") == \"\"\"\n1 + 5 = 6\n3 * 3 = 9\n4 - 5 = -1\n-1 - -6 = 5\n\"\"\"\nassert solution(\n\"\"\"\n3\n1 2\n3 4\n-2 -4\n\"\"\") == \"\"\"\n1 + 2 = 3\n3 * 4 = 12\n-2 - 4 = -2\n\"\"\"\nassert solution(\n\"\"\"\n3\n1 2\n3 4\n-2 -4\n\"\"\") == \"\"\"\n1 + 2 = 3\n3 * 4 = 12\n-2 - 4 = -2\n\"\"\"\nassert solution(\n\"\"\"\n3\n1 2\n3 4\n-2 -4\n\"\"\") == \"\"\"\nimpossible\nimpossible\nimpossible\n\"\"\""
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n2 3\n3 4\n5 6''') == '1 + 2 = 3\\n2 * 3 = 6\\n3 * 4 = 12\\n5 - 6 = -2\\n'\nassert solution('''4\n1 2\n3 4\n5 6\n-1 -2''') == '1 + 2 = 3\\n3 * 4 = 12\\n5 - 6 = -2\\n'\nassert solution('''7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n-1 -2''') == '1 + 2 = 3\\n3 * 4 = 12\\n5 - 6 = -2\\n'\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n-1 -2''') == '1 + 2 = 3\\n3 * 4 = 12\\n5 - 6 = -2\\n'\nassert solution('''1\n2 1\n1 2\n1 2''') == 'impossible\\n'"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"4\\n1\\n4\\n6\\n0\"\n\"\"\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '''4\n1\n4\n6\n0\n'''\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == '4 1 6 0'"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1 5\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n\"\"\"\n) == \"\"\"4\n0\n4\n6\n0\n\"\"\"\n\nassert solution(\n\"\"\"\n4 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n\"\"\"\n) == \"\"\"\n4\n1\n4\n6\n0\n\"\"\""
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '4\\n1\\n4\\n6\\n0\\n'\n\nassert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '4\\n1\\n4\\n6\\n0\\n'\n\nassert solution('''\n2 1\n1 1\n''') == '0\\n0\\n'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '\\n'.join(['4', '1', '4', '6', '0'])\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1\\n3\\n1\\n2\\n5\\n2\\n5\\n1\\n2\\n5') == '1\\n4\\n6\\n0\\n'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '''\n4\n1\n4\n6\n0\n'''\n\nassert solution('''\n4\n1\n1\n1\n1\n''') == '''\n4\n0\n'''\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3\n4\n''') == '''\n1\n1\n'''\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == 4\nassert solution('4 5 6 7') == 5\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"4\""
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4') == \"4\"\nassert solution('4\\n1 2 3 4') == \"4\"\nassert solution('4\\n1 2 3 4') == \"4\"\nassert solution('4\\n1 2 3 4') == \"4\"\nassert solution('4\\n1 2 3 4') == \"4\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('10 20 30 40') == '3'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == \"4\", \"Failed Test\"\nassert solution(solution.__annotations__) == \"4\", \"Failed Test\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == 4\nassert solution('5 2 2 3 4') == 6\nassert solution('1 2 2 2 3') == 1\nassert solution('1 2 2 3 4') == 6\nassert solution('1 2 2 3 5') == 3\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n100\n2 3 4\n\"\"\") == \"2\"\n\n\"\"\"\n     TC: O(N^2)\n\"\"\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n4 1\n\"\"\") == \"3\", \"Wrong\"\nassert solution(\"\"\"\n3\n-1 1 -1\n\"\"\") == \"3\", \"Wrong\"\nassert solution(\"\"\"\n4\n-1 -1 2 3\n\"\"\") == \"3\", \"Wrong\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(INPUT) == OUTPUT"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 30 2\n20 60\n50 90\n''') == '4 3'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2\n1\n1\n1''') == '2 1'\nassert solution('''1 21\n1\n1\n1''') == '2 1'\nassert solution('''1 1\n1\n1\n1''') == '1 1'\nassert solution('''1 1\n2\n1\n1''') == '1 1'\nassert solution('''1 1\n2\n1\n1''') == '1 1'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 2\n1 2\n1 2\n\"\"\") == \"3 3\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 31 2\\n20 60\\n50 90') == '4 3'\nassert solution('1 1 2\\n1 2 3\\n1 3 1\\n1 1 1\\n1 2 1') == '3 2'\nassert solution('1 1 3\\n1 2 1\\n1 2 3\\n1 1 1\\n1 2 1') == '4 2'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3\\n20 60\\n50 90') == '4 3'\nassert solution('100 30\\n10 20\\n20 30') == '3 2'\nassert solution('100 60\\n20 20\\n10 20') == '2 1'\nassert solution('100 20\\n10 30\\n20 20') == '1 2'"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1 1\"\"\") == \"1 3\"\nassert solution(\"\"\"4 2\"\"\") == \"4 1\"\nassert solution(\"\"\"1 2\"\"\") == \"1 0\"\nassert solution(\"\"\"2 1\"\"\") == \"2 3\"\nassert solution(\"\"\"1 2\"\"\") == \"1 0\"\n\"\"\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4 3'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 31 2\") == \"4 3\"\nassert solution(\"20 60\") == \"3 2\"\nassert solution(\"50 90\") == \"1 2\"\nassert solution(\"100 80\") == \"2 1\"\nassert solution(\"1 4 4\") == \"0 0\"\n\"\"\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"1 31 2\\n\"\n    \"20 60\\n\"\n    \"50 90\\n\"\n) == \"4 3\"\nassert solution(\n    \"10 32 5\\n\"\n    \"20 40\\n\"\n    \"80 80\\n\"\n) == \"4 2\"\nassert solution(\n    \"1 5 2\\n\"\n    \"5 5\\n\"\n    \"100 100\\n\"\n) == \"1 2\"\nassert solution(\n    \"5 5 1\\n\"\n    \"5 5\\n\"\n    \"100 100\\n\"\n) == \"2 1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 31 2\n20 60\n50 90\n''') == '4 3'\nassert solution('''\n1 30 2\n20 70\n40 90\n''') == '6 3'\nassert solution('''\n1 30 3\n20 70\n40 90\n''') == '6 2'\nassert solution('''\n1 30 2\n20 70\n40 90\n''') == '8 2'\n''')"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('2 2 2') == '6'"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '3'\nassert solution('3 2 1') == '6'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('2 2 4') == '6'\nassert solution('2 2 3') == '1'\nassert solution('2 2 2') == '1'\nassert solution('2 2 2 4') == '1'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == '3'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('2 2 1') == '3'\nassert solution('1 1 1') == '3'\n\n'''\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"2 2 10\") == \"6\"\nassert solution(\"2 2 0.7\") == \"1\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1') == '3'\nassert solution('10 10 1') == '10'\n'''\n\nr, w, d = input().split()\nr, w, d = int(r), int(w), int(d)\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('10 8 1') == '10'\nassert solution('10 8 1') == '10'"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2 1''') == '3'\nassert solution('''3 3 3''') == '4'\n\"\"\""
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\nassert solution(\"4\\n1910 2618 3000 2720 2714\") == \"0 0\"\nassert solution(\"4\\n2413 2412 1500 2411\") == \"3 1\"\nassert solution(\"8\\n2112 2213 2214 2215 2216\") == \"1 0\"\nassert solution(\"8\\n2542 2543 2544 2545 2546 2547\") == \"4 1\""
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1341 2412 1200 3112 2391\n2\n2384 2383\n''') == '1 2'\n'''\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1341 2412 1200 3112 2391\n''') == '3 1'\nassert solution('''\n3\n9 5 3\n''') == '0 1'\n'''\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n10\n1341 2412 1200 3112 2391\n3 1\n\"\"\") == r\"3 1\"\nassert solution(r\"\"\"\n1\n1341 2412 1200 3112 2391\n3 1\n\"\"\") == r\"2 1\"\nassert solution(r\"\"\"\n2\n1341 2412 1200 3112 2391\n4 1\n\"\"\") == r\"0 0\"\nassert solution(r\"\"\"\n0\n1\n2\n\"\"\") == r\"1 0\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"3 1\"\nassert solution(\"1\") == \"0 1\"\nassert solution(\"2\") == \"0 1\""
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2 1'\nassert solution('6') == '5 2'\nassert solution('8') == '5 2'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"5\\n1341 2412 1200 3112 2391\\n\") == \"3 1\"\nassert solution(\n    \"3\\n1341 2412 1200 3112 2391\\n\") == \"3 1\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2 1'\nassert solution('10') == '5 2'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\""
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n1341 2412 1200 3112 2391\n\"\"\") == \"3 1\"\n\nassert solution(\"\"\"\n6\n1001 2201 2361 2412 1123 2121\n\"\"\") == \"3 2\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([10, 20]) == '6'\nassert solution([3, 5]) == '7'\nassert solution([1, 3, 7]) == '3'\nassert solution([2, 1, 1]) == '1'\nassert solution([2, 3, 2]) == '5'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'\nassert solution('1 1\\n2 1\\n') == '0'\nassert solution('10 100\\n10 20\\n') == '10'\nassert solution('2 10\\n1 1\\n') == '20'\nassert solution('2 1\\n1 1\\n') == '1'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 20\\n3 5') == '6'\nassert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\n\nassert solution('''5\n10 20\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '11'\n\nassert solution('''3\n5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '7'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\nassert solution('''5 10\n1 5 1\n2 4 2\n3 3 5\n''') == '9'\nassert solution('''5 20\n1 5 1\n2 4 2\n3 3 5\n4 3 4\n''') == '12'"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n2 3\\n2 3 5\") == \"6\"\nassert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\") == \"7\"\nassert solution(\"15 5\\n3 5\\n1 2 2\\n2 3 2\\n2 3 5\\n3 2 4\\n3 3 5\") == \"4\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 20') == '6'\nassert solution('10 10') == '9'\nassert solution('100 100') == '99'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 a\n2 b\n1 a\n1 b\n2 a\n1 b\n1 a\n1 b\n''') == '0 1 -1 0\\n'\nassert solution('''\n2\na b\n1 a\n1 b\n''') == '0 1 2\\n'\nassert solution('''\n2\nab\n1 b\n1 ab\n''') == '0 2 1\\n'\nassert solution('''\n2\nab\n1 b\n1 ab\n''') == '0 1 2\\n'\nassert solution('''\n2\nab\n1 b\n1 ab\n''') == '0 1 -1\\n'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 ab b\\n1 b') == '0 1'\nassert solution('3 ab b\\n1 a\\n2 b') == '0 2'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == stdin.splitlines()[1]\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n2 ab b\n1 b\n''') == '0 1'\nassert solution('''2\n2 ab b\n1 b\n''') == '-1 0'\nassert solution('''\n20\naab aaa\nbba ab\nab aa b\nbbb bb b\na ab b\nb aa b\na bb b\nb aa b\nb bb b\na ab b\nb aa b\na bb b\nb aa b\na bb b\nb aa b\na ab b\na bb b\nbbb bb b\n''') == '-1 -1'\nassert solution('''\n20\nbbb bbb b\na ab b\na bb b\nb aa b\nb aa b\nb aa b\na bb b\na ab b\na ab b\na ab b\na ab b\na ab b\na ab b\nb aa b\nb aa b\na ab b\nb aa b\na aa b\na aa b\nb aa b\nb aa b\na ab b\na ab b\nbbb bbb b\n''') == '0 1'\nassert solution('''\n2\naa aa\na a\n''') == '0 1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n2 a\n1 b\n''') == '0 1'\nassert solution('''2\na\n2\n''') == '-1 0'\nassert solution('''3\na\na\n1\n''') == '2 1'\nassert solution('''3\na\nb\n2\n''') == '3 0 1'\nassert solution('''4\nb\nc\nd\n''') == '3 0 1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 a a\n2 b\n\"\"\") == \"0 1\"\nassert solution(\"\"\"\n3 a a\n1 a\n\"\"\") == \"1 -1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 ab b\\n1 b') == '0 1'\n\"\"\""
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 ab b\n1 b\n''') == '0 1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 ab b\n1 b''') == '0 1'\nassert solution('''\n3 ab b\n1 c\n''') == '0 1'\nassert solution('''\n3 ab b\n2 c\n''') == '1 1'\n'''\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0 1'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4') == '1'\nassert solution('1 1 2') == '3'\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4\\n1 1 2\\n2\\n1 1 2\\n2\\n') == '3'\nassert solution('2 5\\n2 1 2\\n2\\n2\\n1\\n1\\n') == '1'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2 4\n1 1 2\n2\n1 1 2\n2\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n2 4\n1 1 2\n2\n1 1 2\n1\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n2 4\n1 1 2\n2\n2\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n2 4\n1 1 2\n1 1 2\n2\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\") == \"1\"\nassert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\") == \"2\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\") == \"1\\n3\"\nassert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\") == \"0\\n1\"\n\"\"\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\") == \"3\"\nassert solution(\"2 4\\n1 1 2\\n2\") == \"8\"\n\"\"\"\nfrom functools import reduce\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\n1 2 3\n1 1 2\n2''') == '1'\n\nassert solution('''2 4\n1 1 2\n1 1 2\n2\n1 1 2\n2\nSample Input:\n2 5\n1 1 2\n1 1 2\n2\nSample Output:\n0.1\n1\n''') == '0.1'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4\\n1 1 2\\n2\\n1 1 2\\n2') == '3'\nassert solution('4 6\\n1 1 2\\n2\\n1 1 2\\n2') == '4'\nassert solution('3 3\\n1 1 2\\n2\\n1 1 2\\n2') == '2'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 4\n1 1 2\n2''') == '1'\nassert solution('''2 4\n1 1 2\n2''') == '3'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4\\n1 1 2\\n2\\n1 1 2\\n2\\n') == '1\\n3'\n\nSample Input:\n5 5\n5\n4 1 5\n1 2 3\n2 1 2\n3 2 2\n2 4 1\n3 4 2\n1 4 1\n3 2 4\nSample Output:\n2.8\n1.0\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n0 5 2\n5 0 4\n2 4 0\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '7'\nassert solution('4') == '5'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3 5 2\\n5 0 4\\n2 4 0') == '7'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n0 5 2\n5 0 4\n2 4 0''') == '7'\n\nassert solution('''4\n0 1 2\n1 0 2\n2 0 3\n3 0 4''') == '3'\n\nassert solution('''5\n1 3 4\n1 2 4\n2 3 4\n3 4 5''') == '4'\n\nassert solution('''5\n1 2 3 4\n1 2 4\n1 3 4\n1 4 5\n4 3 2''') == '3'\n\nassert solution('''5\n1 3 4\n1 2 4\n1 4 5\n2 3 4\n3 2 4''') == '2'"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"1\\n2\\n0\\n5\\n4\\n3\\n0\\n0\\n\") == \"7\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 0\\n5 0 4\\n2 4 0\\n') == '7'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 3\\n3 2\\n') == '5'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3\\n0 5 2\\n5 0 4\\n2 4 0\"\n) == \"7\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '7'\n\n\"\"\""
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1099511627776\n''') == '8'\nassert solution('''\n3\n3\n''') == '3'\nassert solution('''\n1000000000\n''') == '5'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('1099511627776') == '8'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1099511627776') == '8'\nassert solution('9') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '8'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"12\") == \"4\"\nassert solution(\"1000000000000000\") == \"20\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1099511627776\") == \"8\"\nprint(solution(input()))\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"2\"\nassert solution(\"1234\") == \"2\"\nassert solution(\"12345\") == \"3\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1099511627776') == '8'\nassert solution('12345678910111213141516') == '1'"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\nx.x.\nx.x.\nx.x.\n''') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\nx.\\nx.\\nx.\") == \"2\"\nassert solution(\"3 3\\nx..\\nx.\\nx.x\") == \"4\"\nassert solution(\"3 3\\nx.\\n.x.\\nx.x\") == \"2\"\nassert solution(\"3 3\\nx.x.x\\nx.\\nx.\") == \"3\"\nassert solution(\"3 3\\nx.x.x\\nx.\\nx.x\") == \"4\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x\\n') == '2'\n\nimport math"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\nx..\\n.x.x\\nx.x.x\\n') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n    3 3\n    x.\n    .x.\n    x.x\n    \"\"\") == \"2\"\nassert solution(\"\"\"\n    3 3\n    .x.\n    x.x\n    .x.x\n    \"\"\") == \"3\"\nassert solution(\"\"\"\n    3 3\n    x.\n    .x.\n    x.x\n    \"\"\") == \"3\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n.x.\nx.x\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 5\nx.x\n.x.\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n10 7\nx.x.\nx.x.\nx.x.\n.x.x.\nx.x.x.\nx.x.x.\nx.x.x.\nx.x.x.\n.x.x.x\nx.x.x.\nx.x.x.\n\"\"\") == \"2\""
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '2'\nassert solution('1 2') == '1'\nassert solution('5 5') == '3'\nassert solution('1 0') == '1'\nassert solution('1 0 0 0') == '1'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\nx.\n''') == '2'\nassert solution('''\n1 2\nx.x\n''') == '2'\nassert solution('''\n2 2\nx.x\n''') == '3'\nassert solution('''\n3 3\nx.x\n.x.\n''') == '2'\nassert solution('''\n3 4\nx.x\n.x.x\n.x.x\n''') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\nx..\n.x.\nx.x\n''') == '2'\nassert solution('''\n5 3\nx.x\n..x\nx.x\nx.x\n.x.\n''') == '1'\nassert solution('''\n5 3\nx.x\n..x\nx.x\nx.x\n.x.\n''') == '0'\nassert solution('''\n6 6\nxxx\nxxx\nxxxx\nx..x\n..x.\nxxxx\n''') == '4'\nassert solution('''\n5 4\nx.x\nx.x\nx.x\nx.x\nx.x\n''') == '3'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"9\"\nassert solution(\"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 2') == '9'\nassert solution('2 5 2') == '6'\nassert solution('3 0 0') == '5'\nassert solution('4 2 4') == '6'\nassert solution('5 3 0') == '-1'\n\"\"\""
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n\") == \"9\\n6\\n-1\\n5\\n6\"\nassert solution(\"10\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3\\n4 4 4 4\\n5 5 5 5\\n6 6 6 6\\n7 7 7 7\\n8 8 8 8\\n9 9 9 9\\n10 10 10 10\\n\") == \"15\\n-1\\n5\\n10\\n16\\n-1\\n7\\n12\\n18\\n19\\n20\\n\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"9\"\nassert solution(\"5\\n\") == \"-1\"\nassert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n\") == \"6\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n5 2 1\\n1 5 2') == '10'\nassert solution('4\\n5 2 1\\n1 5 2\\n2 5 2') == '-1'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"9\"\nassert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"9\"\nassert solution(\"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3\n-2\n-1\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '9\\n-1\\n5\\n6\\n'"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n2\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\"\n) == \"9\"\nassert solution(\n    \"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\"\n) == \"6\"\nassert solution(\n    \"\"\"\n2\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\"\n) == \"5\""
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1 1 40 30 20 10\\n2 1 95 95 95 10') == '91'\nassert solution('4\\n1 1 40 30 20 10\\n2 1 95 95 95 10') == '100'\nassert solution('5\\n1 1 40 30 20 10\\n2 1 95 95 95 10') == '98'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\nassert solution(\"\"\"3\n1 1 40 30 20 10\n2 1 95 95 95 10\n3 1 95 50 30 20\n\"\"\") == \"92\"\nassert solution(\"\"\"1\n1 1 40 30 20 10\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\nassert solution(\"\"\"\n10\n10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == \"91\"\nassert solution('''\n4\n1 1 2 3\n2 1 3 4\n3 1 4 5\n4 1 2 3\n''') == \"10\"\nassert solution('''\n5\n1 1 2 3 4\n2 1 4 3 5\n3 1 5 4 2\n4 1 5 2 3\n5 1 4 3 2\n''') == \"7\"\n'''\n--- Part Two ---\nIt can happen that when you finish a level, you loose the item you used to finish it. This can be caused either by using it or just not using it.\n\nIf you don't use the item that you just finished, you get $-1$ less for each item that you haven't used. If you don't finish a level, you get $-5$ more for each item that you haven't used.\n\nIn fact, if you finish a level in the order that you used the items, you get $n$ extra points.\n\nThis means that if you finish the level in a particular order, you get $n$ extra points regardless of whether you use or not use the items in the order you finished them.\n\nThe challenge now is to finish the levels in the order that you used the items.\n\nGiven a string $S$ describing the items you used in a particular order (without the items that you used to finish a level) and an integer $n$ denoting the number of levels, return the total amount of extra points you would have if you finished the levels in this order.\n\nFor example:\n\nS = \"1 2 4\"\nn = 2\n\nIn this example, you finish the first and second level (with the item 1). You get $5$ extra points, and you get $-1$ less for each item you didn't use (in this case, only 2).\n\nS = \"2 1 4\"\nn = 2\n\nIn this example, you finish the second and third level (with the items 2 and 4). You get $10$ extra points, and you get $-5$ less for each item you didn't use (in this case, only 1).\n\nS = \"2 3 1\"\nn = 2\n\nIn this example, you finish the second and third level (with the items 2, 3 and 1). You get $11$ extra points, and you get $-5$ less for each item you didn't use (in this case, only 1).\n\nS = \"4 5 2 1\"\nn = 2\n\nIn this example, you finish the third and fourth level (with the items 5 and 2), and you get $12$ extra points, and you get $-10$ less for each item you didn't use (in this case, only 1 and 3).\n\nS = \"4 1 2\"\nn = 2\n\nIn this example, you finish the fourth and fifth level (with the items 4 and 1), and you get $13$ extra points, and you get $-10$ less for each item you didn't use (in this case, only 1).\n\nS = \"1\"\nn = 2\n\nIn this case, you finish the first and second level (with the item 1), and you get $9$ extra points. You get $-1$ less for each item you didn't use (in this case, only 2).\n\nS = \"\"\nn = 2\n\nIn this case, you finish all levels (with the items 2, 3, 4 and 5), and you get $21$ extra points. You get $-5$ less for each item you didn't use (in this case, only 1, 2, 3 and 5).\n\nS = \"0\"\nn = 2\n\nIn this case, you finish all levels (with the items 1 and 2), and you get $6$ extra points. You get $-1$ less for each item you didn't use (in this case, only 1).\n\nS = \"10\"\nn = 2\n\nIn this case, you finish all levels (with the items 10 and 2), and you get $11$ extra points. You get $-1$ less for each item you didn't use (in this case, only 2).\n\nS = \"2 3 1 4\"\nn = 3\n\nIn this case, you finish all levels (with the items 2, 3, 1, and 4), and you get $13$ extra points. You get $-2$ less for each item you didn't use (in this case, only 3 and 2).\n\nS = \"1 3 2 4\"\nn = 3\n\nIn this case, you finish all levels (with the items 1, 3, and 2), and you get $14$ extra points. You get $-2$ less for each item you didn't use (in this case, only 2 and 4).\n\nS = \"5 7 2 1\"\nn = 3\n\nIn this case, you finish all levels (with the items 5, 7, 2, and 1), and you get $15$ extra points. You get $-3$ less for each item you didn't use (in this case, only 1 and 7).\n\nS = \"7 5 2 1\"\nn = 3\n\nIn this case, you finish all levels (with the items 7, 5, 2, and 1), and you get $15$ extra points. You get $-3$ less for each item you didn't use (in this case, only 1 and 7).\n\nS = \"4 1 2\"\nn = 4\n\nIn this case, you finish all levels (with the items 4 and 1), and you get $16$ extra points. You get $-4$ less for each item you didn't use (in this case, only 2).\n\nS = \"4 1 3 2\"\nn = 4\n\nIn this case, you finish all levels (with the items 4, 1, 3, and 2), and you get $17$ extra points. You get $-4$ less for each item you didn't use (in this case, only 2 and 3).\n\nS = \"4 1 3 2\"\nn = 5\n\nIn this case, you finish all levels (with the items 4, 1, 3, 2, and 2), and you get $18$ extra points. You get $-5$ less for each item you didn't use (in this case, only 3 and 2).\n\nS = \"7 5 2 1\"\nn = 5\n\nIn this case, you finish"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '91'\nassert solution('1 1 40 30 20 10') == '91'\nassert solution('2 1 95 95 95 10') == '95'"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == \"91\"\nassert solution('2') == \"95\"\nassert solution('5') == \"95\"\nassert solution('10') == \"95\"\nassert solution('20') == \"95\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\\n') == '91'"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '91'\nassert solution('4') == '61'\nassert solution('5') == '31'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == '91'\n'''"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\nassert solution(\"\"\"\n3\n3 3 50 40 30 20\n2 3 60 40 20 10\n1 2 50 30 20\n\"\"\") == \"251\"\nassert solution(\"\"\"\n100\n2 1 1 1 1 2 2 2 1 2 2 2 2 2\n
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '11'\nassert solution('3') == '12'\nassert solution('4') == '13'\nassert solution('5') == '14'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1\n0\n''') == '0'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n5 2\n1\n1 2\n\"\"\") == \"15\"\nassert solution(\"\"\"\n5\n20 8\n0\n0 1\n0\n\"\"\") == \"20\"\nassert solution(\"\"\"\n2\n5 2\n0\n0 1\n\"\"\") == \"15\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n15 20\\n0\\n1 1') == '15'\nassert solution('2\\n25 15\\n1\\n1 1\\n1 1 2') == '15'\nassert solution('2\\n1 2\\n0\\n1 1 2') == '1'\n\"\"\""
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n15 20\n0\n2 1\n\"\"\") == \"15\"\nassert solution(\"\"\"\n6\n15 20\n0\n4 1\n\"\"\") == \"15\"\nassert solution(\"\"\"\n4\n15 20\n0\n3 2\n\"\"\") == \"15\"\nassert solution(\"\"\"\n7\n15 20\n0\n4 2\n\"\"\") == \"20\"\nassert solution(\"\"\"\n8\n15 20\n0\n3 2\n\"\"\") == \"15\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n10 5\\n0\\n1 1') == \"10\"\nassert solution('3\\n10 5\\n0\\n1 1\\n1 2') == \"10\"\nassert solution('3\\n10 5\\n1\\n1 2') == \"10\"\nassert solution('3\\n10 5\\n1\\n1 2\\n1 3') == \"10\"\nassert solution('3\\n10 5\\n1\\n1 2\\n2 3') == \"10\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n15 20\\n0\\n1 1') == '15'\nassert solution('3\\n10 10 10\\n1 1 1\\n2 2 2') == '10'\nassert solution('3\\n1 1 1\\n2 2 2') == '0'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n0\n''') == '0'\nassert solution('''\n2\n2\n0\n''') == '2'\nassert solution('''\n2\n1\n0\n''') == '1'\nassert solution('''\n3\n2\n0\n''') == '2'\nassert solution('''\n6\n0\n1\n3\n4\n5\n''') == '6'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '15'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"15\"\n\"\"\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == 'impossible'\nassert solution('''\n2 1\n3 5\n1 2\n''') == '2'\nassert solution('''\n2 4\n2 3\n1 2\n3 2\n''') == 'impossible'\n\n'''\nPlease note that your program must work for all input cases even if some of them are invalid.\n\nYou can find some test cases in the \"test_data\" folder.\n\nIn addition, please note that your program must work for all input cases even if some of them are invalid.\n'''"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([5,4],[3,1,375],[2,5,283],[1,4,716],[3,4,98]) == \"impossible\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2 3\n4 5 6\n5 4 7\n6 7 8\n''') == \"impossible\"\nassert solution('''\n6\n1 2 3\n4 5 6\n4 5 7\n5 4 8\n6 4 9\n''') == \"impossible\"\nassert solution('''\n5\n1 2 3\n4 5 6\n4 5 7\n5 4 8\n6 4 9\n''') == \"4\"\nassert solution('''\n5\n1 2 3\n4 5 6\n4 5 7\n5 4 8\n6 4 9\n''') == \"4\"\nassert solution('''\n5\n1 2 3\n4 5 6\n4 5 7\n5 4 8\n6 4 9\n''') == \"impossible\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4') == 'impossible'\nassert solution('3 1 375') == '1250'\nassert solution('2 5 283') == '1250'\nassert solution('1 4 716') == '1250'\nassert solution('3 4 98') == '1250'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([5, 4],\n        [[3, 1, 375],\n         [2, 5, 283],\n         [1, 4, 716],\n         [3, 4, 98]]) == \"impossible\"\n\nassert solution([3, 4],\n        [[1, 2, 4],\n         [2, 3, 2],\n         [1, 3, 1]]) == \"1\"\n\nassert solution([5, 4],\n        [[3, 1, 375],\n         [2, 5, 283],\n         [1, 4, 716],\n         [3, 4, 98],\n         [2, 3, 2],\n         [1, 3, 1]]) == \"impossible\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == \"impossible\"\nassert solution('''\n5 3\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == \"376\"\nassert solution('''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == \"376\"\nassert solution('''\n5 4\n3 2 375\n2 3 283\n1 1 716\n3 4 98\n''') == \"376\"\nassert solution('''\n5 3\n2 1 375\n3 2 283\n1 4 716\n3 4 98\n''') == \"376\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"impossible\"\nassert solution(\"5 4\\n3 1 375\") == \"375\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4') == 'impossible'\nassert solution('5 5') == '835'\nassert solution('5 6') == 'impossible'\nassert solution('5 7') == '835'\nassert solution('5 8') == 'impossible'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == 'impossible'\nassert solution('''5 5\n0 1 750\n1 3 100\n3 4 100\n0 5 100\n2 2 500\n''') == '250'\nassert solution('''3 3\n1 1 250\n2 2 250\n3 3 250\n''') == '250'\nassert solution('''4 3\n1 1 750\n2 3 100\n3 4 100\n''') == '500'\nassert solution('''5 3\n1 1 250\n2 3 100\n3 4 100\n4 5 250\n''') == '500'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n''') == '0.9999999999999998'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.5000000000000002'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('5') == '2.000000000'\n\"\"\"\nimport sys\n\nsys.stdin = open(\"input.txt\")\n\nn = int(input())\n\ncount = 0\nwhile (n > 0):\n    if n % 2 == 0:\n        n = n / 2\n    else:\n        n = (3 * n) + 1\n    count += 1\n\nprint(count)"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '2.5'\n\n-- Python --\n\nimport sys\n\nsys.stdin = open(\"input.txt\", \"r\")"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1.000000000\"\nassert solution(\"12\") == \"2.624999998\"\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\nA:1\nA:1\nA:1\n''') == '3'\n\nassert solution('''4\nA:1\nB:1\nC:2\nD:1\n''') == '3'\n\nassert solution('''5\nA:1\nB:2\nC:1\nD:1\nE:1\n''') == '4'\n\nassert solution('''6\nA:2\nB:1\nC:1\nD:2\nE:1\n''') == '3'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1.000000000'"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '1.000000000'\nassert solution('3') == '1.000000000'\n\"\"\""
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1\n\"\"\") == \"1.000000000\"\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '1.444444444'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\nassert solution('''\n3 1 10\n2 5 9\n1 1 1\n''') == '3.6'\n'''\n---\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100 3 10') == '115.000000000'\nassert solution('15 99 98') == '149.9999999999'\nassert solution('40 3 2') == '143.8000000001'\nassert solution('90 10 9') == '72.58'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\n\nassert solution('''\n3 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\n\nassert solution('''\n1 10 10\n10 9 9\n3 2 2\n''') == '16.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"100 3 10\") == \"115\"\nassert solution(\"15 99 98\") == \"98\"\nassert solution(\"40 3 2\") == \"101\"\nassert solution(\"90 10 9\") == \"110\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\nassert solution('''\n50 50 50\n0 0 0\n''') == '0.0'\nassert solution('''\n100 200 300\n80 100 50\n50 200 100\n''') == '15.16'\nassert solution('''\n100 200 300\n80 100 50\n50 200 100\n''') == '11.28'\nassert solution('''\n100 100 100\n100 100 100\n''') == '30.000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    3 10\n    99 98\n    40 3 2\n    90 10 9\n''') == '115.000000000'\n\nprint(solution('''\n    100 3\n    99 98\n    40 3 2\n    90 10 9\n'''))\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 10') == '115.000000000'\nassert solution('15 99 98') == '115.000000000'\nassert solution('40 3 2') == '115.000000000'\nassert solution('90 10 9') == '115.000000000'"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n100 3 10\\n15 99 98\\n40 3 2') == '115.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n1 1 2\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('100 3 10') == '115'\nassert solution('15 99 98') == '104.9999999999'\nassert solution('40 3 2') == '120.000000000'\nassert solution('90 10 9') == '95.0000000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n100 1 1\\n100 1 1.5\") == \"199.500000\"\nassert solution(\"3\\n4 5 6\\n5 5 5\") == \"12.500000\"\nassert solution(\"5\\n7 9 1\\n7 9 2.5\\n7 9 4\\n7 9 6.5\\n7 9 8\") == \"8.500001\"\n\"\"\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n90000 1 1\n60000 1 1\n30000 1 1.5\n''') == '20000.0'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n100 1 1') == '199.500000'\nassert solution('2\\n100 1 1') == '200.000000'\nassert solution('3\\n100 1 1') == '201.000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n100 1 1\n100 1 1.5\n''') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '199.500000'\nassert solution('3') == '199.500000'\n\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n100 1 1\n100 1 1.5\n\"\"\") == \"199.50000000000001\""
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"199.500000\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n100 1 1\n100 1 1.5\n''') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n''') == '199.500001'\nassert solution('''\n3\n1 1 2\n1 1 2\n1 1 2\n''') == '199.500001'\nassert solution('''\n10\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"2 1\n1 2 3 4 5 6 7 8 9 10 11 12\"\"\") == \"1\"\nprint(\"PASSED\")\n\n\"\"\"Runtime: 24 ms, faster than 98.03% of Python3 online submissions for Assign Cookies to People.\nMemory Usage: 13.7 MB, less than 91.12% of Python3 online submissions for Assign Cookies to People.\"\"\""
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sample_input_1) == \"1\"\nassert solution(input_1) == \"3\"\nassert solution(input_2) == \"5\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 2 3 4 5 6 7 8 9 10 11 12') == '1'\nassert solution('1000000000\\n
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == \"1\"\nassert solution('2') == \"1\"\nassert solution('3') == \"2\"\nassert solution('4') == \"2\"\nassert solution('5') == \"2\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '1'\nassert solution('''\n3\n1 2 1\n''') == '1'\nassert solution('''\n10\n1 1 2 2 2 3 3 3 4 4 4 4 4 5 5 6 7 7 7 7 7 8 8 8 8 8 9 9 9 9 9\n''') == '3'\n\n'''\n3\n1 2 1\n'''"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"1 2 3 4 5 6 7 8 9 10 11 12\"\n) == \"1\""
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 3\\n1 2 3 4 5 6 7 8 9 10 11 12\") == \"1\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 2 3 4 5 6 7 8 9 10 11 12\") == \"1\"\nassert solution(\"20 1\\n
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1 3\\n1 2 3 4 5 6 7 8 9 10 11 12\"\n) == \"1\"\nassert solution(\n    \"2 1\\n1 3 2 4 5 6 7 8 9 10 11 12\"\n) == \"3\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n2 1 1\n''') == 'Impossible'\nassert solution('''\n20\n3 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 1\n''') == 'Impossible', solution.__doc__\nassert solution('''\n1\n10 1 5\n''') == '5', solution.__doc__"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 4 3\\n') == 'Impossible'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3 2 1 1') == 'Impossible'\nassert solution('1\\n1 2 1 1') == '2'\nassert solution('1\\n2 1 1 1') == '1'\nassert solution('1\\n2 3 1 1') == 'Impossible'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"13\\n3 2 1 1\"\n) == \"5\"\nassert solution(\n    \"10\\n2 1 1 1 1 1\"\n) == \"7\"\nassert solution(\n    \"100\\n1 1 1 1 1 1 1 1 1\"\n) == \"2\"\nassert solution(\n    \"1000\\n1 1 1 1 1 1 1 1 1\"\n) == \"0\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'Impossible'\nassert solution() == '5'"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'Impossible'\nassert solution('2') == '5'\nassert solution('5') == '5'\nassert solution('13') == 'Impossible'\nassert solution('22') == '10'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('13') == 'Impossible'\nassert solution('2') == '1'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"Impossible\"\nassert solution(\"11\") == \"10\"\nassert solution(\"7\") == \"2\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"6\\n2 2 1 1\\n\"\n) == \"Impossible\"\n\nassert solution(\n    \"16\\n4 5 2 3\\n\"\n) == \"4\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\nassert solution('') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\nassert solution('ad') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aabcad\") == \"yes\", \"Third example\"\nassert solution(\"aba\") == \"yes\", \"First example\"\nassert solution(\"acd\") == \"no\", \"Second example\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r'''\nb\nc\n''') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''aabcad''') == 'yes', 'Wrong!'\nassert solution('''aba''') == 'no', 'Wrong!'\nassert solution('''acd''') == 'no', 'Wrong!'\n''')\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aabcad') == 'yes', \"Sample tests\"\n\nassert solution('aba') == 'no', \"Sample tests\"\n\nassert solution('acd') == 'no', \"Sample tests\"\n\"\"\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'\nassert solution('5 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'\nassert solution('10 8 7\\n10 3 5\\n5 1 9\\n9 3 6\\n8 1 1\\n3 1 5\\n6 6 8\\n7 4 4\\n1 2 5\\n4 7 8\\n') == '11'\nassert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5 10') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == \"5\"\nassert solution('''\n2 3\n0 1\n0 2\n''') == \"0\"\nassert solution('''\n4 5\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n''') == \"2\"\nassert solution('''\n3 3\n1 2\n2 3\n''') == \"2\"\nassert solution('''\n2 2\n0 0\n0 1\n0 2\n''') == \"0\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\nassert solution('''4 5 10\n2 4 3 5\n3 1 1 6\n3 4 7 10\n2 4 8 9\n4 2 8 9\n''') == '4'\nassert solution('''4 5 10\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 8 9\n4 2 8 9\n''') == '0'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\nassert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\nassert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\nassert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\nassert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"1\") == '0'\nassert solution(\"2\") == '1'\nassert solution(\"3\") == '1'\nassert solution(\"4\") == '1'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 1 1\\n3 1 1 6') == '2'\nassert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == \"5\"\nassert solution('''\n10 4 5\n2 4 6 5\n3 4 5 2\n5 4 5 2\n6 5 5 4\n4 7 3 3\n2 8 9 1\n''') == \"10\"\nassert solution('''\n4 5 5\n1 1 1 1\n1 1 1 2\n1 1 1 2\n1 1 1 1\n1 1 1 2\n1 1 1 2\n1 1 1 1\n1 1 1 1\n''') == \"6\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\nassert solution('2 4 same') == '1'\n\"\"\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n1 0\n0 1\n0 0\n''') == '4'\n\n'''\nThe same as the previous example:\n\n- For the first case, the answer is 4.\n- For the second case, the answer is 0.\n'''"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 4 same\\n3 5 same\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4'\n\"\"\""
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 2\n2 4 same\n3 5 same\"\"\") == \"4\"\nassert solution(\"\"\"5 2\n2 4 same\n3 5 same\n2 3 same\n1 4 same\"\"\") == \"2\"\nassert solution(\"\"\"5 3\n3 1 false\n5 1 false\n1 2 false\n3 4 false\"\"\") == \"2\"\nassert solution(\"\"\"5 5\n1 2 1 2\n3 4 1 2\n5 4 3 4\n1 1 1 1\n2 5 2 5\n3 4 2 2\"\"\") == \"16\"\nassert solution(\"\"\"3 2\n3 2 1\n2 2 1\"\"\") == \"0\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 4 same') == '4'\nassert solution('5 2\\n3 5 same') == '0'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same') == '4'\nassert solution('5 2\\n3 5 same\\n2 4 same') == '0'\nassert solution('5 2\\n1 4 same\\n2 5 same\\n3 4 same\\n5 6 same\\n6 4 same\\n7 5 same') == '1'\nassert solution('5 2\\n3 4 different\\n3 5 different\\n2 4 different\\n2 5 different\\n2 6 different\\n3 4 different\\n3 5 different') == '5'"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\nassert solution('''\n5 2\n2 4 same\n3 5 different\n''') == '5'\nassert solution('''\n10 4\n1 2 same\n2 3 different\n3 4 same\n4 5 same\n5 6 different\n6 7 same\n7 8 same\n8 9 different\n9 10 different\n10 11 same\n''') == '3'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '5 2\\n'\n    '2 4 same\\n'\n    '3 5 same\\n'\n) == '4'"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\n\nassert solution('''\n4 2\n2 4 same\n3 5 same\n''') == '3'\n\nassert solution('''\n2 2\n3 4 same\n5 6 same\n''') == '0'\n\nassert solution('''\n8 2\n1 2 same\n1 3 same\n1 4 same\n1 5 same\n1 6 same\n1 7 same\n2 4 same\n2 5 same\n2 6 same\n2 7 same\n3 4 same\n3 5 same\n3 6 same\n3 7 same\n4 5 same\n4 6 same\n4 7 same\n5 6 same\n5 7 same\n6 7 same\n''') == '0'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 4\\n0 1\\n0 2\\n3 4\\n3 5') == \"3\"\nassert solution('2 1\\n3 5') == \"1\"\nassert solution('1\\n1') == \"0\"\nassert solution('0\\n0') == \"0\"\nprint('You passed the test!')\n\"\"\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n0 1\") == \"3\"\nassert solution(\"10 2\\n0 2\\n3 4\\n4 6\\n8 1\\n8 7\\n7 9\\n9 10\\n5 10\") == \"2\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '1'\nassert solution('5 3') == '2'\nassert solution('10 4') == '2'\nassert solution('10 5') == '3'\nassert solution('100 5') == '7'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 4\n0 1\n0 2\n3 4\n3 5\n''') == '3'\n\nassert solution('''\n6 2\n1 2\n2 3\n''') == '1'\n\nassert solution('''\n10 20\n1 5\n4 9\n0 5\n4 7\n8 1\n0 2\n4 8\n4 6\n7 7\n''') == '8'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 1') == '0'\nassert solution('4 4') == '0'\nassert solution('10 10') == '0'\nassert solution('10 10') == '2'"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 4\n0 1\n0 2\n3 4\n3 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 4') == '3'\nassert solution('10 4') == '4'\nassert solution('8 3') == '2'\nassert solution('20 4') == '6'\nassert solution('10 20') == '3'"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6 4\n0 1\n0 2\n3 4\n3 5\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 4\n0 1\n0 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6 3\n0 1\n1 2\n2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n9 7\n1 0\n1 2\n3 4\n3 5\n4 6\n5 7\n6 8\n0 9\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n6 4\n0 1\n0 2\n3 4\n3 5\n4 6\n5 7\n6 8\n0 9\n0 10\n\"\"\") == \"1\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 4\n0 1\n0 2\n3 4\n3 5\n''') == '3'\nassert solution('''\n6 5\n0 2\n0 3\n1 4\n2 5\n''') == '4'\nassert solution('''\n10 3\n2 7\n4 8\n3 9\n3 10\n3 11\n5 12\n5 13\n6 14\n6 15\n7 16\n7 17\n8 18\n8 19\n''') == '7'\nassert solution('''\n10 2\n0 2\n0 3\n1 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n8 16\n8 17\n''') == '4'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 4, 0, 1, 3, 2]) == '2'\nassert solution([0, 1, 0, 1]) == '0'\nassert solution([3, 3, 3]) == '0'\nassert solution([1, 1, 1, 1]) == '0'\nassert solution([0, 1, 0, 1]) == '1'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"3.0\"\nassert solution(\"5\") == \"9.0\"\n\nimport math"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '9.0'\nassert solution('1 4') == '9.0'\nassert solution('2 2') == '6.5'\nassert solution('4 1') == '6.5'\nassert solution('3 5') == '2.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '9.0'\nassert solution('2') == '6.5'\nassert solution('4') == '2.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\"\n) == \"9.0\"\n\nassert solution(\n    \"10\"\n) == \"45.0\"\n\nassert solution(\n    \"30\"\n) == \"250.0\"\n\nassert solution(\n    \"20\"\n) == \"67.5\"\n\nassert solution(\n    \"10\"\n) == \"45.0\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"9.0\"\nassert solution(\"3\") == \"2.5\"\nassert solution(\"4\") == \"6.5\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5'\nassert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nD') == '9.0\\n6.5\\n2.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '5.0'\nassert solution('4') == '5.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 1\\n5 3\") == \"9.0\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n1\n2\n''') == '9.0'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5'\nassert solution('15\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\\n11 1\\n12 1\\n13 1\\n14 1\\n15 1\\n16 1\\n17 1\\n18 1\\n19 1\\nLUR') == '30.0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 2\\nB 1 2\\nB 2 3\\nR 3 1') == \"1\"\nprint('Test 1 Successful!')\nassert solution('4 5 1\\nR 2 1\\nB 1 2\\nR 3 4\\nB 4 2\\nR 1 3\\nB 3 4') == \"1\"\nprint('Test 2 Successful!')\nassert solution('1') == \"0\"\nprint('Test 3 Successful!')\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n1\\n2\\n1') == '0'\nassert solution('3\\n3\\n3\\n') == '1'\nassert solution('4\\n3\\n1\\n3\\n') == '0'\n\"\"\""
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3 2\nR 1 2\nB 2 3\nR 3 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 3 3\nB 1 2\nR 3 1\nB 3 3\nR 3 2\nR 1 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 3 3\nB 1 2\nR 3 1\nB 3 3\nR 3 2\nB 3 2\n\"\"\") == \"1\""
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == \"1\"\nassert solution('2') == \"0\"\nassert solution('3') == \"0\"\nassert solution('4') == \"0\"\nassert solution('5') == \"0\"\n\"\"\"\n\nfrom math import sqrt\n\nn, m, k = list(map(int, input().split()))\n\nedges = [[False for _ in range(n)] for _ in range(n)]\nfor _ in range(m):\n    u, v, color = list(map(int, input().split()))\n    if color == 0:\n        edges[u-1][v-1] = True\n        edges[v-1][u-1] = True"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4 2\\nR 1 2\\nB 2 3\\nB 3 1\\n') == '1'\nassert solution('10 5 2\\nR 1 2\\nB 2 3\\nB 3 1\\nR 4 5\\nB 4 6\\nB 5 1\\nR 5 6\\nR 6 7\\nB 7 8\\nB 8 9\\nR 9 10\\nB 10 1\\nB 11 2\\nR 11 3\\nB 11 4\\nB 12 1\\nR 12 4\\nR 13 1\\nB 13 2\\nR 13 3\\nB 13 4\\nB 14 2\\nR 14 3\\nR 15 1\\nB 15 2\\nR 15 3\\nB 15 4\\nB 16 2\\nR 16 3\\nB 16 4\\nB 17 2\\nB 17 3\\nR 17 4\\nB 18 2\\nB 18 3\\nB 19 2\\nB 19 3\\nB 20 2\\nB 20 3\\nR 21 2\\nB 21 3\\nR 22 2\\nB 22 3\\nB 23 2\\nB 23 3\\nB 24 2\\nB 24 3\\nB 25 2\\nB 25 3\\nR 26 2\\nB 26 3\\nB 27 2\\nB 27 3\\nB 28 2\\nB 28 3\\nB 29 2\\nB 29 3\\nB 30 2\\nB 30 3\\nB 31 2\\nB 31 3\\nR 32 2\\nB 32 3\\nR 33 2\\nB 33 3\\nR 34 2\\nB 34 3\\nB 35 2\\nB 35 3\\nB 36 2\\nB 36 3\\nR 37 2\\nB 37 3\\nR 38 2\\nB 38 3\\nB 39 2\\nB 39 3\\nR 40 2\\nB 40 3\\nR 41 2\\nB 41 3\\nB 42 2\\nB 42 3\\nB 43 2\\nB 43 3\\nR 44 2\\nB 44 3\\nR 45 2\\nB 45 3\\nR 46 2\\nB 46 3\\nR 47 2\\nB 47 3\\nB 48 2\\nB 48 3\\nB 49 2\\nB 49 3\\nB 50 2\\nB 50 3\\nB 51 2\\nB 51 3\\nB 52 2\\nB 52 3\\nB 53 2\\nB 53 3\\nB 54 2\\nB 54 3\\nB 55 2\\nB 55 3\\nB 56 2\\nB 56 3\\nB 57 2\\nB 57 3\\nB 58 2\\nB 58 3\\nB 59 2\\nB 59 3\\nB 60 2\\nB 60 3\\nB 61 2\\nB 61 3\\nR 62 2\\nB 62 3\\nR 63 2\\nB 63 3\\nB 64 2\\nB 64 3\\nB 65 2\\nB 65 3\\nR 66 2\\nB 66 3\\nB 67 2\\nB 67 3\\nR 68 2\\nB 68 3\\nB 69 2\\nB 69 3\\nB 70 2\\nB 70 3\\nR 71 2\\nB 71 3\\nB 72 2\\nB 72 3\\nB 73 2\\nB 73 3\\nR 74 2\\nB 74 3\\nB 75 2\\nB 75 3\\nB 76 2\\nB 76 3\\nB 77 2\\nB 77 3\\nB 78 2\\nB 78 3\\nB 79 2\\nB 79 3\\nB 80 2\\nB 80 3\\nB 81 2\\nB 81 3\\nB 82 2\\nB 82 3\\nB 83 2\\nB 83 3\\nB 84 2\\nB 84 3\\nB 85 2\\nB 85 3\\nB 86 2\\nB 86 3\\nB 87 2\\nB 87 3\\nB 88 2\\nB 88 3\\nB 89 2\\nB 89 3\\nB 90 2\\nB 90 3\\nB 91 2\\nB 91 3\\nB 92 2\\nB 92 3\\nB 93 2\\nB 93 3\\nR 94 2\\nB 94 3\\nR 95 2\\nB 95 3\\nR 96 2\\nB 96 3\\nB 97 2\\nB 97 3\\nR 98 2\\nB 98 3\\nR 99 2\\nB 99 3\\nB 100 2\\nB 100 3\\nR 101 2\\nB 101 3\\nR 102 2\\nB 102 3\\nB 103 2\\nB 103 3\\nB 104 2\\nB 104 3\\nB 105 2\\nB 105 3\\nR 106 2\\nB 106 3\\nB 107 2\\nB 107 3\\nB 108 2\\nB 108 3\\nB 109 2\\nB 109 3\\nB 110 2\\nB 110 3\\nB 111 2\\nB 111 3\\nB 112 2\\nB 112 3\\nB 113 2\\nB 113 3\\nB 114 2\\nB 114 3\\nB 115 2\\nB 115 3\\nB 116 2\\nB 116 3\\nB 117 2\\nB 117 3\\nB 118 2\\nB 118 3\\nB 119 2\\nB 119 3\\nB 120 2\\nB 120 3\\nB 121 2\\nB 121 3\\nB 122 2\\nB 122 3\\nB 123 2\\nB 123 3\\nB 124 2\\nB 124 3\\nB 125 2\\nB 125 3\\nB 126 2\\nB 126 3\\nB 127 2\\nB 127 3\\nB 128 2\\nB 128 3\\nB 129 2\\nB 129 3\\nB 130 2\\nB 130 3\\nB 131 2\\nB 131 3\\nB 132 2\\nB 132 3\\nB 133 2\\nB 133 3\\nB 134 2\\nB 134 3\\nB 135 2\\nB 135 3\\nB 136 2\\nB 136 3\\nB 137 2\\nB 137 3\\nB 138 2\\nB 138 3\\nB 139 2\\nB 139 3\\nB 140 2\\nB 140 3\\nB 141 2\\nB 141 3\\nB 142 2\\nB 142 3\\nB 143 2\\nB 143 3\\nB 144 2\\nB 144 3\\nB 145 2\\nB 145 3\\nB 146 2\\nB 146 3\\nB 147 2\\nB 147 3\\nB 148 2\\nB 148 3\\nB 149 2\\nB 149 3\\nB 150 2\\nB 150 3\\nB 151 2\\nB 151 3\\nB 152 2\\nB 152 3\\nB 153 2\\nB 153 3\\nB 154 2\\nB 154 3\\nB 155 2\\nB 155 3\\nB 156 2\\nB 156 3\\nB 157 2\\nB 157 3\\nB 158 2\\nB 158 3\\nB 159 2\\nB 159 3\\nB 160 2\\nB 160 3\\nB 161 2\\nB 161 3\\nB 162 2\\nB 162 3\\nB 163 2\\nB 163 3\\nB 164 2\\nB 164 3\\nB 165 2\\nB 165 3\\nB 166 2\\nB"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 3 2\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 3 2\nB 1 2\nR 2 3\nR 3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 3 2\nB 1 2\nR 2 3\nR 3 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 3 2\nB 1 2\nR 2 3\nR 3 1\n\"\"\") == \"1\""
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 4 2\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5 3\nR 3 1\nB 2 3\nR 2 1\nB 1 4\n\"\"\") == \"0\"\n\n'''\n\nclass Solution:\n    def spanningTree(self, n, m, k):\n        blue = 0\n        blue_list = []\n        if (n,m) not in k:\n            return \"0\"\n        if (n,m,k) in self.cache:\n            return self.cache[(n,m,k)]\n        if k == 0:\n            return \"1\"\n        for i in range(n):\n            if self.countBlue(i,m,k) > 0:\n                blue += 1\n                blue_list.append(i)\n        self.cache[(n,m,k)] = \"1\" if blue == k else \"0\"\n        return self.cache[(n,m,k)]\n\n    def countBlue(self, i, m, k):\n        count = 0\n        for j in range(m):\n            if self.tree[i][j] == \"B\":\n                count += 1\n        return count\n\ns = Solution()\nprint(s.spanningTree(5, 4, 2))\nprint(s.spanningTree(5, 5, 3))\nprint(s.spanningTree(4, 4, 0))"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2') == '1'\nassert solution('5 5 2') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2\") == \"1\"\nassert solution(\"10 3 5 2\") == \"0\"\nassert solution(\"8 2 7 3\") == \"1\"\nassert solution(\"10 5 4 2\") == \"0\"\nassert solution(\"100000 4 5 2\") == \"1\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 0 5\n7 0 7\n4\n88''') == '88'\nassert solution('''5 0 5\n7 0 7\n4\n88''') == '5'\nassert solution('''5 0 5\n7 0 7\n4\n7''') == '7'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([5, 0, 5]) == \"88\"\nassert solution([7, 0, 7]) == \"5\"\nassert solution([4, 0, 0]) == \"5\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '5'\nassert solution('2') == '5'\nassert solution('4') == '3'\nassert solution('1') == '0'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 0 5') == '88'\nassert solution('7 0 7') == '5'\nassert solution('4') == '7'\nassert solution('88') == '5'\nassert solution('5') == '7'\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '88'\nassert solution('''2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '7'\nassert solution('''3\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '5'\nassert solution('''3\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '7'\nassert solution('''3\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '7'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == \"88\"\n\nassert solution('''\n2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == \"88\"\n\nassert solution('''\n2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == \"88\"\n\nassert solution('''\n3\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == \"88\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([5, 0, 5]) == \"88\"\nassert solution([7, 0, 7]) == \"5\"\nassert solution([4, 0, 0]) == \"5\""
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"8\"\nassert solution(stdin=\"2\") == \"4\"\nassert solution(stdin=\"5 0 5\") == \"8\"\nassert solution(stdin=\"7 0 7\") == \"8\"\nassert solution(stdin=\"4\") == \"7\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"5 0 5\") == \"88\"\nassert solution(\"7 0 7\") == \"5\"\nassert solution(\"4\") == \"7\""
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n5 0 5\n7 0 7\n4\n\"\"\") == \"88\"\nassert solution(\"\"\"\n3\n3 3 3\n3\n3 2\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1\n5\n1 3 4 5\n3\n5\n4\n3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2 1 3') == '5'\nassert solution('4 2 1 3') == '5'\nassert solution('2 3 1 2') == '-1'"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 1 2') == '5'\nassert solution('5 4 1 2') == '-1'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 2 1\n2 2 3\n1 3 1\n2 3 3\"\"\") == \"5\"\n\nassert solution(\"\"\"\n5 1 1\n2 2 2\n3 3 3\n4 4 4\n1 3 1\n2 4 2\"\"\") == \"5\"\n\nassert solution(\"\"\"\n5 2 1\n1 1 1\n3 3 3\n4 4 4\n1 3 1\n2 3 2\"\"\") == \"-1\"\n\nassert solution(\"\"\"\n5 1 1\n1 1 1\n3 3 3\n4 4 4\n1 3 1\n2 3 2\"\"\") == \"3\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n3\n1 2\n1 3 1\n2 3 3\n4 5 5\n5 4 4\n3 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n2\n1 2\n1 3 1\n2 3 3\n4 5 5\n5 4 4\n3 3\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n3\n1\n1 2\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n1\n3 1\n\"\"\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"5\"\n'''\n\nimport sys\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3 1 2') == '-1'\nassert solution('4 5 2 2') == '7'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3 3 3 4\n1\n2 2\n1 3 1\n2 3\n3 4 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1 5 7\n1 3\n2 3\n3 4\n4 5\n5 4\n\"\"\") == \"-1\"\n\nprint(\"All test cases passed\")"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n3 4\") == \"5\"\nassert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"7\"\nassert solution(\"1 2\\n2 1\") == \"-1\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 1 2') == '5'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2 3 1 2\n1 2 2\n1 3 1\"\"\") == \"5\"\nassert solution(\"\"\"5 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\"\"\") == \"5\"\nassert solution(\"\"\"6 3 1 2\n1\n1 2\n2 3\n3 4\n3 5\n4 6\n5 7\n6 8\"\"\") == \"12\"\nassert solution(\"\"\"8 3 2\n2\n3\n1 2\n3 4\n5 6\n7 8\n4 9\n6 10\n7 11\n8 12\n5 13\"\"\") == \"8\"\nassert solution(\"\"\"10 4 2\n2\n5\n3\n4\n6\n7\n8\n9\n10\n11\n12\n13\"\"\") == \"6\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkniz\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('c4nizCC44') =='mirkovniz'"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"heA2s6hgAA4r\") == \"hear\"\nassert solution(\"heh1hi4gAA4r\") == \"hear\"\nassert solution(\"hA2s6hgAA4r\") == \"hear\"\n\"\"\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\n\nSample Input:\nmirkovC4nizCC44\nC4a1b\nSample Output:\nmirkovnizab\n\"\"\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkniz\"\nprint(solution(input()))\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz', \"Second\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''mirkovC4nizCC44''') =='mirkovniz', 'Challenge #1'\nassert solution('''C4\nmirkovC4nizCC44''') =='mirkovniz', 'Challenge #2'\nassert solution('''C4\nmirkovCC44''') =='mirkovCC44', 'Challenge #3'\nassert solution('''C4\nmirkovCC44''') =='mirkovCC44', 'Challenge #4'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovnizCC44\"\nassert solution(\"mirko17C3nizCC44\") == \"mirko17C3nizCC44\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('mirkoC44nizCC44') =='mirkoC44nizCC44'\nassert solution('mirko4nizCC44') =='mirko4nizCC44'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n3 65\\n45 10\\n60 25') == '32'\n\nassert solution('3\\n1 1\\n1 100000\\n1 1') == '10'\n\nassert solution('10\\n5 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == '10'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '32'\nassert solution('2') == '4'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n4 2\\n3 1\\n') == '13'\n\"\"\"\nimport math"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '32'"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '32'"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n65\\n45\\n60') == '32'\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == '12'\nassert solution('10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10') == '10'\nassert solution('100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100') == '0'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n3 65\n45 10\n60 25\n''') == '32'\n\nassert solution('''\n5\n8 4\n7 9\n6 2\n8 1\n7 1\n''') == '11'\n\n'''"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '32'\nassert solution('3 5') == '32'\nassert solution('3 5 2') == '35'\nassert solution('1 10') == '10'\nassert solution('1 1000000000') == '0'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n3 10\n5 10\n''') == '32'\n\nassert solution('''\n1\n3 10\n5 10\n''') == '35'\n\nassert solution('''\n3\n3 10\n5 10\n''') == '35'\n\nassert solution('''\n1\n1 1\n1 2\n''') == '3'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n1\\n2\\n3\\n') == '1'\nassert solution('10\\n5\\n10\\n15\\n10\\n') == '35'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '2'\nassert solution('1 2 0 3 1') == '3'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 0 3 1\n''') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 0 3\\n') == '1'\nassert solution('3\\n2 2 0 3\\n') == '1'\nassert solution('3\\n1 2 0 2\\n') == '2'\nassert solution('2\\n0 0\\n') == '2'\nassert solution('3\\n1 2 0 3\\n') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '3'\nassert solution('5\\n5 5 5 5 5\\n') == '5'\nassert solution('5\\n1 2 0 3 1\\n') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 2 0 3 1\n''') == '2'\nassert solution('''\n5\n1 2 0 3 1\n''') == '3'\nassert solution('''\n6\n1 2 0 3 1 0\n''') == '2'\nassert solution('''\n6\n0 0 1 1 1 1\n''') == '1'\nassert solution('''\n5\n1 2 0 3 1 0\n''') == '1'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '2\\n3'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 0 3\\n') == '2'\nassert solution('3\\n0 1 2 3\\n') == '3'\nassert solution('3\\n1 2\\n') == '0'"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2 0 3 1\n''') == '3\n2\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3 2'"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '3'\nassert solution('10\\n1 2 0 3 4 5 2 5 5 5\\n') == '5'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\nassert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 5 5\") == \"2\"\nassert solution(\"10 5 5\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 1 5\\n- 1 6\\n+ 1 7\\n- 1 8\\n+ 1 9\\n- 1 10\") == \"8\"\nassert solution(\"100 100 100\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 1 5\\n- 1 6\\n+ 1 7\\n- 1 8\\n+ 1 9\\n- 1 10\\n+ 1 11\\n- 1 12\\n+ 1 13\\n- 1 14\\n+ 1 15\\n- 1 16\\n+ 1 17\\n- 1 18\\n+ 1 19\\n- 1 20\\n+ 1 21\\n- 1 22\\n+ 1 23\\n- 1 24\\n+ 1 25\\n- 1 26\\n+ 1 27\\n- 1 28\\n+ 1 29\\n- 1 30\\n+ 1 31\\n- 1 32\\n+ 1 33\\n- 1 34\\n+ 1 35\\n- 1 36\\n+ 1 37\\n- 1 38\\n+ 1 39\\n- 1 40\\n+ 1 41\\n- 1 42\\n+ 1 43\\n- 1 44\\n+ 1 45\\n- 1 46\\n+ 1 47\\n- 1 48\\n+ 1 49\\n- 1 50\\n+ 1 51\\n- 1 52\\n+ 1 53\\n- 1 54\\n+ 1 55\\n- 1 56\\n+ 1 57\\n- 1 58\\n+ 1 59\\n- 1 60\\n+ 1 61\\n- 1 62\\n+ 1 63\\n- 1 64\\n+ 1 65\\n- 1 66\\n+ 1 67\\n- 1 68\\n+ 1 69\\n- 1 70\\n+ 1 71\\n- 1 72\\n+ 1 73\\n- 1 74\\n+ 1 75\\n- 1 76\\n+ 1 77\\n- 1 78\\n+ 1 79\\n- 1 80\\n+ 1 81\\n- 1 82\\n+ 1 83\\n- 1 84\\n+ 1 85\\n- 1 86\\n+ 1 87\\n- 1 88\\n+ 1 89\\n- 1 90\\n+ 1 91\\n- 1 92\\n+ 1 93\\n- 1 94\\n+ 1 95\\n- 1 96\\n+ 1 97\\n- 1 98\\n+ 1 99\") == \"12\"\nassert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"1\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 4') == '8'\nassert solution('3 3 4') == '36'\nassert solution('2 1 2') == '1'\nassert solution('2 5 5') == '37'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n') == '2'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4''') == '1'\nassert solution('''4 8 4\n+ 1 1\n+ 1 3\n+ 1 5\n- 1 2\n- 1 4\n- 1 6\n- 1 8\n- 1 9\n+ 1 11\n- 1 12\n- 1 14\n+ 1 15\n- 1 16\n+ 1 17\n+ 1 19\n- 1 20\n- 1 21\n+ 1 22\n- 1 24\n+ 1 26\n- 1 28\n+ 1 30\n+ 1 32\n- 1 34\n- 1 36\n+ 1 37\n+ 1 39\n- 1 40\n- 1 41\n+ 1 42\n+ 1 44\n+ 1 46\n- 1 48\n- 1 49\n+ 1 51\n+ 1 53\n- 1 54\n- 1 55\n+ 1 56\n- 1 58\n- 1 59\n+ 1 61\n+ 1 63\n- 1 64\n+ 1 66\n+ 1 68\n+ 1 70\n+ 1 72\n+ 1 74\n- 1 76\n+ 1 78\n- 1 80\n+ 1 82\n+ 1 84\n+ 1 86\n- 1 88\n- 1 90\n- 1 92\n+ 1 94\n+ 1 96\n- 1 98\n+ 1 100''') == '8'\nassert solution('''5 5 5\n+ 1 1\n+ 1 3\n+ 1 5\n- 1 2\n- 1 4\n+ 1 6\n- 1 8\n+ 1 9\n- 1 11\n- 1 13\n+ 1 15\n- 1 17\n+ 1 19\n- 1 21\n+ 1 23\n+ 1 25\n- 1 27\n+ 1 29\n+ 1 31\n+ 1 33\n- 1 35\n+ 1 37\n- 1 39\n+ 1 41\n+ 1 43\n+ 1 45\n+ 1 47\n+ 1 49\n- 1 51\n+ 1 53\n- 1 55\n+ 1 57\n+ 1 59\n- 1 61\n+ 1 63\n+ 1 65\n+ 1 67\n- 1 69\n+ 1 71\n+ 1 73\n+ 1 75\n+ 1 77\n- 1 79\n+ 1 81\n+ 1 83\n- 1 85\n- 1 87\n- 1 89\n- 1 91\n+ 1 93\n+ 1 95\n+ 1 97\n- 1 99\n+ 1 101\n- 1 103\n+ 1 105\n+ 1 107\n+ 1 109\n+ 1 111\n- 1 113\n+ 1 115\n- 1 117\n+ 1 119\n+ 1 121\n+ 1 123\n- 1 125\n+ 1 127\n+ 1 129\n+ 1 131\n- 1 133\n+ 1 135\n+ 1 137\n+ 1 139\n+ 1 141\n+ 1 143\n+ 1 145\n- 1 147\n- 1 149\n+ 1 151\n+ 1 153\n- 1 155\n+ 1 157\n+ 1 159\n+ 1 161\n- 1 163\n+ 1 165\n+ 1 167\n+ 1 169\n+ 1 171\n+ 1 173\n+ 1 175\n- 1 177\n- 1 179\n+ 1 181\n+ 1 183\n+ 1 185\n+ 1 187\n+ 1 189\n+ 1 191\n+ 1 193\n- 1 195\n+ 1 197\n+ 1 199\n+ 1 201\n+ 1 203\n+ 1 205\n+ 1 207\n+ 1 209\n+ 1 211\n+ 1 213\n+ 1 215\n+ 1 217\n- 1 219\n+ 1 221\n+ 1 223\n+ 1 225\n+ 1 227\n+ 1 229\n+ 1 231\n+ 1 233\n- 1 235\n+ 1 237\n+ 1 239\n+ 1 241\n+ 1 243\n+ 1 245\n+ 1 247\n+ 1 249\n+ 1 251\n+ 1 253\n- 1 255\n- 1 257\n+ 1 259\n+ 1 261\n+ 1 263\n+ 1 265\n+ 1 267\n+ 1 269\n+ 1 271\n+ 1 273\n+ 1 275\n+ 1 277\n+ 1 279\n+ 1 281\n+ 1 283\n+ 1 285\n+ 1 287\n- 1 289\n+ 1 291\n+ 1 293\n+ 1 295\n+ 1 297\n+ 1 299\n+ 1 301\n+ 1 303\n+ 1 305\n+ 1 307\n+ 1 309\n+ 1 311\n+ 1 313\n+ 1 315\n- 1 317\n+ 1 319\n+ 1 321\n+ 1 323\n+ 1 325\n+ 1 327\n+ 1 329\n+ 1 331\n+ 1 333\n+ 1 335\n+ 1 337\n+ 1 339\n+ 1 341\n+ 1 343\n+ 1 345\n+ 1 347\n+ 1 349\n+ 1 351\n+ 1 353\n+ 1 355\n+ 1 357\n+ 1 359\n+ 1 361\n+ 1 363\n+ 1 365\n+ 1 367\n+ 1 369\n+ 1 371\n+ 1 373\n+ 1 375\n+ 1 377\n+ 1 379\n+ 1 381\n+ 1 383\n+ 1 385\n+ 1 387\n+ 1 389\n+ 1 391\n+ 1 393\n+ 1 395\n+ 1 397\n+ 1 399\n+ 1 401\n+ 1 403\n+ 1 405\n+ 1 407\n+ 1 409\n+ 1 411\n+ 1 413\n+ 1 415\n+ 1 417\n+ 1 419\n+ 1 421\n+ 1 423\n+ 1 425\n+ 1 427\n+ 1 429\n+ 1 431\n+ 1 433\n+ 1 435\n+ 1 437\n+ 1 439\n+ 1 441\n+ 1 443\n+ 1 445\n+ 1 447\n+ 1 449\n+ 1 451\n+ 1 453\n+ 1 455\n+ 1 457\n+ 1 459\n+ 1 461\n+ 1 463\n+ 1 465\n+ 1 467\n+ 1 469\n+ 1 471\n+ 1 473\n+ 1 475\n+ 1 477\n+ 1 479\n+ 1 481\n+ 1 483\n+ 1 485\n+ 1 487\n+ 1 489\n+ 1 491\n+ 1 493\n+ 1 495\n+ 1 497\n+ 1 499\n+ 1 501\n+ 1 503\n+ 1 505\n+ 1 507\n+ 1 509\n+ 1 511\n+ 1 513\n+ 1 515\n+ 1 517\n+ 1 519\n+ 1 521\n+ 1 523\n+ 1 525\n+ 1 527\n+ 1 529\n+ 1 531\n+ 1 533\n+ 1 535\n+ 1 537\n+ 1 539\n+ 1 541\n+ 1 543\n+ 1 545\n+ 1 547\n+ 1 549\n+ 1 551\n+ 1 553\n+ 1 555\n+ 1 557\n+ 1 559\n+ 1 561\n+ 1 563\n+ 1 565\n+ 1 567\n+ 1 569\n+ 1 571\n+ 1 573\n+ 1 575\n+ 1 577\n+ 1 579\n+ 1 581\n+ 1 583\n+ 1 585\n+ 1 587\n+ 1 589\n+ 1 591\n+ 1 593\n+ 1 595\n+ 1 597\n+ 1 599\n+ 1 601\n+ 1 603\n+ 1 605\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3\") == \"2\"\nassert solution(\"2 4 4\") == \"0\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 1\") == \"0\"\nassert solution(\"1 2 2\") == \"0\"\nassert solution(\"1 2 3\") == \"4\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n- 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '2'\nassert solution('5 5 5\\n+ 1 2\\n+ 1 3\\n+ 1 4\\n- 1 5\\n+ 2 3\\n- 2 4\\n- 3 4\\n+ 4 5\\n- 1 3\\n+ 2 2\\n- 1 4\\n- 2 2\\n- 3 2\\n+ 2 1\\n+ 3 1\\n+ 4 1\\n+ 5 1\\n- 1 5\\n- 3 5\\n+ 1 4\\n+ 2 4\\n+ 3 4\\n+ 4 4\\n+ 1 4') == '5'\nassert solution('1 1\\n+ 1 1\\n- 1 1\\n+ 1 2\\n- 1 2\\n+ 1 3\\n- 1 3\\n+ 1 4\\n- 1 4\\n+ 1 5\\n- 1 5\\n+ 1 6\\n- 1 6\\n+ 1 7\\n- 1 7\\n+ 1 8\\n- 1 8\\n+ 1 9\\n- 1 9\\n+ 1 10\\n- 1 10\\n+ 1 11\\n- 1 11\\n+ 1 12\\n- 1 12\\n+ 1 13\\n- 1 13\\n+ 1 14\\n- 1 14\\n+ 1 15\\n- 1 15\\n+ 1 16\\n- 1 16\\n+ 1 17\\n- 1 17\\n+ 1 18\\n- 1 18\\n+ 1 19\\n- 1 19\\n+ 1 20\\n- 1 20\\n+ 1 21\\n- 1 21\\n+ 1 22\\n- 1 22\\n+ 1 23\\n- 1 23\\n+ 1 24\\n- 1 24\\n+ 1 25\\n- 1 25\\n+ 1 26\\n- 1 26\\n+ 1 27\\n- 1 27\\n+ 1 28\\n- 1 28\\n+ 1 29\\n- 1 29\\n+ 1 30\\n- 1 30\\n+ 1 31\\n- 1 31\\n+ 1 32\\n- 1 32\\n+ 1 33\\n- 1 33\\n+ 1 34\\n- 1 34\\n+ 1 35\\n- 1 35\\n+ 1 36\\n- 1 36\\n+ 1 37\\n- 1 37\\n+ 1 38\\n- 1 38\\n+ 1 39\\n- 1 39\\n+ 1 40\\n- 1 40\\n+ 1 41\\n- 1 41\\n+ 1 42\\n- 1 42\\n+ 1 43\\n- 1 43\\n+ 1 44\\n- 1 44\\n+ 1 45\\n- 1 45\\n+ 1 46\\n- 1 46\\n+ 1 47\\n- 1 47\\n+ 1 48\\n- 1 48\\n+ 1 49\\n- 1 49\\n+ 1 50\\n- 1 50\\n+ 1 51\\n- 1 51\\n+ 1 52\\n- 1 52\\n+ 1 53\\n- 1 53\\n+ 1 54\\n- 1 54\\n+ 1 55\\n- 1 55\\n+ 1 56\\n- 1 56\\n+ 1 57\\n- 1 57\\n+ 1 58\\n- 1 58\\n+ 1 59\\n- 1 59\\n+ 1 60\\n- 1 60\\n+ 1 61\\n- 1 61\\n+ 1 62\\n- 1 62\\n+ 1 63\\n- 1 63\\n+ 1 64\\n- 1 64\\n+ 1 65\\n- 1 65\\n+ 1 66\\n- 1 66\\n+ 1 67\\n- 1 67\\n+ 1 68\\n- 1 68\\n+ 1 69\\n- 1 69\\n+ 1 70\\n- 1 70\\n+ 1 71\\n- 1 71\\n+ 1 72\\n- 1 72\\n+ 1 73\\n- 1 73\\n+ 1 74\\n- 1 74\\n+ 1 75\\n- 1 75\\n+ 1 76\\n- 1 76\\n+ 1 77\\n- 1 77\\n+ 1 78\\n- 1 78\\n+ 1 79\\n- 1 79\\n+ 1 80\\n- 1 80\\n+ 1 81\\n- 1 81\\n+ 1 82\\n- 1 82\\n+ 1 83\\n- 1 83\\n+ 1 84\\n- 1 84\\n+ 1 85\\n- 1 85\\n+ 1 86\\n- 1 86\\n+ 1 87\\n- 1 87\\n+ 1 88\\n- 1 88\\n+ 1 89\\n- 1 89\\n+ 1 90\\n- 1 90\\n+ 1 91\\n- 1 91\\n+ 1 92\\n- 1 92\\n+ 1 93\\n- 1 93\\n+ 1 94\\n- 1 94\\n+ 1 95\\n- 1 95\\n+ 1 96\\n- 1 96\\n+ 1 97\\n- 1 97\\n+ 1 98\\n- 1 98\\n+ 1 99\\n- 1 99\\n+ 1 100\\n- 1 100\\n+ 1 101\\n- 1 101\\n+ 1 102\\n- 1 102\\n+ 1 103\\n- 1 103\\n+ 1 104\\n- 1 104\\n+ 1 105\\n- 1 105\\n+ 1 106\\n- 1 106\\n+ 1 107\\n- 1 107\\n+ 1 108\\n- 1 108\\n+ 1 109\\n- 1 109\\n+ 1 110\\n- 1 110\\n+ 1 111\\n- 1 111\\n+ 1 112\\n- 1 112\\n+ 1 113\\n- 1 113\\n+ 1 114\\n- 1 114\\n+ 1 115\\n- 1 115\\n+ 1 116\\n- 1 116\\n+ 1 117\\n- 1 117\\n+ 1 118\\n- 1 118\\n+ 1 119\\n- 1 119\\n+ 1 120\\n- 1 120\\n+ 1 121\\n- 1 121\\n+ 1 122\\n- 1 122\\n+ 1 123\\n- 1 123\\n+ 1 124\\n- 1 124\\n+ 1 125\\n- 1 125\\n+ 1 126\\n- 1 126\\n+ 1 127\\n- 1 127\\n+ 1 128\\n- 1 128\\n+ 1 129\\n- 1 129\\n+ 1 130\\n- 1 130\\n+ 1 131\\n- 1 131\\n+ 1 132\\n- 1 132\\n+ 1 133\\n- 1 133\\n+ 1 134\\n- 1 134\\n+ 1 135\\n- 1 135\\n+ 1 136\\n- 1 136\\n+ 1 137\\n- 1 137\\n+ 1 138\\n- 1 138\\n+ 1 139\\n- 1 139\\n+ 1 140\\n- 1 140\\n+ 1 141\\n- 1 141\\n+ 1 142\\n- 1 142\\n+ 1 143\\n- 1 143\\n+ 1"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4\n''') == '2'\n\"\"\"\n\n'''\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4\n''') == '0'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\\n\"\nassert solution(\"1000000000 0\\n\") == \"500000004\\n\"\nassert solution(\"1000000000 1\\n\") == \"60000000\\n\""
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5000000000 1\n5000000000 2\n5000000000 3\n5000000000 4\n5000000000 5\n''') == \"500000004\"\n\nassert solution('''\n3\n1 1\n2 2\n3 3\n''') == \"70000000\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n10000000000 0\n10000000000 1\n10000000000 2\n''') == '500000004'\nassert solution('''\n3\n10000000000 0\n10000000000 1\n10000000000 2\n''') == '100000000'\nassert solution('''\n3\n10000000000 0\n10000000000 1\n10000000000 2\n''') == '0'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"500000004\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n'.join([\n    '3',\n    '3 1',\n    '2 2',\n    '1 2',\n    '2 1',\n    '1 3',\n    '2 2',\n    '1 5',\n    '1 4',\n    '2 3',\n    '4 6',\n    '3 5',\n    '2 4',\n    '4 6',\n    '3 4',\n    '5 5',\n    '2 6',\n    '4 3',\n    '5 6',\n    '4 3',\n    '2 7',\n    '4 5',\n    '5 2',\n    '3 7',\n    '4 7',\n    '5 7',\n    '5 6',\n    '6 4',\n    '6 2',\n    '5 6',\n    '4 1',\n    '4 3',\n    '2 4',\n    '4 7',\n    '4 7',\n    '3 6',\n    '2 7',\n    '4 6',\n    '5 7',\n    '1 2',\n    '2 2',\n    '3 3',\n    '4 5',\n    '5 5',\n    '6 6',\n    '7 8',\n    '3 6',\n    '5 5',\n    '1 4',\n    '4 7',\n    '6 6',\n    '1 6',\n    '6 7',\n    '7 6',\n    '4 6',\n    '1 7',\n    '6 6',\n    '1 6',\n    '2 6',\n    '6 6',\n    '7 7',\n    '4 8',\n    '4 7',\n    '7 8',\n    '3 7',\n    '5 6',\n    '6 5',\n    '6 3',\n    '7 1',\n    '3 6',\n    '5 4',\n    '5 4',\n    '4 1',\n    '5 3',\n    '6 4',\n    '1 6',\n    '2 4',\n    '4 6',\n    '5 4',\n    '5 6',\n    '6 2',\n    '4 3',\n    '6 2',\n    '6 3',\n    '3 3',\n    '5 1',\n    '5 2',\n    '2 3',\n    '5 3',\n    '4 1',\n    '4 2',\n    '5 5',\n    '4 6',\n    '5 3',\n    '5 2',\n    '2 2',\n    '3 2',\n    '2 2',\n    '2 6',\n    '2 4',\n    '4 2',\n    '1 2',\n    '3 4',\n    '5 2',\n    '5 3',\n    '2 4',\n    '5 4',\n    '3 5',\n    '4 4',\n    '4 7',\n    '2 5',\n    '1 3',\n    '2 5',\n    '5 4',\n    '4 4',\n    '5 6',\n    '3 5',\n    '4 6',\n    '6 4',\n    '4 6',\n    '3 5',\n    '5 3',\n    '5 6',\n    '4 6',\n    '2 2',\n    '1 2',\n    '1 2',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"10\") == \"\"\nassert solution(\"1000000000 0\") == \"500000004\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"8\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n1 1\n''') == '500000004', solution('''\n1\n1 2\n''')\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '4.5'\nassert solution('2') == '5.0'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"7\"\nassert solution(\"4\") == \"13\"\nassert solution(\"5\") == \"13\"\nassert solution(\"6\") == \"13\"\nassert solution(\"7\") == \"13\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 8\") == \"12\"\nassert solution(\"10 5\") == \"2\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100') == '12'\nassert solution('1 3\\n10 11\\n4 7\\n7 8\\n2 5\\n6 1\\n7 9\\n7 6\\n8 7\\n8 6\\n7 4\\n6 5\\n7 1\\n7 2\\n') == '6'\nassert solution('1 1\\n0 0\\n0 1\\n1 0\\n1 0\\n') == '0'\nassert solution('1 1\\n0 0\\n1 1\\n1 1\\n1 0\\n') == '1'\nassert solution('5\\n') == '1'"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n2 1 4 11\\n2 1 9 12\\n3 5 28 100\") == \"12\"\nprint(\"All Tests Passed\")"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == \"12\"\nassert solution('1 2 1 10') == \"1\"\n\"\"\""
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 8\\n\"\n    \"1 2 1 10\\n\"\n    \"2 4 11 16\\n\"\n    \"2 1 9 12\\n\"\n    \"3 5 28 100\\n\"\n    \"1 2 3 8\\n\"\n    \"4 3 20 21\\n\"\n    \"1 3 13 27\\n\"\n    \"3 5 23 24\") == \"12\"\n\nassert solution(\n    \"5 8\\n\"\n    \"1 2 1 10\\n\"\n    \"2 4 11 16\\n\"\n    \"2 1 9 12\\n\"\n    \"3 5 28 100\\n\"\n    \"1 3 13 27\\n\"\n    \"3 5 23 24\") == \"0\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == '12'\nassert solution('''\n3 1\n1 2 3\n''') == '1'\nassert solution('''\n4 5\n3 1 3 2\n1 4 2 4\n2 4 1 4\n1 4 3 3\n''') == '5'\nassert solution('''\n3 3\n1 1 2\n1 2 3\n2 3 1\n''') == '5'\nassert solution('''\n4 5\n3 1 3 2\n1 4 2 4\n2 4 1 4\n1 4 3 3\n''') == '2'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == '12'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([5, 8]) == \"12\"\nassert solution([2, 4, 11, 16]) == \"12\"\nassert solution([2, 1, 9, 12]) == \"1\"\nassert solution([3, 5, 28, 100]) == \"21\"\nassert solution([1, 3, 13, 27]) == \"15\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 8') == '12'\nprint(solution(''))\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 8') == '12'\nassert solution('4 4') == '8'\nassert solution('10 8') == '6'\nassert solution('1 2 1 10') == '12'\nassert solution('2 4 11 16') == '11'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    3\n    15 5 3\n    12 4 4\n    20 10 5\n''') == '3'\n\nassert solution('''\n    10\n    1 1 1\n    2 2 2\n    3 3 3\n    4 4 4\n    5 5 5\n    6 6 6\n    7 7 7\n    8 8 8\n    9 9 9\n    10 10 10\n''') == '10'\n\nassert solution('''\n    20\n    1 1 1\n    2 2 2\n    3 3 3\n    4 4 4\n    5 5 5\n    6 6 6\n    7 7 7\n    8 8 8\n    9 9 9\n    10 10 10\n    11 11 11\n    12 12 12\n    13 13 13\n    14 14 14\n    15 15 15\n    16 16 16\n    17 17 17\n    18 18 18\n    19 19 19\n    20 20 20\n''') == '20'\n\nassert solution('''\n    40\n    1 1 1\n    2 2 2\n    3 3 3\n    4 4 4\n    5 5 5\n    6 6 6\n    7 7 7\n    8 8 8\n    9 9 9\n    10 10 10\n    11 11 11\n    12 12 12\n    13 13 13\n    14 14 14\n    15 15 15\n    16 16 16\n    17 17 17\n    18 18 18\n    19 19 19\n    20 20 20\n    21 21 21\n    22 22 22\n    23 23 23\n    24 24 24\n    25 25 25\n    26 26 26\n    27 27 27\n    28 28 28\n    29 29 29\n    30 30 30\n    31 31 31\n    32 32 32\n    33 33 33\n    34 34 34\n    35 35 35\n    36 36 36\n    37 37 37\n    38 38 38\n    39 39 39\n    40 40 40\n''') == '40'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 20\n15 5 3\n12 4 4\n20 10 5\n''') == '3'\nassert solution('''\n1 20\n15 5 3\n12 4 4\n20 10 5\n''') == '2'\nassert solution('''\n2 20\n15 5 3\n12 4 4\n20 10 5\n''') == '0'\n\n'''\n3\n15 5 3\n12 4 4\n20 10 5\n'''\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 19') == '3'\nassert solution('12 4 4') == '2'\nassert solution('20 10 5') == '2'"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n15 5 3\n12 4 4\n20 10 5\"\"\") == \"3\"\nassert solution(\"\"\"6\n10 15 6\n15 5 8\n10 9 5\n10 10 2\n5 12 4\n9 12 3\"\"\") == \"4\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n3\n15 5 3\n12 4 4\n20 10 5\nSample Input 2:\n5\n10 100\n20 3 5\n30 7 20\n50 2 4\n20 1 1\nSample Output 2:\n3\n    \"\"\"\n) == \"3\"\nassert solution(\n    \"\"\"\n1\n10 100\nSample Input 3:\n10\n10 100\n20 5 5\n30 7 20\n50 2 4\n20 1 1\nSample Output 3:\n5\n    \"\"\"\n) == \"5\"\nassert solution(\n    \"\"\"\n10\n10 100\n20 5 5\n30 7 20\n50 2 4\n20 1 1\nSample Input 4:\n5\n10 100\n20 3 5\n30 7 20\n50 2 4\n20 1 1\nSample Output 4:\n3\n    \"\"\"\n) == \"3\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 19\\n15 5 3\\n12 4 4\\n20 10 5\\n\") == \"3\"\nassert solution(\"1 100\\n10 10 5\\n20 20 5\\n\") == \"1\"\nassert solution(\"2 100\\n10 10 5\\n20 20 5\\n\") == \"2\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n15 5 3\\n12 4 4\\n20 10 5') == '3'\n\n'''"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 7 1') == '2', 'First'\nassert solution('3 6 5') == '1', 'Second'\nassert solution('100 10 10') == '99', 'Third'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n15 5 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1\n20 10 5\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2\n7 5 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n5 5 5\n5 5 5\n10 10 10\n5 5 5\n5 5 5''') == '3'\nassert solution('''3\n15 5 3\n12 4 4\n20 10 5\nSample Output:\n3\n''') == '2'\n"
    }
]