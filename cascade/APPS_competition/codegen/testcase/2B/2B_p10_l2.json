[
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n2 3\n''') == '5'\n\nassert solution('''8\n( 2 ( 2 1 ) ) 3\n''') == '9'\n\nassert solution('''4\n( 12 3 )\n''') == '36'\n\nassert solution('''6\n( ( 2 3 ) )\n''') == '5'\n\nassert solution('''6\n( ( ( 2 3 ) ) )\n''') == '5'"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '5'\nassert solution('2') == '5'\nassert solution('8') == '9'\nassert solution('4') == '5'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n2 3\n''') == '5'\nassert solution('''\n8\n( 2 ( 2 1 ) ) 3\n''') == '9'\nassert solution('''\n4\n( 12 3 )\n''') == '36'\nassert solution('''\n6\n( ( 2 ) )\n''') == '5'\nassert solution('''\n6\n( ( ( 2 3 ) ) )\n''') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"8 ( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"4 ( 12 3 )\") == \"36\"\nassert solution(\"6 ( ( 2 ) )\") == \"5\"\nassert solution(\"6 ( ( ( 2 3 ) ) )\") == \"5\"\nprint(solution(input()))"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n2 3\n''') == '5'\nassert solution('''8\n( 2 ( 2 1 ) ) 3\n''') == '9'\nassert solution('''4\n( 12 3 )\n''') == '36'\nassert solution('''6\n( ( 2 3 ) )\n''') == '5'"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"8\") == \"9\"\nassert solution(\"4\") == \"5\"\nassert solution(\"6\") == \"5\"\nassert solution(\"6\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n2 3\n( 2 ( 2 1 ) )\n3\n''') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"8 (2 (2 1))\") == \"9\"\nassert solution(\"4 (12 3)\") == \"36\"\nassert solution(\"6 ( ( 2 ) )\") == \"5\"\nassert solution(\"6 ( ( ( 2 3 ) ) )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('8') == '1'\nassert solution('4') == '1'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == str(min_steps(int(s)))\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == str(int(min(len(str(stdin))-1, 2 ** (len(str(stdin))-1)-1)) for stdin in input.split('\\n') for min(len(str(stdin))-1, 2 ** (len(str(stdin))-1)-1) in str(stdin))"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0\n''') == '0'\nassert solution('''\n009990001\n''') == '3'\nassert solution('''\n29998\n''') == '5'\nassert solution('''\n610\n''') == '4'\nassert solution('''\n981\n''') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"610\") == \"4\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"981\") == \"2\"\nassert solution(\"10827\") == \"3\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"5\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') =='seems legit'\nassert solution('2\\n2017 11 0\\n2018 1 1000\\n') == 'insufficient service'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n2017 4 0\\n2017 8 12000\\n2018 8 42000') == 'insufficient service'\nassert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n2017 11 0') == 'tampered odometer'\nassert solution('2\\n2018 1 1000\\n2013 1 0') =='seems legit'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"seems legit\"\nassert solution(\"2\") == \"insufficient service\"\nassert solution(\"1\") == \"tampered odometer\""
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == \"seems legit\"\nassert solution('2') == \"insufficient service\"\nassert solution('3') == \"tampered odometer\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') =='seems legit'\nassert solution('2\\n2013 1 0\\n2013 2 0\\n') =='seems legit'\nassert solution('1\\n2011 0 0\\n') =='seems legit'\nassert solution('2\\n2011 1 0\\n') =='seems legit'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n\") == \"seems legit\"\nassert solution(\"3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n\") == \"tampered odometer\"\nassert solution(\"2\\n2013 1 0\\n2013 2 0\\n\") == \"seems legit\""
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'insufficient service'\nassert solution('3') == 'tampered odometer'\nassert solution('4') == 'tampered odometer'\nprint('all tests passed')"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') =='seems legit'\nassert solution('2') == 'insufficient service'\nassert solution('3') == 'tampered odometer'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') =='seems legit'\nassert solution('2') == 'insufficient service'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\nassert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42001\n\"\"\") == \"insufficient service\"\nassert solution(\"\"\"\n2\n2017 11 0\n2018 1 1000\n\"\"\") == \"tampered odometer\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 3 4\\n0 1\\n0 1\\n1') == '3'\nassert solution('6\\n2 3 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\nSample Output 4:') == '4'\nassert solution('5\\n3 4 2\\n0 1\\n0 1\\n1 3\\nSample Output 2:') == '2'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1 2\\n0 2 3\\n0 1\\n1') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\nSample Output 4:\n2\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2\n0 2 3\n0 1\n1\nSample Output 1:\n3\n\nSample Input 2:\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 2:\n2\n\nSample Input 3:\n6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\nSample Output 3:\n2\n\nSample Input 4:\n4\n1 2 3\n0 2 3\n0 1 3\n0 1 2\nSample Output 4:\n4''') == '3'''"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '3'\nassert solution('4') == '2'\nassert solution('3') == '2'\nassert solution('6') == '4'\nprint('All tests passed!')"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == \"3\"\nprint(solution(None))\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('5') == '4'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1 2\n0 2 3\n0 1''') == '3'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3\\n1 2\\n0 2 3\\n0 1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"6\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\nSample Output 4:\n2"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n0 2\\n0 1\\n1') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n1') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n') == '2'\n\nstdin = '2\\n0 2\\n0 1\\n1'\nprint(solution(stdin))\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '3'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '2'\nassert solution('4') == 'IMPOSSIBLE'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('3') == 'IMPOSSIBLE'\nassert solution('4') == 'IMPOSSIBLE'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\nBLUE 1 4000\nRED 4002 10000\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\nBLUE 1 4000\nRED 4002 10000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == '3'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\nBLUE 1 5000\\nRED 5001 10000') == '2'\nassert solution('3\\nBLUE 1 6000\\nRED 2000 8000\\nWHITE 7000 10000') == '3'\nassert solution('4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000') == '3'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\n2\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == '3'"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ABABA\") == \"1\"\nassert solution(\"AAABB\") == \"3\"\nassert solution(\"\") == \"\"\nassert solution(\"AAABBB\") == \"2\"\nassert solution(\"ABABABABA\") == \"4\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\nassert solution(\"PRIMER\") == \"5\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == 0\nassert solution(\"A\") == 0\nassert solution
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''PRATTATTATTIC\nGGGGGGGGG\nPRIME\nBABBABABBABBA''') == '6'\nassert solution('''ZZZZZZZZZZZZZZ\nGGGGGGGGG\nPRIME\nBABBABABBABBA''') == '1'\nassert solution('''YAAABABABABAB\nABABABABABABA\nAAAABAAABAAABA\nABBBBBBBBBBBA\nAAAAAABBAAABBAB\nAAABAAABAAABBA\nAAABABABABABA\nABABABABABABA\nBAABABABABABA\nAAABABABABABA\nABAABABABABABA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\nABABABABABABA\nABBBBBBBBBBBA\nABBBBBBBBBBBA\nAAAABAAABAAABA\nAAAAAABBAAABAA\nAAAAAAABAAABAA\nABABABABABABA\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('A') == '1'\nassert solution('AAAAAA') == '5'\nassert solution('AGGTTG') == '5'\nassert solution('PPPPPPPPP') == '10'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5') == '0'\nassert solution('2 3 4 5') == '1'\nassert solution('D 2 3 1 D 1') == '1'\nassert solution('D 1 2 3 D 1') == '0'\n\nfrom typing import List\nfrom io import StringIO\nimport sys\n\nclass LongLongString:\n    def __init__(self):\n        self.data = []\n\n    def __getitem__(self, index: int) -> str:\n        return self.data[index]\n\n    def __setitem__(self, index: int, value: str) -> None:\n        self.data[index] = value\n\n    def __len__(self) -> int:\n        return len(self.data)\n\n    def __str__(self) -> str:\n        return ''.join(self.data)"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 D 1') == '0'\nassert solution('2 D 2') == '1'\nassert solution('1 E') == '1'\nassert solution('1 D 1 E') == '1'\nassert solution('1 D 1 E D 1 D 1 E') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE''') == '0'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE''') == '1'\nassert solution('''I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE''') == '0'\n\ntest.assert_equals(solution('''D 2\nD 1\nE\nD 1\nD 2\nE'''), '1')\ntest.assert_equals(solution('''I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE'''), '0')\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''I 14 B\nD 1\nE\nD 1\nD 2\nE\nE\n''') == '0'\nassert solution('''I 14 A\nI 15 B\nE\nI 14 A\nI 15 B\nE\n''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('D 1\\nD 2\\nE\\nD 3\\nD 1\\nE') == '0'\nassert solution('D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\\n') == '1'\nassert solution('I 1 X\\nD 1\\nE\\nE\\nI 14 A\\nI 15 B\\nE') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nD 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''\nI 1 X\nD 1\nE\nE\n''') == '0'\nassert solution('''\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '0'\nassert solution('''\nI 14 A\nI 15 B\nE\nI 14 A\nI 15 B\nE\n''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('D 2\\nE') == '0'\nassert solution('D 1\\nE') == '1'\nassert solution('I 1 X') == '0'\nassert solution('D 1\\nE') == '1'\nassert solution('I 14 B') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '0'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3 4 5') == '0'\nassert solution('1 2 3 4 5 6') == '1'\nassert solution('1 2 3 4 5 6 7') == '1'"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('D 2') == '0'\nassert solution('D 1') == '1'\nassert solution('E') == '1'\nassert solution('D 1') == '0'\nassert solution('D 2') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '0'\nassert solution('''I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '1'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 0 1 0 0 0\n''') == '300'\nassert solution('''\n5 0 1 0 1 0\n''') == '1900'\nassert solution('''\n6 0 1 1 0 0\n''') == '2300'\nassert solution('''\n10 399 0 0 0 0\n''') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 0 1 0 0 0\n0\nSample Input 5:\n5 0 1 0 1 0\nSample Output 5:\n900\nSample Input 6:\n10 399 0 0 0 0\nSample Output 6:\n399''') == '900'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 0 1 0 0 0\n0\n0\n1\n0\n0\n''') == '300'\nassert solution('''5 0 1 0 1 0\n0\n0\n1\n0\n0\n''') == '1900'\nassert solution('''6 0 1 1 0 0\n0\n0\n1\n0\n0\n''') == '2300'\nassert solution('''10 399 0 0 0 0\n0\n0\n1\n0\n0\n0\n''') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\""
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 0 1 0 0 0\") == \"300\"\nassert solution(\n    \"5 0 1 0 1 0\") == \"1900\"\nassert solution(\n    \"6 0 1 1 0 0\") == \"2300\"\nassert solution(\n    \"10 399 0 0 0 0\") == \"399\"\nprint(\"You're all set!\")"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\""
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 0 1 0 1 0') == '1900'\nassert solution('4 0 1 0 0 0') == '300'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 399 0 0 0 0\n''') == '399'\nassert solution('''\n4 0 1 0 0 0\n''') == '300'\nassert solution('''\n6 0 1 1 0 0\n''') == '1900'\nassert solution('''\n10 399 0 0 0 0\n''') == '399'"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 10\n1 5\n1 4\n''') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\n\nassert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 10\n1 12\n1 13''') == '2'\nassert solution('''2 10\n1 5\n1 12\nSample Output 1:\n2\n\nSample Input 2:\n2 10\n1 5\n1 4\nSample Output 2:\n2\n\nSample Input 3:\n2 10\n1 5\n4 1\nSample Output 3:\n2\n\nSample Input 4:\n2 10\n1 5\n4 1\nSample Output 4:\n2\n''') == '2'\nprint('all tests passed')\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 10') == '2'\nassert solution('2 10') == '2'\nassert solution('2 10') == '2'\nassert solution('2 10') == '2'\nprint('all tests passed')\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 10') == '2'\nassert solution('2 10') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 10\\n1 12\\n1 13') == '2'\nassert solution('2 10\\n1 5\\n1 12') == '2'\nassert solution('2 10\\n1 5\\n4 1') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 10\n1 12\n1 13''') == '2'\nassert solution('''2 10\n1 5\n1 12\nSample Output 2:\n2\n\nSample Input 4:\n2 10\n1 5\n4 1\nSample Output 4:\n2''') == '2'"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 10') == '2'\nassert solution('2 10') == '2'\nassert solution('3 10') == '2'\nassert solution('4 10') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 10') == '2'\nassert solution('2 10') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10') == '2'\nassert solution('2 10') == '2'\nassert solution('1 10') == '2'"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\nassert solution('''\n4\n10 10 5\n10 20 1\n20 10 12\n20 20 8\n''') == '36.2842712475'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32'"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'IMPOSSIBLE'\nassert solution('2') == '28.9792305918'\nassert solution('3') == '36.283441407'\nassert solution('4') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28'\nassert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '36.2842712475'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32'\n\nprint(solution('''\n5\n1 1 2\n2 2 2\n3 3 4\n1 5 4\n4 3 6\n1 2 4\n1 3 6\n1 6 6\n'''))\n\nprint(solution('''\n11\n1 2 4\n2 3 3\n3 4 4\n3 4 4\n4 3 4\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9\n'''))\n\nprint(solution('''\n7\n3 3 4\n2 2 2\n4 4 4\n3 3 3\n3 4 4\n3 2 4\n4 4 4\n4 2 4\n5 5 5\n'''))\n\nprint(solution('''\n10\n4 4 -4\n6 1 1\n2 3 -3\n5 1 1\n3 2 -3\n7 3 4\n8 -5 5\n1 1 1\n3 2 2\n6 -6 6\n'''))\n\nprint(solution('''\n12\n3 2 2\n1 -2 -1\n2 1 2\n-1 3 2\n1 -3 2\n-1 -2 2\n-2 -1 2\n1 1 2\n'''))\n\nprint(solution('''\n15\n4 2 4\n1 3 4\n5 4 4\n2 4 2\n4 2 1\n4 3 2\n5 1 1\n1 5 4\n2 6 6\n3 4 4\n6 1 1\n6 3 4\n3 4 4\n5 3 4\n1 5 4\n3 3 3\n3 4 4\n3 2 4\n4 3 4\n4 1 4\n3 6 4\n'''))\n\nprint(solution('''\n3\n4 4\n5 1\n2 2\n3 1\n2 1\n2 2\n'''))\n\nprint(solution('''\n15\n2 2 2\n2 2 2\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n3 3 3\n2 4 4\n4 4 4\n3 3 3\n4 4 4\n4 4 4\n3 3 3\n3 3 3\n3 4 4\n4 4 4\n4 4 4\n'''))\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '36.2842712475'\nassert solution('8') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28'\nassert solution('''\n4\n10 10 5\n10 20 1\n20 10 12\n20 20 8\n''') == '36.2842712475'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32'\n\n'''\n    length = 0\n    if num_lights == 0:\n        return str(length)\n    if num_lights == 1:\n        return str(length) + \" \" + str(0)\n    for i in range(len(arr)):\n        if arr[i][0] + arr[i][1] >= len(arr[i][2]) and arr[i][0] + arr[i][1] <= len(arr[i][2]) + 1:\n            length += arr[i][0] + arr[i][1]\n        elif arr[i][1] + arr[i][0] >= len(arr[i][2]) and arr[i][1] + arr[i][0] <= len(arr[i][2]) + 1:\n            length += arr[i][1] + arr[i][0]\n        elif arr[i][0] + arr[i][1] < len(arr[i][2]) and arr[i][1] + arr[i][0] < len(arr[i][2]) and arr[i][2][arr[i][0] + arr[i][1]] == '#':\n            continue\n        else:\n            return str(length) + \" \" + str(0)\n    return str(length) + \" \" + str(0)\n\n'''"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n2 2 2\n2 2 4\n3 3 4\n4 2 2\n5 4 5\n''') == '28.980'\n\nassert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.980'\n\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '36.2842712475'\n\nassert solution('''\n8\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8\n''') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == '32.0'\nassert solution(\"2\") == 'IMPOSSIBLE'\n\n'''\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n2 3 1\n2 4 1\n1 2 3\nSample Input 5:\n4\n1 1 10\n2 2 10\n3 1 10\nSample Output 5:\nIMPOSSIBLE\n''') == '28.970562748'\nassert solution('''3\n2 2 2\n1 2 3\n2 2 2\nSample Input 6:\n4\n1 1 -5\n1 2 2\n1 3 -7\n1 4 -3\n2 2 3\n2 3 3\n2 4 -1\nSample Output 6:\n28.971472609\n''') == '36.2842712475'"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\nassert solution('''\n4\n10 10 5\n10 20 1\n20 10 12\n20 20 8\n''') == '36.2842712475'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32'"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '28.970562748'\n\n---"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '-1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\n\nassert solution('''3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\n\nassert solution('''3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n''') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 1, 9, 5],\n                [2, 2, 6, 8],\n                [4, 8, 9, 3]) == \"3\"\nassert solution([5, 2, 7, 10],\n                [7, 4, 4, 10],\n                [2, 4, 10, 8]) == \"1\"\nassert solution([2, 5, 7, 10],\n                [2, 5, 7, 7],\n                [5, 1, 7, 7]) == \"1\"\nprint(\"You're a smart cookie!\") if __name__ == \"__main__\" else None\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([\n    [1, 3, 9, 5],\n    [2, 2, 6, 8],\n    [4, 8, 9, 3]\n]) == \"3\"\n\nassert solution([\n    [5, 2, 7, 10],\n    [7, 4, 4, 10],\n    [2, 4, 10, 8]\n]) == \"1\"\n\nassert solution([\n    [-1, -2, -1, -1],\n    [-1, 2, -1, -1],\n    [-1, 4, -1, -1],\n    [-1, 8, -1, -1]\n]) == \"1\"\n\nassert solution([\n    [2, 2, 6, 8],\n    [2, 4, 10, 8],\n    [5, 2, 7, 10],\n    [4, 4, 10, 8],\n    [7, 4, 7, 7],\n    [8, 5, 7, 7]\n]) == \"4\""
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('1 3 9 5') == '3'\nassert solution('2 2 6 8') == '1'\nassert solution('4 8 9 3') == '1'\nassert solution('5 2 7 10') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\nassert solution('''\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '-1'"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"-\"\nassert solution(\"1234321\") == \"94708\"\nprint(solution(input()))\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '5'\nassert solution('100') == '99'\nassert solution('99999999999999999') == '988888000000'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n10\n55\n101\n1234321\n''') == '94708'\nassert solution('''1\n10\n55\n101\n12345678\n''') == '94708'\nassert solution('''1\n10\n55\n101\n12345678\n''') == '94708'\nassert solution('''1\n10\n55\n101\n12345678\n''') == '94708'\nassert solution('''1\n10\n55\n101\n12345678\n''') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('12321') == '94708'\nassert solution('12223') == '93'\nassert solution('33322111') == '5'\nassert solution('12233211') == '-1'\n\nimport io\nimport os\nimport sys"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"123456789\") == \"95\"\nassert solution(\"123\") == \"1\"\nassert solution(\"99\") == \"-1\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('123456789') == -1\n\nassert solution('123456789') == -1\n\nassert solution('12223') == 2\n\nassert solution('12321') == 0\n\nassert solution('33322111') == 1"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 7') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 0 0 0 3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1 2 0 0 5\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 2 0 0 4\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1 2 0 0 6\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '6'\nassert solution('1 2 0 0 3') == '6'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 2 0 0 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1 2 0 0 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1 2 0 0 6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n0 0 0 0 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n0 0 0 0 4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 1 0 1\n3 0 1 1\n''') == '4'\nassert solution('''\n2 2 1 0 1\n2 1 1 1\n''') == '4'\nassert solution('''\n1 2 1 0 1\n3 0 1 1\n''') == '5'\nassert solution('''\n1 2 1 0 1\n1 1 1 1\n''') == '5'\nassert solution('''\n1 1 1 1\n1 1 1 1\n''') == '5'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 0 0 0 3\"\n) == \"6\"\nassert solution(\n    \"1 2 0 0 5\"\n) == \"2\"\nassert solution(\n    \"1 2 0 0 4\"\n) == \"4\"\nassert solution(\n    \"1 2 0 0 6\"\n) == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 0 0 3') == '6'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 0 0 0 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1 2 0 0 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 2 0 0 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1 2 0 0 6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 0 0 3') == '6'\nassert solution('1 2 0 0 3') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nassert solution('5 3 0 0 6') == '0'\n\n\n\"\"\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''0.5 -5.301 3.098\n0.5 8 8\n0.5 -8 8''') == '-1.26167861 3.88425357'\nassert solution('''1.5 8 8\n1.5 8 8''') == '9.21068947 2.56226688'\nassert solution('''0.5 -8 8\n0.5 -8 8''') == '-4.36385220 9.46891588'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\""
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''0.5 -5.301 3.098\nSample Input 2:\n0.5 8 8\nSample Output 2:\n9.21068947 2.56226688\n\nSample Input 3:\n1 8 8\nSample Output 3:\n6.22375968 -0.31921472\n''') == '-1.26167861 3.88425357'"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0.5 -5.301 3.098\n''') == '-1.26167861 3.88425357'\nassert solution('''\n0.5 8 8\n''') == '9.21068947 2.56226688'\nassert solution('''\n1 8 8\n''') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''0.5 -5.301 3.098''') == '-1.26167861 3.88425357'\nassert solution('''0.5 8 8''') == '9.21068947 2.56226688'\nassert solution('''1 8 8''') == '6.22375968 -0.31921472'"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nassert solution(\"0.5 -8 8\") == \"-4.36385220 9.46891588\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\n1 2\n2 1\n''') == '1'\nassert solution('''\n4 5\n1 2\n1 3\n3 2\n2 4\n3 4\n''') == '1'\nassert solution('''\n2 3\n1 2\n2 3\n''') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\") == \"1\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n3 1\\n4 1\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\n1 2\n2 1\n''') == '1'\nassert solution('''3 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n1 3') == '1'\nassert solution('2 2\\n1 2') == '0'\nassert solution('3 3\\n1 2\\n2 3') == '1'\nassert solution('4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2\n2 3\n3 1''') == '1'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 4\n4 1\nSample Output 5:\n2\n4\n5\n''') == '2'\nassert solution('''4 5\n1 2\n2 3\n3 4\n4 1\nSample Output 6:\n0\n''') == '0'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == 'infinity'\nassert solution('''\n5 5 0 4\n0 1 1\n1 0 1\n1 2 1\n2 0 4\n2 3 1\n2 3 3\n''') == '11'\nprint('solution: OK')\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 0 3') == '11'\nassert solution('5 5 0 4') == 'infinity'\nassert solution('3 3 1 2') == '2'\nassert solution('4 3 0 4') == 'infinity'"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5 0 3\") == \"11\"\nassert solution(\"5 5 0 4\") == \"infinity\"\nassert solution(\"6 5 0 4 1\") == \"2\""
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == '2'\nassert solution('3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1\\nSample Output 3:') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == '11'\nassert solution('''\n5 5 0 4\n0 1 1\n1 0 1\n1 2 1\n2 0 4\n2 3 1\n2 3 3\n''') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n'''\n    ) == '11'\nassert solution(\n    '''\n5 5 0 4\n0 1 1\n1 0 1\n1 2 1\n2 0 4\n2 3 1\n2 3 3\n'''\n    ) == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 0 3') == '11'\nassert solution('5 5 0 4') == 'infinity'\nassert solution('3 3 1 2') == '2'\nassert solution('1 1 0 1') == '1'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5 0 3') == '11'\nassert solution('5 5 0 4') == 'infinity'\nassert solution('5 5 0 5') == 'infinity'"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n\"\"\"\n) == \"11\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 3\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"2 2 2 3\") == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 2 1 2\n2 1 2\n2 3 4\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3 3 1 1\n1 1\n2 2 3\n\"\"\") == \"18\"\nassert solution(\"\"\"\n3 3 1 1\n1 1\n2 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 3 2 1\n1 1\n2 2 3\n\"\"\") == \"12\""
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\n\nassert solution('''3 3 1 1\n1 1\n2 2 3\n''') == '0'\n\nassert solution('''3 2 2 3\n1 1\n2 2 3\n''') == '18'\n\nassert solution('''3 2 1 1\n1 1\n2 2 3\n''') == '12'\n\nassert solution('''4 1 2 1\n2 1 2\n2 3 4\n''') == '12'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\nassert solution('''\n3 3 1 1\n1 1\n2 2 3\n''') == '0'\nassert solution('''\n3 2 2 3\n1 1\n2 2 3\n''') == '18'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2 1 2 1') == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('3 2 2 3') == '18'\nassert solution('3 1 2 3') == '12'\nassert solution('1 2 1 1') == '2'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2 1 2 1\\n2 1 2\\n2 3 4') == '6'\nassert solution('3 3 1 1\\n1 1\\n2 2 3') == '0'\nassert solution('3 2 2 3\\n1 1\\n2 2 3') == '18'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2 1 2 1\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"3 2 2 3\") == \"18\"\nassert solution(\"3 1 2 3\") == \"12\"\nassert solution(\"3 1 1 2\") == \"0\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\nassert solution('''3 3 1 1\n1 1\n2 2 3\n''') == '0'\nassert solution('''3 2 2 3\n1 1\n2 2 3\n''') == '18'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2 1 2 1\") == \"6\"\nassert solution(\"3 3 1 1\") == \"18\"\nassert solution(\"3 2 2 3\") == \"0\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1000000 1\nSample Output 1:\n468559''') == '468559'\nassert solution('''1000000 5\nSample Output 2:\n49401''') == '49401'\nassert solution('''1000000 16\nSample Output 3:\n20''') == '20'\nassert solution('''9000000000000000000 62\nSample Output 4:\n1''') == '1'"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n100000 1\n''') == '468559'\nassert solution('''\n100000 5\n''') == '49401'\nassert solution('''\n100000 16\n''') == '20'\nassert solution('''\n9000000000000000000 62\n''') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()[:-1]\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1000000 1''') == '468559'\nassert solution('''1000000 5''') == '49401'\nassert solution('''1000000 16''') == '20'\nassert solution('''9000000000000000000 62''') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\""
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\nassert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\""
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2 9\n5 4 1\n\"\"\") == \"1\"\nassert solution(\"\"\"4 13\n2 2 2 2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n3\n1 2 3\n''') == '1'\nassert solution('''\n3\n4\n2 2 2 2\n''') == '1'\nassert solution('''\n5\n6\n5 4 1\n''') == '2'\nassert solution('''\n7\n8\n7 5 1 2 3 4 1\n''') == '5'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 9\n5 4 1\n''') == '1'\n\nassert solution('''\n4 13\n2 2 2 2\n''') == '3'\n\nassert solution('''\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 9\n5 4 1\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n4 13\n2 2 2 2\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n\"\"\") == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n1 2 3\n''') == '1'\nassert solution('''\n4 13\n2 2 2 2\n''') == '3'\nassert solution('''\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 9\n5 4 1\n''') == '1'\nassert solution('''4 13\n2 2 2 2\n''') == '3'\nassert solution('''18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'\nprint('all tests passed')"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\nassert solution(\"18 90\") == \"12\""
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n1''') == '0'\nassert solution('''2\n3''') == '3'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '5'\nassert solution('5') == '6'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '3'\nassert solution('5') == '5'"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n4 7 8\n''') == '3'\nassert solution('''\n5\n2 3 4 5 8\n''') == '5'\n\nprint(solution('''\n10\n8 1 2 1 1 2 1 1 2\n'''))\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n4 7 8''') == '3'\nassert solution('''5\n2 3 4 5 8''') == '5'\nassert solution('''7\n2 3 4 5 8 9 10''') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1\"\n    \"1\"\n    \"2\"\n    \"4\"\n    \"3\"\n    \"5\"\n    \"6\"\n    \"8\"\n    ) == \"5\"\nassert solution(\n    \"1\"\n    \"1\"\n    \"1\"\n    \"1\"\n    \"2\"\n    \"4\"\n    \"3\"\n    \"5\"\n    \"6\"\n    \"8\"\n    ) == \"0\"\nassert solution(\n    \"1\"\n    \"1\"\n    \"1\"\n    \"1\"\n    \"2\"\n    \"3\"\n    \"4\"\n    \"5\"\n    \"6\"\n    \"8\"\n    ) == \"3\"\nassert solution(\n    \"1\"\n    \"1\"\n    \"1\"\n    \"1\"\n    \"2\"\n    \"3\"\n    \"4\"\n    \"5\"\n    \"6\"\n    \"8\"\n    ) == \"6\""
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"37\") == \"75\"\nassert solution(\"123\") == \"87\"\nassert solution(\"123456789\") == \"987654321\"\nassert solution(\"123456789012345678901\") == \"9876543210987654321\"\nassert solution(\"12345678901234567890123\") == \"9876543210987654321\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('37') == '75'\nassert solution('48') == '85'\nassert solution('3748') == '11112'\nassert solution('354879') == '11112'\nassert solution('01') == '-1'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '3'\nassert solution('6') == '4'\nassert solution('1234') == '11112'\nassert solution('374848') == '75'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"17\""
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6\n123476544\n''') == '11112'\nassert solution('''11\n7\n9\n14\n''') == '-1'\nassert solution('''12\n5\n8\n''') == '-1'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1234') == '17'\nassert solution('149') == '17'\nassert solution('1000000') == '11112'"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"-1\"\nassert solution(\"1234\") == \"11112\"\nassert solution(\"1234567890\") == \"11112\"\nassert solution(\"123456789\") == \"11112\"\nassert solution(\"12345678\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\\\n6\n''') == '4'\nassert solution('''\\\n149\n''') == '17'\nassert solution('''\\\n123476544\n''') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nabc\nbca\ncab\naca\n\"\"\") == \"adcb\"\nassert solution(\"\"\"\nbab\nbca\ncab\naca\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''d 4\ncab\ncda\nccc\nbadca\n''') == 'adcb'\nassert solution('''c 4\nabc\nbca\ncab\naca\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('d 4\\nabc\\nbadca\\nade') == 'adcb'\nassert solution('c 4\\nabc\\nbadca\\nade') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb') == 'AMBIGUOUS'\n\"\"\"\n\n\nfrom collections import Counter\nimport re"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''d 4\ncab\ncda\nccc\nbadca''') == 'adcb'\nassert solution('''c 4\nabc\nbca\ncab\naca''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"d 4\ncab\ncda\nccc\nbadca\n\"\"\") == \"adcb\"\nassert solution(\"\"\"c 4\nabc\nbca\ncab\naca\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"f 2\ndea\ncfb\n\"\"\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('d 4\\ncab\\n') == 'adcb'\nassert solution('c 4\\nabc\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\n') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"IMPOSSIBLE\"\n\n\"\"\""
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nd 4\ncab\ncda\nccc\nbadca\n''') == 'adcb'\n\nassert solution('''\nc 4\nabc\nbca\ncab\naca\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''d 4\ncab\ncda\nccc\nbadca\n''') == 'adcb'\nassert solution('''f 2\ndea\ncfb\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''d 4\ncab\ncda\nccc\nbadca''') == 'adcb'\nassert solution('''c 4\nabc\nbca\ncab\naca''') == 'IMPOSSIBLE'\nassert solution('''f 2\ndea\ncfb''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3 3 3\"\n) == \"9\"\nassert solution(\n    \"10 20 0 0\"\n) == \"10\"\nassert solution(\n    \"100 20 543 12\"\n) == \"164\"\nassert solution(\n    \"100000000 100000000 100000000 1000000000 100000000\"\n) == \"16000000000000000\"\nassert solution(\n    \"3000000000000003 0 0\"\n) == \"3000000000000000\""
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3 3 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\nassert solution('''\n100 20 543 12\n''') == '164'\n\"\"\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3 3 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\nassert solution('''\n100 20 543 12\n''') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3 3 3\n''') == '9'\nassert solution('''10 20 0 0\n''') == '10'\nassert solution('''100 20 543 12\n''') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3 3 3\n''') == '9'\nassert solution('''10 20 0 0\n''') == '10'\nassert solution('''100 20 543 12\n''') == '164'''\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3 3 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\nassert solution('''\n100 20 543 12\n''') == '164'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\") == \"yes\"\nassert solution(\"4 3 3\") == \"no\"\nassert solution(\"3 2 3\") == \"no\"\nassert solution(\"6 3 3\") == \"no\""
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2 3') == 'yes'\nassert solution('3 2 3') == 'no'\nassert solution('4 3 3') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == 'yes'\nassert solution('4 2 3') == 'no'\nassert solution('3 2 3') == 'no'\nassert solution('4 3 3') == 'no'\nassert solution('3 4 3') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2 3\n1 1\n1 1\n1 0\n0 0\n0 -1\n''') == \"no\"\nassert solution('''\n5 3 3\n1 1\n0 1\n-1 0\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\nSample Output 3:\nno\n''') == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'yes'\nassert solution('''4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\n''') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2 3') == 'yes'\nassert solution('4 3 3') == 'no'"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0') == 'yes'\nassert solution('4 3 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0') == 'no'\nassert solution('4 4 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0') == 'no'\nassert solution('3 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12') == 'yes'"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0') == 'yes'\nassert solution('4 3 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\") == \"no\"\nassert solution(\"4 2 3\") == \"yes\"\nassert solution(\"3 2 4\") == \"no\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\nassert solution('555') == '1'\nassert solution('99999') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '1'\nassert solution('1234567890') == '1'\nassert solution('1234567891011121314151617181920') == '2'\nassert solution('1234567891011121314151617181920') == '2'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('652526') == 4\nassert solution('12121131221') == 7\nassert solution('123456789') == 1\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12121131221') == '7'\nassert solution('652526') == '4'\nassert solution('123456789') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\nprint('All test cases passed')\n\"\"\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n652526\n''') == '4'\nassert solution('''\n12121131221\n''') == '7'\nassert solution('''\n123456789\n''') == '1'"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\n\nassert solution('''\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\n\nassert solution('''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"24\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 3\\n1\\n1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\n    \"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\n\") == \"24\"\nassert solution(\n    \"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\n\") == \"800\""
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 3\n1\n1 2\n2 3\n1 3\n\"\"\"\n    ) == \"0\"\nassert solution(\n\"\"\"\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n\"\"\"\n    ) == \"24\"\nassert solution(\n\"\"\"\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n\"\"\"\n    ) == \"800\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1\") == \"0\"\nassert solution(\"4 4\\n24 10\\n1 3\\n2 3\\n2 4\\n1 4\\nSample Output 2:\") == \"24\"\nassert solution(\"6 8\\n100 500 300 75\\n1 3\\n1 4\\n3 6\\n4 5\\n3 5\\n4 6\\n2 5\\n2 6\\nSample Output 3:\") == \"800\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution(\n'''\n4 4\n24 10\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '24'\nassert solution(\n'''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3\n1\n1 2\n2 3\n1 3''') == '0'\nassert solution('''4 4\n24 10\n1 3\n2 3\n2 4\n1 4\nSample Output 2:\n24\n\nSample Input 3:\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\nSample Output 3:\n800''') == '2400'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 4\") == \"24\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4', 'First'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5', 'Second'\nassert solution('4\\n1 2 3 4') == '-1', 'Third'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == \"1 4\", \"Should be 1 4\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\", \"Should be 1 2 3 4 5\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"-1\", \"Should be -1\""
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) in [\"1 2 3 4 5\", \"-1\"]\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"-1\"\nassert solution(\"4\") == \"1 4\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1 4\"\nassert solution(\"5\") == \"-1\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"2\") == \"1 4\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 2 4') == '1 4'\nassert solution('5 1 2 3 4') == '1 2 3 4'\nassert solution('4 5 1 3 2') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '-1'\nassert solution('1 2 3 4') == '1 2 3 4'\nassert solution('4') == '1 2 3 4'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '1 4'\nassert solution('5') == '1 2 3 4 5'\nassert solution('3') == '-1'\nprint(solution(input()))"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 3 2 4\n''') == '1 4'\nassert solution('''\n5\n1 2 3 4 5\n''') == '1 2 3 4 5'\nassert solution('''\n4\n2 1 4 3\n''') == '-1'\nprint('All test cases passed!')"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '1 4'\nassert solution('5') == '1 2 3 4 5'\nassert solution('4') == '1 2 3 4'"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4') == '1'\nassert solution('3 3') == '1'\nassert solution('4 4') == '2'\n\n\"\"\""
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 6\\n.#####\\n#####.\") == \"5\"\nassert solution(\"4 8\\n.######\\n.######\\n..#..#..\\n\") == \"8\"\nassert solution(\"3 3\\n...\\n...\\n\") == \"1\""
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3\\n.#####\\n#####.\\n..#..#\\n') == '5'\nassert solution('3 3\\n.#####\\n#####.\\n..#..#\\n') == '1'\nassert solution('2 6\\n.#####\\n#####.\\n..#..#\\n') == '5'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n4\\n.######.\\n.######.\\n..#..#..\\n') == '1'\nassert solution('2\\n4\\n.######.\\n.######.\\n..#..#..\\n') == '5'\n\n'''\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"4 8\") == \"8\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n.#.\n...\n''') == '1'\nassert solution('''\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\n''') == '8'"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == \"1\"\n\nstdin = \"\"\"3 4\n...\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\n''') == \"8\"\nassert solution('''\n3 3\n...\n.#.\n...\nSample Output 3:\n1\n''') == \"1\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 8\n....\n....\n...#.\n...#.\n.####.\n.####.\n....''') == '8'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5 5\") == \"6\"\nassert solution(\"3 3 3\") == \"13\"\nassert solution(\"4 2 6 1 9 7 5 5 7 1 2 3 3\") == \"4 2 6 1 9 7 5 5 7 1 2 3 3\""
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 5\") == \"6\"\nassert solution(\"3 3 3\") == \"13\"\nassert solution(\"3 2 2\") == \"4 2 6 1 9 7 5 5 7 1 2 3 3\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4', 'First'\nassert solution() == '13', 'Second'\nassert solution() == '-1', 'Third'\n\n\"\"\""
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"1 1\"\nassert solution(\"2 5 5\") == \"5 5 5\"\nassert solution(\"4 4 4\") == \"4 4 4\"\nassert solution(\"2 2 2\") == \"2 2 2\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == '6'\n'''\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\") == \"6\"\nassert solution(\"2 5 5\") == \"12\"\nassert solution(\"4 4 4\") == \"13\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"./inputs/input_test1.txt\") == \"6\"\nassert solution(\"./inputs/input_test2.txt\") == \"19 12 2 18 5 5\"\nassert solution(\"./inputs/input_test3.txt\") == \"13\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('2 3 4\\n1 2\\n3 4\\n2 1') == '11\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 3 3\\n3 1 1\\n1 3 2\\n3 2 3') == '19 12 2 18 5 5\\n4 2 6 1 9 7 5 5 7 1 2 3 3'\n\nimport re\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6', 'Wrong answer for input: 4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1'\n\nassert solution('''\n3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13', 'Wrong answer for input: 3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\\n'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3 2\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2 1'\nprint(solution())\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5'\nassert solution('''\n4\n1\n5\n3\n6\n1\n2\n3\nSample Output 4:\n3 2\n''') == '1 0'\nassert solution('''\n4\n1\n5\n3\n6\n1\n2\n3\n''') == '3 2'\n\nassert solution('''\n2\n3\n4\n5\n''') == '0'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1 1\"\nassert solution(\"4\") == \"2 1\"\nassert solution(\"5\") == \"3 1\"\nassert solution(\"5\") == \"5 5\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"1 1\"\n\n---Input---\n\n\"\"\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '3 2'\nassert solution('4') == '1'\nassert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"5\") == \"5 1\"\nassert solution(\"4\") == \"1 5\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5 2\") == \"2 2\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '1 5'"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '2 1'\nassert solution('4') == '1 5'\nassert solution('3') == '1 2'\nassert solution('2') == '1 2'\nassert solution('1') == '1 1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n5\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5 2 3'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3') == '1'\nassert solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1', \"5\"\nassert solution('6') == '5', \"6\"\nassert solution('7') == '7', \"7\"\nassert solution('8') == '3', \"8\"\nassert solution('9') == '4', \"9\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n') == '1'\nassert solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\\n') == '5'\nassert solution('6\\n5 0\\n4 1\\n3 1\\n2 2\\n1 3\\n0 4\\n') == '5'"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '5'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n3 0\n3 1\n3 2\n3 3\n3 4''') == '1'\nassert solution('''5\n4 0\n3 1\n2 2\n1 3\n0 4''') == '5'\nassert solution('''6\n3 0\n1 1\n2 1\n1 3\n0 4\n5 1\nSample Output 3:\n5\n''') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1'\nassert solution('5') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '5'\nassert solution('''\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n''') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\n\nassert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '0'\n\nassert solution('''9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4\\n1\\n2\\n3\\n\"\nassert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == \"4\\n3\\n4\\n5\\n6\\n\""
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\nassert solution('''\n8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''\n9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 2 2\n1 3 1\n2 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''\n8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''\n8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '0'\nassert solution('''\n9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'\n\nassert solution('''\n3\n1 2 2\n1 3 1\n2 4 3\n''') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"10\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\nSample Output 1:\n4\n3\n4\n5\n6\n\nSample Output 2:\n0\n\nSample Output 3:\n5\n1\n2\n3\n6\n7\n''') == '5'\nassert solution('''9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\nSample Output 1:\n4\n3\n4\n5\n6\n7\n''') == '5'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2\nR10 V1 V2 V1 E\n''') == '6'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2\nV1 V2 V1 V1 V2\nSample Output 1:\n5\n''') == '5'\nassert solution('''2 1\nV1 V2 V1 V1 V2\nSample Output 2:\n6\n''') == '6'\nassert solution('''1 2\nR10 V1 V2 V1 E\nSample Output 3:\n30\n''') == '30'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n2 1\nV1 V2 V1 V1 V2\n''') == '6'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1 2\nV1 V2 V1 V1 V2\n\"\"\") == \"5\"\nassert solution(\"\"\"1 2\nR10 V1 V2 V1 E\n\"\"\") == \"30\"\nassert solution(\"\"\"1 1\nV1\n\"\"\") == \"1\"\nassert solution(\"\"\"5 1\nV1\n\"\"\") == \"1\"\nassert solution(\"\"\"1 2\nR10 V1 V2 V1 E\n\"\"\") == \"6\""
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"5\"\nassert solution(\"2 1\") == \"6\"\nassert solution(\"1 2\") == \"7\"\nprint(solution(input()))\n\"\"\"\nimport sys\nimport os\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\nV1 V2 V1 V1 V2') == '5'\nassert solution('2 1\\nV1 V2 V1 V1 V2') == '6'\nassert solution('1 2\\nR10 V1 V2 V1 E') == '30'\nassert solution('2 1\\nR10 V1 V2 V1 E') == '30'"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '30'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '4'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"5\"\nassert solution(\"1 2\") == \"6\"\nassert solution(\"2 1\") == \"30\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\nV1 V2 V1 V1 V2') == '5'\nassert solution('2 1\\nR10 V1 V2 V1 E') == '6'\nassert solution('2 2\\nV1 V2 V1 V1 V2') == '8'\nassert solution('4 3\\nV1 V2 V1 V1 V2') == '17'\nassert solution('6 4\\nR10 V1 V2 V1 V1 V2') == '21'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\""
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4') == '4'\nassert solution('1 2') == '2'\nassert solution('9 6') == 'impossible'\nassert solution('10 11') == 'impossible'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4') == '3'\nassert solution('4 1') == '1'\nassert solution('1 9') == '9'\nassert solution('7 6') == 'impossible'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n10 24\n\"\"\") == \"38\"\nassert solution(\n\"\"\"\n10 11\n\"\"\") == \"impossible\"\nassert solution(\n\"\"\"\n9 216\n\"\"\") == \"546\"\nassert solution(\n\"\"\"\n1414\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''5 1 0.333333 30\n6 1 0.666667 70\n2 4 0.666667 15\n1 2\n''') == '10.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 60 2 1') == '466.662'\nassert solution('3 4 2 1') == '10.00005'\nassert solution('0 2 0.25 8') == '2.0'\nassert solution('0 10') == '10.00005'\nassert solution('1 2') == '2.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 20 2 1\") == \"466.662\"\nassert solution(\"3 4 2 1\") == \"10.00005\"\nassert solution(\"3 4 1 0\") == \"2.0\""
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 12 1 1') == '1.9666', 'Expected: 1.9666'\nassert solution('6 12 2 1') == '4.8', 'Expected: 4.8'\nassert solution('6 12 3 1') == '2.4', 'Expected: 2.4'\nassert solution('10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10') == '55555.0', 'Expected: 55555.0'\nassert solution('9 12 1 0') == '0.0', 'Expected: 0.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''20 60 2 1\n5 15 0.3333\n22 60 0.6667\n0 10''') == '466.662'\nassert solution('''3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2''') == '10.00005'\nassert solution('''3 4 1 0\n0 2 0.25 8\nSample Output 3:\n2.0''') == '2.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n''') == '466.662'\nprint(solution('''\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n'''))\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '0.0002'\nassert solution('5 15 2 1') == '466.662'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 5 1\") == \"0.66666\"\nassert solution(\"2 1 0.75 0.75 0.75\") == \"1.0\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 4 2 1\") == \"10.00005\"\nassert solution(\"5 15 0.33333 30\") == \"466.662\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 20 2 1') == '466.662'\nassert solution('3 4 2 1') == '10.00005'\nassert solution('3 0.1 1 0.2') == '1.2'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n''') == '1.500000000000000'\nassert solution('''\n2\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\nassert solution('''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\nassert solution('''\n3\nblue red 1.0\nred pink 1.5\nblue green 1.0\n''') == '1.500000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1.500000000000000'\nassert solution('2') == '0.000000000000000'\nassert solution('4') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\nblue pink 1.0\\nred pink 1.5\\nblue red 1.0\\n') == '1.500000000000000'\nassert solution('2\\nblue red 1.0\\nred pink 1.5\\n') == '0.000000000000000'\nassert solution('4\\norange pink 1.9\\nyellow orange 1.9\\ngreen yellow 1.9\\nblue green 1.9\\n') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"3\") == \"1.500000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1.5\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\n\nassert solution('''\n2\nblue red 1.0\nred pink 1.5\n''') == '1.500000000000000'\n\nassert solution('''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\n\nimport sys\nimport io\nimport os\n\nsys.stdin = io.StringIO(os.environ['SOLUTION_INPUT'])\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1.500000000000000\"\nassert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nblue\\nred\\n') == '1.00000000000000'\nassert solution('2\\nblue\\nred\\n') == '0.000000000000000'\nassert solution('4\\nblue\\ngreen\\n') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '0.000000000000000'\nassert solution('2') == '0.000000000000000'\nassert solution('1') == '1.000000000000000'\nassert solution('3') == '1.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1.500000000000000\"\nassert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6''') == '180'\nassert solution('''3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 2:\n22''') == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1 0') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('2 3 2') == 'too many'\nassert solution('1 1 2') == 'too many'\nassert solution('1 1 3') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == 'too many'\nprint('OK')\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n5 4 1 2\n1 4 2 3 4\n2 4 1 2\n1 4 2 3 4\n2 4 1 2\nSample Output 4:\n23\n''') == '22'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1 1 1 0') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('3 1 2') == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 1 1 1') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('3 1 2') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 2:\n22\n''') == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 1 1 1 0') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('3 1 2') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n\"\"\") == \"180\"\n\nassert solution(\"\"\"\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n\"\"\") == \"22\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 8 5') == '20 20'\nassert solution('3 3 2') == '17 17'\nassert solution('1 1') == '1 1'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 8 5\\n...#....\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2') == '20 20'\nassert solution('6 8 5\\n...#....\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2') == '20 20'\nassert solution('6 8 5\\n#...#...#\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nr 7\\nd 2') == '-1 -1'\nassert solution('10 10 100\\n###\\n#.\\n#.\\n###\\n#.\\n###\\n#.\\n###\\n#.\\n###\\n#.\\n###\\n#.\\n###\\n#.\\n###\\n###') == '-1 -1'\n\nprint('all tests passed')"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 8 5\") == \"20 20\"\nassert solution(\"6 8 5\") == \"20 20\"\nassert solution(\"6 8 5\") == \"20 20\"\nassert solution(\"6 8 5\") == \"20 20\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) in [\"20 20\", \"-1 -1\"]"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2\") == \"17 17\"\nassert solution(\"6 8 5\") == \"20 20\"\nassert solution(\"6 8 5\") == \"20 20\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 3') == '20 20'\nassert solution('4 4 2') == '17 17'\nassert solution('6 6 5') == '20 20'\nassert solution('6 6 5') == '17 17'\nassert solution('6 6 5') == '17 17'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '20 20'\nassert solution() == '17 17'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\\n') == '20 20'\nassert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 2\\nright 2\\n') == '17 17'\nassert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nleft 4\\n') == '-1 -1'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == '300'\nassert solution('4') == 'impossible'\nassert solution('10') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '300'\nassert solution('30\\n2\\n2 20 35\\n2 88 200\\n') == '88'\nassert solution('1\\n1\\n0\\n1') == 'impossible'"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n3\n1 2 3 4\n2 5 7\n''') == '1'\nassert solution('''5\n3\n1 3 2 4\n2 4 3\n''') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n100 100\n2 40 65\n2 100 150\n2 300 320\n''') == '88'\nassert solution('''\n100 100\n2 40 65\n2 100 150\n2 300 320\n''') == '88'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '3\\n3\\n2 40 65\\n2 100 150\\n2 300 320'\n) == '300'\nassert solution(\n    '10\\n3\\n2 40 65\\n2 100 150\\n2 300 320'\n) == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\n\nassert solution('''\n2\n2\n2 40 65\n2 100 150\n2 300 320\n''') == '300'\n\nassert solution('''\n10\n3\n2 40 65\n2 100 150\n2 300 320\n''') == '320'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('371') == 'impossible'\nassert solution('310') == '300'\nassert solution('90') == '88'"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3\\n'\n    '2\\n'\n    '2 40 65\\n'\n    '2 100 150\\n'\n    '2 300 320\\n'\n) == 'impossible'\nassert solution(\n    '4\\n'\n    '3\\n'\n    '2 40 65\\n'\n    '2 100 150\\n'\n    '2 300 320\\n'\n    '3 40 60\\n'\n    '4 40 50\\n'\n    '3 20 35\\n'\n    '3 88 200\\n'\n) == '88'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"impossible\"\nassert solution_a(0) == \"impossible\"\n\nimport io\nimport os\nimport sys\n\nfrom operator import xor\nfrom typing import List\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"....\\n..#.\\n#.#.\\n....\") == \"can fold\"\nassert solution(\"#....\\n#.#.#\\n##..#\\n.###.\") == \"cannot fold\"\nassert solution(\"##.#\\n##.#\\n##.#\\n##.#\") == \"can fold\"\nassert solution(\"##.##\\n##.##\\n##.##\\n##.##\") == \"can fold\"\nassert solution(\"##..#\\n##...\\n##.##\\n##.##\") == \"cannot fold\""
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n......\n......\n######\n......\n......\n......\n''') == 'cannot fold'\nassert solution('''\n..##..\n...#..\n..##..\n...#..\n......\n......\n''') == 'can fold'\nassert solution('''\n......\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''#\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"##..#.\") == \"can fold\"\nassert solution(\"#....\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''.....\n...#..\n..##..\n...#..\n......''') == 'can fold'\nassert solution('''.....\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('##.#.#\\n###.#.\\n#.##.##\\n.######') == \"can fold\"\nassert solution('..##..\\n#..#.#\\n#.##..#\\n....#..') == \"cannot fold\"\nassert solution('..#..#\\n.##.##.\\n##...#\\n######.\\n.####.##') == \"can fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"......\\n......\\n######\\n......\\n......\\n......\\n\") == \"can fold\"\nassert solution(\"......\\n#.....\\n#.....\\n#.....\\n......\\n......\\n\") == \"cannot fold\"\nassert solution(\"......\\n...#..\\n...#..\\n...#..\\n......\\n......\\n\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"......#.#.#..#....#..#....#.#.....#......#......#......#..........#............#...........#..#.##..##..##..#.....#.......\") == \"cannot fold\"\nassert solution(\"#....##..##..#..###..........#...........#..#.##.#.##........###...#.##...##.##...#.##..##..##..#..##..##..#.....#.......\") == \"can fold\"\nassert solution
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('###.##\\n######\\n##.###\\n##...#\\n##.###\\n##.###\\n######\\n###.##\\n') == \"can fold\"\nassert solution('#..#.\\n#.#.##\\n#..#.#\\n#.##..\\n#.##.#\\n#...##\\n#..#.#\\n#.#...\\n') == \"cannot fold\""
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n......\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aabcdefffg\") == \"abcdefffg\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n\"\"\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nThe quick brown fox jumps over the lazy dog\n''') == 'over'\nassert solution('''\nI am home\n''') == 'home'\nassert solution('''\nAbc\nabc\naabc\nabc\nabca\nabc\n''') == 'abc'\nassert solution('''\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\naaaa\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\""
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    'abcdefgabc'\n    ) == 'abc'\n\nassert solution(\n    'abcbabcba'\n    ) == 'abcba'\n\nassert solution(\n    'aaaa'\n    ) == 'aaa'\n\"\"\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('a ab c') == ''\nassert solution('a abc') == 'a'\nassert solution('abcbabcba') == 'abcba'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\nprint(solution(input()))\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n1 4\n2 5\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n2\n1 4\n2 10005\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n3\n1 4\n2 10\n0 15\n\"\"\") == \"4\""
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '6'\nassert solution('4') == '10'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 4\n2 5\n''') == '4'\nassert solution('''\n2\n1 4\n2 10005\n0 15\n''') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 4\n2 5\n''') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '4', 'First'\nassert solution('2 1') == '4', 'Second'\nassert solution('3 1') == '3', 'Third'\n\n\"\"\""
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 4\n2 5\n0 15\n''') == '4'\nassert solution('''\n3\n1 4\n2 10005\n0 15\n''') == '6''')\n\nassert solution('''\n1 10\n1 11\n0 10\n''') == '6''')"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 4\\n2 5\\n0 15\") == \"4\"\nassert solution(\"2 4\\n2 10005\\n0 15\") == \"6\"\n\nprint(solution(input()))\n\n'''\n\nimport math"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 5\n5 9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2 1\n3 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 2\n3 4\n3 5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7') == '2'\nassert solution('3') == '3'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 2 3 4 4 8 12 24') == '2'\nassert solution('3 7 7 7') == '3'\nassert solution('5 1 2 3 2 1') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n2 3 4 4 8\n''') == '2'\nassert solution('''\n7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''\n3\n7 7 7\n''') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n7\n2 3 4 4 8 12 24\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n7 7 7\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 2 3 2 1\n\"\"\") == \"0\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''\n3\n7 7 7\n''') == '0'\nassert solution('''\n5\n1 2 3 2 1\n''') == '1'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\n7 2 3\n\n\"\"\"\n) == \"2\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"2\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '0'\nassert solution('7') == '2'\nassert solution('3') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\") == \"3\"\nassert solution(\"1 2 1\\nGS\") == \"1\"\nassert solution(\"1 2 10\\nS#\\n#G\") == \"-1\""
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('2 2 10') == '2'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5 4\") == \"3\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"2 2 10\") == \"1\""
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == \"3\"\nassert solution('2 1 2\\nGS\\n') == \"1\"\nassert solution('2 2 1\\nGS\\n') == \"1\"\nassert solution('2 2 1\\nGS\\n') == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 5 4\nS#.F.\n.MFMG\n''') == '3'\nassert solution('''\n2 2 10\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 5 4\nS#.F.\n.MFMG\n''') == '3', 'Sample Test Case 1'\nassert solution('''\n1 2 1\nGS\n''') == '1', 'Sample Test Case 2'\nassert solution('''\n2 2 10\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == '3'\nassert solution('1 2 1\\nGS\\n') == '1'\nassert solution('1 2 1\\nS#\\n#G\\n') == '-1'\nprint('Almost done!')"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 5 4\nS#.F.\n.MFMG\n''') == '3'\nassert solution('''\n2 5 4\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(samples[0]) == '3'\nassert solution(samples[1]) == '1'\nassert solution(samples[2]) == '-1'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 5 4\") == \"3\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"2 2 10\") == \"1\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"2\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sample_input_1) == \"1\", \"First Test\"\nassert solution(sample_input_2) == \"1\", \"Second Test\"\nassert solution(sample_input_3) == \"2\", \"Third Test\""
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1'\nassert solution('3 7') == '1'\nassert solution('3 8') == '2'\nassert solution('3 9') == '2'\nassert solution('3 10') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"R\") == \"1\"\nassert solution(\"RRD\") == \"1\"\nassert solution(\"RRRDRR\") == \"1\"\nassert solution(\"RDRRDRR\") == \"2\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n.S..\n.G..\n..G\n''') == '1', 'First'\nassert solution('''\n3 7\n.......\n.G.##S.\n.......\nLDLDLLDR\n''') == '1', 'Second'\nassert solution('''\n3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '2', 'Third'\nassert solution('''\n3 7\nS..\n.G..\n..G\n''') == '0', 'Fourth'\nassert solution('''\n3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '0', 'Fifth'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(s) == 1\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\nS..\n.#.\n..G\nDRRDD\n''') == '1'\nassert solution('''\n3 7\n.......\n.G.##S.\n.......\nLDLDLLDR\n''') == '1'\nassert solution('''\n3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\nS..\n.#.\n..G\nDRRDD\n''') == '1'\nassert solution('''\n3 7\n.......\n.G.#.S.\n.......\nLDLDLLDR\n''') == '1'\nassert solution('''\n3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDD\") == \"1\"\nassert solution(\"3 7\\nS.G.#.\\n.G.##S\\n..##.\\n...G.\") == \"2\"\nassert solution(\"3 3\\nS..\\n.#.\\n..G\\nDRRDD\") == \"1\""
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('\\n'.join(['10','2','3'])) == '\\n'.join(['20','4','5'])\nassert solution('\\n'.join(['1000000000','0','0'])) == '\\n'.join(['100020000','0','0'])\nassert solution('\\n'.join(['1000000000','1000000000','0'])) == '\\n'.join(['1000000000','1000000000','0'])\nassert solution('\\n'.join(['1000000000','0','1000000000'])) == '\\n'.join(['1000000000','0','1000000000'])\nassert solution('\\n'.join(['1000000000','0','0','1000000000'])) == '\\n'.join(['1000000000','0','0','1000000000'])\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == \"1000200 799\"\nassert solution(sample_input_2) == \"uncertain\"\nassert solution(sample_input_3) == \"impossible\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'uncertain'\nassert solution('1') == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\n-10 0 100\n-100 -10 200\n''') == '100100'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"1000200 799\"\nassert solution(\"\"\"\n2\n100 0 100\n0 200 199\n\"\"\") == \"uncertain\"\nassert solution(\"\"\"\n2\n100 0 100\n0 200 199\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\nassert solution('''\n2\n100 0 100\n0 200 199\n''') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1000200 799'\nassert solution('2') == 'uncertain'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n100 0 101\n0 200 199\n''') == '1000200 799'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n4 7') == '2\\n1\\n'\nassert solution('2\\n4 7\\n9 8') == '2\\n1\\n'\nassert solution('2\\n4 7\\n14 17') == '2\\n1\\n'\nassert solution('2\\n4 7\\n19 18') == '2\\n1\\n'\nassert solution('2\\n4 8') =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\\n2\\n3\\n4\\n5\\n6\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n4 7\n9 8\n14 17\n19 18\n''') == '2'\nassert solution('''\n2\n4 7\n14 17\n9 8\n19 18\n''') == '1'\n'''\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('4 7') == '2'\nassert solution('4 7') == '1'\nassert solution('4 7') == '2'\nassert solution('4 7') == '1'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('2') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n4 7\\n9 8\\n14 17') == '2'\nassert solution('3\\n4 7\\n9 8\\n14 17') == '1'\nassert solution('3\\n4 7\\n9 8\\n14 17') =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n4 7\n9 8\n14 17\n19 18\n''') == '2 1'\nassert solution('''2\n4 7\n9 8\n14 17\n19 18\n''') == '1 2'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"syntax error\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '2',\n    '4 7',\n    '9 8',\n    '14 17',\n    '19 18',\n    '14 18',\n) == '2 1'\nassert solution(\n    '3',\n    '4 7',\n    '14 17',\n    '9 8',\n    '19 18',\n    '14 18',\n) =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n4 7\n9 8\n''') == '2'\n\nassert solution('''\n2\n4 7\n9 8\n''') == '1'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\nassert solution('160 _ _ 136 _ _ _ _ 170\\n_ _ _ _ _ _ _ 85 63 153\\n') == '8640'\nassert solution('_ 9 1 _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n') =='many'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\") == \"1\"\nassert solution(\"_ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\") == \"8640\"\nassert solution(\"_ _ _ _ _ _ _ 85 63 153\") == \"many\"\n\n'''\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81') == '1'\nassert solution('_ 40 _ _ _ 12 60 _ 90 _') == '1'\nassert solution('160 _ _ 136 _ _ _ _ 170') == '8640'\nassert solution('_ _ _ _ _ _ _ 85 63 153') == '8640'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\") == \"1\"\nassert solution(\"_ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ 170\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"_ 90 22 _ 6 _ _ _ _ 81\\n\"\n    \"_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\n    \"85 55 _ 99 51 _ _ _ _ _\\n\"\n    \"_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\n    \"160 _ _ 136 _ _ _ _ _ 170\\n\"\n    \"_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n''') == \"1\"\nassert solution('''\n85 55 _ 99 51 _ _ _ _ _\n_ _ _ _ _ _ _ 85 63 153\n''') == \"1\"\nassert solution('''\n160 _ _ 136 _ _ _ _ _ 170\n_ _ _ _ 120 _ _ 144 _ _\n''') == \"8640\"\nassert solution('''\n_ 0 _ _ 0 _ _ _ _ _\n_ _ _ _ _ _ _ 0 _ _\n''') == \"many\"\nassert solution('''\n_ 0 _ 0 0\n_ 0 _ 0 0\n''') == \"many\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n''') == '1'\nassert solution('''\n160 _ _ 136 _ _ _ _ _ 170\n_ _ _ _ 120 _ _ 144 _ _\n''') == '8640'"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ 170\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(t) == '2'\nassert solution(t) == '8'\nprint('Congratulations!')\n'''\n\n\n\nimport math\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\nassert solution('''\n10\n1 2\n2 3\n2 4\n1 5\n3 6\n2 7\n7 8\n5 9\n5 10\n''') == '24'"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2\n1 3\n''') == '2'\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\nprint('all tests passed')\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2\n1 3\n''') == '2'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"24\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\nassert solution('''\n10\n2 1\n1 5\n3 1\n4 3\n''') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"2\"\nassert solution(\"5\\n2 1\\n1 5\\n3 1\\n4 3\") == \"8\"\nassert solution(\"10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10\") == \"24\""
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '3'\nassert solution('apples') == '0'"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\nassert solution('apples') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"3\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"apples\") == \"0\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nsecretmessage\nboot\n''') == 'essa'\n\nassert solution('''\ntreetreetreetree\nwood\n''') == '3'\n\nassert solution('''\noranges\napples\n''') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '3'\nassert solution('oranges') == '0'\nprint('\"{}\" passed all tests.'.format(solution))\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\nprint(solution(''))\n\nassert solution('') == ''\n\nprint(solution('m'))\n\nassert solution('m') == ''\n\nprint(solution('d'))\n\nassert solution('d') == ''\n\nprint(solution('r'))\n\nassert solution('r') == ''\n\nprint(solution('o'))"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(open(\"input.txt\").read().strip()) == \"1\"\nassert solution(open(\"input.txt\").read().strip()) == \"0\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('treetreetreetree') == '3'\n\nassert solution('boot') == '1'\n\nassert solution('apples') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('oranges') == '0'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n<<<\n####\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '4'\nassert solution('5') == '2'"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\nassert solution('3') == '1'\nassert solution('1') == '0'\nprint('You passed all the tests!')\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('5') == '1'\nassert solution('4') == '4'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == '2'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n<^>') == '2'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"4<>\") == \"2\"\nassert solution(\"<>R^<>\") == \"3\"\nassert solution(\"<>^<>\") == \"3\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n>^<\\n####\\n#.R#\\n#..#\\n####\\n\") == \"4\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('2') == '1'\nassert solution('5') == '3'\nassert solution('3') == '1'"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2''') == '3'\nassert solution('''3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1''') == '6'\nassert solution('''3\n3 1 3 2 1 2 3\n3 1 3 2 1 2 3''') == '8'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\nassert solution('''\n2\n7 0 0 20 10 3 0 10\n10 1 0 2 5 2 2 7\n''') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('5') == '9'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\nassert solution('''\n2\n7 0 0 20 10 3 0 10\n10 1 0 2 5 2 2 7\n''') == '11'\n\nassert solution('''\n\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nprint('all tests passed')\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '6'\nprint('all tests passed')\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\nassert solution('''\n2\n7 0 0 20 10 3 0 10\n10 1 0 2 5 2 2 7\n''') == '11'"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2''') == '3'\nassert solution('''3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1''') == '6'\nprint(solution('''3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1'''))\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"163.5274740179\"\nprint(solution(open(\"input.txt\")))\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == '168.7916512460', \"First example\"\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\n''') == '163.5274740179', \"Second example\"\nassert solution('''0.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0\n''') == '3.7320508076', \"Third example\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"40.0 0.0 0.0 0.0\") == \"163.5274740179\"\nassert solution(\"5.0 20.0 5.0 170.0\") == \"163.5274740179\"\nassert solution(\"95.0 0.0 95.0 80.0\") == \"163.5274740179\"\nassert solution(\"0.0 1.0 4.0 1.0\") == \"3.7320508076\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == \"168.7916512460\"\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0''') == \"163.5274740179\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"0.0 1.0 4.0 1.0\") == \"3.7320508076\"\nassert solution(\"40.0 0.0 0.0 0.0\") == \"163.5274740179\""
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == \"168.7916512460\", \"First example\"\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0''') == \"163.5274740179\", \"Second example\"\nassert solution('''1.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0\n''') == \"3.7320508076\", \"Third example\""
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"163.5274740179\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == \"168.7916512460\"\nassert solution('60.0 0.0 50.0 170.0') == \"163.5274740179\"\nassert solution('0.0 1.0 4.0 1.0') == \"3.7320508076\""
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n''') == '168.7916512460'\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\n''') == '163.5274740179'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == \"168.7916512460\"\nassert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == \"163.5274740179\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\n'''\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 5 3\n''') == 'rarity'\nassert solution('''\n9 8 1\n''') == 'canterlot'\nassert solution('''\n5 3 5\n''') =='madam'\n'''\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\n\"\"\"\n\n\nclass Solution:\n    def solve(self, N, K, P):\n        def is_palindrome(string):\n            if len(string) == 1:\n                return True\n            if string[0]!= string[-1]:\n                return False\n            return is_palindrome(string[1:-1])\n        left = 0\n        right = N - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if is_palindrome(string[mid]) and string[mid + 1:mid + P + 1] in string[mid + 1:mid + P + 2]:\n                return string[:mid] + string[mid + P + 1:]\n            if string[mid] == string[mid + 1]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return 'IMPOSSIBLE'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"rarity\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 5 3\n        rarity''') == 'rarity'\nassert solution('''6 1 1\n        rarity''') == 'canterlot'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 5 3\n''') == 'rarity'\nassert solution('''\n9 8 1\n''') == 'canterlot'\n'''\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\""
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([6, 5, 3]) == 'rarity'\nassert solution([9, 8, 1]) == 'canterlot'\nassert solution([5, 3, 5]) =='madam'\n\n---Input---\nstdin = [\"6\", \"5\", \"3\"]\n\n---Output---\nrarity\n\n---Input---\nstdin = [\"9\", \"8\", \"1\"]\n\n---Output---\ncanterlot\n\n---Input---\nstdin = [\"5\", \"3\", \"5\"]\n\n---Output---\nmadam\n\n\"\"\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"blue\") == \"Blue\"\nassert solution(\"leaves\") == \"Leaves\"\nassert solution(\"glowing in autumn sun\") == \"Glowing in autumn sun\"\nassert solution(\"who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International contest- motivation high Programmers have fun!\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"Blue Ridge\nmountain road.\nLeaves, glowing in autumn sun, fall in Virginia.\n\"\"\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\n\nassert solution(\"\"\"Who would know if we had too few syllables?\n\"\"\") == \"Who would know if we had too few syllables?\"\n\nassert solution(\"\"\"International contest-\nmotivation high Programmers have fun!.\n\"\"\") == \"International contest-\\nmotivation high Programmers have fun!.\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"Blue Ridge mountain road.\") == \"Blue Ridge mountain road.\"\nassert solution(\"Leaves, glowing in autumn sun, fall in Virginia.\") == \"Leaves, glowing in autumn sun, fall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\n\nstdin = 'The quick brown fox jumps over the lazy dog.'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia. ') == \\\n    'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('Who would know if we had too few syllables? ') == \\\n    'Who would know if we had too few syllables? '\nassert solution('International contest- motivation high Programmers have fun!. ') == \\\n    'International contest- motivation high\\nProgrammers have fun!.'"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nprint(solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.'))\nassert solution('who would know if we had too few syllables?') == 'who would know if we had too few syllables?'\nprint(solution('who would know if we had too few syllables?'))\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest-\\nmotivation high Programmers have fun!.\nprint(solution('International contest- motivation high Programmers have fun!. '))\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nLeaves, glowing in autumn sun,\nfall in Virginia.\n''') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nprint(solution('''\nWho would know if we had too few syllables?\n'''))\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!. \") == \"International contest-\\nmotivation high Programmers have fun!.\"\nprint(solution(input()))\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\nThoreTiemann\\nThoreHusfeldt') == 'ThoreH'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nThoreTiemann\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreHusfeldt\nThoreHusfeldter\nThoreH"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    ThoreTiemann\n    ThoreHusfeldt\n    ThoreHusfeldter\n    ThoreHusfeldt\n    \"\"\"\n) == \"Thore is awesome\"\nassert solution(\n    \"\"\"\n    ThoreHusfeldter\n    ThoreHusfeldt\n    ThoreHusfeldt\n    ThoreHusfeldt\n    \"\"\"\n) == \"Thore sucks\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Thore sucks\"\nprint(solution(stdin))"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\nThoreTiemann\nThoreHusfeldt\nThoreHusfeldter''') == 'Thore sucks'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\nThoreTiemann\nThoreHusfeldt\n''') == 'ThoreHusfeldt'"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'ThoreH'\nassert solution('2') == 'Thore sucks'\nassert solution('3') == 'Thore sucks'\nassert solution('4') == 'Thore is awesome'\nassert solution('5') == 'Thore is awesome'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Thore is awesome\"\nassert solution(\"2\") == \"Thore sucks\"\nassert solution(\"3\") == \"Thore is awesome\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"ThoreH\"\nassert solution(\"2\") == \"Thore is awesome\"\nassert solution(\"2\") == \"Thore sucks\"\nprint(solution(input()))\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"Thore sucks\"\nprint(solution(input()))\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == \"33\"\nassert solution(solution.__doc__) == \"33\"\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n\n    def __init__(self):\n        self.matrix = []\n\n    def inputMatrix(self):\n        self.matrix = []\n        row = int(input())\n        for _ in range(row):\n            self.matrix.append(input().split(' '))\n\n    def getMatrix(self):\n        return self.matrix\n\n    def solution(self):\n        ans = 0\n        for row in range(len(self.matrix)):\n            for col in range(len(self.matrix[0])):\n                if row == 0:\n                    if self.matrix[row][col] == 'L':\n                        ans += 2*int(self.matrix[row+1][col])\n                    elif self.matrix[row][col] == 'R':\n                        ans += 2*int(self.matrix[row+1][col+1])\n                elif col == 0:\n                    if self.matrix[row][col] == 'L':\n                        ans += int(self.matrix[row][col+1])\n                    elif self.matrix[row][col] == 'R':\n                        ans += int(self.matrix[row-1][col+1])\n                else:\n                    if self.matrix[row][col] == 'L':\n                        ans += int(self.matrix[row][col-1])\n                    elif self.matrix[row][col] == 'R':\n                        ans += int(self.matrix[row][col+1])\n        return str(ans)\n\n    def __str__(self):\n        return self.solution()\n\n\nclass Test(unittest.TestCase):\n    def setUp(self) -> None:\n        s = Solution()\n        s.inputMatrix()\n        self.matrix = s.getMatrix()\n\n    def test_ans(self):\n        ans = self.matrix\n        s = Solution()\n        assert s.solution() == ans\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"L*R\") == \"25\"\nassert solution(\"L*R*L\") == \"11\"\nassert solution(\"L*P*R\") == \"15\"\nassert solution(\"L*P*R*L\") == \"11\"\nassert solution(\"**\") == \"33\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('L*R') == '25'\nassert solution('P*P') == '6'\nassert solution('L*R*L*R') == '33'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\nprint('all tests passed')\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\n\n---\n\n*** What is it?\nThe following definition gives you a principle of the *Tree Walk*. \n\n- A walk is a sequence of steps where each step is one of the following:\n    * (a) Jump to the left child;\n    * (b) Jump to the right child;\n    * (c) Rest.\n- You can use either (a) or (b) to jump, but not both.\n\n- For each step, you can either move by 1 or by 2, but not both.\n\n- In the binary tree, the root is labeled with 1, and children of each node are labeled with twice the value of the node.\n\n- You can start at any node, not just the root, and you can follow any of the above steps, but cannot go out of the tree.\n\n- Each step takes 1 second to move and each second gives you a pause of 10 seconds.\n\n- For the tree,\n    - The root node (1) is labeled with 1, and the left child (2) is labeled with 2, and the right child (3) is labeled with 3.\n    - The left child (2) is labeled with 2, and the right child (3) is labeled with 3.\n    - The right child (3) is labeled with 3, and the left child (2) is labeled with 2.\n\n- Each jump takes 1 second to move and each second gives you a pause of 10 seconds.\n\n- For the tree, the left child of the root node (1) is labeled with 1, and the right child of the root node (1) is labeled with 2.\n\n- For the tree, the left child of the left child (2) is labeled with 2, and the right child of the right child (3) is labeled with 3.\n\n- For the tree, the right child of the left child (2) is labeled with 2, and the left child of the right child (3) is labeled with 3.\n\n- Each pause takes 1 second to move and each second gives you a pause of 10 seconds.\n\n- For the tree, the left child of the left child (2) is labeled with 2, and the right child of the right child (3) is labeled with 3.\n\n- For the tree, the right child of the left child (2) is labeled with 2, and the left child of the right child (3) is labeled with 3.\n\n- For the tree, the left child of the right child (3) is labeled with 3, and the right child of the left child (2) is labeled with 2.\n\n- The jump (2) is repeated twice, so you can move twice and the pause for each step.\n\n- The left child of the left child (2) is labeled with 2, and the right child of the right child (3) is labeled with 3.\n\n- You can repeat these steps 1, 2, 2, 3, 4, 4, 4, 3, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\nprint('all tests passed')\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''P*P\nL*R\nP*P''') == '6'\nassert solution('''P*P\nL*R\nP*P''') == '25'\nassert solution('''P*P\nP*P''') == '33'\nassert solution('''P*P\n*P''') == '33'\nassert solution('''P*P\nP*P''') == '6'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\nherp is derp') == 'yes', \"Should return 'yes'\"\nassert solution('3\\noskar not lukas') == 'wait what?', \"Should return 'wait what?'\"\nassert solution('4\\ntherp is derp') == 'wait what?', \"Should return 'wait what?'\"\nassert solution('5\\nherp is derp') == 'wait what?', \"Should return 'wait what?'\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\noskar not lukas\noskar is poptart\nlukas is smart\n''') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n' 'herp is derp\\n' 'derp is herp\\n' 'herp is herp\\n' 'derp is derp') == 'yes'\nassert solution('3\\n' 'oskar not lukas\\n' 'oskar is poptart\\n' 'lukas is smart\\n') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n3\nherp is derp\nderp is herp\nherp is herp\n'''\n) == 'yes'\nassert solution(\n'''\n2\noskar not lukas\noskar is poptart\nlukas is smart\n'''\n) == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\nherp is derp\nderp is herp\nherp is herp\n\"\"\") == \"yes\"\nassert solution(\"\"\"\n4\noskar not lukas\noskar is poptart\nlukas is smart\nlukas is smart\n\"\"\") == \"wait what?\"\nassert solution(\"\"\"\n1\nmoo not foo\n\"\"\") == \"yes\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\noskar not lukas\noskar is poptart\nlukas is smart\n''') == 'wait what?'\nassert solution('''\n1\nmoo not foo\n''') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\\n') == 'yes'\nassert solution('3\\noskar not lukas\\noskar is poptart\\nlukas is smart\\n') == 'wait what?'\nassert solution('2\\nherp is derp\\nherp is herp\\nherp is herp\\nherp is herp\\n') == 'yes'\nassert solution('1\\nmoo not foo\\nmoo is poptart\\nmoo is smart\\n') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''oskar not lukas\nlukas is smart''') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == 'wait what?'\nassert solution('4') == 'yes'\nassert solution('5') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\") == \"yes\"\nassert solution(\"2\\noskar not lukas\\noskar is poptart\\nukas is smart\\n\") == \"wait what?\"\nassert solution(\"3\\nmoo not foo\\n\") == \"yes\"\nassert solution(\"4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\\n\") == \"wait what?\"\nassert solution(\"5\\n\") == \"wait what?\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\nACA\nACM\nACM''') == '4'\n\"\"\"\nThis function has a single parameter:\nstdin: a string consisting of lines of nucleotide sequences.\nYour solution should return a single string consisting of the number of nucleotide sequences found in the fossil record that participate in the first evolutionary path and the number of nucleotide sequences found in the fossil record that participate in the second evolutionary path. The genomic sequences in the fossil record are arranged in chronological order.\n\nFor the first example, the output should be \"4 4\". The first line is the number of nucleotide sequences in the fossil record that participate in the first evolutionary path. The second line is the number of nucleotide sequences in the fossil record that participate in the second evolutionary path.\n\nFor the second example, the output should be \"impossible\".\n\nFor the third example, the output should be \"3 3\". The genomic sequences in the fossil record are arranged in chronological order.\n\nThe genome of the single-nucleotide species that currently lives on the planet is AACCMMAA. Each sequence is in the following format: aaaacccc\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n\"\"\") == \"1 4\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'impossible'\nassert solution(input_string=\"\"\"\n5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n\"\"\") == '1 4'\n\nassert solution(input_string=\"\"\"\n3\nACMA\nACM\nACA\nAMA\n\"\"\") == 'impossible'\n\nassert solution(input_string=\"\"\"\n1\nAM\nMA\n\"\"\") == 'impossible'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\nAACCMMAA\\nACA\\nMM') == '1 4\\nMM\\nA\\nAA\\nACA'\nassert solution('1\\nAACCMMAA') == '1 4\\nAACCMMAA'\nprint('Tests passed')\n\"\"\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1 4'\nassert solution('3') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\nSample Input 4:\n2\nAC\nAM\nSample Output 4:\n1 1\n2 1\n\nSample Input 5:\n1\nAM\nSample Output 5:\nimpossible\n''') == '1 1'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1 4'\nassert solution('3') == 'impossible'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\nA\nA\nA\nA''') == 'impossible'\nassert solution('''4\nAC\nCA\nCA\nAC''') == 'impossible'\nassert solution('''5\nAACC\nAA\nA\nAC\nA''') == '1 4'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n''') == '1 4'\nassert solution('''3\nACMA\nACM\nACA\nAMA\n''') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\"\"\") == \"\"\"1 4\nMM\nA\"\"\"\nassert solution(\"\"\"3\nACMA\nACM\nACA\nAMA\n\"\"\") == \"\"\"impossible\"\"\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n20\\n0.5\\n10\\n') == '1\\n18.9029850746\\n'\nassert solution('10\\n100\\n5\\n20\\n') == '10\\n18.9029850746\\n'\nassert solution('10\\n100\\n5\\n20\\n') == '10\\n18.9029850746\\n'"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4 1\n1 0.5 5\n''') == '3'\nassert solution('''20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124'\nassert solution('''10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.9087462439999999'\nassert solution('''5 10 1\n0.5 1 1\n0.5 1 1\n0.5 1 1\n0.5 1 1\n''') == '11.05'\nassert solution('''10 10 1\n0.5 1 1\n0.5 1 1\n0.5 1 1\n0.5 1 1\n''') == '11.1'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124','sample test 1'\nassert solution('''2 4 1\n1 0.5 5\nSample Output 2:\n3''') == '18.9029850746','sample test 2'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 4 1\n1 0.5 5\n''') == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == \"18.9029850746\"\n\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\") == \"18.9029850746\"\n\"\"\"\n\nimport sys\nimport bisect\n\nn, r, m = list(map(int, input().split()))\nranges = []\nfor i in range(m):\n    t, p, d = list(map(float, input().split()))\n    ranges.append((t, p, d))\n\ntimes, probs, dists = list(map(float, input().split()))\n\nranges.sort()\ntimes = list(map(int, input().split()))\nprobs = list(map(float, input().split()))\ndists = list(map(float, input().split()))"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '6.6666666666'\nassert solution('2 4 1') == '3.3333333333'\nassert solution('10 20 3') == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(s) == \"18.90416667\"\nassert solution([10, 20, 3]) == \"3.0\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 1') == '3'\nassert solution('10 20 3') == '18.9029850746'\nassert solution('100 111 5') == '124'"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '18.9029850746'\nprint('All test cases passed')\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == '2 1 2'\nassert solution(input) == '4 3 4 2'\nassert solution(input) == '2 1 2'\nassert solution(input) == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '2 1 2'\nassert solution('1 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n2 1 2\n''') == '2 1 2'\nassert solution('''4 1\n1''') == '1'\nassert solution('''5 2\n2''') == '1'\nassert solution('''5 4\n4 3 2 1''') == '3 4 1 2'\nprint('all test cases passed!')\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"2 1 2\"\nassert solution(\"4 3\") == \"2 1 2\"\nassert solution(\"5 22\") == \"4 3 4 2\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n2 1 2\n''') == '2 1 2'\nassert solution('''5 22\n4 3 4 2\n''') == '4 3 4 2'\n\nfrom itertools import combinations\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1') == '2 1 2'\nassert solution('6 1') == '5 2 4 1'\nassert solution('3 8') == '6 1 2 3 4 5 7 8'\nassert solution('4 1') == '1 1 2 3'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n2 1 2\n''') == '2 1 2'\nassert solution('''\n2 1\n''') == '1'\nassert solution('''\n5 22\n4 3 4 2\n''') == '4 3 4 2'\nprint('All tests passed!')"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1 3\\n3 4') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7') == '2'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4\\n1 2\\n1 3\\n3 4\\n2 4\\n') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\\n') == '2'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"7 6\") == \"2\"\nassert solution(\"7 5\") == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 4\\n4 5') == '2'\nassert solution('10 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '2'\nassert solution('3 5') == '2'\nassert solution('7 5') == '2'\nassert solution('3 4') == '1'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 6\") == \"2\"\nassert solution(\"7 5\") == \"0\"\nassert solution(\"6 7\") == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == '2'\nassert solution('7 6') == '2'\nassert solution('7 5') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\nassert solution('''7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\n''') == '2'\nassert solution('''7 5\n1 2\n2 3\n3 4\n5 6\n6 7\nSample Output 3:\n0\n\n''') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '2'\nassert solution('4 4\\n1 2\\n1 3\\n3 4\\n2 4\\n') == '2'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '0'\nassert solution('7 5\\n1 2\\n2 3\\n3 4\\n5 6\\n6 7\\n') == '0'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\nassert solution('''0 20\n1.00 0.10''') == '28.26445910'\nprint(solution('''10 0\n1.00 0.10'''))\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"1.00 0.10\") == \"20.00000000\"\nassert solution(\"-10 10\") == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"1.00000000000001\"\nassert solution(\"2 -8\") == \"1.00000000000001\"\nassert solution(\"-6 -7\") == \"1.00000000000001\"\nassert solution(\"-2 -4\") == \"1.00000000000001\"\nassert solution(\"8 2\") == \"1.00000000000001\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"10.00 1.00\") == \"3.14159265\"\nassert solution(\"-10 10\") == \"3.14159265\""
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''20 0\n1.00 0.10\n''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00\n''') == '3.14159265'\nassert solution('''0 20\n1.00 0.10\n''') == '28.26445910'"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"20 0\\n1.00 0.10\") == \"20.00000000\"\nassert solution(\"-10 10\\n10.00 1.00\") == \"3.14159265\"\nassert solution(\"0 20\\n1.00 0.10\") == \"28.26445910\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('20 0') == '20.00000000'\nassert solution('-10 10') == '3.14159265'\nassert solution('0 20') == '28.26445910'"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"-10 10\") == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '28.26445910'\nprint('The local tests passed')\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 100\\n1 100\\n4 70\\n3 70\\n\") == \"170\"\nassert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\\n\") == \"170\"\nassert solution(\"10\\n50 20\\n1 10\\n4 20\\n5 10\\n\") == \"225\"\nassert solution(\"4\\n2 100\\n1 100\\n4 70\\n3 70\\n\") == \"170\""
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '1'"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 5\") == \"2\"\nassert solution(\"3 5\") == \"3\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70\\n') == '170'\nassert solution('3\\n2 120\\n3 50\\n2 80\\n') == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n2 100\n1 100\n4 70\n3 70\n\"\"\") == \"170\"\nassert solution(\"\"\"\n3\n2 120\n3 50\n2 80\n\"\"\") == \"150\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '170'\nassert solution('2') == '170'\nassert solution('4') == '170'\nassert solution('1') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n2 100\n1 100\n4 70''') == '170'\nassert solution('''4\n2 100\n1 100\n4 70\n3 70\n2 80''') == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70\\n') == '170'\nprint(solution.__doc__)\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5\n2 100\n1 100\n4 70\n3 70\n2 80\n\"\"\"\n) == \"170\"\n\nassert solution(\n\"\"\"\n4\n2 100\n1 100\n4 70\n3 70\n2 80\n\"\"\"\n) == \"150\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"170\"\nassert solution(\"4\") == \"150\"\nassert solution(\"5\") == \"150\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3') == '2'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '2'\nassert solution('''5 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '4'\nassert solution('''7 7\n1 2\n1 3\n2 4\n3 4\n3 5\n4 6\n4 7\n5 6''') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 3') == '2'\nassert solution('1 2') == '1'\nassert solution('4 4') == '0'\nassert solution('6 6') == '4'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '2'\nassert solution('6 6') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 4\n1 2\n1 3\n2 4''') == \"2\"\nassert solution('''4 4\n1 2\n1 3\n2 4\n3 4''') == \"4\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 6') == '5'\nassert solution('4 4') == '3'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '2'\nassert solution('''6 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '5'"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 4') == '2'"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n''') == '2'\n\"\"\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == 2\nassert solution('1 3') == 2\nassert solution('2 4') == 1\nassert solution('2 5') == 2\nassert solution('3 4') == 1\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0.5', solution('1')\nassert solution('8') == '0.0446429', solution('8')\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '3\\n'\n    '1\\n'\n    '0\\n'\n    '2 1 2\\n'\n    '1 0\\n'\n    '1 0\\n'\n    '1 0\\n'\n    'Sample Output 2: 0.0446429'\n    ) == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'\nprint('solution()')\n\n---------------------------------------------------------------\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0.5'\nassert solution('8') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1\\n0\\n2 1 2\\n1 0\\n1 0') == '0.5'\nassert solution('8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 2\\n1 0\\n1 0') == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == '0.5'\nassert solution(sample_input_2) == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0.5'\nassert solution('2') == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7\n1 2 3 3 2 1\n''') == '3'\nassert solution('''\n6\n1 2 3 3 2 1\n''') == '3'\nassert solution('''\n4\n1 2 1 2\n''') == 'IMPOSSIBLE'\nassert solution('''\n5\n1 2 1 2 1\n''') == '1 2 1 2 1'\nassert solution('''\n5\n1 2 3 4 2\n''') == '1 6 2 5 2'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 3 3 2\n''') == '3\n2\n1 6 1\n2 5 2\n3 4 3\n''')\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n1 2 3 3 2 1\n''') == '3'\nassert solution('''\n4\n1 2 1 2\n''') == 'IMPOSSIBLE'\nprint('PASSED')"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n1 2 3 3 2 1\n''') == '3'\n\nassert solution('''\n4\n1 2 1 2\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n10\n1 2 2 2 2 2 2 3 3 3 3 2 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == \"3\"\nassert solution('4') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '3\\n1 6 1'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n3 1 2 1 1\\n') == '1 6 1\\n2 5 2\\n3 4 3'\nassert solution('5\\n3 1 2 1 1\\n') == 'IMPOSSIBLE'\nassert solution('5\\n1 1 2 1 1\\n') == '1 6 1'\nassert solution('10\\n1 3 2 1 3 2 3 2\\n') == '1 6 1\\n2 5 2\\n3 4 3'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    6\n    1 2 3 3 2 1\n''') == '3\\n1 6 1\\n2 5 2\\n3 4 3\\n'''"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7\n1 2 3 4 5 3\n''') == '2 1 6 1'\nassert solution('''\n9\n1 2 1 2 1 2 3\n''') == '2 1 6 1'\nassert solution('''\n10\n2 3 1 2 1 2 3 4\n''') == '1 6 3'\nassert solution('''\n11\n1 2 1 2 1 2 3\n4 5 4 4 4 4 5\n''') == '1 5 2 3 4 5'\nassert solution('''\n12\n2 2 2 1 3 1 1\n4 5 2 2 2 4 4\n''') == '2 3 4 5 2 1 1'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2 3\n2 3 1\n3 2 1\n''') == '3\n1 6 1\n2 5 2\n3 4 3\n''')"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10 20 30 40 50\\n2 28 27') == '10 20 28 27 30 40 50'\nassert solution('3\\n1 2\\n1 100') == '1 2 100'\nassert solution('10\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n1 2\n1 100\n1 1\n\"\"\") == \"\"\"\n1 2 100\n\"\"\"\nassert solution(\"\"\"\n3\n1 2\n1 100\n1 1\n\"\"\") == \"\"\"\n1 2 100\n\"\"\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 100') == '1 100'\nassert solution('1 1') == '1 1'\nassert solution('2 28') == '2 28'\nassert solution('5 10 20 30 40 50') == '10 20 28 27 30 40 50'\n\n\"\"\"\n\n\nn = int(input())\n\ndata = []\n\nfor i in range(n):\n    data.append(input())\n\ndata.sort()\n\nfor i in data:\n    print(i)"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n1 100\\n1 1') == '1 2 100'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('3') == '1 2 1'\nassert solution('5 10 20 30 40 50') == '10 20 28 27 30 40 50'"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n1 100\\n1 1\\n') == '1 2 100'\nassert solution('2\\n5 10 20 30 40 50\\n2 28 27\\n') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10 20 30 40 50\\n2 28 27\") == \"10 20 28 27 30 40 50\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1 2'\nassert solution('2') == '1 100'\nassert solution('3') == '1 2'\nassert solution('2') == '1 28'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2\n1 100\n1 1''') == '1 2 100'\nassert solution('''3\n1 2\n1 100\n1 1''') == '1 2 100'"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '5 10 20 30 40 50\\n2 28 27') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '2600'\nassert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '506'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0\") == '2600'\nassert solution(\"1\") == '506'\nassert solution(\"2\") == '2600'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '2600'\nassert solution('0') == '2600'\nassert solution('1') == '2600'\nassert solution('2') == '2300'\nassert solution('3') == '2300'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'\nassert solution('3') == '506'"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '25'\nassert solution('3') == '64'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '', 'Should be empty'\nassert solution('1') == '', 'Should be empty'\nassert solution('1') == '', 'Should be empty'\nassert solution('1') == '', 'Should be empty'\nassert solution('1') == '', 'Should be empty'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2562'\nassert solution('4') == '1070'\nassert solution('5') == '6126'\n\n## Solution:"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0\\n') == '2600', \"Wrong\"\nassert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '506', \"Wrong\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"()))\" == \"possible\"\nassert solution(\")))(\" ) == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"possible\"\nassert solution() == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\nassert solution(\"(())\") == \"possible\"\nassert solution(\")(()\") == \"impossible\"\nassert solution(\"(()\") == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(')()())') == 'possible'\nassert solution(')()())') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''()))''') == 'possible', f'(solution) failed; got: {solution(stdin)}'\nprint('\u2705 Test passed')\n\nassert solution('''((()))''') == 'possible', f'(solution) failed; got: {solution(stdin)}'\nprint('\u2705 Test passed')\n\nassert solution('''()()))''') == 'impossible', f'(solution) failed; got: {solution(stdin)}'\nprint('\u2705 Test passed')\n\nassert solution('''(((((()()()(((((()()(()(((((()(()(()((((()((())(((()()()())((((()()())(()))))))))))))))))))))))))))))))))''') == 'possible', f'(solution) failed; got: {solution(stdin)}'\nprint('\u2705 Test passed')\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('((()))') == 'possible'\nassert solution('))((') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('(()))') == 'possible'\nassert solution('(())(') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''()))\n()))''') == \"possible\"\n\nassert solution('''())(\nSample Output 3:\nimpossible''') == \"impossible\"\n\nassert solution('''((((((\nSample Output 4:\nimpossible''') == \"impossible\""
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"(((((()))))\") == \"possible\"\nassert solution(\"((()))\") == \"impossible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3') == '1800'\nassert solution('2 2') == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1800\"\nassert solution(\"2 2\") == \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1800\"\nassert solution(\"2 2\") == \"impossible\"\nassert solution(\"1 3\") == \"1800\"\nassert solution(\"1 2\") == \"impossible\"\nassert solution(\"1 2\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n\") == \"1800\"\nassert solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n\") == \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1800'\nassert solution('2 2') == 'impossible'"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"impossible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n\") == \"1800\"\nassert solution(\"4 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n1 2200 9400 1400\\n\") == \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n\"\"\") == \"1800\"\n\nassert solution(\"\"\"\n2 2\n1 1800 3600 1800\n1 1900 3600 1600\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 1800 900\n1 1900 900\n1 2000 900\n''') == '1800'\nassert solution('''\n2 2\n1 1800 3600\n1 1900 3600\nSample Output 3:\nimpossible\n''') == 'impossible'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\nA1-B2\nA2-B3\nA3-B1''') == 'A1-B1 A2-B2 A3-B3'\nassert solution('''2 3\nA1-B2\nA2-B3\nA3-B1''') == 'A1-B1 A2-B2 A3-B3'\n\nassert solution('''1 1\nA1-A1''') == 'A1-A1'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'A1-B1 A2-C2 B2-C1'\nassert solution('''\n2 2\n''') == 'A1-B1 A2-C2 B2-C1'\n\nassert solution('''\n1 1\n''') == 'A1-A1'\n\nassert solution('''\n2 3\n''') == 'A1-A1 A2-B2 B2-C1'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\n\n'''"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2\n1 2 3 4 5''') == '1-2 4-5 2-3 1-4 5-1 1-5'''\nassert solution('''2 1\n1 2''') == '1-2 1-1 2-1'''\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\", \"Should be A1-B1 A2-C2 B2-C1\"\nassert solution(\"2 2\") == \"A1-B1 A2-C2 B2-C1\", \"Should be A1-B1 A2-C2 B2-C1\"\nassert solution(\"3 3\") == \"A1-B1 A2-B2 A3-C3\", \"Should be A1-B1 A2-B2 A3-C3\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\\nA1-B2 A2-C1 B1-C2\""
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input_1) == \"A1-B2 B1-A2 A3-B3\", \"Should be A1-B2 B1-A2 A3-B3\"\nassert solution(sample_input_2) == \"A1-C2 A2-B1 B1-C1 A3-B2 C2-B2 B3-C1 C1-B3\", \"Should be A1-C2 A2-B1 B1-C1 A3-B2 C2-B2 B3-C1 C1-B3\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4') == '7'\nassert solution('2 2') == '7'\nassert solution('5 5') == '7'\n\"\"\""
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"4 4\") == \"9\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n.X..\") == \"7\"\nassert solution(\"4 4\\nX..X\") == \"9\""
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\nX.X\\nX..X\\n..X.\\n..XX') == \"7\"\nassert solution('4 4\\n.XX\\nX..X\\n..X.\\n..XX') == \"9\""
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '7'\nassert solution('4 4') == '9'"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\nX.X\\nX..X\\n..X.\\n..XX\") == \"7\"\nprint(solution(\n\"\"\"\n2 2\n..\n..\n\n3 3\n.XX\nXX.\n\n5 5\n.XX.X.\n.XX.X.X\n.X.XX.X\nX..X..X\nXX.X.XX\n\"\"\"))\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n..\n..\n''') == '7'\nassert solution('''\n4 4\nX.XX\nX..X\n..X.\n..XX\n''') == '9'\nassert solution('''\n5 5\n.X.\n.X.\n.X.\n.X.\nX.X\n''') == '4'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2\n.X.\nX.X\n..X\n..X.\n''') == '7'\nassert solution('''\n1 1\nX.\n.X\nX.\n''') == '6'\n'''\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '7'\nassert solution('''\n1 2\nXX.\n.X.\n''') == '9'\nassert solution('''\n10 10\n.XX.\n.X.X\nX.X.\nXX.X\n.XXX\n.X.X\n.XXX\n.XXX\n.X.X\n.X.X\n''') == '17'\nassert solution('''\n5 5\nXX.\nXX.\nXX.\nXX.\nXX.\nX.X\nX.X\n''') == '8'\n'''\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n        \nassert Solution().solve('''\n1 2\nXX.\n.X.\n''') == '9'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '600'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3 2 2 100''') == '600'\nassert solution('''2 0 2 1 100''') == '100'\nassert solution('''2 0 0 0 100''') == '-1'\nassert solution('''5 10 3 1 2 5''') == '1150'\nassert solution('''5 10 3 1 2 5''') == '1150'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '600'\nassert solution('2') == '-1'\nassert solution('3') == '-1'\nassert solution('4') == '-1'\nassert solution('5') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n3 2 2 2\n1 1 1 1 500\nSample Input 3:\n3\n3 2 3 3\n2 2 4 2\nSample Output 3:\n20\n''') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 2 2 100\n1 1 1 1 500\nSample Input 3:\n4\n1 1 1 1 100\n6 1 1 1 100\n5 1 1 1 100\nSample Output 3:\n500\n\nSample Input 4:\n6\n0 0 1 1 2 5\nSample Output 4:\n-1\n\nSample Input 5:\n8\n2 2 2 2 4 4 4 4\nSample Output 5:\n-1\n\nSample Input 6:\n3\n0 0 1 1 2 100\nSample Output 6:\n600\n''') == '600'"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2 2 100\") == \"600\"\nassert solution(\"2 0 2 1 100\") == \"100\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n3 2 2 2 100\n1 1 1 1 500\n\"\"\") == \"600\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '600'\nassert solution('''\n3\n1 2 2 2\n1 1 1 1\n2 2 2 2\n1 2 2 2\n''') == '600'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '0'\nassert solution('2\\n') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"0\""
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0'\nassert solution('12') == '0'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n361\") == \"3\"\nassert solution(\"2\\n11\") == \"0\""
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n361''') == '3'\nassert solution('''2\n11''') == '0'\nassert solution('''4\n941''') == '0'"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0'\nassert solution('11') == '0'\nassert solution('361') == '3'\nassert solution('12') == '1'\nassert solution('13') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n361\n''') == '3'\nassert solution('''\n2\n11\n''') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(s) == \"0\""
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 10') == '10'\nassert solution('3 10') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 10') == '10'\nassert solution('3 10') == 'cancel road trip'\nassert solution('3 10') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 10\n2 100\n1 10\n11 5\n''') == '10'\nassert solution('''\n3 10\n2 100\n1 10\n11 5\n''') == 'cancel road trip'"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 10\n2 100\n1 10\n11 5\n''') == '10'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3, 10, 2, 100, 1, 10, 11, 5]) == '10'\nassert solution([3, 10, 2, 100, 1, 10, 13, 5]) == 'cancel road trip'"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 10\") == \"10\"\nassert solution(\"3 10\") == \"10\"\nassert solution(\"3 10\") == \"cancel road trip\"\nassert solution(\"3 10\") == \"cancel road trip\"\nassert solution(\"3 10\") == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 10\n2 100\n1 10\n11 5\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n3 10\n2 100\n1 10\n13 5\n\"\"\") == \"cancel road trip\"\n\nassert solution(\"\"\"\n3 10\n2 100\n1 10\n11 1\n\"\"\") == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 10') == '10'\nassert solution('2 100') == 'cancel road trip'\nassert solution('1 10') == '1'\nassert solution('11 5') == 'cancel road trip'\nassert solution('3 3') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 10') == '10'\nassert solution('3 10') == 'cancel road trip'\nassert solution('3 10') == 'cancel road trip'"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5\\n') == '10'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n4 9\n2 8\n1 1\n3 4\n5 100\n\"\"\"\n) == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\n    \"\"\"\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\nassert solution('5 7') == '0 7 8 11 15 16 19'\nprint('All Tests Passed')\n\n'''"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 7\n2 2\n3 8\n2 7\n2 4\n3 8''') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 9') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7') == '0 7 8 11 15 16 19'\nassert solution('6') == '0 0 0 0 0 0'"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1 7 8 11 15 16 19\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\nprint('Congratulations, has passed all test cases!')\n\n\"\"\"\n\n\"\"\"\n
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19'\n\"\"\"\n--- Day 5: Binary Boarding ---\nYou board your plane only to discover a new problem: you dropped your boarding pass! You aren't sure which seat is yours, and all of the flight attendants are busy with the flood of people that suddenly made it through passport control.\n\nYou write a quick program to use your phone's camera to scan all of the nearby boarding passes (your puzzle input); perhaps you can find your seat through process of elimination.\n\nInstead of zones or groups, this airline uses binary space partitioning to seat people. A seat might be specified like FBFBBFFRLR, where F means \"front\", B means \"back\", L means \"left\", and R means \"right\".\n\nThe first 7 characters will either be F or B; these specify exactly one of the 128 rows on the plane (numbered 0 through 127). Each letter tells you which half of a region the given seat is in. Start with the whole list of rows; the first letter indicates whether the seat is in the front (0 through 63) or the back (64 through 127). The next letter indicates which half of that region the seat is in, and so on until you're left with exactly one row.\n\nTo save time, only use the information from the actual seat. The last three characters will be exactly the same as the first three characters of the row number. So, for example, the above boarding pass reads 18ABC500, and with that information you can determine that the seat is the upper left one (row 44, column 5).\n\nHere is another example:\n\nBFFFBBFRRR: row 70, column 7, seat ID 567.\nFFFBBBFRRR: row 14, column 7, seat ID 119.\nBBFFBBFRLL: row 102, column 4, seat ID 820.\nWhat is the highest seat ID on a boarding pass?\n\nYour puzzle answer was 922.\n\n--- Part Two ---\nDing! The \"fasten seat belt\" signs have turned on. Time to find your seat.\n\nIt's a completely full flight, so your seat should be the only missing boarding pass in your list. However, there's a catch: some of the seats at the very front and back of the plane don't exist on this aircraft, so they'll be missing from your list as well.\n\nYour seat wasn't at the very front or back, though; the seats with IDs +1 and -1 from yours will be in your list.\n\nWhat is the ID of your seat?\n\nYour puzzle answer was 1049.\n\nBoth parts of this puzzle are complete! They provide two gold stars: **\n\"\"\"\nfrom typing import List\nimport numpy as np\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19'\nassert solution('''\n2\n5\n2\n3\n8\nSample Output 3:\n0 7 8 11 15 16 19''') == '0 7 8 11 15 16 19'\nassert solution('''\n5\n2\n2\n3\n8\nSample Output 4:\n0 7 8 11 15 16 19''') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '3'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n0 3\n0 3''') == '1'\n\nassert solution('''1 5 3\n0 0 1\n3 3\n-3 3\n3 0\n0 3''') == '3'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 0\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '2'\nassert solution('1 5 3') == '1'"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '3'\nassert solution('3 3') == '0'\nassert solution('1 4 1') == '4'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '1'\nassert solution('''\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '3'\nassert solution('''\n1 10 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n0 6\n0 7\n0 9\n''') == '4'\nassert solution('''\n1 50 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n0 6\n0 7\n0 9\n0 12\n0 14\n0 16\n0 18\n0 20\n0 22\n0 24\n0 26\n0 28\n0 30\n0 32\n0 34\n0 36\n0 38\n0 40\n0 42\n0 44\n0 46\n0 48\n''') == '40'"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '3'\nassert solution('1 2 3') == '0'\nassert solution('1 5 3') == '0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1\\n') == '4\\n4\\n2\\n2\\n0\\n'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9\\n') == '2\\n0\\n0\\n2\\n0\\n'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 10000\n1\n1\n1\n1\n1''') == '4'\nassert solution('''5 9\n1\n1\n10\n1\n9''') == '2'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4\\n0\\n2\\n2\\n0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9') == '2'\nassert solution('5 4\\n1\\n1\\n1\\n1\\n1') == '0'\nassert solution('5 8\\n1\\n1\\n1\\n1\\n1\\n1') == '0'\nassert solution('5 20\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4\\n1\\n1\\n1\\n0'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 10000\") == \"4\"\nassert solution(\"5 9\") == \"2\"\nassert solution(\"4 6\") == \"2\"\nassert solution(\"4 8\") == \"0\"\nassert solution(\"4 0\") == \"0\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2\\n0\\n1\\n2\\n0'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10000') == '4'\nassert solution('5 9') == '2'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9\\n') == '2'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10000\\n1') == '4'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9') == '2'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nne\nak\nne\nkava''') == 'DA', \"First\"\nassert solution('''\nne\nne\nak\nne\nkava''') == 'NE', \"Second\"\nassert solution('''\nne\nak\nne\nkava''') == 'DA', \"Third\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\nkava') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\""
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\nkava\nb''') == 'DA'\nassert solution('''2\nne\nb''') == 'NE'\nassert solution('''10\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne\nne"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"NE\"\nprint(\"You're all set!\")\n\n'''\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2\\n0\\n2\\n1\\n'''\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\nSample Output 2:\n0\n0\n3\n2\n''') == '1'"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\nassert solution('5 5 1') == '0'\nassert solution('5 10 5') == '2'\nassert solution('3 3 3') == '6'\nassert solution('4 6 2') == '1'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == \"2\"\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\nSample Output 2:\n0\n0\n3\n2\n''') == \"3\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\nassert solution('''\n10 4 4\n1 2\n2 3\n3 4\n4 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '1'\nprint('all tests passed')\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\n\nprint(solution('''\n5 5 4\n1 2\n2 3\n3 4\n1 5\n5 2\n2 5\n1 4\n4 5\n1 4\n2 4\n1 5\n1 3\n2 4\n4 3\n2 5\n3 4\n4 4\n1 1 3\n2 1 3\n1 2 3\n2 2 4\n1 1 4\n2 2 4\n1 1 3\n2 2 3\n'''))\nassert solution('''\n6 8 4\n1 2\n2 3\n1 3\n3 4\n4 5\n5 6\n1 6\n2 4\n3 5\n4 5\n5 6\n3 5\n4 4\n2 4\n2 5\n2 6\n5 4\n5 5\n5 6\n5 6\n4 4\n4 5\n4 5\n4 6\n5 4\n5 5\n5 6\n5 6\n''') == '2'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '1'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '0'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '1'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == \"2\"\nassert solution('''\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == \"1\"\n'''\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 3') == '1'\nassert solution('3 3') == '2'\n\nassert solution('2 2') == '2'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '1'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 2\\n\"\n    \"1 1\\n\"\n    \"0 1\\n\"\n    \"1 0\\n\"\n    \"1 2 1\\n\"\n    \"2 1 1\\n\") == \"2\"\nassert solution(\n    \"2 2\\n\"\n    \"1 1\\n\"\n    \"0 1\\n\"\n    \"1 0\\n\"\n    \"1 2 1\\n\"\n    \"2 1 3\\n\") == \"1\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n2 2 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n2 2 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n2 2 1\n3 1 2\n\"\"\") == \"2\""
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\n\"\"\"\nimport sys"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 2\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n\"\"\") == \"2\""
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1 2 1\") == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '2'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '3'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 15\nD 4 10 1\nC 6 1\nC 9 3''') == \"40.500000000\"\nassert solution('''3 15\nD 4 10 1\nC 6 1\nC 9 3''') == \"49.000000000\""
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\n''') == '40.500000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '49.000000000'\nassert solution('''\n2 15\nD 4 10 1\nC 6 1\n''') == '40.500000000'\nassert solution('''\n2 20\nD 4 10 1\nC 6 1\n''') == '101.4999999999999'\nassert solution('''\n2 10\nD 4 10 1\nC 6 1\nC 9 3\n''') == '101.4999999999999'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.5'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\n''') == '40.500000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.5'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.5'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '40.500000000', 'First'\nassert solution('''\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '49.000000000', 'Second'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''a 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''a 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n'''"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4\\n2 1 3\\n5 1 3\\n1 4 2\\n0 3\\n3 1 2\\n1 4 2') == 'fail'\nassert solution('2\\n5 10 6\\n1 1 2 3\\n1 3 5 4\\n1 3\\n3 1 2\\n4 2\\n4 2\\n3 1 2\\n1 3\\n5 4\\n1 5\\n1 3\\n4 1\\n5 2\\n1 3\\n2 3\\n4 1\\n1 4\\n5 1\\n2 3\\n5 2\\n1 3\\n3 2\\n1 5\\n1 6\\n5 3\\n3 3\\n2 1\\n2 1\\n2 5\\n2 5\\n3 2\\n1 5\\n2 2\\n4 3\\n4 1\\n3 1\\n1 3\\n5 1\\n5 1\\n1 2\\n1 1\\n1 1\\n5 1\\n5 3\\n3 2\\n1 1\\n2 2\\n2 3\\n4 1\\n1 3\\n3 2\\n1 2\\n3 1\\n1 2\\n3 2\\n1 5\\n1 5\\n3 2\\n2 3\\n3 2\\n1 5\\n4 2\\n1 3\\n2 2\\n2 1\\n1 1\\n3 1\\n2 2\\n5 2\\n1 2\\n2 3\\n2 1\\n5 2\\n2 3\\n4 1\\n4 3\\n3 2\\n2 1\\n4 3\\n2 2\\n3 2\\n2 1\\n1 2\\n1 2\\n5 3\\n5 2\\n1 4\\n2 3\\n1 2\\n4 2\\n1 3\\n3 2\\n3 2\\n2 1\\n3 2\\n2 2\\n3 1\\n3 1\\n2 2\\n3 2\\n2 3\\n3 2\\n5 2\\n4 2\\n5 2\\n5 1\\n1 1\\n4 1\\n2 1\\n3 2\\n1 3\\n5 1\\n1 3\\n1 5\\n1 1\\n1 1\\n1 2\\n2 2\\n2 1\\n2 3\\n5 3\\n3 2\\n3 2\\n1 1\\n1 1\\n3 2\\n1 2\\n1 3\\n3 2\\n4 3\\n4 2\\n2 1\\n3 2\\n1 3\\n2 3\\n2 3\\n1 3\\n4 3\\n5 2\\n2 1\\n5 1\\n4 3\\n4 1\\n2 1\\n5 1\\n5 1\\n5 2\\n3 2\\n1 3\\n2 2\\n2 3\\n4 3\\n3 1\\n5 2\\n2 1\\n2 1\\n3 1\\n1 3\\n1 3\\n4 1\\n2 2\\n2 1\\n5 3\\n3 3\\n3 2\\n2 2\\n2 1\\n3 2\\n1 3\\n4 1\\n4 3\\n4 3\\n2 3\\n3 1\\n1 1\\n4 1\\n2 1\\n3 1\\n2 1\\n1 1\\n3 1\\n2 1\\n1 1\\n1 1\\n1 1\\n4 1\\n1 1\\n1 3\\n1 2\\n1 2\\n1 2\\n5 3\\n3 2\\n4 3\\n5 3\\n1 3\\n1 3\\n1 3\\n4 3\\n1 3\\n1 3\\n1 2\\n1 2\\n1 3\\n3 2\\n1 3\\n2 2\\n2 2\\n2 2\\n3 2\\n1 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 1\\n1 1\\n1 2\\n1 2\\n1 1\\n1 2\\n2 2\\n2 2\\n3 1\\n3 2\\n3 2\\n3 2\\n1 3\\n3 2\\n5 3\\n1 3\\n2 2\\n2 3\\n1 3\\n2 2\\n2 3\\n2 3\\n2 3\\n1 2\\n1 2\\n2 2\\n5 2\\n1 3\\n2 2\\n2 3\\n1 2\\n4 2\\n2 3\\n2 1\\n3 2\\n5 2\\n3 2\\n3 2\\n1 3\\n4 1\\n2 1\\n2 1\\n5 1\\n5 2\\n3 2\\n3 2\\n1 5\\n4 1\\n2 3\\n5 2\\n1 2\\n2 1\\n3 2\\n1 1\\n5 2\\n2 3\\n4 1\\n2 3\\n2 3\\n2 3\\n1 4\\n2 3\\n1 3\\n1 5\\n5 2\\n2 2\\n3 1\\n1 2\\n2 1\\n1 2\\n5 2\\n2 3\\n2 1\\n4 2\\n4 1\\n2 2\\n1 2\\n2 2\\n2 2\\n1 3\\n1 1\\n2 2\\n2 2\\n1 3\\n1 3\\n3 2\\n5 2\\n2 3\\n4 1\\n5 1\\n4 1\\n2 3\\n1"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\n5\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == '5 4 9 3 1 10 7 6 2'\nassert solution('10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\nabc 2 10 3\\nabc 1 6\") == \"4 5 3 1\"\nassert solution(\"10\\nabc 2 10 3\\nabc 1 6\") == \"4 5 3 1\"\nassert solution(\"10\\nabc 2 10 3\\nabc 1 6\\nabc 2 1 5\") == \"7 8 9 1\"\nassert solution(\"10\\nabc 2 10 3\\nabc 1 6\\nabc 2 1 5\\nabc 2 1 5\") == \"7 8 9 1\"\nassert solution(\"5\\nabc 2 10 3\\nabc 1 6\\nabc 2 1 5\\nabc 2 1 5\\nabc 2 1 5\") == \"7 8 9 1\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\") == \"5 4 9 3 1 10 7 6 2\"\nprint(solution(\"5\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n\"))"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10\\n' +\n            'a 2 10 3\\n' +\n            'b 1 6\\n' +\n            'c 2 1 5\\n' +\n            'd 1 9\\n' +\n            'e 1 4\\n' +\n            'f 1 2\\n' +\n            'g 2 6 8\\n' +\n            'h 0\\n' +\n            'i 1 3\\n' +\n            'j 1 7') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'\n\nstdin = '00:00'\n\nstdin = '01:01'\nstdout = '3'\nprint(stdout)\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('00:00\\n01:01') == '3'\nassert solution('00:08\\n00:00') == '3'\nassert solution('00:00\\n00:00') == '1'\n\n'''"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('00:00') == '3\\n00:00\\n00:01\\n00:02\\n00:03\\n00:04\\n00:05\\n00:06\\n00:07\\n00:08\\n00:09\\n00:10\\n00:11\\n00:12\\n00:13\\n00:14\\n00:15\\n00:16\\n00:17\\n00:18\\n00:19\\n00:20\\n00:21\\n00:22\\n00:23'\nassert solution('00:00') == '3\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00\\n00:00'\nassert solution('01:01') == '2\\n00:00\\n00:01\\n00:02\\n00:03\\n00:04\\n00:05\\n00:06\\n00:07\\n00:08\\n00:09\\n00:10\\n00:11\\n00:12\\n00:13\\n00:14\\n00:15\\n00:16\\n00:17\\n00:18\\n00:19\\n00:20\\n00:21\\n00:22\\n00:23'\nassert solution('01:02') == '1\\n00:00\\n00:01\\n00:02\\n00:03\\n00:04\\n00:05\\n00:06\\n00:07\\n00:08\\n00:09\\n00:10\\n00:11\\n00:12\\n00:13\\n00:14\\n00:15\\n00:16\\n00:17\\n00:18\\n00:19\\n00:20\\n00:21\\n00:22\\n00:23'\nassert solution('01:03') == '1\\n00:00\\n00:01\\n00:02\\n00:03\\n00:04\\n00:05\\n00:06\\n00:07\\n00:08\\n00:09\\n00:10\\n00:11\\n00:12\\n00:13\\n00:14\\n00:15\\n00:16\\n00:17\\n00:18\\n00:19\\n00:20\\n00:21\\n00:22\\n00:23'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"00:00\\n01:01\") == \"3\"\nassert solution(\"00:08\\n00:00\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'\nassert solution('00:08') == '3'\nassert solution('00:00') == '3'\nassert solution('00:00') == '3'"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('00:00\\n01:01\\n') == '3'\nassert solution('00:00\\n00:00\\n') == '2'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''0:00\n1:01''') == '3'\nassert solution('''00:00\n01:01''') == '3'\nassert solution('''00:08\n00:00\n''') == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('())') == '4,8:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n(())\n''') == '4,8:8,8:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('(())') == '4,4:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('()') == '4,4:'\nassert solution('())') == '4,4:'\nassert solution('((()))') == '4,4:4,4:\n\nSample Input 3:\n((((()))))\nSample Output 3:\n4,4:4,4:4,4:\n\nSample Input 4:\n()()(()\nSample Output 4:\n0,0:\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"(((())()))\") == \"4,4:4,4:4,4,4:4,4,4:4,4,4:4,4,4:\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n((\n))\n''') == ''\n\nassert solution('''\n(())\n''') == '4,8:8,8:'\n\nassert solution('''\n()\n''') == '4,4:'\n\nassert solution('''\n()\n''') == ''\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"()\") == \"4,8:8,8:\"\nassert solution(\"(())\") == \"4,4:"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''((()))''') == '4,4:'''\nassert solution('''(())''') == '4,4:'''\nassert solution('''()(((((())''') == '4,4:'''\nassert solution('''(()(())''') == '4,4:'''\nassert solution('''((()())((()))''') == '4,4:'''\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('()') == \"4,4:\"\nassert solution('((())') == \"4,4:4,4:\"\nassert solution('(())()())') == \"4,4:4,4:4,4:4:4,4:4:\"\nassert solution('(())((()(())))()') == \"4,4:4,4:4,4,4:4,4:4:4,4:4:\"\nassert solution('((()())()(((())))()(()))()') == \"4,4:4,4:4,4:4,4:4,4:4:4,4,4:4,4:4:4,4:4:4,4:4:\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '1 1\\n'\n    '26 02 03 03 1'\n) == '5'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1\n26 02 03 03 1\n26 02 03 03 2\n26 02 03 03 3\n''') == \"5\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == '-1'\nassert solution(\"1 1\") == '5'\nassert solution(\"2 1\") == '-1'\nassert solution(\"1 1 2\") == '-1'\nassert solution(\"1 1 2 2 2 3 3 4 4 4 4\") == '-1'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == \"5\"\nassert solution('1 1') == \"-1\""
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"5\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"1 1\") == \"-1\"\n\n\"\"\"\nimport sys\nimport os\nfrom datetime import timedelta"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '5'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\nSample Output 2:\n5\n''') == '185'\n\nassert solution('''\n1 1\n26 02 03 03 2\nSample Output 2:\n185\n''') == '185'\n\nassert solution('''\n1 1\n26 02 03 03 1\nSample Output 2:\n-1\n''') == '-1'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\nassert solution('''\n1 1\n26 02 03 03 2\n''') == '185'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 4 1 2') == '2 3 4 1 2'\nassert solution('4 2') == '1 2 3 4'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\nassert solution('4 2\\n3 4 1 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4 '\nassert solution('''\n4 2\n3 4 1 2\n''') == '2 3 4 1 '\nassert solution('''\n3 3\n4 4 5\n''') == '4 5 4 '\nassert solution('''\n4 4\n3 3 1 1\n''') == '1 3 3 3 4 '\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '5 6 1 2'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n4 5 3 5\\n') == '2 3 4 5'\nassert solution('6 1\\n4 5 3 5 1 2\\n') == '5 6 1 2 3 4'"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '5 6 1 2 3 4'\nassert solution('4 2') == '2 3 4 1'\nassert solution('6 2') == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5 3 4 6 1 2\") == \"5 6 1 2 3 4\"\nassert solution(\"6 5 3 4 2 1\") == \"2 3 4 1 5 6\""
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'\nassert solution('4 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4', 'Wrong'\nassert solution('4 2\\n3 4 1 2') == '2 3 4 1', 'Wrong'\nassert solution('2 2\\n3 4') == '3 4', 'Wrong'\n\nimport sys\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"201\"\nassert solution(\"1374 2\") == \"7413\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\nassert solution('3273 4') == '3731'\nassert solution('9876 4') == '9762'\nassert solution('0 4') == '04'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1234 1\n1234''') == '1234'\nassert solution('''123 4\n123''') == '1374'\nassert solution('''1220 1\n1220''') == '1220'\nassert solution('''1234 1\n1230''') == '1234'\nassert solution('''123 4\n1230''') == '1234'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"72\"\nassert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 8\") == \"8 8\"\nassert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"2 1\"\nassert solution(\"2 3\") == \"3 2\"\nassert solution(\"5 0\") == \"5 0\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n0 0\n1 1\n2 0\n\"\"\") == \"0.733333333333333\"\nassert solution(\"\"\"\n3\n0 0\n1 1\n2 0\n\"\"\") == \"0.666666666666667\"\nprint(solution(input()))\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0.666666666666667'\nassert solution('4') == '0.666666666666667'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0.666666666666667'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n0 0\n1 1\n2 0''') == '0.733333333333333'"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '0.666666666666667'\nassert solution('3') == '0.733333333333333'\n\n'''\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0.6'\nassert solution('4') == '0.66666667'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\") == \"1.142857142857143\"\nassert solution(\"4\") == \"1.142857142857143\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '0.733333333333333'\nassert solution('6') == '0.696969696969697'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0\\n0 1\\n1 1') == '0.733333333333333'\nassert solution('10\\n0 0\\n0 1\\n0 0.2\\n0 0.4\\n0 0.5\\n0 0.6\\n0 0.6\\n0 0.6\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0.7\\n0 0."
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n1 1\\n2 0') == '0.666666666666667'\nassert solution('3\\n0 0\\n0 1\\n1 1\\n2 0') == '0.666666666666667'\nassert solution('4\\n0 0\\n0 1\\n1 1\\n2 0') == '0.733333333333333'"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == output_string, \"Not right!\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '9'\nassert solution('2 3 4') == '6'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'\nassert solution('2 1 3') == '2'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10') == '21'"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 3 100\n10 1 10\n10 1 10\"\"\") == \"21\"\nassert solution(\"\"\"\n3 3 2\n2 4 3\n1 1 3\"\"\") == \"6\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 4') == '9'\nassert solution('2 3 100') == '21'\nprint(solution(input()))\n\ncode here\n'''"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\") == \"9\"\nprint('All tests passed!')\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20\\n') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10\\n') == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3 -\") == \"1\"\nassert solution(\"6 2 5 -\") == \"2\"\nassert solution(\"9 2 3 -\") == \"0\"\nassert solution(\"6 2 -1\") == \"0\"\nassert solution(\"8 2 1 -\") == \"3\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 2 7 -\n1 1 1 2\n''') == '2'\nassert solution('''9 2 7 -\n1 1 1 2\n''') == '4'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 3 3\n3 1 1\n2 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2''') == '4'\n\nassert solution('''8 3 3\n3 1 1\n2 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2''') == '6'\n\nassert solution('''9 3 3\n3 1 1\n2 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2''') == '4'\n\nassert solution('''15 3 3\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2''') == '18'\n\nassert solution('''20 3 3\n5 1 1\n4 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n3 1 3\n1 1 2\n2 2 2\n3 3 3\n5 5 5\n4 4 4\n4 1 1\n3 2 2\n3 3 3\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8 2 7 -\n1 1 1 2''') == '2'\nassert solution('''9 2 7 -\n1 1 1 2\nSample Input 3:\n8 2 7 -\n1 1 1 2\nSample Output 3:\n4''') == '2'\nassert solution('''8 2 7 -\n1 1 1 2\nSample Input 4:\n8 2 7 -\n1 1 1 2\nSample Output 4:\n4''') == '2'\nassert solution('''8 2 7 -\n1 1 1 2\nSample Input 5:\n8 2 7 -\n1 1 1 2\nSample Output 5:\n4''') == '2'\nassert solution('''8 2 7 -\n1 1 1 2\nSample Input 6:\n8 2 7 -\n1 1 1 2\nSample Output 6:\n4''') == '2'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8 2 7 -\n1 1 1 2\n''') == \"2\"\nassert solution('''\n9 2 7 -\n1 1 1 2\n''') == \"4\"\nassert solution('''\n10 1 1 -\n1 1 1 2\n''') == \"1\"\nassert solution('''\n10 1 1 -\n1 1 1 2\n''') == \"0\"\nassert solution('''\n10 1 1 -\n1 1 1 2\n''') == \"1\"\n\n\"\"\""
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 2 7 -') == '2'\nassert solution('9 2 7 -') == '4'\nassert solution('4 4 1 -') == '1'\nassert solution('4 4 1 *') == '1'\nassert solution('4 4 1 -') == '1'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n8 2 7 -\n1 1 1 2\n''') == '2'\nassert solution('''\n8 2 7 -\n1 2 3 4\n''') == '1'\n\nassert solution('''\n9 2 7 -\n1 1 1 2\n''') == '4'\nassert solution('''\n9 2 7 -\n1 2 3 4\n''') == '3'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 3 -\") == \"0\"\nassert solution(\"8 2 5 -\") == \"1\"\nassert solution(\"9 2 7 -\") == \"4\"\nassert solution(\"5 6 3 -\") == \"3\"\nassert solution(\"9 6 3 -\") == \"3\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n') == '3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '3'\nassert solution('5 5\\n1 2 3\\n2 3 5\\n3 4 5\\n1 4 8') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3') == '3'\nassert solution('4 4') == '2'\nassert solution('5 4') == '1'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '3'\nassert solution('4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4') == '6'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\n2 1') == '6'\nassert solution('3 4\\n2 3 1') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\n2 1') == '6'\nassert solution('3 4\\n2 3 1') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 4\") == \"24\""
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n2 1\n2 3''') == '6'\nassert solution('''3 5\n1 2\n1 2\n1 3\n1 4\n2 3''') == '36'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '24'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n2 3 1\") == \"6\"\nassert solution(\"3 5\\n4 1 2 1\") == \"48\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 4\") == \"24\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\nprint('Tests passed')\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\nprint(solution('''\n2\n1 2\n''')) == '1'\nprint(solution('''\n5\n3 4 5 1 2\n''')) == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\nassert solution('3 4 5 1 2') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2\n''') == '2'\nprint(solution('''\n4\n3 4 2 1\n'''))\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n5\n3 4 5 1 2\n''') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '1'\nassert solution('1 2') == '1'\nassert solution('5') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '2'\nassert solution('5 3 4 5 1 2') == '1'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 4 5 1 2') == '1'\nassert solution('2\\n1 2') == '2'"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n1 3 1\n2 1 2\n1 1 1\n''') == '4'\nassert solution('''\n1 2\n2 3\n4 5\n''') == '2'\nassert solution('''\n1 1\n1 1\n''') == '0'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"9\"\nassert solution(\"3 3\") == \"4\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9'\nassert solution('''3 3\n1 3 1\n2 1 2\n1 1 1\n''') == '4'\nassert solution('''3 3\n1 3 1\n2 1 2\n1 1 1\n''') == '0'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '9'\nassert solution('3 3') == '4'\nassert solution('4 5') == '1'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9') == '6'\nassert solution('2 2 2\\n1 2 1\\n3 3 3') == '4'\nassert solution('4 5 5\\n4 3 1\\n2 3 2\\n3 2 3') == '0'"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '9'\nassert solution('3 3') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n1 3 1\n2 1 2\n1 1 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n1 4 10\n5 2 6\n11 1 3\nSample Output 3:\n4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n1 4 10\n5 2 6\n11 1 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9'\nassert solution('''\n3 3\n1 3 1\n2 1 2\n1 1 1\n''') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 4 10\\n5 2 6\\n11 1 3\\n') == '9'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"9\"\nassert solution(\"3 3\") == \"4\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 5 2 5\") == \"6\"\nassert solution(\"4\\n2 2 2 5\\n3 3\\n4 4\") == \"3\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\", \"Empty\"\nassert solution(\"2 1 3 4\") == \"6\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n') == '6'\nassert solution('4\\n3 1 2 3\\n2 4\\n1 3\\n1 4\\n3 5\\n') == '5'"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 3 4\\n 1 2\\n 1 3\\n 3 4') == '6'\nassert solution('4\\n3 1 5 2\\n1 2\\n1 3\\n2 4') == '3'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n\") == \"6\"\nassert solution(\"4\\n3 4 5 6\\n1 2\\n1 3\\n2 4\\n\") == \"3\"\nprint(\"solution() is correct.\")\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n2 1 3 4\n1 2\n1 3\n3 4''') == '6'\nassert solution('''5\n2 1 4 5 3\n1 2\n1 3\n2 4\n3 4''') == '3'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 10\n5 8\n''') == '18'\nassert solution('''\n2 17\n121 121\n89 98\n''') == '265'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '18'\nassert solution('3') == '265'\nassert solution('1') == '8'\nassert solution('2') == '18'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1 10\\n5 8') == '18'\nassert solution('3\\n17 144\\n121 121\\n89 98') == '265'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 10\n5 8\n''') == '18', 'First'\nassert solution('''\n3\n17 144\n121 121\n89 98\n''') == '265', 'Second'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 10\\n5 8\\n1 10\\n') == '18\\n25\\n10'\nassert solution('2 10\\n1 10\\n5 8\\n') == '18\\n25\\n10'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n10 2\n5 8\n1 9\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2\n8 3\n9 10\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 10\n5 8''') == '18'\nassert solution('''2 1\n3 4''') == '2'\nassert solution('''3 2\n1 2\n3 4''') == '4'\nassert solution('''4 2\n1 2\n3 4''') == '1'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 10\\n5 8\\n') == '18\\n8\\n'\nassert solution('2\\n1 10\\n5 8\\n') == '265\\n25\\n10\\n'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 10\\n5 8\\n') == '18'\nassert solution('2 1\\n7 5\\n') == '8'\nassert solution('3 2\\n7 6\\n') == '10'\nassert solution('4 1\\n7 6\\n') == '0'\nassert solution('5 1\\n7 6\\n') == '0'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 10\\n5 8\\n\") == \"18\\n8\\n\"\nassert solution(\"3\\n17 144\\n121 121\\n89 98\\n\") == \"265\\n25\\n10\\n\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"0.50000000\"\nassert solution(\"5 5\") == \"12.50000000\""
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"0.50000000\"\nassert solution(\"5 5\") == \"12.50000000\""
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"0.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '0.50000000'\nassert solution('5 5') == '12.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '0.5'\nassert solution('5 5') == '12.5'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"0.50000000\"\nassert solution(\"5 5\") == \"12.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n0 0\\n1 1\\n2 1\\n1 0') == '0.50000000'\nassert solution('5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4') == '12.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n0 0\n1 1\n1 0\n''') == '0.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '0.50000000'\nassert solution('5 5') == '12.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '0.50000000'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"4 1 3\") == \"2\"\nassert solution(\"4 0 4\") == \"1\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3\") == \"2\"\nassert solution(\"4 0 4\") == \"1\""
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 1 3\n0 1\n1 2\n2 3\n1''') == '2'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\nassert solution('''4 0 4\n0 2\n0 1\n2 1\n2 3\n\n''') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 0 1\n0 1\n1 2\n2 3\n1\n''') == '1'\nassert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\n\nassert solution('''\n2 1 3\n0 1\n1 2\n2 3\n1\n''') == '1'\n\nassert solution('''\n1 2 3\n0 1\n0 2\n''') == '1'\n\n'''\n//The first line contains three integers, $S$, $E$ and $C$. The first integer ($1\\le S \\le 50{.}000$) denotes the total number of spies in the network (yourself not included), the second integer ($0 \\le E \\le S$) denotes the total number of enemies in the network and the third integer specifies the total number of connections ($0 \\le C \\le 10^5$) between spies in the network.\n\n//Then follow $C$ lines, with two integers $0\\leq S_1<S$ and $0\\leq S_2<S$ on each line, indicating that there is a connection from spy $S_1$ to spy $S_2$. These connections are not symmetric.\n\n//Finally, one line with $E$ integers, indicating that these spies are enemies.\n\n//You may assume that you can message every spy in the network directly.\n\n//You can send any message to any spy in the network (either private or public).\n\n//You may assume that you can send messages to every enemy spy only once.\n\n//Return the minimum number of messages you need to send to other spies, counting both private and public messages.\n''') == '2'"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3') == '2'\nassert solution('4\\n1 1\\n1 2\\n1 3\\n2 1') == '1'\nassert solution('4\\n0 2\\n0 1\\n2 1\\n2 3\\n1 2') == '2'\n\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1 3') == '2'\nassert solution('4 0 4') == '1'"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\nprint('All tests passed.')"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 2 2\n''') == '6', \"First\"\n\nassert solution('''\n4 3 3\n''') == '30', \"Second\"\n\nassert solution('''\n6 7 1\n''') == '60', \"Third\"\n\nassert solution('''\n1 1 2\n''') == '6', \"Fourth\"\n\nassert solution('''\n2 2 2\n''') == '12', \"Fifth\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\""
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\\n\") == \"6\"\nassert solution(\"2 2 2\\n\") == \"30\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2 1\n''') == '6'\nassert solution('''\n1 2 2\n''') == '30'\nassert solution('''\n2 2 2\n''') == '24'"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\n\nfrom math import sqrt\n\nfor a in range(2, 10):\n    for b in range(2, 10):\n        for c in range(2, 10):\n            if a**2 + b**2!= c**2:\n                if a > b:\n                    a, b = b, a\n                if b > c:\n                    b, c = c, b\n                if a == b or a == c:\n                    continue\n                if a == b and a + b == c:\n                    continue\n                # print(a, b, c)\n                print(a, b, c)\n                for d in range(1, 10):\n                    if not (a == d or a + b == d or a + c == d or b == d or b + c == d or c == d):\n                        if sqrt(a**2 + b**2) == sqrt(c**2 + d**2):\n                            if a + b + c + d == 100:\n                                print(a, b, c, d)\n                                print((a, b, c, d))\n                                print((a, b, c, d) % 10**9 + 7)\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n\"\"\"\n\n\"\"\"---SOLUTION---\"\"\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'impossible'\n\nassert solution('1') == '2021'\n\nassert solution('5') == '2022'\n\nassert solution('1') == 'impossible'\n\nassert solution('3') == '2021'"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2020 2020 2020\") == \"2021 2020 2020\"\nassert solution(\"2\\n1 9999999\") == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 9999999\n''') == \"impossible\"\n\nassert solution('''\n3\n2020 2020 2020\n''') == \"2021 2020 2020\"\n\nassert solution('''\n3\n0 0 0\n''') == \"impossible\"\n\nassert solution('''\n3\n2 9999999\n''') == \"impossible\"\n\nassert solution('''\n1\n100 100 100\n''') == \"impossible\""
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 9999999') == \"impossible\"\nassert solution('2 1 9999999') == \"impossible\"\nassert solution('3 2 1 9999999') == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == '2021 2020 2020'\n\nimport os\nimport sys"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2021 2020 2020'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n2020 2020 2020''') == '2021 2020 2020'\nassert solution('''2\n1 9999999''') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 3\n2 3 4\n''') == 'impossible'\nassert solution('''\n0 1 2\n0 1 3\n''') == 'impossible'\nassert solution('''\n3 3 2\n3 2 3\n3 3 1\n''') == 'impossible'\nassert solution('''\n4 5 6\n4 5 7\n5 5 6\n5 5 7\n6 5 5\n6 5 7\n7 5 5\n7 5 6\n''') == 'impossible'\nassert solution('''\n6 5 8\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n''') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('6') == 'impossible'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == \"11\"\nassert solution(input_string_1) == \"2\""
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '1'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"11\""
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"15\\n19\") == \"2\"\nassert solution(\"19\\n15\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('30 70') == '11'\nassert solution('66 69') == '2'"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5') == '1'\nassert solution('30 70') == '11'\nassert solution('66 69') == '2'"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '10'\nassert solution('10') == '100'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '0'\nassert solution('3\\n') == '0'\nassert solution('4\\n') == '0'\nassert solution('5\\n') == '0'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n80 30\n10 40\n90 40\n''') == '1'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'begin repairs'"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2 0\n>@\n>~\n''') == \"2\"\nassert solution('''\n3 5 1\n>>@<<\n>~#~<\n''') == \"4\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\nassert solution('10 10 1') == 'begin repairs'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 0\") == \"2\"\nassert solution(\"3 5 1\") == \"4\""
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n>@\n>~\n''') == '1'\nassert solution('''\n3\n>>@<<\n>~#~<\n''') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2 0\n>@\n>~\n''') == '2'\n\nassert solution('''\n3 5 1\n>>@<<\n>~#~<\n''') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5 0\n>@<\n>~#~<\n>>>>~\n''') == '2'\nassert solution('''\n5 5 1\n>>@<<\n>~#~<\n>>>>~\n''') == '4'\nassert solution('''\n5 5 2\n>>@<<\n>~#~<\n>>~#<\n''') == '1'\nassert solution('''\n5 5 3\n>@<<\n>~#~<\n>>~#<\n''') == '0'\nassert solution('''\n5 5 4\n>>@<<\n>~#~<\n>>~#<\n''') == '0'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 5 0\",\n    \"~@~<\",\n    \">@<<\",\n) == \"4\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\nassert solution('3 5 0') == 'begin repairs'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('143175=120') == '14+31+75=120', f'Expected: 14+31+75=120, got: {solution(\"143175=120\")}'\nassert solution('5025=30') == '5+025=30', f'Expected: 5+025=30, got: {solution(\"5025=30\")}'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"143175=120\"\n) == \"14+31+75=120\", \"Wrong!\"\nassert solution(\n    \"5025=30\"\n) == \"5+025=30\", \"Wrong!\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n\n\"\"\""
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n143175=120\n''') == '14+31+75=120'\nassert solution('''\n5025=30\n''') == '5+025=30'\nassert solution('''\n12345678910111213141516171819202122232425262728293031323334353637383940414214314414615161718192\n''') == '123+45678910111213141516+17+18+19+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6+6+6+7+7+7+8+8+8+9+9+9+10+10+10+11+11+11+12+12+12+13+13+13+14+14+14+15+15+15+16+16+16+17+17+17+18+18+18+19+19+19+20+20+2+2+3+3+4+4+4+5+5+5+6"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''143175=120''') == '14+31+75=120', 'Wrong answer'\nassert solution(\n    '''5025=30''') == '5+025=30', 'Wrong answer'"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('143175=120') == '14+31+75=120', \"Wrong answer\"\nassert solution('5025=30') == '5+025=30', \"Wrong answer\""
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8\n1\n3\n2\n4\n1\n5\n2\n4\n''') == '1 2'\nassert solution('''\n8\n1\n2\n3\n4\n5\n6\n7\n1\nSample Output 3:\n-1\n''') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1 -1\"\nassert solution(\"8\") == \"1 2\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '1 2'\nassert solution('8\\n1\\n2\\n3\\n4\\n1\\n5\\n2\\n4\\n') == '-1'\n\nimport sys\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n8\n1\n2\n3\n4\n5\n6\n7\n1\n''') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2\\n'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '1 2'\nassert solution('4\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '-1'\nassert solution('4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '1 -1'\nassert solution('4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '1 -1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1\n2\n4\n1\n5\n2\n4\nSample Output 3:\n1 2\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1 2'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n3\\n5\\n1\\n4\\n4\\n4\\n4') == '1 2'\nassert solution('10\\n2\\n7\\n5\\n6\\n5\\n4\\n2\\n4') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8\n1\n3\n2\n4\n1\n5\n2\n4\n''') == '1 2'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1101\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"101\") == \"1\"\nassert solution(\"110\") == \"0\"\nassert solution(\"111\") == \"1\""
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n0''') == '0'\nassert solution('''1101''') == '1'\nassert solution('''1\n1''') == '1'\nassert solution('''1\n0''') == '0'\nassert solution('''1\n1''') == '1'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\nassert solution('01') == '0'\nassert solution('1') == '0'\nassert solution('1') == '0'\n\n------------------------------------------\nQuestion\n-----\nhttps://app.codility.com/programmers/lessons/5-prefix_sums/frog_jumps/\n\n------\n1. Take input from STDIN\n2. Read input as string\n3. Store the input in 1D list\n4. Create and return a new list of same length as input, which would contain '0' for each element and '1' for the element '1'\n5. Return the resultant list\n\n'''"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1101') == '1'\nassert solution('1') == '1'\nassert solution('11') == '2'\nassert solution('01') == '1'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1101\"\n) == \"1\"\nassert solution(\n    \"1011\"\n) == \"0\"\nassert solution(\n    \"0111\"\n) == \"2\"\nassert solution(\n    \"1000111\"\n) == \"4\"\nassert solution(\n    \"1101110111\"\n) == \"8\""
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\nassert solution('1011') == '0'\nassert solution('10') == '0'\nassert solution('1000000') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1101') == '1'\nassert solution('101') == '0'\nassert solution('1') == '0'"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1'\nassert solution('2 1') == '0'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 1 6 3 6\") == \"3\"\nassert solution(\"7 3 4 2 6 5 6 1\") == \"2\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"3 1 3 1\") == \"1\"\nassert solution(\"2 2 1\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"7 3 4 2 6 5 6 1\") == \"3\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''\n5 1\n2 1 1 1 1\n2 3\n1 3\n1 3\n2 4\n1 5\n2 6\n3 7\n1 8\n2 9\n3 10\n1 11\n2 12\n3 13\n1 14\n2 15\n3 16\n1 17\n2 18\n3 19\n''') == '18'\nassert solution('''\n2 1\n2 3\n1 2\n''') == '0'\nassert solution('''\n5 1\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n''') == '2'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '0'\nassert solution('5 2') == '2'\nassert solution('5 4') == '1'\nassert solution('5 7') == '2'\nassert solution('5 8') == '2'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1') == '1'\nassert solution('10 1') == '0'\nassert solution('5 2') == '2'\nassert solution('10 2') == '8'\nassert solution('5 3') == '2'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '1\\n0\\n2\\n'\nassert solution('2 1') == '3\\n'"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n\"\"\") == \"\"\"1\n0\n2\n\"\"\", \"Test\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 4\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6 4\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 1\n1 1\n1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 1\n3 1\n\"\"\") == \"1\""
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '1'\nassert solution('2 1') == '0'\nassert solution('3 3') == '2'\nassert solution('7 3 4 2 6 5 6 1') == '3'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1') == '4.000000'\nassert solution('4 2') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '4.000000'\nassert solution('2 4 3 4') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1\\n2 3\\n') == '4.000000', solution.__name__\nprint('You are awesome!!!', solution.__name__, ':)')\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1') == '5.000000'\nassert solution('5 2') == '5.000000'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4.000000\"\nassert solution(\"4 2\\n2 4 3 4\") == \"3.666666\""
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 1') == '4'\nassert solution('4 2') == '3.5'\nprint('Done')\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1\\n1 2 3 4') == '5.000000'\nassert solution('5 2\\n2 4 3 4') == '4.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1\") == \"3.333333\"\nprint(solution(input()))\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1\\n2 4 3 4') == '3.666666'\nassert solution('4 2\\n2 4 3 4') == '4.0'"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1\\n2 3\\n4 5') == '4.000000'\nassert solution('2 2\\n4 3 4') == '3.666666'\nassert solution('3 3\\n6 7 7') == '6.666667'\nassert solution('4 4\\n8 9 8 9') == '8.333333'\nassert solution('5 5\\n10 11 10 11') == '10.166667'"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\nassert solution('2 2 5 5') == '0.750'\n\"\"\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\nassert solution('4 3 6 7') == '1.375'\nassert solution('3 5 8 6') == '-1.500'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 5') == '0.750'\nassert solution('3 2 2') == '0.500'\nassert solution('3 2 1') == '1.000'\nassert solution('2 3 4') == '1.000'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n''') == '0.750'\nassert solution('''\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.625'\nassert solution('''\n4 4 5 5\n1.0 1.0\n0.0 0.0\n1.0 0.0\n0.0 1.0\n''') == '0.375'\nassert solution('''\n4 4 5 5\n2.0 2.0\n1.0 1.0\n0.0 0.0\n1.0 0.0\n''') == '0.375'\nassert solution('''\n2 4 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.375'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 5 5\\n2.0 2.0\\n4.0') == '0.750'\nassert solution('2 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0') == '0.625'"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n\"\"\") == \"0.750\"\nassert solution(\"\"\"\n2 3 1\n1.0 1.0\n0.0 1.0\n0.0 1.0\n\"\"\") == \"0.000\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n\"\"\") == '0.625'\nassert solution(\"\"\"\n3 1 0.1 0.2 0.3\n0.2 0.1 0.1 0.2\n0.3 0.2 0.3\n\"\"\") == '0.2'\nassert solution(\"\"\"\n3 1 0.1 0.2 0.3\n0.2 0.1 0.1 0.2\n0.3 0.2 0.3\n\"\"\") == '0.2'\nassert solution(\"\"\"\n3 1 0.1 0.2 0.3\n0.2 0.1 0.1 0.2\n0.3 0.2 0.3\n\"\"\") == '0.2'\nassert solution(\"\"\"\n3 1 0.1 0.2 0.3\n0.2 0.1 0.1 0.2\n0.3 0.2 0.3\n\"\"\") == '0.2'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 5 5\\n2.0 2.0\\n4.0\\n1.0 0.0\\n0.0 1.0\\n1.5 0.0\\n0.0 2.0') == '0.625'\nassert solution('2 1 2 2\\n1.0 1.0\\n1.0 1.0\\n0.0 0.0') == '0.5'\n\n'''\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 5 5\") == \"0.750\"\nassert solution(\"2 2 5 5\") == \"0.625\"\n\n\"\"\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '2', \"First\"\nassert solution('''\n3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0\n''') == '37', \"Second\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 4') == '41'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 4') == '37'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3\\n1 2 4') == '2'\nassert solution('4\\n4\\n0 3 6\\n4 0 3\\n0 0 2 1\\n0 0 3 0') == '37'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n') == '2'\nassert solution('2 2\\n1 1 1\\n0 0 0\\n0 0 1\\n') == '1'\nassert solution('1 2\\n2 2\\n0 3\\n') == '1'\nassert solution('1 4\\n4 0 4\\n0 0 2\\n0 0 3\\n') == '41'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"4 4\") == \"37\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '42'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"4 4\") == \"37\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 4') == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '37'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"10\"\nassert solution(\"1 1\") == \"2\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 2\n1234\n1 4\n1 4\n1 4\n1 4\n\"\"\") == \"10\"\nassert solution(\"\"\"\n5 4\n1234\n1 1\n1 2\n1 3\n1 4\n\"\"\") == \"1 4\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '3'\nassert solution('10 2') == '7'\nassert solution('10 8') == '3'\nassert solution('100 4') == '4'\nassert solution('100 9') == '4'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n1234\n1 1\n1 2\n1 3\n1 4\n''') == '1'\nassert solution('''\n4\n1234\n1 1\n1 2\n1 3\n1 4\n''') == '4'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2') == '1 2'\nassert solution('6 7') == '3 4 5 6 7'\nassert solution('6 5') == '3 5 4 6 7'\nassert solution('10 4') == '10 9 8 7 6 5 4 3 2 1'\nassert solution('10 3') == '1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1234\\n1 4\\n1 4\\n1 4\\n') == '10\\n14\\n18\\n'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n1234\n1 4\n1 4\n''') == '10'\nassert solution('''\n4 4\n1234\n1 1\n1 2\n1 3\n1 4\n''') == '1'\n\n\"\"\""
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 3\n1234\n1 4\n1 4\n1 4''') == '10'\nassert solution('''4 4\n1234\n1 1\n1 2\n1 3\n1 4''') == '1'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1234\\n1 4\\n1 4\\n1 4\") == \"10\\n14\\n18\\n\"\nassert solution(\"4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\") == \"1\\n4\\n9\\n16\\n\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1234\\n1 4\\n1 4\\n1 4') == '10\\n14\\n18\\n','sample test 1'\nassert solution('4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4') == '1\\n4\\n9\\n16\\n','sample test 2'\nassert solution('15\\n4321\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\\n1 19\\n1 20\\n1 21\\n1 22\\n1 23\\n1 24\\n1 25\\n1 26\\n1 27\\n1 28\\n1 29\\n1 30\\n1 31\\n1 32\\n1 33\\n1 34\\n1 35\\n1 36\\n1 37\\n1 38\\n1 39\\n1 40\\n1 41\\n1 42\\n1 43\\n1 44\\n1 45\\n1 46\\n1 47\\n1 48\\n1 49\\n1 50\\n1 51\\n1 52\\n1 53\\n1 54\\n1 55\\n1 56\\n1 57\\n1 58\\n1 59\\n1 60\\n1 61\\n1 62\\n1 63\\n1 64\\n1 65\\n1 66\\n1 67\\n1 68\\n1 69\\n1 70\\n1 71\\n1 72\\n1 73\\n1 74\\n1 75\\n1 76\\n1 77\\n1 78\\n1 79\\n1 80\\n1 81\\n1 82\\n1 83\\n1 84\\n1 85\\n1 86\\n1 87\\n1 88\\n1 89\\n1 90\\n1 91\\n1 92\\n1 93\\n1 94\\n1 95\\n1 96\\n1 97\\n1 98\\n1 99\\n1 100\\n1 101\\n1 102\\n1 103\\n1 104\\n1 105\\n1 106\\n1 107\\n1 108\\n1 109\\n1 110\\n1 111\\n1 112\\n1 113\\n1 114\\n1 115\\n1 116\\n1 117\\n1 118\\n1 119\\n1 120\\n1 121\\n1 122\\n1 123\\n1 124\\n1 125\\n1 126\\n1 127\\n1 128\\n1 129\\n1 130\\n1 131\\n1 132\\n1 133\\n1 134\\n1 135\\n1 136\\n1 137\\n1 138\\n1 139\\n1 140\\n1 141\\n1 142\\n1 143\\n1 144\\n1 145\\n1 146\\n1 147\\n1 148\\n1 149\\n1 150\\n1 151\\n1 152\\n1 153\\n1 154\\n1 155\\n1 156\\n1 157\\n1 158\\n1 159\\n1 160\\n1 161\\n1 162\\n1 163\\n1 164\\n1 165\\n1 166\\n1 167\\n1 168\\n1 169\\n1 170\\n1 171\\n1 172\\n1 173\\n1 174\\n1 175\\n1 176\\n1 177\\n1 178\\n1 179\\n1 180\\n1 181\\n1 182\\n1 183\\n1 184\\n1 185\\n1 186\\n1 187\\n1 188\\n1 189\\n1 190\\n1 191\\n1 192\\n1 193\\n1 194\\n1 195\\n1 196\\n1 197\\n1 198\\n1 199\\n1 200\\n1 201\\n1 202\\n1 203\\n1 204\\n1 205\\n1 206\\n1 207\\n1 208\\n1 209\\n1 210\\n1 211\\n1 212\\n1 213\\n1 214\\n1 215\\n1 216\\n1 217\\n1 218\\n1 219\\n1 220\\n1 221\\n1 222\\n1 223\\n1 224\\n1 225\\n1 226\\n1 227\\n1 228\\n1 229\\n1 230\\n1 231\\n1 232\\n1 233\\n1 234\\n1 235\\n1 236\\n1 237\\n1 238\\n1 239\\n1 240\\n1 241\\n1 242\\n1 243\\n1 244\\n1 245\\n1 246\\n1 247\\n1 248\\n1 249\\n1 250\\n1 251\\n1 252\\n1 253\\n1 254\\n1 255\\n1 256\\n1 257\\n1 258\\n1 259\\n1 260\\n1 261\\n1 262\\n1 263\\n1 264\\n1 265\\n1 266\\n1 267\\n1 268\\n1 269\\n1 270\\n1 271\\n1 272\\n1 273\\n1 274\\n1 275\\n1 276\\n1 277\\n1 278\\n1 279\\n1 280\\n1 281\\n1 282\\n1 283\\n1 284\\n1 285\\n1 286\\n1 287\\n1 288\\n1 289\\n1 290\\n1 291\\n1 292\\n1 293\\n1 294\\n1 295\\n1 296\\n1 297\\n1 298\\n1 299\\n1 300\\n1 301\\n1 302\\n1 303\\n1 304\\n1 305\\n1 306\\n1 307\\n1 308\\n1 309\\n1 310\\n1 311\\n1 312\\n1 313\\n1 314\\n1 315\\n1 316\\n1 317\\n1 318\\n1 319\\n1 320\\n1 321\\n1 322\\n1 323\\n1 324\\n1 325\\n1 326\\n1 327\\n1 328\\n1 329\\n1 330\\n1 331\\n1 332\\n1 333\\n1 334\\n1 335\\n1 336\\n1 337\\n1 338\\n1 339\\n1 340\\n1 341\\n1 342\\n1 343\\n1 344\\n1 345\\n1 346\\n1 347\\n1 348\\n1 349\\n1 350\\n1 351"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5''') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"3 5 4\") == \"1\"\nassert solution(\"6 4 5\") == \"2\""
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 4\\n3 4\\n') == '1'\nassert solution('3\\n1 3\\n3 4\\n') == '1'\nassert solution('4\\n3 2\\n3 4\\n') == '2'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n3 3 2\n1 3\n2 3\n3 4\n''') == '1'\nassert solution(\n'''\n5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 3') == '1'\nassert solution('5 2 4') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('2 3 1') == '3'\nassert solution('3 4 1') == '1'\nassert solution('4 5 1') == '2'\nassert solution('5 4 2') == '3'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('5 2 4') == '1'\nassert solution('8 1 3') == '1'\nassert solution('5 2 2') == '0'\nassert solution('9 2 3') == '2'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 3') == '1'\nassert solution('5 2 4') == '2'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 2 3\\n1 3\\n2 3\\n3 4\"\n    ) == \"2\"\nassert solution(\n    \"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\"\n    ) == \"1\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n9999 0 10000 0 0 1\n9999 0 10000 0 0 1\n''') == 'no'\nassert solution('''\n1\n9999 0 10000 0 0 1\n''') == 'yes'\nassert solution('''\n3\n9999 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'yes'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n') == 'yes'\nassert solution('3\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n') == 'yes'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'no'\nassert solution('2') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'no'\nassert solution('''\n1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'yes'\nassert solution('''\n1\n9998 0 9999 0 0 1\n9999 0 10000 0 0 1\n2\n9997 0 9998 0 0 1\n9998 0 9999 0 0 1\nSample Output 2:\nno\n''') == 'no'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"yes\"\nassert solution(\"2\") == \"no\"\nassert solution(\"3\") == \"no\""
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"yes\", \"Garry and Jerry should be able to see the same cloud cover in the sky!\"\nassert solution(\"2\") == \"no\", \"Garry and Jerry should not be able to see the same cloud cover in the sky!\""
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n\") == \"no\"\nassert solution(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"no\"\nassert solution(\"2\") == \"yes\""
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n0 0 1\n2\n0 1 1\n2 2 2\n1 2 3\n3 3 3\n''') == 'yes'\nassert solution('''3\n0 0 1\n2\n0 1 2\n1 1 2\n''') == 'yes'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n') == 'no'"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 2\\n1 3\\n1 4\\n') == 'YES\\n1 3\\n2 1\\n3 2'"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 3\n1 2\n1 3\n1 4\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n1 1\n1 3\n2 2\n3 2\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n5 5\n1 2\n1 3\n1 4\n1 5\n2 4\n3 4\n3 5\n4 5\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('5 1') == 'YES'\nassert solution('5 2') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == \"YES\\n1 3\\n2 1\\n3 2\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n1 2\n2 3\n1 3\n''') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'NO\\n1 3\\n2 1\\n3 2\\n4 1'\n''')\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'NO'\nassert solution('1') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'YES'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('4 3') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n1 2\n2 3\n3 4\n1 3\n2 4\n''') == 'YES', 'Should be YES'\nassert solution('''\n5 4\n1 2\n1 3\n1 4\n''') == 'NO', 'Should be NO'\nprint('Tests passed')\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\nassert solution('''3 3\n0 = 1\n1 = 2\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'inconsistent'\nassert solution('5 5') == 'consistent'\nprint('all tests passed')\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"inconsistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'consistent'\nassert solution('1 2 3') == 'inconsistent'\nprint(solution())\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\n\"\"\"\n--- Part Two ---\nAs you may have guessed, the game of chess is played on a grid. The chessboard is an $N \\times $N$ board, where $N$ is the size of the chessboard. Each square on the board has a different color: red (upper-left) vs. white (upper-right) vs. blue (lower-left) vs. yellow (lower-right).\n\nFor this part, your friend is trying to find out who has won the tournament.\n\nYou know that the tournament is played between rival teams, and that players take turns placing their pieces on a particular space in the grid (starting with white pieces in the upper-left corner). That is, the first player to move makes the first move on the grid. The first player to move on a space (or the space behind their piece) is the winner. (For example, if white makes the first move on a 7th space, then black wins the game, since they can only move on spaces 4, 5, or 6.)\n\nCan you determine who the winner of the game is?\n\nHere is a starting point: (It does not need to win the game, but it is relevant to the point that you know that the game ends.)\n\nLet $K$ be the number of black and white players in the tournament, respectively.\n\nConsider the following $K$-sized list of lists, $matchsticks$, where each list is a single match:\n\n$matchsticks = [[1,2],\n                [2,1],\n                [1,4],\n                [4,1],\n                [2,4],\n                [4,2]]$\nWrite a function that, given such a list, determines whether any two players have matching pairs of pieces. If so, return those players' identifiers. Otherwise, return an empty list.\n\nFor example, given the following list $matchsticks$, one possible solution is:\n\n[1,2]\n[1,4]\n[2,4]\nBecause we have matches of size 2, the first player to make a match wins.\n\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"inconsistent\"\nassert solution(\"3 3\") == \"inconsistent\"\nassert solution(\"5 5\") == \"consistent\""
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"0 > 1\\n\"\n    \"1 = 2\\n\"\n    \"0 = 2\\n\"\n) == \"inconsistent\"\nassert solution(\n    \"5 5\\n\"\n    \"0 = 1\\n\"\n    \"1 = 2\\n\"\n    \"3 = 4\\n\"\n    \"0 > 3\\n\"\n    \"1 > 4\\n\"\n) == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'''\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"0 > 1\\n\"\n    \"1 = 2\\n\"\n    \"0 = 2\\n\"\n) == \"inconsistent\"\n\nassert solution(\n    \"5 5\\n\"\n    \"0 = 1\\n\"\n    \"1 = 2\\n\"\n    \"3 = 4\\n\"\n    \"0 > 3\\n\"\n    \"1 > 4\\n\"\n) == \"consistent\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1.57079633'\nassert solution('4') == '1.57079633'\nassert solution('5') == '0.78539816'\nassert solution('6') == '3.14159265'\nassert solution('7') == '1.57079633'"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\\n2 3 3\\n1 3 5\") == \"2.82842712475\"\nassert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == \"41938.65135885\"\nassert solution(\"0\\n2 2 2\") == \"3.1415926536\"\nassert solution(\"0\\n2 2 2\\n3 4 5\") == \"3.1415926536\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 0 0\\n2 1 0\\n0 0 0\\n0 0 1\\nSample Output 2:41938.65135885') == '1.57079633'\nassert solution('5\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\nSample Output 2:41938.65135885') == '41938.65135885'\nassert solution('5\\n0 0 0\\n0 0 1\\n0 0 0\\nSample Output 2:41938.65135885') == '0.0'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0 0\\n1 1 0\\n0 0 0') == '1.57079633'\nassert solution('2\\n0 0 0\\n1 1 0\\n0 0 0') == '1.57079633'\nassert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '1.57079633'\n\"\"\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '1.57079633'\nassert solution('4\\n1 2 3\\n-1 2 3\\n0 0 0\\n0 0 1\\n') == '41938.65135885'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 0 0\n1 1 0\n0 0 0\n''') == '1.57079633'\nassert solution('''\n4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n''') == '41938.65135885'\n\n'''\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n'''"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\") == \"1.57079633\"\nassert solution(\"4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n\") == \"41938.65135885\"\nassert solution(\"3\\n1 1 2\\n0.5 0.5 0\\n-1 -1 0\") == \"2.0921704422\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n1 0 0\n1 1 0\n0 0 0\n0 0 1''') == '1.57079633'\nassert solution('''4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0''') == '41938.65135885'\n\n\"\"\"\nimport math\n\nclass Solution:\n    def answer(self, stdin: str) -> str:\n        '''\n        What is the smallest volume cylinder that can enclose all the stars?\n        What is the area of the cylinder?\n        A cylinder is defined by the radius, length, and height. A cylinder is formed by a point, axis, and a height.\n        If we use a single cylinder to enclose all the stars, then we can find the area and radius of the largest cylinder.\n        For a cylinder to enclose all the stars, we can always place a circle with radius r = distance / 2.\n        We can now check the size of the volume of the cylinder: |r| * |h|.\n        If the cylinder is tilted about its axis, then the length of the cylinder is 3*sqrt(r**2 + h**2), but the radius is equal to h.\n        The equation of the cylinder is |r| * h = length.\n        We can solve for length using this equation:\n        Length = 2 * sqrt(r**2 + h**2)\n        and the equation of the cylinder is:\n        r = length / 2\n        The final answer is the volume of the cylinder.\n        '''\n        def volume(r, h):\n            return math.pi * (r**2) * h\n\n        r, h = list(map(int, stdin.split()))\n        l = 2 * math.sqrt(r**2 + h**2)\n        return str(volume(r, h) + math.pi * r**2)\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '0.2'\nassert solution('''\n3\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.64454015'\nassert solution('''\n4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n0 0 1\n''') == '41938.65135885'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\nassert solution('''\n4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n''') == '41938.65135885'\nassert solution('''\n3\n1 1 1\n1 0 0\n0 0 0\n''') == '5.6717416512000014'\nassert solution('''\n4\n1 1 0\n1 1 0\n0 0 0\n0 0 1\n''') == '3.877586771859961'\nassert solution('''\n5\n1 0 0\n0 1 0\n0 0 0\n0 0 1\n0 0 2\n''') == '0.35'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\na''') == '5'\nassert solution('''12\naabcdefghijklmnopqrstuvwxyz\nb''') == '8'\nassert solution('''9\nabcdxxy\na''') == '5'\nassert solution('''13\naabcdefghijklmnopqrstuvwxyz\na\nabcdxxy\na''') == '5'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\nassert solution(stdin='''\n11\nsabcabcfabc\n''') == \"3\"\nassert solution(stdin='''\n18\ntrutrutiktiktappop\n''') == \"4\"\n'''\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''10\nsabcabcfabc\n''') == '3'\n\nassert solution('''11\ntrutrutiktiktappop\n''') == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"4\"\n\nprint(solution(input))\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('11') == '3'\nassert solution('18') == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('8') == '8'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '2'\nassert solution('3') == 'huge'\nassert solution('5 1 6 3 2 4') == '5'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '5'\nassert solution('3') == 'huge'\nassert solution('4') == 'huge'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n2 3 1\n3 1 2\n3 2 1\n3 3 1\n4 6 5 1 3 2\n4 6 5 1 3 2''') == \"2\"\nassert solution('''7\n3 1 2 1 1 3 1\n1 3 2 2 1 1 1\n1 3 2 1 1 3 1\n3 2 1 1 1 1 1\n1 3 2 1 1 1 3\n3 2 1 1 1 1 1\n3 2 1 1 1 1 2\n2 1 1 1 1 1 1''') == \"1\""
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == \"2\"\nassert solution('6') == \"5\""
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n2 3 1\n3 1 2\n''') == '2'\nassert solution('''6\n5 1 6 3 2 4\n4 6 5 1 3 2\n''') == '5'\nassert solution('''100\n10 1 20 3 4\n100 6 1 20 4\n''') == '10000'\nassert solution('''50\n10 1 20 3 4\n50 6 1 20 4\n''') == '50000'\nassert solution('''30\n1 1 2 3 4\n1 1 2 3 4\n''') == '1'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"6\") == \"5\"\nassert solution(\"3\") == \"huge\"\n\n\"\"\"\n\n\"\"\"\nThe idea is to use the fact that if we have two sorted arrays, one sorted from the left and one sorted from the right, then the difference between the two sorted arrays must be at most 1.\n\nAlgorithm:\n\n1. Take the two largest integers from each list and compare them to see if they are the same. If they are, we can just return 1.\n\n2. If they are not the same, we can divide the array in half.\n\n3. Repeat the same operation, but this time the largest integer is less than both. If it's the same, we can just return 1.\n\n4. If it's not the same, we need to do a lot of work, we need to sort the first half of the array, and sort the second half. Then we can compare the sorted array's left and right side.\n\nIf they are the same, we need to just split the sorted array in half and take the difference. We'll then repeat step 3, 4, etc., until we get to the end.\n\nIf they are not the same, we need to split in half the first sorted array, and sort the second half. Then we need to compare their left and right sides.\n\n5. If they are not the same, we need to do the same as in step 1, but this time we will take the largest of the two numbers from the first sorted array and the smallest of the second sorted array. If they are the same, we can just return 1.\n\n6. If they are not the same, we need to sort the first half of the first sorted array, and sort the second half of the second sorted array. Then we can compare their left and right sides.\n\n7. If they are not the same, we need to do the same as step 3, 4, 5, but this time we will take the smaller of the two numbers from the first sorted array and the larger of the second sorted array.\n\n8. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n9. If they are not the same, we need to do the same as in step 3, 4, 5, 6, but this time we will take the smaller of the two numbers from the first sorted array and the larger of the second sorted array.\n\n10. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n11. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n12. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n13. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n14. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n15. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n16. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n17. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n18. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n19. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n20. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n21. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n22. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n23. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n24. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n25. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n26. If they are not the same, we need to do the same as in step 1, 2, 3, 4, 5, but this time we will take the smallest of the two numbers from the first sorted array and the largest of the second sorted array.\n\n27. If they are not the same, we need to do"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 3 1') == '2'\nassert solution('6\\n5 1 6 3 2 4') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '4\\n3 1 2 3\\n2 3 1') == '2'\nassert solution(\n    '4\\n5 1 6 3 2 4\\n4 6 5 1 3 2') == '5'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3 1\\n3 1 2\\n') == '2'\nassert solution('6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\\n') == '5'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 1\n0 10 20\n0 10\nSample Output 1:\n4\n\nSample Input 2:\n5 1\n0 10 20\n0 40\n0 50\n0 60\nSample Output 2:\n11\n''') == '11'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '3 1\\n'\n    '0 10 20\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10\\n'\n    '0 10"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\nassert solution('''2 5\n1 5\n3 4''') == '6'\nassert solution('''2 2\n0 10''') == '8'\nassert solution('''2 3\n0 10\n0 10''') == '8'\nassert solution('''2 1\n0 10''') == '10'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1\\n0 10 20\\n0 10') == '4'\nassert solution('6 1\\n0 10 20 26 40 50\\n0 40') == '9'"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '4'\nassert solution('6 1') == '9'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 1\n0 10 20\n0 10\nSample Input 3:\n8 1\n0 10 20\n0 10\n10 20\n0 30\n0 20\nSample Output 3:\n-1''') == '-1'\nassert solution('''4 1\n0 10 20\n0 10\n0 20\n20 30\n20 40\nSample Output 4:\n10\n''') == '10'"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\n0 10 20\n0 10\nSample Input 3:\n6 1\n0 10 20\n10 20\n20 30\n40 50\n50 60\nSample Output 3:\n13\n''') == '13'\n\nassert solution('''\n3 1\n0 10 20\n0 10\nSample Input 4:\n6 1\n0 10 20\n10 20\n20 30\n40 50\n50 60\n40 60\nSample Output 4:\n9\n''') == '9'\n\nassert solution('''\n2 2\n0 0\n10 10\nSample Input 5:\n3 1\n0 10 20\n0 10\nSample Output 5:\n10\n''') == '10'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '3 1\\n0 10 20\\n0 10\\n') == '4'\nassert solution(\n    '6 1\\n0 10 20 26 40 50\\n0 40\\n') == '9'\nassert solution(\n    '3 1\\n0 10 20\\n0 10\\n') == '4'\nassert solution(\n    '5 1\\n0 10 20 30 40 50\\n0 50') == '11'\nassert solution(\n    '5 2\\n0 10 20 30 40 50\\n0 50') == '10'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 1\n0 10 20\n0 10\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3 2\n0 10 20\n0 40\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '4'\nassert solution('5 1 2 3 4') == '5'\nassert solution('5 1 2 3 4 5') == '6'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('shuffle([1,2,1,2])') == 'equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\n''') == 'not equal'\nassert solution('''sorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\n''') == 'equal'\n\n'''\nsample output\nnot equal\n\n'''\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('shuffle([1,2,1,2])') == 'equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('shuffle([1,2,1,2])') == 'equal'\nprint('YOUR CODE IS CORRECT!')\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"shuffle([1,2,1,2])\") == \"equal\""
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\n\"\"\") == \"not equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))''') == \"not equal\"\nassert solution('''sorted(concat([3,2,1],[4,5,6]))''') == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"concat(shuffle([1,2]),shuffle([1,2]))\"\n    \"shuffle([1,2,1,2])\"\n) == \"not equal\"\nassert solution(\n    \"sorted(concat([3,2,1],[4,5,6]))\"\n    \"[1,2,3,4,5,6]\"\n) == \"equal\"\n\nimport sys\nimport os\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'equal'\nassert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'not equal'''\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == '1'\nassert solution(r\"\"\"\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == 'Oh no'\n\"\"\""
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('3 2') == '1'"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3') == \"Oh no\"\nassert solution('1 2') == \"1\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n''') == 'Oh no'\nassert solution('''\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n''') == '1'\nassert solution('''\n2 2\n2 3\n1 2 1 2\n2 3 1 2\n''') == '2'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3 2\\n1 2 1 2\\n2 3 1 2') == 'Oh no'\nassert solution('1 3\\n3 2\\n1 2 1 2\\n2 3 1 2') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\n\nassert solution(stdin=\"1 2\") == \"Oh no\"\nassert solution(stdin=\"3 2\") == \"1\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n''') == 'Oh no', 'First'\n\nassert solution('''\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n''') == '1', 'Second'\n\nassert solution('''\n1 4\n4 2\n1 2 1 2\n2 3 1 2\n''') == 'Oh no', 'Third'\n\nassert solution('''\n1 6\n6 2\n1 2 1 2\n2 3 1 2\n''') == '1', 'Fourth'\n\nassert solution('''\n1 10\n10 2\n1 2 1 2\n2 3 1 2\n''') == 'Oh no', 'Fifth'"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\") == \"3\"\nassert solution(\"4\\n4\\n2\\n3\") == \"impossible\"\nassert solution(\"5\\n5\\n4\\n4\\n2\\n3\") == \"3\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3'\nassert solution('''\n3\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == 'impossible'\nassert solution('''\n4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3'\nassert solution('''\n4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"5 5\") == \"impossible\"\nassert solution(\"8 2\") == \"impossible\"\nassert solution(\"7 4\") == \"impossible\"\nassert solution(\"20 20\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4 5 1\") == \"impossible\"\nassert solution(\"4\\n1 1 1\") == \"impossible\"\nassert solution(\"5\\n2 2 1\") == \"3\"\nprint(\"YOUR CODE IS CORRECT!\")\n\n'''\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1') == '3'\nassert solution('3 2\\n1 2\\n2 3\\n3 4') == 'impossible'\nprint('all tests passed')\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == '3'\nassert solution('5 5') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == '3'\n'''"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'impossible'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"4\"\n\n'''\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n2 1 1 1 3\n''') == '2'\n\nassert solution('''\n2\n2 1 1 1 3\n''') == '4'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"4\""
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 1 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4\n3 1 4\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5\n4 1 1 1 4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 1 1 1 3\"\n) == \"2\"\n\nassert solution(\n    \"1\"\n) == \"1\"\n\nassert solution(\n    \"22\"\n) == \"4\"\n\nassert solution(\n    \"a\"\n) == \"No quotation\"\n\nassert solution(\n    \"aa\"\n) == \"No quotation\""
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()\n\nSample Input 3:\n1\n20 20\nSample Output 3:\n5\n\nSample Input 4:\n10\n1 2 3 4 5 6 7 8 9\nSample Output 4:\n7\n\nSample Input 5:\n10\n1 2 3 4 5 6 7 8 9 10\nSample Output 5:\n10\n\nSample Input 6:\n10\n12 34 56 7 8 9 10 11 12\nSample Output 6:\n12\n\nSample Input 7:\n10\n1 2 3 4 5 6 7 8 9 10 11 22\nSample Output 7:\n10\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n22\n''') == '4'\nassert solution('''\n2\n2 2 2\n''') == '2'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('4') == ''\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 1 3\") == \"2\"\nassert solution(\"1\") == \"4\"\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\n\"\"\""
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n3 1 5') == '3'\nassert solution('4\\n1 2 3 4') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4 1 3') == '3'\nassert solution('4 5 1 2') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\n\"\"\"\n\na = input()\nb = input()\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\n\n'''\nfrom itertools import combinations\nn = int(input())\nl = list(map(int, input().split()))\nans = 0\n\nfor i in range(2, n+1):\n    for j in range(n):\n        if j+i > n:\n            break\n        elif l[j]%2==0:\n            continue\n        elif l[j+i-1]%2==0:\n            continue\n        elif l[j+i-2]%2==0:\n            continue\n        else:\n            ans += 1\nprint(ans)"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10\n1 2 4 5 7 8 9 10 10\n\"\"\") == \"6\"\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n1 2 4 5 6 7 8 9 10\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''a+b-c''') == '- +d-'\nassert solution('''a-b+d-c''') == '+ -d+'\nassert solution('''knuth-morris-pratt''') == '<any> <empty>'''"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", \"Should return - +d-\".format(solution(\"a+b-c\"))\nassert solution(\"a-b+d-c\") == \"- +d-\", \"Should return - +d-\".format(solution(\"a-b+d-c\"))\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('a+b-c') == '- +d-'\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('a+b-c') == '- +d-', 'WRONG!'\nassert solution('a-b+d-c') == '- +d-', 'WRONG!'\nprint('All Tests Passed!')"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) in (output1, output2)\n'''\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''a+b-c\na-b+d-c''') == '- +d-'''"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''a+b-c''') == '- +d-'\nassert solution('''a-b+d-c''') == '- +d-'\n''')\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", \"Should be - +d-.\"\nassert solution(\"a-b+d-c\") == \"a-b+d-c\", \"Should be a-b+d-c.\"\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''a+b-c''') == '- +d-'\nassert solution('''a-b+d-c''') == '- +d-'\nassert solution('''knuth-morris-pratt''') == '<any> <empty>'''\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"- +d-\n\nprint(solution(\"knuthmorrispratt\"))"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 1') == '3'\nassert solution('3 2') == '3'\nassert solution('3 3') == '5'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 3\") == \"5\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 0\") == \"0\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n''') == '0\\n1\\n1\\n2\\n3\\n3\\n4\\n4\\n5\\n5\\n6\\n6\\n7\\n7\\n8\\n8\\n9\\n9\\n10\\n10\\n'''"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 0') == '1'"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 1') == '2'\nassert solution('3 2') == '3'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 0\") == \"0\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 3\") == \"5\"\nassert solution(\"3 4\") == \"7\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 1') == '3'\nassert solution('3 2') == '2'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"7 6\") == \"2\"\nassert solution(\"3 6\") == \"3\"\n\ninput = stdin.readline().strip().split()\nfrogs_num, position = int(input[0]), list(map(int, input[1:]))\nchanges = int(stdin.readline().strip())\n\nfor change in range(changes):\n    frog_index = int(stdin.readline().strip())\n    frog_change = int(stdin.readline().strip())\n\n    if frog_index == 0:\n        frogs_num += frog_change\n    elif frog_index == 1:\n        position[frog_index] += frog_change\n    elif frog_index == 2:\n        position[frog_index] -= frog_change\n\nprint(frogs_num)\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1\\n0\\n7') == '0\\n1\\n3'\nassert solution('2 2\\n0\\n6\\n1\\n2\\n3\\n4\\n5') == '1\\n3\\n5\\n3\\n4\\n5\\n6\\n7\\n8'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1''') == '2\\n4 6'\nassert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6''') == '0'\nassert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6''') == '4 6'"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n') == '2\\n4 6\\n'\nassert solution('4 8\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n') == '0\\n'\nassert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n') == '0\\n'\nassert solution('5 8\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n') == '2\\n4 6\\n'\nassert solution('3 6\\n1 2 2\\n1 3 2\\n1 4 2\\n2 5 1\\n2 6 2\\n3 5 1\\n4 5 2\\n5 6 3\\n') == '0\\n'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 6\n1 2 1\n2 3 2\n3 4 3\n4 5 2\n5 6 1\n6 7 1\n7 8 2\n8 9 3\n9 10 3\n10 11 2\n11 12 1\n12 13 1\n13 14 1\n14 15 1\n15 16 1\n16 17 1\n17 18 1\n18 19 1\n19 20 1\n20 21 1\n21 22 1\n22 23 1\n23 24 1\n24 25 1\n25 26 1\n26 27 1\n27 28 1\n28 29 1\n29 30 1\n30 31 1\n31 32 1\n32 33 1\n33 34 1\n34 35 1\n35 36 1\n36 37 1\n37 38 1\n38 39 1\n39 40 1\n40 41 1\n41 42 1\n42 43 1\n43 44 1\n44 45 1\n45 46 1\n46 47 1\n47 48 1\n48 49 1\n49 50 1\n50 51 1\n51 52 1\n52 53 1\n53 54 1\n54 55 1\n55 56 1\n56 57 1\n57 58 1\n58 59 1\n59 60 1\n60 61 1\n61 62 1\n62 63 1\n63 64 1\n64 65 1\n65 66 1\n66 67 1\n67 68 1\n68 69 1\n69 70 1\n70 71 1\n71 72 1\n72 73 1\n73 74 1\n74 75 1\n75 76 1\n76 77 1\n77 78 1\n78 79 1\n79 80 1\n80 81 1\n81 82 1\n82 83 1\n83 84 1\n84 85 1\n85 86 1\n86 87 1\n87 88 1\n88 89 1\n89 90 1\n90 91 1\n91 92 1\n92 93 1\n93 94 1\n94 95 1\n95 96 1\n96 97 1\n97 98 1\n98 99 1\n99 100 1\n100 101 1\n101 102 1\n102 103 1\n103 104 1\n104 105 1\n105 106 1\n106 107 1\n107 108 1\n108 109 1\n109 110 1\n110 111 1\n111 112 1\n112 113 1\n113 114 1\n114 115 1\n115 116 1\n116 117 1\n117 118 1\n118 119 1\n119 120 1\n120 121 1\n121 122 1\n122 123 1\n123 124 1\n124 125 1\n125 126 1\n126 127 1\n127 128 1\n128 129 1\n129 130 1\n130 131 1\n131 132 1\n132 133 1\n133 134 1\n134 135 1\n135 136 1\n136 137 1\n137 138 1\n138 139 1\n139 140 1\n140 141 1\n141 142 1\n142 143 1\n143 144 1\n144 145 1\n145 146 1\n146 147 1\n147 148 1\n148 149 1\n149 150 1\n150 151 1\n151 152 1\n152 153 1\n153 154 1\n154 155 1\n155 156 1\n156 157 1\n157 158 1\n158 159 1\n159 160 1\n160 161 1\n161 162 1\n162 163 1\n163 164 1\n164 165 1\n165 166 1\n166 167 1\n167 168 1\n168 169 1\n169 170 1\n170 171 1\n171 172 1\n172 173 1\n173 174 1\n174 175 1\n175 176 1\n176 177 1\n177 178 1\n178 179 1\n179 180 1\n180 181 1\n181 182 1\n182 183 1\n183 184 1\n184 185 1\n185 186 1\n186 187 1\n187 188 1\n188 189 1\n189 190 1\n190 191 1\n191 192 1\n192 193 1\n193 194 1\n194 195 1\n195 196 1\n196 197 1\n197 198 1\n198 199 1\n199 200 1\n200 201 1\n201 202 1\n202 203 1\n203 204 1\n204 205 1\n205 206 1\n206 207 1\n207 208 1\n208 209 1\n209 210 1\n210 211 1\n211 212 1\n212 213 1\n213 214 1\n214 215 1\n215 216 1\n216 217 1\n217 218 1\n218 219 1\n219 220 1\n220 221 1\n221 222 1\n222 223 1\n223 224 1\n224 225 1\n225 226 1\n226 227 1\n227 228 1\n228 229 1\n229 230 1\n230 231 1\n231 232 1\n232 233 1\n233 234 1\n234 235 1\n235 236 1\n236 237 1\n237 238 1\n238 239 1\n239 240 1\n240 241 1\n241 242 1\n242 243 1\n243 244 1\n244 245 1\n245 246 1\n246 247 1\n247 248 1\n248 249 1\n249 250 1\n250 251 1\n251 252 1\n252 253 1\n253 254 1\n254 255 1\n255 256 1\n256 257 1\n257 258 1\n258 259 1\n259 260 1\n260 261 1\n261 262 1\n262 263 1\n263 264 1\n264 265 1\n265 266 1\n266 267 1\n267 268 1\n268 269 1\n269 270 1\n270 271 1\n271 272 1\n272 273 1\n273 274 1\n274 275 1\n275 276 1\n276 277 1\n277 278 1\n278 279 1\n279 280 1\n280 281 1\n281 282 1\n282 283 1\n283 284 1\n284 285 1\n285 286 1\n286 287 1\n287 288 1\n288 289 1\n289 290 1\n290 291 1\n291 292 1\n292 293 1\n293 294 1\n294 295 1\n295 296 1\n296 297 1\n297 298 1\n298 299 1\n299 300 1\n300 301 1\n301 302 1\n302 303 1\n303 304 1\n304 305 1\n305 306 1\n306 307 1\n307 308 1\n308 309 1\n309 310 1\n310 311 1\n311 312 1\n312 313 1\n313 314 1\n314 315 1\n315 316 1\n316 317 1\n317 318 1\n318 319 1\n319 320 1\n320 321 1"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '2'\nassert solution('7 8') == '2'\nprint('\u2705')\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 8') == '2'\nassert solution('5 6') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n\"\"\") == \"2\""
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '0'\nassert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1') == '2 4 6'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"1 2\"\nassert solution(\"3 5\") == \"1 2 3\"\nassert solution(\"8 7\") == \"7\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n''') == '2\\n4 6\\n'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n''') == '2'\nassert solution('''\n5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n''') == '4 6'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '4'\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n''') == '1 2 3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '4'\nassert solution('1 1') == '4'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"4\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"1 3\") == \"6\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"4 5 6\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '4'\nassert solution('6') == '1'\nprint('all test cases passed')"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n12\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '4 5 6'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6''') == '4 5 6 1 2 3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\") == \"4\\n5\\n6\\n1\\n2\\n3\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''12\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6''') == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution('''10\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6''') == '1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"CPCC\") == '1'\nassert solution(\"PPPPCCCC\") == '8'"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\nassert solution('PPPPPCCCC') == '11'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '1'\nassert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\nassert solution('PPPPPP') == '4'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == \"1\"\nassert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\""
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\nassert solution('CCCCCCCCCCCCCCCC') == '6'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n\nassert solution('C') == '1'\nassert solution('P') == '1'\nassert solution('CPCCCC') == '5'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\nprint('\"Run\" is good practice.')"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2 1\n1 2\n2 3\n2\n''') == '1 2 3'\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '3'\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '1 2 3'\nassert solution('''\n3 3 1\n1 2\n2 3\n3\n''') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 1') == '1 2 3'\nassert solution('3 2 1') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2 1\n1 3\n2 3\n3\n''') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 1\n1 2\n2 3\n2\n''') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1\\n2 3\\n3 4\\n1 2\\n') == '1 2 3 4'\nassert solution('1 1 1\\n1 1\\n1 1\\n') == '1'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 1\\n1 2\\n2 3\\n2\\n') == '1 2 3'\nassert solution('3 2 1\\n1 3\\n2 3\\n3\\n') == '1 2 3'\n\nstdin = \"\"\"\n1 2 1\n1 3\n2 3\n3\n\"\"\"\n\nprint(solution(stdin))\n\n\"\"\"\n1 2 1\n1 3\n2 3\n3\n\"\"\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1\\n1 3\\n2 3\\n2\\n') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\\n1 3\\n2 3\\n2\") == \"1 2 3\"\nassert solution(\"3 2 1\\n1 3\\n2 3\\n3\") == \"3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2 1\n1 2\n2 3\n2\n''') == '1 2 3'\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '1 3 2'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 1') == '1 2 3'\nassert solution('3 2 1') == '1 2 3'\nassert solution('2 3 1') == '1 2 3'\nassert solution('2') == '1 2 3'\nassert solution('1') == '1 2 3'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n2 4 2 3 4\n''') == '39'\nprint(solution('''\n5 1\n1 0 1 1 1\n'''))\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4 5 6\\n4\") == \"7\"\nassert solution(\"7\\n1 2 3 4 5 6\\n4\") == \"4\"\nassert solution(\"1\\n1 2 3 4 5 6\\n4\") == \"2\"\nassert solution(\"1\\n1 2 3 4 5 6\\n9\") == \"0\"\nassert solution(\"1\\n1 2 3 4 5 6\\n7\") == \"0\""
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n2 4 2 3 4\n''') == '39', 'Test #1 fail'\nassert solution('''5 1\n1 0 1 1 1\n''') == '4', 'Test #2 fail'\nprint('All tests passed!')"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '39'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"39\"\nassert solution(\"5 1\") == \"4\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '39'\nassert solution('5 1') == '4'\nassert solution('20 2') == '17'\n\n'''\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '39', \"Wrong!\"\nassert solution('5 1') == '4', \"Wrong!\""
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '39'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\nassert solution('5 1\\n1 0 1 1 1') == '4'\nassert solution('5 5\\n0 0 0 0 0') == '0'\nassert solution('5 2\\n2 3 4') == '2'"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"10\"\nassert solution(\"5 3 4 2 1\") == \"4\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"1 1 2\"\nassert solution(\"4 6\") == \"1 2 3\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 2 3'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 1 2'\nassert solution('5 2') == '1 1 2'\nassert solution('6 8') == '1 1 2'\nassert solution('13 16') == '1 1 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\nxx.\nxxx''') == '1 1 2'\nassert solution('''4 4\nxx.xxx\nxx.xxx\nxx.xxx\nxx.xxx''') == '1 1 2'\nassert solution('''4 4\nxx.xxx\nxx.xxx\nxx.xxx\nxx.xxx''') == '1 1 2'"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 2 3'\nassert solution('5 5') == '1 2 3 4'\nassert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 2 3'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_data.split('\\n')) == result.split('\\n')\n'''\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"1 1 2\"\nassert solution(\"4 6\") == \"1 1 2\"\n\"\"\""
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\nxx.\nxxx\n...\n''') == '1 1 2'\nassert solution('''\n4 6\nxx....\nxx.xxx\n...xxx\n...xxx\n''') == '1 2 3'\n\n'''\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2 1 3'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n...x\nxx.x\n...x''') == '1 1 3'\nassert solution('''4 6\nxx....\nxx.xxx\n...xxx\n...xxx''') == '2 4 2'\nprint(solution(input()))\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"1\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 1 2\n1 2 1\n0 2 0\n0 1 0\n\"\"\") == \"indistinguishable\"\nassert solution(\"\"\"\n2 0 1\n1 1 1\n0 0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\nassert solution('0 0 0') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 1 2') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == \"indistinguishable\"\nassert solution('2 0 1') == \"0\""
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == \"indistinguishable\"\nassert solution('2 0 1') == \"0\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1 2') == 'indistinguishable'\nassert solution('3 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1 2\n1 2 1\n0 2 0\n0 1 0\n''') == 'indistinguishable'\nassert solution('''\n2 0 1\n1 1 1\n0 0 0\n''') == '0'"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0') == '-1'\nassert solution('1') == '1111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0110\\n1001') == '1111'\nassert solution('0\\n1') == '-1'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0110') == '1111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"1010\") == \"-1\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('0000') == '-1'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10000\") == \"+0000\"\nassert solution(\"1111\") == \"+000-\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"+-1+\"\nassert solution(\"0\") == \"+-0+\"\nassert solution(\"-1\") == \"-+1\"\nassert solution(\"-1\") == \"-+1\"\nassert solution(\"+1\") == \"+1-\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0+1\"\nassert solution(\"11\") == \"0-1+1\"\nassert solution(\"111\") == \"0-1+1+1-1\"\nassert solution(\"1111\") == \"0+1+1+1+1-1\"\nassert solution(\"1010\") == \"0+1+0+1+0-1\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"+1\"\nassert solution(\"111\") == \"+11\"\nassert solution(\"-1\") == \"-1\"\nassert solution(\"-1-1\") == \"-1-\"\nassert solution(\"11-\") == \"11-\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '+1'\nassert solution('11\\n') == '+0-1'\nassert solution('1111\\n') == '+1-0-1'\nassert solution('-1\\n') == '-1'\nassert solution('-1011\\n') == '-1010-1'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-', solution('1111')\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6 4') == '11'\nassert solution('10 20 10') == '45'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 8 3 2') == '9'\nassert solution('5 5 5 5') == '8'\nassert solution('5 6 6 6') == '7'"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 8 3 2') == '9'\nassert solution('1 2') == '2'\nassert solution('1') == '1'\nassert solution('1 1') == '2'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '10'\nassert solution('''\n1 1 1 1\n1 2\n2 1 1 1\n2 2\n''') == '3'\nassert solution('''\n3 4 4 4\n3 4\n4 4 4\n1 2 3 2\n1 4 3 4\n1 2 3 4\n''') == '7'\nassert solution('''\n3 4 4 4\n3 4\n4 4 4\n1 2 3 2\n1 4 3 4\n1 2 3 4\n''') == '10'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 8 3 2') == \"9\"\nassert solution('1 2') == \"2\"\nassert solution('7 3 4') == \"10\"\nassert solution('5 6') == \"9\"\nassert solution('1 3 2') == \"2\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''2 2\n1\n1 2\n''') == '2'\nassert solution('''2 1 1 1\n1 2''') == '2'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n') == '9'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n') == '9'"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n\"\"\") == \"9\"\nassert solution(\"\"\"\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n\"\"\") == \"9\"\nassert solution(\"\"\"\n2 1 1 1\n2 2\n1\n1\n1 2 1\nSample Output 2:\n\"\"\") == \"\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 8 3 2') == \"9\"\nassert solution('1 2') == \"1\"\nassert solution('1 2 3 4') == \"5\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 7 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == \"9\"\n\nassert solution('''\n2 1 1 1\n2 2\n1\n1\n1 2 1\nSample Output 3:\n2\n''') == \"2\"\n\nassert solution('''\n4 1 1 1\n1\n1\n1\n1\n''') == \"4\"\n\nassert solution('''\n5 2 2 1\n2\n2\n2\n2\n1\n''') == \"2\""
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010''') == '2'\n\nassert solution('''3 3 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 3:\n7\n\nassert solution('''3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 4:\n-1''') == '-1'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3 1\n2 2\n1 1 R\n010\n000\n000\n''') == '2', 'Should be 2'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 4 2') == '7'"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '7'\n\"\"\"\n\nn, m, k = [int(x) for x in stdin.strip().split(' ')]\n\nfor i in range(k):\n    x, y, c = [int(x) for x in stdin.strip().split(' ')]\n    m = x\n    n = y\n    \n    def write(w, h):\n        if w < 0:\n            w += h\n        if w > h:\n            w = h\n        if w > h:\n            w -= h\n        w = w // 2\n        for i in range(w):\n            print('L', end='')\n        for i in range(w):\n            print('U', end='')\n        for i in range(w):\n            print('R', end='')\n        for i in range(w):\n            print('D', end='')\n        print()\n    if m == 0:\n        write(n, m)\n    else:\n        if c == 'R':\n            write(n, m)\n        else:\n            write(m, n)\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3 1\n2 2\n1 1 R\n010\n000\n000\n''') == '2'\nassert solution('''\n3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n''') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000') == \"2\"\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == \"7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000') == \"2\"\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == \"7\""
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010\n000\n000''') == '2'\nassert solution('''3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 3:\n7\n''') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010\n000\n000\n''') == \"2\"\nassert solution('''3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n''') == \"7\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '4'\nprint(solution(input()))\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4'\nassert solution('8') == '4'"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '4'"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n1 2\\n2 1') == '1'\nassert solution('1\\n3\\n1 1\\n3 2') == '0'\nassert solution('1\\n2\\n2 3\\n3 4') == '1'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n2 2 1 2 3\n''') == '2'\nassert solution('''\n8\n1 2 4 1 1 2 5 1\n''') == '4'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '4'\nprint('All tests passed!')"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n') == '1'\nassert solution('5\\n2 2 1 2 3') == '2'\nassert solution('8\\n1 2 4 1 1 2 5 1') == '4'\n\nprint('All test cases passed')\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n2 2 1 2 3\n''') == '2'\nassert solution('''8\n1 2 4 1 1 2 5 1\n''') == '4'''\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 2 1 2 3\n''') == '2', \"Sample Test #1 Failed\"\nassert solution('''\n8\n1 2 4 1 1 2 5 1\n''') == '4', \"Sample Test #2 Failed\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == 'NE'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n') == '3'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3') == 'NE'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4') == '1'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\nD 1 4') == '2'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\nD 1 4') == '3'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\nD 1 4\\nP 3\\nD 4 4\\nD 5 6') == '2'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"NE\"\nassert solution(\"\"\"6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\nD 5 5\nP 5\n\"\"\") == \"1 2 3\"\n\"\"\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\nD 4 2\\nD 1 3\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n\") == \"3\"\nassert solution(\"1\\n2\\nD 4 2\\nD 2 4\\nD 5 6\\nD 6 2\\nD 2 4\\nP 4\\nD 6 2\\nP 4\\n\") == \"3\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n\") == \"NE\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n\") == \"3\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"NE\"\n\nassert solution(\"\"\"6\nD 6 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"2 3\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == \"1\"\nassert solution('5') == \"1\"\nassert solution('4') == \"1\"\nassert solution('3') == \"1\"\nassert solution('2') == \"2\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"1\\n3\\nNE\"\nassert solution(\"6\\nD 5 3\\nD 3 5\\nD 6 6\\nP 3\\nD 4 2\\nP 4\") == \"1\\n1\\n2\\n3\\n2\\n3\\n\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == 'NE'\nassert solution('''6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == '1'\nassert solution('''6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == 'NE'"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\n\nassert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''2 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '5'\nassert solution('''2 2 1 10\n0 0\n1 4\n3 2\n''') == '4'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 1 10\") == '2'\nassert solution(\"3 3 5 6\") == '5'"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == '2'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5 2 1') == '2'\nassert solution('3 4 5 6') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''\n3 3 3 3\n0 0 0\n0 0 2\n1 1 1\n''') == '6'\nassert solution('''\n2 2 2 2\n0 0\n0 0\n1 1\n''') == '1'\nassert solution('''\n3 3 3 3\n0 0 0\n0 0 2\n1 1 1\n''') == '4'\n\nprint('All Tests Passed')"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1 10\") == \"2\"\nassert solution(\"3 2 5 6\") == \"5\"\nassert solution(\"1 1 1 6\") == \"6\"\nassert solution(\"1 1 1 6\") == \"6\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == \"2\"\nassert solution(\"3 5 1 7\\n1 1 6\\n1 2 2\\n2 3 3\\n3 4 4\\n4 5 5\\n5 6 6\") == \"7\"\nassert solution(\"2 2 3\\n2 2 3\\n2 2 3\\n1 2 2\\n1 2 2\\n1 1 2\\n2 1 2\\n2 1 2\\n1 1 2\\n2 1 2\\n2 2 2\\n1 2 2\\n1 1 2\\n1 2 2\\n2 2 2\\n1 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n2 2 2\\n2 2 2\\n2 1 2\\n1 1 2\\n1 2 2\\n1 1 2\\n2 1 2\\n2 1 2\\n2 2 2\\n2 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 2 2\\n1 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n2 1 2\\n2 2 2\\n1 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n2 2 2\\n1 2 2\\n2 1 2\\n1 2 2\\n2 1 2\\n2 1 2\\n1 2 2\\n1 1 2\\n1 2 2\\n2 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 1 2\\n2 1 2\\n1 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 1 2\\n2 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n2 1 2\\n1 2 2\\n2 1 2\\n1 1 2\\n1 1 2\\n1 2 2\\n2 1 2\\n2 2 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3 3 1 10\\n0 0\\n1 4\\n3 2'\n) == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 2 1 10\\n0 0\\n1 4\\n3 2\\n\") == \"2\"\nassert solution(\n    \"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\\n\") == \"5\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\nassert solution('''5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n''') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n-1.4 0.0 1.4\\n0.4 -1.0 0.0 -1.4\\n-0.1 -0.25 -0.5 -1.2 0.0 0.9\\n0.2 0.5 0.5\\n') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nprint(solution('''4\n-3.2 -6.6 2.5\n4.2 -6.9 3.4\n-2.3 6.5 -5.2\n6.8 4.9 -5.3'''))\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2.0000000000'\nassert solution('5') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"2.0000000000\"\nassert solution(\"2\") == \"1.90000000000\"\nassert solution(\"3\") == \"2.0000000000\""
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n\"\"\") == \"2.0000000000\"\nassert solution(\"\"\"\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n\"\"\") == \"2.0000000000\"\nprint(solution(input))\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\nprint(solution('''\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n'''))"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([1, 9, 5]) == '1'\nassert solution([1, 100, 10]) == '9'\nassert solution([10, 5, 3]) == '11'\nassert solution([10, 15, 5]) == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"5\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([1, 9, 5]) == \"1\"\nassert solution([1, 100, 10]) == \"9\"\nassert solution([1, 100, 100]) == \"19\"\nassert solution([1, 1, 1]) == \"3\"\nassert solution([1, 10, 5]) == \"3\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\""
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\nassert solution('4 3 2 1') == '4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\nassert solution('4 3 2 1') == '4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == '1'\n\nSample Input 3:\n4 5\n4 1 2 3 4\n4 3 2 1\nSample Output 3:\n8\n3 3 2 3 1 3 2 1\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('1') == '1'\nassert solution('1 2 3 4') == '4 4 2 4'\nassert solution('4 5 3 2 1') == '4 4 2 4 1'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n1 2\n''') == '1 1'\nassert solution('''\n4 5\n4 1 2 4 4\n4 3 2 1\n''') == '7 4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n\"\"\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1\n1\n1\nSample Input 3:\n5 5\n5 1 2 4 5\n5 3 2 1\nSample Output 3:\n1\n3 4 1 5 2\n\n''') == '5 2 1'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1\n1\n1\n''') == '1'\n\nassert solution('''\n4 5\n4 1 2 4 4\n4 3 2 1\n''') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"4 5\") == \"7\"\nassert solution(\"4 3 2 1\") == \"4 4 2 4 4 1 4\""
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''2 10 3 2\n1 2 3 4''') == '4'\nassert solution(\n'''10 10 5 0\n1 2 3 4 5 6 7 8 9 10''') == '18'\nassert solution(\n'''2 10 3 2\n2 6 8 5''') == '2'\nassert solution(\n'''10 10 5 0\n1 2 3 4 5 6 7 8 9 10''') == '24'\nassert solution(\n'''2 10 3 2\n2 8 7 6''') == '18'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 10 3 2''') == '4'\nassert solution('''10 10 5 0''') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 10 3 2\n10 10 5 0''') == \"4\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\nassert solution('30 30 30 30 30') == '30'"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 10 3 2\n''') == '4'\n\nassert solution('''\n10 10 5 0\n''') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\nassert solution(\"1 100 100 1\") == \"1\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\nassert solution(\"100 100 3 4\") == \"200\"\nassert solution(\"10 10 5 100\") == \"100\"\nassert solution(\"100 100 100 100\") == \"200\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '2 1 20'\n    ) == '10'\n\nassert solution(\n    '6 100 9294'\n    ) == '111'\n\nassert solution(\n    '4 1 5'\n    ) == '1'\n\nassert solution(\n    '5 1 5'\n    ) == '1'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1 20\n0123456789\n''') == '10'\nassert solution('''\n6 100 9294\n23689\n''') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 1 20\n0123456789''') == '10'\nassert solution('''6 100 9294''') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 1 20\"\n) == \"10\"\nassert solution(\n    \"6 100 9294\"\n) == \"111\"\nassert solution(\n    \"5 9 200\"\n) == \"100\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(f'{2 1 20} {23689}') == '111'\nassert solution(f'{6 100 9294} {23689}') == '1'"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1 20\n0123456789\n''') == '10'\n\nassert solution('''\n6 100 9294\n23689\n''') == '111'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '1.50000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '1.50000 2.66667'\nassert solution('5 2') == '1.50000 3.66667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n1 R 3\\n2 S 4\\n2 R 2\\n3 R 2\\n4 R 2\\n5 S 2') == '1.500000 2.666667'\nassert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 R 2\\n5 S 2') == '1.500000 2.666667'\nprint('all tests passed')\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '1.50000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 2.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\nassert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\nassert solution('0 0') == '0.0 0.0'\nassert solution('1 1') == '1.0 1.0'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 2.666667'\nassert solution('1 1 1\\n1 R 2\\n2 S 1\\n3 S 1\\n2 R 1\\n1 R 2\\n4 S 1\\n3 R 1') == '1.000000 1.500000'\nassert solution('1 1 1\\n1 R 2\\n2 S 1\\n3 S 1\\n2 R 1\\n1 R 2\\n4 S 1\\n3 R 1') == '1.000000 1.000000'\nassert solution('1 1 1\\n1 R 2\\n2 S 1\\n3 S 1\\n2 R 1\\n1 R 2\\n4 S 1\\n3 R 1') == '1.000000 1.000000'\nassert solution('1 1 1\\n1 R 2\\n2 S 1\\n3 S 1\\n2 R 1\\n1 R 2\\n4 S 1\\n3 R 1') == '1.000000 1.000000'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1.5 2.5\"\nassert solution(\"5 2\") == \"0.5\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('4 2') == '1.500000 1.666667'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 6\\n101010\\n111001\\n101001\\n') == '3'\nassert solution('4 5\\n10010\\n01010\\n10101\\n01001\\n') == '3'\n\nIf your solution is correct, it will not be marked as wrong - it will just print the output of your solution.\n\nWhile debugging a program Mirko noticed that a bug in the program may be linked with the existence of so called square killers in the program memory. The program memory is a matrix composed of $R$ rows and $C$ columns consisting only of zeroes and ones. A square killer is a square submatrix in memory, consisting of more than one character, that, when rotated $180$ degrees looks exactly the same. For example, the following matrix contains $3$ square killers:\n\n101010     ....10     ......      101...\n111001     ....01     ...00.      111...\n101001     ......     ...00.      101...\n\nmemory      killer      killer      killer\n\nMirko is wondering if there is a connection between the size of the largest square killer and the bug in the program. Help Mirko by writing a program that, given the layout of the memory, outputs the size of the largest square killer. The size of the square killer is the number of rows (or columns) that the killer consists of. In the example above the killer sizes are $2$, $2$ and $3$, respectively.\n\n-----Input-----\nThe first will contain two integers, $R$ and $C$, smaller than or equal to $300$. The next $R$ lines will each contain $C$ characters (\u20180\u2019 or \u20181\u2019) with no spaces.\n\n-----Output-----\nOutput the size of the largest killer on a single line, or output $-1$ if there are no square killers.\n\n-----Examples-----\nSample Input 1:\n3 6\n101010\n111001\n101001\nSample Output 1:\n3\n\nSample Input 2:\n4 5\n10010\n01010\n10101\n01001\nSample Output 2:\n3\n\nSample Input 3:\n4 6\n10100\n1100\n1011\n1110\n1010\n1100\nSample Output 3:\n-1"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == -1\nassert solution(\"\\n\") == -1\nassert solution(\"\\n\\n\") == -1\nassert solution(\"\\n\\n\\n\") == -1\nassert solution(\"\\n\\n\\n\\n\") == -1\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\nassert solution(sys.stdin.read()) == \"3\"\n\n\"\"\"\n\nfrom itertools import combinations\n\nR,C = [int(i) for i in input().split()]\narray = [[int(i) for i in input().split()] for _ in range(R)]\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"7 7\") == \"7\"\nprint(solution(input()))\n'''"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"3\""
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == -1\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\nassert solution(\"101010\") == 3\nassert solution(\"111001\") == 3\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 6') == \"3\"\nassert solution('4 5') == \"3\"\nassert solution('10010') == \"1\"\nassert solution('01010') == \"2\"\nassert solution('10101') == \"2\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"3\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 6') == '3'\nassert solution('4 5') == '3'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n\") == \"-3 -1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\\n\") == \"3 4\\n3 -1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\n\"\"\"\n\nimport math\n\nstdin_file = 'input.txt'\n\n\"\"\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\n0 0\n0 1\n1 0\n0 -1\n-1 0\"\"\") == \"3 -1\"\nassert solution(\"\"\"4\n2 4\n6 -1\n3 5\n-1 -1\"\"\") == \"3 4\""
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"-3 -1\"\nassert solution(\"4\") == \"3 4\"\nassert solution(\"3\") == \"3 -1\"\n\"\"\"\nfrom itertools import combinations, product\nfrom math import factorial"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == '-3 -1'\nprint('all tests passed')\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1\\n3 1'\nassert solution('''\n4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4\\n3 -1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0 0\"\nassert solution(\"5\") == \"-3 -1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0 0\\n0 1\\n1 0\\n0 -1') == '-3 -1'\nassert solution('5\\n2 4\\n6 -1\\n3 5\\n-1 -1') == '3 4'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 6 5 45 20\n0 0\n2 0\n1 1.5\n''') == '2 5.086781'\nassert solution('''\n3 0.25 2 45 20\n0 0\n2 0\n1 1.5\n''') == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2 12.715255\"\nassert solution(\"1 2\\n0 0\\n2 0\\n1 1.5\") == \"1 12.715255\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"1 2\"\nassert solution(\"3 0\") == \"1 2\"\nassert solution(\"3 1.5\") == \"1 4\"\nassert solution(\"3 0.25\") == \"1 4\"\nassert solution(\"3 4\") == \"1 2\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4 9.787632'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6 5 45 20') == '2 5.086781'\nassert solution('3 0.25 2 45 20') == '1 12.715255'\nassert solution('3 0.5 2 45 20') == '1 12.152912'\nassert solution('3 0.25 5 45 20') == '1 12.542714'\nassert solution('3 0.5 5 45 20') == '1 12.563823'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2 10.083336'"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n0 0\n2 0\n1 1.5\n''') == '2 5.086781'\nassert solution('''2\n0 0\n2 0\n1 1.5\n''') == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n0 0\n2 0\n1 1.5\n3 4 5''') == '2 1.5'\n\nassert solution('''3\n0 0\n2 0\n1 1.5''') == '1 1.5'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5 1 0.5 2') == '1 10.28'\nassert solution('4 5 1 2 0.5') == '2 1.5'\nassert solution('3 3 1 2 0.5') == '1 5.581589'\nassert solution('5 2 2 2 2') == '4 3.0'\nassert solution('0 0 0 0 0') == '0 0 0 0 0'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\") == \"2 5.086781\"\nassert solution(\"3 0.25 2 45 20\\n0 0\\n2 0\\n1 1.5\") == \"1 12.715255\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\") == \"8\"\nassert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\") == \"1\""
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '8'\nassert solution('4') == '1'"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\n0 0 1 0\\n0 0 0 1\\n1 0 1 1\\n0 1 1 1\\n0 0 1 1\\n1 0 0 1\\n') == '8'\nassert solution('4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\\n') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '1\\n'\n    '0 0 1 0\\n'\n    '0 0 0 1\\n'\n    '1 0 1 1\\n'\n    '0 1 1 1\\n'\n    '0 0 1 1\\n'\n    '1 0 0 1\\n'\n    ) == '8'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\nassert solution('''\n10\n5 5 5 5 5 5 5 5 5 5\n4 4 4 4 4 4 4 4 4 4\n3 3 3 3 3 3 3 3 3 3\n1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '288'\nassert solution('''\n10\n5 5 5 5 5 5 5 5 5 5\n4 4 4 4 4 4 4 4 4 4\n3 3 3 3 3 3 3 3 3 3\n1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '288'\nassert solution('''\n10\n5 5 5 5 5 5 5 5 5 5\n4 4 4 4 4 4 4 4 4 4\n3 3 3 3 3 3 3 3 3 3\n1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '468'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8', \"T1\"\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1', \"T2\"\nassert solution('''\n7\n9 0 2 2\n-1 3 2 2\n0 4 5 2\n-3 4 1 4\n-5 0 5 1\n-2 2 6 3\n''') == '2', \"T3\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '8'\nassert solution('4') == '1'"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n0 1 1\\n1 0 1 1\\n0 1 1 1\") == \"8\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '8', \"Wrong answer\"\nassert solution('4') == '1', \"Wrong answer\"\nassert solution('5 1 7 1') == '8', \"Wrong answer\"\nassert solution('1 1 5 1') == '1', \"Wrong answer\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8\n10\n10\n9\n12\n13\n15\n18''') == 'impossible'\n\nassert solution('''1\n1\n1\n1\n1''') == '1 1 1'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n2\n''') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"7\") == \"4 3\"\nassert solution(\"10\") == \"impossible\""
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"4 3\"\nassert solution(\"10\") == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == 'impossible'\nassert solution('4') == '4 3'\nassert solution('3') == '4 3'\nassert solution('8') == '4 3'\nassert solution('9') == 'impossible'"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'impossible'\nassert solution('7') == 'impossible'\nassert solution('10') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('20') == 'impossible'\nassert solution('10') == '4 3'\nassert solution('17') == '4 4'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'impossible'\nassert solution('7') == 'impossible'\nassert solution('10') == '4 3'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '16'\nassert solution('2') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n2\n4\n1\n4''') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"16\"\nassert solution(\"4\") == \"109\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1\n3\n''') == '16'\n\nassert solution('''\n2\n2\n4\n''') == '109'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '9254'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n''') == '109', 'Wrong output'\n\nassert solution('''\n5\n1\n5\n2\n3\n4\n''') == '54', 'Wrong output'\n\nprint('Tests done')"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n4\\n') == '16'\n\nassert solution('4\\n2\\n4\\n') == '109'\n\nassert solution('5\\n1\\n9\\n') == '153'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == \"3\"\nassert solution(sample_input_2) == \"5 1 1 2 2\"\nassert solution(my_input) == \"5 1 1 2 2\""
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"4 3\") == \"1 2 1\"\nassert solution(\"4 3\") == \"1 2 1\"\n\nprint(solution(input()))"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n5 1\\n1 2\\n1 2\\n1 2') == '3'\nassert solution('4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5'"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\nSample Input 3:\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\nSample Output 3:\n4\n1 3 1\n2 3 2\n4 1 0\n2 4 1\n3 1 0\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5 1 1 1 1'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5 1 1 1 2'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n') == '3\\n1 2 1\\n1 2 2'\nassert solution('4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5\\n1 3 1\\n2 3 2\\n4 1 0'\nassert solution('10 3\\n16 10 4 5 3 3\\n9 9 9 9 9\\n1 1\\n') == '8\\n1 1 1\\n1 2 1\\n1 2 2\\n1 2 3\\n1 2 4\\n1 3 1\\n1 3 2\\n1 3 3\\n1 3 4\\n1 4 1\\n1 4 2\\n1 4 3'"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\nprint('All test cases passed')\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"4 3\") == \"4\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"5 3\") == \"3\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"4 3\") == \"5\"\nassert solution(\"10 3\") == \"10\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\nSample Output 2:\nimpossible''') == '1 2'\nassert solution('''2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\nSample Output 2:\n1 2''') == '1 2'"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('6 7') == '1 2 3'\nassert solution('0 1 1') == '1 2'\nassert solution('0 2 2') == '2 1'\nassert solution('3 2 3') == 'impossible'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"impossible\"\nassert solution(\"2 1\") == \"impossible\""
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('2 1') == '1'\nassert solution('10 3') == '10 2 3'\nassert solution('20 3') == 'impossible'\nassert solution('10 1 0') == '10'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1''') == '1 2'\nassert solution('''2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1''') == 'impossible'\nassert solution('''2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\nSample Output 2:\nimpossible\n''') == 'impossible'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\n\nassert solution('''\n2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\n''') == 'impossible'\n\nassert solution('''\n2 2\n2 5\n1 0 0\n3 2 0\n''') == '1 2'\n\nassert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\n\nassert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == 'impossible'"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\nassert solution('''\n2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\n''') == 'impossible'\nprint('All Tests Passed!')"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2 1\") == \"1 2\"\nassert solution(\"2 1\") == \"1 2\"\nassert solution(\"2 1\") == \"1 2\"\nassert solution(\"2 1\") == \"1 2\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('2 1') == 'impossible'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"10\") == \"1 2\"\nassert solution(\"2020\") == \"2 1\""
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\"\"\"\n\nX = int(input())"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('20') == '20 1'"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1 2'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"2 2\"\nassert solution(\"4\") == \"1 2 1\"\nassert solution(\"5\") == \"3 1\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5 2'\nassert solution('2020') == '2020 1'"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nprint('All test cases passed')\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n') == '3 2\\n'\nassert solution('4\\n') == '1 0\\n'\nassert solution('2\\n') == '1 1\\n'\nassert solution('1\\n') == '1 1\\n'\nassert solution('10\\n') == '1 1\\n'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'unique'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\nSample Output 3:\nambiguous\n''') == \"ambiguous\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies''') == \"impossible\",'simple'\nassert solution('''5\n5\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies''') == \"unique\",'small'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'impossible'\nassert solution('1\\n2\\n0') == 'unique'\nassert solution('2\\n1\\n0') == 'impossible'\nassert solution('3\\n3\\n0') == 'impossible'\n\nfor i in range(3, 101):\n    with open(f'input{i}.txt') as f:\n        lines = f.read().splitlines()\n        if len(lines)!= 1:\n            print(f'input{i}:')\n            print(''.join(map(str, lines)))\n            print(''.join(map(str, solution(*lines))))\n            print()\n\nimport os, sys, time\nfrom io import BytesIO\nfrom PIL import Image"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == 'impossible'\nassert solution('''\n3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\nassert solution('''\n2\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\nassert solution('''\n4\n3\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'impossible'\nassert solution('''\n4\n3\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'impossible'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == \"impossible\"\nassert solution('''4\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == \"unique\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    3\n    3\n    0 chocolate\n    1 icecream\n    2 cookies\n    3\n    chocolate\n    icecream\n    cookies\n''') == 'impossible'\nassert solution('''\n    3\n    4\n    0 chocolate\n    1 icecream\n    2 cookies\n    2 chocolate\n    3\n    chocolate\n    icecream\n    cookies\n''') == 'unique'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible'\n\nassert solution('''\n3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\n\nassert solution('''\n5\n6\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\n\nassert solution('''\n5\n2\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'impossible'\n\nassert solution('''\n5\n3\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == \"impossible\"\nassert solution('''\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == \"unique\"\nassert solution('''\n10\n0 cat\n1 chocolate\n2 coffee\n3 milk\n4 icecream\n5 dogs\n6 bread\n7 tomatoes\n8 tomatoes\n9 pizza\n10 pears\n11 cats\n12 chocolates\n13 icecream\n''') == \"ambiguous\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == \"impossible\"\nassert solution('4') == \"unique\"\nassert solution('4\\nchocolate\\ncookies\\nchocolate\\nicecream\\n') == \"unique\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\""
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    abc\n    abc\n    abc\n    abc\n    abcd\n    abcd\n    abcd\n    abcd\n    abc\n    abc\n    abc\n    abc\n    abc\n    \"\"\"\n) == \"3\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 0 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 0 10\n''') == '0'\nassert solution('''\n1 2 10\n''') == '1'\n'''\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 0 1\") == \"0\"\nassert solution(\"0 1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"2\""
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 0 10\n1 2 10''') == '1'"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n''') == '3 zoom out'\n\nassert solution('''\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n.....X.......\n''') == '4 pan'\n\nassert solution('''\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n''') == '2 rotate'\n\nassert solution('''\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n....XXXXXXXXX\n''') == '3 pan'\n\nassert solution('''\n...........\n...........\n...........\n...........\n...........\n...........\n...........\n...........\n...........\n...........\n...........\n...........\n''') == '2 zoom in'"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............XX..............................................\n...........XXX..............................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\nSample Output 2:\n3 zoom out\n\"\"\") == \"3 zoom out\""
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('....XXXX....................................................') == \"1 pan\"\nassert solution('..............................................................................') == \"1 pan\"\nassert solution('.................................................................XXXX..............') == \"1 pan\"\nassert solution('...........................................................XXXX............................................') == \"1 pan\"\nassert solution('...........................................................XXXX.....................XXX............................................') == \"1 pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"...................................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \"..............................................................\"\n    \".............................................................."
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('....XXXX....................................................') == '1 pan'\nassert solution('............................................................') == '1 pan'\nassert solution('............................................................') == '1 pan'\nassert solution('............................................................') == '1 pan'\nassert solution('............................................................') == '1 pan'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"....XXXX....................................................\") == \"1 pan\"\nassert solution(\".......................X.........................................\") == \"3 zoom out\"\nassert solution(\".......................XX.........................................\") == \"2 zoom in\"\nassert solution(\"X....................XX.................XX.....................\") == \"1 pan\"\nassert solution(\"X....................XX.................XX.....................\") == \"3 zoom in\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 pan\\n') == '1 pan'\nassert solution('2 pan\\n') == '1 pan'\nassert solution('3 pan\\n') == '1 pan'\nassert solution('4 pan\\n') == '1 pan'\nassert solution('5 pan\\n') == '1 pan'"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX...........................................\n...........XXX...XX"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 1:\n1 pan\n\nSample Output 2:\n3 zoom out\n\"\"\") == \"1 zoom out\"\n\nassert solution(\"\"\"\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\nSample Output 1:\n1 pan\n\nSample Output 2:\n3 zoom out\n\"\"\") == \"3 zoom out\""
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1  3  1  1  1  2  1  3  4  1  2  4  2  3  4  3  3  4  3  3  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8 20\n  apples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      ''') == 'apples are great!\\ncheck out our\\nfresh apples!'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''20 20\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++''') == '''+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++'''\n\nassert solution('''8 20\napples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      \n''') == '''apples are great!  \n                    \n                    \n                    \n                    \n                    \n                    \n check out our      \n fresh apples!      \n'''"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''8 20\napples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      ''') == 'apples are great!\\n\\n\\n\\n\\n\\n\\n\\ncheck out our\\nfresh apples!'\nprint('All test cases passed.')"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n+-+-+-+-+-+\n|A|A|A|A|\n+-+-+-+\n|B|B|B|\n+-+-+-+\n|C|C|C|\n+-+-+-+-+\n
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8 20\") == \"apples are great!\\n\"\nassert solution(\"7 7\") == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\"\nassert solution(\"3 1\") == \"w3\\n\""
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 20') == 'apples are great!\\n+ oranges are\\n+ way better!\\n+ #oranges>apples\\n++++++++++++++++++++\\ncheck out our fresh apples!'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"abcd\"\nassert solution(\"7 7\") == \"abcdxyz\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"8 20\n + +++ +++ +\n+ + +++ + +\n+ + +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n+ +++ +++ +++\n+ +++ +++ +++\n++++++++++++++++\n+ +++ +++ +++\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"*\"*3 + \"3\" + \"*\"*3 + \"\\n\"*2 + \"*\"*5\nassert solution(\"7 7\") == \"*\\n*\\n*\\n*\\n*\\n*\\n*\\n\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 20') == 'apples are great!\\n'\nassert solution('7 7') == '+++++++\\n' +\n                            '+ +++ +\\n' +\n                            '+ + +++\\n' +\n                            '+ +++ +\\n' +\n                            '+ +++ +\\n' +\n                            '+++++++'"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''HH\nH?''') == '1.5'\n\nassert solution('''THH\nTHT''') == '2.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H??\") == \"1.5\"\n\"\"\""
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\n''') == '3.5'\nassert solution(\n'''\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\n''') == '3.2'\nassert solution(\n'''\n?HH\n?HH\n?HH\n?HH\n?HH\n?HH\n?HH\n?HH\n?HH\n?HH\n''') == '3.0'\nassert solution(\n'''\n?H?\n?H?\n?H?\n?H?\n?H?\n?H?\n?H?\n?H?\n?H?\n?H?\n''') == '2.0'\nassert solution(\n'''\nHTH\nHTH\n?HTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\nHTH\n''') == '4.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('HHHHHHHHHH') == '2.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''H?\n        H?''') == '1.5'\nassert solution('''HH?\n        HH''') == '1.5'\nassert solution('''TT?\n        TT''') == '2.0'\nassert solution('''T?\n        T''') == '1.0'\nassert solution('''?\n        ''') == '0.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"HTH\") == \"2.0\"\nassert solution(\"H\") == \"1.5\"\nassert solution(\"???\") == \"1.5\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('HHHHHHHHHHHHHH') == \"1.5\"\nassert solution('HTTTTTTTTTT') == \"4.0\""
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n\"\"\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('TTTTTT') == '5.0'\nassert solution('?TTT') == '2.5'\n\n--Python--\nfrom typing import List"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n11111\\n11111\\n11111\\n11111') == '1'\nassert solution('4\\n1111\\n1111\\n1111\\n1111') == '6'\nassert solution('10\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0001\n0001\n0011\n1110\n''') == '1'\nassert solution('''\n4\n1111\n1111\n1111\n1111\n''') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '4'\nassert solution('6') == '4'\nassert solution('7') == '4'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '2'\nassert solution('16') == '2'\nassert solution('17') == '5'\nassert solution('32') == '4'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('10') == '2'\nassert solution('16') == '5'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == '0'"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nprint('\"Run\" is good. Great job!')"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n0001\\n0001\\n0011\\n1111') == '1'\nassert solution('4\\n0001\\n0001\\n0011\\n1110') == '6'\nassert solution('4\\n1111\\n1111\\n1111\\n1111') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '1111'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\nh 1 4 1\\nh 10 2 2\\nv 1 10 1\\nv 5 10 3') == '2'\nassert solution('4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3') == '4'"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\\n') == '2'\nassert solution('4\\nh 1 1 1\\nv 2 2 2\\nh 10 1 2\\nv 11 1 3\\n') == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nh 1 4 1\\nh 10 2 2\\nv 1 10 1\\nv 5 10 3\\n') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\nassert solution(['''\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''']) == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''h 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3''') == '4'\nprint(solution('''h 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3'''))\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\nassert solution('''\n4\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\n''') == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\nassert solution('''4\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\n''') == '4'"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 3') == '4'\nassert solution('4 6') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '4'\nassert solution('5 3') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 2\n1 2 3 0\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\nSample Output 3:\n-1\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n\"\"\") == \"4\""
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 5 4 0') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 4') == '-1'\nassert solution('2 5') == '4'\nassert solution('3 6 7') == '4'\nassert solution('2 1 0 0') == '2'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '2'\nassert solution('3 3') == '4'\nassert solution('7 6') == '-1'\nassert solution('2 4') == '2'\nassert solution('2 5') == '2'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4\\n1 0 2 0\\n3 5 4 0') == '2'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n') == '4'\nprint(solution(input))\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\"\nassert solution(\"2 4\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\") == \"4\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\") == \"6\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 3\\n') == '2'\nassert solution('8\\n1 2 1 3 1 3 1 2\\n') == '4'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n1 2 3 3 4 2') == '2'\nassert solution('8\\n1 2 1 3 1 3 1 2') == '4'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\nassert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == '2'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"4\""
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6\n1 2 3 3 4 2\n''') == '2'\nassert solution('''8\n1 2 1 3 1 3 1 2\n''') == '4'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6\n1 2 3 3 4 2\n''') == '2'\n\nassert solution('''8\n1 2 1 3 1 3 1 2\n''') == '4'\n\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1\n''') == '1'\n\nassert solution('''15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 3 4 2') == '2'\nassert solution('9\\n1 2 1 3 1 3 1 2') == '4'\nprint('\"Run\" is good. It is not the only way to get decent results.')"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '4'\nassert solution('''\n3 3 3\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''') == '5'\nassert solution('''\n4 4 4\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''') == '4'\nassert solution('''\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''') == '0'"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n\"\"\") == \"4\"\nprint(\"solution = \", solution(stdin))"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '4'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2') == '4\\n0\\n'"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 2 2\") == \"4\""
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2') == '4'\n\n---Using PrettyPrint---\n\n>>> from io import StringIO\n>>> import sys\n>>> sys.stdin = StringIO('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''')\n>>> solution()\n4\n>>> sys.stdin = StringIO('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''')\n2\n>>> solution()\n2\n\n---Using PrettyPrint---\n\n>>> from io import StringIO\n>>> import sys\n>>> sys.stdin = StringIO('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''')\n>>> solution()\n4\n>>> sys.stdin = StringIO('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''')\n2\n>>> solution()\n2\n\n'''\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 2 2\") == \"4\""
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2\") == \"4\\n0\\n\"\nassert solution(\"3 3 3\\n1 1 1\\n2 2 2\\n2 2 2 1\\n1 1 1 2\") == \"4\\n2\\n\""
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '4'\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''') == '2'\nassert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '0'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == 'impossible'\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == '1'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == '1'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 1\n1 0 1\n1 1 0\n1 1 1''') == '2'\nassert solution('''4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2''') == 'impossible'\nprint('All tests passed')\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '1'\nassert solution('4 3') == '2'\nassert solution('4 2') == 'impossible'"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n0 0 1\n1 0 0 1\n0 1 0 0\n2\n3\n4\n0 0 1 1''') == 'impossible'\nassert solution('''4\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n2\n1\n4\n0 0 1 1''') == '3'\nassert solution('''4\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n2\n1\n4\n0 0 1 1''') == 'impossible'\nassert solution('''4\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n2\n1\n4\n0 0 1 1''') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == '1'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == '1'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == 'impossible'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == '2'\nassert solution('6 3\\n0 0 1 1 2 2\\n1 0 0 1 2 2\\n0 1 1 0 0\\n1 0 0 1 2 2\\n0 2 1 1 0\\n0 0 0 1 1\\n0 1 2 2 0\\n1 0 0 1 1\\n1 2 1 2 0\\n2 0 0 0 1\\n2 2 1 1 0') == '2'\nassert solution('6 4\\n0 0 1 1 2 2\\n1 0 0 1 2 2\\n0 1 1 0 0\\n1 0 0 1 2 2\\n0 2 1 1 0\\n0 0 0 1 1\\n0 1 2 2 0\\n1 0 0 1 1\\n1 2 1 2 0\\n2 0 0 0 1\\n2 2 1 1 0') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == \"impossible\"\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == \"2\"\nassert solution('2 2\\n0 1\\n0 1') == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == '1'\nassert solution('''5 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == 'impossible'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"35\"\nassert solution(\"2\") == \"18\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4') == '18'\nassert solution('6 2') == '1'\nassert solution('100 3') == '2'\nassert solution('100000 3') == '1'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == \"35\"\n\nassert solution('''\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n''') == \"8\"\n\nassert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == \"18\"\n\nassert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == \"2\"\n\nassert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == \"1\""
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 2 3 4') == '1'\nassert solution('10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7') == '18'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n\"\"\") == \"35\"\nassert solution(\"\"\"\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n1 1 2 1\\n3') == '35'\nassert solution('10 3\\n2 1 2 1\\n3') == '18'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(t_s) == t_o"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == '35'\n\nassert solution('''10 3\n2 4\n2\n0 7\n''') == '18'\n\nassert solution('''12 5\n5 4\n5\n0 8\n2 6\n7 7\n''') == '22'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5') == '10'\nassert solution('10 4') == '15'\nassert solution('10 5') == '10'\nassert solution('10 2') == '0'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == '35', \"First\"\nassert solution('''\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n''') == '8', \"Second\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '0 1 3 4 5'"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1\n2\n3\n4\n''') == '0 1 3 6'\nassert solution('''\n5\n3\n2\n4\n1\n5\n''') == '0 1 2 4 6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6\\n'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1\n2\n3\n4\n''') == '0 1 3 6'\n\nassert solution('''\n5\n3\n2\n4\n1\n5\n''') == '0 1 2 4 6'\n\nassert solution('''\n7\n3\n2\n4\n1\n5\n6\n''') == '0 1 2 3 4 6 7'\n\nassert solution('''\n20\n6\n10\n7\n2\n3\n5\n8\n12\n16\n18\n19\n''') == '0 1 2 3 5 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 1001\n''')\n\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '0'\nassert solution('5') == '1'\n\"\"\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4') == '0\\n1\\n3\\n6'\nassert solution('5\\n3\\n2\\n4\\n1\\n5') == '0\\n1\\n2\\n4\\n6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n3\n2\n4\n1\n5''') == '0 1 3 2 4 5'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1\n2\n3\n4\n''') == '0 1 3 6'\n\nassert solution('''\n5\n3\n2\n4\n1\n5\n''') == '0 1 2 4 6'\n\n\"\"\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4\n1 3 2 2\n1 1 3 2\n2 4 7 3\n3 3 5 3\n\"\"\") == \"2 4 1 3\"\nassert solution(\"\"\"4\n0 0 1 1\n1 2 0 3\n2 2 3 3\n4 0 3 1\n\"\"\") == \"4 3 1 2\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4 3 1 2'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 3 2\"\nassert solution(\"5\") == \"1 3 2 3\"\nassert solution(\"6\") == \"1 3 2 3 3\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n\") == \"2 4 1 3\"\nassert solution(\"4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n\") == \"4 3 1 2\"\nassert solution(\"1\\n4 5 6 5\\n1 2 3 4\\n1 5 6 4\\n2 4 5 6\\n3 6 6 4\\n4 6 5 6\\n5 5 5 5\\n\") == \"1 2 3 4\""
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n0 0 1 1\n1 2 0 3\n2 2 3 3\n4 0 3 1''') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '4 3 1 2'\nassert solution('4') == '2 4 1 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '2 4 1 3'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1 3 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1') == '4 3 1 2'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n') == '4 3 1 2'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n0 0 1 2\n1 2 0 3\n2 2 3 3\n4 0 3 1\n''') == '2 4 1 3'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\nprint(solution.__doc__)\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\", solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\")\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n\"\"\"\n\nimport sys\nimport random"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'Theta wins'\n\n\"\"\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\nSample Output 1:\nTheta wins\n\nSample Input 2:\n89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\nSample Output 2:\nTheta loses''') == 'Theta loses'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'charlatan'\nassert solution('2 1') == 'truther'\n\"\"\""
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n1 not charlatan 1\n1 not charlatan 1\n''') == 'truther'\nassert solution('''\n2 1\n1 and fabulist 1 fabulist 2\n''') == 'fabulist'\nassert solution('''\n3 1\n1 or fabulist 1 fabulist 2\n''') == 'truther'\n\nimport sys\nfrom typing import Tuple\n\nfrom utils import *\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n1 not fabulist 1\n''') == 'truther'\nassert solution('''\n2 1\n1 not charlatan 1\n''') == 'charlatan'\nassert solution('''\n2 1\n1 and fabulist 1\n''') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'truther'\nassert solution('1 2') == 'truther'\nassert solution('1 2') == 'truther'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\nassert solution('1 3\\n1 and not 1 not 1') == 'truther'\nassert solution('2 1\\n1 and not 1 not 1') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2\n1 charlatan 1\n1 not charlatan 1\n\"\"\") == \"charlatan\"\nassert solution(\"\"\"\n2 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"fabulist\"\n\"\"\"\n\nSample Input 1:\n3\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\nSample Output 1:\nfabulist\ntruther\ncharlatan\n\nSample Input 2:\n4\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\nSample Output 2:\ncharlatan\ntruther\nfabulist\n\nSample Input 3:\n5\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 3:\nfabulist\ntruther\ncharlatan\n\nSample Input 4:\n6\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 4:\ncharlatan\ntruther\nfabulist\n\nSample Input 5:\n7\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 5:\ntruther\ncharlatan\nfabulist\n\nSample Input 6:\n8\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 6:\ntruther\ncharlatan\nfabulist\n\nSample Input 7:\n9\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 7:\ntruther\ncharlatan\nfabulist\n\nSample Input 8:\n10\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 8:\ntruther\ncharlatan\nfabulist\n\nSample Input 9:\n11\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 9:\ntruther\ncharlatan\nfabulist\n\nSample Input 10:\n12\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 10:\ntruther\ncharlatan\nfabulist\n\nSample Input 11:\n13\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 11:\ntruther\ncharlatan\nfabulist\n\nSample Input 12:\n14\n1 fabulist 1\n1 not charlatan 1\n1 charlatan 1\n1 charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\nSample Output 12:\ntruther\ncharlatan\nfabulist\n\"\"\"\nimport collections\n\n\nclass Character:\n    def __init__(self, name, char_type):\n        self.name = name\n        self.type = char_type\n\n    def __repr__(self):\n        return f\"{self.name} {self.type}\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1\\n') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2\\n') == 'fabulist'\nassert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1\\n') == 'truther'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2\\n') == 'truther'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\nassert solution(\"3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"3\""
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"4\", \"First\"\nassert solution(\"3\") == \"4\", \"Second\"\n\"\"\""
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1.00 5.00\\n3.00 3.00') == '4'\nassert solution('2\\n1.00 5.00\\n3.00 3.00') == '3'\nassert solution('3\\n1.00 5.00\\n3.00 3.00') == '2'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1\\n3.00 3.00\\n4.00 2.00\") == \"4\"\nassert solution(\"2\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\") == \"3\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '4'\n\nassert solution('''\n1\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '3'\n\nassert solution('''\n3\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00\n''') == '2'\n\n''')\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '4'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"16\"\nprint(solution())\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5 2') == '16'\nassert solution('3 3 1') == '10'\nassert solution('2 3 2') == '8'\nassert solution('1') == '0'\nassert solution('2 1 1') == '0'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('2 2 1') == '1'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3 1\n.X..\n?.X\n''') == '16'\nassert solution('''\n2 2 2\n.X...\n.X..X\n''') == '2'\nassert solution('''\n2 2 2\n.X...\n.X..X\n''') == '2'\nassert solution('''\n2 2 2\n.X...\n.X..X\n''') == '2'\nassert solution('''\n2 2 2\n.X...\n.X..X\n''') == '2'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 5 2\nR..?.\n.X...\n100 100 7 100 8\n''') == '16'\n\nassert solution('''\n2 4 1\nX..\n.?.\n10 1000 1\n''') == '10'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\") == \"16\"\nassert solution(\"2 2 2\") == \"10\"\nprint(solution('''2 3 1\nX..\n.X..\n10 100 1'''))\nassert solution('''2 2 2\n.X..\nX..''') == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 1') == '1'"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 5 2\nR..?.\n.X...\n100 100 7 100 8\n\"\"\") == \"16\"\n\nassert solution(\"\"\"\n2 3 1\nX..\n.?.\n10 1000 1\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 5 2\nR..?.\n.X...\n100 100 7 100 8\n\"\"\") == \"16\"\nassert solution(\"\"\"3 4 3\n.X..\n.X..\n..X.\n\"\"\") == \"4\"\nassert solution(\"\"\"2 5 2\nR..?.\n.X..\n100 100 7 100 8\n\"\"\") == \"8\"\nassert solution(\"\"\"1 1 1\n.X.\n.X.\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8') == '16'\n\nassert solution('4 2 2\\nR.X..\\nX.X..\\n.X.X.\\nR...') == '4'\n\nassert solution('5 3 3\\n.R..\\n.X..\\n.X..\\n.X..') == '4'\n\nassert solution('2 5 2\\nX.X.\\n.X.\\n.X.\\n.X.\\nX.X') == '0'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\", \"First\"\n\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\", \"Second\"\n\nassert solution(\"\"\"\n100 101 100\n1 1 1\n5 5 5\n10 10 10\n1000 1000 1000\n\"\"\") == \"15.888\", \"Third\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10') == '5.657'\nassert solution('3 3\\n0 4 4\\n1 5 1\\n2 6 1\\nSample Output 2:') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\"\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1.414'"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '1.414'\nassert solution('6 11') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"1.45454545454545\"\nassert solution(\"6 11\") == \"5.64285714285714\""
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"6 11\") == \"5.657\"\n\n---------------------------------------------------"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 6\n0 0 1\n1 0 2\n1 1 3\n2 0 4\n2 1 5\n''') == '5.657', 'Should be 5.657'\n\nassert solution('''\n1 2\n2 1\n''') == '1.414', 'Should be 1.414'\n\nassert solution('''\n100 100\n0 0 1\n1 0 2\n1 1 3\n2 0 4\n2 1 5\n''') == '100.00', 'Should be 100.00'\n\nprint('All tests passed.')"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\"\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\"\nassert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\""
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '1.414'\nassert solution('5 11') == '5.657'"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1 1 1') == '0.433'\nassert solution('4 1 1 1 1') == '0.433'\nassert solution('3 1 1 1') == '1.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 1 1 1 1\n''') == '1.0'\nassert solution('''\n3 1 1 1\n''') == '0.433'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 1 1 1 1\n''') == '1.0'\nassert solution('''\n4 1 1 1 1\n''') == '0.433'\nassert solution('''\n5 10\n6\n7\n8\n9\n10\n''') == '2.0'"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 1 1') == '0.433'\nprint(solution(input()))\n\nSample Input 3:\n3 1 1 1\nSample Output 3:\n1.0\n\nSample Input 4:\n4 3 2 2 1\nSample Output 4:\n1.0\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 1 1') == '1.0'\nassert solution('1 1 1 1') == '1.0'\nprint(solution(input()))\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 3') == '0.3'\nassert solution('3 4 1 1') == '0.3'\nassert solution('3 5 2 2') == '1.0'\nassert solution('1 2 2 1') == '1.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1 1\") == \"0.433\"\nassert solution(\"4 1 1 1\") == \"1.0\"\nassert solution(\"5 1 1 1\") == \"0.433\"\n\n\"\"\""
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1\\n') == '1.0'\nassert solution('2 2 2\\n') == '0.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 1 1') == '1.0'\nassert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n5 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15''') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\nassert solution(\"6 5\\n1 1 5\\n2 2 4\\n1 2 8\\n2 3 7\\n3 2 8\\n3 3 15\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"10 10\") == \"10\"\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"5\"\nassert solution(\"4 5\") == \"4\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"8 10\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n\"\"\"\n) == \"5\"\n\nassert solution(\n\"\"\"\n8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n\"\"\"\n) == \"36\"\n\nassert solution(\n\"\"\"\n10 20\n1 1 10\n2 2 2\n1 3 4\n2 4 6\n3 5 8\n4 6 10\n5 7 12\n6 8 14\n7 8 16\n8 9 20\n9 10 22\n10 11 24\n11 12 26\n12 13 30\n13 14 32\n14 15 34\n15 16 36\n16 17 38\n17 18 40\n18 19 42\n19 20 44\n20 21 46\n21 22 48\n22 23 50\n23 24 52\n24 25 54\n25 26 56\n26 27 58\n27 28 60\n28 29 62\n29 30 64\n30 31 66\n31 32 68\n32 33 70\n33 34 72\n34 35 74\n35 36 76\n36 37 78\n37 38 80\n38 39 82\n39 40 84\n40 41 86\n41 42 88\n42 43 90\n43 44 92\n44 45 94\n45 46 96\n46 47 98\n47 48 100\n48 49 102\n49 50 104\n50 51 106\n51 52 108\n51 53 110\n53 54 112\n53 55 114\n53 56 116\n53 57 118\n53 58 120\n53 59 122\n53 54 124\n53 55 126\n53 56 128\n53 57 130\n53 58 132\n53 59 134\n53 56 136\n53 57 138\n53 58 140\n53 59 142\n53 56 144\n53 57 146\n53 57 148\n53 59 150\n53 59 152\n53 56 154\n53 57 156\n53 57 158\n53 59 160\n53 59 162\n53 56 164\n53 57 166\n53 59 168\n53 59 170\n53 56 172\n53 57 174\n53 59 176\n53 59 178\n53 56 180\n53 57 182\n53 59 184\n53 56 186\n53 57 188\n53 59 190\n53 59 192\n53 56 194\n53 57 196\n53 59 198\n53 59 200\n\"\"\"\n) == \"102\"\n\nassert solution(\n\"\"\"\n20 6\n1 1 2\n2 1 5\n3 2 5\n4 3 7\n5 4 8\n5 5 9\n5 6 7\n5 7 10\n5 8 9\n5 9 10\n5 6 11\n5 7 12\n5 8 13\n5 9 14\n5 10 15\n5 6 16\n5 7 17\n5 8 18\n5 9 19\n5 10 20\n5 6 21\n5 7 22\n5 8 23\n5 9 24\n5 10 25\n5 6 26\n5 7 27\n5 8 28\n5 9 29\n5 10 30\n5 6 31\n5 7 32\n5 8 33\n5 9 34\n5 10 35\n5 6 36\n5 7 37\n5 8 38\n5 9 39\n5 10 40\n5 6 41\n5 7 42\n5 8 43\n5 9 44\n5 10 45\n5 6 46\n5 7 47\n5 8 48\n5 9 49\n5 10 50\n5 6 51\n5 7 52\n5 8 53\n5 9 54\n5 10 55\n5 6 56\n5 7 57\n5 8 58\n5 9 59\n5 10 60\n5 6 61\n5 7 62\n5 8 63\n5 9 64\n5 10 65\n5 6 66\n5 7 67\n5 8 68\n5 9 69\n5 10 70\n5 6 71\n5 7 72\n5 8 73\n5 9 74\n5 10 75\n5 6 76\n5 7 77\n5 8 78\n5 9 79\n5 10 80\n5 6 81\n5 7 82\n5 8 83\n5 9 84\n5 10 85\n5 6 86\n5 7 87\n5 8 88\n5 9 89\n5 10 90\n5 6 91\n5 7 92\n5 8 93\n5 9 94\n5 10 95\n5 6 96\n5 7 97\n5 8 98\n5 9 99\n5 10 100\n\"\"\"\n) == \"100\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5') == '5'\nassert solution('8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15') == '36'\nprint(solution(input()))\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 5') == '5'\nassert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5') == '4'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '2'\nassert solution('2 2') == '2'\nassert solution('3 2') == '3'\nassert solution('1 2 3') == '1'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\nassert solution('2 1 2') == '2'"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n2 1\n1 2\n''') == '1'\nassert solution('''\n3 2\n2 1 3\n1 3\n2 3\n''') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 2') == '3'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1', '1'\nassert solution('2 1') == '1', '2'\nassert solution('2 2') == '1', '2'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n2 1\\n1 2\\n\") == \"1\"\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\\n\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1\n2 1\n1 2\n''') == '1'\nassert solution('''\n3 2\n2 1 3\n1 3\n2 3\n''') == '3'\nassert solution('''\n4 3\n2 1 3\n1 2 4\n''') == '2'\nassert solution('''\n5 4\n2 1 3\n1 5 4\n3 4 1\n''') == '2'"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == \"5\"\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == \"5\"\nassert solution(\"5 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == \"5\"\nassert solution(\"5 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == \"5\"\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == \"-1\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\nassert solution('''6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\nassert solution('''1 10\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 4\\n1 4\\n2 4\") == \"3\"\nassert solution(\"3\\n2 3\\n1 4\\n2 4\") == \"5\"\nassert solution(\"3\\n2 4\\n1 4\\n2 4\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2\\n3\\n1') == '5'\nassert solution('5\\n2\\n3\\n1') == '-1'\nassert solution('6\\n5\\n2\\n3\\n1') == '5'\nprint('all tests passed')\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n\") == \"5\"\nassert solution(\"12 3\\n2 5\\n3 7\\n3 6\\n1 7\\n4 8\\n2 8\\n\") == \"8\"\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n\") == \"-1\"\nassert solution(\"6 6\\n1 5\\n2 5\\n3 5\\n1 6\\n1 6\\n\") == \"2\"\nassert solution(\"12 3\\n2 5\\n3 7\\n3 6\\n1 7\\n4 8\\n2 8\\n\") == \"8\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\nassert solution('''6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n') == '5'\nassert solution('6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n') == '-1'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\nassert solution('''\n6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n2 1') == '-1'\nassert solution('4 3\\n1 2\\n1 3\\n2 3') == '4'\nassert solution('5 4\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6') == '-1'\nassert solution('10 10\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\\n1 19\\n1 20\\n1 21\\n1 22\\n1 23\\n1 24\\n1 25\\n1 26\\n1 27\\n1 28\\n1 29\\n1 30\\n1 31\\n1 32\\n1 33\\n1 34\\n1 35\\n1 36\\n1 37\\n1 38\\n1 39\\n1 40\\n1 41\\n1 42\\n1 43\\n1 44\\n1 45\\n1 46\\n1 47\\n1 48\\n1 49\\n1 50\\n1 51\\n1 52\\n1 53\\n1 54\\n1 55\\n1 56\\n1 57\\n1 58\\n1 59\\n1 60\\n1 61\\n1 62\\n1 63\\n1 64\\n1 65\\n1 66\\n1 67\\n1 68\\n1 69\\n1 70\\n1 71\\n1 72\\n1 73\\n1 74\\n1 75\\n1 76\\n1 77\\n1 78\\n1 79\\n1 80\\n1 81\\n1 82\\n1 83\\n1 84\\n1 85\\n1 86\\n1 87\\n1 88\\n1 89\\n1 90\\n1 91\\n1 92\\n1 93\\n1 94\\n1 95\\n1 96\\n1 97\\n1 98\\n1 99\\n1 100') == '10'\nassert solution('6 4\\n3 5\\n1 5\\n3 6\\n1 6') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\nassert solution('''\n8 8\n1 4\n4 5\n1 5\n1 6\n5 6\n1 7\n3 5\n3 6\n3 7\n2 6\n2 7\n2 8\n''') == '-1'\nassert solution('''\n10 3\n1 4\n1 5\n2 4\n2 5\n3 4\n3 5\n3 6\n4 5\n4 6\n5 5\n5 6\n5 7\n6 6\n6 7\n6 8\n7 5\n7 6\n7 7\n8 5\n8 6\n8 7\n''') == '3'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1') == '4.00'\nassert solution('6 3') == '9.00'"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 1\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\nassert solution('''\n5 2\n-1 1\n0 10\n-1 0\nSample Output 3:\n3.50\n''') == '3.50'\nassert solution('''\n4 4\n4 4\n0 0\n0 0\n0 0\n''') == '0.00'\nassert solution('''\n10 9\n-2 -1\n-3 -2\n-5 -4\n-7 6\n-9 -8\n-10 -9\n0 -10\n10 0\n-10 10\n-7 -7\n0 0\n-6 -6\n-10 -8\n''') == '13.50'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 3') == '4.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '9.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1\\n1 1\\n5 1\\n5 5') == '3.00'\nassert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2') == '4.00'"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '1.00'\nassert solution('3 3') == '3.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1') == '4.00'\nassert solution('4 2') == '2.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2\\n') == '4.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 1') == '4.00'\nassert solution('6 3') == '9.00'\nassert solution('10 0') == '0.00'"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3'\nassert solution('''\n3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\") == \"2 1 2 3\"\nassert solution(\"3 3 4\") == \"1 2 1 2\""
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3 2') == '2 1 2 3'\nassert solution('3 3 4') == '1 2 1 2'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 2') == '2 1 2 3'\nassert solution('3 3 4') == '1 2 1 2'"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\") == \"2 1 2 3\"\nassert solution(\"3 3 4\") == \"3 1 1 2 2\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nSample Input 3:\n4 3 2\nPAINT 2 0 0 3 3\nSAVE\nPAINT 3 0 3 3 3\nLOAD 1\nSample Output 3:\n2 1 2 3\n1 2 1 2''') == '2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\\n'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nPAINT 2 0 0 3 3\n''') == '2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\\n'\nassert solution('''3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1\\n1 3 1\\n1 1 1\\n1 2 1\\n'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3'\nassert solution('''3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3'\nprint(solution('''3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''')) == '3 1 1'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3'\nassert solution('''\n3 3 4\nPAINT 3 0 3 3 3\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4 3\n1 4 2 3\"\"\") == \"1 4 2 3\"\nassert solution(\"\"\"5 1\n-1\n\"\"\") == \"-1\""
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 5') == '1 4 2 3 5'\nassert solution('2 2 3 3 4') == '2 4'\nassert solution('4 5 3 2 1') == '1 2 3 4'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n10\n2 5 9\n''') == '1 4 2 5 9'\nassert solution('''9\n7\n5 5 5 6 2 3\n''') == '5 5 5 6 2 3'\nassert solution('''10\n15\n1 2 5 6 3 5 6 7 8 9 10\n''') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5 1') == '1 4 2 3', 'Test 1'\nassert solution('4 5 1') == '-1', 'Test 2'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n3 3\") == \"1 2 3\"\nassert solution(\"4 1\\n1 3 2 4\") == \"1 3 4\"\nassert solution(\"1 1\\n2 2\") == \"-1\""
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1 3'\nassert solution('5 1') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"1 4 2 3\"\nassert solution(\"5 1\") == \"-1\""
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '1 2 3'\nassert solution('2 1') == '1'\n\nimport sys\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"1 2 3\"\nassert solution(\"4 3\") == \"1 2 3 4\"\nassert solution(\"5 1\") == \"5\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '1 4 2 3'\nassert solution('4 3') == '1 4 2 3'\nassert solution('4 2') == '-1'\n\nsolution('5 2')\n-------"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n4 2\n2 1\n1 3''') == '1'\n\nassert solution('''4\n5 0\n2 6\n8 6\n5 7''') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"1\"\nassert solution(\"4 5 0\") == \"0\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '0'\nassert solution('6') == '0'\nassert solution('7') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 4\\n1 2\\n1 3\") == \"1\"\nassert solution(\"4\\n5 0\\n2 6\\n8 6\\n5 7\") == \"0\"\nprint(solution())"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n4 5\\n2 6\\n8 6') == '1'\nassert solution('2 2\\n4 2\\n2 5\\n8 5') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\", \"Test 1 Failed\"\nassert solution(\"2\") == \"0\", \"Test 2 Failed\"\n\nSolution:\n\nimport itertools"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 3\\n4 5\\n6 7') == '0'\nassert solution('5\\n2 3\\n4 5\\n6 7') == '1'\nassert solution('1\\n4 2\\n2 3\\n2 4') == '0'\nassert solution('1\\n5 2\\n2 3\\n5 3') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n2 2\n1 1\n3 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n1 1\n2 5\n1 2\n1 6\n2 6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10\n5 8\n2 8\n5 4\n3 7\n8 6\n7 6\n4 6\n8 8\n9 8\n7 2\n2 8\n3 7\n4 5\n5 8\n3 6\n3 4\n3 7\n4 6\n4 2\n\"\"\") == \"2\""
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 0 1\") == \"1000 100000\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4 0 3') == '4 140'\nassert solution('2 1 0 1') == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 0 1') == '1000 100'\nassert solution('4 4 0 3') == '4 140'\nassert solution('5 2 0 1 1') == '10000 100'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\"\nassert solution(\"4 1 0 1\") == \"1 1000\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\nassert solution('''\n2 1 0 1\n0 1 1000 100\n''') == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n\"\"\") == '4 140'\nassert solution(\"\"\"\n2 1 0 1\n0 1 1000 100\n\"\"\") == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4 0 3') == '4 140'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100000\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"impossible\"\nassert solution([5, 2]) == \"impossible\"\nassert solution([5, 2, 6, 2, 7, 8, 3]) == \"3\"\nassert solution([3, 1, 4, 5]) == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n10 10\\n5 7\\n4 8') == '3\\n'\nassert solution('10\\n20 20\\n10 10\\n20 20') == '2\\n'\n\n'''\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n'.join([\n    '5 7',\n    '4 5',\n    '3 6',\n    '8 2',\n    '4 5',\n    '2 3',\n    '7 8'\n])) == '3'\n\nassert solution('\\n'.join([\n    '3',\n    '1 2',\n    '3 4',\n    '2 3',\n    '4 5',\n    '1 2',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '4 5',\n    '3 4',\n    '4 5',\n    '5 6',\n    '3 5',\n    '2 3',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '4 5',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '3 4',\n    '4 5',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '4 5',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    '4 5',\n    '1 2',\n    '1 2',\n    '4 5',\n    '3 4',\n    '5 6',\n    '2 4',\n    '3 5',\n    '1 2',\n    "
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\\\n10 20\n15 10\n15 20\n20 20\n15 15\n5 10\n10 10\n5 15\n20 10\n10 10\n10 20\n5 15\n\"\"\"\n) == \"3\"\nassert solution(\n    \"\"\"\\\n10 20\n15 10\n15 20\n20 20\n15 15\n5 10\n10 10\n5 15\n20 10\n10 10\n10 20\n5 15\n\"\"\"\n) == \"impossible\"\nassert solution(\n    \"\"\"\\\n12 2\n6 6\n6 6\n\"\"\"\n) == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 7\\n8 3\\n5 7') == '3\\n'\nassert solution('8 2\\n8 3\\n5 7\\n') == 'impossible\\n'\nprint('All test cases passed!')"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 1\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n''') == '3'\nassert solution('''\n10 2\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n''') == 'impossible'\nassert solution('''\n20 3\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n''') == '3'\nassert solution('''\n50 2\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n''') == '2'\nassert solution('''\n90 1\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n''') == 'impossible'\n\n\"\"\"\n\n\nfrom math import sqrt"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n8 3\\n5 7\\n') == '3\\n'\nassert solution('4\\n8 1\\n6 7\\n') == 'impossible\\n'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n4\\n3 1 2 2\\n5 1 4 5\\n10 10 3 4\\n5 5 2 6 7\\n1 10 5 5\\n2 9 5 4\\n3 10 4 7\\n5 2 4 6\\n4 3 4 2\\n') == '2\\n'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\") == \"5\"\nassert solution(\"120\") == \"120\"\nassert solution(\"51090942171709440000\") == \"21\"\nassert solution(\"1574258\") == \"3\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"51090942171709440000\") == \"21\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\""
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"51090942171709440000\") == \"21\"\nassert solution(\"120\") == \"5\"\nprint(\"YOUR CODE IS CORRECT!\")\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\nassert solution(\"\") == \"\""
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2\") == \"45\"\nassert solution(\"10 1 2\") == \"10\""
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"45\"\nassert solution(\"10 1 2\") == \"45\"\nassert solution(\"100 100 100\") == \"5\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 1 2\n''') == '45'\nassert solution('''\n3 3 3\n''') == '10'\n'''\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\nassert solution('5 2 2') == '4'"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 3') == '10'\n\nassert solution('5 2 5') == '35'\n\nassert solution('2 2 3') == '10'\n\nassert solution('7 4 8') == '63'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1 2\n''') == '45'\nprint('Solution:')\nprint(solution(stdin))\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\""
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\nprint(solution(input()))\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"45\""
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"20\"\nassert solution(\"5 1\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"impossible\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6\n2 1\n3 1\n4 1\n5 9\n1 1\n1 1\nSample Input 3:\n1\n5\nSample Output 3:\nimpossible\n\"\"\"):\n    pass\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"impossible\"\nassert solution(\"5 0\") == \"0\"\nassert solution(\"5 2\") == \"12\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1 0\") == \"0\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1\n4\n5\n2\n5\n10\nSample Input 3:\n6\n4 5\n9 10\n2 1\n8 3\n5 6\nSample Output 3:\n15\n''') == 'impossible'"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == '18'\nprint(solution('''\n10\n5 5\n6 1\n9 4\n9 8\n8 5\n7 1\n4 3\n'''))\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == 'impossible'\nassert solution('5 1') == '18'\nassert solution('2 10') == 'impossible'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\") == \"20\"\nassert solution(\"\"\"\n6\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n10\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '18'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"5\") == \"impossible\"\nassert solution(\"10\") == \"impossible\"\nassert solution(\"15\") == \"impossible\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == '18'\n\nassert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == '20'\n\nassert solution('''\n3\n2 3\n6 8\n9\n''') == 'impossible'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2') == '3'\nassert solution('3\\n-1 -1 -1\\n5 5 5\\n10 10 10') == '11'\nprint('all tests passed')\n'''\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '5'\n'''"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n3\\n-1 -1 -1\\n5 5 5\\n10 10 10\") == \"11\"\nassert solution(\"1\\n2\\n-1 -1 -1\\n5 5 5\\n10 10 10\") == \"8\"\nassert solution(\"3\\n-1 -1 -1\\n5 5 5\\n10 10 10\") == \"6\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n1 5 10\n7 8 2\n\"\"\") == \"11\"\nassert solution(\"\"\"\n2\n1 5 10\n7 8 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n-1 -1 -1\n5 5 5\n10 10 10\n\"\"\") == \"11\"\nassert solution(\"\"\"\n4\n-1 -1 -1\n5 5 5\n10 10 10\n11 11 11\n\"\"\") == \"17\""
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n1 5 10\n7 8 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n-1 -1 -1\n5 5 5\n10 10 10\n\"\"\") == \"11\"\nassert solution(\"\"\"\n4\n0 0 0\n5 5 5\n10 10 10\n15 15 15\n\"\"\") == \"20\"\nassert solution(\"\"\"\n5\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n1 1 1\n1 2 2\n1 3 3\n''') == '4'\n''')\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == '3'\n\"\"\"\n\nstdin = __import__('sys').stdin.read().splitlines()\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 5 10\n7 8 2\n''') == '3'\nassert solution('''\n3\n-1 -1 -1\n5 5 5\n10 10 10\n''') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 5 10\n7 8 2\n''') == '3'\nassert solution('''\n3\n-1 -1 -1\n5 5 5\n10 10 10\n''') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"11\"\nassert solution(\"4\") == \"9\"\nassert solution(\"5\") == \"20\"\nassert solution(\"6\") == \"42\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n1000\n1000\n0000\n0010\n''') == '0'\nassert solution('''\n3 1\n110\n011\nSample Output 3:\n1\n''') == '1'"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == '2'\nassert solution(\"4 2\") == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2\\n10 11') == '2'\nassert solution('3 3\\n101 11') == '1'\nassert solution('4 4\\n1000 101') == '0'\nassert solution('5 5\\n0000 1111') == '0'\nprint('all test cases passed')"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'\nassert solution('10 10') == '17'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5 2\n100\n010\n010\n000\n011\n100\n\"\"\") == '0'\nassert solution(\n\"\"\"\n5 3\n100\n010\n010\n000\n011\n\"\"\") == '2'\nassert solution(\n\"\"\"\n5 4\n100\n010\n010\n000\n011\n\"\"\") == '1'\nassert solution(\n\"\"\"\n5 5\n100\n010\n010\n000\n011\n\"\"\") == '3'\nassert solution(\n\"\"\"\n5 6\n100\n010\n010\n000\n011\n\"\"\") == '5'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'\nassert solution('1000 1000') == '0'\nassert solution('1000 1000') == '0'\nassert solution('1000 1000') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '0'\nassert solution('3 3') == '0'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n11\n11''') == '1'\nassert solution('''3\n10\n00\n''') == '0'\nassert solution('''6\n111\n110\n101\n110\n111\n101\n''') == '3'"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1 2 3\n2\n3\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\\n3\\n2\") == \"1\"\nassert solution(\"3\\n1 2 3\\n3\\n2\") == \"1\"\nassert solution(\"3\\n1 2 3\\n3\\n2\") == \"1\"\nassert solution(\"3\\n1 2 3\\n3\\n2\") == \"1\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"1\""
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3\\n3') == \"1\"\nassert solution('3\\n1 3 2\\n2') == \"5\"\nassert solution('3\\n1 3 2\\n3') == \"1\"\nassert solution('1\\n3\\n3') == \"1\"\nassert solution('3\\n1 3 2\\n2') == \"1\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n3\n2''') == '1'\nassert solution('''3\n1 2 3\n3\n2''') == '2'\nassert solution('''3\n1 2 3\n3\n2''') == '5'\nassert solution('''1\n5\n0''') == '5'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\n1 3 2\n2\"\"\") == \"1\"\n\nassert solution(\"\"\"4\n1 2 4\n3\nSample Output 3:\n2\n\nSample Input 4:\n5\n3 4 1 2\n1\nSample Output 4:\n3\n\nSample Input 5:\n2\n1\nSample Output 5:\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('5') == '3'\n\n\"\"\""
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3'\n) == '1'\n\nassert solution(\n    '3'\n) == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    3\n    1 2 3\n    3\n    ''') == '1'\nassert solution('''\n    3\n    1 3 2\n    2\n    ''') == '5'\n''')\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '1'\nassert solution('10') == '1'\nassert solution('15') == '1'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 100\\n\") == \"0\"\nassert solution(\"10 10 1\\n\") == \"19\"\nassert solution(\"10 10 0\\n\") == \"11\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 100 20\\n') == '0'\nassert solution('10 10 1\\n') == '19'\nassert solution('50 50 1\\n') == '0'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 100 20\n''') == '0'\nassert solution('''\n10 10 1\n''') == '19'\nassert solution('''\n100 100 20\n''') == '0'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\""
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\""
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 100 20') == \"0\"\nassert solution('10 10 1') == \"19\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c''') == 'SHIP IT'\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\nprint('All test cases passed')\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nclassa classb myfilec execd libe') == 'c'\nassert solution('4\\nclassa classb myfilec execd\\nimport d, b, c\\nclassa 1\\nimport d\\nimport c\\nclassb 1\\nimport c') == 'c'"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == 'SHIP IT'\nassert solution('5\\nclassa classb myfilec execd libe') == 'SHIP IT'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0') == 'SHIP IT'\n\nimport collections"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nc 1\\nimport c\\nd 0\\n\") == \"SHIP IT\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe\\nlibe 0\\n\") == \"SHIP IT\"\n\n---Input---\n6\n\n6\nfrom a import *\nfrom b import *\nfrom c import *\nfrom d import *\nfrom e import *\nfrom f import *\n\n7\nfrom a import *\nfrom b import *\nfrom c import *\nfrom d import *\nfrom e import *\nfrom f import *\nfrom g import *\nfrom h import *\nfrom i import *\nfrom j import *\nfrom k import *\nfrom l import *\n\n8\nfrom a import *\nfrom b import *\nfrom c import *\nfrom d import *\nfrom e import *\nfrom f import *\nfrom g import *\nfrom h import *\nfrom i import *\nfrom j import *\nfrom k import *\nfrom l import *\nfrom m import *\nfrom n import *\nfrom o import *\nfrom p import *\nfrom q import *\nfrom r import *\nfrom s import *\nfrom t import *\nfrom u import *\nfrom v import *\nfrom w import *\nfrom x import *\nfrom y import *\nfrom z import *\n\n9\nfrom a import *\nfrom b import *\nfrom c import *\nfrom d import *\nfrom e import *\nfrom f import *\nfrom g import *\nfrom h import *\nfrom i import *\nfrom j import *\nfrom k import *\nfrom l import *\nfrom m import *\nfrom n import *\nfrom o import *\nfrom p import *\nfrom q import *\nfrom r import *\nfrom s import *\nfrom t import *\nfrom u import *\nfrom v import *\nfrom w import *\nfrom x import *\nfrom y import *\nfrom z import *\n\n10\nfrom a import *\nfrom b import *\nfrom c import *\nfrom d import *\nfrom e import *\nfrom f import *\nfrom g import *\nfrom h import *\nfrom i import *\nfrom j import *\nfrom k import *\nfrom l import *\nfrom m import *\nfrom n import *\nfrom o import *\nfrom p import *\nfrom q import *\nfrom r import *\nfrom s import *\nfrom t import *\nfrom u import *\nfrom v import *\nfrom w import *\nfrom x import *\nfrom y import *\nfrom z import *\nfrom abc import *\nfrom abc.abc import *\nfrom abstract import *\nfrom abstractmethod import *\nfrom abstractproperty import *\nfrom attribute import *\nfrom base import *\nfrom binop import *\nfrom boolop import *\nfrom break_continue import *\nfrom cast import *\nfrom comprehension import *\nfrom dictcomp import *\nfrom dotted_name import *\nfrom expr import *\nfrom sliceop import *\nfrom star_args import *\nfrom stmt import *\nfrom ternaryop import *\nfrom unaryop import *\nfrom type_ignore import *\nfrom yield import *\nfrom yieldfrom import *\n\n-----\n\nclass S:\n\n    def __init__(self, *args):\n        self.s = args"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nc 1\\nimport c\\n\") == \"SHIP IT\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n\") == \"c\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == 'SHIP IT', 'First'\n\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT', 'Second'\n\nassert solution('''10\nx z y w e f d g a\nz 1\nimport x\nimport w\nimport f\nimport z\na 2\nimport a\nimport e\nimport g\ne 3\nimport e\nimport d\nimport f\nimport g\nimport h\nimport i\nimport j\nimport k\nimport l\nimport m\nimport n\nimport o\nimport p\nimport q\nimport r\nimport s\nimport t\nimport u\nimport v\nimport w\nx 1\nimport x\nimport y\nimport z\n''') == 'SHIP IT', 'Third'\n\nassert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == 'SHIP IT', 'Fourth'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0') == 'c'\nassert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'c'\nassert solution('10\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'SHIP IT'"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'SHIP IT'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe') == 'SHIP IT'\nassert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == ''\nassert solution('4\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"SHIP IT\"\nassert solution(\"1\\n1\\nimport 2\\nimport 3\\n\") == \"SHIP IT\"\nassert solution(\"4\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c\\n\") == \"a, c\"\nassert solution(\"6\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n\") == \"classa, myfilec\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'c'\nassert solution('5\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'SHIP IT'\nassert solution('10\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\nSample Output 2:') == 'SHIP IT'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == \"1\"\nprint
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\nassert solution('5+3+x+5+3+x') == '2'\nassert solution('5+3+x+5+3+x+5+3+x') == '1'\nassert solution('5+3+x+5+3+x+5+3+x+5+3+x+5+3+x+5+3+x+5+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5+3+x''') == '1'\nassert solution('''20+3+x''') == '2'\nassert solution('''1+2+1+3+4''') == '5'\nassert solution('''1+2+1+3+4+2+3+4''') == '4'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('5+3+x+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'yes'\nassert solution('1 2 3') == 'yes'\nassert solution('4 5 6') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 10') == 'yes'\nassert solution('2 10') == 'no'\n\n\"\"\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"yes\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 10\\n1 15\\n0 20\\n') == 'yes'\nassert solution('2 10\\n0 15\\n5 20\\n') == 'no'\nassert solution('3 10\\n0 5\\n0 1\\n5 20\\n') == 'no'\nassert solution('4 10\\n0 5\\n0 1\\n5 20\\n') == 'yes'\nassert solution('5 10\\n0 5\\n0 1\\n5 20\\n') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'yes'\nassert solution('2 3') == 'no'\nassert solution('1 2 5') == 'yes'\nassert solution('2 1 3') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 10\\n1 15\") == \"yes\"\nassert solution(\"2 10\\n0 15\") == \"no\""
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 10\n0 15\n5 20\n''') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'yes'\nassert solution('2 10\\n1 15\\n0 20') == 'no'\nprint('all tests passed')\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == 'yes\\n', \"test 1 failed\""
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"yes\", \"1st sample\"\nassert solution(\"2 10\\n1 15\\n0 20\\n\") == \"no\", \"2nd sample\""
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4 4') == '0.25'\nassert solution('4 4 4') == '0.25'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'\nassert solution('''3\n1\n5 red\n4\n2 green\n''') == '0'\nassert solution('''3\n1\n4 red\n4\n5 green\n''') == '1.0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 3') == '0.25'\nassert solution('6 6 6') == '0'\nprint('PASSED')\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\\n5 1 2\\n3 4 2\\n8 4 1\\n\") == \"0.25\"\nassert solution(\"5 4 4\\n3\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n\") == \"0\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n'''\n) == '0.25'\nassert solution(\n'''\n4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n'''\n) == '0'\nassert solution(\n'''\n2 2 2\n2\n2\n'''\n) == '0.5'\nassert solution(\n'''\n4 4 4\n2\n2 red\n1 yellow\n2 red\n'''\n) == '0.25'\nassert solution(\n'''\n4 4 4\n2\n2 green\n6 yellow\n10 red\n14 green\n4 red\n'''\n) == '0.25'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4 4') == '0.25'\nassert solution('4 4 4') == '0.25'\nassert solution('1') == '1'\nassert solution('5') == '0'\nassert solution('4 4 4') == '0.25'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n\") == \"0\""
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n\"\"\") == \"0.25\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 4') == '0.25'\nassert solution('4 4 4') == '0.25'\nassert solution('0 0 0') == '1'\nassert solution('1') == '0.5'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4 4\") == \"0.25\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"5\") == \"0.5\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 7\") == \"3\"\nassert solution(\"6 8\") == \"inf\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 4\") == \"4\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == '3'\nassert solution('6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == 'inf'\nassert solution('5 6\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\nassert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input_1) == '3'\nassert solution(sample_input_2) == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n7\\n1 3\\n1 4\\n3 2') == '3'\nassert solution('6\\n8\\n1 3\\n1 4\\n3 2') == '2'\nassert solution('5\\n3\\n1 4\\n3 2') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n2 2\\n\") == \"2\"\nassert solution(\"2 2\\n2 2\\n\") == \"inf\"\nassert solution(\"3 1\\n3 2\\n\") == \"3\"\nassert solution(\"4 1\\n4 2\\n\") == \"inf\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"inf\"\nprint(\"All test cases passed\")\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\nassert solution('6 10') == 'inf'\nassert solution('5 12') == 'inf'\nassert solution('5 23') == 'inf'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == '4'\nassert solution('''\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\nassert solution('''\n4 4\n3 3 3 3\n''') == '4'\nassert solution('''\n4 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n''') == '2'\nassert solution('''\n4 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\n1 2 3 4\n''') == '4'\nassert solution('''12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '4', 'Wrong'\nassert solution('12 3') == '2', 'Wrong'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '4'\nassert solution('12 3') == '2'"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('4\\n1 2 3 4') == '4'\nassert solution('12\\n2 3 4 5 6 7 4 7 8 8 12 12') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 2 3\n''') == '2'\nassert solution('''\n4\n1 2 3 4\n''') == '4'\nassert solution('''\n12\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"1\", \"1st example\"\nassert solution(\"3 2\") == \"2\", \"2nd example\"\nassert solution(\"13 3\") == \"4\", \"3rd example\"\nassert solution(\"13 13\") == \"4\", \"4th example\""
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == \"4\"\nassert solution(\"12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\\n\") == \"2\"\nprint('All test cases passed.')"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'NO TYPO'\nassert solution('2') == 'NO TYPO'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\nhoose\nhose\nnose\nnoises\nnoise\"\"\") == \"hoose, noise\"\nassert solution(\"\"\"4\nhose\nhoose\noose\nmoose\nSample Output 3:\nhose, noise\"\"\") == \"moose, noise\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\nhoose\nhose\nnose\nnoises\nnoise''') == \"hoose, noise\"\n\nassert solution('''4\nhose\nhoose\noose\nmoose\n''') == \"hoose, noise\"\n\nassert solution('''3\nhose\nhoose\noose\n''') == \"hoose, noise\"\n\nassert solution('''2\nhose\nhoose\n''') == \"hoose\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == 'NO TYPOS'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\nhoose\\nhose\\nnoises\\noise\") == \"hoose\\nmoose\\nnoise\"\nassert solution(\"4\\nhose\\nhoose\\noose\\nmoose\") == \"hoose\\nmoose\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\nhoose\nhose\nnoises\n''') == 'hoose'\nassert solution('''3\nhose\nhose\nnoises\n''') == 'noises'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"NO TYPOS\"\nassert solution(\"1\") == \"NO TYPOS\"\nassert solution(\"2\") == \"NO TYPOS\"\nassert solution(\"3\") == \"NO TYPOS\"\nassert solution(\"4\") == \"NO TYPOS\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\nhoose\nhose\nnose\nnoises\nnoise\n''') == 'hoose,noise,nose'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\nhoose\nhose\nnose\nnoises\nnoise''') == '''hoose\nnoises\nnoise'''\nassert solution('''4\nhose\nhoose\noose\nmoose\nSample Output 3:\nhoose\nmoose\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\\\n3\nhoose\nhose\nnoises\n''') == 'hoose, noises'\n\nassert solution('''\\\n4\nhoose\nhose\noose\nmoose\n''') == 'hoose, moose'\n\nassert solution('''\\\n5\nhoose\nhose\nnose\nnoises\nnoise\n''') == 'hoose, noise, noises'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '2'\nassert solution('2 3') == '5'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == '2'\nassert solution(\"2 3\") == '5'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'\nassert solution('5 4') == '0'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"3 3\") == \"5\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n3\n''') == '2\nassert solution('''\n2 3\n4\n''') == '0\nassert solution('''\n1 2\n3\n''') == '16\nassert solution('''\n1 2\n3\n''') == '2\n''')\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"5\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1\n3\nSample Output 1:\n2\n2\n5''') == '2\\n2\\n5'\nassert solution('''2 3\n4\nSample Output 2:\n0\n16\n8''') == '0\\n16\\n8'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '2'\nassert solution('3') == '2'\nassert solution('4') == '0'\nassert solution('5') == '16'\nassert solution('10') == '0'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n50 45 45\n10 0 0\n10 1 1\n20 2 2\n30 2 2\n''') == '44.72135955', solution\nassert solution('''4\n50 45 45\n10 0 0\n10 1 1\n20 2 2\n30 2 2\n20 3 3\n''') == '68.52419365', solution\nassert solution('''5\n50 45 45\n10 0 0\n10 1 1\n20 2 2\n30 2 2\n20 3 3\n20 4 4\n''') == '104.52666859', solution\nassert solution('''6\n50 45 45\n10 0 0\n10 1 1\n20 2 2\n30 2 2\n20 3 3\n20 4 4\n20 5 5\n''') == '56.92764986', solution\nassert solution('''7\n50 45 45\n10 0 0\n10 1 1\n20 2 2\n30 2 2\n20 3 3\n20 4 4\n20 5 5\n20 6 6\n''') == '103.80450876', solution\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n50 45 45\n''') == '68.52419365'\nassert solution('''\n4\n50 40 60 50\n''') == '93.05869785'\nassert solution('''\n5\n40 50 80 60 50\n''') == '92.60123805'\nassert solution('''\n5\n40 60 40 50 60\n''') == '109.464346859'\nassert solution('''\n10\n
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(t) == \"44.72135955\"\nprint(solution(t))"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n50 45 45\n''') == \"68.52419365\"\nassert solution('''\n2\n0 0 0\n''') == \"0.0\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == '44.72135955'\nassert solution(\"2\") == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"44.72135955\"\nassert solution(\"2\") == \"68.52419365\""
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '44.72135955'\nassert solution('2\\n') == '68.52419365'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3 1 5\n1 2\nSample Input 3:\n2 4 1 2\n1 3 1\nSample Output 3:\n1\n1\n0\n2\n''') == '1'\n\nassert solution('''2 4 1 2\n1 3 1\nSample Input 4:\n2 5 1 2\n1 3 1\nSample Output 4:\n1\n1\n0\n2\n''') == '1'\n\nassert solution('''2 3 1 5\n1 2\nSample Input 5:\n2 5 1 2\n1 3 1\nSample Output 5:\n0\n0\n0\n1\n''') == '0'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1 5\") == \"1\"\nassert solution(\"3 4 2 3\") == \"1\"\nassert solution(\"7 5 4 3\") == \"1\"\nassert solution(\"9 7 5 4 3\") == \"2\"\nassert solution(\"10 10 10 10 10 10\") == \"0\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4 2 3') == '1'\nassert solution('2 2 2') == '2'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4 2 3') == '1'\nassert solution('3 4 2 3') == '1'\nassert solution('4 6 3 2') == '1'\nassert solution('3 2 4 5') == '3'\nassert solution('3 4 2 3') == '2'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '2'"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 5\") == \"1\"\nassert solution(\"3 4 2 3\") == \"0\"\nprint(\"Congratulations! Your solution beats 98.67% of users!\")\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '2'\n\n\"\"\""
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 2 3') == '1'\nassert solution('2 3 1 5') == '3'\nassert solution('3 4 2 3') == '2'\nassert solution('5 4 2 3') == '2'\nassert solution('5 4 2 3') == '3'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4 2 3\n1 3 1\n''') == '1'\n\nassert solution('''\n3 4 2 3\n1 3 1\n''') == '1'\n\nassert solution('''\n2 3 1 5\n1 2\n''') == '1'\n\nassert solution('''\n3 4 2 3\n1 2\n''') == '0'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '2'"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2 5\n1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"5 3\n2 2 3 2 2\n\"\"\") == \"2\"\nprint('\"Run\" is good. How is \"Check\"?')"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n1 1\\n\") == \"3\"\nassert solution(\"5 3\\n2 2 3 2 2\\n\") == \"2\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 5\n1 1\n''') == '3'\n\nassert solution('''3 3\n1 2 1\n''') == '2'\n\nassert solution('''5 4\n2 2 3 1 2\n''') == '2'"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5\\n1 1') == '3'\nassert solution('5 3\\n2 2 3 2 2') == '2'\nprint(solution('''5 3\n1 1\n2 2 3 2 2'''))\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 1\n3\n''') == '3'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"3\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"10 10\") == \"9\"\nassert solution(\"6 6\") == \"5\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5') == '3'\nassert solution('5 3') == '2'\nassert solution('5 4') == '1'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5') == '3'\nassert solution('5 3') == '2'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5') == '3'\nassert solution('5 3') == '2'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n100 100\\n50 50\") == \"50\"\nassert solution(\"2\\n0 50\\n50 0\") == \"25\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n100 100\n50 50\n''') == '50', 'First'\nassert solution('''\n1\n0 0\n''') == '0', 'Second'\nassert solution('''\n5\n100 100 100 100 100\n50 50 50 50 50\n''') == '50', 'Third'\nassert solution('''\n10\n0 0 1 1 0 0 1 0 1 1 1 0 1 1 1 1 1\n0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '31.23', 'Fourth'\nassert solution('''\n1000\n
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '50'\nassert solution('0 50') == '25'\nassert solution('1 100') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n100 100\\n50 50\\n') == '50'"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '25'\nassert solution('0 50') == '50'\nassert solution('100 100') == '50'\n\"\"\""
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n100 100\\n50 50\") == \"50\"\nassert solution(\"2\\n0 50\\n50 0\") == \"25\""
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '50'\nassert solution('100 100') == '50'\nassert solution('0 50') == '25'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n0 50\\n50 0') == '25'\nassert solution('2\\n100 100') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n0 50\n50 0\n''') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n100 100\\n50 50\") == \"50\"\nassert solution(\"2\\n0 50\\n50 0\") == \"25\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n100\n200\n2010\n\"\"\") == \"160\"\n\nassert solution(\"\"\"\n4\n400\n500\n100\n200\n\"\"\") == \"400\"\n\nassert solution(\"\"\"\n6\n100\n200\n200\n100\n200\n100\n\"\"\") == \"500\""
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '160'\nassert solution('3') == '250'\nassert solution('4') == '300'\nprint(solution('''3\n100\n200\n2010'''))\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''\n2\n100\n200\n''') == '160'\nassert solution(\n'''\n3\n100\n200\n2010\n''') == '250'"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n100\n200\n''') == '160'\nassert solution('''\n2\n100\n200\n''') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '160'\nassert solution('3') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n100\n200\n2010\n''') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n100\n200\n''') == '160'\nassert solution('''3\n100\n200\n2010\n''') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n100\n200\n''') == '160'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n100\n200''') == '160'\nassert solution('''3\n100\n200\n2010''') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n100\\n200\\n') == '160'\nassert solution('2\\n100\\n200\\n2010\\n') == '250'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n0 1 1\n2 3 1\n''') == \"2\"\n\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 5\") == \"0\""
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 5') == '0'"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n0 1 1\\n2 3 1\\n\") == \"0\"\nassert solution(\"1 1\\n0 0\\n1 1\\n\") == \"2\"\nassert solution(\"5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n\") == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '2'\nassert solution('4 5') == '0'\nassert solution('15 5') == '1'\nassert solution('10 1') == '1'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == \"2\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 2\n0 1 1\n2 3 1\n''') == '2'\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 5\") == \"0\""
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n3 3 2\") == \"1 1\"\nassert solution(\"4 3\\n3 3 2\") == \"1 1\"\nassert solution(\"4 2\\n3 3\") == \"2 3\""
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1 1\\n1 2\\n2 3 4'"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"1 1\"\nassert solution(\"4 2\") == \"1 2\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 3\n3 3 2 1\n3 3 3''') == '1 1\\n1 2\\n2 3 4'\nassert solution('''4 3\n3 3 2 1\n3 3 3''') == '1 1\\n1 2\\n-1'\nassert solution('''4 3\n3 3 2 1\n5 3\nSample Output 3:\n-1\nSample Input 4:\n10 3\n6 3 2 3 2 1 3 5 5 5 4 5 5\nSample Output 4:\n0\n''') == '0'\nassert solution('''10 3\n6 3 2 3 2 1 3 5 5 5 4 5 5\nSample Output 4:\n-1\nSample Input 5:\n8 2\n2 2 3 4 5 6 7 8\nSample Output 5:\n1 1\n''') == '1 1'\nassert solution('''8 2\n2 2 3 4 5 6 7 8\nSample Output 5:\n1 1\n''') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3\\n3 3 2 1') == '1 1'\nassert solution('4 2\\n3 3 2 1') == '-1'\nassert solution('5 3\\n3 3 2 1\\n2 3 3') == '3 4 5 6 7 8 9'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n3 3 2\n3 3 3\n''') == '1 1'\n\nassert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 1'\n\nassert solution('''\n2 2\n1 1\n''') == '2 2'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n3 3 2\n3 3 3''') == '1 1\\n2 3 4'\nassert solution('''4 2\n3 3 2 2\n6 3''') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 1'\nassert solution('''\n4 2\n3 3 2 2\n6 3\n''') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 1\n1 2\n2 3 4\n''')\n\nassert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '-1\n'''\n\n###########################################################################################################################################\n###########################################################################################################################################\n###########################################################################################################################################\n\n\n\n\n'''\nWOW\n\n'],\n      'lst': [['M', 'S', 'F'],\n     ['T', 'F', 'F'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S', 'S'],\n     ['S', 'S',"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '1 1\\n1 2\\n2 3 4'\nassert solution('4 2') == '-1'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\n''') == '10.0\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == '4.0\n'''"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 10\\n0 0 D\\n10 1 L\") == \"10.0\\n10.0\\n0.0\"\nassert solution(\"4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D\") == \"10.0\\n4.0\\n1.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\nSample Output 1:\n10.0\n10.0\n0.0''') == '10.0\\n10.0\\n0.0'\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\nSample Output 2:\n10.0\n4.0\n1.0\n''') == '10.0\\n4.0\\n1.0'"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 10') == '10.0'\nassert solution('4 3 7') == '10.0 4.0 1.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '10.0\\n10.0\\n0.0\\n'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\n''') == '10.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 10\") == \"10.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution_stdin) == \"10.0\\n4.0\\n1.0\"\nprint('\"Run\" is good. Type some math to get credit!')"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"10.0\\n4.0\\n1.0\"\nassert solution() == \"10.0\\n10.0\\n10.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 10') == '10.0'\nassert solution('4 3 7') == '10.0'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz''') == 'we will avenge our dead parrot arr'\nassert solution('''wl jkd''') == 'Impossible'\nassert solution('''\"\"\"\"''') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz\nwl jkd''') == 'we will avenge our dead parrot arr'\n\nassert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz\nwl hxxqyy\n''') == 'Impossible'\n\nassert solution('''tlksjzxn\n''') == 'tlksjzxn'\n\nassert solution('''x\n''') == 'x'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"Impossible\""
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('eo ii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\nassert solution('edce eowiu ecnu yus klm') == 'Impossible'\nassert solution('iiu rlm') == 'Impossible'\nassert solution('s uu ') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\""
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nHamburg Bremen\n1\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\n\"\"\") == \"68.3\"\nassert solution(\"\"\"\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\nAmsterdam Rotterdam\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('input.txt') == '4.18446744073709551615'"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"Hamburg Bremen\n1\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\"\"\") == '68.3'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('Hamburg Bremen') == '68.3'\nassert solution('Amsterdam Rotterdam') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''Hamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n''') == '68.3'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''Hamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n''') == '68.3'\nassert solution('''Amsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\nBremen Hamburg\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"68.3\"\nassert solution(\"\"\"\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('\\n'.join(['Hamburg Bremen', '3', 'Hamburg Bremen 15 68 10 5', 'Hamburg Bremen 46 55 50 60', 'Bremen Frankfurt 14 226 10 120'])) == '68.3'\nassert solution('\\n'.join(['Amsterdam Rotterdam', '1', 'Amsterdam Utrecht 10 22 5 10', 'Amsterdam Utrecht 10 22 5 10', 'Amsterdam Utrecht 10 22 5 10'])) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('Hamburg Bremen') == '68.3'\nassert solution('Bremen Hamburg') == 'IMPOSSIBLE'\n\nassert solution('Rotterdam Utrecht') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Hamburg Bremen') == '68.3'\nassert solution('Bremen Frankfurt') == 'IMPOSSIBLE'\nassert solution('Amsterdam Rotterdam') == '10.5'\n'''\n\n'''\n\nfrom math import *\nimport random"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '4'"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '1'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*\\n') == '3'\nassert solution(\n    '2\\n*.*\\n...\\n*.*\\n') == '4'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n*-*.*\n|.|.|\n*.*-*\"\"\") == \"3\"\n\nassert solution(\"\"\"3\n*-*.*\n|.|.|\n*.*-*\"\"\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '4'\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*') == '3'\nassert solution('2\\n*.*\\n...\\n*.*') == '4'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '4'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1111\n1 1\n1 1\n1 1\n1 2\n3 2\n''') == 'impossible', 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"impossible\"\nassert solution(\"12210020\") == \"4\""
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'impossible'\nassert solution('2\\n12\\n2\\n1\\n1\\n1\\n12\\n1\\n2\\n') == '4'\nassert solution('4\\n12210020\\n12210020\\n12210020\\n12210020\\n12210020\\n12210020\\n') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n111\n2\n1\n1\n''') == '4'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n111\") == \"impossible\"\nassert solution(\"4\\n1110\") == \"3\"\nassert solution(\"4\\n1112\") == \"impossible\"\nassert solution(\"4\\n1220\") == \"3\"\nassert solution(\"4\\n1221\") == \"4\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8\") == \"impossible\"\nassert solution(\"4\") == \"4\""
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"impossible\"\nassert solution(\"12210020\") == \"4\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1111\n''') == 'impossible'\nassert solution('''\n8\n12210020\n''') == '4'\nassert solution('''\n10\n12210020\n12210020\n12210020\n12210020\n12210020\n''') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8') == 'impossible'\nassert solution('4') == '4'\nassert solution('12210020') == '4'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"Bill will be bitten.\"\nassert solution(\"1\\n5\\n5\\n1\") == \"Bill enters at (0.00, 500.00) and leaves at (500.00, 500.00). Bill will be bitten.\"\nprint(solution(input()))\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4') == 'Bill will be bitten.'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'Bill enters at (0.00, 0.00) and leaves at (0.00, 0.00).'\nassert solution('1') == 'Bill enters at (0.00, 0.00) and leaves at (0.00, 0.00).'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n500 500 499\n0 0 999\n1000 1000 200\nSample Input 3:\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 3:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\n''') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n500 500 499\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4') == 'Bill will be bitten.'\n\n\"\"\"\n\nn = int(input())\nsnakes = []\n\nfor i in range(n):\n    snakes.append([int(i) for i in input().split(' ')])"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\nassert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\\n\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\\n\") == \"Bill will be bitten.\""
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n\"\nassert solution(\"4\") == \"Bill will be bitten.\\n\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\\n\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\\n\") == \"Bill will be bitten.\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 3') == 'xxooooo'\nassert solution('2 3') == 'xx'"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 3') == '++xx+o++'\n\nassert solution('8 3') == 'xxoooooo'\n\nassert solution('10 3') == 'xxoo+oo+oo+o++'"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''8 3\n++xx+x++\n''') == '++xx+o++'\nassert solution('''8 3\n--xx+x++\n''') == '--xxoo+'\nassert solution('''8 3\n++x+++x++\n''') == '++xooo++'\nassert solution('''8 3\nxx+xx+x++\n''') == 'xxoooooo'\nassert solution('''8 3\n--x++x++\n''') == '--xooo+'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([1, 1]) == \"--oo+--\", \"Should be --oo+--\"\nassert solution([1, 0]) == \"--oo+--\", \"Should be --oo+--\"\nassert solution([2, 1]) == \"o+oo--\", \"Should be o+oo--\"\nassert solution([2, 0]) == \"oo+--\", \"Should be oo+--\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    8 3\n    ++x++\n    \"\"\"\n) == \"\"\"\n++x++\n\"\"\".strip()\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"++xx+o++\"\nassert solution(\"8 3\") == \"xxoooooo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([8, 3]) == \"++xx+o++\"\nassert solution([8, 4]) == \"xxooo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8 3\n++xx+x++''') == '++xx+o++'\nassert solution('''8 3\nxxxxxxxx''') == 'xxoooooo'\nassert solution('''10 2\nxx+xxxxx++x+x+xx''') == 'xx+ooooxxxooo+xx'\nassert solution('''10 2\nxx+x+xx+xx''') == 'xx+xx'\nassert solution('''5 3\n+++++++''') == '+++++++'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 7\\n++x+x++\\n\"\n    ) == \"++x+o++\"\nassert solution(\n    \"5 7\\n+x++x++\\nxooxxx+\\n++x+x+x\\n+++x+xx\\n++x+x+x+x\"\n    ) == \"xoooxxx++\"\nassert solution(\n    \"8 3\\n++xx+x++\\n\"\n    ) == \"xxooooo\""
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\n++xx+x++\n--xx+x++\n++xx+x++\n''') == '++xx+x++'\nassert solution('''8\n++xx+x++\n--xx+x++\n++xx+x++\n''') == 'xxooo++'\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Sample Input 1') == 'Sample Output 1'\nassert solution('Sample Input 2') == 'Sample Output 2'"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\nlost is close to lose\n\"\"\") == \"\"\"\nclose: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n\"\"\"[:-1]\n\nassert solution(\"\"\"\nthe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nLost is Close to Lose\n\"\"\") == \"\"\"close: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n\"\"\".strip()\nassert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"clock: oclock\nhe: hen the\nhen: hen when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n''') == 'oclock: clock\\nhen: hen the\\ntill: will\\nwhen: hen\\nwill: till\\ndef solution(stdin: str) -> str:\\n    pass\\n'"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"Sample Input 1:\") == \"close: lose\\the: hen\\nin: inc\\nis: in\\nlose: close lost\\nThe fox said, \\\"When?\\\", \\\"Not till 12 o'clock\\\", \\\"That clock is stopped, it will never strike., he said.\\\"\"\nassert solution(\"Sample Input 2:\") == \"clock: oclock\\the: hen the\\nhen: he when\\nis: it\\nit: is\\ntill: will\\nwhen: hen\\nwill: till\\ndef solution(stdin: str) -> str:\"\n\nSample Input 3:\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\nSample Output 3:\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('lost is close to lose') == 'close: lose', 'First'\nassert solution('The fox said, \"When?\"') == 'clock: oclock', 'Second'"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\") == \"oclock: clock\\the: hen the\\ntill: will\\nwhen: hen\\nwill: till\\ndef solution(stdin: str) -> str:\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"clock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"clock: oclock\\the: hen the\\then: he when\\tis: it\\tis: is\\till: will\\twhen: hen\\twill: till\\tclock: oclock\\tclock: oclock\\tclock: oclock\\tclock: oclock\\the: hen\""
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10\\n1 2 7 3 8 9 4 5 10 6\\n') == '1'\nassert solution('5\\n3 8 1 9 4 5 2 7 10 6\\n') == '2'\nassert solution('1000\\n3 6 5 7 1 8 9 4 2 10\\n') == '3'\nprint('All test cases passed.')\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('10\\n3 8 1 9 4 5 2 7 10 6') == '2'\nassert solution('50\\n8 9 3 2 6 7 1 4 5') == '3'"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 7 3 8 9 4 5 10 6') == '1 2'\nassert solution('10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('10 3 1 4 2') == '3 1'\nassert solution('2 4 3 1') == '2 3 1 4'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == \"1\"\nassert solution('2') == \"1\"\nassert solution('3') == \"2\"\nassert solution('4') == \"2\"\nassert solution('5') == \"3\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\nassert solution(\"10\\n3 8 1 9 4 5 2 7 10 6\") == \"2\"\nassert solution(\"1000000\\n1\") == \"1\"\nassert solution(\"1000000\\n1 2\") == \"1\"\nassert solution(\"1000000\\n1 2 3\") == \"2\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10\\n1 2 7 3 8 9 4 5 10 6') == '1'\nassert solution('10\\n3 8 1 9 4 5 2 7 10 6') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\\n\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"1 2 7 3 8 9 4 5 10 6\\n\") == \"1 2 7 3 8 9 4 5 10 6\"\nassert solution(\"3 8 1 9 4 5 2 7 10 6\\n\") == \"3 8 1 9 4 5 2 7 10 6\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3') == '1\\n2\\n3'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\n1 2 7 3 8 9 4 5 10 6\n''') == '1'\nassert solution('''\n10\n3 8 1 9 4 5 2 7 10 6\n''') == '2'\n'''\nYou will not be tested for this problem.\n'''"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\""
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '1/1'\nassert solution('0.142857') == '1/7'\nassert solution('1.6 1') == '5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('2.71 2') == '1/11'\nassert solution('-2.71 2') == '-1/11'\nassert solution('-1.6 2') == '-5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\""
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nprint(solution(input()))\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\nassert solution(\"1.6 3\") == \"8/9\"\nassert solution(\"1.6 2\") == \"5/3\"\nassert solution(\"1.6 2.5\") == \"5/3\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1\\n') == '6'\nassert solution('1\\n0 0 0\\n0 0 1\\n1 1 1\\n') == '10'\nassert solution('2\\n0 0 0\\n0 0 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '16'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n0 0 0\n0 0 1\n''') == '6'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 0 0\n0 0 1\n0 0 2\n''') == '6'\nassert solution('''\n3\n0 0 0\n0 0 1\n0 0 2\n''') == '10'\nassert solution('''\n6\n0 0 0\n0 0 1\n0 0 2\n0 0 3\n0 0 4\n0 0 5\n0 0 6\n0 0 7\n0 0 8\n0 0 9\n0 0 10\n0 0 11\n0 0 12\n0 0 13\n0 0 14\n0 0 15\n0 0 16\n0 0 17\n0 0 18\n0 0 19\n0 0 20\n0 0 21\n0 0 22\n0 0 23\n0 0 24\n0 0 25\n0 0 26\n0 0 27\n0 0 28\n0 0 29\n0 0 30\n0 0 31\n0 0 32\n0 0 33\n0 0 34\n0 0 35\n0 0 36\n0 0 37\n0 0 38\n0 0 39\n0 0 40\n0 0 41\n0 0 42\n0 0 43\n0 0 44\n0 0 45\n0 0 46\n0 0 47\n0 0 48\n0 0 49\n0 0 50\n0 0 51\n0 0 52\n0 0 53\n0 0 54\n0 0 55\n0 0 56\n0 0 57\n0 0 58\n0 0 59\n0 0 60\n0 0 61\n0 0 62\n0 0 63\n0 0 64\n0 0 65\n0 0 66\n0 0 67\n0 0 68\n0 0 69\n0 0 70\n0 0 71\n0 0 72\n0 0 73\n0 0 74\n0 0 75\n0 0 76\n0 0 77\n0 0 78\n0 0 79\n0 0 80\n0 0 81\n0 0 82\n0 0 83\n0 0 84\n0 0 85\n0 0 86\n0 0 87\n0 0 88\n0 0 89\n0 0 90\n0 0 91\n0 0 92\n0 0 93\n0 0 94\n0 0 95\n0 0 96\n0 0 97\n0 0 98\n0 0 99\n0 0 100\n0 0 101\n0 0 102\n0 0 103\n0 0 104\n0 0 105\n0 0 106\n0 0 107\n0 0 108\n0 0 109\n0 0 110\n0 0 111\n0 0 112\n0 0 113\n0 0 114\n0 0 115\n0 0 116\n0 0 117\n0 0 118\n0 0 119\n0 0 120\n0 0 121\n0 0 122\n0 0 123\n0 0 124\n0 0 125\n0 0 126\n0 0 127\n0 0 128\n0 0 129\n0 0 130\n0 0 131\n0 0 132\n0 0 133\n0 0 134\n0 0 135\n0 0 136\n0 0 137\n0 0 138\n0 0 139\n0 0 140\n0 0 141\n0 0 142\n0 0 143\n0 0 144\n0 0 145\n0 0 146\n0 0 147\n0 0 148\n0 0 149\n0 0 150\n0 0 151\n0 0 152\n0 0 153\n0 0 154\n0 0 155\n0 0 156\n0 0 157\n0 0 158\n0 0 159\n0 0 160\n0 0 161\n0 0 162\n0 0 163\n0 0 164\n0 0 165\n0 0 166\n0 0 167\n0 0 168\n0 0 169\n0 0 170\n0 0 171\n0 0 172\n0 0 173\n0 0 174\n0 0 175\n0 0 176\n0 0 177\n0 0 178\n0 0 179\n0 0 180\n0 0 181\n0 0 182\n0 0 183\n0 0 184\n0 0 185\n0 0 186\n0 0 187\n0 0 188\n0 0 189\n0 0 190\n0 0 191\n0 0 192\n0 0 193\n0 0 194\n0 0 195\n0 0 196\n0 0 197\n0 0 198\n0 0 199\n0 0 200\n0 0 201\n0 0 202\n0 0 203\n0 0 204\n0 0 205\n0 0 206\n0 0 207\n0 0 208\n0 0 209\n0 0 210\n0 0 211\n0 0 212\n0 0 213\n0 0 214\n0 0 215\n0 0 216\n0 0 217\n0 0 218\n0 0 219\n0 0 220\n0 0 221\n0 0 222\n0 0 223\n0 0 224\n0 0 225\n0 0 226\n0 0 227\n0 0 228\n0 0 229\n0 0 230\n0 0 231\n0 0 232\n0 0 233\n0 0 234\n0 0 235\n0 0 236\n0 0 237\n0 0 238\n0 0 239\n0 0 240\n0 0 241\n0 0 242\n0 0 243\n0 0 244\n0 0 245\n0 0 246\n0 0 247\n0 0 248\n0 0 249\n0 0 250\n0 0 251\n0 0 252\n0 0 253\n0 0 254\n0 0 255\n''') == '10'\nassert solution('''\n5\n0 0 0\n0 0 1\n0 0 2\n0 0 3\n0 0 4\n''') == '6'\nassert solution('''\n5\n0 0 0\n0 0 1\n0 0 2\n0 0 3\n0 0 4\n''') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1\\n') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"2\") == \"10\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '15'\nassert solution('5') == '18'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n0 0 0\n''') == '6'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '10'\nassert solution('''\n3\n0 0 0\n0 0 1\n0 1 2\n''') == '15'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n0 0 0\\n0 0 1\\n\") == \"6\"\nassert solution(\"2\\n0 0 0\\n0 0 1\\n\") == \"10\""
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n5\n-1 2 -1\n2 2\n1 -1 1\n\"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"\n10\n-1 2 -1\n-1 2 2\n-1 -1 1\n1 2 -1\n-1 4 -1\n-1 -1 -1\n1 -1 1\n-1 -1 -1\n1 -1 -1\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input_1) == \"1\"\nassert solution(sample_input_2) == \"1\"\nassert solution(input_data) == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5\\n-1 2 -1\\n2 2\\n1 -1 1\\n\") == \"1\"\nassert solution(\n    \"6\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\\n\") == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n-1 2 -1\\n2 2\\n1 -1 1') == '1'\nassert solution('7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"6\") == \"1\"\n\nprint(solution(open(\"input.txt\").read()))\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1', \"Wrong!\"\nassert solution('4') == '2', \"Wrong!\""
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n-1 2 -1\\n2 2\\n1 -1 1\\n\") == \"1\"\nprint(solution(\"7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\\n\"))\n\"\"\"\n\n\"\"\"\n-1\n-2\n-3\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n\"\"\""
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n-1 2 -1\\n2 2') == '1'\nassert solution('7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\\n') == '1'\nassert solution('10\\n-1 -1 2 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 2 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1 -1 -"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('01') == '2'\nassert solution('100') == '4'\nassert solution('10011') == '4'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1001') == \"3\"\nassert solution('1111') == \"1\"\nassert solution('1011') == \"2\"\n\n\"\"\""
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1001\") == \"3\"\nassert solution(\"1111\") == \"1\""
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\nassert solution('10') == '1'\nassert solution('11') == '0'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n1''') == '2'\nassert solution('''0\n0''') == '1'\nassert solution('''1\n1''') == '2'\nassert solution('''1\n2''') == '2'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"LLL\"\n\nassert solution(\"\"\"\n5\n1 2 2 1 2\n\"\"\") == \"LLRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1') == 'LLL'\nassert solution('2 1 1') == 'LLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 2 1 2\n''') == \"LLRLL\"\nassert solution('''10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n''') == \"RRLLRLLRLLRRLLRRLRRRLLRLLRRLLRLLRRLLRRLRLLRRLRRLLRRLLRRLRRLLRRRRLLRRLRRLLRRRLLRRRRLLRRRLLRRRLRRRLRRRRRLLRRRRRLLRRRRLRRRLRRRLLRRRRLRRRRRLLRRRLRRRRRRRRRRLRRRRRRLRRRLLRRRRLRRRRRLRRRRRLLRRRRRRLRRRRLRRRRRLRRRRRRLRRRRRLLRRRRRLRRRLLRRRRLRRRRLLRRRLRRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRLRRRRRLRRRLRRRRRLLRRRRRRLRRRRLRRRRRRLRRRLRRRRRRRRLRRRRRLLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRRLLRRRRRRLRRRRR"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"LLRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"LLL\"\nassert solution(\"4\") == \"LLRR\"\nassert solution(\"5\") == \"LLRLL\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"LLRLLRLL\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"LLL\"\nassert solution(\"4\") == \"RLRR\"\nassert solution(\"5\") == \"LLRRRLL\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1\\n') == 'LLL'\nassert solution('5 1 2 2 1\\n') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 1 1\n''') == 'LLL'\nassert solution('''5\n1 2 2 1 2\n''') == 'LLRLR'\nassert solution('''9\n1 1 1 2 1 1 1 1 1\n''') == 'LLLLRRLLRR'\nassert solution('''10\n1 1 1 2 1 1 1 1 1\n''') == 'LLRRLLRRLL'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 1 1\n''') == 'LLL'\nassert solution('''\n5\n1 2 2 1 2\n''') == 'LLRLR'"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 10 7') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 6 7') == '25000000000021'\nassert solution('7 7 10') == '49000000000070'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3,2,1]) == \"Poor girl!\"\nassert solution([7,7,10]) == \"49000000000070\""
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6 7') == '49000000000070'\nassert solution('7 7 10') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'Poor girl'\nassert solution('''\n5 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '49000000000070'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([6, 7, 9]) == 'Poor girl!'\nassert solution([3, 4, 3]) == 'Poor girl!'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '49000000000070'\nassert solution('''\n7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '25000000000021'\nassert solution('''\n8 8 9\n1 2 1000000\n2 3 1000000\n3 4 5000000\n4 5 6000000\n5 6 7000000\n6 7 8000000\n7 1 8000000\n''') == '1000000000000'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000''') == '49000000000070'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\nassert solution('1 2 1000000') == 'Poor girl'\nassert solution('2 3 2000000') == 'Poor girl'\nassert solution('3 4 3000000') == 'Poor girl'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"Yeah!\\n2\\n1\\n2\\n2\\n3\\n3\\n\"\nassert solution(\"3 3\\n0 2\\n1 3\\n2 1\\n1 2\\n3 0\\n\") == \"Yeah!\\n2\\n1\\n2\\n2\\n3\\n3\\n\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2\\n2 1\\n0 0\\n2 2\\n1 0') == 'Yeah!'\nassert solution('5 5\\n0 1\\n1 0\\n2 3\\n3 2\\n4 4\\n4 0\\n5 3\\n3 3\\n4 2\\n2 1\\n0 0\\n5 2\\n2 4\\n4 1\\n5 0\\n1 0\\n3 4\\n5 4\\n4 3\\n3 2\\n2 1\\n1 0\\n2 2\\n3 4\\n2 0\\n2 3\\n1 1\\n1 0\\n2 0\\n0 0') == '0'\nassert solution('5 5\\n0 1\\n1 0\\n2 3\\n3 2\\n4 4\\n4 0\\n5 3\\n3 3\\n4 2\\n2 1\\n0 0\\n5 2\\n2 4\\n4 1\\n5 0\\n1 0\\n3 4\\n5 4\\n4 3\\n3 2\\n2 1\\n1 0\\n2 2\\n3 4\\n2 0\\n2 3\\n1 1\\n1 0\\n2 0\\n0 0') == '0'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4') == '2\\n2\\n0\\n1\\n2\\n2'"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"Yeah!\"\nassert solution(\"4 5\") == \"Yeah!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4') == '2'\nassert solution('4 4') == '2'\nassert solution('4 4 1 1 2 3 3 2 2') == '2'\nassert solution('4 4 1 1 2 3 3 2 2') == 'Yeah!'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == '2\\n'\nassert solution('4 4') == '2\\n'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 4\n0 1\n1 0\n2 3\n3 3''') == 'Yeah!'\nassert solution('''2 4\n0 1\n1 0\n2 3\n3 3\nSample Input 3:\n3 4\n0 1\n1 0\n2 3\n3 2\nSample Output 3:\n1\n2\n0\n1\n2\n2\n\n''') == '1'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"2\\n2\\n0\\n1\\n2\\n2\\n3\\n\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"2\\n0\\n1\"\nassert solution(\"5 5\") == \"1\\n0\\n1\\n0\\n1\"\nassert solution(\"5 5\") == \"1\\n0\\n1\\n0\\n1\""
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1 2\\n') == 'POSSIBLE'\nassert solution('2\\n1 2\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\n') == 'POSSIBLE\\n1 3\\n2 3'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'IMPOSSIBLE'\nassert solution('3') == 'POSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'POSSIBLE'\nassert solution('2') == 'IMPOSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n') == 'POSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\", \"Just testing\"\nassert solution(\"3\") == \"POSSIBLE\", \"Just testing\"\nassert solution(\"2\") == \"POSSIBLE\", \"Just testing\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"POSSIBLE\"\nassert solution(\"1 1 2\") == \"POSSIBLE\"\nassert solution(\"2 1 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1 1\\n') == 'POSSIBLE\\n1 3\\n2 3\\n'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 2\\n\") == \"POSSIBLE\"\nassert solution(\"2\\n1 2\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\") == \"POSSIBLE\"\nassert solution(\"3\\n1 1 2\") == \"IMPOSSIBLE\"\nassert solution(\"4\\n2 1 3 2\") == \"POSSIBLE\""
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nprint('all tests passed')\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0 0 0\n1 0 0\n0 1 0\n0 0 1\n''') == '0.5 0.5 0.5'\nassert solution('''\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\n''') == '0.0 0.0 -0.0'\nassert solution('''\n0 0 0\n1 0 0\n0 1 0\n0 0 1\n''') == '0.5 0.5 0.5'\nassert solution('''\n0 0 0\n-1 0 0\n0 1 0\n0 0 1\n''') == '0.0 0.0 0.0'\nassert solution('''\n-1 0 0\n0 0 0\n1 0 0\n0 0 1\n''') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0\") == \"0.5 0.5 0.5\", \"First Test Case\"\nassert solution(\"1 0 0\") == \"1.0 0.0 0.0\", \"Second Test Case\"\nassert solution(\"0 1 0\") == \"0.0 0.0 1.0\", \"Third Test Case\"\nassert solution(\"0 0 1\") == \"0.0 0.0 0.0\", \"Fourth Test Case\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0 0 0\n1 0 0\n0 1 0\n0 0 1\n''') == '0.5 0.5 0.5'\nassert solution('''\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\n''') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\""
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"0.0 0.0 -0.0\"\nassert solution(\"\"\"\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"0.5 0.5 0.5\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n9 9 9 9 9\n''') == '5'\nassert solution('''\n10\n2 2 2 2 2 2 2 2 2\n''') == '8'\nassert solution('''\n2\n17 17 17\n''') == '0'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n6 2 3 2 2 2 1 5 6\n''') == '2'\nassert solution('''10\n3 6 2 3 2 2 2 1 5 6\n''') == '2'\nassert solution('''5\n3 6 2 3 2 2 1 5 6\n''') == '3 2 2 1 5'\nassert solution('''7\n3 6 2 3 2 2 1 5 6\n''') == '3 2 2 1 5'\nassert solution('''7\n3 6 2 3 2 2 1 5 6\n''') == '2 2 1 5'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n3 6 2 3 2 2 2 1 5 6\nSample Output 1:\n2\n3 2 2 1 5\n3 2 2\n6 6\n\"\"\") == \"\"\"\n3\n2 2 2 1 5\n3 2 2\n6 6\n\"\"\".strip()\n\nassert solution(\"\"\"\n4\n7 8 9 10 11 12 13 14\nSample Output 2:\n0\n7 8 9 10 11\n7 8 9 10\n10 11 12 13\n10 11 12\n13 14\n\"\"\") == \"\"\"\n0\n7 8 9 10 11\n7 8 9 10\n10 11 12 13\n10 11 12\n13 14\n\"\"\".strip()\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0 2'\nassert solution('3') == '2 1 2'\n\"\"\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 2\n3''') == '2'\nassert solution('''1\n2''') == '1'\nassert solution('''5\n1 1 1 2 2\n5''') == '5'\nassert solution('''5\n1 2 1 1 1\n4''') == '3'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"10\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3 10\") == \"3 10\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"3 2\"\nassert solution(\"2\") == \"3 2\"\nassert solution(\"3\") == \"3 2 1\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0\\n1\\n2\"\nassert solution(\"10\") == \"2\\n2\\n1\""
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n3 6 2 3 2 2 2 1 5 6\n''') == '2'\nassert solution('''\n3\n17 17 17\n''') == '0'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n3 6 2 3 2 2 2 1 5 6\n3 2 2 1 5 6\n''') == '2'\nprint('All test cases passed...')"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == '74.6666666667'\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE'\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n2 3\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 1') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == '74.6666666667'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 1') == 'IMPOSSIBLE'\nassert solution('3 2 1') == '74.6666666667'"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('\\n'.join(['3 2 1', '1 2 7', '2 3 8', '1'])) == 'IMPOSSIBLE'\nassert solution('\\n'.join(['3 2 1', '1 2 7', '2 3 8', '1'])) == '74.6666666667'\nassert solution('\\n'.join(['3 2 1', '1 2 7', '2 3 8', '1'])) == '75.0'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE'\nprint(solution('''\n1 1 1\n1\n'''))\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\") == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == '74.6666666667'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 1\\n1 2 7\\n2 3 8\\n1') == \"IMPOSSIBLE\"\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\") == \"74.6666666667\"\nprint(\"All test cases passed\")"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n''') == '1'\n\nassert solution('''7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n''') == '2'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\n\"\"\"\n\nN, E = map(int, input().split())\nedges = [[] for _ in range(N)]\nfor i in range(E):\n    a, b = map(int, input().split())\n    edges[a-1].append(b-1)\n    edges[b-1].append(a-1)"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"7 7\") == \"1\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\\n') == '1\\n2\\n1\\n2\\n2\\n1\\n'"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '1'\nassert solution('7 7') == '2'\n\"\"\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"7 7\") == \"2\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"7 7\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_test_1) == \"1\\n2\\n1\\n2\\n1\\n2\\n1\"\nassert solution(input_test_2) == \"0\\n0\\n1\\n1\\n2\\n2\\n1\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"7 7\") == \"2\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_stdin()) == \"1\"\nassert solution(input_stdin()) == \"1\"\nprint(\"Congratulations! Your solution is correct.\")\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n0\n0\n0''') == '3'\nassert solution('''4\n2\n1\n0\n3\n0\n4\n''') == '2'\nassert solution('''5\n2\n1\n0\n3\n0\n4\n''') == '3'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n10 5 10\\n0\\n15\\n30\\n45\\n') == '10'\nassert solution('4\\n10 5 10\\n0\\n15\\n30\\n45\\n') == '5'\nassert solution('4\\n10 5 10\\n0\\n15\\n30\\n45\\n') == '10'\nassert solution('4\\n10 5 10\\n0\\n15\\n30\\n45\\n') == '10'\nassert solution('4\\n10 5 10\\n0\\n15\\n30\\n45\\n') == '5'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 10 2') == '10'\nassert solution('4 10 3') == '5'\n\nimport re\nprint(solution(re.sub(r\"([^\\d]+)(\\d+)\", r\"\\1\\2\", stdin)))\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 10 2\n0\n15\n30\n45\n''') == '10'\n\nassert solution('''4 10 3\n0\n15\n30\n45\n''') == '5'\n\nassert solution('''5 10 2\n0\n15\n30\n45\n''') == '10'\n\nassert solution('''10 10 3\n0\n15\n30\n45\n''') == '5'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 10 2\n0\n15\n30\n45\n''') == '10'\nassert solution('''6 3\n1\n3\n5\n7\n9\n''') == '7'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"6\"\nassert solution(\"30\") == \"14\"\nassert solution(\"50\") == \"25\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"10\"\nassert solution([4, 10, 3]) == \"5\"\nprint(\"ALL TEST CASES PASSED\")"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(t1) == \"10\"\nassert solution(t2) == \"5\""
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4 10 2\n0\n15\n30\n45\"\"\") == \"10\"\nassert solution(\"\"\"4 10 3\n0\n15\n30\n45\"\"\") == \"5\""
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 10 2\n0\n15\n30\n45\n''') == '10'\nassert solution('''\n4 10 3\n0\n15\n30\n45\n''') == '5'\nprint('Tests Passed!')\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n50 50 50\n25 25 25''') == '1'\nprint(solution('''4 3\n200 100 300 400\n50 50 50 50\n300 50 50 50\n50 50 100 50'''))"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 2\n50 50 75\n25 25 25\n''') == '2'\n\nassert solution('''5 2\n50 50 50 50\n25 25 25 25\n''') == '1'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 2\n50 50 75\n25 25 25 25\n10 10 10 10\n2 5 2\n6 5 1\n5 5 2''') == '1'\nassert solution('''10 2\n100 100 100 100\n25 25 25 25 25\n15 15 15 15 15\n8 8 8 8 8\n8 8 8 8 8\n6 6 6 6 6\n6 6 6 6 6\n5 5 5 5 5\n4 4 4 4 4\n3 3 3 3 3\n3 3 3 3 3\n2 2 2 2 2\n2 2 2 2 2''') == '2'\nprint('all test cases passed')"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n3 3 2\\n2 5 1\\n') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1\\n5 25\\n10 50\\n20 30\\n30 50\\n') == '3'\nassert solution('4 2\\n50 50 75\\n25 25 25\\nSample Output 2:\n1\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\n50 50 75\n25 25 25\n''') == '2'\nassert solution('''\n5 2\n50 50 50 50\n25 25 25 25\n''') == '1'\nassert solution('''\n6 2\n40 45 44 47 43\n11 12 13 20 19 17\n''') == '3'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 2\n50 50 75\n25 25 25\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2\n10 5 10\n20 20 10\n5 20 20\n5 5 20\n10 10 5\n10 20 10\n10 10 10''') == '1'\nassert solution('''10 2\n25 10 25 10\n10 10 25 10\n20 20 20 20\n10 10 20 10\n20 20 10 20\n10 10 20 20\n10 10 20 10''') == '9'\nassert solution('''10 2\n10 10 10 10\n10 10 10 10\n20 20 20 20\n10 10 20 10\n20 20 20 20\n10 10 20 20\n10 10 20 10\n20 20 20 20\n10 10 20 20''') == '9'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4\\n.LX.\\n.X..\\n....\\n.L..') == '1'\nassert solution('4 4\\n.X.L\\n.X..\\n.X.L\\n.X..') == '2'\nassert solution('4 4\\nX.LX\\n.X..\\n.X.L\\n.X..') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n.LX.\\n.X..\\n....\\n.L..\") == \"1\"\nassert solution(\"4 4\\n.X..\\n.X..\\n...L\\n.X..\") == \"2\""
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n...L\n.X..''') == '1'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4\\n.LX.\\n.X..\\n...L\\n.X..') == '1'\nassert solution('4 4\\n.XLX\\n.X..\\n...L\\n.X..') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n....\n.L..\n''') == \"1\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n.X..\n.X..''') == '1'\nassert solution('''4 4\n.XLX\n.X..\n...L\n.X..''') == '2'"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n.L.L\n.LL\nLL.L\nLLLLLL.LL\nL.LLLLLL.LL\n''') == '1'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"1\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n.X.\n.X..\n...L\n.X..\n''') == \"1\"\nassert solution('''\n3 4\n.L.\n.X..\n...L\n.X..\n''') == \"0\"\nassert solution('''\n1 1\n.X.\n''') == \"1\"\nassert solution('''\n2 2\n.X.\n''') == \"1\"\nassert solution('''\n4 4\n.X.\n.X.\n....\n.X..\n''') == \"1\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n.X..\n...L\n.L..\n''') == '1'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_data) == 'home'\n\nstdin = \"\"\"\n3 2 1\n1 1\n2 0 2\n2 1 3\n1 2\n\"\"\"\nassert solution(stdin) == 'home'\n\nstdin = \"\"\"\n7 3 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n1 2\n\"\"\"\nassert solution(stdin) == 'detention'\n\nstdin = \"\"\"\n8 5 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n1 2\n2 2 4\n2 2 5\n1 3\n\"\"\"\nassert solution(stdin) == 'home'\n\nstdin = \"\"\"\n12 5 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n2 2 5\n2 3 6\n1 3\n1 2\n2 2 4\n2 2 5\n1 3\n1 2\n1 4\n2 4 5\n2 5 6\n1 4\n\"\"\"\nassert solution(stdin) == 'home'\n\nstdin = \"\"\"\n1 1\n3\n1 2 3\n\"\"\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"home\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'\n\nSample Input 3:\n20 0 0\n0 1\n1 1\n0 1\n0 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n0 9\n1 10\n1 11\n1 12\n1 13\n1 14\n0 15\n1 16\n1 17\n0 18\n1 19\n0 20\n1 21\n0 22\n1 23\n0 24\n1 25\n1 26\n1 27\n0 28\n0 29\n1 30\n1 31\n1 32\n1 33\n0 34\n1 35\n0 36\n0 37\n1 38\n1 39\n1 40\n1 41\n1 42\n1 43\n0 44\n1 45\n0 46\n0 47\n1 48\n0 49\n1 50\n0 51\n1 52\n0 53\n1 54\n0 55\n1 56\n0 57\n1 58\n0 59\n1 60\n1 61\n1 62\n0 63\n1 64\n1 65\n1 66\n1 67\n0 68\n1 69\n0 70\n0 71\n1 72\n1 73\n0 74\n1 75\n0 76\n0 77\n1 78\n1 79\n0 80\n1 81\n1 82\n1 83\n1 84\n1 85\n0 86\n1 87\n0 88\n0 89\n1 90\n1 91\n1 92\n1 93\n0 94\n1 95\n1 96\n1 97\n0 98\n1 99\n0 100\n0 101\n1 102\n1 103\n1 104\n1 105\n0 106\n1 107\n0 108\n1 109\n1 110\n1 111\n1 112\n0 113\n1 114\n1 115\n1 116\n1 117\n1 118\n1 119\n0 120\n1 121\n0 122\n1 123\n1 124\n1 125\n1 126\n1 127\n0 128\n1 129\n0 130\n1 131\n1 132\n1 133\n0 134\n1 135\n0 136\n0 137\n1 138\n1 139\n1 140\n1 141\n0 142\n1 143\n1 144\n1 145\n1 146\n1 147\n0 148\n1 149\n1 150\n1 151\n0 152\n1 153\n1 154\n1 155\n1 156\n1 157\n1 158\n1 159\n1 160\n1 161\n1 162\n1 163\n1 164\n1 165\n0 166\n1 167\n1 168\n1 169\n1 170\n1 171\n1 172\n0 173\n1 174\n1 175\n1 176\n1 177\n1 178\n1 179\n1 180\n1 181\n1 182\n1 183\n1 184\n1 185\n1 186\n1 187\n1 188\n1 189\n1 190\n1 191\n1 192\n1 193\n1 194\n1 195\n1 196\n1 197\n1 198\n1 199\n1 200\n1 201\n1 202\n1 203\n1 204\n1 205\n1 206\n1 207\n1 208\n1 209\n1 210\n1 211\n1 212\n1 213\n0 214\n1 215\n1 216\n1 217\n1 218\n1 219\n1 220\n1 221\n1 222\n1 223\n0 224\n1 225\n0 226\n1 227\n1 228\n1 229\n1 230\n1 231\n1 232\n1 233\n1 234\n1 235\n1 236\n1 237\n1 238\n1 239\n1 240\n1 241\n1 242\n1 243\n1 244\n1 245\n1 246\n1 247\n1 248\n1 249\n1 250\n1 251\n1 252\n1 253\n1 254\n1 255\n1 256\n1 257\n1 258\n1 259\n1 260\n1 261\n1 262\n1 263\n1 264\n1 265\n1 266\n1 267\n1 268\n1 269\n1 270\n1 271\n1 272\n1 273\n1 274\n1 275\n1 276\n1 277\n1 278\n1 279\n1 280\n1 281\n1 282\n1 283\n1 284\n1 285\n1 286\n1 287\n1 288\n1 289\n1 290\n1 291\n1 292\n1 293\n1 294\n1 295\n1 296\n1 297\n1 298\n1 299\n0 300\n1 301\n1 302\n1 303\n1 304\n1 305\n1 306\n1 307\n1 308\n1 309\n1 310\n1 311\n1 312\n1 313\n1 314\n1 315\n1 316\n1 317\n1 318\n1 319\n1 320\n1 321\n1 322\n1 323\n0 324\n1 325\n1 326\n1 327\n1 328\n1 329\n1 330\n1 331\n1 332\n1 333\n1 334\n1 335\n1 336\n1 337\n1 338\n1 339\n1 340\n1 341\n1 342\n1 343\n1 344\n1 345\n1 346\n1 347\n1 348\n1 349\n1 350\n1 351\n1 352\n1 353\n1 354\n1 355\n1 356\n1 357\n1 358\n1 359\n1 360\n1 361\n1 362\n1 363\n1 364\n1 365\n1 366\n1 367\n1 368\n1 369\n1 370\n1 371\n1 372\n1 373\n1 374\n1 375\n1 376\n1 377\n1 378\n1 379\n1 380\n1 381\n1 382\n1 383\n1 384\n1 385\n1 386\n1 387\n1 388\n1 389\n1 390\n1 391\n1 392\n1 393\n1 394\n1 395\n1 396\n1 397\n1 398\n1 399\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2 1') == 'home'\nassert solution('4 2 1') == 'home'\nassert solution('5 2 1') == 'detention'\nassert solution('4 2 1') == 'detention'\nassert solution('5 2 2') == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2 1') == 'home'\nassert solution('5 2 1') == 'home'\nassert solution('3 2 3') == 'detention'\nassert solution('4 2 2') == 'detention'\nassert solution('6 2 2') == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3''') == 'home'\nassert solution('''5 2 2\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n4 3''') == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n') == 'home'\nassert solution('6 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n3 2 5\\n1 3\\n') == 'detention'\nassert solution('8 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n3 2 5\\n3 2 6\\n1 3\\n') == 'home'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'\nprint('Tests passed')\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"home\"\nassert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\") == \"detention\"\nassert solution(\"10 1 1\\n1 1\\n1 2\\n2 1\\n2 1\") == \"home\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"allatral\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\ntralalal\nt"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"tralalal\") == \"allatral\", \"1\"\nassert solution(\"zzzz\") == \"-1\", \"2\"\nassert solution(\"tralalal\") == \"tralalal\", \"3\""
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''abc\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"-1\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('tralalal') == 'allatral'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"allatral\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aaabaaaaa') == 'aaabaaaaa'\nassert solution('aaa') == 'aaa'\nassert solution('aaaa') == '-1'\nassert solution('aabaaa') == 'aaabaaa'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '5'\nassert solution('3 2 1 6 4 5') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n''') == '5'\nassert solution('''\n6\n3 2 1 6 4 5\n''') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('1') == '0'\nassert solution('5') == '4'\n\n'''\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"8\""
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 2 3 4\n3\n1 2\n1''') == '2'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('6\\n3 2 1 6 4 5') == '8'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '18'\nassert solution('100\\n1 2 3 4 5 6 7 8 9 10') == '22'"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('6\\n3 2 1 6 4 5') == '8'"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'\nassert solution('3 2 1 6 4 5') == '8'\nassert solution('123456789') == '86'\nassert solution('123456789 100') == '65'"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n10\n''') == '1'\nassert solution('''\n4\n10\n''') == '2'\nassert solution('''\n3\n10\n''') == '1'\nassert solution('''\n5\n10\n''') == '2'\nassert solution('''\n6\n10\n''') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47''') == '1'\n\nassert solution('''8\n3\n3\n3\n2\n2\n2\n1\n1\n2\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n2\n1\n1\n1\n1\n1''') == '2'\n\nassert solution('''44\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1''') == '1'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('523') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '2'\nassert solution('7') == '5'\nassert solution('10') == '7'\nassert solution('100') == '10'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n14\n''') == '1'\nassert solution('''\n3\n''') == '1'\nassert solution('''\n4\n''') == '2'\nassert solution('''\n7\n''') == '4'\nassert solution('''\n54\n''') == '6'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"47\") == \"1\"\nassert solution(\"523\") == \"2\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('47\\n') == '1'\nassert solution('523\\n') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('47') == '1'\nassert solution('523') == '2'\n\"\"\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5') == '0'\nassert solution('3 1 5') == '0'\nassert solution('2 2') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\nassert solution('4 5') == '0'\nassert solution('8 5') == '1'\nassert solution('100 6') == '99999'\nassert solution('99999 6') == '99999'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"4 5\") == \"0\""
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5') == '0'\nassert solution('2 2') == '1'\nassert solution('0 1 10') == '0 1 10'\nassert solution('1 2 10') == '1 2 10'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n2 2\n0 1 20\n1 0 5\n'''\n) == '1 0 5'\nassert solution(\n'''\n3 4\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n'''\n) == '1 0 5'\nassert solution(\n'''\n5 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n'''\n) == '2 0 20'\nassert solution(\n'''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n'''\n) == '3 2 10'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 5') == '0 1 10'\nassert solution('2 2 5') == '1 0 5'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2\\n0 1 20\\n1 0 5\\n') == '1 0 5\\n0 1 15'"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"0\\n1 15\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20') == '1 0 15'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5\\n1 2 3 5\\n2 3') == '1'\nassert solution('5 3\\n1 3 2 1 5\\n1 3') == '5'\nassert solution('5 3\\n1 3 2 1 5\\n2 3') == '3'\nassert solution('4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n4 5\\n5 5') == '2'\nassert solution('10 3\\n1 3 2 1 5\\n1 3') == '10'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 4\\n4 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4') == '1'\nassert solution('5 4\\n4 3\\n3 4\\n4 5\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5') == '1'\nprint('all passed')\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"5 6\") == \"5\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6\\n1 3 2 1 5\\n1 3') == '5'\nassert solution('4 3\\n4 4 8 12') == '1'\nassert solution('6 5\\n5 6 8 12 9 10\\n10 6\\n9 9\\n8 6\\n7 5\\n6 5\\n5 6\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n6 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'\nassert solution('4 4 8 12') == '2'\nprint('You passed all tests!')"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\nassert solution(\"4 3\") == \"1\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\n''') == '5'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n4 3 2 1 5') == '5'\nassert solution('5 6\\n1 3 2 1 5') == '5'\nassert solution('10\\n4 3 2 1 5\\n4 3 2 1 5') == '5'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"5 6\") == \"4\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"4 4 8 12\") == \"5\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'\nassert solution('4 4 8 12') == '3'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(test) == '7'\nassert solution(input) == '24'\nassert solution('1311') == '24'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"0210200\"\n) == \"7\"\n\nassert solution(\n    \"11\"\n) == \"1\""
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1000000000''') == '1000000000'\n\nassert solution('''\n1\n100000000''') == '999999999'\n\nassert solution('''\n1\n10000000000''') == '9999999999'\n\nassert solution('''\n1\n1000000000000''') == '999999999999'\n\nassert solution('''\n1\n10000000000000''') == '99999999999999'"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('020302') == '7'\nassert solution('1311') == '24'\n\nassert solution
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"02210\") == \"4\"\nassert solution(\"1311\") == \"24\""
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0123456789') == '1'\nassert solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789') == '1'\nassert solution('1234') == '4'\nassert solution('123445') == '5'\nassert solution('123445678') == '10'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('020302') == '7'\nassert solution('1311') == '24'\nassert solution('13112') == '25'\nassert solution('131112') == '25'\nassert solution('1311212') == '25'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '1234',\n) == '1234', \"First\"\nassert solution(\n    '2222',\n) == '0', \"Second\"\nassert solution(\n    '1311',\n) == '1', \"Third\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('021302') == '7'\nassert solution('1311') == '24'\nassert solution('112') == '1'"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '7'\nassert solution(input()) == '24'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 10') == '3 1 3 10'\nassert solution('5 20') == '1 15 5 15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 20\\n###########.#.#.#.\\n###########...#.###.\\n##########..##.#..##.\\n###########.###...#.##\\n###########.###...#.###\\n##########.###...#.###') == '1 15 5 15'\nassert solution('3 10\\n###########.#.\\n###########.###\\n##########.###') == '3 1 3 10'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 10\") == \"3 1 3 10\"\nassert solution(\"5 20\") == \"1 15 5 15\"\nassert solution(\"1 1 10\") == \"2 3 4 5\"\nassert solution(\"1 1 1\") == \"2 3 4 5\"\n\nassert solution(\"2 1 1\") == \"1 1 1\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 6\\n#.##...#.\\n##...##.\\n##...#..\\n##...###.\\n#.##.##.\\n##...##.\\n##...##.\\n') == '1 15 5 15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 10') == '3 1 3 10'\nassert solution('5 20') == '1 15 5 15'"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\\n') == '1 1 3 10'\n\nassert solution('5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##.\\n###########..#.#.##.##.\\n###########.###...#.##.\\n') == '1 15 5 15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 20') == '1 15 5 15'"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\nassert solution(\"100 0.00153797\") == \"100.00153797\"\nassert solution(\"123 0.00153797\") == \"123.00153797\"\nassert solution(\"1000 0.00153797\") == \"1000.00153797\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n\nfor i in range(1,20):\n    print(solution(f'{i} 1.000'))\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '16.339203308'\nassert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''50 0.125\n201 1.000''') == '16.339203308'\nprint('Almost there!') if abs(__import__('code').run(__import__('path').realpath(__file__),'solution', globals(), locals(), ['solution']) - __import__('code').run(__import__('path').realpath(__file__),'solution', globals(), locals(), ['solution']) < 10**-6 else print(abs(__import__('code').run(__import__('path').realpath(__file__),'solution', globals(), locals(), ['solution']) - __import__('code').run(__import__('path').realpath(__file__),'solution', globals(), locals(), ['solution']) < 10**-6)\nprint('TESTS PASSED')\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n0.5 1\n''') == '2'\n\nassert solution('''\n4 3\n1 11\n0.4 1\n''') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 1\n0.5 1\n''') == '2'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 3') == '3'\nassert solution('5 7') == '4'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 4') == '1'\nassert solution('10 10') == '7'\nassert solution('15 15') == '13'\nassert solution('25 25') == '13'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 1\n0.5 1\n\"\"\") == \"2\"\nassert solution(\"\"\"4 3\n1 11\n0.4 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 2 1\") == \"2\"\nassert solution(\"4 3\") == \"3\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2\\n0.5 1') == '2'\nassert solution('4 3\\n1 11\\n0.4 1') == '3'\n'''\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n0.5 1\\n') == '2'\nassert solution('4 3\\n1 11\\n') == '3'\n\"\"\"\nimport math\nimport re"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '10.5'\nassert solution([]) == '-1'\nassert solution(['7', '1']) == '10.5'\nassert solution(['10', '0']) == '-1'\nassert solution(['3', '2']) == '10.5'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"10.5\"\nassert solution(\"1\\n7 1\\n3 2\\n10 0\\n\") == \"10.5\"\nassert solution(\"1\\n0 1\\n0 2\\n10 0\\n\") == \"-1\"\nassert solution(\"0\\n1 1\\n3 2\\n10 0\\n\") == \"10.5\"\nassert solution(\"1\\n1 1\\n2 2\\n10 0\\n\") == \"10.5\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '10.5'\nassert solution('3') == '-1'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '10.5'\nassert solution('3') == '-1'\nassert solution('2') == '0.5'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '10.5'\nassert solution('3') == '-1'\nassert solution('3') == '-1'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2.5'\nassert solution('4') == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 0\n2 1\n3 2\n0 3''') == '-1'\nassert solution('''10\n1 0\n2 1\n3 2\n0 3''') == '10.5'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n4 1\n4 2\n4 0\n''') == '-1'\nassert solution('''\n6\n6 1\n6 2\n5 0\n''') == '12.0'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n7 1\\n3 2\\n10 0\\n') == '10.5'\nassert solution('3\\n7 1\\n3 2\\n10 0\\n') == '-1'\nassert solution('0\\n0 0\\n') == '0'\nassert solution('0\\n0 0\\n') == '-1'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"10.5\"\nassert solution(\"3\\n7 1\\n3 2\") == \"10.5\"\nassert solution(\"3\\n2 1\\n4 0\\n0 3\") == \"-1\""
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '1'\nassert solution('2 0.5\\n2 0.5\\n1 0.5') == '1'\nassert solution('1 0.5\\n2 0.5\\n1 0.5') == '0'\nassert solution('1 0.5\\n1 0.5\\n2 0.5') == '0'\nassert solution('1 0.5\\n2 0.5\\n2 0.5') == '0'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 0.5\") == \"1\"\nassert solution(\"2 0.5\") == \"2\"\nassert solution(\"2 0.51\") == \"2\"\nassert solution(\"1 0.49\") == \"2\""
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '1'\nprint('All test cases passed!')"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 0.5') == '1'\nassert solution('2 0.5') == '1'\nassert solution('2 0.51') == '2'\nassert solution('1 0.49') == '2'"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\nassert solution('1000000') == '1000000'\n\"\"\"\nimport math"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 0.5\\n2 0.5\\n1 0.5') == '1'\nassert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 0.5\n2 0.51\n1 0.49''') == '1'\nassert solution('''5 0.5\n5 0.51\n1 0.49\n4 0.49\n3 0.49''') == '4'\nassert solution('''5 0.5\n5 0.51\n1 0.49\n4 0.49\n3 0.49\n3 0.5''') == '2'\nassert solution('''6 0.5\n6 0.51\n1 0.49\n4 0.49\n3 0.49\n3 0.51''') == '3'\nassert solution('''6 0.5\n6 0.51\n1 0.49\n4 0.49\n3 0.49\n3 0.51''') == '3'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49\\n') == '2'\nassert solution('1\\n2 0.5\\n1 0.49\\n') == '2'\nassert solution('10\\n1 0.5\\n9 0.5\\n5 0.5\\n6 0.5\\n1 0.5\\n') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\nassert solution(\"2 0.5\\n2 0.51\\n1 0.51\") == \"1\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n\"\"\") == \"yes\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5 2') == 'yes', 'test 1 failed'\nassert solution('4 2 4') == 'no', 'test 2 failed'\nassert solution('4 5 2') == 'no', 'test 3 failed'\nassert solution('5 4 4') == 'no', 'test 4 failed'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'yes'\nassert solution('''\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\nSample Output 3:\nno\n''') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    4 5 2\n    3 3 3 3\n    0 1\n    0 3\n    1 3\n    1 2\n    2 3\n    \"\"\"\n) == \"yes\"\n\nassert solution(\n    \"\"\"\n    10 1\n    8 9 7 9 7\n    0 1\n    2 3\n    5 6\n    6 7\n    7 8\n    9 10\n    0 11\n    1 12\n    2 13\n    3 14\n    4 15\n    \"\"\"\n) == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"yes\"\n\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == \"yes\"\nprint(solution('''\n5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n'''))\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"no\"\nassert solution(\"5 4 4\") == \"yes\"\nassert solution(\"3 3 3 3\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4 4\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n') == 'yes\\n'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4 4\") == \"yes\"\nassert solution(\"3 3 3 3\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == 'yes'\nassert solution('''\n5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'yes'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n5\n5\n5\n5''') == '2 1\\n1 2\\n2 3\\n3 4\\n4 5'\nassert solution('''4\n20\n15\n17\n14''') == '5 8\\n8 5\\n5 2\\n2 7\\n7 4\\n4 1'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\\\n3\n5\n5\n5\n\"\"\") == \"2\\n1\\n2\\n7\\n\"\nprint(solution(input()))"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2 1 2\"\nassert solution(\"4\") == \"5 8 7 6\""
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1,2,3\") == \"1\"\nassert solution(\"5,4,3,2,1\") == \"4\"\nassert solution(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\") == \"5\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2 1'\nassert solution('4') == '5 8'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\nassert solution('4') == '1 3 2 4'\nassert solution('5') == '1 3 5 2 4'\nassert solution('6') == '1 3 5 2 4 6'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n5\\n5\") == \"2\\n1\\n2\"\nassert solution(\"4\\n20\\n15\\n17\\n14\") == \"5\\n8\\n2\\n7\"\nassert solution(\"15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"5 8\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\npython') == 'python'\nassert solution('2\\npython') == 'python'\nassert solution('3\\npython') == 'python'\nassert solution('4\\npython') == 'python'\nassert solution('5\\npython') == 'python'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\npython\n^ -n 10\n''') == 'python'\nassert solution('''\n2\npython\njava\n^ -n 10\n''') == 'java'\nassert solution('''\n3\npython\njava\n^ -n 10\n''') == 'python'\nassert solution('''\n4\njava\njava\n^ -n 10\n''') == 'java'\nassert solution('''\n5\njava\njava\n^ -n 10\n''') == 'java'\n'''\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\npython\\njava\\njava\\n') == 'python\\njava\\n'\nassert solution('2\\npython\\njava\\n^\\n^\\n^\\n^\\n^\\n^\\n^\\n^\\n^\\n^\\n^\\n^\\n') == 'python\\njava\\njava'\nassert solution('3\\npython\\njava\\njava\\n') == 'python\\njava\\njava'\nassert solution('4\\npython\\njava\\njava\\n') == 'python\\njava\\njava'\nassert solution('5\\npython\\njava\\njava\\n') == 'python\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'python\\npython main.py\\npython main.py -n 10'\nassert solution('5') == 'python\\njava\\njava\\npython\\npython main.py\\npython main.py -n 10'"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\npython\np^ main.py\n^ -n 10\n''') == 'python\\npython main.py\\npython main.py -n 10\\n'\nassert solution('''\n5\npython\njava\n^\n^^^\n^^^\n''') == 'python\\njava\\njava\\npython\\njava\\n'\n'''\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\npython\\n^\\nmain.py\\n^-n 10\\n') == 'python main.py\\npython main.py -n 10'\nassert solution('2\\npython\\njava\\n^\\nmain.py\\n^-n 10\\n') == 'python main.py\\njava main.py -n 10'\nassert solution('3\\n') == ''\nassert solution('3\\npython\\njava\\n^\\nmain.py\\n^-n 10\\n') == 'python main.py\\npython main.py -n 10'\nassert solution('4\\n') == ''\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''python\np^ main.py\n^ -n 10''') == 'python main.py -n 10'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\npython\np^ main.py\n^ -n 10\n''') == 'python\\npython main.py\\npython main.py -n 10'\n\nassert solution('''\n5\npython\njava\n^\n^^^\n^^^\n''') == 'python\\njava\\njava\\npython\\njava\\npython'\n'''\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\npython\njava\njava\npython\njava\n''') == 'pythonjava'\n\nassert solution('''\npython\njava\njava\npython\njava\njava\njava\npython\njava\njava\njava\njava\njava\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\npython\npython\npython\njava\npython\njava\npython\njava\npython\npython\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\njava\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\npython\") == \"python\"\nassert solution(\"1\\np^ main.py\") == \"python main.py\"\nassert solution(\"2\\np^ main.py\") == \"java\"\nassert solution(\"3\\np^ main.py\") == \"\"\nassert solution(\"4\\np^ main.py\") == \"\""
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n\"\"\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('heretheyaremakessense') == 'impossible'\nassert solution('ohmygod') == 'impossible'"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\n\nassert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\n\nassert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\ntihssnetnceemkaesprfecetsesne\n5\nmakes\nperfect\nsense\nsentence\nthis\n''') == 'this sentence makes perfect sense', \"First\"\nassert solution('''\nhitehre\n2\nthere\nhello\n''') == 'impossible', \"Second\""
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hello\") == \"impossible\"\nassert solution(\"\") == \"impossible\"\nassert solution(\"m\") == \"impossible\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''tihssnetnceemkaesprfecetsesne\n5\nmakes\nperfect\nsense\nsentence\nthis\n''') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense', solution\nassert solution('hello') == 'impossible', solution\nassert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense', solution\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('this sentence makes perfect sense') == 'this sentence makes perfect sense'\nassert solution('this sentence makes perfect sense') == 'this sentence makes perfect sense'\nassert solution('thissentencemakesperfectsense') == 'thissentencemakesperfectsense'\nassert solution('this sentence makes perfect sense') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('hitehre') == 'this sentence makes perfect sense'\nassert solution('tihssnetnceemkaesprfecet sesne') == 'this sentence makes perfect sense'\n\nassert solution('thissentencee mkaes prfecet sesne') == 'thissentencee mkaes prfecet sesne'\nassert solution('tihssnetnceemkaesprfecet sesne') == 'thissentencee mkaes prfecet sesne'\nassert solution('tihssnetnceemkaesprfecet sesne') == 'thissentencee mkaes prfecet sesne'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n') == '4\\n'\nassert solution('2 2\\n') == '16\\n'"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n\") == \"4\\n\"\nassert solution(\"2 2\\n\") == \"16\\n\"\nassert solution(\"3 3\\n\") == \"9\\n\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('3 3') == '25'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2''') == '4'\nassert solution('''2 2''') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"2 2\") == \"16\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"0\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n\") == \"4\"\nassert solution(\"2 2\\n\") == \"16\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"\n1 1\n\"\"\") == \"1\"\nassert solution(r\"\"\"\n2 1\n\"\"\") == \"1\"\nassert solution(r\"\"\"\n2 2\n\"\"\") == \"2\"\nassert solution(r\"\"\"\n5 2\n\"\"\") == \"30\"\nassert solution(r\"\"\"\n5 5\n\"\"\") == \"183\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '2'\nassert solution('6') == '2'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4\"\nassert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4') == '4'\nassert solution('10') == '9'\nassert solution('11') == '10'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"1\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\nabcbab\n2\ncb\ncbab\n''') == \"2\"\n\n'''\n    The number of untileable cells = the number of tiles that cannot be used to cover the street.\n    \n    The first pattern contains two letters, so the number of tiles = 2.\n    The second pattern contains two letters, so the number of tiles = 1.\n    The third pattern has one letter, so the number of tiles = 1.\n'''"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6\nabcbab\n2\ncb\ncbab\nbac\nbaba\n''') == '4'\n\"\"\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '6'\nassert solution('''24\n3\n10 10\n30 10\n20 20\n''') == '4'"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '4'\nassert solution('3') == '3'\nassert solution('4') == '7'\nassert solution('5') == '9'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"3\"\nassert solution(\"25\") == \"2\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"2\\n\"\n    \"3\\n\"\n    \"1 1\\n\"\n    \"2 2\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"2 3\\n\"\n    \"1 1\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5\\n\"\n    \"4 5"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '6'\n\nassert solution('''24\n3\n10 10\n30 10\n20 20\n''') == '4'\n\nassert solution('''50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '17.071067'\n\nassert solution('''24\n3\n10 10\n30 10\n20 20\n''') == '20'\n\nassert solution('''50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '17.071067'"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"6\"\nassert solution(\"3\") == \"1.00001\"\nassert solution(\"10\") == \"10\"\nassert solution(\"16\") == \"22\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"100\") == \"2\"\nassert solution(\"10000\") == \"2\"\nassert solution(\"1000000\") == \"2\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\\n') == '6\\n85\\n90\\n95\\n100\\n105'\nassert solution('24\\n3\\n10 10\\n30 10\\n20 20\\n') == '4\\n17.071067\\n20\\n22.928932'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"50\n4\n110 10\n80 10\n80 0\n110 0\"\"\"\n    ) == \"6\"\n\nassert solution(\n\"\"\"24\n3\n10 10\n30 10\n20 20\nSample Output 2:\n4\n17.071067\n20\n22.928932\"\"\"\n    ) == \"4\"\n\nassert solution(\n\"\"\"50\n4\n110 10\n80 10\n80 0\n110 0\nSample Output 1:\n6\n85\n90\n95\n100\n105\n\"\"\"\n    ) == \"6\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''20\n4\n10 10\n30 10\n20 20\n''') == '6'\nassert solution('''50\n4\n10 10\n80 10\n80 0\n110 0\nSample Output 1:\n6\n85\n90\n95\n100\n105''') == '6'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n\") == \"yes\"\n\nassert solution(\"10 7\\n\") == \"yes\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 11') == 'yes'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([10, 11]) == \"yes\"\nassert solution([10, 7]) == \"no\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"no\""
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\nassert solution('11 11') == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"no\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3\\n1 6\\n2 5\\n3 4'\nprint('Congratulations!')\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('10 30') == '3'\nassert solution('20 40') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3 4\n2 5\n1 6\n''') == '3 1 6 2 5'\nassert solution('''5\n10 30\n20 40\n30 50\n10 60\n30 40\n''') == '3 10 60 30 50 20'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n3 4\n2 5\n1 6\n''') == '3'\nassert solution('''\n5\n10 30\n20 40\n30 50\n10 60\n30 40\n''') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3 4\\n2 5\\n1 6') == '3\\n1 6\\n2 5\\n3 4'"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n2 4\n1 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n20 10\n30 40\n10 50\n50 60\n20 50\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n5 10\") == \"3 1 5 10\"\nassert solution(\"2\\n15 50\") == \"2 15 50\"\nassert solution(\"3\\n12 34\") == \"3 12 34\"\nassert solution(\"4\\n50 50 50 50\") == \"4 50 50 50\""
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n5 4\n2 5\n1 6\n3 7''') == '3'\nassert solution('''\n3\n3 4\n2 5\n1 6''') == '1 6'\nassert solution('''\n4\n10 30\n20 40\n30 50\n10 60\n30 40''') == '3'\nassert solution('''\n5\n10 30\n20 40\n30 50\n10 60\n30 40''') == '3'\nassert solution('''\n10\n30 40\n10 60\n10 60\n20 60\n30 60\n30 60\n20 60\n10 60\n30 60\n10 60''') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n3 4\n2 5\n1 6\n''') == '3'\n\nassert solution('''5\n10 30\n20 40\n30 50\n10 60\n30 40\n''') == '3'"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"5836\"\nassert solution(\"5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"1828\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '5836'\nassert solution('''5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"5836\"\nassert solution(\"5 2\") == \"1828\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"5836\"\nassert solution(\"5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"1828\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '5836'\nassert solution('''5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1') == '5836'\nassert solution('5 2') == '1828'\nassert solution('5 3') == '2828'\nassert solution('5 4') == '2828'\nassert solution('5 5') == '2828'"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"5836\"\nassert solution(\"5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"1828\"\nassert solution(\"5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\") == \"5836\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '5836'\nassert solution('5 2') == '1828'"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'impossible'\nassert solution('6') == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\n\"\"\"\n\nclass Person:\n    def __init__(self, name, age, bday):\n        self.name = name\n        self.age = age\n        self.bday = bday\n\nclass PersonList(list):\n    def __init__(self):\n        super().__init__()\n\n    def search(self, name):\n        for person in self:\n            if person.name == name:\n                return person\n\n    def add(self, person):\n        self.append(person)\n\n    def remove(self, person):\n        self.remove(person)\n\n    def __str__(self):\n        return f\"{self}\"\n\n    def __repr__(self):\n        return f\"{self}\"\n\n\nclass Constituents(PersonList):\n    def __init__(self):\n        super().__init__()\n\nclass Federals(PersonList):\n    def __init__(self):\n        super().__init__()\n\nclass NoCount(PersonList):\n    def __init__(self):\n        super().__init__()"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"50\"\nassert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\\n8 100 300 200\\n9 100 400 200\") == \"impossible\""
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\nassert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == 'impossible'\nassert solution('''5\n7 696 34\n1 70 95 98\n2 750 50 54\n4 792 1030 38\n4 792 1030 38\n3 792 1030 38\n''') == '50'\nassert solution('''4\n7 696 34\n1 70 95 98\n2 744 1408 54\n3 792 1030 38\n4 792 1030 38\n3 792 1030 38\n''') == 'impossible'\nassert solution('''5\n7 696 34\n1 70 95 98\n2 744 1408 54\n4 792 1030 38\n4 792 1030 38\n3 792 1030 38\n''') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99''') == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == \"50\"\nassert solution('''\n4\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n3 2301 3299 0\n3 2301 2399 0\n''') == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\n\nassert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99''') == '50'\nassert solution('''3\n7 100 200 200\n8 100 300 200\n9 100 400 200''') == 'impossible'\nassert solution('''6\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\nSample Output 2:\nimpossible''') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"2 1\") == \"50\"\nassert solution(\"2 2\") == \"impossible\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5.0') == '0 0 0 0 1', \"Wrong\"\nassert solution('4.5') == '0 0 0 1 1', \"Wrong\"\nassert solution('0.0') == '0 0 0 0 0', \"Wrong\"\nassert solution('1.0') == '0 0 0 0 0', \"Wrong\"\nassert solution('1.5') == '0 0 0 0 0', \"Wrong\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5.0') == '0 0 0 0 1', \"Wrong result\"\nassert solution('4.5') == '0 0 0 1 1', \"Wrong result\""
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5.0') == '0 0 0 0 1', solution('5.0')\nassert solution('4.5') == '0 0 0 1 1', solution('4.5')"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0.5') == '0 0 0 1 1'"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8 3 1\n1 7 8 2 6 4 3 5''') == '8'\nassert solution('''8 2 1\n1 7 8 2 6 4 3 5''') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5') == '8'\nassert solution('8 2 1\\n1 7 8 2 6 4 3 5') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 2 1\n2 6 8 2 6\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8 3 1\n1 7 8 2 6 4 3 5''') == \"8\"\nassert solution('''8 2 1\n1 7 8 2 6 4 3 5''') == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 1') == '4'\nassert solution('8 3 1') == '8'\nassert solution('20 3 1') == '17'\nprint('YOUR CODE SUCCESSFULLY EXECUTED.')"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '8 3 1\\n1 7 8 2 6 4 3 5\\n') == '8', 'First Test Case'\nassert solution(\n    '8 2 1\\n1 7 8 2 6 4 3 5\\n') == '3', 'Second Test Case'"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8 3 1\") == \"8\"\nassert solution(\"8 2 1\") == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5\\n') == '8'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5\\n') == '8'\nassert solution('8 2 1\\n1 7 8 2 6 4 3 5\\n') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n\"\"\""
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\"\nassert solution(\"1\\n10\") == \"5\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"2\"\nassert solution(\"7 6\") == \"3\"\nassert solution(\"1000000000 5\") == \"1000000001\"\nassert solution(\"4 8\") == \"4\"\nassert solution(\"8 1\") == \"8\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2\n2 3 4 1''') == '3'\nassert solution('''6 3\n2 2 2 4 4 4''') == '4'"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"6 3\") == \"4\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 3\") == \"4\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 2 4 4 4') == '3'\nassert solution('4 6') == '4'\nassert solution('12 3') == '6'\nassert solution('50 100') == '4'\nassert solution('4 4') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '3'\nassert solution('6 3') == '4'\nassert solution('6 3') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2') == '3'\nassert solution('6 3') == '4'"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '3'\nassert solution('6 3') == '4'\nassert solution('20 20') == '20'"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2\\n2 3 4 1') == '3'\nassert solution('6 3\\n2 2 2 4 4 4') == '4'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1 1.732050''') == '1.732050808'\nassert solution('''1 1 3.0''') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1.732050') == '1.7320508'\nassert solution('1 1 3.0') == '-1'\nassert solution('1 1 1.00000000000') == '1.00000000000'\nassert solution('1 1 1.0000001') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3.1 1.2 3') == '1.7320508'\nassert solution('1.9 1.2 3') == '-1'\n\"\"\""
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.732050808\"\nassert solution(\"1 1 3.0\") == \"-1\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1.732050') == '1.7320508'\nassert solution('1 1 3.0') == '-1'\nprint('Congratulations! All test cases passed.')"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r\"\"\"\n1 1 1.732050\n\"\"\") == \"1.7320508\"\nassert solution(r\"\"\"\n1 1 3.0\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1.732050') == '1.7320508', solution('1 1 3.0')\nassert solution('1 1 3.0') == '-1'"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 2.414213') == '-1'\n\"\"\"\n\n\nimport math\n\nclass Solution:\n    def solve(self, *args):\n        a, b, c = sorted(map(float, args))\n        if a + b > c and b + c > a and a + c > b:\n            return (b * c) / math.sqrt(a**2 + b**2 + c**2)\n        else:\n            return -1\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3 4 2\\n.75') == '2.4999999987500003'\nassert solution('2\\n0 100 10\\n0 -100 100\\n.80') == '9.999999999000002'"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution(\n'''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\nassert solution(\n'''\n1\n3 4 2\n.75\n''') == '3.125000000000003'\nassert solution(\n'''\n3\n0 0 1\n1 3 1\n2 0 1\n1 1 1\n1 2 1\n''') == '4.096111111111'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"2.4999999987500003\"\nassert solution(\"2\") == \"9.999999999000002\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution('''2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution('''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"2.4999999987500003\"\nassert solution(\"2\") == \"9.999999999000002\"\nassert solution(\"0.75\") == \"2.4999999987500003\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 -100 100 100 2\n.75\nSample Output 3:\n5.3500000000000003\n''') == '5.3500000000000003'\n\nassert solution('''\n4\n0 1 1 1.5\n.75\nSample Output 4:\n7.6000000000000005\n''') == '7.6000000000000005'\n\nassert solution('''\n5\n0 0.5 0.5 0.5 0\n.75\nSample Output 5:\n2.8999999999999998\n''') == '2.8999999999999998'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n0 1 2\n.75\n\"\"\") == \"2.4999999987500003\"\nassert solution(\"\"\"\n2\n0 1 2\n.75\n\"\"\") == \"9.999999999000002\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution('''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 4 2\\n.75') == '2.4999999987500003'\nassert solution('2\\n0 100 10\\n0 -100 100\\n.80') == '9.999999999000002'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"0\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 6') == '0'\nassert solution('4 5') == '3'\nassert solution('2 1 6') == '3'"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 3') == '0'\nassert solution('4 5') == '3'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\n\nassert solution('''3 5\n1 1 4 2 3\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '0'\n\nassert solution('''3 10\n1 1 4 2 3 4 5 6 7 8\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '2'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1 6\n2 1 6\n3 1 6''') == '0'\nassert solution('''4\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\nprint('Tests passed')\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3'\nassert solution() == '2'"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\\n') == '3'\nassert solution('4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\\n') == '2'\nassert solution('6 3\\n1 1 6\\n1 1 5 1 2\\n2 1 6\\n') == '0'\nassert solution('6 3\\n1 1 6\\n1 1 5 1 2\\n2 1 6\\n') == '3'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 6\\n\"\n    \"1 1 5 1 2\\n\"\n    \"2 1 6\"\n    ) == \"3\"\n\nassert solution(\n    \"2 3\\n\"\n    \"1 1 5 1 2\\n\"\n    \"2 1 6\\n\"\n    ) == \"2\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4\\n1 2 3 4 5') == '3'\nassert solution('1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3') == '2'"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n1 3\\n2 4') == '0'\nassert solution('3\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5') == '3'\nassert solution('5\\n10 10 10 10 10\\n20 20 20 20 20\\n30 30 30 30 30 30\\n40 40 40 40 40 40\\n50 50 50 50 50 50') == '2'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1 7 1000000007\") == \"1\"\nassert solution(\n    \"3 2 1000000007\") == \"4\""
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    2 5 1\n    ''') == '1'\nassert solution('''\n    3 2 3\n    ''') == '2'\n''')\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n1 7 1000000007\n''') == '1'\n\nassert solution(\n'''\n2 2 1000000007\n''') == '2'\n\nassert solution(\n'''\n3 2 1000000007\n''') == '4'\n\nassert solution(\n'''\n3 5 1000000007\n''') == '1'\n\nassert solution(\n'''\n10 10 1000000007\n''') == '0'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\""
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\n\n'''"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 7 1000000007''') == '1'\nassert solution('''3 2 1000000007''') == '4'\nassert solution('''5 2 1000000007''') == '8'\nassert solution('''4 2 1000000007''') == '0'\nassert solution('''1 1 1000000007''') == '0'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 10') == '5'\nassert solution('3 5') == '8'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_str) == '5'\nprint(solution(input_str))\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '5'\nassert solution('10 10') == '10'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 10\n6\n''') == '5'\nassert solution('''\n10 10\n11\n''') == '8'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '5'\nassert solution('10 10') == '10'\nassert solution('6 2') == '8'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 10\n6''') == '5'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6') == '5'\nassert solution('2 5') == '8'\nassert solution('3 5') == '5'\nprint(solution(''))"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n10') == '5'\nassert solution('3 5') == '8'\nassert solution('10\\n3') == '9'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"8\"\nassert solution(\"10 10\") == \"5\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 10\\n6') == '5'\nassert solution('3 5\\n11') == '8'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5 3') == '2'\nassert solution('4 5 3') == '3'"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\nassert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '3'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5 3\") == \"2\"\nassert solution(\"4 5 3\") == \"3\"\nassert solution(\"4 5 3\") == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == '2'"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == \"3\""
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4\") == \"2\"\nassert solution(\"5 2 3\") == \"3\"\nassert solution(\"3 5 3\") == \"1\""
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2 4\\n0 1 1\\n0 3 1\") == \"2\"\nassert solution(\"3 4 5\\n0 1 1\\n0 2 1\\n0 3 1\\n1 2 1\") == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\nassert solution(\"3\\n1 2\\n0 1\\n0 3 1\") == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5 3\") == \"2\"\nassert solution(\"4 5 3\") == \"3\"\nassert solution(\"4 5 2\") == \"2\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"2\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"3\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"4\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '3'\nassert solution('5 1') == '3'\nassert solution('4 2') == '4'\nassert solution('4 2') == '4'"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n4 2\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120''') == '3'\nassert solution('''4 1\n10\n10\n1 10\n1 10\n1 10\nSample Output 3:\n3\n''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n10\n20\n30\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2\n5\n10\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n1\n10\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 1\n10\n10\n1 10\n1 10\n1 10\n''') == '3'\nassert solution('''\n2 2\n10\n10\n1 10\n1 10\n1 10\n''') == '2'\n'''\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n\nassert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == '3'\nassert solution('3 1') == '3'\nassert solution('1 1') == '1'\n\nprint(solution(*input()))"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3'\nassert solution('3 2') == '2'\nassert solution('4 1') == '1'\nassert solution('4 2') == '2'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120''') == \"3\"\n\nassert solution('''2 1\n10 20\n1 10\n1 20\n2 20\n3 20\n4 20\n5 20\n6 20\n7 20\n8 20\n9 20''') == \"4\"\n\nassert solution('''1 1\n10 10\n2 20\n3 30\n4 40\n5 50\n6 60\n7 70\n8 80\n9 90\n10 100\n11 100\n12 100\n13 100\n14 100\n15 100''') == \"2\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3\n3\n''') == '1'\n\nassert solution('''\n5\n4\n2\n2\n1\n''') == '6'"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '5'\nassert solution('3') == '5'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2\n3\n4\n1\n2\n''') == '1'\nassert solution('''\n5\n3\n4\n2\n1\n2\n''') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n2\n2\n2\n2\n2\n2\n1\n1\n1\n2\n2\n2\n2\n2\n2\n2''') == '5', \"Wrong\"\n\nassert solution('''10\n3\n3\n3\n4\n4\n5\n5\n6\n6\n4\n3\n3\n2\n1\n1\n2\n2\n2\n2\n2\n2\n1\n1\n2\n1\n2\n2\n2\n1\n1\n2\n1\n2\n1\n1\n1\n2\n2\n2\n2\n1\n1\n1\n2\n2\n2\n2\n2\n1\n2\n1\n1\n1\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n2\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n2\n1\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n2\n2\n2\n1\n1\n1\n1\n1\n2\n2\n1\n1\n2\n1\n1\n1\n2\n1\n1\n1\n2\n2\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n2\n2\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n2\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n2\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\") == \"1\"\nassert solution(\"5\\n2\") == \"5\""
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"10\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '5'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n\n###"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n2 1\n0 11 9\n1 0 10\n0 0 0\n\"\"\") == \"2\"\nassert solution(\n    \"\"\"\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\nassert solution('''\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 3\") == \"2\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\nassert solution('''\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1\n0 11 9\n1 0 10\n0 0 0\n0 0 0\n0 0 0\n''') == '2', 'First'\nassert solution('''3 2\n1 2 3\n1 2 1\n0 0 0\n''') == '1', 'Second'\nassert solution('''4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1', 'Third'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '-1'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '-1'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n4 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10\n\"\"\") == \"\"\"\n4 3 5\n0 1 2\n0 2 1\n1 2 1\n1 3 1\n2 3 2\n\"\"\".strip()"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5 0 3\") == \"3 1 5\"\nassert solution(\"2 1 0 1\") == \"1 2 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\""
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5 0 3\\n0 1 10\\n1 2 1\\n1 3 1\\n0 2 1\\n2 3 10') == '4 3 5'\nassert solution('2 1 0 1\\n0 1 100000\\nSample Output 2:') == '2 100000 1'\nassert solution('2 1 0 1\\n0 1 100000\\n2 3 10\\nSample Output 2:') == '2 100000 1'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 100000 1'\nprint(solution(input()))\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 2 0 1\"\n) == \"2 1 100000\"\nassert solution(\n    \"4 3 0 3\"\n) == \"3 2 100000\"\nassert solution(\n    \"5 2 0 1 2 1 1\"\n) == \"3 2 100000 1 2 1 1\""
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5 0 3') == '3 4 5'\nassert solution('2 1 0 1') == '2 2 1'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2 0'\n\nassert solution() == '2 0'\n\n---Input---\n1\n1 1\n2\n\n---Output---\n2 2\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\nassert solution(\"2 3\\nSMS.M\\nM.MS\") == \"2 0\"\nassert solution(\"2 4\\n.S.M.\\n.M.S.\\nS.M.\\nM.M.\") == \"2 0\"\nassert solution(\"2 4\\n.S.M.\\n.M.S.\\nS.M.\\nM.M.\") == \"2 0\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == '2 0'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\nSMS\\nMMS\\n') == '3 5'\n\n===========================================\n\nclass Solution:\n    def solve(self, *args):\n        return (sum(1 for i in range(1, args[0]) for j in range(1, args[1])\n                    if (abs(i - args[2]) + abs(j - args[3])) == 1),\n                sum(1 for i in range(1, args[0]) for j in range(1, args[1])\n                    if (abs(i - args[2]) + abs(j - args[3])) == 2))\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == str(3) + \"\\n\" + str(5)\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\nSMS\nMMS\n''') == '3 5'\nprint('All Tests Passed')\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\nSMS\\nMMS') == '3 5'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\nMSM\nM.M\n''') == '5 5'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\nSMS\nMMS\n''') == '3 5'\n\nassert solution('''\n2 3\nSMS\nMMS\n''') == '0 0'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n12\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1'\n\nassert solution('''\n13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '3'\n\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\n''') == '1'\n\nassert solution('''\n4\n0"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('\\n'.join(['2', '0 B', '1 B', '2 E a', '2 E b', '2 S', '5 G a', '5 T a', '5 E a', '5 E b', '1 S', '10 E a', '10 G b', '1 T a'])) == '2'\nassert solution('\\n'.join(['3', '0 B', '1 B', '2 E a', '2 E b', '2 S', '5 G a', '5 T a', '5 E a', '5 E b', '1 S', '10 E a', '10 G b', '1 T a'])) == '4'\nassert solution('\\n'.join(['5', '0 B', '1 B"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n    3\n    0 B\n    1 B\n    2 E a\n    2 E b\n    2 S\n    5 G a\n    5 T a\n    5 E a\n    5 E b\n    1 S\n    10 E a\n    10 G b\n    1 T a\n    '''\n) == '2'\n\nassert solution(\n    '''\n    6\n    0 B\n    1 B\n    1 T a\n    2 E a\n    2 S\n    5 T a\n    '''\n) == '1'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '''\n1\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n'''\n) == '2'\nassert solution(\n    '''\n3\n0 B\n1 B\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n'''\n) == '3'\n\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n    def test_problem_solution(self):\n        import solution\n        output = solution.solution("
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\nassert solution('10 E a\\n') == '3 c'\nassert solution('6 b\\n') == '6 c'\nassert solution('1 T a\\n') == '1 c'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7\n0 B\n1 B\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1'\n\nassert solution('''\n3\n0 B\n1 T a\n2 S\nSample Output 3:\n0\n7 b\n''') == '1'\n\nassert solution('''\n10\n0 B\n1 T a\n2 S\n2 G a\n5 G a\n5 T a\n5 E a\n5 E b\n2 S\n4 E a\n8 E b\n9 E c\n10 T a\n10 G b\n1 T a\n''') == '1'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\nassert solution('12') == '1'\nassert solution('13') == '3'\nassert solution('14') == '6'"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '1'\nassert solution('6 b') == '6 b'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\nassert solution('''\n3 c\n6 c\n''') == '1'\n\nassert solution('''\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n0 B\n1 S\n0 T\n1 T a\n2 E a\n2 S\n''') == '1'\nassert solution('''\n3\n0 B\n1 S\n2 E a\n2 E b\n''') == '2'\nassert solution('''\n5\n0 B\n1 S\n2 E a\n2 S\n''') == '1'\nassert solution('''\n3\n0 T\n1 S\n2 E a\n2 S\n''') == '3'\nassert solution('''\n6\n0 T\n1 S\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n''') == '6'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5') == \"40\"\nassert solution('288 291') == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '40'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 5\\n\") == \"40\"\nassert solution(\"288 291\\n\") == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.readline()[:-1]"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6') == '40'\nassert solution('1 1') == '40'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\""
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4') == '18', 'Basic Tests'\nassert solution('1 100') == '1000000', 'Basic Tests'\nassert solution('100 20') == '10020', 'Basic Tests'\nassert solution('50 3') == '23', 'Basic Tests'\nassert solution('100000 100') == '10010001', 'Basic Tests'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"COG\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"\") == \"0\"\nassert solution(\"a\") == \"0\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"COG\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\nCAT\nDOG''') == 'COG', f'Should be \"COG\", not {solution('''2\nCAT\nDOG''')}'\nassert solution('''1\nCAT\n''') == 'CAT', f'Should be \"CAT\", not {solution('''1\nCAT''')}'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'COG'\nassert solution('2') == '0'"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\nCAT\nDOG''') == \"DOG\"\nassert solution('''2\nCAT\nDOG''') == \"CAT\"\n\n'''\nSample Input 1:\n3\nCAT\nDOG\nCOT\nSample Output 1:\nCAT\n3\n\nSample Input 2:\n2\nCAT\nDOG\nSample Output 2:\n0\n-1\n\n'''"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\nCAT\\nDOG\") == \"COG\"\nassert solution(\"1\\nCAT\\nDOG\") == \"COG\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"CAT\"\nassert solution(\"2\") == \"DOG\"\nassert solution(\"3\") == \"COT\""
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\nCAT\\nDOG\\nCOT') == 'CAT'\nassert solution('5\\nCAT\\nDOG\\nCOT') == 'COT'\nassert solution('3\\nCAT\\nDOG\\nCOT') == 'DOG'\nassert solution('1\\nCAT') == 'CAT'\nassert solution('5\\nCAT\\nDOG\\nCOT') == 'COT'\n\nn = int(input())\nd = input()\nans = 0\nmin_ans = 100000\nwhile d in dic.keys():\n    ans += 1\n    d = d[1:] + d[0]\n    if d in dic.keys():\n        min_ans = min(min_ans, ans)\nprint(d)\nprint(min_ans)\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\nCAT\\nDOG\") == \"DOG\"\nassert solution(\"5\\nCAT\\nDOG\\nCAT\\nDOG\\nCAT\\nDOG\") == \"DOG\"\nassert solution(\"1\\nCAT\\n3\\nCAT\\nCAT\") == \"CAT\"\nassert solution(\"3\\nCAT\\nCAT\\nCAT\") == \"CAT\"\nassert solution(\"2\\nCAT\\nCAT\") == \"CAT\"\n\nstdin = input()\nn = int(stdin)\ndct = dict()\nfor i in range(n):\n    dct[stdin[i]] = i"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\nCAT\\nDOG') == 'COG', 'First'\nassert solution('2\\nCAT\\nCOT') == 'COT', 'Second'\nassert solution('3\\nCAT\\nDOG\\nCOT') == 'CAT', 'Third'\nassert solution('3\\nCAT\\nDOG\\nCOT') == 'CAT', 'Fourth'\nassert solution('3\\nCAT\\nDOG\\nCOT') == 'CAT', 'Fifth'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 3\n1 3\n1 4\n''') == '9'\n\nassert solution('''\n5 5\n0 0\n0 0\n0 0\n''') == '0'\n\nassert solution('''\n8 8\n1 3\n1 4\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n''') == '1'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1\\n') == '1\\n'\n\nassert solution('4 3\\n') == '6\\n'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"5 1\") == \"9\""
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 3\") == \"6\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('10 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n3 5\n/.... \\\n/..... \\\n.......\n.......\n.......\n''') == '3'\nassert solution(\n'''\n5 5\n/..... \\\n/...... \\\n........\n........\n........\n''') == '-1'\nassert solution(\n'''\n4 5\n.......\n........\n........\n........\n........\n''') == '4'\nassert solution(\n'''\n7 5\n
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n.V.\n..V.\n''') == '3'\n\nassert solution('''\n10 4\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHH.HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == '3'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 5\\n\"\n    \".V.\\n\"\n    \"./.V.\\n\"\n    \"..#..\\n\"\n    \".V.#.\\n\"\n    \".V./\\n\"\n) == \"3\"\nassert solution(\n    \"2 5\\n\"\n    \"V...\\n\"\n    \"H...V\"\n) == \"-1\"\nassert solution(\n    \"1 1\\n\"\n    \".\\n\"\n) == \"0\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5') == '3'\nassert solution('2 5') == '-1'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n.V..\\n..H.V\") == \"3\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\\\n5 5\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5') == '3'\nassert solution('2 5') == '-1'"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n.V..V..V\\n.#.H.H.#\\n..#...\\n.V..V..V\") == \"3\"\nassert solution(\"4 4\\n.V...\\n.#.H.\\n.V..V\\n..#..\") == \"0\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\\\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n\"\"\") == \"\"\"\\\nAMBIGUOUS\n\"\"\", '''\\\nOne of the solutions is just the longest possible reconstruction.\n'''\nassert solution(\"\"\"\\\n3\nab\nac\n\"\"\") == \"\"\"\\\nAMBIGUOUS\n\"\"\", '''\\\nThe length of the longest possible reconstruction is at least 5.\n'''\nassert solution(\"\"\"\\\n2\nba\nbc\n\"\"\") == \"\"\"\\\nAMBIGUOUS\n\"\"\", '''\\\nThe second longest reconstruction does not share any prefixes with the first one.\n'''\nassert solution(\"\"\"\\\n1\nab\n\"\"\") == \"\"\"\\\nAMBIGUOUS\n\"\"\", '''\\\nNo optimal reconstruction exists, since there is only one of the input text fragments.\n'''\nassert solution(\"\"\"\\\n10\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n\") == \"AMBIGUOUS\", \"Sample Test 1\"\nassert solution(\"4\\n\") == \"AMBIGUOUS\", \"Sample Test 2\"\nassert solution(\"6\\n\") == \"AMBIGUOUS\", \"Sample Test 3\"\nassert solution(\"8\\n\") == \"AMBIGUOUS\", \"Sample Test 4\"\nassert solution(\"10\\n\") == \"AMBIGUOUS\", \"Sample Test 5\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"AMBIGUOUS\"\nassert solution(\"a b\") == \"AMBIGUOUS\"\nassert solution(\"a b c\") == \"AMBIGUOUS\"\nassert solution(\"n fox jumps ove\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('\\n'.join([str(x) for x in range(1, 5)])) == \"AMBIGUOUS\"\nassert solution('\\n'.join([str(x) for x in range(5, 10)])) == \"AMBIGUOUS\"\nassert solution('\\n'.join([str(x) for x in range(10, 15)])) == \"AMBIGUOUS\"\nassert solution('\\n'.join([str(x) for x in range(15, 20)])) == \"AMBIGUOUS\"\nassert solution('\\n'.join([str(x) for x in range(20, 25)])) == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n' + 'cdefghi'*2 + 'efghijk'*2 + 'efghijx' + 'abcdefg' + '\\n') == \"AMBIGUOUS\"\n\nassert solution('\\n'.join(['n' + 'fox'*2 + 'o'*2 + 'uick' + 'brown' + 'f'*2 + '\\n' + 'y'*2 + 'dog.' + '\\n' + 'rown' + 'fox'*2 +'mps' + 'over' + 'the' + 'lazy' + 'dog'*2 + '\\n']*2) + '\\n') == \"AMBIGUOUS\"\n\nassert solution('n fox jumps ove\\n' + 'uick brown f\\n' + 'y dog.\\n' + 'rown fox\\n' +'mps over the l\\n' + 'the lazy dog') == \"AMBIGUOUS\"\n\nassert solution('\\n'.join(['n' + 'fox'*2 + 'o'*2 + 'uick' + 'brown' + 'f'*2 + '\\n' + 'y'*2 + 'dog.' + '\\n' + 'rown' + 'fox'*2 +'mps' + 'over' + 'the' + 'lazy' + 'dog'*2 + '\\n']*2) + '\\n') == \"AMBIGUOUS\"\n\nassert solution('n fox jumps ove\\n' + 'uick brown f\\n' + 'y dog.\\n' + 'rown fox\\n' +'mps over the l\\n' + 'the lazy dog') == \"AMBIGUOUS\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n''') == 'AMBIGUOUS'\nassert solution('''\n3\nx\ny\nz\n''') == 'AMBIGUOUS'\nassert solution('''\n9\nx\ny\nz\nu\nv\nw\nx\ny\nz\n''') == 'AMBIGUOUS'\nassert solution('''\n9\nx\ny\nz\nz\ny\nx\nu\nv\nw\n''') == 'AMBIGUOUS'\nassert solution('''\n7\no\nd\nu\nd\na\nn\na\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7\nfox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n''') == 'AMBIGUOUS'\nassert solution('''10\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n''') == 'AMBIGUOUS'\nassert solution('''100\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\nn fox jumps ove\nuick brown f\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n9 9 9 9 9') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"7\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"5\na b c\nd e\nf g\nh i\nj\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"3\nfish\ndog\ncat\ndog\ncat\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"8\nuick\nbrown\nfox\njumps\nlazy\nfox\n\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"5\nHannah\nRose\nSean\nJill\nJill\n\"\"\") == \"AMBIGUOUS\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7\\nn fox jumps ove\\nuick brown f\\nThe quick b\\ny dog.\\nrown fox\\nmps over the l\\nthe lazy dog') == 'The quick brown fox jumps over the lazy dog.'\nassert solution('3\\nab\\nxcd\\nghi') == 'AMBIGUOUS'\nassert solution('10\\nab\\nxcd\\nghi\\nab\\nxcd\\nghi\\nab\\nxcd\\nghi\\nab\\nxcd\\nghi\\nab\\nxcd\\nghi\\nab\\nxcd\\nghi') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '--+0-', 'Dodging all the ships failed.'\n\nassert solution('''\n1 2\n1 1 2\n-2 0 2\nSample Output 2:\n0+-\n''') == '--+0-', 'Dodging all the ships failed.'\n\nassert solution('''\n3 2\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '+-+-', 'Dodging all the ships failed.'\n\nassert solution('''\n5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\nSample Output 1:\n+-+-\n\nSample Input 2:\n3 2\n1 2 1\n-2 0 2\nSample Output 2:\n+-+0-\n''') == '+-+0-', 'Dodging all the ships failed.'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2 3\") == \"--0-0-\"\nassert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\\n\") == \"--+0-0--\""
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '--+0-', 'First example'\nassert solution('''3 2\n1 2 1\n-2 0 2\n''') == '0+-', 'Second example'\nassert solution('''3 4\n1 2 3\n-2 -1 2\n-2 3 3\n-3 -3 -1\n''') == '--+--', 'Third example'\nassert solution('''4 4\n-2 0 2\n0 3 2\n1 2 2\n-2 -3 3\n''') == '-++--', 'Fourth example'\nassert solution('''5 5\n2 3 2\n-1 -1 2\n-2 -1 2\n1 1 2\n-1 -1 2\n''') == '-+--', 'Fifth example'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '--+0-', solution('5 6')\nassert solution('3 2') == '0+-', solution('3 2')"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '--+0-'\nassert solution('''3 2\n1 2 1\n-2 0 2\n''') == '0+-'\nassert solution('''3 1\n0 1\n-2 0 2\n''') == 'impossible'\nassert solution('''5 3\n-2 -1 0\n1 2 -1\n-1 -2 1\n2 -2 0\n-1 -1 -1\n''') == 'impossible'\nassert solution('''5 2\n-1 1\n0 0\n-1 -1\n-1 0\n-1 -1\n''') == '+-0'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1') == '--+0-'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1''') == '+--'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '--+0-'\n\nassert solution(\n'''\n3 2\n1 2 1\n-2 0 2\n''') == '0+-'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '0+-', 'Should output 0+- if possible'\nassert solution('-3 -2 3') == '--+0-', 'Should output--+0- if possible'\nassert solution('-2 -2 4') == '--+0-', 'Should output--+0- if possible'\nassert solution('2 3 3') == '+-0-+-', 'Should output +-0-+- if possible'\nassert solution('-1 1 2') == '+--0--', 'Should output +--0-- if possible'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '0+-', f'Solution is {solution(\"3 2\")}'\nassert solution('5 6') == '--+0-', f'Solution is {solution(\"5 6\")}'\nassert solution('2 3') == '0+-', f'Solution is {solution(\"2 3\")}'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '2'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 2') == '1'\nassert solution('1 2 1') == '1'\nassert solution('1 2 1 1') == '1'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 2\n1 1\n1 1\n1 1\n1 1\n1 1\nSample Output 1:\n0\nSample Output 2:\n0\n''') == '4\\n0'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n1 1\n1 1\n1\n1 1 1\n2 2 2\n''') == '4'\n\nprint(solution('''\n3 3\n1 2\n1 1\n1\n1 1 1\n2 2 2\n'''))\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"YES\"\nassert solution(\"3 4\") == \"NO\""
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"3 3\") == \"NO\"\nprint(solution())\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"YES\""
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB''') == 'YES'\nprint('TESTS: OK')\n\nassert solution('''4 4\nWWRR\nWRRR\nWRRR\n''') == 'NO'\nprint('TESTS: OK')\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"YES\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\nRBBB\\nBWB\") == \"YES\"\nassert solution(\"3 3\\nWRRR\\nWRRR\\nWBBB\\n\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n2 1\\n1 1') == 'YES'\nassert solution('2 2\\n2 2\\n2 2') == 'YES'\nassert solution('2 1\\n1 1\\n2 1') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'YES'\nassert solution('3 4') == 'NO'\n\n'''"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\n\nimport re\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3 5\n1\n2\n3\n3\n2\n1\n''') == \"1\", \"Wrong\"\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\"\nassert solution(\"4 4 5\") == \"3\"\nassert solution(\"5 4 5\") == \"2\""
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 5\") == \"1\"\nassert solution(\"6 3 5\") == \"3\"\nassert solution(\"10 10 10 10\") == \"5\"\nassert solution
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 5\\n1\\n2\\n3') == '1'\nassert solution('6 3 5\\n1\\n2\\n3\\n3\\n2\\n1') == '3'\nassert solution('6 3 5\\n1\\n2\\n3\\n2\\n1\\n3') == '3'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3 2') == '1'\nassert solution('2\\n3 4') == '1'\nassert solution('2\\n3 4') == '2'\nassert solution('4\\n3 2') == '2'\nassert solution('2\\n3 4') == '2'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\nassert solution('5 3 1') == '3'\nassert solution('3 2 5') == '1'\nassert solution('6 2 1') == '4'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3 5\n1\n2\n3''') == '1'\nassert solution('''6 3 5\n1\n2\n3\n3\n2\n1\n''') == '3'\nprint('All tests passed!')"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 2\\n1 2\\n3 3\") == \"3 2\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 2\\n1 2\\n3 3\") == \"3 2\"\nassert solution(\"5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\") == \"12 3\""
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n0 2\n1 2\n3 3\n\"\"\") == \"3 2\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0 2'\nassert solution('2') == '1 3'\nassert solution('3') == '3 3'\nassert solution('4') == '10 9'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 2\n1 2\n3 3\n''') == '3 2'\nassert solution('''\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n''') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0 2\\n1 3\\n3 3') == '3 2'\nassert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5') == '12 3'\nassert solution('6\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\\n5 4') == '10 6'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2 1'\nassert solution('3') == '1 1 1'\nassert solution('5') == '1 1 1 1 1'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2 2'\nassert solution('5') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n1') == '1 1'\nassert solution('3\\n2\\n1\\n1\\n3\\n2\\n1') == '3 2'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0 2\\n1 2') == '3 2'\nassert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5') == '12 3'"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 0\\n0\") == \"100\"\nassert solution(\"3\\n0 1 1\\n1\") == \"0010\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"100\"\nassert solution(\"0\") == \"000\"\nassert solution(\"1 1\") == \"001\"\nassert solution(\"1 1 1\") == \"010\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\") == \"100\"\nassert solution(\"3\\n0\") == \"010\"\nassert solution(\"3\\n1 1\") == \"001\"\nassert solution(\"3\\n1 1 1\") == \"010\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1\n0\n0\n3\n''') == '100'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '100'\nassert solution('1') == '00'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\n''') == '100\\n000\\n01\\n01\\n01\\n01\\n01\\n01\\n'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '100'\nassert solution('3') == '0100'\nassert solution('4') == '0111'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n0\n0\n3\n1\n0\n2\n1\n0\n''') == '0110'\nassert solution('''\n2\n0\n0\n3\n1\n0\n2\n1\n0\n''') == '10010'\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\nSample Input 3:\n3\n0\n1 1\n1\n1 1\n1\n1\nSample Output 3:\n0000\n1001\n0010\n101\n010\n000\n100\n''') == '0000'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n0\n1\n0\n0\n''') == '100'\nassert solution('''\n2\n0\n1 1\n1\n1 1\n1\n1\n''') == '00101'\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\n''') == '011110'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 1') == '3'\nassert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 1') == '2'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 1') == '1'\nprint('all tests passed')"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3'\n\nassert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '2'\n'''\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\nassert solution([[1,2],[2,3],[2,3],[3,4]]) == \"2\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 1\n1 2\n2 3\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 2\n1 2\n1 2\n3 4\n3 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 2\n3 3\n3 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2 2\n3 3\n3 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1\n1 2\n2 3\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n8 1\n1 2\n2 5\n4 7\n4 8\n5 3\n6 6\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1 10\n10 1\n1 2\n5 7\n9 9\n10 5\n1 9\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5 5\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"0\"\n\nprint(solution(input()))"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '3'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '4'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3'\nassert solution('''\n100 1\n1 100\n1 200\n2 200\n1 300\n3 300\n1 500\n2 500\n1 600\n2 600\n2 600\n3 600\n3 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n4 600\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '3'\n'''\n'''\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 1') == '3'\nassert solution('4 2') == '3'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '90.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '90.00000000'\nassert solution('5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '126.86989765'\nassert solution('20 10 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == 'Impossible'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == '90.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 450') == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 500\") == \"126.86989765\"\nassert solution(\"5 6 450\") == \"126.86989765\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"Impossible\"\nassert solution('2 1 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == \"90.00000000\"\nassert solution('5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == \"126.86989765\""
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n\") == \"90.00000000\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\"\n) == \"90.00000000\"\nassert solution(\n    \"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\"\n) == \"126.86989765\"\nassert solution(\n    \"5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\"\n) == \"Impossible\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 100\") == \"90.00000000\"\nassert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 500 0 0\") == \"Impossible\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(37) == 4\nassert solution(30014) == 7\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n5\n3\n4\n5\n4\n5\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\"\"\") == \"7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\"\n\nassert solution(\"\"\"37\n3\n2\n8\n3\n5\n4\n6\n7\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\"\"\") == \"8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''37\n37\n37\n37\n37\n37\n37\n37''') == '4'\nassert solution('''30014\n30014\n30014\n30014\n30014\n30014\n30014\n30014''') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n\nstdin = \"\"\"\n36\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n10\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''37\n30014\n85 29929\n88 29926\n785 29229\n788 29226\n7785 22229\n7788 22226\n7789 22225''') == \"7\"\nassert solution('''37\n30014\n85 29929\n88 29926\n785 29229\n788 29226\n7785 22229\n7788 22226\n7789 22225''') == \"8\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\"\nassert solution(\"15\") == \"8\"\nassert solution(\"715\") == \"9\"\nassert solution(\"1525\") == \"11\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 1\\n') == '3.5'\nassert solution('3 3 2\\n') == '4.9'\n\n-- Java cases --\nInput\nOur program receives a string of numbers separated by a space. Write a regular expression to match the exact format.\n\nNote:\nn is a positive integer, d is an integer in the range [1, 500], r is an integer in the range [1, n].\n\nSample Input 1:\n2 3 1\nSample Output 1:\n3.5\n\nSample Input 2:\n3 3 2\nSample Output 2:\n4.9\nSample Output 3:\n4.99\n\nExplanation\n\nRegular expressions are useful in this problem.\n\nThe regular expression that the program will use to match the input must not contain any parentheses.\n\nFor example, if you want to match a number like 2, with the following input:\n\n2 3 1\n\nthe program should see this input as:\n\n2 3 1\n\nThe regular expression, \"2 3 1\" does not contain any parentheses. If you try to match such an input, the program will try to find the first whole number followed by a colon and a space, which will not match in this example.\n\nTherefore, the program must try to find such a regular expression in order to match such an input.\n\nThe regular expression that the program will use to match the input must contain at least one parenthesis, and it must not contain any parentheses. If you want to match a number like 2, with the following input:\n\n2 3 1\n\nthe program should see this input as:\n\n2 3 1\n\nThe regular expression, \"2 3 1\" does contain at least one parenthesis. However, it must not contain any parentheses. If you try to match such an input, the program will see the whole string and try to match a whole number followed by a colon and a space, which would not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\nThe regular expression that the program will use to match the input must contain at least one parenthesis, and it must not contain any parentheses. If you want to match a number like 2, with the following input:\n\n2 3 1\n\nthe program should see this input as:\n\n2 3 1\n\nThe regular expression, \"2 3 1\" does contain at least one parenthesis. However, it must not contain any parentheses. If you try to match such an input, the program will see the whole string and try to match a whole number followed by a colon and a space, which would not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\nSo, the regular expression that the program will use to match the input must not contain any parentheses. If you try to match such an input, the program will see the whole string and try to match a whole number followed by a colon and a space, which would not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\n-- Python cases --\nInput\nOur program receives a string of numbers separated by a space. Write a regular expression to match the exact format.\n\nNote:\nn is a positive integer, d is an integer in the range [1, 500], r is an integer in the range [1, n].\n\nSample Input 1:\n2 3 1\nSample Output 1:\n3.5\n\nSample Input 2:\n3 3 2\nSample Output 2:\n4.9\nSample Output 3:\n4.99\n\nExplanation\n\nRegular expressions are useful in this problem.\n\nThe regular expression that the program will use to match the input must not contain any parentheses.\n\nFor example, if you want to match a number like 2, with the following input:\n\n2 3 1\n\nthe program should see this input as:\n\n2 3 1\n\nThe regular expression, \"2 3 1\" does not contain any parentheses. If you try to match such an input, the program will try to find the first whole number followed by a colon and a space, which will not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\nThe regular expression that the program will use to match the input must contain at least one parenthesis, and it must not contain any parentheses. If you want to match a number like 2, with the following input:\n\n2 3 1\n\nthe program should see this input as:\n\n2 3 1\n\nThe regular expression, \"2 3 1\" does contain at least one parenthesis. However, it must not contain any parentheses. If you try to match such an input, the program will see the whole string and try to match a whole number followed by a colon and a space, which would not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\nThe regular expression that the program will use to match the input must contain at least one parenthesis, and it must not contain any parentheses. If you want to match a number like 2, with the following input:\n\n2 3 1\n\nthe program should see this input as:\n\n2 3 1\n\nThe regular expression, \"2 3 1\" does contain at least one parenthesis. However, it must not contain any parentheses. If you try to match such an input, the program will see the whole string and try to match a whole number followed by a colon and a space, which would not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\nSo, the regular expression that the program will use to match the input must not contain any parentheses. If you try to match such an input, the program will see the whole string and try to match a whole number followed by a colon and a space, which would not match in this example.\n\nTherefore, the program must try to match such an input in order to match such an input.\n\n-- Java cases --\nInput\nOur program receives a string of numbers separated by a space. Write a regular expression to match the exact format.\n\nNote:\nn is a positive integer, d is an integer in the range [1, 500], r is an integer in the range [1, n].\n\nSample Input 1:\n2 3 1\nSample Output 1:\n3.5\n\nSample Input 2:\n3 3 2\nSample Output 2:\n4.9\nSample Output 3:\n4.99\n\nExplanation\n\nRegular expressions are useful in this problem.\n\nThe regular expression that"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 1\\n') == '3.5'\nassert solution('3 3 2\\n') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 1\n''') == '3.5'\nassert solution('''\n3 3 2\n''') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == \"1.5\"\nassert solution(\"1 1 2\") == \"2.5\"\nassert solution(\"1 2 1\") == \"2.5\"\nassert solution(\"2 1 2\") == \"4.9\"\nassert solution(\"2 2 1\") == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3 1\n''') == '3.5'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 5 1\") == \"6.0\"\nassert solution(\"1 100 1\") == \"100.0\"\nassert solution(\"5 5 2\") == \"3.100000000000001\""
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\""
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\nassert solution('12 3 5 3') == '2'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 5 1 5\n''') == '19'\nassert solution('''\n12 12 1 12\n''') == '4'\nprint(solution('''\n1 5 1 5\n'''))\nprint(solution('''\n12 12 1 12\n'''))\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == \"4\"\nassert solution([1, 5, 1, 5]) == \"19\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 5 1 5\n''') == '19'\nassert solution('''\n12 12 1 12\n''') == '4'''\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 5 1 5\n''') == '19'\n\nassert solution('''\n10 9 8 7\n''') == '15'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 5\n1 2\n3 4\n2 6\n2 5\n2 3\n1 5''') == '4'\nassert solution('''1 20\n2 20\n2 30\n3 30\n2 40\n2 44\n2 45\n2 46\n2 47\n2 48\n2 49\n2 50\n2 51\n2 52\n2 53\n2 54\n2 55\n2 56\n2 57\n2 58\n2 59\n2 60\n2 61\n2 62\n2 63\n2 64\n2 65\n2 66\n2 67\n2 68\n2 69\n2 70\n2 71\n2 72\n2 73\n2 74\n2 75\n2 76\n2 77\n2 78\n2 79\n2 80\n2 81\n2 82\n2 83\n2 84\n2 85\n2 86\n2 87\n2 88\n2 89\n2 90\n2 91\n2 92\n2 93\n2 94\n2 95\n2 96\n2 97\n2 98\n2 99\n3 99\n3 100\n4 100\n4 101\n4 102\n4 103\n4 104\n4 105\n4 106\n4 107\n4 108\n4 109\n4 110\n4 111\n4 112\n4 113\n4 114\n4 115\n4 116\n4 117\n4 118\n4 119\n4 120\n4 121\n4 122\n4 123\n4 124\n4 125\n4 126\n4 127\n4 128\n4 129\n4 130\n4 131\n4 132\n4 133\n4 134\n4 135\n4 136\n4 137\n4 138\n4 139\n4 140\n4 141\n4 142\n4 143\n4 144\n4 145\n4 146\n4 147\n4 148\n4 149\n4 150\n4 151\n4 152\n4 153\n4 154\n4 155\n4 156\n4 157\n4 158\n4 159\n4 160\n4 161\n4 162\n4 163\n4 164\n4 165\n4 166\n4 167\n4 168\n4 169\n4 170\n4 171\n4 172\n4 173\n4 174\n4 175\n4 176\n4 177\n4 178\n4 179\n4 180\n4 181\n4 182\n4 183\n4 184\n4 185\n4 186\n4 187\n4 188\n4 189\n4 190\n4 191\n4 192\n4 193\n4 194\n4 195\n4 196\n4 197\n4 198\n4 199\n5 199\n5 200\n5 201\n5 202\n5 203\n5 204\n5 205\n5 206\n5 207\n5 208\n5 209\n5 210\n5 211\n5 212\n5 213\n5 214\n5 215\n5 216\n5 217\n5 218\n5 219\n5 220\n5 221\n5 222\n5 223\n5 224\n5 225\n5 226\n5 227\n5 228\n5 229\n5 230\n5 231\n5 232\n5 233\n5 234\n5 235\n5 236\n5 237\n5 238\n5 239\n5 240\n5 241\n5 242\n5 243\n5 244\n5 245\n5 246\n5 247\n5 248\n5 249\n5 250\n5 251\n5 252\n5 253\n5 254\n5 255\n6 254\n6 253\n6 252\n6 251\n6 250\n6 249\n6 248\n6 247\n6 246\n6 245\n6 244\n6 243\n6 242\n6 241\n6 240\n6 239\n6 238\n6 237\n6 236\n6 235\n6 234\n6 233\n6 232\n6 231\n6 230\n6 229\n6 228\n6 227\n6 226\n6 225\n6 224\n6 223\n6 222\n6 221\n6 220\n6 219\n6 218\n6 217\n6 216\n6 215\n6 214\n6 213\n6 212\n6 211\n6 210\n6 209\n6 208\n6 207\n6 206\n6 205\n6 204\n6 203\n6 202\n6 201\n6 200\n6 199\n6 198\n6 197\n6 196\n6 195\n6 194\n6 193\n6 191\n6 190\n6 189\n6 188\n6 187\n6 186\n6 185\n6 184\n6 183\n6 182\n6 181\n6 180\n6 179\n6 178\n6 177\n6 176\n6 175\n6 174\n6 173\n6 172\n6 171\n6 170\n6 169\n6 168\n6 167\n6 166\n6 165\n6 164\n6 163\n6 162\n6 161\n6 160\n6 159\n6 158\n6 157\n6 156\n6 155\n6 154\n6 153\n6 152\n6 151\n6 150\n6 149\n6 148\n6 147\n6 146\n6 145\n6 144\n6 143\n6 142\n6 141\n6 140\n6 139\n6 138\n6 137\n6 136\n6 135\n6 134\n6 133\n6 132\n6 131\n6 130\n6 129\n6 128\n6 127\n6 126\n6 125\n6 124\n6 123\n6 122\n6 121\n6 120\n6 119\n6 118\n6 117\n6 116\n6 115\n6 114\n6 113\n6 112\n6 111\n6 110\n6 109\n6 108\n6 107\n6 106\n6 105\n6 104\n6 103\n6 102\n6 101\n6 100\n6 99\n6 98\n6 97\n6 96\n6 95\n6 94\n6 93\n6 92\n6 91\n6 90\n6 89\n6 88\n6 87\n6 86\n6 85\n6 84\n6 83\n6 82\n6 81\n6 80\n6 79\n6 78\n6 77\n6 76\n6 75\n6 74\n6 73\n6 72\n6 71\n6 70\n6 69\n6 68\n6 67\n6 66\n6 65\n6 64\n6 63\n6 62\n6 61\n6 60\n6 59\n6 58\n6 57\n6 56\n6 55\n6 54\n6 53\n6 52\n6 51\n6 50\n6 49\n6 48\n6 47\n6 46\n6 45\n6 44\n6 43\n6 42\n6 41\n6 40\n6 39\n6 38\n6 37\n6 36\n6 35\n6 34\n6 33\n6 32\n6 31\n6 30\n6 29\n6 28\n6 27\n6 26\n6 25\n6 24\n6 23\n6 22\n6 21\n6 20\n6 19\n6 18\n6 17\n6 16\n6 15\n6 14\n6 13\n6 12\n6 11\n6 10\n6 9\n6 8\n6 7\n6 6\n6 5\n6 4\n6 3\n6 2\n6 1\n6 0\n6 -1\n6 -2\n6 -3\n6 -4\n6 -5\n6 -6\n6 -7\n6 -8\n6 -9\n6 -10\n6 -11\n6 -12\n6 -13\n6 -14\n6 -15\n6 -16\n6 -17\n6 -18\n6 -19\n6 -20\n6 -21\n6 -22\n6 -23\n6 -24\n6 -25\n6 -26\n6 -27\n6 -28\n6 -29\n6 -30\n6 -31\n6 -32"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 5\n''') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 10') == '2'\nassert solution('1 5') == '1'\nassert solution('1 12') == '2'\nassert solution('1 12 10') == '2'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\nassert solution('2 3') == '0'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 5\n''') == '4'\nassert solution('''\n1 12\n''') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 5\n''') == '4'\nassert solution('''\n1 12\n''') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2') == '1'\nassert solution('3\\n10') == '3'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(r\"\"\"\n1 5\n\"\"\") == \"4\"\nassert solution(r\"\"\"\n1 10\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4 5\") == \"2 4\"\nassert solution(\"3 10 1\") == \"10 1\"\nassert solution(\"3 1 2\") == \"2\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\nassert solution(\"codar\") == \"1\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4\\n\"\n    \"0 2 0 1\\n\") == \"8\"\nassert solution(\n    \"5\\n\"\n    \"1000000 1 1 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n\"\n    \"0 2 0 1\"\n    ) == \"8\"\n\nassert solution(\n    \"5\\n\"\n    \"1000000 1 1 1 1\"\n    ) == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == \"8\"\nassert solution('1000000') == \"0\"\nassert solution('0') == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n0 2 0 1\n''') == '8'\nassert solution('''5\n1000000 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1000000 1 1 1 1') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n1000000 1 1 1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10\n1000000000000001 1000000000000001 1000000000000001 1000000000000001 1000000000000001\n\"\"\") == \"1000000000000001\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"0\""
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '0'\nassert solution('5\\n1000000 1 1 1 1') == '0'\nprint('Tests passed')\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n\n''') == 'zyz', \"Expected 'zyz' but got '{}'\".format(solution('''\n3\n\n'''))\n\nassert solution('''\n5\n\n''') == '-1', \"Expected '-1' but got '{}'\".format(solution('''\n5\n\n'''))"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2\n''') == 'zyz'\nassert solution('''\n2 1\n''') == -1\nassert solution('''\n2 3\n''') == 'zyz'\n\nassert solution('''\n2 4\n''') == 'zyz'\nassert solution('''\n2 5\n''') == 'zyz'"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 651\") == \"zyz\"\nassert solution(\"3 1\") == \"-\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == -1\nassert solution(\"abca\") == \"aba\"\nassert solution(\"ababac\") == \"aba\"\nassert solution(\"ababad\") == \"aba\"\nassert solution(\"zyzzy\") == \"zyzzy\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 650\n''') == 'zyz'\nassert solution('''\n2 651\n''') == '-1'\nassert solution('''\n100 2\nabcdefghijklmnopqrstuvwxyz\n''') == 'zyz'\nassert solution('''\n100 3\nabcdefghijklmnopqrstuvwxyz\n''') == 'zyz'\nassert solution('''\n100 5\nabcdefghijklmnopqrstuvwxyz\n''') == 'zyz'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n2 5\n''') == 'zyz'\n\nassert solution('''\n2 1\n2 2\n''') == '-1'\n\nassert solution('''\n1 1\n2 5\n''') == 'zyz'\n\nassert solution('''\n1 1\n2 2\n''') == '-1'\n\nassert solution('''\n1 1\n1 4\n''') == '1'"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 651') == 'zyz'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"abab\"\nassert solution(\"2 2\") == \"zyz\"\nassert solution(\"1 3\") == \"ababab\"\nassert solution(\"2 3\") == \"zyzzzyz\"\nassert solution(\"1 4\") == \"abababab\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\nprint(solution(input()))"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    6\n    0 10 0\n    10 0 1\n    12 8 1\n    5 5 0\n    11 2 1\n    11 3 0\n''') == '4'\nassert solution('''\n    10\n    6 1 1\n    0 2 0\n    2 1 1\n    6 1 1\n    8 2 0\n    4 4 0\n    4 0 0\n    2 3 1\n    6 1 0\n    6 3 1\n''') == '8'\n\nprint(solution('''\n    10\n    6 1 1\n    0 2 0\n    2 1 1\n    6 1 1\n    8 2 0\n    4 4 0\n    4 0 0\n    2 3 1\n    6 1 0\n    6 3 1\n'''))"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0') == '4'\nassert solution('10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1') == '8'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 0\") == \"0\"\nassert solution(\"6 1 1\") == \"1\""
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n10 0 10 0\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0') == '4'\nassert solution('5\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1') == '8'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('10') == '0'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\") == \"4\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '8'\nassert solution('10') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '4'\nassert solution('10') == '8'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '1'\nassert solution('1 2 10') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\nassert solution(stdin=\"2 4 3\\n3 4 5 7\\n1 2 10\\n\") == '2'\nassert solution(stdin=\"3 5 2\\n1 4 7 9 11\\n2 3\\n\") == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\n\nprint(solution())\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\n\"\"\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\nassert solution('3 5 2') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 4 3\n3 4 5 7\n1 2 10\n''') == '0'\nassert solution('''3 5 2\n1 4 7 9 11\n2 3\n''') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\nassert solution('3 5 2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4 3\") == \"0\"\nassert solution(\"3 5 2\") == \"2\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n3 2\") == \"1\"\nassert solution(\"1 2\\n3 4\") == \"3\"\nassert solution(\"2\\n3 4\") == \"2\"\n\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        print(out)\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"2 3\n3 2\"\"\"\n        output = \"\"\"1\n-2 -1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1 2\n3 4\"\"\"\n        output = \"\"\"3\n-1 1\n2 1\n0 -2\"\"\"\n        self."
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2') == '1'"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n3 2\n''') == '1'\nassert solution('''\n3 3\n2 2\n''') == '1'\nassert solution('''\n1 2\n2 1\n''') == '2'\nassert solution('''\n1 2\n1 1\n''') == '2'\nassert solution('''\n1 2\n2 1\n''') == '2'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"-2 -1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"0 0\") == \"2\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\n3 2\n''') == '1'\n\nassert solution('''\n2 5\n3 2\n''') == '3'\n\nassert solution('''\n1 3\n3 2\n''') == '2'\n\nassert solution('''\n1 5\n2 3\n''') == '3'\n\nassert solution('''\n2 2\n1 2\n''') == '3'"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == '3'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"1\""
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 2') == '1'\n\nassert solution('1 2') == '2'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 4\") == \"3\""
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '0 -1'"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '4', \"Wrong solution\"\nprint(\"A+\")\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\nIVO\nJASNA\nJOSIPA''') == '4'\nassert solution('''5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA''') == '24'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\nIVO\nJASNA\nJOSIPA''') == '4'\nassert solution('''5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA''') == '24'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1', \"1st example\"\nassert solution('3') == '4', \"2nd example\"\nassert solution('4') == '24', \"3rd example\"\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '4'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '0'"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '4'\nassert solution('5') == '24'\n\nassert solution('''5\nMARIA\nMARCEAU\nMARIA\nMARCELO\nMARCELA\nMARCELIA\nMARCAE''') == '24'\nassert solution('''3\nIVO\nJASNA\nJOSIPA\n''') == '4'\nassert solution('''4\nMARISA\nMARISA\nMARI\nMARI\n''') == '12'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"4\", \"Wrong\"\nassert solution(\"5\") == \"24\", \"Wrong\""
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\") == \"4\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\") == \"24\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\nIVO\nJASNA\nJOSIPA\n\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"\n5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA\n\"\"\"\n) == \"24\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 3 1') == '3'\nassert solution('3 2 3 1') == '3'\nassert solution('4 2 3 1') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"39\""
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 2 3 1\n2 3 4 1\n3 4 5 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1 2 3 1\n2 3 4 1\n3 4 5 1\n\"\"\") == \"39\"\nassert solution(\"\"\"\n1 2 3 1\n3 1 5 6\n1 9 4 7\n\"\"\") == \"41\"\nassert solution(\"\"\"\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n\"\"\") == \"39\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 2 3 1\n3 1 5 6\n1 9 4 7\n\"\"\") == \"3\"\n\"\"\"\n-----Hint-----\nSolving the problem is quite straight forward.\n\nIt is exactly the same problem you saw in class, but now you have to make use of the knowledge you gained in class.\n\nIn class, we saw that we can build a DP table that accumulates the minimum value of $f_i$ for each $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nWe then compute $min_i{f_i}$, where we have to make sure that $min_i{f_i}$ is >= 0.\n\nSo we can loop through each $i$ and accumulate the minimum value of $f_i$ for each $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nNow, we can check if there is any profit in that position, and it's worth buying!\n\nUsing the formula:\n\n$min_i{f_i} = f_i - p_i - m_i$\n\nIf we have to buy from position $i$, then the profit that we have gained from selling the snacks is $min_i{f_i}$, and we need to use the total profit from the machine to get at least $min_i{f_i}$.\n\nWe can use a dynamic programming approach:\n\nLet $dp$ be an array of size $n$, initialized to $0$s.\n\nThe first element of $dp$ is the minimum profit from position $1$ to $n$, since we can buy from position $1$ only.\n\nAnd we initialize $dp[1]$, since we have to buy at position $1$.\n\nThen, we loop through all $i$ to $n$:\n\n$dp[i] = min(dp[i-1], dp[i-2] + min_i{f_i})$, where $i$ is the position in the machine, and $min_i{f_i}$ is the minimum value of $f_i$ for all $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nSo, we can say that\n\n$dp[n] = min(dp[n-1], dp[n-2] + min_i{f_i})$\n\nwhere $n$ is the position in the machine, and $min_i{f_i}$ is the minimum value of $f_i$ for all $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nIf there is no profit from position $i$, then we can say that\n\n$dp[i] = dp[i-1]$\n\nNow, we can see that we must have a profit from position $i$, and we can only buy at position $i$ if we get at least $min_i{f_i}$.\n\nSo we can say that we must buy from position $i$, and we can get at least $min_i{f_i}$ to get at least $min_i{f_i}$, so we can say that\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nNow, we can say that\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nwhere $i$ is the position in the machine, and $min_i{f_i}$ is the minimum value of $f_i$ for all $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nThen, we can say that\n\n$dp[n] = max(dp[n-1], dp[n-2] + min_i{f_i})$\n\nand\n\n$dp[n] = max(dp[n-1], dp[n-2] + min_i{f_i})$\n\nwith $n$ being the position in the machine, and $min_i{f_i}$ being the minimum value of $f_i$ for all $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nSo, we can say that we can buy from position $i$, and we can get at least $min_i{f_i}$ to get at least $min_i{f_i}$, so we can say that\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nNow, we can say that\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nwhere $i$ is the position in the machine, and $min_i{f_i}$ is the minimum value of $f_i$ for all $i$ ($0 \\le i \\le n$) that can be bought from position $i$.\n\nThen, we can say that we must have a profit from position $i$, and we can only buy at position $i$ if we get at least $min_i{f_i}$.\n\nSo, we can say that\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nSo, we can say that there is profit in position $i$ if and only if\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nor\n\n$dp[i] = max(dp[i-1], dp[i-2] + min_i{f_i})$\n\nwhere $i$ is the position in the machine, and $min_i{"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39'\nassert solution('''\n4\n1 4 2 2\n1 4 1 2\n2 1 4 2\n2 3 3 2\n''') == '13'"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\\n4 5 6 1\\n5 6 7 1') == '39'\nassert solution('5\\n2 2 3 8\\n3 1 5 6\\n1 9 4 7\\n8 8 8 7') == '62'\n\n'''"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 3 1\n2 3 4 1\n3 4 5 1''') == '3'\nassert solution('''3\n2 2 3 8\n3 1 5 6\n1 9 4 7''') == '39'\nassert solution('''3\n1 2 3 1\n2 3 4 1\n3 4 5 1''') == '3'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '5.2696518641'\nassert solution('1') == '9'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n10 10 -10 10\n2\n4 4 -2 -4\nSample Input 3:\n1\n6 5 4 -2 -2 -2 2 2\nSample Output 3:\n6\n''') == '4.2696518641'\n\nassert solution('''\n1\n7 5 4 -2 -2 -2 2 2\nSample Input 4:\n1\n6 3 -2 -2 -1 2 1\nSample Output 4:\n5.39112222222\n''') == '6.39112222222'\n\nassert solution('''\n1\n4 3 -2 -2 -1 2 1\nSample Input 5:\n1\n9 2 1 1\nSample Output 5:\n2\n''') == '2.2'\n\nimport itertools\nfrom functools import reduce"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1''') == '5.2696518641'\n\nimport unittest\nimport io\nfrom collections import namedtuple\nfrom typing import NamedTuple\n\nclass Test_solution(unittest.TestCase):\n\n    def test_solution(self):\n        def test_input(self):\n            input_data = \"\"\"2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\"\"\"\n            expected_output = \"\"\"5.2696518641\"\"\"\n            self.assertEqual(expected_output, solution(input_data))\n\n    def test_edge_case_input(self):\n        input_data = \"\"\"1\n8 10 4 -1 -1 1 -1 1 1 -1 1\"\"\"\n        expected_output = \"\"\"8.0000066438\"\"\"\n        self.assertEqual(expected_output, solution(input_data))\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '5.2696518641'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"5.2696518641\"\nassert solution(\"1\") == \"9\""
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"5.2696518641\"\nassert solution(\"1\") == \"9\"\nprint('Tests finished')"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"5.2696518641\"\nassert solution(\"3\") == \"9.0\"\nassert solution(\"4\") == \"9.0\"\nassert solution(\"5\") == \"8.0\""
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"9.0\"\nprint(solution(input_))\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1''') == '5.2696518641'\nassert solution('''1\n8 9 3 -14 -14 14 -14 0 20''') == '9'\nassert solution('''3\n2 3 -1 3 1 2 3''') == '0.0'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '5.2696518641'\nassert solution('''\n3\n1 -1 0\n2 0 -1\n3 0 0\n''') == '1.6923076924'\nassert solution('''\n3\n-5 -5 1\n1 1 -1\n1 -1 -1\n''') == '1.6923076924'\nassert solution('''\n10\n-5 -5 1\n1 1 -1\n1 -1 -1\n-1 -1 1\n-1 1 -1\n-1 -1 -1\n1 1 -1\n1 -1 -1\n1 -1 1\n-1 1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n1 1 1\n1 1 -1\n1 1 1\n1 1 1\n''') == '10.6923076923'\n\nsolution('''\n1\n1 2\n1 1\n''') == '0.5'\nsolution('''\n2\n1 2\n1 1\n''') == '2.5'\n\nsolution('''\n10\n-5 -5 1\n1 1 -1\n1 -1 -1\n-1 -1 1\n-1 1 -1\n-1 -1 -1\n1 1 -1\n1 -1 -1\n1 -1 1\n-1 1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n1 1 1\n1 1 -1\n1 1 1\n1 1 -1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n1 1 1\n1 1 -1\n1 1 1\n1 1 -1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-1 1 -1\n-1 1 1\n1 -1 1\n1 -1 1\n1 1 -1\n-1 1 -1\n-1 1 1\n-"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n1 1 1\n2 0 2\n3 1 1\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1 1\\n2 0 2\\n3 1 1\") == \"1\"\nassert solution(\"3\\n4 1 1\\n5 2 3\\n5 0 3\") == \"8\"\nassert solution(\"4\\n4 1 1\\n5 2 3\\n5 0 3\") == \"24\"\nassert solution(\"5\\n4 1 1\\n5 2 3\\n5 0 3\") == \"-1\"\nassert solution(\"6\\n4 1 1\\n5 2 3\\n5 0 3\") == \"4\"\n\n\"\"\"\nimport math\n\nfrom itertools import product\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == '1'\nprint(solution(input))\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"8\"\nassert solution(\"\"\"\n3\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2\n3 2 1\n1 0 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n2 1 1\n2 0 2\n3 1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '-1'\nassert solution('3') == '8'\nassert solution('4') == '4'\nassert solution('5') == '24'\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == -1, \"solution needs to return a valid solution\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '-1', 'First'\nassert solution('3') == '1', 'Second'\nassert solution('4') == '8', 'Third'\nassert solution('5') == '4', 'Fourth'\nassert solution('6') == '24', 'Fifth'\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 1') == '1'\nassert solution('3\\n4 1 1') == '8'\nassert solution('3\\n5 1 1') == '4'\nassert solution('3\\n5 2 3') == '24'\nassert solution('3\\n5 0 3') == '-1'"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"1\n\nassert solution(\"\"\"\n3\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"4\n\nassert solution(\"\"\"\n4\n10 1 1 1\n5 2 3\n6 2 4\n4 1 1\n\"\"\") == \"4\n\nassert solution(\"\"\"\n4\n5 1 1\n4 0 2\n3 1 1\n\"\"\") == \"4\n\nassert solution(\"\"\"\n4\n5 1 1\n4 0 2\n3 1 1\n5 1 1\n\"\"\") == \"6"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1 1\n2 0 2\n3 1 1\n''') == '1'\nassert solution('''3\n4 1 1\n5 2 3\n5 0 3\n''') == '8'\nassert solution('''5\n4 1 1\n5 2 3\n5 0 3\n5 4 2\n''') == '4'\nassert solution('''6\n4 1 1\n5 2 3\n5 0 3\n5 4 2\n''') == '24'\nassert solution('''3\n3 1 1\n2 1 1\n3 1 1\n''') == '-1'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n''') == '3'\n\nassert solution('''\n6 6\n''') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n6 6\\n\") == \"240\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\n''') == '3'\nassert solution('''6 6\n''') == '240'\nprint('You passed all the tests!')\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\n2 3\n1 2''') == '3'\nassert solution('''6 6\n2 3\n1 2\n3 2''') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n3 4') == '3'\nassert solution('6 6') == '240'\nassert solution('2 2\\n1 1') == '2'"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"6 6\") == \"240\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '3'\nassert solution('1 5') == '11'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n\n'''"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''SEND+MORE=MONEY''') == '9567+1085=10652'\nassert solution('''A+A=A''') == 'impossible'\nprint(\"You passed {}% of the test cases. Nice job!\" % ((solution('SEND+MORE=MONEY') == '9567+1085=10652') * 100.0))\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\nassert solution('GOOD') == 'impossible'\n\n\"\"\"\n\n\n\"\"\"\n1. Try to understand the question\n2. Create a recursive function to solve\n3. Create a function that will check for the right recursion\n4. Create a function that will solve the puzzle\n\"\"\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('C+B=A') == '2+1=3'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('C+B=A') == '2+1=3'\n\nNote: The puzzle is not a problem if it is impossible to make the equality hold for any given puzzle, but the tests for that are included for completeness.\n\"\"\"\n\nimport sys\nimport math\n\ns = sys.stdin.readline().strip()\nprint(solution(s))"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\n\nassert solution('A+A=A') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\nprint(solution(input()))"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n0 1 2 3') == '14'\nassert solution('5\\n1 1 2 1 1') == '1'\nprint(solution(input()))"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"14\"\nassert solution(\"15\") == \"4\"\nassert solution(\"20\") == \"7\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0 1 2 3\n''') == '14'\nassert solution('''\n5\n1 1 2 1 1\n''') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n0 1 2 3\n''') == '14'\nassert solution('''\n5\n1 1 2 1 1\n''') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1 2 3') == '14'\nassert solution('5\\n1 1 2 1 1') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '14'\nassert solution('3') == '3'\nassert solution('2') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2 3\n7\n''') == '1'\nassert solution('''1 2 3\n4 5 6\n''') == '2'\nassert solution('''3 2 1\n4 5 6\n''') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1 2 3\\n\") == \"14\"\nassert solution(\"4\\n0 1 2 3\\n\") == \"1\"\nassert solution(\"5\\n1 1 2 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '14'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 7 8 0\n7 0 0 10\n''') == '-1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_str) == output_str\n\nOUTPUT\n\nSample Case 1\nSample Case 2\n'''\n\n\nimport math"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\nassert solution('''\n4 4\n1 2 3 0\n4 0 5 6\n7 0 0 10\n7 0 0 10\n''') == '-1'\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\nassert solution('''\n3 3\n0 1 2\n0 0 2\n1 2 0\n''') == '-1'\nassert solution('''\n2 2\n1 0\n0 0\n''') == '1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '88'"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == \"88\", \"Wrong\"\n\nassert solution('''\n4 4\n1 2 3 0\n1 2 3 0\n1 2 3 0\n1 2 3 0\n''') == \"90\", \"Wrong\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4') == '88'\nassert solution('4 4') == '-1'\n\n---Input Format---\nThe first line contains $n$ and $m$ separated by a single space.\nThe next $n$ lines contain $m$ space-separated integers describing the contents of the checkerboard.\nThe first integer of each line is the column number.\nThe next integer is the row number.\n\n---Output Format---\nOutput a single integer, the minimum possible sum that can be achieved by replacing the 0 cells with the numbers of positive integers to make a valid Magic Checkerboard.\n\nSample Output 1:\n88\n\nSample Output 2:\n-1\n\"\"\""
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == '88'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n') == '88'\nassert solution('5 5\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n2 3 4 5\\n8 9 0 1\\n') == '-1'\n\n'''"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"9999700002.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 1\n1 1\n''') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\nprint('all tests passed')"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1\\n1 1') == '0.000'\nassert solution('5\\n1 99999\\n9999 99999') == '9999700002.000'\nassert solution('4\\n1 1\\n1 1\\n1 1\\n1 1') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0.000'\nassert solution('1') == '0.000'\nassert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\nassert solution('99999 99999') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n1 1\n1 1\n\"\"\") == \"0.000\"\nassert solution(\"\"\"\n2\n1 99999\n99999 99999\n\"\"\") == \"9999700002.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0.000'\nassert solution('2') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 1\n1 1\n''') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"9999700002.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 8 1 6\") == \"3\"\nassert solution(\"3 4 1 2\") == \"3\"\n\ninput()"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == 'Infinity'\nassert solution('3 4 1 2') == 'Infinity'\nassert solution('2 7 8 5 1 3') == '4'\nassert solution('5 2 8 5 1 3') == '5'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == '3'"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n1\n2\n3\n4\n5\n''') == 'Infinity'\nassert solution('''\n4\n1 2\n1 3\n2 4\n3 4\n''') == 'Infinity'\n\n'''"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == \"3\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == '3'\nassert solution('3 4 1 2') == '3'\nassert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5') == '3'\nassert solution('3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2\\nSample Output 2:') == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == '3'\nassert solution('5 6 2 1') == '4'\nassert solution('4 2 3') == '4'\nassert solution('2 3 2') == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1') == 'impossible'\nassert solution('3 1') == '000,001,011,010,110,111,101,100'"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 1\n1\n2\n2\n2\n1\n1\n1\n''') == \"impossible\"\n\n'''\n\nn, p = map(int, input().split())\npalette = {i for i in range(1, n+1)}"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 1\n5\n3 1\n1\n2 1\n5 2\n3 2''') == 'impossible'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n6 1\n1\n\"\"\") == \"impossible\"\n\nassert solution(\n\"\"\"\n3 1\n1\n\"\"\") == \"000\""
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == \"impossible\"\nassert solution('6 1') == \"impossible\""
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 1\\n1\") == \"impossible\"\nassert solution(\"3 1\\n1\") == \"000\"\nassert solution(\"4 1\\n1\") == \"111\"\nassert solution(\"5 1\\n1\") == \"011\"\nassert solution(\"6 1\\n2\") == \"000\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 1') == 'impossible'\nassert solution('3 1') == '000'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == 'impossible'\nassert solution('4 5') == '1100'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1\n1\n''') == 'impossible'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 1\n1\n''') == 'impossible'\nassert solution('''3 1\n1\n''') == '000'\nassert solution('''4 1\n1\n''') == '111'\nassert solution('''5 1\n1\n''') == '100100'\nassert solution('''5 1\n2\n''') == '1101'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '2'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"2\"\nassert solution(\"100\") == \"2\"\nassert solution(\"1000\") == \"4\"\nassert solution(\"10000\") == \"4\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"9\") == \"1\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"2\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"99\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"90\") == \"9\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\") == \"1\\n2\"\nassert solution(\"90\\n10\") == \"10\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string_1) == \"1\"\nassert solution(input_string_2) == \"10\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"1\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"1\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '2'\nassert solution('7') == '7'\nassert solution('12345678') == '3'\nassert solution('123456789') == '4'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n2 3 3\n4 1 10\n2 7 3\nSample Output 1:\n2\n\nSample Input 2:\n5\n3 1 3 3\n5 8 7 10\n4 1 2 6\nSample Output 2:\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n2 3 3\n4 1 10\n2 7 3\nSample Output 1:\n2\n\nSample Input 2:\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\nSample Output 2:\n1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n1 3 7 8\nSample Output 1:\n1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n1 3 3\n5 8 7 10\n4 1 2 6\nSample Output 1:\n2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n10\n3 1 3 3\n5 8 7 10\n4 1 2 6\n1 3 7 8\n1 5 6 7 8\n9 1 2 3 4 5\nSample Output 1:\n3\n\"\"\") == \"2\""
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 3\\n4 1 10\\n2 7 3') == '1'\nassert solution('3\\n2 3 3\\n4 1 10\\n2 7 3') == '2'\nassert solution('2\\n2 3 3\\n4 1 10\\n2 7 3') == '0'\nassert solution('2\\n1 3 4\\n1 2 3\\n2 3 4') == '1'\nassert solution('5\\n8 7 6\\n5 8 1 3\\n4 7 1 3\\n8 1 3 2') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n2 3 3\n4 1 10\n2 7 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n4 1 10\\n2 7 3\\n') == '1'\nassert solution('2\\n2 1 10\\n2 7 3\\n') == '1'\nassert solution('3\\n2 3 3\\n2 7 3\\n') == '2'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '3\\n'\n    '2 3 3\\n'\n    '4 1 10\\n'\n    '2 7 3\\n'\n) == '2'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2 3 3\\n4 1 10\\n2 7 3') == '2'\nassert solution('4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n2 3 3\n4 1 10\n2 7 3\n''') == '2'\nassert solution('''\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n2 3 3\n4 1 10\n2 7 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n2 3 3\n4 1 10\n2 7 3\n''') == '2'\nassert solution('''4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\nassert solution('''5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '0'\nassert solution('''4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '0'\nassert solution('''5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '0'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"aaaaaaaa\") == \"3\"\nassert solution(\"aaaaabaaaa\") == \"3\"\nassert solution(\"aaaaaaaaaaa\") == \"4\"\nassert solution(\"aaaaabaaaaaaa\") == \"4\"\n\n'''\n\n\n'''\nThis is the solution to the first test case.\n'''"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1') == '7'\n\ns = 'cbbd'\ns = 'bacb'\ns = 'abcd'\ns = 'aaaaaabbbbbbaa'\ns = '''\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd\nd"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n12\\n8\\n5') == '9'\nassert solution('2\\n4\\n2') == '3'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 1') == '7'\nassert solution('9 3') == '5'\nassert solution('1 5') == '11'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nbeginning\n1 5\n4 8\n1 9\n''') == '5'\nassert solution('''\n6 1\nvelvet\n1 6\nSample Output 2:\n7\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 1\") == \"7\"\nassert solution(\"9 3\") == \"11\"\nassert solution(\"6 3\") == \"7\"\nassert solution(\"6 1\") == \"7\"\nassert solution(\"6 3\") == \"7\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3\\n5 4\\n9 8') == '6'\nassert solution('6 3\\n5 4\\n9 8') == '7'"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"abc\") == \"\"\nassert solution(\"level\") == \"2\"\nassert solution(\"aab\") == \"2\"\nassert solution(\"iloveme\") == \"6\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5 6') == '7'\nassert solution('1 2 3 4 5 6 7') == '11'\nassert solution('abdacbade') == '7'\nassert solution('abcdef') == '7'\nassert solution('aaa') == '7'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1') == '7'\nassert solution('10 1') == '10'\nassert solution('100 1') == '100'\nassert solution('10000 1') == '10000'\nassert solution('12345 1') == '12345'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 3') == '3'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == '2'\nassert solution('3 1') == '1'\nassert solution('2 3') == '23'\nassert solution('1 23') == '23'\nassert solution('2 17') == '17'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n3 1\n2 2\n1 1\n''') == '2'\nassert solution('''\n2 3\n1 23\n2 17\n''') == '23'\n\nassert solution('''\n5 7\n1 2\n1 3\n2 1\n2 4\n3 2\n3 4\n3 5\n4 1\n4 2\n''') == '4'\n\nassert solution('''\n5 5\n1 2\n1 3\n2 1\n2 4\n3 2\n3 4\n3 5\n4 1\n4 2\n''') == '3'\n\nassert solution('''\n1000000000 6\n0 0\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '678910110'"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 4\n3 1\n2 2\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 1\n1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 5\n1 2\n1 3\n2 4\n2 5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4') == '2'\nassert solution('2 3') == '23'\nassert solution('1 23') == '23'\nassert solution('2 17') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 3\n1 23\n2 17\n\"\"\") == \"23\"\nassert solution(\"\"\"\n2\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1 1\n2 2\n1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"2\"\nassert solution(\"2 3\") == \"23\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 4\n3 1\n2 2\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 3\n1 23\n2 17\n\"\"\") == \"23\"\nassert solution(\"\"\"\n1 1000000000\n1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == \"23\"\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 4\n3 1\n2 2\n1 1\n''') == '2'\nassert solution('''\n5 6\n4 2\n1 1\n2 2\n2 4\n2 5\n2 5\n1 4\n''') == '4'\nassert solution('''\n2 3\n2 2\n2 4\n''') == '2'\n''')\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0.0000000000\"\nassert solution(\"2\") == \"0.0000000000\"\nassert solution(\"3\") == \"0.0000000000\"\nassert solution(\"4\") == \"0.0000000000\"\nassert solution(\"5\") == \"0.0000000000\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n2 2\\n3 3\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\") == \"0.0000000000\"\nassert solution(\"20\\n-10 -5\\n-4 -10\\n4 -4\\n-4 -5\\n-4 -6\\n10 1\\n10 2\\n10 3\\n20 5\\n20 4\\n20 3\\n20 2\\n20 1\\n\") == \"7.28894286936\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 4 0\") == \"0.0000000000\"\nassert solution(\"4 2 3 3 2\") == \"10.0000000000\"\nassert solution(\"2 2 0 0 0 0\") == \"0.0000000000\"\n\n----------------------------------------\n\nSolution by Maniaraja:"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3') == '0.0000000000'\nassert solution('6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0') == '9.476048311178'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n0 0\n2 0\n2 2\n''') == '0.0000000000'\n\nassert solution('''4\n0 0\n2 0\n2 2\n''') == '0.0000000000'\n\nassert solution('''6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n''') == '9.476048311178'\n\"\"\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3''') == '0.0000000000'\nassert solution('''6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0''') == '9.476048311178'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n''') == '0.0000000000'\n\nassert solution('''\n6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n''') == '9.476048311178'"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0.0000000000'\nassert solution('2') == '0.0000000000'\nassert solution('3') == '0.0000000000'\nassert solution('4') == '0.0000000000'\nassert solution('5') == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"0.0000000000\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3') == '0.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n2 0\n1 1\n0 2\n-2 0\n0 -2\n5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20\n''') == '8.0000000000'\nassert solution('''5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20\n''') == '0.0200000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0.2 0\\n0 -0.2') == '8.0000000000'\nassert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n0 0.2\\n-0.2 0\\n0 0.0\\n-0.2 0') == '8.0000000000'\nassert solution('5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n') == '0.0200000000'"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 0\\n1 1\\n0 1\\n0 0\\n') == '8.0000000000'\nassert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\nassert solution('5\\n1 0\\n0 2\\n0 1\\n-1 0\\n0 0\\n') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"2.0000000000\"\nassert solution(\"10\") == \"17.499999999\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 0\n1 1\n0 2\n-2 0\n0 -2''') == '8.0000000000'\nassert solution('''5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20''') == '0.0200000000'"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20\n''') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 1\\n1 2\") == \"8.0000000000\"\nassert solution(\"5 0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n\") == \"0.0200000000\"\nprint(\"All test cases passed!\")\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 0\\n0 1\") == \"8.0000000000\"\nassert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\") == \"8.0000000000\"\nassert solution(\"5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\") == \"0.0200000000\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '8.0000000000'\nassert solution('5') == '0.0200000000'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2\") == \"2\"\nassert solution(\"4 3 3\") == \"2\"\nassert solution(\"9 2 3\") == \"2\"\nassert solution(\"11 2 2\") == \"3\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n9 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\nassert solution('''\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 10 4 3') == '2'\nassert solution('9 10 4 3') == '1'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''9 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\nassert solution('''10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\nassert solution('''10 3 3\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '2'"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 1 1\n1 1 1 1 1\n''') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 3') == '2'\nassert solution('10 2 2') == '2'\nassert solution('10 20 20') == '0'\nassert solution('10 50 50') == '1'\nassert solution('100 100 100') == '0'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n9 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\nassert solution('''\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('9 4 3\\n1 1 9 9 1 6 6 39 9\\n') == '2'\nassert solution('10 2 2\\n1 1 1 1 1 2 2 2 2 2 2\\n') == '2'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 3') == '3.666666667'\nassert solution('2 4 7') == '12.0'\nassert solution('1 1 1') == '1.0'\nassert solution('3 4 6') == '5.0'\nassert solution('3 8 1') == '3.0'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n\"\"\""
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 5') == '3.33333333'\nassert solution('8 10 4') == '4.0'\nassert solution('7 6 4') == '3.4'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\nassert solution('5 5 3') == '3.3333333333'\nassert solution('1 2 3 4 5') == '3.75'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''4 11 4\n10 10 10 10\n''') == '20.000000000'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000'\nprint('Tests passed')\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\n\"\"\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\nassert solution(\"6 3600\") == \"3\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 42\n5 123456789''') == '16317634'\nassert solution('''1 0\n0 1''') == '1'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2,42]) == \"2\"\nassert solution([5,123456789]) == \"16317634\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 42\n''') == '2'\nassert solution('''\n5 123456789\n''') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"10 4\") == \"1\"\nassert solution(\"10000000000\") == \"1\""
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 42''') == '2'\nassert solution('''5 123456789''') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 42''') == '2'\nassert solution('''5 123456789''') == '16317634'''\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\n\"\"\""
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4'\nprint('All test cases passed!')"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 1 1\") == \"1\"\nassert solution(\"3 1 0 0 2\") == \"2\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n''') == '0'\nassert solution('''\n3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6''') == '4'\nassert solution('''3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6''') == '4'\nassert solution('''3 3 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6''') == '0'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\""
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'\n\"\"\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'\nassert solution('3 1 1 1 8') == '4'\nassert solution('3 1 1 1 8') == '4'\nassert solution('3 1 1 1 8') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'\nassert solution('''10 5 1\n10 10\n20 20\n22 22\n23 23\n24 24\n20 20\n20 20\n22 22\n23 23\n24 24\n''') == '5'\nassert solution('''10 5 1\n10 10\n20 20\n22 22\n23 23\n24 24\n20 20\n20 20\n22 22\n23 23\n24 24\n''') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1 10 10\\n8 8\\n5 1\") == \"3\"\nassert solution(\"5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45\\n\") == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1''') == '3'\nassert solution('''5 1 10 10\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n3''') == '3'\n\n'''"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1 10 10') == '3'\nassert solution('5 1 100 100') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 100 100\") == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1 10 10') == '3'\nassert solution('5 1 100 100') == '3'\nassert solution('5 1 10 10') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ABC\") == \"2\"\nassert solution(\"ABBBAAAA\") == \"3\"\nassert solution(\"BBBCCCBB\") == \"3\"\nassert solution(\"CCCCAAAC\") == \"3\"\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 3"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 4\nassert solution('CCCCAAAC') == -1\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == 2\nassert solution(\"ABBBAAAA\") == 3\nassert solution(\"BBBCCCBB\") == 4\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3'\nassert solution(\"ABC\") == '2'\nassert solution(\"ABBBAAAA\") == '3'\nassert solution(\"BBBCCCBB\") == '3'\nassert solution(\"CCCCAAAC\") == '4'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n\nA\nB\nC\n''') == '2'\n\nassert solution('''\n\nA\nB\nA\n''') == '-1'\n\nassert solution('''\n\nA\nA\nA\n''') == '-1'\n\nassert solution('''\n\nA\nA\nB\nC\n''') == '2'\n\nassert solution('''\n\nA\nB\nC\nD\nE\n''') == '2'"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('ABC') == '2'\nassert solution('ABBBAAAA') == '3'\nassert solution('BBBCCCBB') == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 3"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    'ABC\\nABC\\nABC\\n') == '2'\nassert solution(\n    'ABBBAAAA\\nBBBCCCBB\\nCCCCAAAC\\n') == '3'\nassert solution(\n    'ABABABABA\\nBBBBBBBB\\nCCCCCCCC\\n') == '-1'\nassert solution(\n    'ABABABABA\\nBBBBBBBB\\nCCCCCCCC\\n') == '1'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 2\nassert solution('BBBCCCBB') == 3\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    A\n    B\n    AA\n    BBB\n    AAA\n    \"\"\"\n) == \"3\"\nassert solution(\n    \"\"\"\n    A\n    ABA\n    BBB\n    ABABA\n    AAAAAB\n    \"\"\"\n) == \"3\""
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\nA\nB\nAA\nBBB\nAAA\n''') == '3'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == '3'\nassert solution('''5\nA\nA\nA\nA\nA\n''') == '3'\nassert solution('''5\nA\nAA\nBBB\nAAA\n''') == '3'\nassert solution('''5\nA\nB\nAA\nBBB\nAAA\n''') == '2'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\nA\nB\nAA\nBBB\nAAA\n''') == \"3\"\nassert solution('''\n5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == \"3\"\nassert solution('''\n5\nA\nA\nAA\nBBB\nAAA\n''') == \"2\"\nassert solution('''\n5\nA\nA\nAA\nBBB\nAAA\n''') == \"2\"\nassert solution('''\n5\nA\nA\nAA\nBBBBB\nAAA\n''') == \"3\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\nA\nB\nAA\nBBB\nAAA''') == '3'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB''') == '3'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB''') == '4'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAA''') == '2'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\nassert solution('3') == '3'\nassert solution('7') == '4'\nassert solution('10') == '8'\nassert solution('100000000') == '2'"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\nA\nB\nAA\nBBB\nAAA\n\"\"\") == \"3\"\n\nassert solution(\"\"\"5\nA\nABA\nBBB\nABABA\nAAAAAB\n\"\"\") == \"3\""
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\nA\nB\nAA\nBBB\nAAA\n''') == \"3\"\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == \"3\"\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == \"3\"\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == \"3\"\nassert solution('''5\nA\nAAA\nBBB\nAAABA\nAAAAAB\n''') == \"3\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"3\"\nprint(solution(__import__(\"sys\").stdin.read()))\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nA\\nB\\nAA\\nBBB\\nAAA') == '3'\nassert solution('5\\nA\\nAB\\nAA\\nBBBB') == '3'\nassert solution('10\\nAAA\\nAAAAAAABB\\nAB\\n
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 10 2 2') == '0.1909090909'\nassert solution('100 10 2 2') == '0.1909090909'\nassert solution('100 10 2 1') == '0.1909090909'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0.1', \"Wrong answer\"\nassert solution('1000000000') == '0.1909090909', \"Wrong answer\"\nassert solution('100 10 2 1') == '0.1', \"Wrong answer\"\nassert solution('100 10 2 2') == '0.1909090909', \"Wrong answer\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 2 1') == '0.1'\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"0.1909090909\""
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n100 10 2 1\\n') == '0.1'\nassert solution('1\\n100 10 2 2\\n') == '0.1909090909'"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input 1:\n100 10 2 1\nSample Output 1:\n0.100000001\n\nSample Input 2:\n100 10 2 2\nSample Output 2:\n
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n10 10 2 1\n\"\"\") == \"0.1\"\nassert solution(\"\"\"\n100 10 2 2\n\"\"\") == \"0.1909090909\n\"\"\")\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(ABABABcABABAbAbab) == '4'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    'ABABABcABABAbAbab') == '4'\nassert solution(\n    'ABABABcABABAbAbab') == '5'\nassert solution(\n    'ABABABcABABAbAbab') == '0'\nassert solution(\n    'AABAABBBABABABbAB') == '5'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ABABABcABABAbAbab') == '5'\n\"\"\""
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\n\nimport sys\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r'''\nABABABcABABAbAbab\n2\n2 2\n3 4\n''') == '4'\nassert solution(r'''\nABABABcABABAbAbab\n2\n0 2\n0 7\n''') == '2'\nassert solution(r'''\nABABABcABABAbAbab\n4\n0 4\n1 1\n0 3\n''') == '4'\nassert solution(r'''\nABABABcABABAbAbab\n2\n1 6\n1 7\n''') == '5'\nassert solution(r'''\nABABABcABABAbAbab\n3\n0 5\n1 1\n0 3\n''') == '4'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(ABABABcABABAbAbab) == \"4\"\nassert solution(AABAABABcAABAbAbab) == \"5\"\nassert solution(\"\") == \"0\"\nassert solution(\"a\") == \"0\"\nassert solution(\"AABBAABcAABAbAbab\") == \"5\""
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ABABABcABABAbAbab') == '5'\nassert solution('ABABABcABABAbAbab') == '4'\nassert solution('ABABABcABABAbAbab') == '4'\nassert solution
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ABABABcABABAbAbab') == '4'\nassert solution('ABABABcABABAbAbab') == '0'\nassert solution('ABABABcABABAbAbab') == '5'\nassert solution('ABABABcABABAbAbab') == '0'\nassert solution('ABABABcABABAbAbab') == '5'"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAbab\") == \"2\"\nassert solution(\"ABABABcABABAbAbab\") == \"5\""
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n0 0 1\\n\") == \"2\"\n\nassert solution(\"4 3\\n0 0 1\\n\") == \"2\"\n\nassert solution(\"4 3\\n0 0 1\\n\") == \"2\"\n\nassert solution(\"7 3\\n0 0 1 2 3 4 5 6\\n\") == \"7\"\n\nassert solution(\"8 3\\n0 0 1 2 3 4 5 6\\n\") == \"8\""
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '2'\nassert solution('6 5') == '2'\nassert solution('4 4') == '3'\n'''"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == '2'\nassert solution('5 5') == '4'\nassert solution('5 0') == '1'\nassert solution('5 1') == '2'\n\"\"\"\n\nN, D = map(int, input().split())\n\nn = 0\n\nfor i in range(1,N+1):\n    n += 1\n    if i%2!= 0:\n        n += 1\n    if i < N:\n        n += abs(int(input())-i)\nprint(n)"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '2'\nassert solution('5 3') == '3'\nassert solution('8 4') == '5'\nassert solution('12 4') == '7'\nassert solution('10 4') == '4'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0\n1\n2\n''') == '2'\nassert solution('''\n2\n1\n2\n''') == '3'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"2\""
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '2'\nassert solution('5 6 3 2') == '3'\nassert solution('4 8 3 2') == '3'\nassert solution('10 20 5 6') == '5'"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '2'\nassert solution('5 4') == '4'\nassert solution('4 4') == '4'\nassert solution('8 5') == '5'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"2\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '2'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 8 8 8') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '2'\nassert solution('1') == '0'\n\n\"\"\""
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"10 3 1 2 1\") == \"1\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '2'"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\nassert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\") == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 4 2 1\n9 -5 6\n5 1 2\n1 4 5\n-4 7 8\n-2 3 4\n''') == '0'\n\nassert solution('''\n1 2 3\n4\n-1\n''') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\nassert solution('''\n1 2\n1 2\n''') == '1'\nassert solution('''\n2 2\n2 2\n''') == '0'\nassert solution('''\n0 1\n0 1\n''') == '1'\n'''\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\n\n'''\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n5 1 5 2 5 -2\n2 3 8 -1 5 7\n10 -4 3 7 8 9\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1\n5 2 -4 4 -3 4 6\n3 4 -4 5 3 5 7\n10 -2 4 8 -3 7 -1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1\n4 2 6 5 5 6\n0 0 0 0 0 0\n5 5 6 6 5 5\n0 4 6 5 6 6\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n10 3 -10 9 2\n0 1 1 1 1 1\n0 0 0 0 0 0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1\n6 0 0 0 0 0\n\"\"\") == \"0\""
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\\n1\\n3\\n\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 7\\n\"\n    \"1 2 1\\n\"\n    \"1 2 3\\n\"\n    \"1 3 2\\n\"\n    \"1 4 1\\n\"\n    \"2 3 4\\n\"\n    \"2 4 4\\n\"\n    \"3 4 4\\n\"\n    \"3\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n) == \"1\\n2\\n3\\n4\""
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '3'\n\nassert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '2'\n\nassert solution('''\n3 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '3'\n\nassert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '3'\n\nassert solution('''\n3 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '1'"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2\\n1 3') == '1'\nassert solution('1 2\\n1 3') == '2'"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\") == \"1\"\nassert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\") == \"2\"\nassert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\") == \"3\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1\\n2\\n3\\n', \"Wrong answer\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 7\") == \"1\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"7 5\") == \"3\"\nassert solution(\"2 4\") == \"4\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\\n2\\n3\\n\"\nprint(solution())"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n') == '1'\nassert solution('4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n') == '2'\nassert solution('8 2\\n1 3 1\\n4 5 4\\n7 8 3\\n2 4 1\\n6 8 5\\n9 7 2\\n5 9 1\\n6 3 2\\n') == '7'\nassert solution('4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n') == '4'\nassert solution('4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n') == '3'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\") == \"1\"\nassert solution(\"10 1\\n1 3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 10\\n\") == \"8\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 3 4 5\n6''') == '3 2 1 5 4 6'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6\n1 5 4 3 2 6\n1 2 5 4 3 6\n''') == '2'\n\nassert solution('''5\n1 5 4 3 2\n1 2 5 4 3\n''') == '1'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2 5 4 3\n1 2 5 4 3\n''') == '2'\n\nassert solution('''\n2\n1 2\n1 2\n''') == '1'\n\n'''\nAnother way to solve this question is to just use the number of distinct integers from the given lists, and then use them as the numbers of proclamations.\n'''\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"6\\n\"\n    \"1 5 4 3 2 6\\n\"\n    \"1 2 5 4 3 6\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 6 2 4 5') == '1 4 2 3 6 5'\nassert solution('5 7 2 6 4 1 3') == '1 3 2 4 5 7'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 2 3 4 5 6') == '1 2 3 4 5 6'\nassert solution('6') == '6'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 3 2 5 4\n5 2 1 3 4\n3 2 1 5 4\n1 2 3 5 4\n''') == '1 2 3 5 4'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 5 4 3 2\n1 2 5 4 3 6''') == '2'\n\n'''\n\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\ns = list(map(int, sys.stdin.readline().strip().split()))\nr = list(map(int, sys.stdin.readline().strip().split()))\n\ns_dict = {s[i]: i for i in range(n)}\nr_dict = {r[i]: i for i in range(n)}\n\nfor i in range(n):\n    if s_dict[r[i]] < s_dict[r[i-1]]:\n        print(i + 1)\n        break\n\nfor i in range(n-1):\n    if r_dict[s[i]] > r_dict[s[i+1]]:\n        print(i + 1)\n        break"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 2 5 4 3 6', \"Expected `1 2 5 4 3 6`\"\nassert solution() == '1 2 5 4 3 6', \"Expected `1 2 5 4 3 6`\"\nassert solution() == '1 2 5 4 3 6', \"Expected `1 2 5 4 3 6`\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '60'\n\nassert solution('''\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '-1'\n\nassert solution('''\n3 1 1 2\n1 1 1 1\n1 1 1 1\n''') == '1'\n\nassert solution('''\n3 1 1 2\n1 1 2 2\n1 1 2 2\n''') == '-1'\n\nassert solution('''\n3 3 1 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '60'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([\n    \"2 1 2\",\n    \"3 2 3\",\n    \"3 3 3\"\n]) == \"3\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '60'\n\nassert solution('''\n3 3 1\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4 2') == '60'\nassert solution('5 4 5') == '-1'\n\"\"\"\nimport sys\n\nclass Solution:\n    def solve(self, n, m, k):\n        # n = num of items\n        # m = num of shops\n        # k = num of required items\n        # I am an honest person I am a very clever person and I know if I get a negative solution\n        # Try all possible combinations of items, and calculate minimum cost to buy all items\n\n        # Do the optimization\n        # if the store can buy the item\n        #   + calculate the cost to buy the item\n        # if not, skip it\n        #     + calculate the cost to buy the knockoff item\n        #     + if the knockoff can be bought\n        #         + calculate the cost to buy the item\n        #     else, do nothing\n        #     + if not, skip it\n        #     + calculate the cost to buy the knockoff item\n        #     + if the knockoff can be bought\n        #         + calculate the cost to buy the item\n        #     else, do nothing\n        #     + if not, skip it\n        #     + calculate the cost to buy the item\n        # else, skip it\n        #     + calculate the cost to buy the knockoff item\n        #     + if the knockoff can be bought\n        #         + calculate the cost to buy the item\n        #     else, do nothing\n        #     + if not, skip it\n        #     + calculate the cost to buy the knockoff item\n        #     + if the knockoff can be bought\n        #         + calculate the cost to buy the item\n        #     else, do nothing\n        #     + if not, skip it\n        #     + calculate the cost to buy the item\n\n        # minimum cost\n        # the knwonoff can be bought\n        # calculate the cost to buy the item\n        # if not, skip it\n        # if not, calculate the cost to buy the knockoff item\n        # if not, calculate the cost to buy the item\n        # minimum cost\n        # calculate the cost to buy the item\n\n        if k == 0 or k > m:\n            return -1\n\n        # knwonoff can be bought\n        # calculate the cost to buy the item\n        dp = [[sys.maxsize for _ in range(m)] for _ in range(n+1)]\n        dp[0][0] = 0\n        # if not, skip it\n        for item_idx in range(1, n):\n            for shop_idx in range(m):\n                if shop_idx == 0:\n                    dp[item_idx][shop_idx] = dp[item_idx-1][shop_idx] + 30\n                elif shop_idx == 1:\n                    dp[item_idx][shop_idx] = dp[item_idx-1][shop_idx] + 50\n                else:\n                    dp[item_idx][shop_idx] = min(\n                        dp[item_idx-1][shop_idx-1] + 10,\n                        dp[item_idx-1][shop_idx] + 20,\n                        dp[item_idx-1][shop_idx-1] + 20)\n        # calculate the cost to buy the item\n        for item_idx in range(n):\n            for shop_idx in range(m):\n                if shop_idx == 0:\n                    dp[item_idx][shop_idx] = dp[item_idx][shop_idx] + 30\n                elif shop_idx == 1:\n                    dp[item_idx][shop_idx] = dp[item_idx][shop_idx] + 50\n                else:\n                    dp[item_idx][shop_idx] = min(\n                        dp[item_idx][shop_idx-1] + 10,\n                        dp[item_idx][shop_idx] + 20,\n                        dp[item_idx][shop_idx-1] + 20)\n\n        # knwonoff can be bought\n        # calculate the cost to buy the item\n        for item_idx in range(n):\n            for shop_idx in range(m):\n                if shop_idx == 0:\n                    dp[item_idx][shop_idx] = dp[item_idx][shop_idx] + 30\n                elif shop_idx == 1:\n                    dp[item_idx][shop_idx] = dp[item_idx][shop_idx] + 50\n                else:\n                    dp[item_idx][shop_idx] = min(\n                        dp[item_idx][shop_idx-1] + 10,\n                        dp[item_idx][shop_idx] + 20,\n                        dp[item_idx][shop_idx-1]"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 2') == '60'\nassert solution('5 5 3') == '-1'\nassert solution('6 6 5') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '60'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 2') == '60'\nassert solution('1 1 1') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 2\") == \"1\"\nassert solution(\"3 3 2\") == \"3\"\nassert solution(\"3 3 1\") == \"2\"\nassert solution(\"1 4 3\") == \"4\"\nassert solution(\"3 4 1\") == \"3\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3 3 2\\n'\n    '1 30 2 50\\n'\n    '2 70 3 10\\n'\n    '3 20 1 80') == '60'\n\nassert solution(\n    '2 2 3\\n'\n    '3 1 1 1') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_data) == \"60\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n''') == 'Case #1: 1\nassert solution('''\n2\n5\n0 0 0\n0 1 0\n0 0 5\n''') == 'Case #2: 2\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"Case #1: 1\\nCase #2: 2\""
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1\n0 0\n1 1\n3\n5 0 0\n0 1000 0\n0 0 2000\n3\n''') == 'Case #1: 1\\nCase #2: 2\\n'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1\\nCase #2: 2\\n'''\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n10000 0 0\n0 10000 0\n0 0 10000\n''') == 'Case #1: 1'\nassert solution('''\n1\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3\n    10000 0 0\n    0 10000 0\n    0 0 10000\n''') == 'Case #1: 1\\nCase #2: 2\\n'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n''') == 'Case #1: 1\nassert solution('''\n2\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #2: 2"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10000 0 0\\n0 10000 0\\n0 0 10000\") == \"Case #1: 1\\nCase #2: 2\"\nassert solution(\"2\\n5000 0 0\\n0 2000 0\\n0 0 4000\") == \"Case #1: 1\\nCase #2: 2\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '6 6 6 1\\n'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '12 12 12 3\\n'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '12 12 12 1\\n'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"6 6 6 1\"\nassert solution(\"\"\"+1 3 H 5\n+1 3 C 1\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"1 3 6 1\"\nassert solution(\"\"\"+1 2 C 3\n+1 2 C 1\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"2 2 6 2\"\nassert solution(\"\"\"+1 2 C 3\n+1 2 C 1\n+1 3 H 5\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"1 2 6 2\"\nassert solution(\"\"\"+1 2 H 3\n+1 2 C 1\n+1 3 H 5\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\"\"\") == \"2 1 6 2\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"-1 1 O 2\\n+1 2 C 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"-1 1 O 2\\n+1 2 C 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '2 3 9 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '1 2 6 1'\n'''"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\\\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\\\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n'''\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"+1 2 H 2 O 1\") == \"6 6 6 1\"\nassert solution(\"-1 1 O 2\") == \"5 6 9 1\"\nassert solution(\"+1 2 C 1 O 2\") == \"4 2 4 1\"\nassert solution(\"-1 3 C 6 H 12 O 6\") == \"2 3 2 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 1 2 H 2 O 1\n-1 1 2 C 1 O 2\n-1 3 2 C 6 H 12 O 6\n0 0\n''') == '5 5 5 2'\nassert solution('''\n+1 6 H 3 O 1\n-1 6 O 3 C 5 H 12 O 6\n-1 3 H 12 O 6\n-1 6 C 5 O 1\n0 0\n''') == '1 2 2 3 3 2'\nassert solution('''\n+1 6 H 3 O 1\n-1 6 O 3 C 5 H 12 O 6\n-1 3 H 12 O 6\n-1 6 C 5 O 1\n0 0\n''') == '1 2 3 1 1 2 1'\nassert solution('''\n+1 6 H 3 O 1\n-1 6 O 3 C 5 H 12 O 6\n-1 3 H 12 O 6\n-1 6 C 5 O 1\n0 0\n''') == '1 2 3 1 1 2 1'\n''')\n\n-----------------------------------------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n10 10\n0 0\n10 10\n3 10\n''') == '8.75'\nassert solution('''\n4\n20 20\n0 0\n20 0\n10 10\n0 0\n10 10\n20 20\n''') == '20.5'\nassert solution('''\n10\n10 10\n20 10\n20 0\n0 20\n0 0\n0 0\n10 10\n''') == '24.0'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '20.83'\nassert solution('10') == '20.83'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n30 50\n20 0\n100 0\n100 40\n20 40''') == '20.83'\n\nassert solution('''3\n20 0\n20 0\n20 0''') == '18.66'\n\nassert solution('''2\n20 0\n20 0''') == '20.0'\n\nassert solution('''1\n0 0''') == '0.0'\n\nassert solution('''4\n100 0\n0 100\n20 0\n100 0\n20 0''') == '20.0'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\nassert solution('4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '21.48'\n\n\"\"\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"20.83\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n30 50\n20 0\n100 0\n100 40\n20 40\n''') == '20.83'\n\nassert solution('''\n2\n1 1\n2 1\n''') == '1.5'\n\nassert solution('''\n3\n10 10\n15 -5\n-25 0\n''') == '20.0'\n\nassert solution('''\n6\n-50 50 50 50 50 50\n-25 0 0 0 0 0\n25 50 50 50 50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n25 0 0 0 0 0\n-50 -50 -50 -50 -50 -50\n''') == '50.0'\n\nassert solution('''\n5\n5 10\n0 0\n15 0\n-5 0\n-15 0\n''') == '20.0'"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n30 50\n20 0\n100 0\n100 40\n20 40\n''') == '20.83'\nassert solution('''\n4\n-30 -50\n-20 0\n100 0\n100 40\n20 40\n''') == '-20.83'\n\n'''\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n30 50\n20 0\n100 0\n100 40\n20 40''') == '20.83'\nassert solution('''5\n30 0\n20 0\n100 0\n100 0\n20 0''') == '21.42'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n2\n0 0\n3 3\n''') == \"6.75\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4\\n\"\n    \"30 50\\n\"\n    \"20 0\\n\"\n    \"100 0\\n\"\n    \"100 40\\n\"\n    \"20 40\\n\"\n) == \"20.83\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4') == '5'\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4') == '6'\nassert solution('1 2 3 4') == '6'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 3\n3 4 5\n6 7 8\n''') == '49'\nassert solution('''\n1 2 3\n4 5 6\n7 8 9\n''') == '49'\nassert solution('''\n10 10\n10 1 5 1\n6 7 8 2\n9 9 5 4\n10 8 5 3\n7 6 9 8\n7 1 2 3\n''') == '53'\nassert solution('''\n10 10\n10 9 8 7\n4 1 2 3\n6 5 9 5\n10 8 5 3\n7 6 9 8\n7 1 2 3\n''') == '30'\nassert solution('''\n10 10\n7 8 5 4\n10 8 5 3\n7 6 9 8\n7 1 2 3\n''') == '17'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3 4\\n5 6') == '49'"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '49'\nassert solution('5 5') == '0'\nassert solution('7 3') == '33'\n\n-----Explanation-----\nIn the first test case, there are no subgrids.\n\nIn the second test case, there are no $1{\\times }1$ subgrids.\n\nIn the third test case, there are $1{\\times }1$ subgrids.\n\nIn this case, the subgrids are:\n\n* 1x1 = $1$\n* 2x1 = $2$\n* 3x1 = $3$\n* 1x2 = $5$\n* 2x2 = $6$\n* 3x2 = $4$\n\nIn the fourth test case, there are $2{\\times }1$ subgrids.\n\nIn this case, the subgrids are:\n\n* 1x1 = $1$\n* 2x1 = $2$\n* 3x1 = $3$\n* 1x2 = $5$\n* 2x2 = $6$\n* 3x2 = $4$\n\n-----Hint-----\nYou need to use the base case ($2^0$) and recurrence relation (see problem description).\n\n\"\"\""
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 5\n7 6 4\n9 8 3\n''') == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 5\\n7 6 4\\n9 8 3') == '49'\nassert solution('4 4\\n1 2 3 4\\n5 1 2 3 4') == '49'\nassert solution('1 1\\n1 1') == '0'\nassert solution('1 3\\n2 4\\n3 3') == '3'\nassert solution('1 1\\n1 2\\n1 3') == '1'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '3'\nassert solution('4 2 3 1') == '4'\nassert solution('4 2 3 1 2') == '4'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 5\n7 6 4\n9 8 3\n''') == '49'\n\"\"\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '49'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3') == '49'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 15') == '##CROSSWORD####'\nassert solution('3 5') == '#####CROSSWORD##'\nassert solution('3 1') == '#####CROSSWORD##'\n\"\"\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 15\n##.........####\n1\nCROSSWORD''') == '##CROSSWORD####'\nassert solution('''1 15\n##.........####\n1\nCROSSWORD\n2\nCROSSWORD\n3\nCROSSWORD''') == '##CROSSWORD####CROSSWORDCROSSWORD####'\nassert solution('''1 15\n##CROSSWORD##\n1\nCROSSWORD\n2\nCROSSWORD\n3\nCROSSWORD''') == '##CROSSWORD##CROSSWORDCROSSWORDCROSSWORD'\nassert solution('''1 25\n###..##..#.####\n1\nCROSSWORD\n2\nCROSSWORD\n3\nCROSSWORD\n4\nCROSSWORD\n5\nCROSSWORD''') == '###..##..#.####CROSSWORDCROSSWORDCROSSWORDCROSSWORDCROSSWORDCROSSWORD'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5\\n' * 4) == '1' * 5\nassert solution('1 1\\n1\\n1\\n1\\n1\\n' * 4) == '1' * 5\nassert solution('10\\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n' * 4) == '1' * 5\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n' * 4) == '1' * 5\n\n'''"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'CROSSWORD'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 15\n##.........####\n1\nCROSSWORD''') == '##CROSSWORD####'\nassert solution('''\n1 10\n    ##.........####\n1\nCROSSWORD''') == '##CROSSWORD####'\n'''\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 4\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 10\\n#.#.#.#\\n###.#.\\n##.#.##\\n######.\\n######.\\n##.###.\\n#.#####\\n#.#.#.#\\n#.###.#\") == \"######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n#.#####\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n######.\\n#.###.#\\n#.#.#.#\\n#.#.#.#\"\n\nprint(solution())"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 15\\n\"\n                \"##.........####\\n\"\n                \"1\\n\"\n                \"CROSSWORD\\n\") == \"##CROSSWORD####\"\n\nassert solution(\"1 1\\n\"\n                \"##\\n\"\n                \"1\\n\"\n                \"CROSSWORD\\n\") == \"##CROSSWORD####\"\n\nassert solution(\"1 15\\n\"\n                \"##.........####\\n\"\n                \"1\\n\"\n                \"CROSSWORD\\n\") == \"##CROSSWORD####\"\n\nassert solution(\"1 15\\n\"\n                \"##.........####\\n\"\n                \"1\\n\"\n                \"CROSSWORD\\n\") == \"##CROSSWORD####\"\n\nassert solution(\"1 1\\n\"\n                \"##\\n\"\n                \"1\\n\"\n                \"CROSSWORD\\n\") == \"##CROSSWORD####\""
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"\"\"##CROSSWORD####\n1\nCROSSWORD\n\"\"\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('\\n'.join(\n    [\n        '1 15',\n        '#.#...#.#',\n        '#.#.#..#',\n        '..#.#.#.',\n        '.#....#.',\n        '#..#....',\n        '#######.'\n    ])) == '#.#####.##.'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1\\n2 7 6\\n9 5 1\\n4 3 8') == '31'\nassert solution('5 1\\n6 1 8\\n6 2 7\\n7 2 6\\n5 3 5\\n7 4 9\\n5 8 1\\n6 2 6\\n2 7 6\\n2 5 3\\n6 3 5\\n2 5 8\\n3 2 3') == '37'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1\\n2 7 6\\n9 5 1\\n4 3 8') == '31'"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3') == '31'\nassert solution('1\\n4\\n7') == '17'\nassert solution('3\\n5\\n1') == '15'\nassert solution('3\\n5\\n3') == '9'\nassert solution('3\\n5\\n5') == '10'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 1\\n\"\n    \"2 7 6\\n\"\n    \"9 5 1\\n\"\n    \"4 3 8\\n\"\n) == \"31\"\nassert solution(\n    \"8 5\\n\"\n    \"4 7 2 1\\n\"\n    \"8 3 6 4 5\\n\"\n    \"2 9 4 5 8\\n\"\n    \"6 7 3 9 1\\n\"\n    \"7 2 3 4 2 5\\n\"\n    \"6 1 5 1 6\\n\"\n    \"4 8 5 3 6\\n\"\n    \"3 8 6 5 4\\n\"\n) == \"16\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2') == \"3\"\nassert solution('6 3') == \"5\"\nassert solution('1 10') == \"15\"\nassert solution('6 4') == \"1\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 2') == '7'\nassert solution('2 2') == '6'\nassert solution('3 2') == '4'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\nassert solution('''\n10 2\n1 7 6\n2 9 5\n3 4 8\n''') == '29'\nassert solution('''\n50 1\n-2 6 9\n8 3 -1\n3 7 5\n''') == '29'\nassert solution('''\n50 2\n5 2 1\n4 2 4\n3 3 2\n''') == '11'"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1\\n2 7 6\\n9 5 1\\n4 3 8\\n') == '31'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n2 2\n3 3\n''') == '4'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '31'\nassert solution('3 1 2 4 5 3 6 7') == '31'\nassert solution('1 2') == '3'\nassert solution('2 2') == '4'\nassert solution('1 2 3 4 5') == '6'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 1]) == '2'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '3 1\\nBWW') == '2'\nassert solution(\n    '3 1\\nBWB') == '1'\nassert solution(\n    '6 2\\nBWBWBWBWBWB') == '3'\nassert solution(\n    '6 1\\nBWBW') == '4'\nassert solution(\n    '6 3\\nBBWWBWBW') == '6'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 1], \"BBW\") == \"2\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2'\nassert solution('5 1') == '4'"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"5 2\") == \"4\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2'\nassert solution('7 1') == '6'\nassert solution('11 3') == '6'\n\"\"\""
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"2\"\n\n'''\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1\\nBBW\\n') == '2'\nassert solution('3 1\\nBBW\\n') == '2'\nassert solution('3 1\\nBBW\\n') == '2'\nassert solution('3 2\\nBBWW\\n') == '1'\nassert solution('3 2\\nBBWW\\n') == '1'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\nBBW\n1\nB''') == '2', f'First Test Case Failed: {solution('''\n1\nBBW\n1\nB''') == \"2\"}\nassert solution('''\n2\nBW\n2\nW''') == '3', f'First Test Case Failed: {solution('''\n2\nBW\n2\nW''') == \"3\"}\nassert solution('''\n3\nBWB\n3\nBWW\n3\nBWBW\n3\nBWBW\n3\nBBWW\n3\nBBWWB\n3\nBBWBB\n3\nBWBWB\n3\nBWBWB\n3\nBWBWB\n3\nBBWWBW\n3\nBBWWBW\n3\nBBWBBW\n3\nBBWBBWB\n3\nBBWBWBW\n3\nBBWBWBW\n3\nBBWBBWBW\n3\nBBWBBWBWB\n''') == '5', f'Second Test Case Failed: {solution('''\n3\nBWB\n3\nBWB\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n3\nBWBW\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 1]) == \"2\"\n\n2\n1\n1\n1\n2\n1\n4\n1\n5\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n1\n4\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1\n3 2 1\n1 2 3''') == '0.556'\nprint('Solution:', solution('''3 1\n3 2 1\n1 2 3'''))\nassert solution('''6 4\n4 1 3 2 3\n2 3 3 1''') == '2.889'\nprint('Solution:', solution('''6 4\n4 1 3 2 3\n2 3 3 1'''))\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0.556\"\nprint(solution())\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1\\n3 2 1\\n1 2 3') == \"0.556\"\nassert solution('10 10\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == \"0.125\"\nassert solution('100 100\\n3 2 1\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '0.556'\nassert solution('3 1') == '0.556'\nassert solution('3 2 1') == '0.556'\nassert solution('1 2 3') == '0.556'\nassert solution('1 2 3') == '0.556'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 1\n3 2 1\n1 2 3\n''') == '0.556'\nassert solution('''\n1\n10\n20\n100\n200\n100\n200\n100\n200\n100\n''') == '0.813'\nprint(solution('''\n1\n3\n'''))\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1\n3 2 1\n1 2 3\n\"\"\") == \"0.556\"\nassert solution(\"\"\"\n3 3\n1 2 1\n1 2 3\n\"\"\") == \"3.000\"\nassert solution(\"\"\"\n6 1\n3 2 1\n1 2 3\n1 3 2\n2 1 1\n1 1 1\n\"\"\") == \"3.000\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1\\n3 2 1') == '0.556'\nassert solution('4 1\\n1 2 1 2\\n2 1 3\\n3 1 4') == '1.000'\nassert solution('2 2\\n2 3 2\\n3 4 2') == '0.000'\nassert solution('2 2\\n2 3 2\\n3 4 2') == '0.000'\nassert solution('10 1\\n5 2 1\\n2 4 1\\n8 7 1\\n3 4 1\\n4 2 1\\n9 4 1\\n1 1 1\\n3 8 1\\n1 5 1\\n2 1 1\\n2 6 1\\n4 4 1\\n6 3 1\\n7 4 1\\n4 1 1\\n2 1 1') == '0.000'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '0.556'\nassert solution('1 2 3') == '0.555'"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2 1\\n1 2 3') == '0.556'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n3 2 1\n1 2 3\n\"\"\") == \"0.556\"\n\nassert solution(\"\"\"\n2\n1 1\n1 1\n\"\"\") == \"0.5\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 4 3 2\n3 3 2 4''') == '3'\nassert solution('''5 4 3 2\n3 2 4 2''') == '2'\nassert solution('''5 4 3 2\n3 1 2 3''') == '1'\nprint(\"All test cases passed.\")"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 3 5') == '3'\nassert solution('4 1 1 2') == '4'\nassert solution('5 5 6 6') == '5'"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4 3 2') == '3'\nassert solution('100 200 100 100') == '30'\nassert solution('4 3 3 2') == '2'\n\"\"\""
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 4 3 2\\n\") == \"3\"\nassert solution(\n    \"4 5 3 2\\n\") == \"3\"\nassert solution(\n    \"10 10 10 10\\n\") == \"4\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 4 3 2\") == \"3\"\nassert solution(\"2 4 3 2\") == \"4\"\nassert solution(\"3 4 3 2\") == \"5\"\nassert solution(\"4 4 3 2\") == \"4\"\nassert solution(\"5 4 3 2\") == \"5\"\n\n----\n'''\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n5 4 3 2') == '3'\nassert solution('4\\n5 4 3 2') == '2'\nassert solution('4\\n5 4 3 2') == '3'\nassert solution('4\\n5 4 3 2') == '2'\nassert solution('4\\n5 4 3 2') == '1'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4 3 2') == '3'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 4 3 2\n0 0 1\n''') == '3'\nassert solution('''\n5 4 3 2\n0 1 0\n''') == '4'\nassert solution('''\n5 4 3 2\n0 0 0\n''') == '5'\nassert solution('''\n5 4 3 2\n0 0 2\n''') == '6'\nassert solution('''\n5 4 3 2\n1 1 1\n''') == '5'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 2 5') == '5'\nassert solution('5 3 3 5') == '5'\nassert solution('5 4 3 2') == '3'\n\n'''"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 4 3 2\n1 2\n1 3\n1 4\n1 5\n''') == \"2\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"13\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 3 6\n2 5 8\n3 3 5\n5 3 6''') == '13'\n\n'''\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 3 6\n2 5 8\n3 3 5\n5 3 6''') == '13'\nassert solution('''6\n0 0 0\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6''') == '18'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == \"13\"\nprint(solution(input))\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 3 6\") == \"13\"\nassert solution(\"2 5 8\") == \"13\"\nassert solution(\"3 3 5\") == \"13\"\nassert solution(\"5 3 6\") == \"13\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == '13'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\n1 3 7\n2 5 6\n3 2 5\n4 5 8\n5 7 1\n6 2 1\n7 2 7\n8 4 3\n9 4 1\n10 3 6\n''') == '13'\nassert solution('''\n10\n1 3 2\n2 4 3\n3 2 2\n4 5 1\n5 2 5\n6 5 2\n7 1 4\n8 5 3\n9 2 7\n10 3 3\n''') == '33'\n'''\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4.00000 5.00000') == '3.00000'\nassert solution('5.00000 1.00000') == '3.00000'\nassert solution('2.00000 1.00000') == '1.00000'\nassert solution('1.00000 1.00000') == '0.00000'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10.000000 20.123456\\n1') == '3.141593'\nassert solution('10.000000 20.123456\\n2') == '0.000000'\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\nclass Graph:\n    def __init__(self, vertex):\n        self.vertex = vertex\n        self.graph = []\n        self.graph_matrix = []\n        self.dist = []\n        self.visited = []\n        self.parent = []\n\n    def addEdge(self, u, v, w):\n        self.graph.append([u, v, w])\n\n    def addWeight(self, u, v, w):\n        self.graph_matrix.append([u, v, w])\n\n    def print_solution(self, dist):\n        print(\"Vertex \\tDistance from Source\")\n        for node in range(self.vertex):\n            print(node, \"\\t\", dist[node])\n\n    def dijkstra(self, src):\n        self.dist = [math.inf] * self.vertex\n        self.dist[src] = 0\n        self.parent = [-1] * self.vertex\n\n        for node in range(self.vertex):\n            min = math.inf\n            u = -1\n\n            for v in range(self.vertex):\n                if self.dist[v] < min and self.graph[v][0]!= node:\n                    min = self.dist[v]\n                    u = v\n\n            if self.dist[u]!= math.inf:\n                self.visited.append(u)\n\n            self.dist[u] = min + self.graph[u][2]\n\n            self.parent[u] = self.graph[u][1]\n\n        self.print_solution(self.dist)\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1.000000 2.000000\n3.000000 2.000000\n4.000000 1.000000\n''') == '3.141593'\nassert solution('''1.000000 2.000000\n3.000000 2.000000\n4.000000 1.000000\n5.000000 1.000000\n6.000000 2.000000\n7.000000 1.000000\n8.000000 2.000000\n9.000000 1.000000\n10.000000 2.000000\n''') == '2.000000'\nassert solution('''1.000000 2.000000\n3.000000 2.000000\n4.000000 1.000000\n''') == '0.000000'\nassert solution('''1.000000 2.000000\n3.000000 2.000000\n4.000000 1.000000\n5.000000 1.000000\n6.000000 2.000000\n7.000000 1.000000\n8.000000 2.000000\n9.000000 1.000000\n10.000000 2.000000\n11.000000 1.000000\n12.000000 2.000000\n13.000000 1.000000\n14.000000 2.000000\n15.000000 1.000000\n16.000000 2.000000\n17.000000 1.000000\n18.000000 2.000000\n19.000000 1.000000\n20.000000 2.000000\n''') == '2.000000'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == \"3.141593\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"3.141593\"\nprint(solution(input()))\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1.000000 20.123456') == '3.141593'\nassert solution('10.000000 20.123456') == '3.141593'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456\\n') == '3.141593'\nprint(solution(input()))\n'''\n\n\nimport math\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        roost = list(map(float,stdin.split()))\n        min_dist = math.inf\n        for i in range(1,len(roost)):\n            temp = abs(roost[0]-roost[i])\n            if temp < min_dist:\n                min_dist = temp\n        return str(min_dist)"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '10.000000 20.123456\\n'\n    '1\\n'\n    '13.141593 20.123456\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    '1.257412 10.125969\\n'\n    "
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2.1111036'\nassert solution('20 20') == '7.3333333'\nassert solution('10.000000 20.123456') == '4.6916667'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2.13333333333333'\nassert solution('5') == 'impossible'\n\n'''\nfrom decimal import *\nimport re\n\nDecimal('0.1') + Decimal('0.1')\nDecimal(10) / Decimal(2)"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('2') == '2.13333333333333'\nassert solution('5') == '3.13333333333333'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2.13333333333333'\nassert solution('6') == '2.068055555555556'\nassert solution('30') == '0.0'\nassert solution('10000') == 'impossible'"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n4 4\n2\n''') == \"2.13333333333333\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"1 1\") == \"1.0\"\nassert solution(\"1 2\") == \"2.0\"\nassert solution(\"1 2 3\") == \"2.0\"\nassert solution(\"1 2 3 4\") == \"3.0\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"impossible\"\nassert solution(\"1\") == \"1.0\"\n\"\"\"\nimport math\n\nn = int(input())\ndists = []\nfor i in range(n - 1):\n    dists.append(int(input()))\n\ncnt = 0\navg = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        # print(dists[i], dists[j])\n        if i < j:\n            avg += math.ceil((dists[i] + dists[j]) / 2)\n        cnt += 1\n\navg = avg / cnt\n\nprint(avg)\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n4 4\n2\n\"\"\") == \"2.13333333333333\"\nassert solution(\"\"\"\n4\n1\n1\n3\n2\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n4\\n2\\n\") == \"2.13333333333333\"\nassert solution(\"3\\n2\\n3\\n\") == \"impossible\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2\n5\n3\n3\n5\n3\n10\n3\n2\n5\n3\n10\n''') == '2.13333333333333'\n\nassert solution('''\n4\n4\n8\n7\n4\n4\n3\n10\n2\n8\n7\n3\n10\n''') == 'impossible'\n\nassert solution('''\n4\n4\n2\n1\n4\n2\n1\n10\n4\n3\n10\n''') == '4.25'\n\nassert solution('''\n4\n4\n4\n2\n2\n2\n1\n2\n10\n3\n3\n4\n3\n3\n10\n''') == 'impossible'\n\nassert solution('''\n4\n4\n4\n2\n4\n4\n1\n2\n10\n3\n3\n4\n3\n3\n10\n''') == 'impossible'"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('7') == '18'"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '36'\nassert solution('4') == '0'\nassert solution('8') == '6'\nassert solution('100') == '1870'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\\n\") == \"1\\n\"\nassert solution(\"10\\n\") == \"32\\n\"\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == '12'\nassert solution('1000000') == '122000000'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7') == '18'"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '18'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '0'\nassert solution('5') == '6'\nassert solution('50') == '32'\nassert solution('250') == '30'\nassert solution('999') == '63'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '35'\nassert solution('100') == '2470'\nassert solution('1000') == '26796'\nassert solution('10000') == '27124'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer''') == '3'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '4'\n\nassert solution('''\n35 M classicism programming\n0 F baroque skiing\n43 F baroque chess\n30 M baroque soccer\n''') == '3'\n\nassert solution('''\n19 M autumn to spring\n1 F autumn\n3 M autumn\n19 M spring\n5 F spring\n3 M autumn\n6 M spring\n''') == '5'\n\nassert solution('''\n12 M autumn to spring\n1 M autumn\n2 F autumn\n1 M spring\n2 F spring\n3 M autumn\n5 M spring\n3 F spring\n''') == '7'\n\nassert solution('''\n31 M autumn to spring\n1 M autumn\n0 M autumn\n2 F autumn\n1 F autumn\n0 F autumn\n3 M autumn\n3 F autumn\n1 F autumn\n2 F autumn\n0 M autumn\n1 M autumn\n1 F autumn\n0 M autumn\n2 F autumn\n0 F autumn\n1 M autumn\n1 F autumn\n0 M autumn\n2 F autumn\n3 F autumn\n2 M autumn\n3 F autumn\n1 F autumn\n2 M autumn\n1 F autumn\n1 M autumn\n0 M autumn\n1 F autumn\n1 F autumn\n2 M autumn\n2 F autumn\n0 M autumn\n2 M autumn\n0 F autumn\n1 F autumn\n2 F autumn\n1 F autumn\n3 M autumn\n0 M autumn\n1 M autumn\n2 F autumn\n2 F autumn\n1 M autumn\n2 F autumn\n''') == '9'"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '3'\n'''"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''0 M baroque skiing\n0 M baroque chess\n0 M baroque hiking\n10 M baroque surfing\n0 M baroque walking\n0 M baroque biology\n10 F baroque surfing\n0 F baroque swimming''') == '4'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"35 M\n0 M\n43 M\n30 F\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n25 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n30 M baroque baseball\n25 F classicism programming\n''') == '3'\nassert solution('''\n35 M classicism programming\n0 F baroque skiing\n43 M baroque chess\n30 F baroque soccer\n30 M baroque baseball\n25 F classicism programming\n''') == '3'\nassert solution('''\n10 M classicism programming\n0 F baroque skiing\n43 M baroque chess\n30 F baroque soccer\n30 M baroque baseball\n25 F classicism programming\n''') == '2'\n\n'''"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '1'\n) == '0'\nassert solution(\n    '2'\n) == '1'\nassert solution(\n    '3'\n) == '2'\nassert solution(\n    '4'\n) == '3'\nassert solution(\n    '5'\n) == '4'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0 M baroque skiing\\n43 M baroque chess\") == \"3\"\nassert solution(\"35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\") == \"3\"\nassert solution(\"0 M baroque skiing\\n0 M baroque chess\\n43 M baroque programming\") == \"3\"\nassert solution(\"35 M classicism programming\\n43 M baroque chess\\n43 M baroque programming\") == \"4\"\n\nimport sys\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\\n') == '3'\nassert solution('5\\n15 M classical music\\n15 M classical music\\n30 M classical music\\n30 F classical music\\n') == '3'\nassert solution('1\\n15 M classical music\\n15 M classical music\\n20 M classical music\\n20 F classical music\\n') == '2'\nassert solution('1\\n15 M classical music\\n15 M classical music\\n20 M classical music\\n20 F classical music\\n') == '1'\nassert solution('10\\n75 M classicism programming\\n85 M classicism programming\\n75 F classicism programming\\n85 M classicism programming\\n75 M classicism programming\\n85 M classicism programming\\n') == '10'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '3'\n''')\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\") == \"2 1\"\nassert solution(\"5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\\ne 2 4\") == \"1 1\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '1\\n2\\n1\\n1\\n1\\n'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1\na 0\na 1\n2\na 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\na 1\nb 2\na 2\nc 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\na 1\na 1\nb 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\nc 1\nc 2\nc 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\na 1\nb 1\na 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"a 1\") == \"1\"\nassert solution(\"a 1\") == \"1\"\nassert solution(\"a 1\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\n\nfor i in range(N):\n    command = stdin.readline().split()\n    if command[0] == 'a':\n        a, b = int(command[1]), int(command[2])\n        print(a - b)\n    elif command[0] == 'b':\n        b, c = int(command[1]), int(command[2])\n        print(b - c)\n    else:\n        a, b, c, d = int(command[1]), int(command[2]), int(command[3]), int(command[4])\n        print(a + b + c + d)"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2\\n1\\n2\\n'"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0\\n2\\n1\") == \"2\\n\"\nassert solution(\"5\\n0\\n1\\n2\\n1\\n3\") == \"1\\n\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2'\nassert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '1'\nassert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2'\nassert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2'\nassert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0\\n1\\n2\\n2 3\\n4\\n') == '2 1'\nassert solution('1\\n1\\n1\\n1 1\\n') == '1'"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    0\n    a 1\n    a 2\n    b 2 3\n    b 4\n''') == '''\n    2\n    1\n    1\n    2\n    2\n'''\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1\\n') == '5'\nassert solution('10 2\\n') == '10'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\") == \"5\"\nassert solution(\"6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\") == \"7\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '5'\nassert solution('''\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '6'\nassert solution('''\n2 5\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '2'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\\n') == '5'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 1') == '5'\nassert solution('13 1') == '6'\nassert solution('50 3') == '5'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'\n\n---\n\nSample Input:\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\nSample Output:\n0\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '5'\nprint(solution('''\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n'''))\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'\nassert solution('1 1\\n') == '0'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'\nassert solution('6\\n1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '1'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"10 10\") == \"2\"\nassert solution(\"10 10 3 4\") == \"2\"\nassert solution(\"11 10 3 4\") == \"2\""
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 2\n1 3\n1 4\n2 3\n2 4\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == '4'\nassert solution('4\\n4') == '0'"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5') == '4'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n\") == \"0\"\nassert solution(\"7 7\\n3 4\\n2 4\\n3 5\\n4 5\\n2 4\\n1 4\\n1 5\\n\") == \"8\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5') == '4'\n\nassert solution('2 2') == '1'\n\nassert solution('1 2') == '0'\n\nassert solution('2 3') == '0'\n\nassert solution('3 4') == '2'"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\nassert solution('2 2\\n1 3\\n1 4\\n2 3\\n2 4') == '0'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '1'\n\nassert solution('1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '5'\n\n\"\"\""
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 2') == '0'\nassert solution('1 3') == '1'\nassert solution('1 4') == '0'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n\") == \"4\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '0'\nassert solution('10\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n5 6\\n5 7\\n5 8\\n6 7\\n6 8\\n7 8\\n') == '1'"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2 4\\n3 4\\n2 4'\nassert solution('3\\n1 2\\n2 3\\n3 4\\n') == '2 4\\n3 4\\n2 4'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2 4'\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n''') == '2 5'\nassert solution('''\n6\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '2 4'\n''')\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2 4\\n3 4\\n2 4'\nassert solution('2\\n1 2\\n2 3\\n3 4\\n') == '2 4\\n3 4\\n2 4'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n1 2\\n2 3\\n3 4\"\n) == \"2 3\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n2 3\\n3 4\") == \"2 3\"\nassert solution(\"6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"2 4\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\\n2 3\\n3 4\\n\") == \"2\\n3 4\\n2 4\"\nassert solution(\"1\\n3 4\\n1 2\\n2 3\\n\") == \"2\\n4 4\\n3 4\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3\\n1 2\\n2 3\") == \"2 4\"\nassert solution(\"4\\n4\\n4\\n3 2\\n2 3\") == \"3 2\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2 3'\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '4 4'\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2 4'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n1 2\n2 3\n3 4''') == '2 4 3'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n2 3\n3 4''') == '2 4'''\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"5\"\nassert solution(stdin=\"3 1\\n2 1\\n3 5\\n7 2\") == \"5\"\nassert solution(stdin=\"2 1\\n3 5\\n7 2\") == \"0\"\nassert solution(stdin=\"2 1\\n3 5\\n7 2\") == \"5\"\nassert solution(stdin=\"2 1\\n3 5\\n7 2\") == \"0\""
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '5'\nassert solution('2 1') == '4'\nassert solution('3 5') == '0'\nassert solution('7 2') == '6'\nassert solution('11 2') == '6'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\nassert solution('''\n2 5\n1 4\n2 1\n4 5\n7 2\n''') == '1'\nassert solution('''\n1 2\n1 3\n2 1\n3 5\n7 2\n''') == '0'\nassert solution('''\n1 5\n1 4\n2 1\n4 5\n7 2\n''') == '0'\nassert solution('''\n1 5\n1 3\n2 1\n3 5\n7 2\n''') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '3'\nassert solution('2 1') == '0'\nassert solution('3 5') == '5'\nassert solution('7 2') == '4'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 3\\n2 1\\n3 5\\n7 2\\n') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '5'"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n') == '2'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2 2 4\n1 1\n1 1\n0 0\n0 1\n1 2\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n3 2 5\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n10 20 2\n1 1\n2 2\n1 3\n1 4\n2 1\n3 2\n3 3\n3 4\n4 5\n5 5\n\"\"\") == \"9\"\nassert solution(\n\"\"\"\n10 20 3\n2 2\n1 2\n4 5\n2 3\n3 4\n4 4\n5 5\n5 5\n\"\"\") == \"9\"\nassert solution(\n\"\"\"\n10 5 7\n1 1\n2 2\n1 3\n3 3\n3 4\n4 4\n4 5\n5 5\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\"\"\") == \"2\"\nassert solution(\"\"\"1 5 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\"\"\") == \"1\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5 3') == '2'\nassert solution('3 5 3') == '3'\nassert solution('10 10 10') == '10'"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n3 1\n4 2\n0 0\n1 3\n2 2\n0 3\n4 4\n0 0\n''') == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 7 2\n1 1\n2 2\n1 3\n0 0\n1 5\n3 4\n3 0\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 5 5\n0 0\n1 1\n0 3\n0 0\n0 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 4 4\n0 0\n1 1\n0 0\n1 0\n1 1\n1 1\n0 0\n\"\"\") == \"1\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 C\\n2 C\\n1 C\\n\") == \"GHOST\"\nassert solution(\"4 3\\n3 C\\n2 C\\n1 C\\n\") == \"SAFE\"\nassert solution(\"1\\n\") == \"SAFE\"\nassert solution(\"1\\n\") == \"SAFE\"\nassert solution(\"1\\n\") == \"SAFE\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 3\n3 C\n2 C\n1 C\n\"\"\") == \"GHOST\""
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4\\n3 C\\n2 C\\n1 C\\n') == 'GHOST'\n\n\"\"\"\n\nstdin = input()\nwires = stdin.split('\\n')\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == 'GHOST'\nassert solution('3 2') == 'SAFE'\nassert solution('5 7') == 'SAFE'\nassert solution('1 1') == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\nCC') == 'GHOST'\nassert solution('4 4\\nCCCCCCCC') == 'SAFE'\nassert solution('4 3\\nCCCCCCCC') == 'SAFE'\n\n\"\"\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3\\n3 C\\n2 C\\n1 C') == 'GHOST'\nassert solution('4 3\\n3 C\\n2 C\\n1 C') == 'SAFE'\nassert solution('4 3\\n3 C\\n2 C\\n1 C') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == 'GHOST'\nassert solution('5 2') == 'SAFE'\nassert solution('100 3') == 'GHOST'\n\"\"\""
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 C\\n2 C\\n1 C\\n') == 'GHOST'\nassert solution('6 3\\n1 1 2 2 2 2\\n3 3\\n5 1\\n2 1\\n3 2\\n') == 'SAFE'\nassert solution('5 3\\n1 1 2 2 2\\n3 3\\n5 1\\n2 1\\n3 2\\n') == 'GHOST'\nassert solution('6 3\\n3 C\\n2 C\\n1 C\\n1 C\\n3 C\\n') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'SAFE'\nassert solution('2') == 'GHOST'\nassert solution('3') == 'SAFE'\nassert solution('4') == 'GHOST'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '5'\nassert solution('5 2.2') == '2.2'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\nassert solution(\"5 0.20\\n1 2.40\\n\") == \"1\"\nassert solution(\"1000 1 1 1 1 1\\n\") == \"1\"\nassert solution(\"1000 1 1 1 1 1\\n\") == \"1\"\nassert solution(\"1000 1 1 1 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '2'\n\nimport math\nfrom typing import List, Tuple\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '2'\nassert solution('0.01 2.00') == '2'\nassert solution('0.01 10.00') == '10'\nassert solution('1 1.00') == '1'\n\nimport math"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_data) == \"2\"\nprint(solution(input_data))"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 3\n0.00 0.01\n''') == '1'\n\nassert solution('''\n1 2\n0.00 0.00\n''') == '2'\n\n'''\n---Solution---\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '2'\nassert solution('100 200') == '200'\nassert solution('1') == 'no fika'\nassert solution('2') == '2'\nassert solution('10') == 'no fika'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0.00 0.00') == '1'\nassert solution('3\\n2.00 4.00') == '3'\nassert solution('3\\n0.00 2.00') == 'no fika'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '2'\nassert solution('2 3.00') == '2'\nassert solution('2 2.00') == 'no fika'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n0.00 2.00\") == \"2\"\nassert solution(\"2 1\\n0.00 2.00\") == \"no fika\"\nassert solution(\"2 2\\n0.00 2.00\") == \"no fika\"\n\n'''\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n1 0\n4 0\n0 0\n0 0\n5 0\n\"\"\") == \"5.0000\"\nassert solution(\"\"\"\n5\n0 0\n10 0\n2\n30 0\n15 0\nSample Output:\n10\n\"\"\") == \"10.0000\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\nassert solution('5\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0') == '100'"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '10'\nassert solution('1') == '1'\nassert solution('2') == '10'\n'''"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"10\"\n\n\"\"\""
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n0 0\n10 0\n2\n30 0\n15 0\n\"\"\") == \"10\"\nassert solution(\"\"\"\n10\n0 0\n30 0\n15 0\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n1\n0 0\n10 0\n1\n\"\"\") == \"10\"\nassert solution(\"\"\"\n1\n10 0\n1 0\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"10.0\"\n\n------------------\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\\n0 0\\n10 0\") == \"10\"\nassert solution(\"2\\n0 0\\n10 0\\n20 10\") == \"10\"\nassert solution(\"2\\n0 0\\n10 0\\n20 10\\n30 20\") == \"10\"\nassert solution(\"2\\n0 0\\n10 0\\n20 10\\n30 20\\n40 20\") == \"10\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '10'\nassert solution('0 0') == '0'\nassert solution('10 0') == '10'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\nassert solution('3\\n0 0\\n10 0\\n20 0\\n15 0') == '20'\nassert solution('3\\n0 0\\n0 0\\n20 0\\n15 0') == '20'\nassert solution('3\\n0 0\\n10 0\\n20 0\\n15 0') == '20'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\nassert solution('1\\n10 5\\n7 4') == '5'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\nW 2 2\nE 2 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1\nW 3 0\nE 3 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\nW 5 0\nW 5 1\nE 17 4\nE 17 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\nW 0 0\nE 2 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1\nW 0 0\nE 0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 2\nW 2 3\nW 8 2\nE 1 3\nSample Input 2:\n4 2\nW 4 0\nW 8 2\nE 4 2\nSample Output 2:\n1\n\n\"\"\") == \"1\""
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n8 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n8 3\nW 10 0\nE 17 4\nE 10 3\n\"\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 2 3 4 5 6 7 8\nE 1 5 6 7\nE 8 4 7\nE 7 6 5\nW 1 7 6\nW 8 5 4\nE 4 7 6\nE 7 1 2\nW 1 7 8\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\n\"\"\") == \"8\"\nassert solution(\"\"\"\n1 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nE 1 1 1 1 1 1 1\nW 1 1 1 1 1 1 1\n\"\"\") == \"13\"\nassert solution(\"\"\"\n0 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nW 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nW 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nW 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nE 0 0 0 0 0 0 0\nW 0 0 0 0 0 0 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 5 1 4\nE 5 1 5\nE 1 2 3\nE 4 5 6\nW 7 8 1\nE 1 1 1\nW 9 7 3\nE 4 2 7\nE 2 7 9\nE 5 1 4\nW 4 3 6\nW 6 6 7\nW 9 7 8\nE 5 3 7\nE 4 5 4\nE 3 2 7\nW 2 5 9\nW 9 9 7\nW 9 7 9\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n6 4\\n3 1 3 2 0\\n') == \"0\"\nassert solution('2\\n2 3\\n1 1 2\\n') == \"1\"\nassert solution('1\\n5 7\\n1 1 2 3 4\\n') == \"1\"\nassert solution('1\\n6 4\\n4 4 4 3 3\\n') == \"1\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 5\nE 2 2\nW 5 0\nE 5 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2\\nW 10 0\\nW 10 3\\nE 17 4\\nW 21 0\\nW 21 3\\nE 17 4\\n') == '0'\nassert solution('5 2\\nW 10 0\\nW 10 3\\nE 17 4\\nW 21 0\\nW 21 3\\nE 17 4\\n') == '1'\nassert solution('5 2\\nW 10 0\\nW 10 3\\nE 17 4\\nW 21 0\\nW 21 3\\nE 17 4\\n') == '2'\nassert solution('5 2\\nW 10 0\\nW 10 3\\nE 17 4\\nW 21 0\\nW 21 3\\nE 17 4\\n') == '3'\nassert solution('5 2\\nW 10 0\\nW 10 3\\nE 17 4\\nW 21 0\\nW 21 3\\nE 17 4\\n') == '4'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4 2\nW 2 0\nW 2 3\nE 16 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 3\nW 10 0\nW 10 3\nE 16 4\nW 17 5\nE 17 8\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 2\nW 10 0\nW 10 3\nE 15 4\nW 16 5\nE 16 8\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n10 5\nW 10 0\nW 10 3\nE 15 4\nW 16 5\nE 16 8\nW 17 7\nE 17 8\nW 18 9\nE 18 10\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n8 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\\n\") == \"3\"\nassert solution(\"5\\n\") == \"1\"\nassert solution(\"5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\\n\") == \"4\"\nassert solution(\"5\\n7\\n8\\n5 6\\n3 4\\n5 13\\n6 10\\n\") == \"2\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n8\n5 6\n3 4\n5 13\n6 10\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n1\n10 10\n5 5\n20 20\n10 10\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\nassert solution('8') == '8'\nassert solution('5 6') == '4'\nassert solution('3 4') == '2'\nassert solution('5 13') == '4'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10') == '3'\nassert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10') == '4'\nassert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10') == '5'\nassert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10') == '4'\nassert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10') == '3'\n\"\"\"\n\nn = int(input())\nw, h = zip(*[map(int, input().split()) for _ in range(n)])\nw.sort(reverse=True)\nh.sort(reverse=True)\n\nanswer = 1\nfor i in range(n):\n    if h[i] < w[i]:\n        answer += 1\nprint(answer)"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\nassert solution('5 8') == '3'\nassert solution('5 6') == '2'\nassert solution('3 4') == '2'\nassert solution('5 13') == '5'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n8\n5 6\n3 4\n5 13\n6 10\n''') == '3'\nassert solution('''\n4\n5 8\n5 6\n3 4\n5 13\n6 10\n''') == '4'\n'''\nThe clue is the round-trip time in seconds it takes Demetrios to visit store 1, then return to his ship. If t = 3 and h = 8, then after the trip, the sea level rises by one foot. So the maximum number of gold stores is at least 3, and the trip is maximum 4 seconds.\n\n''')"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '3'\nassert solution('5 1 2 3') == '4'\nassert solution('5 1 1 2 3') == '4'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '3'\nassert solution('5 8') == '3'\nassert solution('5 6') == '2'\nassert solution('3 4') == '1'\nassert solution('5 13') == '2'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\") == \"3\""
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 1') == 'ABB'\nassert solution('3 3 2') == 'ABBACCC'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"ab\\nba\"\nassert solution(\"4 4\") == \"abb\\nabaa\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"ABCABCABC\", \"should be ABCABCABC\"\nassert solution
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 4\n10 3 3\n''') == 'impossible'\n\nassert solution('''\n3 2\n10 1 3\n''') == 'AB'\n\nassert solution('''\n4 5\n10 1 5 2\n''') == 'CB'\n\nassert solution('''\n3 3\n3 3 3\n''') == 'BC'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 4\") == \"ABC\"\nassert solution
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 4\n5 4 5\n''') == 'impossible'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n10 3 3\") == \"ABACB\"\nassert solution(\"4 5\\n5 1 2\") == \"ABBAA\"\nassert solution(\"4 5\\n5 1 2\") == \"ABBAA\"\n\"\"\""
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2\\n10 3 3') == 'ABC'\nassert solution('4 2\\n10 3 2') == 'BABC'\nassert solution('4 2\\n4 2 4') == 'ABBBB'\nassert solution('4 2\\n10 3 1') == 'ABCABA'\nassert solution('4 2\\n10 2 3') == 'AABBBB'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n10 3 3\n''') == 'impossible'\nassert solution('''\n8 4\n10 3 3 3\n''') == 'ABCABCABC'\nassert solution('''\n8 5\n1 2 3 4 5\n''') == 'ABCDDCDABC'\nassert solution('''\n8 6\n1 2 3 4 5 6\n''') == 'ABCADCDABC'\nassert solution('''\n4 4\n1 3 3\n''') == 'ABBCCDADBC'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2\\n8 6 5') == 'ABCB'\n\nassert solution('12 2\\n8 7 5') == 'CAB'\n\nassert solution('12 1\\n8 7 5') == 'CBA'\n\nassert solution('12 3\\n8 6 5') == 'CBA'\n\nassert solution('12 5\\n8 7 5') == 'ABC'"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''11\n    BETWEEN\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'''\n) == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution(\n    '''13\n    VOWELS\n    BETWEEN\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'''\n) == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution(\n    '''9\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'''\n) == 'SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution(\n    '''5\n    NO\n    VOWELS\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'''\n) == 'NO SHADING AND NO ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution(\n    '''1\n    BETWEEN\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'''\n) == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nprint('All tests passed!')\n''')\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n8\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n\"\"\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\"\"\"\n--- Part Two ---\n\nNow that you've constructed the dictionary, you'd like to make a new message by removing some vowels from the no-vowels message. For this second puzzle, you are given the dictionary and the no-vowels message as input.\n\nGiven an integer $n$ and a dictionary of no-vowels words, which is given in the first line of input, construct the original no-vowels message by removing the vowels. The original message can be constructed from the dictionary by removing the dictionary words. For example, consider the following dictionary and no-vowels message:\n\nNOVIOSHBDAS\n\nThe original message is:\n\nBNOSNHIOSDRSKQFDBSPADZNHTATVIMZNYZ\n\nWrite a single line of code to answer this question.\n\n\"\"\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(\"12\") == \"SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(\"13\") == \"SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\IQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\nBDCDACABC\") == \"BDCDACABC\"\nassert solution(\"1\\nACBD\") == \"ACBD\"\nassert solution(\"3\\n\"\n\"B A\") == \"B A\"\nassert solution(\"3\\n\"\n\"B A\"\n\"C D\") == \"B A\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN''') == 'BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN', \"Wrong answer\"\n''')\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\nassert solution(\"camelcase\") == \"0\"\nassert solution(\"mamamamamamamam\") == \"0\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '12'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\nassert solution(\"abracadabra\") == \"0\"\nassert solution(\"abracadabraabcdefghijklmnopqrstuvwxyz\") == \"4\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abrahellehhelleh') == '12'"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('abrahellehhelleh') == '12'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\nassert solution(\"rachelhellabracadabra\") == \"0\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''abrahellehhelleh''') == '12'\nassert solution('''abracadabra''') == '0'\nassert solution('''axaaxaaxa''') == '0'\nassert solution('''abcdefghijklmnopqrstuvwxyz''') == '40'\nassert solution('''aabbccdd''') == '0'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1\\n1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"65\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"70\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 1 1 1 1 1\n1 2 1 3\n1 3 1 4\n1 4 1 5\n1 5 1 6\n''') == '340'\nassert solution('''\n5\n1 1 1 1 1\n1 2 1 3\n1 3 1 4\n1 4 1 5\n1 5 1 6\n''') == '340'\nassert solution('''\n5\n1 1 1 1 1\n1 2 1 3\n1 3 1 4\n1 4 1 5\n1 5 1 6\n''') == '210'\nassert solution('''\n5\n1 1 1 1 1\n1 2 1 3\n1 3 1 4\n1 4 1 5\n1 5 1 6\n''') == '210'\nassert solution('''\n5\n1 1 1 1 1\n1 2 1 3\n1 3 1 4\n1 4 1 5\n1 5 1 6\n''') == '170'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n15\n1 1 2 1 2 3 1 3 3 2 3 3 3 1 1 1 1 1 2\n''') == '70'\nassert solution('''\n6\n2 2 3 1 1 3 2\n''') == '40'\nassert solution('''\n7\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n''') == '150'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n65\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\nassert solution('''\n14\n3 1 5 1 5 2 4 3 2 2 2 3 2 4 2 3 5 1\n1 1 5 2 4 3 2 2 2 2 3 2 2 2 2 2 3 2 3 2 2 2 2 3 2 3 2 2 2 3 2 2 2 2 2 3 2 3 2 2 2 2 2 3 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n10\n7\n8\n7\n''') == '7'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '12'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '7'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '6'\n'''\nimport sys\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 5') == '10'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"10\"\nassert solution(input) == \"7\""
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"10\") == \"10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"10\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n10\n''') == '7'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n10\n''') == '8'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n10\n''') == '7'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n10\n''') == '8'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n10\n''') == '7'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '7'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '8'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"7\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"8\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"7\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"8\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '10\\n7\\n8\\n7\\n'\nassert solution('''6 5\n1 2 3 4 5 6\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '6\\n8\\n'\n\nassert solution('''10 2\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '12\\n8\\n'\n\nassert solution('''9 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n1 4\n1 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n'''\n\nassert solution('''3 5\n1 2 3 4 5\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '3\\n5\\n'"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 5\") == \"7\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"7\"\nassert solution(\"0 1\") == \"8\"\nassert solution(\"0 4\") == \"7\"\nassert solution(\"1 4\") == \"8\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('10 10 10') == '20'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1''') == '6'\nassert solution('''2 2 1\n-2 1\n-1 -2\n1 0\n2 1\n2 2''') == '1'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('1 2') == '2'\nassert solution('4 2') == '2'"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '6'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('3 4 5') == '2'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1''') == '6'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4 7\") == \"6\"\nassert solution(\"-2 0\") == \"0\"\nassert solution(\"0 -1\") == \"0\"\nassert solution(\"-2 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 7\\n-2 0\\n0 -1') == '6'\nassert solution('2 4 7\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1') == '5'\nassert solution('2 4 7\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n3 4\\n4 -1') == '4'\nassert solution('2 4 7\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n3 4\\n4 -1\\n4 5\\n5 -1') == '4'\nassert solution('2 4 7\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n3 4\\n4 -1\\n4 5\\n5 -1\\n5 6\\n6 -1') == '4'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\"\n) == \"6\"\nassert solution(\n    \"1\\n3\\n-1\\n\"\n) == \"1\"\nassert solution(\n    \"1\\n1\\n1\\n\"\n) == \"2\"\nassert solution(\n    \"5\\n0\\n1\\n2\\n3\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('1') == '1'\nassert solution('2 4 7') == '6'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 4 40') == '3'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '3'\nassert solution('1 0.00001 1 1') == '3'\nassert solution('1 0.001 1 1') == '2'\nassert solution('1 0.5 1 1') == '4'\nassert solution('1 0.0000001 1 1') == '2'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    3\n    1\n    4\n    40\n''') == '3'\nassert solution('''\n    3\n    1\n    4\n    42\n''') == '4'\nassert solution('''\n    3\n    1\n    3\n    63\n''') == '3'\nassert solution('''\n    3\n    1\n    2\n    3\n''') == '3'\nassert solution('''\n    1\n    3\n    4\n    2\n''') == '2'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 4 40') == '3'\nassert solution('1.1 1.4 40') == '3'\nassert solution('3 3.4 5') == '4'\nassert solution('3.3 4.5 5') == '4'\nassert solution('3.3 4.5') == '3'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 4 40') == '3'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 4 40') == '3'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 4 40') == '3'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\n1 4\n40\n\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1 4\n''') == '3'\n\nassert solution('''\n2 1 4\n''') == '2'\n\nassert solution('''\n3 1 1\n''') == '2'\n\nassert solution('''\n3 1 0.4\n''') == '1'\n\nassert solution('''\n3 1 0.1\n''') == '2'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 1 4 40\n\"\"\") == \"3\"\nassert solution(\"\"\"4.1 1 4 40\n\"\"\") == \"2\"\nassert solution(\"\"\"40 1 4 3\n\"\"\") == \"4\"\nassert solution(\"\"\"40 1 3 3\n\"\"\") == \"3\"\nassert solution(\"\"\"3 1 1.1 4 40\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"5 10 20 -5 5 2\") == \"20\"\nassert solution(\"10 -10 10 -20 -5 5 2\") == \"10\""
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n0 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '0'"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99'\nassert solution('4 2\\n2 5 1 5\\n0 1 1 0\\n1 0 1 1\\n0 0 0 0') == ''\nassert solution('3 3\\n10 20 -1\\n10 20 -1\\n20 10 -1') == '2'\nassert solution('2 5\\n0 0\\n-1\\n10 10\\n-1\\n-1\\n0 -1\\n-1\\n-1') == '0'\nassert solution('3 5\\n1 6 0\\n0 7 1\\n5 0 2\\n1 3 3\\n2 4 2\\n-1\\n0 5\\n0 4\\n2 3\\n1 5\\n3 4') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n1 0 1\n2 5 0\n0 3 -1\n''') == ''\nassert solution('''\n1 1 1\n1 1 1\n1 1 1\n''') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\n\n'''\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\n\nassert solution('''\n1 2 3\n1 1 1\n1 2 1\n1 3 1\n''') == '3'\n\nassert solution('''\n3 4 6\n2 4 1\n1 3 1\n3 1 1\n''') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\nassert sorted(solution()) == sorted([])\nassert sorted(solution('')) == sorted([])\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n\"\"\") == \"99\"\nassert solution(\n\"\"\"\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n3 352\n93 8\n92 76\n99\n0\n70\n66\n71\n97\n0\n76\n0\n87\n66\n74\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n3\n3\n93\n82\n44\n44\n99\n0\n70\n66\n71\n97\n0\n76\n0\n87\n66\n74\n\"\"\") == \"44\"\nassert solution(\n\"\"\"\n2\n2\n99\n0\n0\n0\n0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == ''\nassert solution('''\n3 352\n0 83 89 41 77 58 63 94 69 32 92 77 93 69 38 65 77 58 63 94 77 41 31 32 93 69 29 34 71 58 58 30 71 89 81\n62 96 44 75 21 55 41 38 45 75 21 55 41 38 45 75 21 55 41 38 45 75 21 55 41 38 45 75 21 55 41 38 45 75 21\n''') == '99'\nassert solution('''\n3 352\n0 83 89 41 77 58 63 94 69 32 92 77 93 69 38 65 77 58 63 94 77 41 31 32 93 69 29 34 71 58 58 30 71 89 81\n62 96 44 75 21 55 41 38 45 75 21 55 41 38 45 75 21 55 41 38 45 75 21 55 41 38 45 75 21 55 41 38 45 75 21\n63 94 69 32 92 77 93 69 38 65 77 58 63 94 77 41 31 32 93 69 29 34 71 58 58 30 71 89 81\n''') == '99'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n') == '99'\nprint(solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''')) == '99'\nassert solution('2 2\\n0 1\\n0 0\\n0 1\\n') == '0'\nprint(solution('''\n2 2\n0 1\n0 0\n0 1\n''')) == '0'\nassert solution('1 2\\n0 0\\n1 0\\n') == '0'\nprint(solution('''\n1 2\n0 0\n1 0\n''')) == '0'\nassert solution('2 2\\n0 0\\n0 1\\n') == '0'\nprint(solution('''\n2 2\n0 0\n0 1\n''')) == '0'\nassert solution('3 2\\n0 0\\n0 0\\n') == '0'\nprint(solution('''\n3 2\n0 0\n0 0\n''')) == '0'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '2\\n4\\n3\\n1\\n'"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '2'\nassert solution('7') == '2'\nassert solution('11') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4') == '2 3'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2') == '2\\n3 4'\nassert solution('3\\n2 3\\n1 2\\n1 3') == '2\\n2 3'\nassert solution('5\\n3 1 2\\n3 2 4\\n2 4 5\\n4 5 2\\n3 4 6') == '3\\n4 5 2'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2 4\\n3 4\\n'\n\"\"\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2\\n3 4\\n4 2\\n'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2 3\\n4 2'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4 2 3 4\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n2\\n3') == '9.0'\nassert solution('2\\n1\\n2\\n3') == '12.00000'\nassert solution('2\\n3\\n2\\n1') == '12.00000'\nassert solution('3\\n1\\n2\\n3') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\\n\") == \"9.0000\"\nassert solution(\"4\\n2 3\\n3 2\\n4 1\\n\") == \"12.00000\"\nassert solution(\"4\\n3 2\\n2 1\\n4 1\\n\") == \"12.00000\"\nassert solution(\"4\\n2 3\\n4 1\\n\") == \"9.0\""
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '9.0000'\nassert solution('1 1') == '9.0000'\nassert solution('2 2') == '12.00000'\nassert solution('3 2') == '12.00000'\nassert solution('4 1') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"10.0\"\nprint(solution(open(\"input.txt\")))\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n2 3\\n3 4\") == \"9.0000\"\nassert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\") == \"12.00000\"\nprint(\"Solution = OK\")\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1\\n2 2\\n3 2\\n4 1\\n') == '9.0000'"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n2 2\n3 2\n4 1\n''') == \"9.0000\"\nassert solution('''\n4\n1 1\n2 2\n3 2\n4 1\n''') == \"12.00000\"\nassert solution('''\n5\n1 1\n2 2\n3 2\n4 2\n5 1\n''') == \"12.00000\"\n''')\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n1\n2\n3\n''') == '9.0000'\nassert solution('''4\n1 1\n2 2\n3 2\n4 1\n''') == '12.00000'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n2 2\n3 2\n4 1\n''') == '9.0'\nassert solution('''\n1 1\n2 2\n3 2\n4 1\n5 2\n6 1\n7 2\n8 3\n9 4\n10 3\n11 3\n12 2\n13 1\n14 3\n15 2\n16 3\n17 1\n18 2\n19 1\n20 3\n21 3\n22 3\n23 2\n24 3\n25 2\n26 1\n27 2\n28 3\n29 2\n30 1\n31 2\n32 2\n33 2\n34 2\n35 2\n36 1\n37 2\n38 2\n39 2\n40 3\n41 3\n42 2\n43 2\n44 3\n45 2\n46 2\n47 2\n48 3\n49 3\n50 3\n51 2\n52 3\n53 2\n54 2\n55 2\n56 3\n57 3\n58 2\n59 3\n60 3\n61 2\n62 2\n63 2\n64 3\n65 3\n66 2\n67 2\n68 3\n69 2\n70 2\n71 3\n72 2\n73 2\n74 3\n75 2\n76 2\n77 2\n78 3\n79 2\n80 3\n81 2\n82 3\n83 2\n84 3\n85 2\n86 2\n87 2\n88 2\n89 2\n90 2\n91 2\n92 2\n93 2\n94 2\n95 2\n96 3\n97 3\n98 3\n99 3\n100 3\n101 2\n102 3\n103 2\n104 3\n105 2\n106 3\n107 2\n108 3\n109 2\n110 3\n111 3\n112 3\n113 3\n114 3\n115 3\n116 3\n117 3\n118 3\n119 3\n120 3\n121 3\n122 3\n123 3\n124 3\n125 3\n126 3\n127 3\n128 3\n129 3\n130 3\n131 3\n132 3\n133 3\n134 3\n135 3\n136 3\n137 3\n138 3\n139 3\n140 3\n141 3\n142 3\n143 3\n144 3\n145 3\n146 3\n147 3\n148 3\n149 3\n150 3\n151 3\n152 3\n153 3\n154 3\n155 3\n156 3\n157 3\n158 3\n159 3\n160 3\n161 3\n162 3\n163 3\n164 3\n165 3\n166 3\n167 3\n168 3\n169 3\n170 3\n171 3\n172 3\n173 3\n174 3\n175 3\n176 3\n177 3\n178 3\n179 3\n180 3\n181 3\n182 3\n183 3\n184 3\n185 3\n186 3\n187 3\n188 3\n189 3\n190 3\n191 3\n192 3\n193 3\n194 3\n195 3\n196 3\n197 3\n198 3\n199 3\n200 3\n201 3\n202 3\n203 3\n204 3\n205 3\n206 3\n207 3\n208 3\n209 3\n210 3\n211 3\n212 3\n213 3\n214 3\n215 3\n216 3\n217 3\n218 3\n219 3\n220 3\n221 3\n222 3\n223 3\n224 3\n225 3\n226 3\n227 3\n228 3\n229 3\n230 3\n231 3\n232 3\n233 3\n234 3\n235 3\n236 3\n237 3\n238 3\n239 3\n240 3\n241 3\n242 3\n243 3\n244 3\n245 3\n246 3\n247 3\n248 3\n249 3\n250 3\n251 3\n252 3\n253 3\n254 3\n255 3\n256 3\n257 3\n258 3\n259 3\n260 3\n261 3\n262 3\n263 3\n264 3\n265 3\n266 3\n267 3\n268 3\n269 3\n270 3\n271 3\n272 3\n273 3\n274 3\n275 3\n276 3\n277 3\n278 3\n279 3\n280 3\n281 3\n282 3\n283 3\n284 3\n285 3\n286 3\n287 3\n288 3\n289 3\n290 3\n291 3\n292 3\n293 3\n294 3\n295 3\n296 3\n297 3\n298 3\n299 3\n300 3\n301 3\n302 3\n303 3\n304 3\n305 3\n306 3\n307 3\n308 3\n309 3\n310 3\n311 3\n312 3\n313 3\n314 3\n315 3\n316 3\n317 3\n318 3\n319 3\n320 3\n321 3\n322 3\n323 3\n324 3\n325 3\n326 3\n327 3\n328 3\n329 3\n330 3\n331 3\n332 3\n333 3\n334 3\n335 3\n336 3\n337 3\n338 3\n339 3\n340 3\n341 3\n342 3\n343 3\n344 3\n345 3\n346 3\n347 3\n348 3\n349 3\n350 3\n351 3\n352 3\n353 3\n354 3\n355 3\n356 3\n357 3\n358 3\n359 3\n360 3\n361 3\n362 3\n363 3\n364 3\n365 3\n366 3\n367 3\n368 3\n369 3\n370 3\n371 3\n372 3\n373 3\n374 3\n375 3\n376 3\n377 3\n378 3\n379 3\n380 3\n381 3\n382 3\n383 3\n384 3\n385 3\n386 3\n387 3\n388 3\n389 3\n390 3\n391 3\n392 3\n393 3\n394 3\n395 3\n396 3\n397 3\n398 3\n399 3\n400 3\n401 3\n402 3\n403 3\n404 3\n405 3\n406 3\n407 3\n408 3\n409 3\n410 3\n411 3\n412 3\n413 3\n414 3\n415 3\n416 3\n417 3\n418 3\n419 3\n420 3\n421 3\n422 3\n423 3\n424 3\n425 3\n426 3\n427 3\n428 3\n429 3\n430 3\n431 3\n432 3\n433 3\n434 3\n435 3\n436 3\n437 3\n438 3\n439 3\n440 3\n441 3\n442 3\n443 3\n444 3\n445 3\n446 3\n447 3\n448 3\n449 3\n450 3\n451 3\n452 3\n453 3\n454 3\n455 3\n456 3\n457 3\n458 3\n459 3\n460 3\n461 3\n462 3\n463 3\n464 3\n465 3\n466 3\n467 3\n468 3\n469 3\n470 3\n471 3\n472 3\n473 3\n474 3\n475 3\n476 3\n477 3\n478 3\n479 3\n480 3\n481 3\n482 3\n483 3\n484 3\n485 3\n486 3\n487 3\n488 3\n489 3\n490 3\n491 3\n492 3\n493 3\n494 3\n495 3\n496 3\n497 3\n498 3\n499 3\n500 3\n501 3\n502 3\n503 3\n504 3\n505 3\n506 3\n507 3\n508 3\n509 3\n510 3\n511 3\n512 3\n513 3\n514 3\n515 3\n516 3\n517 3\n518 3\n519 3\n520 3\n521 3\n522 3\n523 3\n524 3\n525 3\n526 3\n527 3\n528 3\n529 3\n530 3\n531 3\n532 3\n533 3\n534 3\n535 3\n536 3\n537 3\n538"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 2') == '9.00000'\nassert solution('1\\n1 1') == '9.00000'\nassert solution('1\\n1 1\\n1 1') == '9.0'\nassert solution('2\\n1 1\\n2 2') == '12.00000'\nassert solution('3\\n1 1\\n2 2\\n3 2') == '12.00000'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n'\nassert solution('00') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n'\n\"\"\""
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"DI 1\"\nassert solution(\"255\") == \"DI 1\"\nassert solution(\"4\") == \"DI 1\"\nassert solution(\"8\") == \"DI 1\"\nassert solution(\"11\") == \"DI 1\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n'\nassert solution('-1') == 'ST X\\nPH X\\nDI X\\n'\nassert solution('0') == 'ST X\\nST X\\nDI X\\n'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n') == 'DI'\nassert solution('2\\n') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\n'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"ST A\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\nassert solution(\"100\") == \"ST A\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\n\n\"\"\""
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'DI A'\nassert solution('2') == 'ST A'\nassert solution('3') == 'AD'\nassert solution('4') == 'DI A'\nassert solution('5') == 'DI X'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'DI Y\\n'\n\"\"\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'ST A\\nPH A\\nPH X\\nAD\\nDI X\\n'\nassert solution('6') == 'ST A\\nST X\\nST Y\\nPH A\\nPH X\\nPH Y\\nAD\\nDI X\\nDI Y\\nDI Y\\n'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'AD'\nassert solution('2') == 'ST Y'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5 6\") == \"2\"\nassert solution(\"2 2 1\") == \"1\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\") == \"2\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000') == '2'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 6') == '2'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 10 10') == '1'\nassert solution('1 1 1') == '1'\nassert solution('10 1 1') == '10'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 1 1') == '1'"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\") == '2'"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 100 1') == '1'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == '2'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\n\n'''\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\nprint(solution('''\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n'''))"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == \"abaaba\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \"\"\") == \"abaaba\"\nassert solution(\"\"\"5\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \"\"\") == \"NONE\"\nassert solution(\"\"\"5\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \"\"\") == \"a\"\nassert solution(\"\"\"5\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \"\"\") == \"a\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\nNONE\nabaaba\nNONE\nabbbbbbbbbbbbbbbbba\na\n''') == 'abaabaabbbbbbbbba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nnone on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n') == 'NONE'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nNONE\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nNONE\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n') == 'NONE'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nNONE\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n') == 'NONE'\n'''\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == \"abaaba\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('\\n'.join([\n    'S -> aSa',\n    'S -> bSb',\n    'S -> a',\n    'S -> b',\n    'S -> ',\n    'S -> ',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> ',\n    'S -> ',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    'S -> a',\n    'S -> b',\n    '"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome''') == 'abaaba'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"6\""
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\nassert solution('4\\n10 10 0 2\\n1 3 7\\n2 0\\n4\\n') == '12'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '4'\nassert solution('''\n4\n0 0 1 1\n1 1 1 1\n2 1 1 1\n1 1 1 1\n''') == '0'\nassert solution('''\n4\n4 2 2 3\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '5'\nassert solution('''\n4\n4 5 2 2\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '2'\nassert solution('''\n5\n4 0 2\n1 3 7\n2 0\n4\n''') == '5'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n\") == \"4\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2 3 4\\n4 5 3 6\\n0 0') == '1'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 0') == '2'\nassert solution('100\\n1 2 3 4 5 6 7 8 9 10\\n0 0') == '2'\nassert solution('5\\n2 3 1 0 5\\n0 0') == '1'\nassert solution('5\\n2 3 1 0 5\\n0 0') == '2'\n\n'''"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '1'\nassert solution('5') == '4'\nassert solution('8') == '6'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\ndisparity = 0\nfor i in range(n):\n    disparity = max(disparity, abs(a[i] - b[i]))\n\nprint(disparity)"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n1\\n4\\n') == '2'\nassert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n1 3\n3 2\n''') == '4', 'wrong'\nassert solution('''5\n4 5 0 2\n1 3 7\n2 0\n4\n3 2\n''') == '4', 'wrong'\nassert solution('''5\n5 5 0 2\n1 3 7\n2 0\n4\n3 2\n''') == '3', 'wrong'"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'GO FOR IT', \"First\"\nassert solution('4 4') == 'NO WAY', \"Second\"\n\n-- Python cases --\n\n```python\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == \"GO FOR IT\"\nassert solution('2 4') == \"SUCCESS\"\nassert solution('2 6') == \"GO FOR IT\"\nassert solution('2 7') == \"NO WAY\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\"\nassert solution(\"5 3\") == \"SUCCESS\"\nassert solution(\"3 2\") == \"NO WAY\"\nassert solution(\"5 5\") == \"SUCCESS\"\nassert solution(\"3 3\") == \"NO WAY\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == 'GO FOR IT'\nassert solution('2 10\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == 'NO WAY'\nassert solution('2 11\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG') == 'NO WAY'\nassert solution('2 20\\n4 4\\nWWWWWWWWWWWWWW\\nWSBB\\nWWWWWWWWWWWWWW\\nWBWG') == 'NO WAY'\nassert solution('2 100\\n4 4\\nWWWWWWWWWWWWWWWW\\nWSBB\\nWWWWWWWWWWWWWWWW\\nWBWG') == 'NO WAY'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\") == \"GO FOR IT\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWBWG\\n\") == \"NO CHANCE\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWBWG\") == \"NO WAY\"\n\"\"\""
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n4 4\\nWWWW\") == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\nWWWW\nWSBB\nWWWW\nWBWG\n''') == \"GO FOR IT\"\nassert solution('''\n3 2\n2 2\nSWSW\n''') == \"NO CHANCE\"\nassert solution('''\n5 5\nSBBG\nSWSWS\nSWSWS\nSBSB\n''') == \"GO FOR IT\"\nassert solution('''\n1 1\nS\n''') == \"SUCCESS\"\nassert solution('''\n1 1\nG\n''') == \"NO CHANCE\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"GO FOR IT\"\nassert solution(\"2 2\") == \"GO FOR IT\"\nassert solution(\"3 3\") == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\"\nassert solution(\"5 10\") == \"NO WAY\"\nassert solution(\"4 4\") == \"NO CHANCE\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW') == 'GO FOR IT'\nassert solution('2 3\\n4 4\\nWBWG\\nWSBB\\nWWWW') == 'NO WAY'\nassert solution('1 2\\n3 2\\nBBB\\nWWW\\nBBB') == 'SUCCESS'\nassert solution('5 5\\n5 5\\nBBBBBBBBBB\\nBBBBBBBBBB\\nBBBBBBBBBB') == 'NO WAY'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''3 6\n5 5 9\n''') == '16'\nassert solution('''3 3\n4 4 4\n''') == '0'\nassert solution('''2 2\n2 1 1\n''') == '1'\nassert solution('''1 1\n1 1\n''') == '1'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 900\") == \"2243\"\nassert solution(\"4 900 100\") == \"2243\"\nassert solution(\"4 900 100 200\") == \"2243\"\nassert solution(\"4 900 100 200 300\") == \"2243\"\nassert solution(\"4 900 100 300 200\") == \"2243\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == \"2243\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''\n5 200\n900 1200 600 900 1200\n''') == '1900'\n'''"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''\n5 100\n10 40 30 10 10\n''') == '1232'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == '2243'"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 900\n800 700 400 300 200\n\"\"\") == \"2243\"\nassert solution(\"\"\"\n10 4\n1 2 5 1 3 2 5 2 3\n\"\"\") == \"10\"\nassert solution(\"\"\"\n10 4\n1 2 3 2 3 2\n\"\"\") == \"12\"\nassert solution(\"\"\"\n5 20\n8 7 12 7 4\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n900\\n800 700 400 300 200') == '2243'\nassert solution('2\\n200\\n900\\n800 700 400 300 200') == '1900'\nassert solution('1\\n300\\n200\\n900\\n800 700 400 300 200') == '1902'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == '2243', f\"Wrong result for '{input}'\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\") == \"2243\"\nassert solution(\"4 0\") == \"0\"\nassert solution(\"4 100\\n800 700 400 300 200\") == \"2243\"\nassert solution(\"3 1\\n2 1 1\") == \"2\"\nassert solution(\"2 4\\n5 4 1 1\") == \"3\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == 'yes\\nyes\\nno\\nno\\n'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"yes\\nyes\\n\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3\n''') == 'yes\\nyes\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\n'''\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'no\\nyes\\nno\\n'\nassert solution('10 10') == 'yes\\nyes\\nyes\\n'\nassert solution('1 3') == 'yes\\n'\nassert solution('2 5') == 'no\\n'\nassert solution('3 10') == 'no\\n'\n\"\"\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3') == 'no'\nassert solution('20 1\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3') == 'yes'"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3\n''') == 'yes\\n'\nassert solution('''\n5 3\n? 1 2\n= 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n? 3 2\n= 2 8\n? 1 2\n= 2 8\n? 2 2\n= 2 8\n? 1 2\n= 2 8\n?"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5 4\n? 1 2\n= 1 4\n= 2 4\n? 2 3\n= 2 4\n= 3 4\n? 1 3\n= 1 4\n= 3 4\n?\"\"\") == \"yes\\nno\""
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n') == 'yes'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4\\n? 1 3') == 'no'\nassert solution('2 2\\n= 1 3') == 'yes'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4\\n? 1 3\\n= 1 8\\n? 1 3\\n') == 'no\\nyes'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n10 5 4 8 3''') == '2'\nassert solution('''10 8\n1 1 3 1 9 8''') == '3'\n''')\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '2'\nassert solution('1 2') == '1'\nassert solution('5 1 2') == '1'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n10 5 4 8 3\") == \"2\"\nassert solution(\"5 3\\n1 2 4 5 6\") == \"4\"\nassert solution(\"5 3\\n1 2 3 4 5 6\") == \"0\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 2 3') == '0'\nassert solution('10 5 4 8 3') == '2'\nassert solution('1 2 3 4 5 6 7 8') == '0'\nassert solution('5 5 5 5 5 5 5 5 5') == '1'\nassert solution('20 7 5 1 9 5 2 5 5 9 5 5 2 5 5') == '4'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '2'\nassert solution('10 5 4 8 3') == '1'\nassert solution('1000000000 3') == '2'\nprint('Congratulations, done!')\nInput:\n3 3\n1 2 3\nOutput:\n0\n\nInput:\n2 1\n1 2\nOutput:\n1\n'''\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '2'\nassert solution('6 4') == '1'\nassert solution('3 3') == '1'\nassert solution('6 3') == '1'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n10 5 4 8 3\n''') == '2'\n'''\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n10 5 4 8 3\") == \"2\"\nassert solution(\"20 1\\n6 7 5 9 1\\n\") == \"0\"\nassert solution(\"1 3\\n7 5 9 1\\n\") == \"0\"\nassert solution(\"2 4\\n7 8 5 1\\n\") == \"1\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == '2'\nassert solution('5 5 5 5 5\\n10 10 10 10 10') == '1'\n'''\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 127\") == \"1083\""
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 127') == '1083'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 127\") == \"1083\"\n\n\"\"\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 127\") == \"1083\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1'\nassert solution('1') == '1'\nassert solution('6') == '6'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1083\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 127') == '1083'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 127') == '1083'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 1\n''') == '10'\nassert solution('''\n4 1\n''') == '10'\nassert solution('''\n5 1\n''') == '10'\nassert solution('''\n5 1\n''') == '10'\nassert solution('''\n1 1\n''') == '0'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 7') == '1081'\nassert solution('1 1000') == '1083'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?\"\n) == \"2.0000000000\"\n\n'''\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\n'''\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 4\\n\"\n    \"How much is 6 times 9? 42\\n\"\n    \"How much is 9 times 6? 42\\n\"\n    \"Is there intelligent life on Earth? Probably\\n\"\n    \"What is the air speed velocity of an unladen swallow? African?\") == \"2.0\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2.0000000000'\nassert solution('20\\nWhat is the air speed velocity of an unladen swallow? African?') == '-2.0000000000'\nassert solution('10\\nHow much is 9 times 6? 42\\nHow much is 6 times 9? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '3.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '2.0'\nassert solution('5 5') == '0.5'\nassert solution('0 0') == '0.5'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4') == '2.0000000000'\nassert solution('0 0') == '0.0000000000'\nassert solution('1') == '1.0000000000'\n\"\"\""
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"2.0000000000\"\nassert solution(\"5 1\") == \"2.0000000000\"\nassert solution(\"5 1000\") == \"3.0\"\nassert solution(\"5 10000\") == \"3.0000000000\"\nassert solution(\"5 100000\") == \"3.0000000000\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4') == '2.0000000000'\nassert solution('5 5') == '3.000000119'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4') == '2.0000000000'\nassert solution('1 1') == '1.0'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '2.0000000000'\nassert solution('2') == '2.0000000000'\nassert solution('3') == '2.0000000000'\nassert solution('4') == '2.0000000000'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 6') == 'IMPOSSIBLE'\nassert solution('5 2') == 'POSSIBLE'\nassert solution('5 10') == 'POSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"3 6\") == \"POSSIBLE\"\nassert solution(\"3 2\") == \"POSSIBLE\"\nassert solution(\"2 4\") == \"POSSIBLE\"\nassert solution(\"3 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 6\") == \"IMPOSSIBLE\"\nassert solution(\"1 2\") == \"POSSIBLE\""
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'IMPOSSIBLE'\nassert solution('''3 5\nmonkey 2\nlion 3\nmonkey 1\npenguin 1\npenguin 2''') == 'POSSIBLE'\nassert solution('''3 5\nmonkey 2\nlion 3\nmonkey 1\npenguin 1\npenguin 2\npenguin 3''') == 'FALSE ALARM'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 6\\n\"\n    \"monkey 2 lion penguin\\n\"\n    \"lion 3 monkey penguin lion\\n\"\n    \"penguin 1 monkey\\n\"\n) == \"POSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\nmacro 2 micro\\n\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3 6\n    monkey 2 lion penguin\n    lion 3 monkey penguin lion\n    penguin 1 monkey\n    ''') == 'POSSIBLE'\nassert solution('''\n    3 6\n    monkey 2 lion penguin\n    lion 3 monkey penguin lion\n    penguin 1 monkey\n    ''') == 'IMPOSSIBLE'\nassert solution('''\n    1\n    1\n    ''') == 'FALSE ALARM'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'POSSIBLE'\nassert solution('4 1') == 'IMPOSSIBLE'\nassert solution('5 2') == 'IMPOSSIBLE'\nassert solution('5 4') == 'IMPOSSIBLE'"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 3\nlion 2 monkey\npenguin 1\n''') == 'POSSIBLE'\n\nassert solution('''\n2 4\nmonkey 3 lion\npenguin 1\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n3 4\nmonkey 1 lion\npenguin 1\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n3 4\nmonkey 2 lion\npenguin 2\n''') == 'POSSIBLE'\n\nassert solution('''\n3 5\nmonkey 1 lion\npenguin 1\n''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('1') == 'random sequence'"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4') == '4(1)4(3)3'\nassert solution('10000\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"100\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"2\") == \"random sequence\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n111 222 333\n22 333\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\n13 13\n14 14\n15 15\n16 16\n17 17\n18 18\n19 19\n20 20\n21 21\n22 22\n23 23\n24 24\n25 25\n26 26\n27 27\n28 28\n29 29\n30 30\n31 31\n32 32\n33 33\n34 34\n35 35\n36 36\n37 37\n38 38\n39 39\n40 40\n41 41\n42 42\n43 43\n44 44\n45 45\n46 46\n47 47\n48 48\n49 49\n50 50\n51 51\n52 52\n53 53\n54 54\n55 55\n56 56\n57 57\n58 58\n59 59\n60 60\n61 61\n62 62\n63 63\n64 64\n65 65\n66 66\n67 67\n68 68\n69 69\n70 70\n71 71\n72 72\n73 73\n74 74\n75 75\n76 76\n77 77\n78 78\n79 79\n80 80\n81 81\n82 82\n83 83\n84 84\n85 85\n86 86\n87 87\n88 88\n89 89\n90 90\n91 91\n92 92\n93 93\n94 94\n95 95\n96 96\n97 97\n98 98\n99 99\n100 100\n''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''\n100\n7 5 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''\n100\n7 5 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'random sequence'\nassert solution('2') == 'random sequence'\nassert solution('3') == 'random sequence'\nassert solution('4') == 'random sequence'\nassert solution('5') == 'random sequence'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''\n1\n4 2 5\n4 5 1\n0 1 2 3\n''') == 'random sequence'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"random sequence\"\nassert solution(\"100\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100 4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\") == \"triple correlation 4(1)4(3)3 found\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('200') == 'random sequence'\nassert solution('4') == 'random sequence'\nassert solution('1004') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('1000') == 'triple correlation 4(1)4(3)3 found'\nassert solution('1234567890') == 'random sequence'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1\\n39\\n10\\n') == '40.5'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1\n39\n10\n40\n''') == '40.5'\nassert solution('''\n1\n1.4\n''') == '1.4'\nassert solution('''\n2\n1.1\n2.4\n''') == '3.1'\nassert solution('''\n3\n2.3\n1.4\n1.3\n''') == '2.3'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '40.5'\nassert solution('1 5') == '7.5'\nassert solution('4 3') == '4.5'\nassert solution('1 1') == '2.5'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == '40.5'\nassert solution('4 1') == '44.0'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '3.9'\nassert solution('4 2') == '5.1'\nassert solution('9 5') == '10'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n39\\n10\\n\") == \"40.5\"\nassert solution(\"5 3\\n10 1\\n20 2\\n1 4\\n2 8\\n9 5\\n\") == \"22.4\"\nassert solution(\"5 4\\n10 1\\n20 2\\n1 4\\n2 8\\n9 5\\n\") == \"22.3\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1\\n39\\n10\\n40') == '40.5'\nprint(solution('''5 2\n11\n17\n5\n9\n10'''))\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1\n39\n10\n40\n''') == \"40.5\""
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n10\n10''') == '9.5'\n\nassert solution('''2\n10\n9\n10''') == '10'\n\nassert solution('''3\n10\n8\n10''') == '8.5'\n\nassert solution('''5\n10\n10\n8\n10\n2''') == '8.5'\n\nassert solution('''6\n10\n10\n10\n8\n10\n2''') == '8.5'"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    3 1\n    39\n    10\n    ''') == '40.5'\nprint('Check complete')"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4 1 2 4 1 3') == 'Impossible'\nassert solution('4 6') == '2008'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'Impossible'\nprint(solution(__import__('sys').stdin.read()))"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 6') == 'Impossible'\nassert solution('1 2 3') == '1988'\nassert solution('1 2 3 4') == 'Impossible'\nassert solution('1 2 3 4 5') == '1985'\nassert solution('1 2 3 4 5 6') == '1985'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == 'Impossible'\nassert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == '2008'\n\n'''\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 6') == 'Impossible'\n\nSample Input:\n8 17\n2 3 1987\n2 5 1987\n3 1 1987\n3 4 1987\n2 5 1987\n3 2 1987\n2 4 1987\n3 4 1987\nSample Output:\n2008\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 6') == 'Impossible'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 6') == 'Impossible'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '2008'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"4 6\"\n    \"1 2 1987\"\n    \"2 3 1987\"\n    \"1 3 1987\"\n    \"2 4 1987\"\n    \"1 4 1987\"\n    \"3 4 1987\"\n    ) == \"Impossible\"\nassert solution(\n    \"4 4\"\n    \"1 1 1987\"\n    \"2 2 1987\"\n    \"3 3 1987\"\n    \"4 4 1987\"\n    ) == \"1987\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2 1987\\n3 4 1987\") == \"1985\"\nassert solution(\"10 10\\n1 2 1987\\n3 4 1987\\n4 5 1987\\n5 4 1987\") == \"1985\"\nassert solution(\"5 5\\n1 2 1987\\n1 3 1987\\n3 4 1987\\n3 5 1987\\n4 5 1987\") == \"1985\""
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"impossible\"\nassert solution([int(i) for i in stdin.strip().split()]) == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([4,0,1]) == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n') == '3'\nassert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n') == '4'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([\"4 0 1\", \"N 1 2\", \"C 1 2\", \"N 1 3\", \"C 1 1\"]) == \"3\"\nassert solution([\"4 0 1\", \"N 1 2\", \"C 1 2\", \"N 1 3\", \"C 1 1\", \"C 1 1\", \"C 1 1\"]) == \"3\"\nassert solution([\"5 1 3\", \"C 1 1\", \"C 1 2\", \"N 2 3\", \"N 3 1\"]) == \"impossible\"\nassert solution([\"6 0 2\", \"C 1 2\", \"C 2 1\", \"C 2 2\", \"C 3 1\", \"C 3 2\", \"C 3 3\"]) == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 0 1') == '3'\nassert solution('6 0 2') == 'impossible'\nassert solution('5 0 1') == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == 'impossible'\nassert solution('''\n5 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == '3'\nassert solution('''\n1 0 1\nN 1 2\n''') == 'impossible'\n''')\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1''') == '3'\nassert solution('''5 3 2\nN 1 2\nC 1 2\nN 1 3\nC 1 1\nN 1 4\nN 2 4\nC 2 1''') == 'impossible'\nassert solution('''4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\nN 1 4\nN 2 4\nC 2 1\nN 3 4\nC 3 1''') == '4'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 0 1') == 'impossible'\nassert solution('4 0 1') == '3'\n\n\"\"\"\nfrom collections import defaultdict\nfrom math import inf\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 0 1\\n') == 'impossible'\nassert solution('4 0 1\\n1 2\\n') == '3'\nassert solution('4 0 1\\n1 2\\n1 3\\n') == '3'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 2') == '3'\nassert solution('3 3 2') == '2'\nassert solution('3 2 1') == 'impossible'\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 10\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == 0\nassert solution(\"()\") == 1\nassert solution(\"(())\") == 2\nassert solution(\")\") == 1\nassert solution(\"()()\") == 2\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n)\n((()\n)()\n''') == 10\n\nassert solution('''5\n(()((()\n)()\n''') == 5\n\nassert solution('''2\n()\n''') == 2\n\nassert solution('''4\n(((()\n)())\n''') == 5\n\nassert solution('''5\n((((()\n)())\n(())\n(((()\n)()\n))\n''') == 10\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n)\n))\n('('\n)\n(\n)\n)\n''') == 10\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == 0\nassert solution(\"()\") == 1\nassert solution(\"()()\") == 4\nassert solution(\"()((()()(((()((()())()())))))()(()))()(()()()())()()()((((()()(()()())((()()()(()))))()()()()()()()(()()))()()())()()()()()())()()()()()()()())()()()()()()()())()()()()()()()())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()())\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n3\n())\n((()\n)()\n''') == '10'\nassert solution(\n'''\n5\n(())\n((()\n)())\n(()(\n))\n''') == '5'\nassert solution(\n'''\n6\n(()(\n(()(\n))((\n))\n(()(\n))()\n''') == '13'\nassert solution(\n'''\n6\n(())\n(()(\n))\n()\n(()(\n))\n''') == '12'\nassert solution(\n'''\n10\n()()()\n(()(\n())(\n))\n()\n((()\n))\n''') == '18'\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n()\n((()\n)()\n''') == 10\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n(\n)\n''') == 1\n\nassert solution('''\n1\n()\n''') == 0\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '5'\nassert solution('7') == '7'\n\"\"\""
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"()\") == \"1\"\nassert solution(\"(())\") == \"2\"\nassert solution(\")())\") == \"4\"\nassert solution(\"((()\") == \"1\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n') == '85293'\nassert solution('6\\n3 h\\n6 a\\n7 a\\n12 h\\n20 h\\n5 a\\n4 h\\n9 a\\n18 h\\n16 a\\n15 h\\n13 h\\n11 h\\n11 a\\n10 a\\n7 h\\n4 a\\n8 a\\n2 a\\n2 h\\n6 a\\n14 h\\n9 a\\n3 a\\n17 a\\n15 a\\n7 h\\n3 a\\n11 h\\n8 a\\n9 a\\n5 a\\n13 a\\n16 h\\n4 a\\n6 a\\n9 a\\n6 a\\n11 a\\n7 h\\n12 a\\n12 h\\n8 a\\n10 a\\n16 a\\n16 a\\n7 a\\n11 h\\n9 a\\n13 a\\n15 a\\n8 h\\n7 a\\n2 a\\n8 a\\n15 h\\n11 a\\n4 a\\n18 h\\n14 a\\n7 h\\n12 a\\n11 a\\n11 a\\n12 h\\n6 a\\n16 a\\n9 a\\n11 a\\n5 a\\n14 a\\n13 a\\n7 a\\n12 a\\n16 h\\n9 a\\n9 a\\n11 a\\n13 a\\n12 a\\n5 a\\n14 a\\n16 a\\n16 a\\n8 a\\n12 a\\n15 a\\n9 a\\n10 a\\n11 a\\n15 a\\n12 h\\n11 a\\n4 a\\n8 a\\n7 a\\n14 a\\n13 a\\n6 a\\n3 a\\n15 a\\n14 a\\n10 a\\n16 a\\n11 a\\n7 h\\n7 a\\n8 a\\n6 a\\n5 a\\n3 a\\n4 a\\n8 a\\n15 h\\n10 a\\n11 a\\n9 a\\n8 h\\n5 a\\n13 a\\n4 a\\n13 a\\n4 h\\n10 a\\n9 a\\n12 a\\n11 h\\n13 h\\n10 a\\n11 a\\n13 a\\n15 a\\n7 h\\n11 h\\n6 a\\n14 h\\n12 a\\n8 a\\n14 a\\n7 a\\n10 a\\n10 a\\n12 a\\n14 a\\n9 a\\n6 a\\n3 a\\n8 a\\n2 a\\n12 a\\n9 a\\n8 a\\n9 a\\n12 h\\n7 a\\n10 a\\n10 a\\n7 h\\n14 a\\n10 a\\n11 a\\n13 a\\n15 a\\n11 h\\n13 a\\n4 a\\n7 a\\n6 a\\n12 a\\n13 a\\n7 a\\n8 a\\n2 a\\n9 a\\n7 a\\n8 a\\n6 a\\n15 a\\n11 a\\n12 a\\n15 a\\n7 a\\n10 a\\n7 h\\n8 a\\n11 a\\n14 a\\n9 a\\n9 a\\n10 a\\n3 a\\n13 a\\n14 a\\n13 a\\n10 a\\n7 a\\n6 a\\n8 a\\n5 a\\n6 a\\n14 a\\n13 a"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n377 a\n455 h\n180 a\n\"\"\") == \"85293\"\nassert solution(\"\"\"\n7\n377 a\n455 h\n180 a\n213 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\") == \"163469\"\nassert solution(\"\"\"\n6\n377 a\n455 h\n180 a\n213 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\") == \"141278\"\nassert solution(\"\"\"\n7\n377 a\n455 h\n180 a\n213 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\") == \"13401\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9') == '85293'\nassert solution('9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\nassert solution('10\\n11 11\\n22 22\\n33 33\\n44 44\\n55 55\\n66 66\\n77 77\\n88 88\\n99 99\\n
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n377\\na\\n455\\nh\\n180\\na\\n211\\na\\n134\\na\\n46\\nh\\n111\\nh\\n213\\nh\\n17\\na\\n15\\n1\\n2\\n1\\n4\\n1\\n6\\n1\\n2\\n3\\n2\\n4\\n2\\n5\\n5\\n5\\n6\\n4\\n7\\n4\\n7\\n8\\n5\\n7\\n7\\n8\\n6\\n7\\n8\\n7\\n8\\n9\\n7\\n9\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n7\\n8\\n9\\n7\\n9\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\n6\\n7\\n8\\"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\\n377\\n455\\n180\\n211\\n134\\n46\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n\") == \"85293\"\nassert solution(\"1\\n377\\n455\\n180\\n211\\n134\\n46\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n\") == \"85293\"\nassert solution(\"9\\n377\\n455\\n180\\n211\\n134\\n46\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n\") == \"85293\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '85293'\nassert solution('4') == '85292'\nassert solution('3') == '85291'\nassert solution('2') == '85290'\nassert solution('1') == '85289'\n\n\"\"\"\nimport itertools\nimport re\n\nimport pytest\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\nassert solution(\"6\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"0\"\nassert solution(\"9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\") == \"85293\"\nassert solution(\"6\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"0\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 4\\n3 4\\n2 3\") == \"85293\"\nassert solution(\"4\\n0 4\\n3 4\\n2 3\\n2 3\") == \"85293\"\nassert solution(\"5\\n0 4\\n3 4\\n2 3\\n2 3\") == \"85293\"\nassert solution(\"6\\n0 4\\n3 4\\n2 3\\n2 3\\n2 3\") == \"85293\"\nassert solution(\"7\\n0 4\\n3 4\\n2 3\\n2 3\\n2 3\") == \"85293\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n1 3\\n1 4\\n2 4') == '5'\nassert solution('1\\n2\\n1 3\\n2 4\\n1 4\\n2 5') == '5'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 6') == '3'\nassert solution('10 8') == '1'\nassert solution('10 20') == '2'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5') == '5'\nassert solution('1 2') == '1'\nassert solution('1 3') == '1'\nassert solution('2 3') == '1'\nassert solution('1 4') == '2'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '4 5\\n'\n    '1 2\\n'\n    '1 3\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '2 4\\n'\n) == '5'\nassert solution(\n    '1 2\\n'\n    '1 3\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '2 4\\n'\n) == '0'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n') == '5'\nassert solution('2 10\\n1 2\\n3 4\\n5 6\\n7 8\\n2 1\\n3 2\\n4 5\\n5 2\\n1 3\\n6 7\\n4 6\\n7 4\\n5 5\\n5 3\\n') == '5'\nassert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n') == '2'\nassert solution('3 3\\n1 2\\n2 2\\n3 3\\n') == '1'\nassert solution('10 10\\n1 2\\n2 3\\n3 5\\n5 1\\n1 4\\n5 4\\n1 2\\n4 5\\n5 2\\n') == '2'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2\\n1 3\\n2 3\") == \"5\"\nassert solution(\"5 7\\n1 2\\n3 4\\n4 5\\n1 4\\n3 5\\n5 6\\n4 6\\n1 7\\n4 7\") == \"5\"\nassert solution(\"6 7\\n1 2\\n3 4\\n4 5\\n5 6\\n6 7\\n1 4\\n5 6\\n1 7\\n2 7\") == \"5\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n\"\"\") == \"5100\"\nassert solution(\"\"\"\n4\n5 butterfly 1 humongous coffee mug\n2 budgie 3 bulky bee queen\n3 dog 1 goofy beast\n2 bat 1 friendly wild boar\n4 duck 5 purple-backed quail\n\"\"\") == \"33200\"\nassert solution(\"\"\"\n2\n5 eagle 1 small brown owl\n3 blackbird 5 bright white birds\n3 blackbird 1 cirno cresson\n3 owl 3 hairy green cresson\n3 owl 2 brown cresson\n3 owl 1 violet cresson\n2 cresson 1 vibrant yellow cresson\n\"\"\") == \"4000\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n''') == '5100'"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"3 1 aaabaaajss\") == \"30000\"\nassert solution(\"1 1 cat\") == \"1000000\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n''') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 caterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n7 mouse 1 electromouse 5 rat\\n7\\n1500 aaabaaajss\\n2500 pigeon\\n3000 butterfly\") == \"5100\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '5100'\nassert solution('3\\n3 caterpillar 3 pupa 7 butterfly') == '5100'\nassert solution('3\\n3 dove 3 pigeon 7 aaabaaajss\\n3 mouse 1 electromouse 5 rat') == '5100'\nassert solution('7\\n0 pika 1 aaaa aaabaaajss\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 aaaabaaa 1 pika 1 pika 1 aaaa 1 pika 1 aaaa 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 aaaabaaa 1 pika 1 pika 1 aaaa 1 pika 1 aaaa 1 pika 1 pika 1\\n7 mouse 1 aaaabaaa 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n3 mouse 1 pika 1 pika 1 pika 1 pika 1 pika 1 pika 1\\n7 mouse 1 pika 1 pika 1"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1500\"\nassert solution(\"4\") == \"4630\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly''') == '5100'\nassert solution('''2\n1 cat\n2 dog\n3 cow\n5 turtle\n10 elephant\n20 horse\n30 rabbit\n40 bat''') == '5100'\nassert solution('''2\n1 cat\n2 dog\n3 cow\n5 turtle\n10 elephant\n20 horse\n30 rabbit\n40 bat''') == '5500'\nassert solution('''2\n1 cat\n2 dog\n3 cow\n5 turtle\n10 elephant\n20 horse\n30 rabbit\n40 bat''') == '5500'\nassert solution('''2\n1 cat\n2 dog\n3 cow\n5 turtle\n10 elephant\n20 horse\n30 rabbit\n40 bat''') == '8100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '15000'\nassert solution('3\\n3 caterpillar 3 pupa 7 butterfly') == '15000'\nassert solution('3\\n3 caterpillar 3 pupa 7 butterfly\\n3 owl 3 owl') == '17500'\nassert solution('3\\n3 caterpillar 3 pupa 7 butterfly\\n3 mouse 1 electromouse 5 rat') == '20000'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == \"15500\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3') == '-1'\nassert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5') == '6\\n1\\n2\\n3\\n1\\n4\\n5'"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '6'\nassert solution('10') == '-1'\nassert solution('9') == '-1'\nassert solution('100000') == '-1'\nassert solution('1000') == '-1'"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\"\n) == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\nassert solution(\n    \"3\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\"\n) == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6':\n    print('Test passed')\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '6'\nassert solution('1') == '-1'\nassert solution('8') == '1'\nassert solution('1') == '2'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nassert solution('10\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 2 1 2 1\\n4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '10'\nassert solution('2 2\\n1 2 1 2 1\\n4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '9'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1 2 1') == '10'\nassert solution('4') == '0'\nassert solution('4') == '0'"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1 2 1') == '10'\nassert solution('4') == '10'\nassert solution('1 2 O 3') == '8'\nassert solution('1 2 R 5') == '10'\nassert solution('1 2 R 6') == '8'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2 O 3\n2 1 O 3\n1 2 R 5\nSample Input 2:\n3 2\n1 2 O 3\n2 1 O 3\n1 2 R 5\nSample Output 2:\n10\n''') == '10'\n\nassert solution('''1\n1\nSample Input 3:\n1\n1\nSample Output 3:\n0\n''') == '0'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == '10'\nassert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n1 2 R 5\n''') == '20'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == \"10\"\nassert solution('''\n5 3\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == \"10\"\nassert solution('''\n2 5\n2 1 O 3\n2 1 O 3\n1 2 R 5\n''') == \"3\"\nassert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == \"10\"\nassert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == \"9\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == '10'\n\n'''\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5\\n1 2 1 2 1\\n4') == '10'\nassert solution('2 4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '6'"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6') == '10'\nassert solution('10 10') == '10'\nassert solution('10 15') == '20'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n0 1\\n1 2\\n2 3') == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0 1\\n1 2\\n2 3') == '1'\nassert solution('10\\n5 6\\n10 7\\n6 9\\n10 8\\n5 2\\n2 7\\n1 9\\n1 8\\n7 9\\n2 6\\n4 3\\n0 1\\n1 2\\n2 3') == '3'\nassert solution('6\\n8 5\\n4 7\\n5 3\\n6 4\\n2 5\\n6 7\\n1 3\\n2 4\\n1 6\\n3 7\\n1 8\\n2 5\\n0 6\\n3 4\\n0 1\\n1 2\\n2 3') == '7'\nassert solution('6\\n7 5\\n4 3\\n5 2\\n6 4\\n2 5\\n6 7\\n1 3\\n2 4\\n1 6\\n3 7\\n1 8\\n2 5\\n0 6\\n3 4\\n0 1\\n1 2\\n2 3') == '6'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5\\n0 1\\n1 2\\n2 3\\n') == '1'\nassert solution('3 4\\n0 1\\n0 2\\n1 2\\n') == '2'\nassert solution('4 5\\n0 1\\n0 2\\n0 3\\n1 2\\n') == '3'\nassert solution('1 2\\n1 2\\n') == '1'\nassert solution('2 3\\n3 2\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 3') == '2'\nassert solution('4 2') == '1'\n\nhttps://leetcode.com/problems/topological-sorting-of-a-directed-graph/\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '1 2 3'\nprint(solution('5 5'))"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 3\n0 1\n1 2\n2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5\n0 1\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '1'\nassert solution('4 5') == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    4 3\n    0 1\n    1 2\n    2 3\n    ''') == '1'\nassert solution('''\n    5 7\n    0 1\n    0 2\n    0 3\n    1 4\n    2 5\n    2 6\n    ''') == '5'\n''')\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == \"0.5\\n\"\nassert solution(\"3\\n3\\n1\") == \"0.5\\n\"\nassert solution(\"5\\n6\\n5\\n4\\n3\\n2\\n1\") == \"0.8\\n\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"0.5\"\nassert solution(\"20\") == \"0.9994545454545\"\nassert solution(\"50\") == \"0.9936505436504\"\nassert solution(\"100\") == \"0.9989010989011\"\nassert solution(\"150\") == \"0.99999999999996\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0.962962962963'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0.5'\nassert solution('4') == '0.95'\nassert solution('100') == '0.95'\n\"\"\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '0.962962962963'\n\"\"\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '0.962962962963'\nassert solution('5') == '0.50208120219'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n\") == \"0.962962962963\"\nassert solution(\"2\\n\") == \"0.9044296860221\"\nassert solution(\"3\\n\") == \"0.8660254037844\"\nassert solution(\"4\\n\") == \"0.8353069137755\"\nassert solution(\"5\\n\") == \"0.7663807929689\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n4\\n4\\n4') == '0.962962962963'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n2\n3\n4''') == '0.962962962963'\nassert solution('''5\n10\n20\n10\n20\n2\n1''') == '0.8823529411765'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '0.962962962963'\nassert solution('100') == '0.946210794539'\nassert solution('1000') == '0.945982971522'\nassert solution('10000') == '0.945952410973'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0 0'\nassert solution('3') == '0 40000000 0'\nassert solution('5') == '0 0 40000000 0 40000000'\nassert solution('10') == '0 0 40000000 0 40000000 0 0 40000000 0 0 40000000 0 0 40000000 0 0 40000000 0 0'\nassert solution
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2 0\"\nassert solution(\"3\") == \"0 2 0\"\nassert solution(\"4\") == \"0 40000000 0\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2\n''') == '0 0\\n40000000 0\\n0 40000000\\n'''\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0 0\\n' * 3\nassert solution('100') == '0 40000000\\n0 40000000\\n0 40000000\\n' * 100\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0 0\\n40000000 0\\n0 40000000'"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0 0\\n40000000 0\\n0 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0 0'\nassert solution('6') == '40000000 0'\nassert solution('10') == '0 40000000'\nassert solution('15') == '40000000 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\\n\"\nassert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\\n\"\nassert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\\n\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n0 0\n40000000 0\n0 40000000''') == '0 0\\n40000000 0\\n0 40000000'\n\nYour task is to complete the function solution() which takes stdin as input and returns a string.\n\nNote that the function is expected to return a single line of output.\n\nIf your code is too slow, don\u2019t worry about getting a time limit exceeded error, it\u2019s fine to fail a test case, but your program should still pass.\n\nAlso, keep in mind that your program will be graded by the online submission server and its input and output will be different than the one provided.\n\nNote that the judging program will run code in main before your code runs, so don\u2019t worry about anything being printed to the judge\u2019s output.\n\n---Input Format---\nThe first and only line of each test case contains an integer $N \\in \\{1 \\leq N \\leq 400000 \\}$.\n\n---Constraints---\nNo more than 400,000 calls will be made to your code.\n\n---Output Format---\nFor each test case, your code must print a single line containing two integers $0 \\le x, y \\le 4 \\cdot 10^7$, denoting the coordinates of a vertex making up your main office. The coordinates can be given in any order and must adhere to your main office\u2019s restrictions as described in the problem statement.\n\nInput:\n3\n0 0\n40000000 0\n0 40000000\nOutput:\n0 0\n40000000 0\n0 40000000\n\"\"\"\nfrom itertools import permutations\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\") == \"0 0\\n40000000 0\\n0 40000000\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 4 5 6') == \"impossible\", \"Should be impossible\"\nassert solution('4 5 6 5 2') == \"impossible\", \"Should be impossible\"\nassert solution('1 3 5 4 2') == \"1\", \"Should be 1\"\nassert solution('2 2 2 2 2') == \"2\", \"Should be 2\"\nassert solution('3 5 5 5 5') == \"impossible\", \"Should be impossible\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('5 5 5 2') == '2'\nassert solution('1 1 1 1') == 'impossible'"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('3 6 8 5') == '3*6-8*5'\nassert solution('5 2 4 6') == '5*2*4-6*2'\nassert solution('2 5 8 9') == '2*5+8*9'\nassert solution('4 4 4 4') == '4*4'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"1 2 3\") == \"Impossible\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('2 2 2 2') == 'impossible'\nassert solution('1 1 2 3') == '1'\nassert solution('3 3 5 3') == '2'\nassert solution('5 5 5 5') == 'impossible'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"8 5 6 2\") == \"3\"\nassert solution(\"20 9 8 2\") == \"4\"\nassert solution(\"1 2 3 4\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5 5 2') == \"1\"\nassert solution('4 5 6 2') == \"3\"\nassert solution('5 5 5 4') == \"3\"\nassert solution('2 6 5 4') == \"impossible\"\nassert solution('2 5 5 2') == \"2\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"1 2 3 4\") == \"2\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([\"3 5 5 2\"]) == \"1\"\nassert solution([\"10 3 5 2\"]) == \"impossible\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"10 3 2 4\") == \"0\"\nassert solution(\"3 3 3 3\") == \"3\"\nassert solution(\"12 4 5 4\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([20, 3, 5, 5]) == '2'\nassert solution([20, 3, 5, 5, 0, 0, 0]) == '2'\nassert solution([20, 3, 5, 5, 10, 0, 0]) == '2'\nassert solution([20, 3, 5, 5, 20, 0, 0]) == '0'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 5 5') == '2'\nassert solution('10 3 5 5') == '1'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3 5 5') == '2'\nassert solution('9 10 2 3') == '1'\nassert solution('10 5 4 5') == '0'"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('20 3 5 5') == '2'\nassert solution('50 50 100 50') == '1'\nassert solution('50 50 50 50') == '0'\nassert solution('50 50 50 50 1') == '1'"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''20 3 5 5''') == '2'''\nassert solution('''20 2 5 5''') == '4'''\nassert solution('''20 3 -5 -5''') == '0'''\nassert solution('''20 3 -10 -10''') == '0'''\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('20 3 5 5') == '2'\nassert solution('30 0 0 0') == '-1'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('20 3 5 5\\n0 0 0\\n30 0 0\\n0 0 0') == '2'\nassert solution('100 4 6 4\\n0 0 0\\n50 0 0\\n0 0 0') == '-2'\nassert solution('5 1 2 5\\n-10 2 2\\n-20 2 2\\n-30 2 2') == '-4'\nassert solution('10 8 4 8\\n-10 2 2\\n-20 2 2\\n-30 2 2') == '5'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 2 6\n-1 -2 -3 -4\n-1\n2 3\n1 4\n-1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 2 1\n0\n1\n1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 3 3\n5\n4\n-1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0\n''') == '2'\nprint(solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0\n'''))\nprint(solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0\n'''))\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('20 3 5 5') == '2'\nassert solution('1 20 5 5') == '0'\nassert solution('0 0 0') == '0'\nassert solution('0 -10 0') == '0'\nassert solution('30 0 0') == '0'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"12 34 56 78 90 12 34 56 78 90 12 34 56 78 90\"\n    ) == \"12 14\"\n\"\"\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('13') == '12 14'"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n8') == '7 11'"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '12'\nassert solution('14') == '12'\nassert solution('1437') == '1441'\nassert solution('961') == '962'\nassert solution('962') == '962'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('13') == '12 14'\nassert solution('23') == '13 14'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('123') == '12'\nassert solution('12') == '14'\nassert solution('1234') == '14'\nassert solution('1234321') == '14'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('11') == '11'\nassert solution('1000') == '1000'\nassert solution('1234567890') == '1234'\nassert solution('54321') == '543'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6\n3\n2\n2\n9\n13''') == '6 12'\nassert solution('''9\n1\n4\n5\n8''') == '9 8 7 6 5 4'\nassert solution('''2\n2\n3\n5\n6\n7\n8''') == '2 4'\nassert solution('''20\n1\n7\n8\n2\n3\n4\n6\n5''') == '20 14 6 18 1 19 7 8 2 3 4'\nassert solution('''1\n1\n3\n5\n7\n9''') == '1 2 3 6 7 9'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('11') == '11'\nassert solution('21') == '21'\nassert solution('1211') == '1214'\nassert solution('73738') == '73741'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('13') == '12 14'\nassert solution('1') == '2 4'\nassert solution('123') == '2 4 5'\nassert solution('125') == '2 5'\nassert solution('12') == '2'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '0'\nassert solution('1 2 3 4 5') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\nassert solution([0, 0, 0]) == '1'\nassert solution([1, 0, 0]) == '0'\nassert solution([1, 1, 0]) == '0'\nassert solution([3, 0, 0]) == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('10\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n0 1\n1 1\n0 0\n''') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('100\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '6'\nassert solution('2\\n1 1\\n0 0\\n0 0\\n0 0\\n0 0\\n') == '2'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\n1 0 1\n2 0 1\n3 0 1\n3 0 0\n3 0 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n0 0 0 0\n1 0 1 0\n2 0 1 0\n3 0 0 1\n3 0 0 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '0'\nassert solution('''\n5\n1 1 1\n1 1 1\n3 1 1\n3 1 1\n3 1 1\n''') == '1'\nassert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '2'\nassert solution('''\n5\n0 0 0\n0 0 1\n1 0 1\n1 0 0\n1 0 1\n''') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\n0 0 0\n1 0 1\n3 0 1\n\"\"\"\n    ) == \"1\"\nassert solution(\n\"\"\"\n3\n0 0 0\n1 0 1\n3 0 1\n\"\"\"\n    ) == \"0\"\nassert solution(\n\"\"\"\n8\n0 0 0\n1 0 1\n2 0 1\n3 0 1\n4 0 1\n5 0 1\n6 0 1\n7 0 1\n\"\"\"\n    ) == \"7\"\nassert solution(\n\"\"\"\n4\n0 0 0\n1 0 1\n2 0 1\n3 0 1\n4 0 1\n\"\"\"\n    ) == \"4\"\nassert solution(\n\"\"\"\n4\n0 0 0\n1 0 1\n2 0 1\n3 0 1\n4 0 1\n\"\"\"\n    ) == \"0\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '1'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n1 0 1\\n2 0 1\\n3 0 0\\n3 0 1\\n4 0 0\\n4 0 1\\n4 0 0\\n') == '1'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n1 0 1\\n2 0 1\\n3 0 0\\n3 0 1\\n4 0 0\\n4 0 1\\n4 0 0\\n') == '0'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n1 0 1\\n2 0 1\\n3 0 0\\n3 0 1\\n4 0 0\\n4 0 1\\n4 0 0\\n') == '0'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3\"\n) == \"\\n1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1'\nassert solution('4 6') == '1 1\\n1 3\\n1 2\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1 1\"\nassert solution(\"2 4\") == \"1 2\"\nassert solution(\"3 4\") == \"2 1\"\nassert solution(\"3 3\") == \"2 2\"\nassert solution(\"4 4\") == \"1 1\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\\n'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n1 1\n2 2\n1 3\n2 1\n1 2\n2 3''') == '1 2\\n2 1\\n1 2\\n2 3\\n1 3\\n2 1\\n1 2'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1 1\"\nassert solution(\"2 2\") == \"1 1\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"2 2\") == \"1 2\"\nassert solution(\"3 3\") == \"1 1 1\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n\") == \"1 1\"\nassert solution(\"2 3\\n\") == \"2 2\"\nassert solution(\"1 3\\n\") == \"1 2\"\nassert solution(\"2 1\\n\") == \"2 1\"\nassert solution(\"1 2\\n\") == \"1 2\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\nassert solution('6 6') == '1 1 2 2 3 3\\n1 3 2 1 4 5\\n4 5 2 1 3 6\\n2 5 1 4 3 6\\n3 5 2 4 1 6\\n2 6 1 5 3 4\\n6 5 1 4 2 3\\n'\nassert solution('6 6') == '1 1 2 2 3 3\\n1 3 2 1 4 5\\n4 5 2 1 3 6\\n2 5 1 4 3 6\\n3 5 2 4 1 6\\n2 6 1 5 3 4\\n6 5 1 4 2 3\\n'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 1') == '0.66666667'\nassert solution('6 4') == '0.44444444'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == \"3.33333333\"\nassert solution('''\n3 10\n0 10 1\n0 10 1\n1 0 1\n''') == \"3.33333333\"\nassert solution('''\n3 10\n0 10 1\n1 0 1\n1 0 1\n''') == \"3.33333333\"\nassert solution('''\n3 10\n0 10 1\n1 0 1\n1 0 1\n''') == \"3.33333333\"\nassert solution('''\n3 10\n0 10 1\n1 0 1\n0 10 1\n''') == \"3.33333333\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\n\nassert solution('''\n3 5\n0 0.5 1.5\n0 0.5 1.5\n0 0.5 1.5\n''') == '3.33333333'\n\nassert solution('''\n3 10\n0 0.1 1.5\n0 0.1 1.5\n0 0.1 1.5\n''') == '0.55555556'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 10\") == \"0.66666667\"\nassert solution(\"3 10\") == \"0.33333333\"\nassert solution(\"3 10\") == \"1.4000000000000002\"\nassert solution(\"3 10\") == \"0.25000000010000002\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 10\\n0 10 1\\n0 10 1\\n0 10 1\\n') == '3.33333333'\nassert solution('3 10\\n0 10 1\\n0 10 1\\n0 10 1\\n') == '3.33333333'\nassert solution('2 2\\n0 0\\n0 0\\n') == '0.5'\nassert solution('10 10\\n1 1\\n0 0\\n0 0\\n') == '0.25'\nassert solution('2 2\\n0 0\\n0 0\\n') == '1.0'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 10 1\") == \"2.6666667\"\nassert solution(\"2 10 1\") == \"2.6666667\"\nassert solution(\"3 10 1\") == \"3.3333333\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 10\n0 10 1\n0 10 1\n0 10 1\n\"\"\") == \"3.33333333\"\nassert solution(\"\"\"\n2 10\n0 10 1\n0 10 1\n\"\"\") == \"3.33333333\"\nassert solution(\"\"\"\n3 10\n0 10 1\n0 10 1\n0 10 1\n\"\"\") == \"3.33333333\"\nassert solution(\"\"\"\n2 10\n0 10 1\n0 10 1\n\"\"\") == \"2.666666667\"\n\n\"\"\""
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 5\n3 10 1\n3 10 1''') == '4.5'\n\nassert solution('''2 3\n1 10 1\n1 10 1''') == '1.3333333333333333'\n\nassert solution('''3 4\n3 5 6\n5 7 8\n7 9 10''') == '5.6'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\nassert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3 3 2') == '1'\nassert solution('2\\n1 3 5 2') == '2'\nassert solution('3\\n2 1 1 2') == '2'"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''3\n3 3 2\n''') == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n1\n3 1 2\n''') == '1'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n1\n3 1 2\n''') == '0'\nassert solution('''\n10\n3 2 1 1 1 2\n1 2 1 1 1 2\n''') == '2'\nassert solution('''\n10\n1 1 1 1 1 1 2\n1 1 1 1 1 1 2\n''') == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 3 2') == '1'\nassert solution('3\\n5 5 4') == '2'\nassert solution('5\\n8 4 8 8 4') == '3'\nassert solution('5\\n5 5 5 5') == '3'\nassert solution('5\\n9 9 9 9 9') == '4'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2 3 1\\n\") == \"1\"\nassert solution(\"10\\n20 30 40 50 60 70 80 90 100\\n\") == \"2\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n3 3 2') == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\n\"\"\""
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\n\"\"\""
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n3 3 2\nSample Output:\n1\n''') == '1'\n\nassert solution('''\n3\n2 2 4\nSample Output:\n0\n''') == '0'\n\nassert solution('''\n5\n1 1 1 1 1\nSample Output:\n1\n''') == '1'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\naba\nbbb\n''') == '2'"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'\nassert solution(\"abba\") == '2'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\naba\nbaba\ncaba\n''') == '3'\nassert solution('''6\naabaaa\nbbaa\nababab\naaaa\nbbbba\nabaaaa\n''') == '2'\nassert solution('''6\naba\nbab\naba\naba\naaa\nabaaaa\n''') == '2'\nassert solution('''6\naba\nababab\naba\nababab\naaa\nabaaaa\n''') == '3'\nassert solution('''6\naba\nabb\naba\naba\naaa\nabaaaa\n''') == '2'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == '2'\nassert solution(\"2 2\") == '3'\nassert solution(\"3 1\") == '3'\nassert solution(\"4 1\") == '4'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\nabba\n''') == '2'\n\nassert solution('''\n4 5\naabab\nabcd\nabab\naabc\n''') == '3'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"a\") == \"0\"\nassert solution(\"aab\") == \"1\"\nassert solution(\"aba\") == \"2\"\nassert solution(\"abb\") == \"1\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\naba\\n2\\naba\\n3\\naba\\n4\\naba\\n') == '3'\nassert solution('1\\nb\\n2\\na\\n3\\nc\\n') == '3'\nassert solution('1\\na\\n2\\nb\\n3\\nc\\n') == '2'\nassert solution('1\\na\\n2\\na\\n3\\nc\\n') == '1'\nassert solution('1\\nc\\n2\\na\\n3\\nb\\n') == '1'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\nSample Input:\n5 3\nbaa\nSample Output:\n2"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()[:-1]\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n2 3\n1 2\n3 4\n''') == '3'\nassert solution('''\n5 2\n1 2\n3 4\n''') == '3'\nassert solution('''\n5 2\n3 4\n2 4\n1 5\n3 4\n''') == '4'\nassert solution('''\n10 2\n2 3\n3 4\n6 8\n3 2\n8 7\n1 2\n9 4\n4 5\n5 2\n''') == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2\n2 3\n2 4\n''') == '3'\nassert solution('''5 2\n1 3\n2 4\n2 4\n3 5\n''') == '5'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2\") == \"2\"\nassert solution(\"2 2\\n3 3\") == \"1\"\nassert solution(\"10 10\\n10 1\\n2 2\\n3 3\\n1 1\\n2 3\\n1 1\\n3 4\\n2 5\\n3 6\\n3 6\\n1 5\\n4 6\\n3 4\") == \"4\"\nassert solution(\"10 10\\n10 1\\n2 2\\n3 3\\n1 1\\n2 3\\n1 1\\n3 4\\n2 5\\n3 6\\n3 6\\n1 5\\n4 6\\n3 4\") == \"1\"\nassert solution(\"1 1\\n3 3\\n2 4\\n5 5\\n3 6\\n1 2\\n3 3\\n5 5\\n4 5\") == \"1\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n2 4') == '3'\nassert solution('4 4\\n1 2\\n2 3\\n2 4\\n2 4') == '3'\nassert solution('5 5\\n1 2\\n2 3\\n2 4\\n3 4\\n3 4') == '4'\nassert solution('5 5\\n1 2\\n2 3\\n2 4\\n3 4\\n3 4') == '4'\nassert solution('6 6\\n1 2\\n2 3\\n2 4\\n3 4\\n3 5\\n3 4\\n3 5\\n3 5') == '5'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n2 3\\n2 4') == '3'\nassert solution('4 3\\n1 2\\n2 3\\n2 4') == '2'\nassert solution('4 3\\n2 3\\n1 2\\n2 3\\n2 4') == '4'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '3'\nassert solution('5 1') == '4'\nassert solution('3 3') == '4'\nassert solution('10 3') == '6'\n\n---Input is read from STDIN (standard input)---\n-----Output is printed to STDOUT (standard output)-----\n\"\"\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''\n5 6\n1 2\n2 3\n2 4\n3 5\n3 4\n4 5\n4 6\n''') == '4'\nassert solution('''\n100 100\n1 2\n2 3\n1 3\n4 5\n3 6\n''') == '2'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1\\n2 3\\n1 2') == '3'\nassert solution('5 1\\n2 3\\n3 4\\n4 5\\n1 2') == '4'\nassert solution('1 1\\n3 1\\n4 3\\n5 2\\n5 3\\n1 2') == '3'\nassert solution('1 1\\n3 1\\n4 3\\n5 3\\n1 2') == '1'"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''\n4 3\n1 2\n2 3\n1 4\n''') == '4'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('\\n'.join([\"3 2\", \"1 0\", \"0 1\", \"1000 1\", \"1 3\", \"2 3\", ])) == '1'\nassert solution('\\n'.join([\"3 2\", \"1 0\", \"0 1\", \"1 3\", \"2 3\", ])) == '0'\nassert solution('\\n'.join([\"4 3\", \"2 2\", \"0 0\", \"1 1\", \"3 3\", ])) == '1'\nassert solution('\\n'.join([\"5 4\", \"0 0\", \"1 1\", \"2 2\", \"3 3\", ])) == '0'"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3') == '1'\nassert solution('3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3') == '1'\nassert solution('10\\n') == '0'\nassert solution('1\\n1\\n10\\n') == '0'\nassert solution('10\\n') == '0'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '1'\nassert solution('''\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '0'\nassert solution('''\n3 2\n0 1\n1 2\n4 5\n1 3\n2 3\n''') == '1'\nassert solution('''\n3 2\n1 0\n0 1\n4 5\n1 3\n2 3\n''') == '0'\nassert solution('''\n3 2\n1 0\n0 1\n4 5\n1 3\n2 3\n''') == '0'\n''')"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 2\n1 0\n0 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 2\n1 0\n1 1\n3 3\n3 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5\n-10 -5\n-5 -10\n-10 10\n-5 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2\n0 2\n0 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n0\n1\n2\n3\n4\n5\n6\n\"\"\") == \"\"\"\n1\n\"\"\".strip()\n\nassert solution(\"\"\"\n1\n2\n3\n4\n5\n6\n7\n\"\"\") == \"\"\"\n2\n\"\"\".strip()\n\nassert solution(\"\"\"\n1\n10\n7\n2\n3\n4\n5\n6\n\"\"\") == \"\"\"\n2\n\"\"\".strip()\n\nassert solution(\"\"\"\n1\n6\n7\n3\n4\n5\n2\n\"\"\") == \"\"\"\n1\n\"\"\".strip()\n\nassert solution(\"\"\"\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n\"\"\") == \"\"\"\n10\n\"\"\".strip()\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n3 4\n2 4\n1 3\n10 2\n3 2\n3 1\n10 1\n2 3\n9 1\n9 0\n''') == '0'\n\nassert solution('''\n10\n3 4\n2 4\n1 3\n10 2\n3 2\n3 1\n10 1\n2 3\n9 1\n9 0\n''') == '1'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 2') == '0'\nassert solution('1 1') == '1'\nassert solution('3 2') == '0'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"1\"\n\nassert solution(\n    \"\"\"\n3 2\n1 0\n0 1\n1 1\n0 2\n1 3\n1 4\n2 4\nSample Output:\n0\n0\n\"\"\"\n    ) == \"0\"\n\nassert solution(\n    \"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"1\"\n\nassert solution(\n    \"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n0 2\n1 4\n0 5\n1 6\n2 7\n\"\"\") == \"1\"\n\nassert solution(\n    \"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n0 2\n1 4\n0 5\n1 6\n2 7\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\\n') == '1'\nassert solution('3 3\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\\n') == '1'\nassert solution('6 8\\n5 3\\n0 0\\n2 1\\n0 3\\n4 4\\n5 2\\n') == '0'\nassert solution('5 5\\n0 0\\n4 4\\n0 1\\n1 4\\n0 3\\n') == '2'\nassert solution('8 8\\n1 1\\n2 2\\n5 5\\n6 6\\n7 7\\n') == '1'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '7'\nassert solution('1') == '1'\n\"\"\"\n\nimport itertools\nimport math\nimport re\n\nn = int(input())\n\nmatrix = []\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\n\nrow_lst = []\ncol_lst = []\n\nfor i in range(n):\n    row_lst += matrix[i]\n    col_lst += list(zip(*matrix))[i]\n\nrow_lst = list(set(row_lst))\ncol_lst = list(set(col_lst))\n\nmatrix = [[matrix[i][j] for j in col_lst] for i in row_lst]\nrow_lst = list(itertools.chain.from_iterable(matrix))\ncol_lst = list(itertools.chain.from_iterable(zip(*matrix)))\n\nmatrix = [[matrix[i][j] for j in range(len(matrix[i])) if matrix[i][j]!= 0] for i in range(len(matrix))]\nrow_lst = list(itertools.chain.from_iterable(matrix))\ncol_lst = list(itertools.chain.from_iterable(zip(*matrix)))\n\nrow_lst = list(set(row_lst))\ncol_lst = list(set(col_lst))\n\nmatrix = [[matrix[i][j] for j in col_lst if matrix[i][j]!= 0] for i in range(len(matrix))]\nrow_lst = list(itertools.chain.from_iterable(matrix))\ncol_lst = list(itertools.chain.from_iterable(zip(*matrix)))\n\nrow_lst = list(set(row_lst))\ncol_lst = list(set(col_lst))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(1, n + 1))\n\nmatrix = [[matrix[i][j] for j in col_lst if matrix[i][j]!= 0] for i in range(len(matrix))]\nrow_lst = list(itertools.chain.from_iterable(matrix))\ncol_lst = list(itertools.chain.from_iterable(zip(*matrix)))\n\nrow_lst = list(set(row_lst))\ncol_lst = list(set(col_lst))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(1, n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(1, n + 1))\n\nmatrix = [[matrix[i][j] for j in col_lst] for i in row_lst]\nrow_lst = list(itertools.chain.from_iterable(matrix))\ncol_lst = list(itertools.chain.from_iterable(zip(*matrix)))\n\nrow_lst = list(set(row_lst))\ncol_lst = list(set(col_lst))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(1, n + 1))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(1, n + 1))\n\nrow_lst = list(range(n, 0, -1))\ncol_lst = list(range(1, n + 1))\n\nrow_lst = list(range(n, 0, -1))\ncol_lst = list(range(1, n + 1))\n\nrow_lst = list(range(n, 0, -1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n, 0, -1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(1, n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(1, n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(n + 1))\ncol_lst = list(range(n + 1))\n\nrow_lst = list(range(n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n1\n1\n3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2\n3\n1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '7'\nassert solution('3 2 2') == '5'\nassert solution('5 2 1') == '7'\nassert solution('3 2 1') == '3'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n''') == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3') == '7'\n\nSample Input:\n6\n1 2 3\n2 2 2\n4 2 1\n4 2 3\n1 2 3\n1 2 2\nSample Output:\n1\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n5 1\n1 5\n1 1\n5 2\n3 2\n2 5\n3 4\n3 1\n1 4\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n5\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\nSample Output:\n6\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n4\n2 1\n1 1\n1 2\n2 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '7'\nassert solution('2 2 2') == '6'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n3 2 2\n3 2 2\n3 2 1\n3 2 1\n3 2 3''') == '7'\n\nassert solution('''7\n2 4 2\n4 3 2\n3 4 1\n1 4 1\n3 4 3\n1 4 3''') == '16'\n\nassert solution('''5\n2 4 2\n4 3 2\n3 4 1\n1 4 1\n3 4 3''') == '10'"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n''') == '7'\n\"\"\"\nThe trees are growing very quickly, so the total height of the forest is very high, and there are no any trees in between any of the trees. The whole forest is enclosed in a square grid and every tree is of the same size.\n\nIn the next few questions, we will use the same forest to measure the heights and growth speed of trees."
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"20\""
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100') == '20'\nassert solution('1\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '20'\nassert solution('3 3') == '12'\n\"\"\""
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n10\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100\n\"\"\") == \"20\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100\n''') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '20'\nassert solution('5 2') == '20'\nassert solution('5 2') == '20'\nassert solution('5 2') == '20'\nassert solution('5 2') == '20'"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '5 2\\n' +\n    'linearalgebra 10\\n' +\n    'calculus1 10\\n' +\n    'calculus2 20\\n' +\n    'honorsanalysis1 50\\n' +\n    'honorsanalysis2 100') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '20'\nassert solution('5 2') == '20'\nassert solution('5 2') == '20'\nassert solution('5 2') == '20'\nassert solution('5 2') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '20'\nassert solution('1 2') == '2'\nassert solution('3 4') == '10'\nassert solution('4 6') == '12'\nassert solution('5 6') == '10'\n\"\"\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100\n''') == '20'\nassert solution('''\n1 5\nalg\nalg1\nalg2\ncal1\ncal2\n''') == '20'\nassert solution('''\n2 5\ncat\ncat1\ncat2\ncat3\ncat4\n''') == '20'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\nassert solution('''\n1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == '1'"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2\") == \"1\"\nassert solution(\"10 20 2\") == \"8\"\nassert solution(\"10 20 2\") == \"8\""
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\n'''\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '6'\nassert solution('6 3 3') == '0'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4') == '6'\nassert solution('4 4') == '6'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\nassert solution('''\n8 1 4\n1 2 1\n1 3 3\n2 4 2\n3 4 1\n4 5 4\n4 6 6\n5 5 5\n6 6 6\n''') == '7'\nassert solution('''\n3 3\n3 4 3\n1 4 3\n2 4 1\n2 3 3\n''') == '2'\nassert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\nassert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '10'"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n2\n1 3\n1 3\n''') == '6'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1 1\n2\n3\n1 2\n2 3 1''') == \"2\"\nassert solution('''3 1 1\n3\n2\n2 3 1''') == \"impossible\"\nassert solution('''3 1 1\n1\n2\n2 3 1''') == \"impossible\"\nassert solution('''3 1 1\n2\n2\n1 1''') == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5 3 1\n5\n1 3\n2 4\n1 2\n3 2\n1 1\n\"\"\") == \"impossible\""
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1') == 'impossible'\nassert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1') == '2'\n\n'''"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1') == '2'\nassert solution('1\\n3') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1\\n') == 'impossible'\nassert solution('3 5 2\\n3\\n4\\n1 2\\n2 3 1\\n1 1\\n') == '2'\nassert solution('5 6 3\\n4\\n3\\n1 2\\n2 3 1\\n1 1\\n') == 'impossible'"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 1') == 'impossible'\nassert solution('5 1 2') == '2'\nassert solution('5 2 2') == 'impossible'\nassert solution('8 1 3') == '3'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2') == 'impossible'\nassert solution('3 3 1\\n3 1 3\\n1 1 2') == '2'\nassert solution('2 3\\n1 1 2\\n3 3') == 'impossible'\nassert solution('4\\n3 2 4\\n1 1 3\\n2 2 4\\n2 1 1') == 'impossible'\nassert solution('2\\n2 2 2\\n2 2 2\\n1 1\\n2 2') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == \"impossible\"\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == \"impossible\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"500.00\"\nsys.stdin = open('input.txt')\nprint(solution())\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"500.00\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n250 250\\n250 750') == '500.00'\nassert solution('100\\n1 1\\n2 2') == '101.00'\nassert solution('1\\n1\\n1') == '0.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == '500.00'\nassert solution('''\n1\n250 250\n250 750\n''') == '750.00'\n'''"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n250 250\n250 750''') == '500.00'\nassert solution('''3\n100 100\n100 100\n100 100''') == '800.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2 3') == '500.00'\nassert solution('3\\n2 3') == '900.00'\nassert solution('10\\n2 2 1 1 1 2 2 3 3') == '1000.00'\nassert solution('10\\n2 2 2 3 3 3 3 3') == '1250.00'\nassert solution('100\\n1 2 3 1 2 2 2 2') == '100.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n10 10\n10 7\n5 5''') == '150.00'\nassert solution('''\n2\n0 0\n1 1''') == '1.00'\nassert solution('''\n2\n2 3\n1 2\n1 2''') == '3.00'\nassert solution('''\n3\n1 1\n1 3\n1 5''') == '3.00'\nassert solution('''\n3\n5 5\n5 3\n4 3''') == '4.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"500.00\"\nprint(solution())"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == '500.00'\n\n'''\n\nclass Solution:\n    def solution(self, stdin):\n        def distance(a, b):\n            return abs(a[0] - b[0]) + abs(a[1] - b[1])\n        \n        goat_cnt = int(stdin.splitlines()[0])\n        post_cnt = goat_cnt\n        goat_pos = []\n        post_pos = []\n        for i in range(goat_cnt):\n            goat_pos.append(list(map(int, stdin.splitlines()[i+1].split())))\n        for i in range(post_cnt):\n            post_pos.append(list(map(int, stdin.splitlines()[i+1].split())))\n        \n        max_distance = 0\n        for i in range(goat_cnt):\n            for j in range(i+1, goat_cnt):\n                distance = distance(goat_pos[i], goat_pos[j])\n                for k in range(post_cnt):\n                    if distance < distance(post_pos[k], goat_pos[i]) and distance < distance(post_pos[k], goat_pos[j]):\n                        distance = distance(post_pos[k], goat_pos[i]) + distance(post_pos[k], goat_pos[j])\n                if max_distance < distance:\n                    max_distance = distance\n        \n        return '%.2f' % max_distance"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '500.00'\nassert solution('10') == '20.00'\nassert solution('100') == '50.00'\nassert solution('300') == '100.00'\nassert solution('1000') == '500.00'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n2 100 10\n100 1 10\n''') == '0'\nassert solution('''\n2 5\n1 5 2 3 5\n''') == '4'\n'''\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3\n2 100 10\n100 1 10\n''') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '0'\nassert solution('4 5') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n2 100 10\n100 1 10\n''') == '0'\nassert solution('''\n3 5\n2 200 10 50 10\n100 10 30 50\n100 5 30 50\n''') == '101'\nassert solution('''\n3 5\n2 200 10 50 10\n100 10 30 50\n100 5 30 50\n''') == '101'\nassert solution('''\n2 5\n2 100 10\n100 10 30 50\n100 5 30 50\n''') == '0'\nassert solution('''\n3 5\n2 200 10 50 10\n100 10 30 50\n100 5 30 50\n''') == '101'\n'''"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '0'\n\n---Input is small enough to use a faster solution---"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '0'\nassert solution('1 0') == '1000000000'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n3 100 10') == '0'\nassert solution('4 4\\n1 1 1\\n2 2 2\\n1 2 2\\n4 5 5') == '0'\nassert solution('5 1\\n100 100 100 100 100\\n1 1 1 1 1\\n2 2 2 2 2\\n1 2 2 2 2\\n5 5 5 5 5\\n100 100 100 100 100\\n1 1 1 1 1') == '0'\nassert solution('4 5\\n100 100 100 100 100\\n1 1 1 1 1\\n2 2 2 2 2\\n1 2 2 2 2\\n4 5 5 5 5\\n100 100 100 100 100\\n1 1 1 1 1') == '0'\nassert solution('100 100 100 100 100\\n1 1 1 1 1\\n2 2 2 2 2\\n1 2 2 2 2\\n4 5 5 5 5\\n100 100 100 100 100\\n1 1 1 1 1') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"0\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"2 2 2\") == \"5\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 2') == '0'\nassert solution('3 3') == '3'\nassert solution('5 3') == '7'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '2'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '2'\nprint(solution('''\n80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n'''))\nassert solution('40 50 30 20\\n0 50 25 25 20\\n50 30 20 25 20\\n40 40 30 20 20') == '2'\nprint(solution('''\n40 50 30 20\n0 50 25 25 20\n50 30 20 25 20\n40 40 30 20 20\n'''))\nassert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '2'\nprint(solution('''\n80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n'''))\nassert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35\\n5 50 25 20 50 35\\n75 50 25 20 50 35\\n') == '3'\nprint(solution('''\n80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n'''))\nassert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '1'\nprint(solution('''\n0 50 25 20 50 35\n25 20 25 20 20\n50 25 20 20 20\n'''))\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 5 5\\n1 4\\n1 6 7 5\\n3 6\\n5 4\\n') == '2'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"2\"\n\nassert solution(\"\"\"75 5 25 20 50 35\n50 5 25 35\"\"\") == \"1\"\n\nassert solution(\"\"\"75 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"1\"\n\nassert solution(\"\"\"75 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"1\"\n\nassert solution(\"\"\"75 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"1\""
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3 3 1') == '2'\nassert solution('4 3 3 2') == '1'\nassert solution('4 3 3 3') == '0'\nassert solution('8 5 8 3 5 8 5 8') == '1'\nassert solution('10 5 10 10 10 10 10 10 10') == '2'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"2\"\nassert solution(\"\"\"30 20 5\n20 10 20 10\n10 30 20\"\"\") == \"1\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"2\"\n\nassert solution(\"\"\"25 30 3 3\n40 50 20 25\n50 20 50 40\n40 50 30 40\"\"\") == \"1\"\n\nassert solution(\"\"\"50 30 3 2\n40 50 20 25\n50 20 50 40\n40 50 30 40\"\"\") == \"1\"\n\nassert solution
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"80 50 3 2\\n\"\n    \"75 5 25 20 50 35\\n\"\n    \"50 5 25 35\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4 3 2') == '2'\nassert solution('10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n1112\n2211\n''') == 'AAAA'\nassert solution('''\n3 3\n1112\n1112\n1112\n''') == 'AAAA'\nassert solution('''\n3 3\n2211\n2211\n''') == 'AAAA'\n\n''') == 'AABBBB'\nassert solution('''\n3 2\n2211\n2211\n''') == 'AABBBB'\nassert solution('''\n3 3\n2211\n2211\n''') == 'AABBBB'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAABBBBBB\"\nassert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAABBBBBB\"\nassert solution(\"2 2\\n1 1\\n1 2\") == \"impossible\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"AAAA\\n...A\\n....\\n\"\nassert solution(\"6 5\") == \"AAAA\\n....\\n...B\\n...B\\nBBBB\\n...B\\n\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'AAAA'\nassert solution('2') == '..A'\nassert solution('3') == '....'\nassert solution('4') == '...C'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAA\\n...A\\n....\\n\"\nassert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAA\\n...A\\nBBBB\\n...B\\nCCCC\\n\"\nassert solution(\"3 4\\n2211\\n1112\\n1112\") == \"AAAA\\n...A\\nBBBB\\n...B\\nCCCC\\n\""
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n2211\n1112\n1112''') == \"AAAA\"\nassert solution('''5 5\n2211\n1111\n1111\n1111\n1111\n2211''') == \"BBBB\"\nassert solution('''3 5\n2211\n2211\n1111\n2211\n2211\n1111''') == \"BBBB\"\nassert solution('''5 5\n1111\n2211\n2211\n2211\n2211\n1111''') == \"BBBB\"\n\nprint('Tests passed')"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n4\\n2211') == 'AAAA'\nassert solution('2\\n3\\n2211') == 'BBBB'\nassert solution('3\\n2\\n2211') == '....'"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4') == 'AAABB'\nassert solution('3 3') == 'AAABC'"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1111\n2122\n2123\n''') == \"AAAABBBB\"\nassert solution('''\n4 3\n1111\n1111\n1111\n''') == \"AAAABBBB\"\nassert solution('''\n5 5\n2121\n2121\n2122\n2122\n2123\n''') == \"AAAABBBB\"\nassert solution('''\n3 3\n2211\n1112\n1112\n''') == \"AAAABBBB\"\nassert solution('''\n3 3\n2211\n1112\n1112\n''') == \"AAAABBBB\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"AAAABBBB\"\nassert solution(\"3 2\") == \"ABA\""
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '9'\nprint(solution('''1 1 2\n2 1 1 2\n'''))\nprint(solution('''1 1 2\n2 1 1 2\n'''))"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '13'\nassert solution('4 3 1 2 1') == '7'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3''') == '12'\nassert solution('''4\n2 2 2 1\n1 1 1 1\n1 2 2 2\n2 2 1 1''') == '2'\nassert solution('''3\n3 1 2 2\n2 1 1 2\n2 1 1 2''') == '3'\nassert solution('''8\n1 1 1 2\n2 1 2 1\n3 1 2 1\n4 1 4 1\n5 2 5 1\n6 1 6 1\n7 1 6 1\n8 2 2 2\n2 1 1 1\n1 4 3 3''') == '7'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 3 3\\n3 4 1 2 3 2\\n4 3 1 2 1\\n1 4 1 2 1 3') == '9'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '5'\nassert solution('4 3 1 2 1 3') == '7'\nassert solution('1 4 1 2 1 3') == '8'\nassert solution('3 1 3 2') == '3'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3 2 1') == '2'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '14'\nassert solution('4 3 1 2 1') == '1'"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '9'\n\nassert solution('''\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '18'\n\nassert solution('''\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '18'\n\nassert solution('''\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '18'\n\nassert solution('''\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '18'"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1 2\n3 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4\n1 2\n2 3\n1 2 3\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n1 4 1 2 1 3\n''') == '9'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '6 2 2 8\\n'\n    '0 0 6\\n'\n    '3 4 7\\n'\n    '0 8 8\\n'\n    '6 8 8\\n'\n    '6 0 6\\n'\n    '6 4 8\\n'\n    '3 4\\n'\n    '1 5\\n'\n) == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5') == '20.396078'\nassert solution('4 0 0 0\\n0 1\\n0 2\\n0 3\\n3 1\\n3 2\\n4 0\\n5 2\\n5 3\\n4 3') == 'IMPOSSIBLE'\n\n\"\"\"\n\nn, s, t, q = map(int, input().split())\n\nhills = []\nfor hill in range(n):\n    hills.append(list(map(int, input().split())))\n\nspring_counts = list(map(int, input().split()))\ntown_counts = list(map(int, input().split()))"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('0 0 6') == '20.396078'\nassert solution('3 4 7') == 'IMPOSSIBLE'\nassert solution('0 8 8') == '20.396078'\nassert solution('6 8 8') == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 2 2 8\") == \"20.396078\"\nassert solution(\"3 4 7\") == \"Impossible\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\") == \"20.396078\"\nassert solution(\"6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n\") == \"IMPOSSIBLE\"\nassert solution(\"20\\n4 2 4\") == \"IMPOSSIBLE\"\nassert solution(\"5 5 10\") == \"10\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5') == '20.396078'\nassert solution('5 1 4\\n4 4 7\\n3 8 7\\n3 8 0\\n4 4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('3 4') == 'IMPOSSIBLE'\n\nassert solution('3 4') == '5.000000'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2 2 8\") == \"20.396078\"\nassert solution(\"0 0 6\") == \"Impossible\"\nassert solution(\"3 4 7\") == \"10.657921\"\nassert solution(\"6 8 8\") == \"Impossible\"\nassert solution(\"6 0 6\") == \"5.714286\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('2 2 2 8') == '10.096078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"20.396078\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n') == 'b'\nassert solution('abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n') == 'c'\nassert solution('abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n') == 'd'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'c'\n\nassert solution('''\naa\ncc\ndd\nee\nff\ngg\nhh\nii\njj\nkk\nll\nmm\nnn\noo\npp\nqq\nrr\nss\ntt\nuu\nvv\nww\nxx\nyy\nzz\n''') == 'g'\n\nassert solution('''\naaaa\nbbbb\ncccc\ndddd\neeee\nffff\ngggg\nhhhh\niiii\njjjj\nkkkk\nllll\nmmmm\nnnnn\nooo\npppp\nqqqq\nrrrr\nssss\ntttt\nuuuu\nvvvv\nwwww\nxxxx\nyyyy\nzzzz\n''') == 'g'\n\nassert solution('''\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == 'g'\n\nassert solution('''\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == 'g'"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'b'\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n2\n3\n1 3\n''') == 'd'\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n4\n2\n1 2\n''') == 'e'\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n5\n3\n1 5\n''') == 'd'\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n6\n2\n1 6\n''') == 'a'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\") == \"bbb\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\") == \"ccc\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nabc\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'b'\nassert solution('''\nabc\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'd'"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\") == \"b\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n3\\n1\\n2\") == \"c\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n3\\n3\") == \"e\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n3\\n4\") == \"f\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n3\\n6\") == \"o\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abca') == 'b'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'c'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'n'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n\") == \"b\"\n\nSample Input:\nabcdefg\nabcdegfhijkl\nnopsvxqrstuvwzyz\n1\n2\n1 8\nSample Output:\na\nc\ne\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abca') == 'c'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'c'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 't'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(t1) == \"abc\"\nassert solution(t2) == \"cba\"\nassert solution(t3) == \"abccbaabc\"\nassert solution(t4) == \"bc\"\nassert solution(t5) == \"xy\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n') == '12'\nassert solution('3\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n') == '16'\nassert solution('2\\nhobotnica\\nrobot\\n') == '11'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''hobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija''') == \"12\\n10\\n16\\n7\"\nprint(solution('''hobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija'''))\nassert solution('''s\nt\nr\no\nb\no\nt\nc\nh\no\nt\nn\na\nc\nt\no\np\no\nr\ne\nt\ni\nn\na\ns\nt\ni\nn\ne\n''') == \"6\\n4\\n5\\n4\\n3\\n2\\n2\\n1\\n1\"\nprint(solution('''s\nt\nr\no\nb\no\nt\nc\nh\no\nt\nn\na\nc\nt\no\np\no\nr\ne\nt\ni\nn\na\ns\nt\ni\nn\ne\n'''))\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija''') == '12'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n\") == \"12\""
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n') == '12'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"15 12 10\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '10'\nassert solution('2') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(solution.__doc__) == '16'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\nhobotnica\\nrobot\\nhobi') == '12'\nassert solution('5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrakija') == '16'"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"JQ IRKEYFG EXQ\"\n) == \"THIS IS A TEST\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('1 1\\nA') == 'A'\n'''\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('\\n'.join(['JQ', 'IRKEYFG', 'EXQ'])) == 'THIS IS A TEST'\nassert solution('\\n'.join(['JQ', 'IRKEYFG', 'EXQ'])) == 'THIS IS A TEST'\nassert solution('\\n'.join(['JQ', 'IRKEYFG', 'EXQ'])) == 'THIS IS A TEST'\nassert solution('\\n'.join(['JQ', 'IRKEYFG', 'EXQ'])) == 'THIS IS A TEST'\nassert solution('\\n'.join(['JQ', 'IRKEYFG', 'EXQ'])) == 'THIS IS A TEST'\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\nA B C D\nE F G\nH I J\nK L\n''') == 'THIS IS A TEST'\nassert solution('''\n1 1\nA\n''') == 'A'\nassert solution('''\n1 1\nA\n''') == 'A'\n'''\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n14 4\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\nassert solution('''\n8 9\nA C D E F G\n''') == 'ABCDEFG'\nassert solution('''\n15 7\nB K Q X Y Z\n''') == 'BCKEZYZ'\nassert solution('''\n3 2\nX Y\n''') == 'XY'\nassert solution('''\n15 7\nA B C D E F G H I J\n''') == 'ABCDEFGHIJ'\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\n'''\n\n\n'''\n---Solution---\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('3 7\\nO'*1000000) == 'O'*1000000\n'''\nimport time\nimport numpy\nimport matplotlib.pyplot as plt\nfrom itertools import chain\n\nstart = time.time()\n\nn, x = map(int, input().split())\ntext = input()\n\na = numpy.array(list(range(n)), dtype=numpy.int)\nb = numpy.array(list(range(n, n*2)), dtype=numpy.int)\nc = numpy.array(list(range(n*2, n*3)), dtype=numpy.int)\nd = numpy.array(list(range(n*3, n*4)), dtype=numpy.int)\ne = numpy.array(list(range(n*4, n*5)), dtype=numpy.int)\n\nz = numpy.zeros(2**20 + 1, dtype=numpy.int)\n\nfor i in range(n):\n    z[a[i]] = ord(text[i]) - ord('A')\n    z[b[i]] = ord(text[i]) - ord('A') + 1\n    z[c[i]] = ord(text[i]) - ord('A') + 26\n    z[d[i]] = ord(text[i]) - ord('A') + 27\n    z[e[i]] = ord(text[i]) - ord('A') + 28\n\na_num = numpy.zeros(x + 1, dtype=numpy.int)\nb_num = numpy.zeros(x + 1, dtype=numpy.int)\nc_num = numpy.zeros(x + 1, dtype=numpy.int)\nd_num = numpy.zeros(x + 1, dtype=numpy.int)\ne_num = numpy.zeros(x + 1, dtype=numpy.int)\n\nfor i in range(x + 1):\n    a_num[i] = z[z + i]\n    b_num[i] = z[z + x + i]\n    c_num[i] = z[z + x*2 + i]\n    d_num[i] = z[z + x*3 + i]\n    e_num[i] = z[z + x*4 + i]\n\na = a_num\nb = b_num\nc = c_num\nd = d_num\ne = e_num\n\na = numpy.append(a, numpy.zeros(n*2, dtype=numpy.int))\nb = numpy.append(b, numpy.zeros(n*2, dtype=numpy.int))\nc = numpy.append(c, numpy.zeros(n*2, dtype=numpy.int))\nd = numpy.append(d, numpy.zeros(n*2, dtype=numpy.int))\ne = numpy.append(e, numpy.zeros(n*2, dtype=numpy.int))\n\na = numpy.append(a, numpy.zeros(n*3, dtype=numpy.int))\nb = numpy.append(b, numpy.zeros(n*3, dtype=numpy.int))\nc = numpy.append(c, numpy.zeros(n*3, dtype=numpy.int))\nd = numpy.append(d, numpy.zeros(n*3, dtype=numpy.int))\ne = numpy.append(e, numpy.zeros(n*3, dtype=numpy.int))\n\na = numpy.append(a, numpy.zeros(n*4, dtype=numpy.int))\nb = numpy.append(b, numpy.zeros(n*4, dtype=numpy.int))\nc = numpy.append(c, numpy.zeros(n*4, dtype=numpy.int))\nd = numpy.append(d, numpy.zeros(n*4, dtype=numpy.int))\ne = numpy.append(e, numpy.zeros(n*4, dtype=numpy.int))\n\na = numpy.append(a, numpy.zeros(n*5, dtype=numpy.int))\nb = numpy.append(b, numpy.zeros(n*5, dtype=numpy.int))\nc = numpy.append(c, numpy.zeros(n*5, dtype=numpy.int))\nd = numpy.append(d, numpy.zeros(n*5, dtype=numpy.int))\ne = numpy.append(e, numpy.zeros(n*5, dtype=numpy.int))\n\na = numpy.append(a, numpy.zeros(n*6, dtype=numpy.int))\nb = numpy.append(b, numpy.zeros(n*6, dtype=numpy.int))\nc = numpy.append(c, numpy."
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nSample Input:\n4 2\nHZC A PQA\nSample Output:\nZHZS HZCPQ A\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n14 4\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\n\nassert solution('''\n10 4\nABC ABC ABC\n''') == 'ABCABCABC'\n\nassert solution('''\n5 4\nACBABCD BCBABCD\n''') == 'ABBCABBD'\n\nassert solution('''\n7 4\nBAAABBBAAABBBBBAA\n''') == 'BAAABBBAAABBBBBAA'\n\nassert solution('''\n7 2\nAAA BBBBBBBBBBBB\n''') == 'AAA BBBBBBBBBBBB'"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2.6\") == \"135\"\nassert solution(\"2.6\") == \"270\""
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2.6\") == \"135\"\nassert solution(\"1.6\") == \"135135\"\nassert solution(\"5776\") == \"702702\"\nassert solution(\"2.78\") == \"No solution\""
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1.1') == '135'\nassert solution('2.6') == '135135'\nassert solution('5.6') == '270270'\nassert solution('9.6') == 'No solution'"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2.6') == '135'\nassert solution('0.000001') == '0'\nassert solution('0.6') == '0'\nassert solution('1.6') == '135'\nassert solution('2.1') == '135135'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2.6') == '135'\nassert solution('2.5') == '135135'\nassert solution('2.4') == '135135135'\nassert solution('2.3') == '135135135135'\nassert solution('2.2') == '135135135135135135'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2.6\") == \"135\"\nassert solution(\"5776\") == \"76\"\nassert solution(\"1.3\") == \"No solution\"\nassert solution(\"5.3\") == \"No solution\"\nassert solution(\"9.4\") == \"No solution\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    1.3\n    7.8\n    2.0\n    ''') == '135135270270'\n\nassert solution('''\n    1.2\n    7.9\n    2.0\n    ''') == '135135270270'\n\nassert solution('''\n    1.3\n    7.8\n    2.0\n    ''') == '135135270270'\n\nassert solution('''\n    2.3\n    7.8\n    2.0\n    ''') == '135135270270'\n\nassert solution('''\n    2.2\n    7.8\n    2.0\n    ''') == '135135270270'"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2.6') == '135'\nassert solution('4.6') == '135135'\nassert solution('6.7') == '135135'\nassert solution('5.6') == '135135'\nassert solution('4.5') == '135135'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2.6') == '135'\nassert solution('1.5') == '135135'\nassert solution('1.3') == '135135'\nassert solution('1.1') == '135135135'"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2.6\") == \"135\"\nassert solution(\"3.2\") == \"270\"\nassert solution(\"4.4\") == \"360\"\nassert solution(\"8.8\") == \"808080\"\nassert solution(\"4.3\") == \"420\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\nassert solution('''\n5\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\n'''\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4'\nassert solution('1\\n0 1') == '4'\nassert solution('2\\n3 4') == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '4'\nassert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3') == '2'\nassert solution('2\\n0 1\\n3 4\\n5 5\\n6 6\\n1 3\\n2 2\\n1 4\\n1 5\\n2 6\\n3 7\\n4 6\\n5 4\\n6 5') == '1'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\nassert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\nassert solution('''\n10\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\n\n'''\n===============================================================================================================\n===============================================================================================================\n===============================================================================================================\n\nTask 1\n\n===============================================================================================================\n===============================================================================================================\n===============================================================================================================\n\n\n--- Day 1: Report Repair ---\n\nAfter saving Christmas five years in a row, you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.\n\nThe tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them stars. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.\n\nTo save your vacation, you need to get all fifty stars by December 25th.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n\nBefore you leave, the Elves in accounting just need you to fix your expense report (your puzzle input); apparently, something isn't quite adding up.\n\nSpecifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.\n\nFor example, suppose your expense report contained the following:\n\n1721\n979\n366\n299\n675\n1456\nIn this list, the two entries that sum to 2020 are 1721 and 299. Multiplying them together produces 1721 * 299 = 514579, so the correct answer is 514579.\n\nOf course, your expense report is much larger. Find the two entries that sum to 2020; what do you get if you multiply them together?\n\n--- Part Two ---\n\nThe Elves in accounting are thankful for your help; one of them even offers you a starfish coin they had left over from a past vacation. They offer you a second one if you can find three numbers in your expense report that meet the same criteria.\n\nUsing the above example again, the three entries that sum to 2020 are 979, 366, and 675. Multiplying them together produces the answer, 241861950.\n\nIn your expense report, what is the product of the three entries that sum to 2020?\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_1) == \"4\"\nassert solution(input_2) == \"1\""
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '0'\nassert solution('1 4 1 4 5') == '1'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\") == \"4\""
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2') == '0.0000000 0.0000000'\nassert solution('3\\n1 2\\n1 3') == '0.0000000 0.0000000 -1.0000000 0.0000000'\n\"\"\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000''') == '1.0000000 0.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n1 2\n1 3\n1 4\n\"\"\") == \"\"\"0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\"\"\".strip()\n\nassert solution(\"\"\"4\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"\"\"0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\"\"\".strip()\n\nassert solution(\"\"\"5\n1 2\n1 3\n1 4\n1 5\n1 6\n\"\"\") == \"\"\"0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\"\"\".strip()\n\nassert solution(\"\"\"9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n4 5\n4 6\n4 7\n4 8\n4 9\n5 6\n5 7\n5 8\n5 9\n6 7\n6 8\n6 9\n7 8\n7 9\n8 9\n\"\"\") == \"\"\"0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n0"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n''') == '1.0000000 0.0000000\\n'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n''') == '0.0000000 0.0000000\\n'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n1.0000000 0.0000000\n0.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n''') == '1.0000000 0.0000000\\n'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n1.0000000 0.0000000\n0.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n''') == '0.0000000 0.0000000\\n'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n1.0000000 0.0000000\n0.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n''') == '0.0000000 0.0000000\\n'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\nassert solution(\"3\\n1 2\\n2 3\\n3 4\\n\") == \"0.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\"\nassert solution(\"2\\n1 2\\n\") == \"0.0000000 0.0000000\\n0.0000000 1.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('20\\n3 4\\n4 8\\n7 2\\n8 7\\n10 5\\n14 7\\n17 5\\n19 7\\n13 7\\n16 7\\n4 3\\n9 5\\n18 2\\n20 4\\n13 4\\n15 4\\n15 4\\n14 4\\n13 4\\n4 2\\n4 4\\n13 2\\n4 3\\n10 4\\n10 3\\n9 4\\n6 4\\n6 4\\n5 4\\n4 1\\n14 4\\n17 4\\n19 4\\n12 4\\n14 4\\n14 4\\n4 4\\n11 4\\n11 4\\n4 2\\n5 4\\n13 4\\n13 4\\n16 4\\n12 4\\n6 4\\n10 5\\n10 5\\n10 5\\n10 5\\n9 5\\n9 5\\n10 5\\n8 5\\n7 5\\n8 5\\n7 5\\n9 5\\n13 5\\n14 5\\n15 5\\n14 5\\n13 5\\n9 5\\n11 5\\n13 5\\n11 5\\n11 5\\n5 5\\n13 5\\n7 5\\n8 5\\n10 5\\n10 5\\n10 5\\n10 5\\n8 5\\n7 5\\n7 5\\n7 5\\n10 5\\n11 5\\n11 5\\n12 5\\n7 5\\n8 5\\n10 5\\n10 5\\n10 5\\n7 5\\n9 5\\n8 5\\n7 5\\n10 5\\n11 5\\n11 5\\n11 5\\n10 5\\n9 5\\n7 5\\n7 5\\n8 5\\n8 5\\n8 5\\n7 5\\n11 5\\n13 5\\n13 5\\n8 5\\n10 5\\n10 5\\n10 5\\n9 5\\n8 5\\n11 5\\n13 5\\n7 5\\n8 5\\n8 5\\n7 5\\n10 5\\n11 5\\n11 5\\n12 5\\n7 5\\n8 5\\n10 5\\n10 5\\n8 5\\n10 5\\n9 5\\n8 5\\n10 5\\n8 5\\n7 5\\n7 5\\n7 5\\n8 5\\n11 5\\n13 5\\n14 5\\n16 5\\n18 5\\n20 5\\n21 5\\n22 5\\n23 5\\n24 5\\n25 5\\n26 5\\n27 5\\n28 5\\n29 5\\n31 5\\n32 5\\n33 5\\n34 5\\n35 5\\n36 5\\n37 5\\n38 5\\n39 5\\n40 5\\n41 5\\n42 5\\n43 5\\n44 5\\n45 5\\n46 5\\n47 5\\n48 5\\n49 5\\n50 5\\n51 5\\n52 5\\n53 5\\n54 5\\n55 5\\n56 5\\n57 5\\n58 5\\n59 5\\n60 5\\n61 5\\n62 5\\n63 5\\n64 5\\n65 5\\n66 5\\n67 5\\n68 5\\n69 5\\n70 5\\n71 5\\n72 5\\n73 5\\n74 5\\n75 5\\n76 5\\n77 5\\n78 5\\n79 5\\n80 5\\n81 5\\n82 5\\n83 5\\n84 5\\n85 5\\n86 5\\n87 5\\n88 5\\n89 5\\n90 5\\n91 5\\n92 5\\n93 5\\n94 5\\n95 5\\n96 5\\n97 5\\n98 5\\n99 5\\n100 5\\n101 5\\n102 5\\n103 5\\n104 5\\n105 5\\n106 5\\n107 5\\n108 5\\n109 5\\n110 5\\n111 5\\n112 5\\n113 5\\n114 5\\n115 5\\n116 5\\n117 5\\n118 5\\n119 5\\n120 5\\n121 5\\n122 5\\n123 5\\n124 5\\n125 5\\n126 5\\n127 5\\n128 5\\n129 5\\n130 5\\n131 5\\n132 5\\n133 5\\n134 5\\n135 5\\n136 5\\n137 5\\n138 5\\n139 5\\n140 5\\n141 5\\n142 5\\n143 5\\n144 5\\n145 5\\n146 5\\n147 5\\n148 5\\n149 5\\n150 5\\n151 5\\n152 5\\n153 5\\n154 5\\n155 5\\n156 5\\n157 5\\n158 5\\n159 5\\n160 5\\n161 5\\n162 5\\n163 5\\n164 5\\n165 5\\n166 5\\n167 5\\n168 5\\n169 5\\n170 5\\n171 5\\n172 5\\n173 5\\n174 5\\n175 5\\n176 5\\n177 5\\n178 5\\n179 5\\n180 5\\n181 5\\n182 5\\n183 5\\n184 5\\n185 5\\n186 5\\n187 5\\n188 5\\n189 5\\n190 5\\n191 5\\n192 5\\n193 5\\n194 5\\n195 5\\n196 5\\n197 5\\n198 5\\n199 5\\n200 5\\n201 5\\n202 5\\n203 5\\n204 5\\n205 5\\n206 5\\n207 5\\n208 5\\n209 5\\n210 5\\n211 5\\n212 5\\n213 5\\n214 5\\n215 5"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.0000000 0.0000000 -1.0000000 0.0000000 1.0000000'\n\"\"\""
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '0.0 0.0\\n1.0 0.0\\n-1.0 0.0\\n0.0 1.0\\n0.0 -1.0'"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n\"\n\n\"\"\"\n\n--- Part Two ---\n\nNow, the company has gone through a significant amount of redesign, and you are happy with the new designs. It is easy to say that no two connections can intersect (i.e., there are no cycles). However, they also need to be on the same line, but they must be at least $10^{-6}$ apart.\n\nYou have a limited number of ways to arrange the new connections, but there must be an exact number.\n\nThe company has recently decided to give you a circular board, and it is sure that all the lines are going to be connected on a loop.\n\nYour task is to find a way to arrange the new connections so that the resulting graph is connected and that the lines are all on the same line.\n\nIn this problem, you can only place each connection point on the circuit board once.\n\n-----Input-----\nThe input consists of:\n - One line with one integer $n$ ($2 \\le n \\le 1000$), the number of connection points. The points are numbered from $1$ to $n$.\n - $n-1$ lines, each with two integers $a$ and $b$ ($1 \\le a,b \\le n$), describing a connection between $a$ and $b$.\n\nThe points are numbered from $1$ to $n$.\n\n-----Output-----\nOutput $n$ lines, the $i$th of which contains two real numbers $x_ i,y_ i$, the coordinates of point $i$. To make the production feasible, the following restrictions apply:\n - The distance between each pair of points should be at least $10^{-4}$.\n - The length of each edge should be $1$, up to an absolute error of at most $10^{-6}$.\n - Edges that are not incident to the same vertex should be at least a distance $10^{-6}$ apart.\n - The coordinates may not exceed an absolute value of $3000$.\n\nIf there are multiple valid solutions, you may output any one of them.\n\n-----Examples-----\nSample Input:\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n0.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n1.0000000 0.0000000\n1.0000000 -1.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n-1.0000000 0.0000000\n-1.0000000 -1.0000000\n\"\"\""
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n''') == '1'\nassert solution('''\n1\n2\n2\n''') == '2'\nassert solution('''\n5\naaa\na*a\n*a*a\nab*a\naba\na*a\na*a*a\n''') == '3'\nassert solution('''\n1\n2\n2\n''') == '1'\n'''\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 5\nb*a\nacb\n*b*a\nac*b\nb*a\n\"\"\") == \"2 3 1 1 1 1\"\nassert solution(\"\"\"\n4 4\naab\nbac\nabc\ncba\n\"\"\") == \"2 1 1 1\"\n\"\"\") == \"6 7 2 7 5\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '3 3\\n'\n    'aaa\\n'\n    'abc\\n'\n    'aba\\n'\n    'a*a\\n'\n    'aaa*\\n'\n    '*aaa\\n') == '2'\nassert solution(\n    '4 3\\n'\n    'abc\\n'\n    'abc\\n'\n    'ab*\\n'\n    'aba\\n') == '2'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\n''') == '2'\n\nassert solution('''\n4 3\naa\nbb\ncc\na*a\naaa*\n''') == '1 1 1 1'\n\nassert solution('''\n4 4\na*a\naa*\naaa*\naaa\na*a\na*a\na*a\n''') == '1 1 2 1 1'\n\nassert solution('''\n4 4\na*a\naa*\naaa*\naaa\na*a\na*a\na*a\n''') == '1 1 1 1 1'\n\nassert solution('''\n4 4\na*a\naa*\naaa*\naaa\na*a\na*a\na*a\n''') == '1 1 1 1 1'"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '1', \"Wrong answer\"\nassert solution('2\\n') == '0', \"Wrong answer\"\nassert solution('3\\n') == '1', \"Wrong answer\"\nassert solution('4\\n') == '1', \"Wrong answer\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\naaa\nabc\naba\na*a\naaa*\n*aaa\n\"\"\") == \"2\\n1\\n1\"\nassert solution(\"\"\"\n3\naaa\nabc\naba\na*a\naaa*\n*aaa\n\"\"\") == \"2\\n1\\n1\"\nassert solution(\"\"\"\n5\nabc\ncba\nde*f\naba\na*a\n\"\"\") == \"3\\n1\\n1\\n2\\n1\\n1\"\nassert solution(\"\"\"\n5\nabc\ncba\nde*f\naba\na*a\n\"\"\") == \"3\\n1\\n1\\n2\\n1\\n1\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa') == '2'\nassert solution('4 4\\naab\\nbba\\nbba\\n*b*') == '1'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3 3\n    aaa\n    abc\n    aba\n    a*a\n    aaa*\n    *aaa\n''') == '2'\nassert solution('''\n    4 6\n    *k*l\n    k*l\n    k*l\n    k*l\n    k*l\n    *k*l\n''') == '1'\nassert solution('''\n    3 4\n    *t*o\n    *e*\n    *p*\n    *p*\n    *p*\n''') == '1'\n\n'''\n\nimport sys\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '0'\n\nprint(solution('5'))\n\nSample Input:\n3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\nSample Output:\n2\n1\n1\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 1 1 1 1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\nassert solution('4 2\\nOO\\nOO\\nOX\\nOX\\nXO\\nXO\\nXO\\nXO\\n') == '0'\nassert solution('4 2\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\n') == '1'\nassert solution('4 2\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\nassert solution(\"3 2\\nXO\\nXO\\nOX\") == \"0\"\nassert solution(\"4 2\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nOX\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\nOX\nOX\nOX\n''') == '1'\nassert solution('''\n3 3\nOX\nOX\nXO\n''') == '0'\nassert solution('''\n2 2\nOX\nOX\n''') == '1'\nassert solution('''\n4 4\nOX\nOX\nOX\nOX\nOX\n''') == '1'\nassert solution('''\n4 4\nOX\nOX\nOX\nXO\n''') == '0'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\nassert solution(\"4 3\\nOXX\\nOXO\\nOXO\\nOXO\\nOXO\\nOXO\\nOOX\\nOOX\\n\") == \"0\"\nassert solution(\"4 3\\nOXX\\nOXO\\nOXO\\nOXO\\nOXO\\nOXO\\nOOX\\nOOX\\n\") == \"1\"\n\nTest cases\nSample input\n4 2\nOX\nOX\nOX\nOX\nOX\nOO\nXO\nOO\nSample output\n1\n0\n\nIf the pegs are all down, then the target board is the same as the starting board. If the pegs are all up, then the target board is the same as the starting board. If there is a hole in the middle of the target board, then the starting and target board are different.\n\nIf the target board is the same as the starting board, then the answer is 1. If the target board is different than the starting board, then the answer is 0.\n\nIf there is a hole in the middle of the target board, then the answer is 1. If there is no hole in the middle, then the answer is 0.\n\nIf the target board is different than the starting board, and there is a hole in the middle of the target board, then the answer is 1. If there is no hole in the middle, then the answer is 0.\n\"\"\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == \"1\", \"Wrong!\"\nassert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == \"0\", \"Wrong!\"\nassert solution('''\n3 2\nXO\nOX\nXO\n''') == \"0\", \"Wrong!\"\nassert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == \"1\", \"Wrong!\"\nassert solution('''\n10 3\nXO\nOX\nXO\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '0'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\nassert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '1'\nassert solution('''\n4 4\n
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 4\") == \"1\"\n\n-----------------\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n2 0\n0 2\n-2 0\n0 -2\n''') == \"16\"\n\nassert solution('''\n''') == \"0\"\n\nassert solution('''\n3\n1 0\n0 2\n0 -2\n''') == \"8\""
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 0\\n0 2\\n-2 0\\n0 -2') == '16'\nprint(solution('4\\n2 0\\n0 2\\n-2 0\\n0 -2'))\n\n'''\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 0\\n0 2\\n-2 0\\n0 -2') == \"16\""
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 0') == '16'\nassert solution('0 2') == '16'\nassert solution('-2 0') == '16'\nassert solution('0 -2') == '16'"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 0\n0 2\n-2 0\n0 -2\n''') == '16'\nassert solution('''\n3 0\n0 2\n0 -2\n''') == '3'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2 0\\n0 2\\n-2 0') == '16'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0') == '0'\nassert solution('0 2') == '2'\nassert solution('-2 0') == '0'\nassert solution('0 -2') == '2'\n\nstdin = '''\n2 0\n0 2\n-2 0\n0 -2\n'''\n\nstdin = '''\n2 0\n-1 1\n-2 0\n1 -1\n'''\n\nstdin = '''\n3\n-3 -2 1\n1 -3 2\n0 0 0\n'''\n\nstdin = '''\n5\n-4 -2 3 0\n-3 -2 -1 0\n1 -3 2 -4\n0 3 -1 -2\n-3 -4 -1\n'''\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '16'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 8 2 -2') == '80'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"80\"\n__import__('print').write(solution(stdin))\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n8 8 2 -2\") == \"80\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 10 50\n8 8 2 -2\n''') == '80'\n'''\n--- Part Two ---\nA few weeks later, Nick went to the forum to ask if you had any comments that need to be removed. Like before, they only asked for comments on either the alternating chain or its scores, but they also asked if they had to wait at least $k$ seconds before removing a comment.\n\nEach answer was either correct or incorrect.\n\nIf a comment is incorrect, it still exists in the forum; its score remains the same, and it is still removed. However, it is not possible to undo the removal because it's the only way for any comment to have a score of $0$. So the only way to remove a comment is to wait for it to have a score of $0$. To make the comment chain alternating after it had been removed, it is necessary to create an account.\n\nIt also takes $k$ seconds to create an account and use it to remove a comment. After the comment is removed, it is no longer in the forum. This result in the scores of all comments in the chain being either -1 or 1, which is also an alternating chain.\n\nNick can apply these operations in any order, any number of times. How fast can he make the comment chain alternating?\n\nFor example, consider Sample Input 2 below, where the scores in the comment chain are $5, 1, 2, -1$, and it takes Nick $10$ seconds to create an account and $50$ seconds to remove the last comment. In this case it is optimal to first remove the third comment, which leaves a comment with a score of $1$, and then report the first comment. This results in the scores $5, -1, 1$, which is an alternating chain. The time used for this is $90$ seconds.\n\n-----Input-----\nThe input consists of:\n - One line with three integers $n$, $c$, and $r$ ($1 \\leq n \\leq 5\\cdot 10^5$, $1 \\leq c,r \\leq 10^9$), the number of comments in the chain, the time it takes to create a fake account and the time it takes to remove a comment respectively.\n - One line with $n$ integers $s_1, \\ldots, s_ n$ ($-10^9 \\leq s_ i \\leq 10^9$ for all $i$), the current score of each comment in the chain.\n\n-----Output-----\nOutput the smallest time to make the comment chain alternating by applying the operations above.\n\n-----Examples-----\nSample Input:\n4 10 50\n8 8 2 -2\nSample Output:\n90\n\n'''"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 10 50\n8 8 2 -2\n''') == '80'\n\nassert solution('''\n2 5 6\n-5 1 4 6\n''') == '65'\n\nassert solution('''\n6 10 1\n-1 -1 5 1\n''') == '6'\n\nassert solution('''\n5 10 20\n-3 -1 4 -2 2\n''') == '20'\n\nassert solution('''\n5 10\n5 1 -2\n''') == '10'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 10 50') == '80'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4 10 50\n8 8 2 -2\n\"\"\") == \"80\"\n\nassert solution(\n\"\"\"\n5 10 40\n1 2 2 2 2\n\"\"\") == \"40\"\n\nassert solution(\n\"\"\"\n5 10 40\n-2 -2 -2 2 2\n\"\"\") == \"40\"\n\nassert solution(\n\"\"\"\n1 10 40\n2 2 2 2\n\"\"\") == \"40\"\n\nassert solution(\n\"\"\"\n10 10 10 10\n-2 -2 -2 -2 -2\n\"\"\") == \"30\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n1\n4\n1\n-1\n-2\n1\n-3\n4\n-4\n-5\n-6\n2\n-7\n3\n-8\n'''\n    ) == '80', 'Should return the time it takes to make the comment chain alternating'\n    assert solution(\n    '''\n2\n-3\n4\n-2\n3\n2\n-3\n2\n4\n-1\n1\n'''\n    ) == '60', 'Should return the time it takes to make the comment chain alternating'\n    assert solution(\n    '''\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 10 50\\n8 8 2 -2\") == \"80\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\nassert solution('''\n0 8\n1 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '2.92633828'\nassert solution('''\n0 8\n1 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.0'\nassert solution('''\n0 8\n1 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '2.92633828'\nassert solution('''\n0 8\n1 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '2.92633828'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '3.000000000'\nassert solution('5 1') == '4.9999999999'\nassert solution('5 9') == '4.9999999999'\nassert solution('3') == '2.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 8') == '4.000000000'\nassert solution('0 0 10 10') == '4.000000000'\nassert solution('5 1') == '1.000000000'\nassert solution('5 9') == '1.000000000'\nassert solution('3') == '1.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\"\"\") == \"3.000000000\"\nassert solution(\"\"\"1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n3\n3\n3\n3\n3\n3\n\"\"\") == \"9.0000000000\"\nassert solution(\"\"\"1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 8') == '0.000000000'\nassert solution('1 20') == '6.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3') == '3.000000000'\n\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n3\\n3') == '3.000000000'\n\nassert solution('10\\n-10 10\\n20 20\\n50 50\\n20 20\\n50 50') == '3.00000'\n\nassert solution('2\\n1 1\\n0 0') == '1.0'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 8\\n0 0 10 10\\n5 1\") == \"3.000000000\"\nassert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\") == \"8.000000000\"\nassert solution(\"1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6\") == \"11.000000000\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '3.000000000'\nassert solution('5 1') == '5.000000000'\nassert solution('5 9') == '5.000000000'\nassert solution('3') == '1.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\n\nassert solution('''10 1\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\n\nassert solution('''10 9\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\n\nassert solution('''1 9\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '2.000000000'\n\nassert solution('''10 0\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '0.000000000'"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\nassert solution_debug(None) == '1'"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 1') == '2'\nassert solution('8 1') == '2'\nassert solution('12 3') == '3'\nassert solution('15 3') == '4'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"3 5\") == \"1\"\nassert solution(\"10 5\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"7 5\") == \"1\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 3\n0 1 0 0\n1 2\n2 3\n2 4\n4 3\n4 2\n4 1\nSample Output\n1\n''') == '1'\n\nassert solution('''\n6 3\n0 1 0 0\n1 2\n2 3\n2 4\n4 3\n4 2\n4 1\nSample Output\n1\n''') == '1'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '4 3'\n    '0 1 0 0'\n    '1 2'\n    '2 3'\n    '2 4'\n    ) == '1'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"5 5\") == \"3\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n0 1 0 0\n1 2\n2 3\n2 4\n''') == '1'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_data) == \"1\"\n\"\"\"\n\nn, m = list(map(int, input().split()))\nfriends = []\nfor _ in range(m):\n    a, b = list(map(int, input().split()))\n    friends.append((a, b))\n\norange = 0\npurple = 0\n\nfor i in range(m):\n    if friends[i][0] == 1:\n        orange += 1\n    else:\n        purple += 1\n\norange_friends = [orange]\npurple_friends = [purple]"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\n\"\"\"\n\nn, m = map(int, stdin.split())\n\nfriends = []\nfor i in range(1, n):\n    friends.append([i, 0])\n\nfor _ in range(m):\n    a, b = map(int, stdin.split())\n    friends[a-1][1] += 1\n    friends[b-1][1] += 1\n\nfriends = sorted(friends)\n\nx = 0\ny = 0\nfor i in friends:\n    x += i[1]\n    y += 1\n    if x == y:\n        break\n\nprint(y)\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == \"1\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\nassert solution('6 4\\n0 0\\n0 1\\n1 2\\n0 2\\n2 0\\n1 3\\n2 1\\n3 2\\n2 3\\n1 0\\n3 1\\n2 0\\n1 2\\n3 1\\n2 1\\n0 0\\n1 1\\n2 1\\n2 0\\n1 2\\n0 0\\n0 1\\n1 0\\n2 0\\n1 2\\n0 0\\n0 1\\n2 0\\n1 2\\n0 1\\n1 2\\n1 1\\n2 2\\n1 0\\n1 2\\n2 1\\n1 1\\n1 1\\n2 1\\n2 0\\n1 1\\n1 2\\n2 2\\n2 0\\n0 2\\n0 1\\n2 2\\n2 1\\n2 2\\n1 0\\n2 2\\n2 1\\n1 1\\n1 0\\n1 1\\n1 1\\n2 1\\n2 0\\n2 0\\n2 0\\n1 2\\n2 1\\n1 0\\n2 1\\n1 1\\n2 1\\n2 1\\n2 1\\n1 1\\n1 1\\n1 1\\n2 1\\n2 1\\n1 2\\n1 1\\n2 1\\n1 1\\n2 1\\n1 1\\n2 1\\n1 1\\n1 2\\n1 1\\n2 1\\n1 1\\n1 2\\n1 2\\n2 1\\n2 1\\n2 0\\n1 1\\n2 1\\n1 2\\n2 1\\n2 1\\n1 1\\n1 2\\n1 0\\n1 1\\n2 1\\n2 1\\n0 2\\n0 2\\n0 1\\n1 0\\n0 1\\n1 1\\n0 1\\n0 1\\n0 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 1\\n1 1\\n1 0\\n1 0\\n1 0\\n1 0\\n1 1\\n1 1\\n0 1\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n0 1\\n0 1\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 1\\n0 1\\n0 1\\n1 1\\n0 0\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n0 1\\n1 1\\n1 1\\n0 0\\n0 1\\n0 1\\n0 1\\n1 0\\n1 1\\n0 1\\n0 1\\n1 1\\n0 1\\n1 0\\n0 1\\n1 1\\n0 1\\n1 1\\n1 1\\n0 1\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n1 1\\n0 1\\n1 0\\n0 1\\n1 1\\n0 1\\n0 1\\n1 1\\n1 0\\n1 1\\n1 1\\n0 1\\n1 0\\n0 0\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n0 0\\n0 1\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 1\\n0 1\\n0 0\\n0 1\\n0 1\\n1 0\\n1 1\\n1 1\\n1 0\\n1 1\\n1 1\\n0 1\\n0 1\\n1 1\\n0 1\\n1 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n1 0\\n1 1\\n0 1\\n1 1\\n1 0\\n1 1\\n0 1\\n1 1\\n1 0\\n1 1\\n1 0\\n1 1\\n1 1\\n1 0\\n1 0\\n1 0\\n1 0\\n0 0\\n0 1\\n0 0\\n0 0\\n1 0\\n1 1\\n0 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n1 1\\n1 0\\n1 1\\n0 1\\n1 0\\n0 0\\n1 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\nassert solution('2 2\\n0 0\\n0 1\\n1 0\\n1 1') == '1.5707963267949'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('5 5') == '22.06840261138916'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('5 5') == '7.574576'\nassert solution('3 3') == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == \"6.283185\"\nassert solution('1 2') == \"0.000277\"\nassert solution('2 5') == \"0.000250943740234375\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2''') == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"6.283185\""
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2\n1 3\n2 1\n\"\"\") == \"6.283185\"\nassert solution(\"\"\"\n1 1\n1 2\n2 1\n\"\"\") == \"6.283185\"\nassert solution(\"\"\"\n2\n3 1\n2 2\n\"\"\") == \"0.785398\"\nassert solution(\"\"\"\n2\n3 2\n2 3\n\"\"\") == \"1.5707963267949\"\nassert solution(\"\"\"\n5\n2 3\n1 2\n3 1\n4 2\n3 4\n\"\"\") == \"8.52361\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '1 2 3'\nassert solution(input()) == '1 3 5 2'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3 4\"\nassert solution(\"5\") == \"1 2 3 4 5\"\nassert solution(\"6\") == \"1 2 3 4 5 6\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0\n2\n3\n1\n''') == '1 2 3'\nassert solution('''\n0\n4\n5\n2\n8\n7\n3\n1\n''') == '1 2 3'\n'''\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2 3') == '1 2 3'\nassert solution('2\\n1 3') == '1 2 3'\nassert solution('3\\n1 2') == '1 2 3'\nassert solution('4\\n1 3 2') == '1 3 2 4'\nassert solution('5\\n1 3 2 4') == '1 3 2 4 5'\n\"\"\"\nfrom collections import deque\n\nn = int(input())"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1 2'\nassert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('10') == '1 2 3 4 5 6 7 8 9'"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"5\") == \"2 1 4 3\"\nassert solution(\"9\") == \"2 1 4 3 5 6 7 8\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"2\") == \"1 2\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n') == '1 2 3'\nassert solution('3\\n1 2 3\\n') == '1 2 3'\nassert solution('5\\n1 2 3 4 5\\n') == '1 2 3 4 5'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"1 2 3\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 2\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"1 2 3 4\""
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\nprint(\"All tests passed!\")\nassert solution() == \"2\"\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\nassert solution(\"2 4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '1'\nassert solution('4 5') == '2'\nassert solution('4 6') == '3'\nassert solution('3 3') == '1 2 3'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1 2'\nassert solution('4 4') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\nassert solution('''\n3\n1 2\n1 3\n2 4\n''') == '1 2 3 4'\nassert solution('''\n1\n1 2\n''') == '1 2'\nassert solution('''\n2\n1 2\n''') == '1 2'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n3 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\nassert solution(\n'''\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4\\n1 2\\n1 3\\n2 4') == '1 2 3 4'\nassert solution('5 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '1 2 3 4'\nassert solution('10 10\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 5\\n4 5') == '1 2 3 4'\nassert solution('10 10\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 5\\n4 5\\n5 6') == '1 2 3 4'\nassert solution('6 7\\n2 3\\n1 2\\n3 4\\n1 5\\n4 6\\n2 5') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n1 2\n1 3\n2 4\n3 4\n''') == '1'\nassert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1\\n1 2\\n') == '1'\n\nassert solution('2 2\\n1 2\\n2 1\\n') == '2'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n1 2\\n') == '1'\n\nassert solution('3 4\\n1 2\\n2 4\\n3 1\\n') == '2'\n\nassert solution('5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 4\\n') == '5'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 2\\n\") == \"1\"\nassert solution(\"4 3\\n1 2\\n1 3\\n2 3\\n\") == \"3\"\nassert solution(\"2 1\\n1 2\\n\") == \"1\"\nassert solution(\"3 5\\n1 2\\n1 3\\n3 2\\n\") == \"2\"\nassert solution(\"10 9\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\\n1 19\\n1 20\\n1 21\\n1 22\\n1 23\\n1 24\\n1 25\\n1 26\\n1 27\\n1 28\\n1 29\\n1 30\\n1 31\\n1 32\\n1 33\\n1 34\\n1 35\\n1 36\\n1 37\\n1 38\\n1 39\\n1 40\\n1 41\\n1 42\\n1 43\\n1 44\\n1 45\\n1 46\\n1 47\\n1 48\\n1 49\\n1 50\\n1 51\\n1 52\\n1 53\\n1 54\\n1 55\\n1 56\\n1 57\\n1 58\\n1 59\\n1 60\\n1 61\\n1 62\\n1 63\\n1 64\\n1 65\\n1 66\\n1 67\\n1 68\\n1 69\\n1 70\\n1 71\\n1 72\\n1 73\\n1 74\\n1 75\\n1 76\\n1 77\\n1 78\\n1 79\\n1 80\\n1 81\\n1 82\\n1 83\\n1 84\\n1 85\\n1 86\\n1 87\\n1 88\\n1 89\\n1 90\\n1 91\\n1 92\\n1 93\\n1 94\\n1 95\\n1 96\\n1 97\\n1 98\\n1 99\\n1 100\\n\") == \"3\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1\n1 2\n''') == '1'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1\\n1 2') == '1'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1\""
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\n1 2\n''') == '1'\nassert solution('''\n1 1\n1 2\n''') == '2'\nassert solution('''\n1 1\n1 2\n''') == '1'\n''')"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 2\\n\") == \"1\"\nassert solution(\"4 1\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\nassert solution(\"4 1\\n1 2\\n3 2\\n1 3\\n2 4\\n\") == \"3\"\nassert solution(\"4 1\\n1 2\\n2 3\\n2 4\\n2 5\\n3 4\\n\") == \"3\"\nassert solution(\"4 1\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n1 2\") == \"1\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10\n1\n3\n5\n8\n10\n''') == '45'\nassert solution('''\n13\n3\n5\n8\n10\n12\n''') == '100'\nassert solution('''\n15\n9\n14\n1\n8\n6\n2\n4\n10\n11\n13\n7\n''') == '330'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '45'\nassert solution('10') == '0'\nassert solution('20') == '100'\nassert solution('100') == '10000'\nassert solution('10') == '0'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '45'\nassert solution('4') == '12'\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '45'\n\nSample Input:\n2\nSample Output:\n0\n\"\"\""
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"45\""
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '45'\nassert solution('1000') == '11156547075292934116855706023618772367287935093209403637165212932489090766069781444188949693633454434845254515163616458325971092722038463394232441101093689629753303782643267855122301093'\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '45'\nassert solution('1000000') == '8967'\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '10'\nassert solution('3') == '30'\nassert solution('4') == '60'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '45'\nassert solution('10') == '700'\nassert solution('100') == '1440'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"3\"\nassert solution(\"100000\") == \"55\"\nassert solution(\"100000000\") == \"3141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367895889783680633895534581284197113020995735852875962349671305468261938526316697238944730953125\"\n\"\"\"\n\nstdin = input()\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 20 20\") == \"4\"\n\"\"\"\n\n\"\"\"\n\u89e3\u9898\u601d\u8def\uff1a\n\u7b2c\u4e00\u79cd\uff1a\u4f7f\u7528\u4ece\u5927\u5230\u5c0f\u7684\u65b9\u6cd5\uff0c\u53ea\u9700\u8981\u904d\u5386\u4e24\u6b21\u6570\u7ec4\uff0c\u53d6\u6700\u5c0f\u503c\uff0c\u904d\u5386\u5f97\u5230\u6700\u5927\u503c\n\u7b2c\u4e8c\u79cd\uff1a\u9996\u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u5728\u4e24\u6b21\u904d\u5386\u5f97\u5230\u6700\u5927\u503c\u7684\u65f6\u5019\uff0c\u9009\u62e9\u6700\u5927\u503c\u7684\u524dn-1\u4e2a\u503c\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"5 20 20\n7 11 9 12 2\n\"\"\") == \"4\"\nprint(\"All tests passed!\")"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 20 20\\n7 11 9 12 2\") == \"4\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 20 20\\n7 11 9 12 2\"\n) == \"4\"\nprint(solution(\n    \"5 20 20\\n7 11 9 12 2\"\n))"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 20 20\") == \"4\"\nassert solution(\"7 11 9 12 2\") == \"6\"\nassert solution(\"7 1 9 12 2\") == \"7\"\nassert solution(\"3 1 9 12 2\") == \"2\"\nassert solution(\"5 3 9 12 2\") == \"1\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 20 20\n7 11 9 12 2\n''') == '4'\nassert solution('''\n10 10 10\n3 8 8 8\n''') == '1'\nassert solution('''\n20 20 20\n7 11 9 12 2\n''') == '2'\nassert solution('''\n5 20 20\n20 20 20\n''') == '1'\n''')"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 20 20') == '4', 'Should be 4'\nassert solution('7 11 9 12 2') == '3', 'Should be 3'\n\n'''"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 20 20') == \"4\"\nassert solution('7 11 9 12 2') == \"4\"\nassert solution('5 3 5') == \"1\"\nassert solution('5 6 9') == \"3\"\nassert solution('4 4 4') == \"1\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 20 20\n10 20 15\n''') == '4'\n\nassert solution('''\n3 20 20\n7 20 8\n''') == '1'\n\nassert solution('''\n5 20 20\n10 10 5 1\n''') == '1'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 20 20\") == \"4\"\nassert solution(\"7 11 9 12 2\") == \"4\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 4\njoe 1 antonio1\njoe 1 antonio1\njoe 1 antonio1\njoe 1 antonio1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 4\njoe 1 antonio1\njoe 1 antonio1\njoe 1 antonio1\njoe 1 antonio1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 3\njane 1 antonio1\njane 1 antonio1\njane 1 antonio1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == \"2\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '2'\nassert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '2'\nassert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\n') == '1'\nassert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 harrypotter1\\n') == '1'\nassert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 harrypotter1\\n') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\") == \"2\""
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings') == '2'\nassert solution('10 5\\nkenny 10 harrypotter1\\ncharlie 10 lordoftherings\\njenny 10 harrypotter1\\nlaura 10 lordoftherings') == '3'\nassert solution('10 20\\nkenny 10 harrypotter1\\ncharlie 10 lordoftherings\\njenny 10 harrypotter1\\nlaura 10 lordoftherings') == '1'"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\nkenny harrypotter 1\\ncharlie 1 lordoftherings\\njenny harrypotter 1\\nlaura harrypotter 1\\n') == \"2\"\nassert solution('2 2\\nkenny harrypotter 1\\ncharlie 1 lordoftherings\\njenny harrypotter 1\\nlaura harrypotter 1\\n') == \"1\"\nassert solution('2 2\\ncharlie harrypotter 1\\njenny harrypotter 1\\nlaura harrypotter 1\\n') == \"1\"\nassert solution('2 3\\nkenny harrypotter 1\\ncharlie harrypotter 1\\njenny harrypotter 1\\nlaura harrypotter 1\\n') == \"1\"\nassert solution('1 1\\n') == \"1\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings') == '2'\nassert solution('3 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 harrypotter1') == '2'\nassert solution('10 2\\njenny 1 harrypotter1\\nlaura 1 harrypotter1\\nkenny 1 harrypotter1\\nharrypotter 1 harrypotter1\\ncharlie 1 harrypotter1\\nlaura 1 harrypotter1\\nharriet 1 harrypotter1\\nharrypotter 1 harrypotter1\\nkenny 1 harrypotter1') == '3'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '2'"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"2 1\"\nassert solution(\"0\") == \"0 0\"\nassert solution(\"111\") == \"3 1\"\n\"\"\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\n01') == '2 1'\nassert solution('2 2\\n00 01') == '3 2'\n\n'''\n\nk = int(input())\nli = input()\ncount = 1\nflag = 0\nls = []\nfor i in range(0,k):\n    ls.append(li[i])\nprint(ls)\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '2 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"1 2\"\n\nstdin = \"\"\"\n3\n100\n1 1\n0\n1 1\n1 1\n1 0\n0\n0\n1 1\n0\n0\n1 1\n1 1\n1 0\n1 1\n0\n0\n0\n1 1\n1 1\n0\n0\n1 1\n0\n0\n0\n1 1\n0\n0\n1 1\n1 1\n0\n1 1\n0\n0\n1 1\n1 1\n0\n1 1\n0\n0\n0\n1 1\n0\n0\n1 1\n0\n0\n1 1\n0\n0\n1 1\n0\n0\n0\n1 1\n1 1\n0\n0\n0\n1 1\n0\n0\n1 1\n1 1\n0\n1 1\n0\n0\n1 1\n1 1\n0\n1 1\n0\n0\n1 1\n0\n0\n1 1\n1 1\n0\n1 1\n0\n0\n0\n0\n1 1\n0\n0\n0\n0\n0\n0\n1 1\n1 1\n0\n0\n0\n0\n0\n0\n1 1\n1 1\n0\n0\n1 1\n0\n0\n1 1\n1 1\n0\n0\n0\n1 1\n1 1\n0\n0\n1 1\n1 1\n0\n0\n0\n1 1\n0\n0\n1 1\n0\n0\n0\n1 1\n1 1\n0\n0\n1 1\n1 1\n0\n0\n0\n1 1\n0\n0\n0\n0\n0\n1 1\n1 1\n0\n0\n0\n1 1\n0\n0\n1 1\n1 1\n0\n0\n0\n0\n0\n1 1\n0\n0\n0\n0\n0\n0\n0\n1 1\n1 1\n0\n0\n1 1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1 1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1 1\n1 1\n0\n0\n1 1\n1 1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1 1'\nassert solution('01') == '2 1'\nassert solution('11') == '2 2'\nassert solution('001000111') == '2 4'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '2 1'\nassert solution(input()) == '2 3'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"01\") == \"1 1\"\nassert solution(\"00\") == \"1\"\nassert solution(\"111\") == \"2 2\"\nassert solution(\"01100000\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n00\n1\n0\n''') == '2 1'\n\nassert solution('''\n4\n00\n11\n11\n''') == '1 4'\n\nassert solution('''\n6\n00\n10\n01\n11\n00\n''') == '3 3'\n\n'''\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n1 0\n1 0\n1 1\n''') == '1 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n01\") == \"1 2\"\nassert solution(\"1\\n00\") == \"1 1\"\nassert solution(\"1\\n11\") == \"1 1\"\nassert solution(\"1\\n11\") == \"1 1\"\nassert solution(\"1\\n00\\n01\\n11\") == \"1 2 2\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n5\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Input:\n5\n3\n2 1\n1 1\n2 2\n2 2\n3 1\nSample Output:\n4 5\n2 1\n1 1\n22\n2 1\n2 2\n2 2\n3 1\n\"\"\") == \"2 2\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n3\n1 1\n1 1\n2\n1 2\n1 1\n\"\"\") == \"2 2\\n3 3\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n4 4\n2 3\n1 2\n3 2\n1 3\n3 2\n1 2\n1 1\n3 2\n3 2\n1 1\n3 2\n2 1\n1 3\n3 2\n2 1\n3 2\n\"\"\") == \"3 2\"\n\nassert solution(r\"\"\"\n4 4\n2 3\n1 2\n3 2\n1 3\n3 2\n1 2\n1 1\n3 2\n3 2\n1 1\n3 2\n\"\"\") == \"2 1\"\n\nassert solution(r\"\"\"\n2 3\n2 2\n2 2\n\"\"\") == \"2 2\"\n\nassert solution(r\"\"\"\n1 2\n\"\"\") == \"1 2\"\n\nassert solution(r\"\"\"\n3 3\n1 2\n3 3\n1 2\n\"\"\") == \"3 3\""
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4 3'\nassert solution('1\\n3') == '1 2 3'\nassert solution('2\\n') == '2'\nassert solution('4\\n') == '4'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n4 1\\n2 123\\n2 2\\n21\\n10\") == \"3 3\\n2123\\n1012\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Input:\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n''') == '''2123\n1012\n2233\n2233\n'''\n\nassert solution('''\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n''') == '''3 4\n2123\n1012\n2233\n2233\n'''\n\nassert solution('''\n5 1\n1\n1 2\n1 3\n1 4\n1 5\nSample Output:\n1\n1\n1\n1\n1\n1\n''') == '''3 3\n12\n23\n12\n13\n12\n'''\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Input:\n4\n4 1\n2 123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2 123\n1012\n2123\n----\n2233\n2233\n1111\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '4 3'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '4 3'\nassert solution('4 2') == '12'\nassert solution('10 10') == '1012'"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'pango\\nxorg-x11\\nfreetype\\nglib2\\nzlib\\nglib2\\nlibjpeg\\nlibtiff\\npcre\\nxorg-x11\\nlisp\\nfreetype\\npcre\\n'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\natk\\nfreetype\\nglib2\\npango\\nxorg-x11-libs\\nlisp\\npcre\\n0\\n\""
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\npango\\nzlib\\ngtk2\\nvim-X11\\n'\n\n'''\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n12\ngcc\nlibc\npython\nbzip2\ngo\nzlib\nlibtiff\nxz\nzstd\nliblzma\nzstd\ngzip\nlibgcc\ngcc\nzlib\npython3\nbzip2\nzlib\nzstd\nzstd\ngzip\nzstd\n''') == 'bzip2 zstd go libc gcc liblzma liblzma zlib python zstd python3 zstd gzip zlib zlibzstd libzlib libzstd libzstd liblzma liblzma libzstd libzstd zlib zstd gzip libgcc libzlib liblzma liblzma libzstd libzstd libzstd libzstd libzstd zstd zstd gzip libgcc libzlib liblzma liblzma libzstd libzstd libzstd libzstd zstd zstd gzip liblzma liblzma zstd zstd gzip zstd libgcc libzlib liblzma liblzma zstd zstd gzip zstd libzstd libzstd libzstd zstd libzstd gzip zstd liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzlib libzlib zstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip liblzma liblzma zstd zstd gzip libzlib libzlib zstd libzstd libzstd zstd gzip liblzma liblzma zstd zstd gzip zstd libgcc libzlib liblzma liblzma zstd zstd gzip zstd libzstd libzstd libzstd zstd gzip liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzlib libzlib zstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip liblzma liblzma zstd zstd gzip zstd libgcc libzlib liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip liblzma liblzma zstd zstd gzip libzlib libzlib zstd libzstd libzstd zstd gzip libzstd libzstd libzstd zstd gzip zstd libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip liblzma liblzma zstd zstd gzip zstd libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip zstd libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd zstd gzip libzstd libzstd libzstd zstd gzip libgcc libzlib liblzma liblzma zstd z"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0\\n') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\npango\\nzlib\\ngtk2\\nxorg-x11-libs\\nvim-X11\\nxorg-x11\\nglib2\\nfreetype\\npcre\\n'"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"atk\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk,grep,libjpeg,freetype,gtk2,libattr,libtiff,pango,pcre,xorg-x11-libs,vim-common,vim-X11,emacs,libattr,freetype,zlib,atk,pango,libjpeg,libtiff,glib2,pcre,pcre,gtk2,freetype,xorg-x11,xorg-x11-libs,freetype,pcre,xorg-x11,pango,zlib,gtk2,pango,libattr,lisp,atk,grep,pango,glib2,pcre,freetype,xorg-x11,gtk2,pango,xorg-x11-libs,pcre,freetype,gtk2,lisp,atk,pango,pcre,pcre,emacs,freetype,xorg-x11,freetype,gtk2,pango,xorg-x11,freetype,gtk2,xorg-x11,freetype,pcre,emacs,grep,xorg-x11,emacs,libattr,gtk2,xorg-x11,xorg-x11-libs,zlib,freetype,atk,pango,xorg-x11,xorg-x11-libs,gtk2,freetype,pcre,pcre,lisp,atk,freetype,xorg-x11,xorg-x11-libs,pango,freetype,gtk2,xorg-x11,gtk2,freetype,gtk2,xorg-x11,gtk2,freetype,pcre,gtk2,freetype,gtk2,pango,gtk2,pango,gtk2,pango,freetype,xorg-x11,pango,xorg-x11,xorg-x11-libs,freetype,pcre,gtk2,gtk2,gtk2,gtk2,pango,gtk2,pango,gtk2,pango,gtk2,xorg-x11,freetype,pango,xorg-x11,freetype,pango,freetype,gtk2,freetype,freetype,pango,pango,pango,pango,freetype,xorg-x11,pango,pango,xorg-x11,pango,xorg-x11,gtk2,gtk2,freetype,freetype,pango,freetype,pango,freetype,xorg-x11,freetype,pango,gtk2,gtk2,freetype,gtk2,pango,xorg-x11,gtk2,pango,freetype,gtk2,pango,gtk2,pango,gtk2,pango,freetype,pcre,atk,xorg-x11,xorg-x11-libs,freetype,gtk2,pango,xorg-x11,gtk2,pango,freetype,xorg-x11,gtk2,pango,xorg-x11,freetype,pcre,pcre,freetype,pcre,gtk2,gtk2,pango,gtk2,xorg-x11,freetype,pango,xorg-x11,gtk2,xorg-x11,pango,xorg-x11,gtk2,xorg-x11,gtk2,xorg-x11,xorg-x11-libs,xorg-x11,gtk2,xorg-x11,xorg-x11-libs,gtk2,xorg-x11,gtk2,xorg-x11,xorg-x11-libs,xorg-x11,xorg-x11,gtk2,gtk2,pango,xorg-x11,pango,gtk2,pango,freetype,xorg-x11,pango,xorg-x11,freetype,xorg-x11,xorg-x11-libs,xorg-x11,xorg-x11-libs,gtk2,xorg-x11,xorg-x11,xorg-x11,xorg-x11-libs,freetype,xorg-x11,pango,gtk2,xorg-x11,xorg-x11,pango,xorg-x11,gtk2,pango,xorg-x11,xorg-x11,xorg-x11,xorg-x11-libs,xorg-x11,xorg-x11,gtk2,xorg-x11,gtk2,xorg-x11,gtk2,xorg-x11,xorg-x11,gtk2,xorg-x11,gtk2,xorg-x"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('14\\nlibattr\\nvim-common\\ngtk2 libattr\\nvim-common\\nglibtiff\\natk\\npango\\nglib2\\natk') == 'atk\\npango\\nglib2\\nlibattr\\ngtk2\\nvim-common\\nxorg-x11-libs\\nfreetype\\npcre\\n'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n12\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk freetype gtk2 libattr libjpeg pango glib2 vim-X11 pango xorg-x11 lisp pcre grep pcre xorg-x11-libs freetype vim-common gtk2 zlib libtiff atk libattr libjpeg libtiff libjpeg zlib libattr libjpeg atk zlib libjpeg pango zlib freetype freemit gtk2 xorg-x11 xorg-x11-libs freetype vim-X11 vim-common gtk2 pango glib2 pango glib2 pango freetype freemit gtk2 xorg-x11 xorg-x11-libs pango freetype freemit gtk2 gtk2 xorg-x11 xorg-x11-libs freetype pango xorg-x11 xorg-x11-libs freetype freemit\n'''\nSample Input:\n9\npandas datetime\npandas datetime\npandas datetime\nmatplotlib\nmatplotlib\nnumpy\nnumpy\nmatplotlib\npandas\npandas\nnumpy\nnumpy\nmatplotlib\nnumpy\nmatplotlib\npandas\n0\nSample Output:\npandas matplotlib numpy datetime\nnumpy matplotlib pandas datetime\nmatplotlib matplotlib pandas datetime\nnumpy numpy pandas matplotlib pandas\nmatplotlib numpy pandas numpy\nnumpy numpy pandas numpy\npandas pandas pandas\n0\n'''\nimport collections\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nclass TestSolution(unittest.TestCase):\n    def test_given_cases(self):\n        for n, case in enumerate(stdin.split('\\n')[:-1]):\n            data = case.split()\n            n_packages = int(data[0])\n            packages = collections.deque(data[1:])\n            order = collections.deque()\n            for i in range(n_packages):\n                package = list(packages)\n                if not package:\n                    break\n                order.append(package.pop(0))\n            order_str =''.join(sorted(order))\n            if n == 0:\n                if order_str!= 'cannot be ordered':\n                    print(order_str)\n                    break\n            else:\n                if order_str!= ''.join(sorted(set(order_str))):\n                    print(order_str)\n                    break\n        "
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nvim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\nfreetype') == 'atk\\nfreetype\\npango\\nzlib\\nglib2\\nglib2\\nlibjpeg\\nlibattr\\nvim-common\\ngtk2\\nxorg-x11-libs\\nxorg-x11\\npango\\n'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '12'\nassert solution('1 5') == '18'\nassert solution('4 8') == '16'\nassert solution('3 2') == '3'\nassert solution('1 2') == '12'\n\nimport sys\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('32 20') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"16\"\nassert solution(\"9 2\") == \"16\"\nassert solution(\"11 1\") == \"10\"\nassert solution(\"18 1\") == \"10\"\nassert solution(\"20 1\") == \"10\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('32 20') == '16'\nassert solution('-10 2') == '8'"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"32 20\") == \"16\""
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"32 20\") == \"16\""
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '16'"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"32 20\") == \"16\""
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n....\n.#.#\n....\n''') == '13'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 5\n.########\n.########\n.##...#.\n.###..#.\n#########\n#########\n#########\n#########''') == '13'"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 4\n....\n.#.#\n....\n\"\"\") == \"5 13\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n....\n...#\n''') == '2 3'\n\nassert solution('''3 3\n....\n...#\n''') == '1 2'\n\nassert solution('''3 3\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '2'\nassert solution('1 2') == '3'\nassert solution('1 3') == '3'\nassert solution('1 4') == '4'\nassert solution('2 1') == '5'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n...#\n...#\n.###\n''') == '5 13'\n\nassert solution('''\n4 3\n###\n##.\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n8 8\n...##...\n..##..#.\n.##...##\n##...#..\n.###.###\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4\\n...#\\n.#.#\\n....') == \"13\"\n\nassert solution('3 3\\n...##\\n#.###\\n.###.\\n.####\\n') == \"0\"\n\nassert solution('4 4\\n.##.\\n...#\\n###.\\n#...\\n') == \"4\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\\\n3\n...\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n1\\n2\\n') == '5 13'\nassert solution('1\\n2\\n1\\n2\\n') == '5 13'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '5'\nassert solution('5 4') == '4'\nassert solution('3 4') == '5'\nassert solution('9 9') == '7'\nassert solution('1') == '?'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"1 2 5 1\") == \"5\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"1 2 5 1\") == \"5\"\nassert solution(\"3 3\") == \"5\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 2 5 1\n2 3 3 1\n3 1? 0''') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '5'\nassert solution('4 3') == '4'\nassert solution('5 4') == '5'\nassert solution('6 5') == '5'\nassert solution('7 5') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\\n') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '5'\nassert solution('1 2 5 1') == '5'\nassert solution('2 3 3 1') == '1'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\n\n'''\n    def solution(stdin: str) -> str:\n        pass\n    return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        return \"\"\n'''\n'''\nclass Solution(object):\n    def solution(self, stdin: str) -> str:\n        pass\n        "
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\") == \"5\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n    1 2\n    2 3\n    3 1\n    ''') == '5'\n\nassert solution(\n    '''\n    3 3\n    1 2 5 1\n    2 3 3 1\n    3 1? 0\n    ''') == '5'\n\nassert solution(\n    '''\n    1 2\n    2 3\n    3 1\n    ''') == '5'\n\nassert solution(\n    '''\n    1 2\n    2 3\n    3 1\n    ''') == '5'\n\nassert solution(\n    '''\n    1 2\n    2 3\n    3 1\n    ''') == '5'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '5'\n\"\"\"\n\n###############################################################################\n##\n## Sample Inputs\n##\n###############################################################################\n\nTEST_INPUT_1 = '''\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n'''\n\nTEST_INPUT_2 = '''\n3 5\n2 1 7 5\n1 3 5 1\n5 3? 3\n3 1 2 1\n'''\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n-1 0\n-1 1\n0 1\n''') == '0'\nassert solution('''\n2 3\n-1 0\n1 -1\n0 1\n''') == '1'\nassert solution('''\n2 3\n-1 0\n1 0\n0 1\n''') == '2'\nassert solution('''\n2 3\n-1 0\n1 1\n0 1\n''') == '2'\nassert solution('''\n2 3\n-1 0\n1 2\n0 1\n''') == '2'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 2') == '1'\nassert solution('2 1') == '1'\nassert solution('3 1') == '2'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '0'\nassert solution('1 4') == '1'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3') == '0'\nassert solution('2\\n4 2\\n3') == '3'"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3\n-1 0\n-1 1\n0 1\n''') == '3'\nassert solution('''\n1 4\n0 0\n0 0\n1 0\n''') == '4'\nassert solution('''\n5 6\n0 0\n1 0\n0 0\n0 0\n0 0\n''') == '5'\nassert solution('''\n2 3\n-1 0\n-1 1\n0 1\n''') == '2'"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '0'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\") == \"3\"\nassert solution(\"10 100\\n1 0\\n1 1\\n10 1\\n20 1\\n5 10\\n5 20\\n3 10\\n3 20\\n5 20\\n8 20\\n0 10\\n8 10\\n15 10\\n0 20\\n15 20\\n6 20\") == \"10\"\nassert solution(\"10 10\\n10 20\\n2 20\\n2 20\\n5 10\\n5 20\\n3 10\\n3 20\\n5 20\\n8 20\\n0 10\\n0 20\\n15 10\\n15 20\\n6 20\") == \"10\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n-1 0\n-1 1\n0 1\n''') == '0'\nassert solution('''\n1 7\n0 1\n0 2\n0 3\n1 4\n0 5\n1 6\n''') == '4'\n'''\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4\\n-1 -1') == '3'\nassert solution('4 2\\n-1 1') == '2'\nassert solution('3 1\\n-1 -1') == '2'\n\"\"\""
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2 3\n-1 0\n-1 1\n0 1\n\"\"\") == \"0\""
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\n') == '0'\nassert solution('5 7\\n') == '4'\nassert solution('13 30\\n') == '14'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n3\n4\n6''') == '4'\nassert solution('''2\n2\n3\n2''') == '3'\nassert solution('''3\n3\n4\n3''') == '2'\nassert solution('''4\n3\n4\n2''') == '3'\nassert solution('''5\n1\n1\n1''') == '5'"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"3\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n9 6 2 4') == '6'\nassert solution('2\\n7 9 8 5') == '1'\nassert solution('3\\n5 2 3 6') == '2'\nassert solution('4\\n2 4 4 4') == '1'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n9 6 2 4\n\"\"\") == \"6\"\nassert solution(\"\"\"\n6\n3 1 1 3 1 3 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n8\n7 8 7 7 8 7 7 7 7\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == '6'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"5\") == \"6\"\n\"\"\"\nimport time\nfrom math import sqrt\n\nfrom utils import *\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1 1 3 2') == \"2.000000\"\nassert solution('1 1 1 2 2') == \"2.000000\"\nassert solution('1 0 0 2 3') == \"2.000000\"\nassert solution('1 3 2 4 5') == \"2.000000\"\nassert solution('1 1 2 2 2') == \"2.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 1 1 3 2''') == '2.000000'\nassert solution('''2 5 1''') == '2.000000'"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"10 10 1 10\") == \"10000.0\"\n\"\"\"\nfrom collections import namedtuple\n\nCoordinate = namedtuple('Coordinate', ('x', 'y'))\nCoordinate.__repr__ = lambda self: f'({self.x}, {self.y})'\n\nassert Coordinate(1, 2) == Coordinate(x=1, y=2)\nassert Coordinate(1, 2).x == 1\nassert Coordinate(1, 2).y == 2\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"3 3 1 3 1\") == \"2.500000\"\n\"\"\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '1.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\n\nassert solution('2 5 1') == '4.99999'"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 1 1 3 2\"\"\") == \"2.000000\"\nassert solution(\"\"\"2 5 1\"\"\") == \"1.000000\""
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '2.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"2 5 1\") == \"3.000000\""
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '96'\nassert solution('4') == '4964'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '5'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3,2,4]) == 96\nassert solution([3,1,2,3]) == 18\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '96'\n\"\"\""
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '96'\nassert solution('5') == '1068'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n1 2\n2 3\n4\n1 2\n1 3\n1 4\nSample Input:\n5\n1 2\n2 3\n4\n1 2\n1 3\n4\nSample Output:\n16\n''') == \"96\""
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4\") == \"96\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '96'\nassert solution('2') == '81'\nassert solution('3') == '96'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == '96', 'Should be 96'\n\nassert solution('''\n4\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == '48', 'Should be 48'\n\nassert solution('''\n5\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == '64', 'Should be 64'\n'''\n\n'''"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('3\\n0 0\\n0 1\\n1 0\\n1 1') == '4'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\\n\") == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '3'\nassert solution('6\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n1 3\\n2 3\\n3 3\\n') == '5'\nassert solution('50\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n1 3\\n2 3\\n3 3\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\\n6 4\\n6 5\\n6 6\\n7 7\\n7 8\\n7 9\\n') == '8'\n\"\"\""
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n2 1\\n2 0\\n1 1\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('7\\n-2 -2\\n0 1\\n0 2\\n-1 -1\\n0 0\\n1 1\\n2 0') == '2'\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n0 0\\n0 1\\n1 0\\n1 1\\n\") == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('6\\n0 0\\n1 0\\n2 1\\n3 2\\n4 3\\n5 4') == '6'\nassert solution('100000\\n0 0\\n0 1\\n1 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6') == '153'\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\nassert solution(\"3\\n0 0\\n1 0\\n1 1\") == \"2\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 8\\n3 1\\n1 4\\n') == '10'\nassert solution('3 2\\n2 1\\n1 2\\n') == '9'\nassert solution('3 3\\n2 1\\n1 2\\n') == '6'"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 8\\n3 1\\n1 4') == '10\\n10\\n9'\nassert solution('5\\n10 30 20 70 40\\n20 50 20 80\\n30 40 40 20\\n40 20 20 20\\n20 20 20 20') == '100\\n100\\n100\\n90'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2 8\n3 1\n1 4\n''') == '10'\nassert solution('''3\n2 8\n3 1\n1 4\n''') == '10'\nassert solution('''10\n2 8\n3 1\n1 4\n''') == '13'\nassert solution('''10\n2 8\n3 1\n1 4\n''') == '13'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2\n2 1\n''') == '10'\nassert solution('''\n3 5\n3 1\n2 5\n''') == '10'\nassert solution('''\n5 8\n5 1\n4 7\n3 2\n3 4\n''') == '10'\nassert solution('''\n1 3\n4 6\n5 3\n1 2\n4 5\n''') == '10'\nassert solution('''\n10 7\n8 3\n6 1\n4 2\n7 5\n2 4\n4 3\n6 5\n5 2\n4 1\n7 3\n''') == '12'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '10'\nassert solution('2 8') == '10'\nassert solution('3 1') == '9'\nassert solution('1 4') == '10'"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 8') == '10'\nassert solution('3 1') == '9'\nassert solution('1 4') == '9'"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\\n10\\n9\""
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"10\""
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 8\\n3 1\\n1 4\\n') == '10\\n10\\n9'\nassert solution('5\\n4 2\\n3 1\\n1 1\\n5\\n') == '10\\n10\\n9\\n8\\n7'\nassert solution('1\\n1\\n') == '0'\nprint('Tests Passed')\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == \"IMPOSSIBLE\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n.F.') == 'IMPOSSIBLE'\nassert solution('4 4\\n####\\n#JF#\\n#.J#\\n#.J#') == '3'"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 4\\n###') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n####\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5\\n######\\n#.J#\\n#..#\\n#..#') == 'IMPOSSIBLE'\nassert solution('5 5\\n######\\n#.J#\\n#..#\\n###') == '3'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4\\n####\\n#JF#\\n#..#\\n#..#') == 'IMPOSSIBLE'\n\nassert solution('4 4\\n#.#.\\n##.#\\n###.\\n#.J\\n.JF') == '2'\n\nassert solution('4 4\\n#####\\n###.#\\n#.#F\\n#F.J\\n###.#\\n#####') == '3'\n\nassert solution('4 4\\n###.\\n###.#\\n#.#F\\n#F.J\\n###.#\\n#####') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"IMPOSSIBLE\", \"1st example\"\nassert solution(\"5 3\") == \"IMPOSSIBLE\", \"2nd example\"\nassert solution(\"5 1\") == \"IMPOSSIBLE\", \"3rd example\"\nassert solution(\"7 2\") == \"IMPOSSIBLE\", \"4th example\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5\\n.##.#.#\\n#######\\n#.#.###\\n######.') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\nassert solution(\"4 4\\n#####\\n#JF#\\n#..#\\n#..#\") == \"3\""
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\n\nassert solution(\"4 4\\n####\\n#.JF#\\n#..#\\n#..#\") == \"3\"\n\nassert solution(\"4 4\\n####\\n#JF.\\n#..#\\n#..#\") == \"3\"\n\nassert solution(\"4 4\\n####\\n#JF..\\n#..#\\n#..#\") == \"5\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n6\n1 1\n1 2\n1 2\n4\n\"\"\") == \"0.3\"\n\nassert solution(\"\"\"\n1\n6\n1 1\n1 2\n1 2\n2\n\"\"\") == \"0.0\"\n\nassert solution(\"\"\"\n1\n6\n2 4\n4\n\"\"\") == \"0.16666666667\"\n\nassert solution(\"\"\"\n1\n6\n3 4\n5\n\"\"\") == \"0.3333333333\"\n\nassert solution(\"\"\"\n1\n5\n1 1\n1 2\n1 2\n2\n\"\"\") == \"0.16666666667\""
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 2') == '0.3333333333'"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"0.3333333333333333\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 2\\n2\\n1 1\\n') == '0.3333333333'\n\"\"\"\n\nn, m, d = list(map(int, input().split()))\nh_all = list(map(int, input().split()))\nh_opp = list(map(int, input().split()))"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 2 2\n2\n1 1\n\"\"\") == \"0.3333333333\"\nassert solution(\"\"\"\n3 2 1\n1 2 2\n2\n\"\"\") == \"0.3333333333\"\nassert solution(\"\"\"\n2 2 1\n2\n1 1\n\"\"\") == \"0.5\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\nprint('PASSED')\n\"\"\""
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2 2\n2\n1 1\n\"\"\") == \"0.3333333333\"\nprint(solution(\"\"\"\n1 1\n2\n1\n\"\"\") == \"0.5\")\nprint(solution(\"\"\"\n2\n1 1\n\"\"\") == \"1\")"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 2') == '0.3333333333'"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\\n2\\n1 1\") == \"0.3333333333\"\nassert solution(\"2 2 2\\n2\\n1 1\") == \"0.33\"\nassert solution(\"2 2 2\\n2\\n1 1\") == \"0.3\"\nassert solution(\"2 2 2\\n2\\n1 1\") == \"0.32\"\nassert solution(\"2 2 2\\n2\\n1 1\") == \"0.319999999999\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 2\\n2\\n1 1\\n') == '0.3333333333'\nassert solution('10 1 2\\n1 1\\n') == '0.3333333333'\nassert solution('9 1 2\\n1 1\\n') == '0.3333333333'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1023'\nassert solution(input_stdin) == '1023'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n11') == '2'\nassert solution('3\\n111') == '0'\nassert solution('4\\n11111') == '2'\nassert solution('5\\n1101111') == '3'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1') == '11'\nassert solution('4\\n2') == '110'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == '1023'\nassert solution('50') == '103'\nassert solution('-1') == '0'\nassert solution('1*1') == '1'\nassert solution('10') == '1023'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '113'\nassert solution('3') == '111'\nassert solution('2') == '11'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1023'\nSample Input:\n5\n0011\nSample Output:\n1\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1023\"\n\n\"\"\""
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10\\n1') == '1023'\nassert solution('10\\n1*1') == '1023'\nassert solution('10\\n11') == '1'\nassert solution('10\\n1101') == '1'\nassert solution('10\\n1111') == '1'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"1\"\nassert solution(\"1011\") == \"1\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10\\n11\") == \"1023\"\nassert solution(\"10\\n01\") == \"1023\"\n\"\"\"\n\nstdin = input()\nn = int(stdin)\nstring = stdin\npattern = []\n\nfor i in range(1, n+1):\n    pattern.append([1] * i + [0])\n\npattern = ''.join(map(str, pattern))\n\nprint(len(pattern) - len(string))\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"6\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n2 1\n3 3\n5 3\n7 7\n10 3\n''') == '6'\n\nassert solution('''2 2\n4 1\n5 3\n7 3\n10 3\n''') == '7'\n\nassert solution('''10 8\n10 1\n1 10\n2 10\n10 10\n''') == '7'\n\nassert solution('''100 100\n10 1\n1 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2''') == '6'\nassert solution('''1 2''') == '1'\nassert solution('''4 5''') == '12'\nassert solution('''0 0''') == '0'\nassert solution('''3 0''') == '3'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '6'\nassert solution('0 0') == '0'\nassert solution('1 1') == '1'\nassert solution('3 3') == '9'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"6 5\") == \"3\"\nassert solution(\"4 6\") == \"2\"\nassert solution(\"5 5\") == \"4\"\nassert solution(\"6 3\") == \"0\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '6'\nassert solution('3 2') == '4'\nassert solution('3 3') == '7'\nassert solution('4 4') == '8'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n3 4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"1 1\") == \"1\"\nprint(solution(input()))\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '6'\nassert solution('0 0') == '0'\nassert solution('1 1') == '1'\nassert solution('2 2') == '3'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1500\\n1500\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1500\\n1500\\n1500\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n\"\"\") == \"2930\"\nassert solution(\"\"\"\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n\"\"\") == \"Impossible\"\nassert solution(\"\"\"\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n500\n\"\"\") == \"Impossible\"\nassert solution(\"\"\"\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n7\n\"\"\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == 'Impossible', 'Tests'\nassert solution('3\\n8 10 1\\n1 2 3 5\\n7 3 2 1') == '3180', 'Tests'\nassert solution('4\\n8 10 1\\n1 2 3 5\\n7 3 2 1\\n2 3 4 5') == '5180', 'Tests'\nassert solution('5\\n8 10 1\\n1 2 3 5\\n7 3 2 1\\n2 3 4 5\\n4 5 6 7') == '2930', 'Tests'\nassert solution('6\\n8 10 1\\n1 2 3 5\\n7 3 2 1\\n2 3 4 5\\n4 5 6 7\\n2 6 7 8') == '3180', 'Tests'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n\"\"\") == \"2930\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500''') == '2930'\n\nassert solution('''50 20 7\n20\n30\n50\n60\n70\n80\n90\n100''') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == '2930', 'First'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible', 'Second'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible', 'Third'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible', 'Fourth'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible', 'Fifth'"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1000 2000 7') == '2930'\nassert solution('100') == 'Impossible'\nassert solution('480') == 'Impossible'\nassert solution('500') == 'Impossible'\nassert solution('550') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1000 2000 7\") == \"2930\"\nassert solution(\"100\") == \"Impossible\"\nassert solution(\"480\") == \"Impossible\"\nassert solution(\"500\") == \"Impossible\"\nassert solution(\"550\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1000 2000 7\n100\n480\n500\n550\n1000''') == '2930'\nassert solution('''1000 2000 7\n100\n480\n500\n550\n1000''') == 'Impossible'\nassert solution('''1000 2000 7\n100\n480\n500\n550\n1000''') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nassert solution('1000 2000 7\\n1000\\n480\\n500\\n550\\n1000\\n1400\\n1500') == 'Impossible'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"0 1 2\") == \"1\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 2 1') == '1'\nassert solution('5 2 1') == '3'\nassert solution('4 1 0') == '0'\nassert solution('0 2 0') == '0'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n1\n2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n1\n2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n2\n3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3\\n0\\n0\\n1') == '2'\nassert solution('1 2 3\\n0\\n0\\n1\\n2') == '2'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n0\\n0\\n1') == '2'\nassert solution('2 5 8\\n0 1\\n0\\n0\\n1\\n0') == '1'"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n0\\n0\\n1') == '2'\n\"\"\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('0 0 0') == '0'\nassert solution
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 3\\n0\\n0\\n1\") == \"2\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2 3\n0\n0\n1\n''') == '2', f'Should be 2 but printed {solution(stdin)}'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\"\nassert solution(\"1 2 3\\n0\\n1\\n0\") == \"1\"\nassert solution(\"1 2 3\\n1\\n1\\n0\") == \"1\""
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5') == '10'\nassert solution('5 5\\n-2 -1 -3\\n-4 3 -5\\n-1 -3 3\\n3 2 -5') == '68'\nassert solution('10 10\\n-3 -2 -3\\n-1 -2 -1\\n1 -3 3\\n1 2 -5') == '136'\nassert solution('5 5\\n-2 -1 -3\\n-4 3 -5\\n-1 -3 3\\n3 2 -5\\n-1 1 1') == '2'\nassert solution('5 5\\n-2 -1 -3\\n-4 3 -5\\n-1 -3 3\\n3 2 -5\\n-1 1 1') == '0'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\n'''\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\nassert solution('''\n2 2\n1 1\n''') == '3'\nassert solution('''\n1 2\n-1 -1\n''') == '0'\nassert solution('''\n2 2\n-1 -1\n''') == '0'\nassert solution('''\n1 2\n2 2\n''') == '0'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\nassert solution('''\n3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '20'\nassert solution('''\n10\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '20'\nassert solution('''\n10\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '25'\nassert solution('''\n15\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '25'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\nassert solution('''\n3 2\n-4 -5\n-1\n1\n''') == '0'\nprint(solution(input()))\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n') == '12'\nassert solution('2\\n1\\n') == '2'\nassert solution('3\\n4\\n') == '12'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\"\n) == \"10\"\nassert solution(\n    \"5 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n\"\n) == \"14\"\nassert solution(\n    \"3 1\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n\"\n) == \"24\"\nassert solution(\n    \"10 20\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n\"\n) == \"100\"\nassert solution(\n    \"10 10\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n\"\n) == \"1000\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\"\"\") == \"10\"\nassert solution(\"\"\"2 2\n-1 -2\"\"\") == \"1\"\nassert solution(\"\"\"1 1\n-1 -2\"\"\") == \"0\"\nassert solution(\"\"\"2 2\n-2 -3\"\"\") == \"1\"\nassert solution(\"\"\"1 2\n0 0\"\"\") == \"0\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\") == \"10\"\nassert solution(\"4 4\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\") == \"20\"\nassert solution(\"10 0\\n-1 -2 -3\\n-4 -5 -6\\n-7 -8 -9\\n0 1 2\\n3 4 5\\n6 7 8\\n9 0 -1\") == \"63\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n2 1 1\\n3 4 2') == '10'\nassert solution('4\\n5\\n4 5 4 5\\n4 4 4 4 4\\n4 4 4 4 4\\n4 4 4 4 4\\n4 4 4 4 4\\n4 4 4 4 4\\n4 4 4 4 4\\n4 4 4 4 4') == '23'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '3100'\nassert solution('1 2 1000') == '1000'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '1000'\nassert solution('5 3') == '1150'\nassert solution('5 3') == '4000'\nassert solution('3 3') == '1000'\nassert solution('3 3') == '4000'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '3100'\nassert solution('5 4') == '10000'\nassert solution('5 4 1') == '10000'\nassert solution('5 5') == '10000'\nassert solution('5 6') == '15000'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n\"\"\") == \"3100\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\nassert solution('''\n10 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n1 3 400\n''') == '3200'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '3100'\n\"\"\"\n\n\nclass Graph:\n\n    def __init__(self):\n        self.d = {}\n\n    def add_edge(self, u, v, w):\n        self.d[u] = self.d.get(u, []) + [(v, w)]\n        self.d[v] = self.d.get(v, []) + [(u, w)]\n\n    def path_between(self, s, e):\n        visited = set()\n        q = collections.deque([(s, 0)])\n        while q:\n            u, dist = q.popleft()\n            if u == e:\n                return dist\n            visited.add(u)\n            for v, w in self.d[u]:\n                if v not in visited:\n                    q.append((v, dist + w))\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2''') == '3100'\nassert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2''') == '3700'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\nassert solution(\"4 1\\n4 3 1000\\n3 5 1000\\n4 5 500\\n2\\n2 4 300\\n3 5 300\") == \"4100\"\nassert solution(\"5 1\\n5 3 1000\\n3 5 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"4500\"\nassert solution(\"6 2\\n6 5 1000\\n5 6 1000\\n5 7 500\\n2\\n2 5 300\\n3 6 300\") == \"6200\"\nassert solution(\"8 2\\n6 3 1000\\n5 6 1000\\n5 7 500\\n2\\n1 5 300\\n3 6 300\\n3 7 300\") == \"6250\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == '-1'\nassert solution(\"\"\"\n2 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n\"\"\") == '3100'\nassert solution(\"\"\"\n3 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n\"\"\") == '-1'\n\"\"\"\n---\n\n---\n\n---\n\n---\n\n\"\"\"\n\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2\n0 1\n''') == '1'\n\nassert solution('''\n2 1\n0 1\n0 1\n''') == '2'\n\nassert solution('''\n3 1\n0 1\n0 1\n''') == '0'\n\nassert solution('''\n5 10\n0 1\n0 1\n0 1\n0 1\n0 1\n''') == '3'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0\"\nassert solution([\n    \"2 1\",\n    \"0 1\"\n]) == \"0\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 1\n0 1\n0 2\n0 3\n0 4\n0 5\n''') == '0'\n\nassert solution('''\n5 1\n0 1\n1 2\n1 3\n0 4\n4 5\n''') == '3'\n\nassert solution('''\n1 2\n0 1\n''') == '2'\n\nassert solution('''\n1 2\n0 1\n0 2\n''') == '2'\n\nassert solution('''\n1 2\n0 1\n0 2\n''') == '2'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0'\nassert solution('2 1\\n0 1') == '0'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1\n0 1\n''') == '0'\nassert solution('''\n2 2\n0 1 2\n''') == '1'\n\nassert solution('''\n2 3\n0 1 2\n0 2 3\n''') == '2'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '0'\nassert solution('3 2') == '1'\nassert solution('10 2') == '5'\nassert solution('10 5') == '4'\nassert solution('100 2') == '35'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n0 1') == '0'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 1') == '3'\nassert solution('4 2') == '2'\n'''\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n0 1\n''') == '0'\n\nassert solution('''\n2 2\n0 1\n0 1\n''') == '1'\n\nassert solution('''\n4 3\n0 1\n0 2\n0 3\n''') == '3'\n\nassert solution('''\n2 2\n0 1\n0 1\n''') == '1'\n\nassert solution('''\n4 3\n0 1\n0 2\n0 3\n''') == '2'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1\\n0 1') == '0'\nassert solution('2 4\\n0 1 1 0\\n0 2 2 1 1\\n0 3 3 2 1 1\\n0 4 4 3 2 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n') == '4'\nassert solution('2 1\\n0 1\\n0 1\\n0 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n') == '4'\nassert solution('2 1\\n0 1\\n0 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n') == '5'\nassert solution('2 10\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1\\n') == '6'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 10') == '10'\n\nclass TestSolution(unittest.TestCase):\n\n    def test_sample(self):\n        self.assertEqual(solution(input_string=\"1 10\"), \"10\")\n\n    def test_input(self):\n        self.assertEqual(solution(input_string=\"0 -1\"), \"0\")"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 2') == '2'\nassert solution('1 5') == '1'\nassert solution('5 10') == '1'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 1\") == \"1\"\n\nprint(solution())\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 10\n''') == '10'\nassert solution('''\n1 1\n''') == '0'\nassert solution('''\n3 5\n''') == '3'\nassert solution('''\n0 5\n''') == '6'\nassert solution('''\n1 2\n''') == '1'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"1 100\") == \"99\"\nassert solution(\"9 10000\") == \"999999\"\nassert solution(\"1 99999\") == \"999999\"\nassert solution(\"1 9999999\") == \"999999999\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 2') == '0'\nassert solution('2 3') == '1'\nassert solution('3 4') == '2'\nassert solution('5 6') == '1'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 10\") == \"10\"\n\nassert solution(\"2 10\") == \"10\""
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 2') == '0'\nassert solution('4 5') == '0'\n\n------------------\n###Note\n###This test only covers one edge case, $X = Y$, so any other possible case can be covered if needed.\n'''"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 10\") == \"10\"\n\nassert solution(\"6 2\") == \"2\"\n\nassert solution(\"9 9\") == \"0\"\n\nassert solution(\"-3 -3\") == \"0\"\n\nassert solution(\"-42 -45\") == \"2\""
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_value) == \"10\"\n\"\"\""
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\\n') == '0'\nassert solution('5\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10') == '2'\nassert solution('10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10') == '9'\nassert solution('15\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10\\n-5 5\\n-5 -5\\n-10 0\\n-10 -10') == '4'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n    6\n    0 0\n    1000 0\n    0 1000\n    1000 1000\n    100 100\n    ''') == '0'\n    assert solution(\n    '''\n    1\n    0 0\n    1 1\n    ''') == '1'\n    assert solution(\n    '''\n    4\n    0 0\n    1000 0\n    0 1000\n    1000 1000\n    100 100\n    ''') == '4'\n    '''\n    3\n    0 0\n    1000 0\n    0 1000\n    100 100\n    ''') == '3'\n    '''\n    2\n    0 0\n    1000 0\n    0 1000\n    100 100\n    ''') == '2'\n    '''\n    1\n    0 0\n    ''') == '1'\n    '''\n    5\n    0 0\n    1000 0\n    0 1000\n    1000 1000\n    100 100\n    ''') == '5'\n    '''\n    3\n    0 0\n    1000 0\n    0 1000\n    100 100\n    ''') == '3'\n'''\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n0 0\n1000 0\n0 1000\n1000 1000\n0 1000\nSample Output:\n3\n''') == '0', 'Should be 0'\nassert solution('''\n5\n0 0\n0 0\n0 1000\n1000 1000\n0 1000\nSample Output:\n1\n''') == '1', 'Should be 1'\nassert solution('''\n5\n0 0\n0 0\n0 1000\n1000 1000\n0 1000\nSample Output:\n0\n''') == '0', 'Should be 0'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0 0\n1000 0\n0 1000\n1000 1000\n''') == '0'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('6') == '0'\nassert solution('10') == '2'\nassert solution('100') == '2'\nassert solution('1000') == '3'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n0 0\n1 1\n2 2''') == '1'\n\nassert solution('''3\n1 2\n3 3\n4 4''') == '0'\n\nassert solution('''4\n0 0\n1000 0\n0 1000\n1000 1000\nSample Output:\n2\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n0 0\n1000 0\n0 1000\n1000 1000\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n-10000 0\n0 10000\n10000 0\n10000 10000\n-20000 0\n-10000 0\n0 20000\n10000 0\n10000 10000\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n10000 0\n0 10000\n10000 10000\n10000 0\n-20000 0\n-10000 0\n0 20000\n10000 0\n10000 10000\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4\n0 0\n1000 0\n0 1000\n1 1000\n1 0\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4\n0 0\n1000 0\n0 1000\n1 1000\n1 0\n\"\"\") == \"1\""
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == \"0\"\nassert solution(\"4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == \"1\""
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0.5 1\"\nassert solution(\"1 2\") == \"0.5 1.00000001\"\nassert solution(\"1 3\") == \"0.5 1.00000001\"\nassert solution(\"1 4\") == \"0.5 1.00000001\"\nassert solution(\"1 5\") == \"0.5 1.00000001\""
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0.500000000 1.000000000'\nassert solution('2 1') == '-1'"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n0 1 0.5') == '0.500000000 1.000000000'\nassert solution('2 2\\n0 2 0.5 0.1 0.5') == '0.500000000 1.000000000'\nprint(solution('''2 1\n0 1 0.5\nSample Input:\n4 3\n0 1 0.5 0.5\nSample Output:\n0.5\n0.5\n'''))"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '0.500000000 1.000000000'\nassert solution('3 1') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1\n0 1 0.5\n''') == '0.500000000 1.000000000', 'First'\nassert solution('''2 1\n0 2 0.5\n''') == '-1.000000000 1.000000000', 'Second'\n'''"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n0 1 0.5\n''') == '0.500000000 1.000000000'\n\nassert solution('''2\n0 1 0.5\n0 0 1\n''') == '0.500000000 1.000000000'\n\nassert solution('''2\n0 1 0.5\n0 0 0.5\n''') == '0.500000000 1.000000000'\n\nassert solution('''1\n0 1 0.5\n0 1 0.5\n''') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n0 1 0.5\\n') == '0.500000000 1.000000000', 'First example'\nassert solution('2 100000\\n0 1 0.5\\n') == '-1.000000000 1.000000000', 'Second example'\nassert solution('10\\n1 3 0.5\\n2 2 0.5\\n3 3 0.5\\n4 3 0.5\\n5 3 0.5\\n6 3 0.5\\n7 3 0.5\\n8 3 0.5\\n9 3 0.5\\n10 3 0.5\\n') == '0.4999999 0.4999999 0.4999999', 'Third example'"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 1\n0 1 0.5\n0 2 0.5\n0 3 0.5\n\"\"\") == \"\"\"0.500000000 1.000000000\"\"\"\nassert solution(\"\"\"\n3 1\n0 1 0.1\n0 2 0.2\n0 3 0.3\n\"\"\") == \"\"\"0.100000000 1.000000000\"\"\"\nassert solution(\"\"\"\n5 1\n0 1 0.5\n0 2 0.5\n0 3 0.4\n0 4 0.3\n0 5 0.2\n\"\"\") == \"\"\"0.500000000 1.000000000\"\"\"\nassert solution(\"\"\"\n5 1\n0 1 0.5\n0 2 0.5\n0 3 0.4\n0 4 0.3\n0 5 0.2\n\"\"\") == \"\"\"0.500000000 1.000000000\"\"\"\nassert solution(\"\"\"\n3 1\n0 1 0.5\n0 2 0.5\n0 3 0.3\n\"\"\") == \"\"\"0.300000000 1.000000000\"\"\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n0 1 1\n1 0 0.5\n2 1 1\n\"\"\") == \"1.500000000 1.000000000\"\nassert solution(\"\"\"\n3\n0 1 0.5\n1 0 0.5\n2 1 1\n\"\"\") == \"1.500000000 1.000000000\"\nassert solution(\"\"\"\n10\n1 1 0.5\n2 2 0.5\n2 1 1\n3 1 1\n4 1 1\n4 2 1\n4 1 1\n4 2 1\n5 2 0.5\n5 1 0.5\n5 1 0.5\n6 2 1\n6 1 1\n6 2 1\n6 1 1\n\"\"\") == \"2.000000000 -1.000000000\"\nassert solution(\"\"\"\n3\n0 1 0.5\n1 0 0.5\n2 1 1\n\"\"\") == \"-1.000000000\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n0 0.5\n0 0.5\n0 0.5\n1 0.5''') == '1.000000000 1.000000000 0.500000000 1.000000000 1.000000000 0.500000000 1.000000000 0.500000000 0.500000000 1.000000000 0.500000000'\nassert solution('''1\n0 1\n0 0.5\n0 0.5\n1 0.5''') == '0.500000000 0.500000000 0.500000000 0.500000000 1.000000000 0.500000000 0.500000000 1.000000000 0.500000000 1.000000000 0.500000000'\nassert solution('''2\n0\n1 0.5\n0 0.5\n0 0.5\n0 0.5''') == '1.000000000 1.000000000 0.500000000 1.000000000 0.500000000 1.000000000 0.500000000 1.000000000 0.500000000'\nassert solution('''1\n0\n1 0.5\n0 0.5\n0 0.5\n0 0.5''') == '0.500000000 0.500000000 1.000000000 0.500000000 0.500000000 1.000000000 0.500000000 0.500000000 1.000000000 0.500000000'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"7\""
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 1\n4 1\n1 5\n10 10\n10 8\n''') == '7'\n\nassert solution('''\n5\n1 1\n4 1\n1 5\n10 10\n10 8\n''') == '9'\n\nassert solution('''\n2\n3 3\n3 2\n''') == '3'\n\n'''"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '1'\nassert solution('6') == '1'\nassert solution('1 1') == '1'\nassert solution('3 3') == '1'\nassert solution('9 4') == '1'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '7'\nassert solution('1 1') == '1'\nassert solution('4 1') == '2'\nassert solution('1 5') == '2'\nassert solution('10 10') == '4'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"7\"\nassert solution([6]) == \"7\"\nassert solution([1,1]) == \"7\"\nassert solution([4,1]) == \"6\"\nassert solution([1,5]) == \"5\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"7\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10\n''') == '7'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1 1'\nassert solution('4 1') == '4 1'\nassert solution('1 5') == '1 5'\nassert solution('10 10') == '10 10'\nassert solution('10 8') == '10 8'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"7\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0 1'\nassert solution('2') == '1 1'"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\") == \"8-a\"\nassert solution(\"1\\na\\n2\") == \"2\"\nassert solution(\"2\\na\\n3-b 5-b\\n6-a 2-b\\n2\") == \"2\"\nassert solution(\"2\\naba\\nbba\\n1\") == \"3-b\""
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '9-b'\nassert solution('''\n2\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\n''') == '8-a'\nassert solution('''\n1\na\n2-a\n0\n''') == '1'\nassert solution('''\n2\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == '2-a'\nassert solution('''\n2\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == '2-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\nab\\n3-b 5-b\\n6-a 2-b\\n2') == '8-a'\nassert solution('1\\na\\nb') == 'a'\nassert solution('1\\na\\nb') == 'b'"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\na b') == '9-b'\nassert solution('2\\na b\\n5-b 6-b\\n3-a 2-b\\n2\\na b') == '8-a'\nprint('Solution:')\nprint(solution(input()))\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '9-b'\nassert solution('''\na\nb\nb\na\nc\n''') == '8-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\na\\nb\\n') == 'b\\na\\nb\\n'\nassert solution('2\\na\\nb\\n') == 'a\\nb\\na\\n'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nab\\n3-b 5-b\\n6-a 2-b\\n0') == '8-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\na b\") == \"9-b\"\nassert solution(\"6-a 2-b\") == \"8-a\"\nassert solution(\"2\\nab\") == \"5-b\"\nassert solution(\"6-a 2-b\\naba\") == \"6-a 2-b\"\nassert solution(\"2\\nab\\naba\") == \"6-a 2-b\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n\"\"\") == \"8-a\"\n\nassert solution(\"\"\"\n3\na\nb\n2\n\"\"\") == \"2-b\"\n\nassert solution(\"\"\"\n10\na\na\n2\nb\n\"\"\") == \"5-b\"\n\nassert solution(\"\"\"\n3\na\nb\n2\n\"\"\") == \"3-b\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n8\n4\n3\n4\n5\n3\n8\n7''') == '3246R3246'\nassert solution('''1\n1\n1''') == '1'\nassert solution('''2\n8\n4\n3\n4\n5\n3\n8\n7''') == '3246R3246'\nassert solution('''5\n3\n1\n1\n1\n1\n1\n1''') == '3246U3246'"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '123', \"First\"\nassert solution('2') == '2', \"Second\"\nassert solution('3') == '3', \"Third\"\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '3246'\nassert solution('3\\n') == '3246'\nassert solution('10\\n') == '3246'\nassert solution('20\\n') == '3246'\nassert solution('100\\n') == '3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"126R126\"\nassert solution(\"2\") == \"R2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\necho\\n1') == '3246R3246'\n\"\"\""
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '3246'\nassert solution('2') == '3246R3246'\nassert solution('3') == '3246D3246R3246'\nassert solution
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"3246\"\nassert solution(\"2\") == \"3246\"\nassert solution(\"3\") == \"3246\"\nassert solution(\"3\") == \"3246\"\nassert solution(\"4\") == \"3426\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '3246'\nassert solution('2') == '3246'\nassert solution('3') == '3246'\nassert solution('4') == '3246'\nassert solution('5') == '3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"1097121\"\nassert solution(\"5\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho\\necho"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n5 7\n5 8\n''') == 'YES'\nassert solution('''\n5 5\n5 7\n4 7\n4 8\n''') == 'NO'\nassert solution('''\n10 5\n4 8\n4 5\n4 6\n5 7\n5 8\n6 8\n4 7\n6 5\n''') == 'YES'\nassert solution('''\n1 1\n3 4\n2 3\n''') == 'NO'"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n1 2\n1 3\n''') == 'YES'\nassert solution('''3 1\n1 2\n1 3\n''') == 'YES'\nassert solution('''5 2\n1 2 1 3 1\n2 3 1 2\n3 3 1 3\n3 4 2 4\n4 5 2 5\n5 3 1 3''') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'YES'\nassert solution('1 3') == 'NO'\nassert solution('2 2') == 'YES'\nassert solution('2 3') == 'NO'\nassert solution('3 3') == 'YES'"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1\n1 2\n1 3''') == 'YES'\n\nassert solution('''5 2\n2 4\n1 2\n2 2\n2 2\n2 1''') == 'NO'\n\nassert solution('''10 5\n1 4\n3 4\n5 4\n7 4\n3 4\n5 4\n5 4\n7 4\n1 4\n3 4\n5 4\n7 4\n7 4\n3 4\n5 4\n7 4''') == 'YES'\n\nassert solution('''8 1\n2 5\n2 6\n3 6\n3 7\n4 7\n4 8\n4 9\n5 8\n6 8\n6 9\n6 9\n5 8''') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"10 1\") == \"YES\"\nassert solution(\"100 1\") == \"YES\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1') == 'NO'\nassert solution('10 1') == 'YES'\nassert solution('10 2') == 'YES'\nassert solution('10 3') == 'YES'\nassert solution('10 4') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'YES\\n1 2\\n1 3'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == 'YES'\nassert solution('4 5') == 'YES'\nassert solution('7 1') == 'NO'\nassert solution('4 2') == 'YES'\nassert solution('1 1') == 'YES'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'YES\\n1 2\\n1 3'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"18\"\nassert solution(\"2\") == \"36\"\nassert solution(\"2\") == \"42\"\n\"\"\"\n\n\nclass Cell:\n    def __init__(self, strength, left=False, right=False, above=False, below=False):\n        self.strength = strength\n        self.left = left\n        self.right = right\n        self.above = above\n        self.below = below\n\n    def __str__(self):\n        return str(self.strength)\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '2'\nassert solution('10') == '12'\n\"\"\""
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\n1\n300003\n300003\n300003\n300003\n300003\nSample Output:\n176''') == '176'\nassert solution('''9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n300003\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333\n''') == '176'"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9') == '176'\nassert solution('1') == '0'\nassert solution('6 6') == '0'\nassert solution('333333') == '0'\nassert solution('300003') == '8'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333\n''') == '176'\nassert solution('''\n2\n1\n2\n3\n1\n''') == '21'\nassert solution('''\n2\n1\n0\n''') == '1'"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '1\\n'\n    '1\\n'\n    '6 6\\n'\n    '333333\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '333333\\n'\n    ) == '176'\n\nassert solution(\n    '10\\n'\n    '0\\n'\n    '10 10\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003\\n'\n    '300003"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0'\nassert solution('1') == '1'\n\nassert solution('9') == '176'\nassert solution('1000000000') == '10000000000000000000000000000'\n\n'''\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '176'\nassert solution('7') == '280'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"17\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('123456789') == '123'\nassert solution('1223456789') == '123'\nassert solution('122345678901') == '1223456789'\nassert solution('12345678901234567890123456789') == '123456789'\nassert solution('1234567890123456789012345678901') == '12345678901'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '012'\nassert solution('100000000000') == '112'\nassert solution('11223344') == '223'\nassert solution('10000000000000000') == '100'\nassert solution('1000000000000000000') == '100'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"012\"\nassert solution(\"100\") == \"100\"\nassert solution(\"25\") == \"25\"\nassert solution(\"10\") == \"10\"\nassert solution(\"21\") == \"21\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '12'\nassert solution('1234567890') == '123'\nassert solution('1000000000000') == '100'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"12\"\nassert solution(\"4\") == \"4\"\nassert solution(\"999\") == \"999\"\nassert solution(\"756443\") == \"754\""
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '12'\nassert solution('12') == '12'\nassert solution('36') == '36'\nassert solution('13') == '13'\nassert solution('100') == '10'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '016'\n\"\"\""
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"333\"\nassert solution(\"1\") == \"1\"\nassert solution(\"15\") == \"555\"\nassert solution(\"1000\") == \"1313\"\nassert solution(\"1680\") == \"1680\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"12\"\nassert solution(\"9876543210\") == \"987\"\nassert solution(\"1234\") == \"12\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('1234') == '12'\nassert solution('123400') == '12'\nassert solution('123400000') == '12'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 1\n(())\n480\n-570\n928\n''') == '?', 'First'\nassert solution('''\n4 1\n(())\n480\n-570\n928\n''') == '480', 'Second'\nassert solution('''\n4 1\n((()\n480\n-570\n928\n''') == '480', 'Third'\n'''\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 1\n((()\n480\n617\n-570\n928\n''') == '480'\nassert solution('''4 1\n(((()\n480\n617\n-570\n928\n''') == '480'\nassert solution('''4 1\n((((((()\n480\n617\n-570\n928\n''') == '-570'\nassert solution('''4 1\n(((((((((()\n480\n617\n-570\n928\n''') == '928'\nassert solution('''4 1\n(((((((((((()\n480\n617\n-570\n928\n''') == '480'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 1') == '?', 'Should be \"??\"'\n\nassert solution('6 1') == '480', 'Should be \"480\"'\n\nassert solution('10 1') == '928', 'Should be \"928\"'\n\nassert solution('9 1') == '?', 'Should be \"??\"'\n\nassert solution('13 1') == '-570', 'Should be \"-570\"'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1') == '?', \"Wrong solution\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"??\"\nassert solution(\"3 2\") == \"??\"\nassert solution(\"3 1\") == \"4\"\nassert solution(\"4 3\") == \"??\"\nassert solution(\"2 2\") == \"4\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 1') == '?', \"Should be '?', but got '{}'\".format(solution('4 1'))\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '?', 'Should be \"?\"'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '-1'\nassert solution('4 5 6') == '4'\nassert solution('8 8 8 8') == '1'\n\nprint(solution())\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '?'\nassert solution('3 3') == '1000'\nassert solution('5 1') == '1000'\nassert solution('5 2') == '1000'\n\"\"\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"??\"\nassert solution(\"3 3\") == \"??\"\nassert solution(\"6 6\") == \"18\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"5 6\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\") == \"3 1 3 5\\n2 2 4\\n5 6\"\n\"\"\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n') == '2 4\\n5 6\\n7 8 9 10 11 12 13\\n'\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4\\n3 1 3 5\\n2 2 4\") == \"2 4\"\nassert solution(\"2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\" == \"5 6\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n13\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '''2 4\n5 6\n7 8 9 10 11 12 13\n'''\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n\"\"\") == \"\"\"\n2 4\n5 6\n7 8 9 10 11 12 13\n\"\"\".strip()\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'none'\nassert solution('2') == '2 4'\nassert solution('3') == '5 6'\nassert solution('4') == '7 8 9 10 11 12 13'"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '2 4'\nassert solution('''10\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == 'None'\nassert solution('''18\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '2 4'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4\") == \"2 4\"\nassert solution(\"3 1 3 5\") == \"3 1 3 5\"\nassert solution(\"2 2 4\") == None\nassert solution(\"3 1 3 6\") == None\nassert solution(\"2 2 6\") == None\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '5 6'\nassert solution('''3\n1 2\n1 4\n1 3\n''') == '1 3'\nassert solution('''4\n1 2\n2 3\n1 3\n1 4\n''') == '1 3'\nassert solution('''6\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '6 5'\nassert solution('''8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n''') == '1 3'"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n\nassert solution('''4 3\n1 2 3\n1 3\n2 3\n3 4\n''') == '1 3 4'\n\nassert solution('''2 3\n2 5\n3 4\n''') == '1 3'\n\nassert solution('''2 2\n4 2\n1 3\n2 4\n''') == '1 2'\n\nassert solution('''6 2\n1 2 3 4 5 6\n2 4\n3 5\n1 4\n4 5\n5 1\n''') == '1 2 3 4 5 6'"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\nassert solution(\"15 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"50 50 50 50 50\"\nassert solution(\"10 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"10 10 10 10 10\"\nassert solution(\"1 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"1 1 1 1 1 1\"\nassert solution(\"1 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"1 1 1 1 1 1\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution('5 5') == '35 39 36 27 29'\n\n---Input---\nSample Input 1:\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\nSample Output 1:\n11 17 14 39\nSample Output 2:\n17 27 35 39\n\nSample Input 2:\n4 7\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n4 5\n4 6\n4 7\nSample Output 2:\n6 7\n9 8\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2''') == '35 39 36 27 29'\nassert solution('''3 3\n1 2 3\n1 2 4\n1 3 2''') == '2 2 4'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n1 2 3\\n1 4 8\\n2 3 12\") == \"35 39 36 27 29\"\nassert solution(\"15 15\\n1 2 3 4\\n5 1 2 3\\n8 5 4 1\\n9 7 2 3\\n4 9 5 1\\n4 5 3 2\\n4 3 5 2\\n4 2 5 1\\n2 2 3 2\\n5 2 4 2\\n6 6 5 1\\n9 9 8 7\\n5 5 8 4\\n2 5 3 2\\n5 7 2 3\\n3 3 5 2\\n5 4 5 1\\n4 4 6 1\\n2 4 5 3\\n4 7 4 1\\n6 5 8 2\\n3 6 6 1\\n1 1 4 2\\n3 6 5 2\\n4 1 8 3\\n5 4 1 1\\n4 5 6 1\\n5 5 2 1\\n7 3 2 5\\n5 6 4 1\\n6 7 6 1\\n2 4 7 6\\n5 5 5 2\\n4 5 7 2\\n7 6 5 2\\n6 5 4 1\\n3 2 3 2\\n2 7 6 2\\n5 8 4 2\\n7 6 7 2\\n4 4 3 2\\n8 5 1 1\\n4 4 1 2\\n6 4 8 2\\n5 1 6 1\\n2 3 6 3\\n6 3 6 1\\n8 5 8 2\\n2 5 2 3\\n6 4 6 1\\n1 3 6 1\\n2 6 7 2\\n5 6 4 2\\n1 5 2 1\\n2 5 5 1\\n1 6 6 2\\n8 4 5 2\\n6 6 5 2\\n3 4 4 2\\n5 6 6 1\\n6 5 4 1\\n4 1 2 2\\n3 5 8 1\\n5 3 2 1\\n2 5 5 3\\n7 8 7 3\\n4 7 6 2\\n8 6 7 2\\n7 3 8 1\\n3 4 8 1\\n7 6 8 1\\n6 8 6 1\\n8 7 4 2\\n2 1 8 1\\n3 6 2 1\\n4 1 3 1\\n2 5 8 1\\n3 2 4 1\\n6 6 4 1\\n7 4 5 3\\n3 6 3 1\\n4 8 1 2\\n4 3 4 1\\n5 6 5 3\\n3 5 6 3\\n3 6 5 3\\n1 1 2 1\\n5 1 6 1\\n3 5 5 3\\n4 6 6 3\\n8 5 6 2\\n3 6 5 2\\n3 4 5 1\\n2 5 5 3\\n3 5 4 3\\n6 7 7 2\\n4 7 5 2\\n5 5 5 2\\n6 6 7 2\\n5 5 5 2\\n6 7 3 2\\n7 7 3 2\\n3 2 3 2\\n3 7 5 2\\n3 2 5 2\\n7 4 5 2\\n3 2 5 2\\n4 5 5 1\\n4 5 5 2\\n7 2 3 3\\n2 6 7 1\\n4 6 7 1\\n6 6 6 1\\n4 7 6 1\\n2 7 3 2\\n5 6 5 3\\n1 3 5 2\\n8 5 5 2\\n8 6 6 2\\n5 5 8 2\\n4 4 4 3\\n5 5 7 2\\n3 4 5 2\\n4 5 7 2\\n5 5 8 2\\n7 3 8 1\\n5 5 5 2\\n2 4 5 2\\n6 7 6 2\\n2 2 3 2\\n6 6 5 1\\n6 6 6 1\\n2 2 6 1\\n3 3 3 2\\n6 6 6 2\\n2 6 6 2\\n4 5 3 2\\n6 5 6 1\\n5 6 5 2\\n5 4 6 2\\n3 3 5 2\\n5 7 2 2\\n5 7 7 2\\n7 5 7 2\\n7 7 5 2\\n4 3 6 2\\n6 7 4 2\\n5 7 8 2\\n6 7 7 2\\n4 8 7 2\\n2 7 6 2\\n4 6 5 2\\n6 5 7 2\\n7 6 5 2\\n5 7 7 2\\n6 6 5 2\\n2 3 4 2\\n8 5 5 2\\n3 2 4 1\\n8 5 6 2\\n4 6 5 3\\n4 6 6 2\\n7 8 6 2\\n5 6 6 2\\n5 4 6 1\\n7 5 4 1\\n6 6 6 1\\n2 5 6 1\\n6 5 5 2\\n5 6 6 2\\n4 6 6 2\\n3 5 6 3\\n6 6 6 1\\n1 1 2 1\\n4 5 7 1\\n4 4 5 3\\n4 2 5 3\\n2 5 2 3\\n4 4 4 2\\n6 7 6 2\\n5 7 5 2\\n4 4 5 2\\n4 5 6 3\\n6 6 5 2\\n4 4 6 2\\n6 6 6 2\\n3 5 6 2\\n5 6 6 2\\n4 4 5 2\\n4 3 6 2\\n4 4 6 1\\n4 5 4 2\\n2 3 6 3\\n2 6 7 2\\n5 6 5 2\\n3 2 5 2\\n6 6 5 2\\n4 4 6 1\\n8 6 6 2\\n5 7 5 2\\n6 6 5 2\\n8 6 6 2\\n5 6 6 2\\n5 7 5 2\\n3 2 3 2\\n5 6 5 2\\n4 6 6 2\\n4 6 6 2\\n7 5 6 2\\n3 2 5 2\\n2 6 7 1\\n2 2 5 1\\n5 7 6 2\\n5 7 6 2\\n2 6 7 1\\n4 6 6 2\\n5 6 6 2\\n6 6 6 2\\n5 4"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution('6 6') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\nassert solution('''\n10 10\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n\n'''\n\n##########################################################################################################################################"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2') == '35 39 36 27 29'\nassert solution('6 6\\n3 3 3 4 4 4\\n3 3 3 5 4 5\\n4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5\\n3 3 3 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5\\n3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n4 4 4 4 4 4 4"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution('1 1') == '0'\nassert solution('3 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\n2 3 1') == '0 672'\nassert solution('2 3\\n3 2 1') == '1 672'\n\nSample Input 2:\n3 4\n5 1 5 1\nSample Output:\n0 5976"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n3 2 1\n''') == '0 672'\nassert solution('''\n1 20\n10 11\n''') == '3 545'\n'''\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1\\n2 3 1') == '6 72'\n\nstdin = \"\"\"3 3\n2 2 1\nSample Output:\n0 672\"\"\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 2 1') == '0 672', \"Wrong\"\nassert solution('2\\n3 2 1') == '1 672', \"Wrong\"\nassert solution('1\\n4 4 1') == '1 1536', \"Wrong\"\nassert solution('2\\n4 4 1') == '1 936', \"Wrong\"\nassert solution('1\\n5 5 1') == '1 3108', \"Wrong\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n3 2 1\") == \"0 672\"\nassert solution(\"3 5\\n1 2 2 1\") == \"1 3155\"\nassert solution(\"3 7\\n1 2 1 3 1 1 2 2\") == \"1 3185\"\nassert solution(\"3 5\\n2 2 2 2 1\") == \"1 3155\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"672\"\nassert solution(\"2 2 1\") == \"1\"\nassert solution(\"3 3 1\") == \"1\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([\n    '5 5',\n    '2 2 1 1 1'\n]) == '0 672'\n\nassert solution([\n    '4 4',\n    '2 2 0 1'\n]) == '0 672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '0 672'\nassert solution('5 3') == '9 3897'\n\nimport math"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4') == '0 4'\nassert solution('3 3') == '0 6'\nassert solution('10 10') == '20'\n\"\"\"\n\nfrom test_utils import *"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500001'\nassert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n3 1 10') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 100\") == \"2.500000\"\nassert solution(\"4 5 1\") == \"Impossible\"\nassert solution(\"4 6 1\") == \"Impossible\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 4') == 'Impossible'\nassert solution('2 1 10') == '0.750000'\nassert solution('2 1 100') == '1.000000'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n') == '2.500000'\nassert solution('2 2 100\\n1 1 1\\n2 2 10\\n') == 'Impossible'\nassert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '2.500000'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n\nassert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n3 8 30\\n3 12 18\\n\") == \"Impossible\"\n\nassert solution(\"5 1 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n3 8 30\\n3 12 18\\n4 8 20\\n4 12 20\") == \"3.14285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n') == '2.500000'\nassert solution('4 5 100\\n0 10 10\\n1 10 5\\n2 2 18\\n2 40 50\\n') == 'Impossible'\nassert solution('1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\nassert solution('2 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == 'Impossible'\nassert solution('3 3 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500001'\n\n'''\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == \"2.500000\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\nassert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == 'Impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n5 3 4\n''') == \"3\"\nassert solution('''\n4\n2 3 1 2\n''') == \"4\"\n\n## Sample Test 2"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 4\\n') == '3'\nassert solution('3 5 4\\n') == '3'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5 3 4\n''') == '3'\nassert solution('''\n4\n5 3 6 7\n''') == '3'\n\nassert solution('''\n4\n5 3 6 7\n''') == '4'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('3 3') == '1'\nassert solution('5 3 4') == '2'"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('3 2 5') == '4'\nassert solution('3 2 4') == '2'\nassert solution('3 2 5 2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3 4\n5 5 4''') == '3'\nassert solution('''5 3 1\n5 5 4''') == '1'\nassert solution('''5 3 1\n1 1 4''') == '1'\nassert solution('''5 3 1\n3 5 4''') == '2'\nassert solution('''5 3 1\n1 2 4''') == '2'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n5 3 4') == '3'\nassert solution('3\\n5 3 2 2 2') == '4'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\n1 2 3 4 5\n4\n1\n2\n3\n4\n5\n3\n2\n4\n3\n5\n''') == '4'\nassert solution('''\n10\n1 2\n3 4\n5 6\n7 8 9\n10\n11 12\n13 14\n15 16\n17 18 19\n20\n''') == '10'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"4 10 9\") == \"4\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1 1\n''') == '2'\nassert solution('''\n2 2 2\n''') == '2'"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 2') == '4'\nassert solution('10 1 5') == '8'\n\n-------------------\n\nIf x = 2, then y = 1, 1, 3, 5, 7, 9, etc.\n\nFor each i in range(N):\n    n = (x + i) % p\n    y = (y + i) % p\n    Find x > y\n\nNow, we have to give some insight that this is a sequence of integers.\n\nx = 2\ny = 1\n\nwhile x <= N:\n    x += y\n    y += 1\n\nLet p be prime. In this case p = 10.\n\nWe start by the case of x = 1 and y = 1.\n\nFor i = 0, x = 1, y = 1\ni = 0 = x = 1, y = 1\nx = 2, y = 0, i = 1\nx = 3, y = 0, i = 1\nx = 4, y = 0, i = 1\nx = 5, y = 0, i = 1\nx = 6, y = 0, i = 1\nx = 7, y = 0, i = 1\nx = 8, y = 0, i = 1\nx = 9, y = 0, i = 1\nx = 10, y = 0, i = 1\nx = 11, y = 0, i = 1\nx = 12, y = 0, i = 1\nx = 13, y = 0, i = 1\nx = 14, y = 0, i = 1\nx = 15, y = 0, i = 1\nx = 16, y = 0, i = 1\nx = 17, y = 0, i = 1\nx = 18, y = 0, i = 1\nx = 19, y = 0, i = 1\nx = 20, y = 0, i = 1\nx = 21, y = 0, i = 1\nx = 22, y = 0, i = 1\nx = 23, y = 0, i = 1\nx = 24, y = 0, i = 1\nx = 25, y = 0, i = 1\nx = 26, y = 0, i = 1\nx = 27, y = 0, i = 1\nx = 28, y = 0, i = 1\nx = 29, y = 0, i = 1\nx = 30, y = 0, i = 1\nx = 31, y = 0, i = 1\nx = 32, y = 0, i = 1\nx = 33, y = 0, i = 1\nx = 34, y = 0, i = 1\nx = 35, y = 0, i = 1\nx = 36, y = 0, i = 1\nx = 37, y = 0, i = 1\nx = 38, y = 0, i = 1\nx = 39, y = 0, i = 1\nx = 40, y = 0, i = 1\nx = 41, y = 0, i = 1\nx = 42, y = 0, i = 1\nx = 43, y = 0, i = 1\nx = 44, y = 0, i = 1\nx = 45, y = 0, i = 1\nx = 46, y = 0, i = 1\nx = 47, y = 0, i = 1\nx = 48, y = 0, i = 1\nx = 49, y = 0, i = 1\nx = 50, y = 0, i = 1\nx = 51, y = 0, i = 1\nx = 52, y = 0, i = 1\nx = 53, y = 0, i = 1\nx = 54, y = 0, i = 1\nx = 55, y = 0, i = 1\nx = 56, y = 0, i = 1\nx = 57, y = 0, i = 1\nx = 58, y = 0, i = 1\nx = 59, y = 0, i = 1\nx = 60, y = 0, i = 1\nx = 61, y = 0, i = 1\nx = 62, y = 0, i = 1\nx = 63, y = 0, i = 1\nx = 64, y = 0, i = 1\nx = 65, y = 0, i = 1\nx = 66, y = 0, i = 1\nx = 67, y = 0, i = 1\nx = 68, y = 0, i = 1\nx = 69, y = 0, i = 1\nx = 70, y = 0, i = 1\nx = 71, y = 0, i = 1\nx = 72, y = 0, i = 1\nx = 73, y = 0, i = 1\nx = 74, y = 0, i = 1\nx = 75, y = 0, i = 1\nx = 76, y = 0, i = 1\nx = 77, y = 0, i = 1\nx = 78, y = 0, i = 1\nx = 79, y = 0, i = 1\nx = 80, y = 0, i = 1\nx = 81, y = 0, i = 1\nx = 82, y = 0, i = 1\nx = 83, y = 0, i = 1\nx = 84, y = 0, i = 1\nx = 85, y = 0, i = 1\nx = 86, y = 0, i = 1\nx = 87, y = 0, i = 1\nx = 88, y = 0, i = 1\nx = 89, y = 0, i = 1\nx = 90, y = 0, i = 1\nx = 91, y = 0, i = 1\nx = 92, y = 0, i = 1\nx = 93, y = 0, i = 1\nx = 94, y = 0, i = 1\nx = 95, y = 0, i = 1\nx = 96, y = 0, i = 1\nx = 97, y = 0, i = 1\nx = 98, y = 0, i = 1\nx = 99, y = 0, i = 1\nx = 100, y = 0, i = 1\nx = 101, y = 0, i = 1\nx = 102, y = 0, i = 1\nx = 103, y = 0, i = 1\nx = 104, y = 0, i = 1\nx = 105, y = 0, i = 1\nx = 106, y = 0, i = 1\nx = 107, y = 0, i = 1\nx = 108, y = 0, i = 1\nx = 109, y = 0, i = 1\nx = 110, y = 0, i = 1\nx = 111, y = 0, i = 1\nx = 112, y = 0, i = 1\nx = 113, y = 0, i = 1\nx = 114, y = 0, i = 1\nx = 115, y = 0, i = 1\nx = 116, y = 0, i = 1\nx = 117, y = 0, i = 1\nx = 118, y = 0, i = 1\nx = 119, y = 0, i = 1\nx = 120, y = 0, i = 1\nx = 121, y = 0, i = 1\nx = 122, y = 0,"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 1') == '2'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 1') == '2'\nassert solution('7 3 1') == '18'\nassert solution('10 10 5') == '6'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1') == '2'\nassert solution('2 10 10') == '35'\nassert solution('3 8 3') == '10'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 1') == '2'\n\nstdin = \"\"\"\n5 2\nSample Input:\n1 1\nSample Output:\n8\n\"\"\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\n\n\"\"\"\n\nn, x, y = list(map(int, input().split()))\n\nx_plus_one_list = []\n\nfor i in range(n):\n    x_plus_one_list.append(x + i)\n\ny_plus_one_list = []\nfor i in range(n):\n    y_plus_one_list.append(y + i)"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 5') == '7'\nassert solution('2 4 7') == '9'\nassert solution('100 10 20 30 40 50 60 70 80 90') == '120'\n\nInput:\n4\n100 101\n200 201 202\n300 301\n300 300\n\nOutput:\n201\n'''\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort(reverse=True)\n\nmax = a[0] ^ a[1]\n\nfor i in range(2, n):\n    max = max ^ a[i]\n\nprint(max)"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 5\\n') == '7'\nassert solution('2\\n4 3 5\\n') == '9'\nassert solution('6\\n5 4 3 2 1\\n') == '5'\nassert solution('5\\n1 2 3 4 5\\n') == '5'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '2\\n1 2\\n'\n) == '1'\nassert solution(\n    '4\\n1 2 3 4\\n'\n) == '0'"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 3 5\") == \"7\"\nassert solution(\"3 3\") == \"7\"\nassert solution(\"1 3 1\") == \"1\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 5') == '7'\nassert solution('1\\n2 3') == '2'\nassert solution('1\\n3') == '1'\nassert solution('2\\n3') == '1'\nassert solution('2\\n3\\n5') == '6'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 5') == '7'\nassert solution('4\\n1 2 3 4') == '3'\nassert solution('4\\n1 2 4 5') == '4'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2\\n\"\n    \"1 2 3\"\n) == \"7\"\n\nassert solution(\n    \"5\\n\"\n    \"1 2 3 4 5\"\n) == \"9\"\n\nassert solution(\n    \"1\\n\"\n    \"1 2\"\n) == \"1\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n2\n3''') == '1'\nassert solution('''2\n3\n4''') == '0'\nassert solution('''8\n7\n6\n5''') == '5'\nassert solution('''4\n5\n6\n7''') == '1'\nassert solution('''4\n7\n6\n5''') == '3'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 3 5''') == '7'\nassert solution('''3\n1 3 5''') == '4'\nassert solution('''4\n1 3 5''') == '0'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3 5') == '7'\nassert solution('2 3 5') == '9'\nassert solution('3 2 3') == '6'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n\"\"\") == \"\"\"\njets\njets\n\"\"\".strip()\nassert solution(\"\"\"\n4\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n\"\"\") == \"\"\"\njets\n\"\"\".strip()\nassert solution(\"\"\"\n1\n1\nfred dinosaur 2\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\n\"\"\") == \"\"\"\ndinosaur\ndinosaur\n\"\"\".strip()\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 'john rhinocerous jets'\nassert solution(\"3\") == 'john rhinocerous jets'\nassert solution(\"4\") == 'john rhinocerous jets'"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == 'fred jetsons\\njohn jets\\nruth rockets\\n'\nassert solution('''\n5\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rocks\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == 'fred jetsons\\njohn jets\\nruth rockets\\n'\nassert solution('''\n2\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rocks\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == 'impossible\\n'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n6\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n2\\nfred dinosaur 2 jets') == 'john jets\\nruth rockets'\nassert solution('1\\n3\\njohn dinosaur 2 jets') == 'john jets'\nassert solution('3\\n6\\n' + '\\n'.join(['mary rhinocerous 2 jetsons' + '\\n' + 'ruth platypus 1 rockets' * 5 for _ in range(6)])) =='mary rhinocerous rockets' * 5 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'john rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 + 'john rhinocerous' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 + 'john rhinocerous' * 2 + 'john rhinocerous' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus' * 2 +'mary rhinocerous' * 2 + 'ruth platypus' * 2 + 'ruth platypus'"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n3\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n\"\"\") == \"john jets\\n\"\nassert solution(\"\"\"\n10\n4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n\"\"\") == \"john jets\\n\"\nassert solution(\"\"\"\n2\n2\njohn rhinocerous 1 jets\nmary rhinocerous 2 jets\n\"\"\") == \"john rhinocerous 1 jets\\n\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n5\\njohn fred dinosaur 2 jets jetsons') == 'john jets'\nassert solution('2\\n4\\nmary rhinocerous 2 jetsons rockets') =='mary rhinocerous jetsons rockets'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(s) == \"john jets\\n\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\njohn rhinocerous 2 jets\nruth platypus 1 rockets\nmary rhinocerous 2 jetsons\nfred dinosaur 2 jets''') == 'john jets\\nruth rockets\\n'\n'''\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n2\n3\n1\n2\n3\n2\n2\n1\n2\n3\n1\n2\n2\n3\n1\n2\n3\n2\n1\n2\n2\n2\n2\n1\n2\n2\n1\n2\n1\n2\n1\n2\n3\n2\n1\n2\n3\n2\n2\n1\n2\n1\n1\n3\n3\n2\n1\n2\n2\n1\n2\n3\n2\n1\n2\n1\n2\n2\n1\n2\n1\n2\n2\n1\n1\n3\n3\n2\n1\n2\n1\n2\n2\n1\n2\n1\n2\n1\n2\n2\n1\n2\n1\n2\n1\n2\n1\n1\n1\n1\n1\n2\n2\n2\n1\n2\n1\n1\n2\n2\n1\n2\n1\n1\n1\n1\n1\n1\n1\n2\n2\n1\n2\n2\n1\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\") == \"Impossible\"\nassert solution(\"5\\n1\") == \"john\"\nassert solution(\"5\\n2\") == \"ruth\"\nassert solution(\"3\\n1\") == \"john\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"1 2 1\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n4 3\\n-10 9\\n-2 3') == '1 2 1'\nassert solution('2\\n1 2\\n-1 4') == '1 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n2\n2\n3\n3\n1\n2\n1\n2''') == '1 2 1'''\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n-10 9\n-2 3\n''') == '1 2 1'\nassert solution('''\n10 9\n-2 3\n''') == '3 3 3 3 3 3 3 3 3 3 3'\nassert solution('''\n7 10\n-2 3\n-4 7\n-5 4\n-6 5\n-8 8\n-9 2\n''') == '1 2 1 2 1 1 2 2'\nassert solution('''\n6 5\n-2 3\n-4 7\n-5 4\n-6 5\n-8 8\n-9 2\n''') == '1 2 1 2 1 1 1 2'\nassert solution('''\n7 9\n-2 3\n-4 7\n-5 4\n-6 5\n-8 8\n-9 2\n''') == '1 1 2 2 2 2 1 2'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0 0'\nassert solution('5') == '1 1 1 1 1'"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1 2 1\"\nassert solution(\"3 4 3\") == \"1 2 1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n4 3\\n-10 9\\n-2 3') == '1 2 1'\n'''"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n10 1\n-10 -1''') == '3 1 1'\nassert solution('''5\n8 5\n-8 -8\n-2 -3\n-10 -2\n-6 -3\n-5 -3''') == '1 2 1 2 1'\n\nprint('All tests passed!')\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n2 1\n1 2''') == '1 2'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\nassert solution(\"3 3 5 4 3 6\") == \"3.5\"\nassert solution(\"5 5 5 5 5\") == \"5.5\"\n\"\"\""
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 7') == '2.125'\nassert solution('3 2 3') == '1.0'\nassert solution('5 1 4') == '3.25'\nassert solution('6 10 10') == '2.125'\nassert solution('1') == '1.0'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'First'\nassert solution('''\n4\n2 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'Second'\nassert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'Third'\nassert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'Fourth'\nassert solution('''\n4\n2 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'Fifth'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\") == \"2.125\""
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2.125\"\nassert solution(\"2\\n1 1 1\") == \"1.0\"\n\n// For some reason, this test seems to always pass but not sure why\nassert solution(\"100\\n1 1 1\") == \"1.0\"\n\"\"\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2 5\n2 3 6\n''') == '2.125'\nassert solution('''\n5\n1 2 4\n4 3 6\n3 5 7\n2 3 8\n2 4 5\n3 1 7\n''') == '3.125'\nassert solution('''\n5\n1 2 4\n4 3 6\n3 5 7\n2 3 8\n2 4 5\n3 1 7\n''') == '2.125'\nassert solution('''\n5\n1 1 7\n2 3 3\n2 5 2\n6 1 6\n2 4 6\n''') == '4.5'\nassert solution('''\n1\n1 1 7\n1 2 5\n3 2 3\n1 2 4\n2 3 6\n3 1 7\n''') == '3.0'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n    1 2 1\n    2 1 2\n    3 1 1''') == '2.125'\n\nassert solution('''4\n    1 3 7\n    3 2 2\n    5 2 4\n    6 3 3''') == '2.125'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125'\nassert solution('''\n7\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 8 8\n''') == '2.125'\nassert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 8 8\n''') == '3.0'\nassert solution('''\n7\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 8 8\n''') == '3.0'\nassert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 8 8\n''') == '1.0'\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('*.*') == ['main.c', 'a.out']\n\n\n\"\"\"\n\np=input()\nn=int(input())\narr=[]\nfor i in range(n):\n    arr.append(input())\nprint(*sorted(list(set([i for i in arr if i.find(p)>-1]))),sep='\\n')"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\nassert solution(\"a*\") == [\"a.out\"]\nassert solution(\"*\") == [\"main.c\", \"a.out\", \"readme\"]\nassert solution(\"*.*.*\") == [\"main.c\", \"a.out\", \"readme\"]\n\n---"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('*.*') =='main.c a.out'\nassert solution('abcdefghijk') == 'abcdefghijk'\nassert solution('abcdefghijk.') == 'abcdefghijk'\nassert solution('a.c*') == 'a.c*'\nassert solution('*.*abcdefghijk.') =='main.c a.out'\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''*.*''') == ['main.c', 'a.out','readme', 'yacc']\nassert solution('''*.*''') == ['main.c', 'a.out','readme', 'yacc']\nassert solution('''*.*''') == ['main.c', 'a.out','readme', 'yacc']\n''')"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\nassert solution(\"*.c\") == [\"main.c\"]\nassert solution(\"*.c*\") == [\"main.c\"]\nassert solution(\"*.c*t\") == []\n\"\"\"\nimport sys\nP = sys.stdin.readline().rstrip()\nN = int(sys.stdin.readline())\nfiles = []\nfor i in range(N):\n    files.append(sys.stdin.readline().rstrip())"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('*.*') == ['main.c', 'a.out', 'def solution(stdin: str) -> str:']\nassert solution('*.c') == ['main.c']\nassert solution('*.py') == ['main.py','solution.py']\nassert solution('*.txt') == ['main.txt', 'a.out','readme', 'def solution(stdin: str) -> str:']\nassert solution('*.txt') == ['main.txt', 'a.out','readme', 'def solution(stdin: str) -> str:']\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\nassert solution(\"*.c\") == [\"main.c\"]\nassert solution(\"*.py\") == [\"yacc\"]"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('*.*') == ['main.c', 'a.out','readme']\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('*.*') == ['main.c', 'a.out','readme']\n\n'''\n\nimport re\n\nwhile True:\n    try:\n        string = input()\n        P = re.compile(string)\n        fileName = input()\n        N = int(input())\n        filenames = []\n        for i in range(N):\n            filenames.append(input())\n        print(*filenames, sep=\"\\n\")\n    except:\n        break"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('*.*') == ['main.c', 'a.out','readme']\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\nassert solution('1 100\\n0.500000') == '0.500000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '0.5'\nassert solution('1 2') == '0.500000'\nassert solution('1 2') == '0.500000'\nassert solution('1 2') == '0.500000'\nassert solution('1 2') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"0.500000\"\nassert solution(\"1 2\") == \"0.5\"\nassert solution(\"1 3\") == \"0.50\"\nassert solution(\"1 4\") == \"0.499\"\nassert solution(\"1 5\") == \"0.499\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000\n0.500000''') == '0.500000'\nassert solution('''1 1\n1.00000\n0.200000\n0.000000\n0.000000\n0.000000\n0.000000''') == '0.250000'\nassert solution('''1 1\n0.500001\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000''') == '0.000000'\nassert solution('''1 2\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000''') == '0.000000'\nassert solution('''1 2\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000''') == '0.000000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n0.500000\\n0.500000\") == \"0.5\"\nassert solution(\"2 2\\n0.500000\\n0.500000\") == \"0.5\"\nassert solution(\"3 3\\n0.500000\\n0.500000\") == \"0.3\"\nassert solution(\"3 3\\n0.500000\\n0.500000\") == \"0.3\"\n\n\"\"\"\n\n\n\nimport math"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1\n0.500000\n\"\"\") == \"0.500000\"\nassert solution(\"\"\"\n3 2\n0.500000 0.500000 0.500000\n0.500000 0.500000 0.500000\n\"\"\") == \"0.250000\"\nassert solution(\"\"\"\n4 5\n0.750000 0.000000 0.000000 0.000000\n0.000000 0.000000 0.000000 0.000000\n0.000000 0.000000 0.000000 0.000000\n\"\"\") == \"0.000000\"\nassert solution(\"\"\"\n10 10\n
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0.500000'\nassert solution('0.010001') == '0.010001'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0.5'\nassert solution('0.500000 1.000000') == '0.5'\nassert solution('0.5') == '0.5'\nassert solution('0.000000001 1') == '0.5'\nassert solution('0.0') == '0.5'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0.500000'\nassert solution('0.5000001 0.5000002 0.5000003 0.5000004 0.5000005') == '0.500000'\nassert solution('0.0000000 0.0000001 0.00000000 0.00000001 0.00000012 0.00000015') == '0.0000001'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('20 70.9') == '0.9999999999'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"0.0\"\nprint(solution(__import__(\"sys\").stdin.read()))\n\n--python solution.py --fileinput 5.1.txt -o 5.2.txt"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('100 50.00') == '0.00'\nassert solution('-10 0.00') == '-0.00'\nassert solution('0 0.00') == '0.00'\nassert solution('0 0.01') == '-0.01'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0.05 49.9') == '0.0'\nassert solution('0.15 49.9') == '0.0'\nassert solution('0.5 49.9') == '0.0'\nassert solution('0.05 0.9') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0 47.9') == '0.0'"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"0.0\""
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 49.9') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('3 2.9') == '2.1'\nassert solution('4 1.9') == '2.1'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''0 49.9\n0 99.9\n0 100.9\n0 100.1\n0 99.9\n0 49.9''') == '0.0'\nassert solution('''50 49.9\n50 99.9\n50 100.9\n50 100.1\n50 99.9\n50 49.9''') == '0.0'\n'''"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    0 49.9\n    ''') == '0.0\nassert solution('''\n    3 49.9\n    ''') == '3.0\nassert solution('''\n    99 49.9\n    ''') == '99.0\nassert solution('''\n    0 49.9\n    0 49.9\n    ''') == '0.0\nassert solution('''\n    0 49.9\n    0 49.9\n    ''') == '0.0\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n2 3\\n3 1\\n4 1') == '4 1 2\\n1 3\\n2 3\\n3 1\\n'\nassert solution('5\\n1 2\\n1 3\\n2 4\\n4 5\\n5 3\\n4 2\\n3 1\\n2 5\\n5 4\\n4 3\\n3 1\\n1 5\\n5 2\\n3 4\\n1 4\\n4 1\\n3 2\\n2 5\\n5 1\\n4 3\\n4 1\\n1 4\\n3 2\\n2 5\\n5 2\\n4 3\\n4 1\\n2 5\\n5 2\\n3 1\\n2 4\\n4 3\\n2 3\\n5 1\\n3 4\\n2 4\\n4 1\\n4 3\\n2 5\\n1 5\\n5 4\\n3 1\\n3 4\\n2 5\\n5 2\\n1 3\\n4 1\\n5 3\\n2 1\\n1 2\\n3 4\\n2 5\\n4 3\\n3 4\\n5 2\\n1 4\\n4 1\\n3 5\\n1 1\\n5 1\\n3 1\\n5 2\\n3 4\\n1 1\\n2 5\\n1 5\\n5 1\\n2 4\\n3 3\\n4 4\\n1 3\\n2 1\\n5 1\\n1 5\\n4 2\\n4 3\\n2 5\\n4 1\\n2 3\\n2 5\\n5 5\\n2 4\\n4 3\\n4 1\\n5 1\\n3 4\\n2 4\\n3 4\\n3 4\\n5 2\\n4 4\\n5 4\\n3 4\\n1 5\\n3 3\\n4 5\\n1 5\\n2 3\\n3 2\\n5 2\\n3 4\\n2 1\\n5 1\\n1 5\\n5 4\\n2 4\\n4 4\\n1 1\\n4 5\\n1 4\\n4 2\\n1 2\\n4 1\\n5 2\\n1 5\\n3 1\\n1 4\\n1 4\\n4 1\\n3 2\\n3 1\\n4 1\\n2 5\\n5 3\\n3 2\\n1 2\\n5 4\\n1 5\\n2 4\\n4 1\\n3 5\\n1 4\\n4 1\\n1 2\\n4 1\\n3 1\\n1 4\\n4 1\\n2 3\\n1 3\\n4 1\\n2 3\\n4 1\\n4 3\\n1 4\\n1 3\\n2 4\\n2 3\\n1 4\\n4 3\\n2 5\\n1 5\\n1 1\\n2 5\\n5 3\\n3 5\\n3 4\\n3 4\\n3 1\\n5 3\\n2 5\\n4 1\\n1 3\\n5 1\\n4 4\\n5 4\\n5 1\\n3 4\\n2 5\\n4 4\\n4 1\\n5 3\\n4 2\\n5 4\\n5 4\\n4 3\\n4 1\\n5 1\\n1 5\\n2 2\\n4 5\\n1 5\\n1 1\\n2 5\\n5 3\\n1 2\\n3 5\\n2 5\\n5 2\\n5 1\\n5 1\\n5 1\\n4 3\\n1 3\\n1 4\\n2 4\\n5 3\\n2 4\\n1 4\\n1 1\\n5 3\\n5 1\\n4 4\\n1 3\\n3 4\\n2 4\\n3 4\\n5 1\\n4 4\\n4 4\\n5 1\\n1 4\\n3 4\\n2 5\\n5 4\\n4 5\\n1 4\\n4 2\\n2 1\\n2 2\\n5 1\\n2 4\\n3 4\\n2 5\\n5 3\\n4 3\\n2 5\\n4 2\\n3 2\\n1 3\\n5 1\\n4 3\\n5 1\\n5 3\\n1 1\\n3 4\\n4 1\\n5 1\\n4 4\\n4 2\\n5 2\\n3 4\\n1 5\\n4 5\\n5 3\\n2 5\\n5 5\\n2 4\\n5 1\\n4 3\\n4 1\\n4 3\\n5 3\\n2 4\\n4 1\\n2 4\\n5 3\\n2 1\\n4 1\\n5 1\\n1 4\\n2 5\\n1 1\\n5 3\\n3 4\\n5 2\\n1 5\\n4 1\\n3 4\\n4 1\\n2 5\\n2 4\\n1 5\\n5 1\\n4 2\\n5 4\\n1 5\\n4 5\\n5 4\\n5 3\\n4 5\\n3 4\\n3 4\\n1 1\\n1 1\\n3 5\\n5 1\\n2 4\\n5 5\\n4 1\\n2 5\\n1 4\\n1 5\\n2 4\\n3 4\\n1 4\\n5 2\\n3 4\\n4 1\\n3 4\\n3 4\\n1 4\\n1 1\\n5 4\\n1 5\\n5 5\\n2 1\\n5 1\\n1 4\\n2 4\\n5 1\\n4 1\\n1 4\\n4 4\\n5 4\\n4 4\\n5 5\\n2 5\\n4 3\\n4 1\\n5 4\\n4 4\\n3 5\\n2 5\\n3 4\\n2 1\\n1 5\\n2 5\\n1 4\\n1 5\\n3 5\\n4 5\\n1 4\\n2 5\\n2 1\\n3 5\\n3 5\\n1 5\\n5 3\\n1 5\\n5 2\\n4 5\\n4 1\\n2 5\\n2 5\\n5 4\\n3 4\\n5 4\\n4 1\\n5 4\\n1 1\\n3 4\\n4 1\\n5 4\\n4 5\\n2 4\\n5 5\\n5 2\\n4 4\\n1 5\\n5 3\\n4 2\\n1 5\\n3 4\\n1 4\\n2 4\\n5 2\\n3 4\\n4 5\\n1 5\\n2 5\\n5 3\\n4 1\\n5 5\\n3 4\\n4 5\\n1 4\\n5 2\\n4 5\\n3 1\\n1 5\\n1 5\\n5 5\\n1 4\\n1 4\\n3 5\\n1 4\\n3 5\\n5 2\\n1 5\\n3 5\\n1 5\\n4 2\\n1 4\\n2 5\\n4 3\\n3 4\\n2 5\\n4 1\\n3 4\\n5 3\\n1 4\\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2') == '1 2\\n2 1\\n'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 1\n4 1\n''') == '''\n4 1\n2 1\n3 2\n1 3\n'''"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n4\") == \"1 2\\n2 3\\n3 1\\n4 1\""
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 2\\n3 1\\n4 1\\n') == '4 1\\n2 1\\n3 2\\n1 3'\nassert solution('5 2\\n1 2\\n3 1\\n4 1\\n') == '4 1\\n2 1\\n3 2\\n1 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 2\n2 3\n3 1\n4 1\n''') == '4 1\\n2 1\\n3 2\\n1 3'''"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 1\\n4 1') == '4 1 2 1 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 1\\n4 1\\n') == '4 1\\n2 1\\n3 2\\n1 3\\n'\n\nassert solution('10\\n10 1 5 2 4 3 6 5 3 2\\n5 2\\n6 3\\n7 4\\n8 1\\n9 3\\n10 8\\n') == '10 1\\n2 5\\n3 2\\n4 3\\n6 7\\n8 4\\n9 1\\n10 8'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2\n2 3\n3 1\n4 1\n''') == '''\n4 1\n2 1\n3 2\n1 3\n'''\nassert solution('''\n1 2\n2 3\n3 1\n4 1\n''') == '''\n4 1\n2 1\n3 2\n1 3\n'''\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n2 3\\n3 1\\n4 1\\n') == '4 1\\n2 1\\n3 2\\n1 3'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3') == '1'\nassert solution('6 5\\n2 1 6 3 5 3\\n5 1 3 2 4 5\\n1 1 1 1 1') == '2'\nassert solution('6 5\\n2 1 6 3 5 3\\n5 1 3 2 4 5\\n1 1 1 1 1') == 'forever'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"6 5\n2 1 6 3 5 3\"\"\") == \"1\"\nassert solution(r\"\"\"5 6\n2 1 6 3 5\n1 2 5 3 5\"\"\") == \"2\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3') == '1'\nassert solution('6\\n5\\n3') == '0'\nassert solution('6\\n5\\n1 2 3') == '1'\nassert solution('2\\n1 2 3\\n1 1 2 3') == '1'\nassert solution('1\\n1') == '1'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '1'\nassert solution('10 10\\n1 1 1 1 1\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2') == '2'\nassert solution('6 9\\n1 1 1 1 1 1\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 2 2 2 2 2 2 2 2 2 2 2 2') == '0'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3') == '1'\nassert solution('10 4\\n5 3 7 7 1 2 5') == '0'\nassert solution('10 4\\n5 3 7 7 1 2 5\\n1 2 5\\n1 3 5\\n1 4 5\\n1 5 5\\n1 6 5') == '3'\nassert solution('10 4\\n5 3 7 7 1 2 5\\n1 2 5\\n1 3 5\\n1 4 5\\n1 5 5\\n1 6 5\\n1 7 5') == '1'\nassert solution('10 4\\n5 3 7 7 1 2 5\\n1 2 5\\n1 3 5\\n1 4 5\\n1 5 5\\n1 6 5\\n1 7 5\\n1 8 5') == '0'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 5\n2 1 6 3 5 3\n1 2 5 3 5''') == '1'\nassert solution('''\n10 10\n2 1 2 3 5 3\n1 2 5 3 5''') == '2'\nassert solution('''\n10 10\n1 2 3 5 3\n2 1 2 5''') == 'inf'\nassert solution('''\n4 4\n2 2 2 2\n1 1 2 1\n2 2 1 1\n1 1 2 2''') == '1'\nassert solution('''\n5 5\n2 1 6 3 5 3\n1 2 5 3 5\n4 4 4 4\n3 3 3 3\n2 2 2 2''') == 'inf'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '0'\nassert solution('6 5') == '1'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"\n5\n1 2 5 3 5\n1 2 5 3 5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n2 1 6 3 5 3\") == \"1\"\nassert solution(\"10 5\\n1 1 3 3 2 1 1 1 1 1\\n\") == \"4\"\nassert solution(\"10 2\\n1 1 3 3 2 1 1 1 1 1\\n\") == \"4\"\nassert solution(\"10 3\\n1 1 3 3 2 1 1 1 1 1\\n\") == \"6\"\nassert solution(\"10 4\\n1 1 3 3 2 1 1 1 1 1\\n\") == \"10\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\") == \"1\"\nassert solution(\"6 5\\n3 2 1 3 2 3\\n1 2 5 3 5\") == \"2\"\n\"\"\"\nfrom typing import List\nfrom collections import deque\nimport math\n\nm = int(input())\na = list(map(int, input().split(\" \")))\nk = int(input())\nb = list(map(int, input().split(\" \")))\n\na.sort()\nans = 0\ncnt = 0\nq = deque()\n\nfor i in range(m):\n    cnt += a[i]\n    q.append((a[i] / cnt, i))\n\nfor i in range(k):\n    x, y = b[i]\n    y -= 1\n\n    # find nearest index\n    while q and q[0][0] > x:\n        # update weight, update index\n        _, j = q.popleft()\n        cnt -= a[j]\n        q.append((a[j] / cnt, j))\n\n    # update the index\n    if q:\n        _, j = q.popleft()\n        if y > j:\n            q.append((a[j] / cnt, j))\n        elif y < j:\n            q.appendleft((a[j] / cnt, j))\n    else:\n        break\n\n    # update the weight\n    cnt += x\n\nprint(cnt)\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 1 10\n0 1 1 2 6\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 1 10\n0 1 1 2 6\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n1 1 1\n1 2 2\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 10\") == \"3\"\nassert solution(\"3 3 3\") == \"impossible\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 2 6\") == \"3\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('3 1 2') == '4'\n\n'''\n\nstdin = '''3 2 10\n0 1 1 2 6\n'''"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'\nassert solution('5 7 100000\\n
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"1\"\nassert solution(input + '0 1 1 2 3') == \"4\"\nassert solution(input + '0 1 1 2 3 6') == \"1\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '3'\nprint(solution(input))"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'\nassert solution('1 1 10\\n0 1 1 2 6') == 'impossible'\nassert solution('5 1 5\\n0 1 1 2 3\\n3 2 2\\n4 4 4') == '11'\nassert solution('3 2 6\\n0 1 1 2 3\\n4 4 4') == 'impossible'\nassert solution('3 3 7\\n0 1 1 2 3\\n4 4 4') == 'impossible'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 1 10\n0 1 1 2 6\n''') == '3'\nassert solution('''\n3 4 5\n0 1 3 2\n''') == '0'\nassert solution('''\n7 5 10\n1 2 3 4 5 6 7\n''') == '1'\nassert solution('''\n5 1 10\n1 2 3 4 5\n''') == '5'\nassert solution('''\n10 15 20\n1 2 3 4 5 6 7 8 9\n''') == '15'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 1 10\n0 1 1 2 6''') == '3'\nassert solution('''5 1 1 1 1\n0 0 1 1 1''') == 'Impossible'\n'''\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 5\n1 4\n3 3\n2 2\n1 1\n1 3\n1 5\n1 6\n5 6\n5 1\n4 3\n3 4\n1 2\n3 1\n''') == '1 2'\nassert solution('''\n2 10\n11 1\n1 11\n2 5\n1 7\n4 7\n5 1\n1 9\n4 8\n3 7\n1 6\n2 2\n4 4\n''') == '4 3 2 5 1'\nassert solution('''\n1 0\n''') == '1'\nassert solution('''\n1 1\n''') == '1'\nassert solution('''\n2 2\n1 1\n''') == '2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 99\n1 99\n''') == '2 1 2'\nassert solution('''\n2 100\n99 1\n1 99\nSample Output:\n1\n''') == '1 2'\n\nassert solution('''\n3 100\n99 1\n1 99\n1 99\nSample Output:\n2\n1 3\n''') == '2 1 3'\n\nassert solution('''\n10 100\n99 1\n1 99\n2 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\nSample Output:\n2\n2 1 1 3\n''') == '2 1 1 3'\n\nassert solution('''\n10 100\n99 1\n1 99\n2 99\n1 99\n1 99\n2 99\n1 99\n1 99\n1 99\n1 99\nSample Output:\n2\n1 1 2 3\n''') == '1 1 2 3'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 100\\n99 1\\n1 99\\n') == '2\\n1 2'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 100\\n99 1\\n1 99') == '1 2'\nassert solution('5 9\\n9 9\\n9 9\\n9 9\\n9 9') == '4'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '3'\nassert solution('1 100') == '1 1'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 100\\n99 1\\n1 99\\n') == '2\\n1 2'\nassert solution('1 1\\n1 2\\n1 3\\n') == '1\\n1 2'\nassert solution('1 100\\n99 1\\n1 99\\n') == '1\\n2 1'\nassert solution('1 100\\n1 1\\n1 1\\n') == '1\\n1 1'\nassert solution('1 100\\n99 1\\n1 99\\n') == '1\\n1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 100\\n99 1\\n1 99') == '2\\n1 2'\nassert solution('1 1\\n1 1') == '1'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"1\n99 1\n1 99\n2\n1 2\n\"\"\"\n) == \"\"\"2\n1 2\n\"\"\".replace('\\n', '')\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('99 1') == '1 99'\nassert solution('1 99') == '1 99'\nassert solution('99 1') == '1 99'\nassert solution('1 99') == '1 99'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"H\") == \"H\"\nassert solution(\"T\") == \"T\"\nassert solution(\"0.5\") == \"0.5\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\nassert abs(0.5 - solution('H\\nT\\n0.5')) <= 10**-6\nassert abs(0.5 - solution('H\\nT\\n0.1')) <= 10**-6\n\n\"\"\""
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\n\nstdin = 'H\\nT\\n1'\nassert solution(stdin) == '0.5'\n\nstdin = 'TT\\nTT\\n0.5'\nassert solution(stdin) == '0.5'\n\nstdin = 'TT\\nTT\\n1'\nassert solution(stdin) == '0.5'\n\nstdin = 'TT\\nTT\\n0.25'\nassert solution(stdin) == '0.5'\n\nstdin = 'TT\\nTT\\n0.25'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"H\\nT\\n0.5\") == \"0.5\"\nassert abs(solution(\"H\\nT\\n0.5\") - 0.5) <= 10**-6\nassert solution(\"H\\nT\\n0.0\") == \"0.0\"\nassert abs(solution(\"H\\nT\\n0.0\") - 0.0) <= 10**-6\nassert solution(\"H\\nT\\n1.0\") == \"1.0\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0.5') == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('H\\nT') == '0.5'\nassert solution('H\\nT\\n0.5') == '0.5'\nprint('Congratulations, have a nice day!')\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('H') == 'H'\nassert solution('T') == 'T'\nassert solution('0.5') == '0.5'\nassert solution('-0.5') == '0.5'"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''H\nT\n0.5''') == '0.5'\nassert solution('''H\nH\n0.5''') == '0.5'\nassert solution('''H\nH\n0.1''') == '0.1'\nassert solution('''H\nT\n0.1''') == '0.1'\nassert solution('''H\nH\n0.01''') == '0.01'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('H\\nT') == '0.5'"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"5\") == \"1 3 5 7 9 11 13 15\"\nassert solution(\"6\") == \"1 3 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '8\\n1 3 5 7 9 11 13 15'"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n\") == \"1 3 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"1\") == \"1 3 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '8\\n1 3 5 7 9 11 13 15'\nassert solution('1') == '7\\n1 3 5 7 9 11 13 15'\nassert solution('2') == '7\\n1 3 5 7 9 11 13 15'\nassert solution('3') == '7\\n1 3 5 7 9 11 13 15'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n8\n1 4\n9 2 3\n10 5\n1 5\n6 2\n''') == '1 4 5 7 9 11 13 15'\nassert solution('''\n13\n3\nn'''))"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '8 1 3 5 7 9 11 13 15'\nassert solution('6') == '1 3 5 7 9 11 13 15'\n\"\"\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"1 3 5 7 9 11 13 15\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('6') == '1 2 3 4 5 6'\nassert solution('7') == '1 2 3 4 5 6'\nassert solution('10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('30') == '1 2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"1 3 5 7 9 11 13 15\"\n\nimport pytest\nimport sys\nimport io\nimport os\nimport math\n\nfrom typing import Callable, List\nfrom collections import Counter, defaultdict\n\nclass Solution:\n    def __init__(self) -> None:\n        pass\n\n    def solve(self, A: int) -> int:\n        pass\n\n    def test_solve(self):\n        assert self.solve(5) == 8\n        assert self.solve(6) == 1 3 5 7 9 11 13 15"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 5 7') == '3'\nassert solution('3') == '1'\nassert solution('2 2') == '0'\nassert solution('2 5') == '1'\nassert solution('1 5') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '3'\nassert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '1'\nassert solution('''4\n3\n1\n2\n1''') == '0'\nassert solution('''10\n3\n1\n2\n1\n2\n3\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12''') == '1'"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n''') == '0'\nassert solution('''\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n''') == '3'\nassert solution('''\n1\n2\n3\n5\n''') == '1'\nassert solution('''\n5\n4\n3\n2\n1\n''') == '0'\nassert solution('''\n3\n3\n1\n''') == '2'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 5 7') == '3'\nassert solution('3') == '1'\nassert solution('2 2') == '0'\nassert solution('2 5') == '1'\nassert solution('1 5') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '1'\nassert solution('1') == '0'\nassert solution('3') == '1'\n\nn = int(input())\nl = list(map(int, input().split()))\nq = int(input())\nqueries = []\nfor i in range(q):\n    queries.append(list(map(int, input().split())))\n\nres = [0] * q\nfor i in range(q):\n    res[i] = solution(str(l[queries[i][0] - 1] ^ l[queries[i][1] - 1]))\n\nfor i in range(q):\n    print(res[i])"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\n\n\"\"\"\n\nk = int(input())\nx = [int(input()) for _ in range(k)]"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3'\n\nassert solution('1\\n1\\n1\\n') == '0'\n\nassert solution('1\\n1\\n1\\n') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 5 7\\n3') == '3\\n1\\n'\nassert solution('5\\n1 3 5 7\\n3') == '1\\n1\\n0\\n'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n5') == '3\\n1\\n1\\n1\\n0\\n'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n5') == '3\\n1\\n1\\n1\\n1\\n'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3\\n1\\n0'\n\"\"\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\") == \"3\"\nassert solution(\"3\\n10 20 30 40\\n10 20 30 40\\n20 30 40\\n30 40\\n\") == \"20\"\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\nassert solution('2 3\\n0 0 3 0') == '3'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1\\n1 1 -2 0') == '0'\nassert solution('1 5\\n1 1 -2 0') == '1'\nassert solution('2 4\\n1 1 -2 0') == '2'"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1\\n1 -2 0') == '0'\nassert solution('1 100\\n1 -2 0') == '0'\nassert solution('5 1\\n1 1 -2 0\\n1 1 -2 0\\n1 -2 0 0\\n1 -2 0 -1\\n1 1 -2 0') == '3'\nassert solution('5 5\\n1 1 -2 0\\n1 -2 0 -1\\n1 -2 0 -1\\n1 1 -2 0') == '4'\nassert solution('5 5\\n1 1 -2 0\\n1 -2 0 -1\\n1 -2 0 -1\\n1 1 -2 0') == '3'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 1 -2 0\") == \"0\"\nassert solution(\"2 5\\n2 1 -2 0\") == \"1\"\nassert solution(\"2 5\\n4 0 -2 0\") == \"2\"\nassert solution(\"2 5\\n4 0 -2 0\") == \"3\"\nassert solution(\"2 5\\n4 0 -2 0\") == \"4\"\n\"\"\""
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n1 -2 0') == '0'\nassert solution('2 1\\n1 1 -2 0') == '0'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n1 1 -2 0\n''') == '0'\nassert solution('''\n2 2\n1 -2 0\n1 -2 0\n''') == '2'\nassert solution('''\n2 2\n1 -2 0\n1 2 0\n''') == '3'\nassert solution('''\n2 2\n1 -2 0\n1 -1 0\n''') == '1'\nassert solution('''\n3 4\n5 5 -2 0\n4 5 -2 0\n1 1 -2 0\n''') == '4'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '0'\nassert solution('3 1') == '2'\nassert solution('4 1') == '1'\nassert solution('5 1') == '4'\nassert solution('6 1') == '5'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\nassert solution('5 5\\n-1 -1 -2 0 1 2') == '1'\n\nimport numpy as np\nfrom itertools import combinations\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 -2 0') == '0'\nassert solution('1 1 -2 0') == '1'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"2 1\\n1 1 -2 0\") == \"0\"\nassert solution(\"2 2\\n1 1 -1 1\\n0 -1 -1 -2\") == \"1\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '60'\nassert solution('2') == '60'\nassert solution('1') == '61'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '194'\nassert solution('3') == '1227'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n''') == '194'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '194'\nassert solution('1') == '2019 10 25'\nassert solution('5') == '2019 10 25 2020 10 30'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '194'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"194\"\nassert solution(\"3\") == \"2019 10 25\"\nassert solution(\"1\") == \"2019 10 18\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '194'\nassert solution('3') == '1979 6 10'\nassert solution('4') == '1973 6 10'\nassert solution('5') == '1967 5 16'\nassert solution('6') == '1968 5 24'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '194'\nassert solution('1') == '0'\nassert solution('5') == '32'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '194'\nassert solution('1') == '1930'\nassert solution('3') == '1930'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"negative-infinity -5\"\nassert solution(\"6 10 10 10 10 0\") == \"positive-infinity -5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 1 2 1 1\n0 1 1 0 0\n1 0 2 0 0\n1 1 0 1 0\n''') == 'negative-infinity -5'\nassert solution('''\n1 1 1 1 1 1\n0 0 0 0 0 0\n0 0 0 0 0 0\n1 0 0 0 0 0\n1 0 0 0 0 0\n1 0 0 0 0 0\n''') == 'negative-infinity -5'\nassert solution('''\n1 -1 1 0 0\n-1 -1 0 0 0\n-1 1 0 1 0\n-1 1 0 0 0\n-1 1 0 0 0\n-1 1 0 0 0\n''') == 'negative-infinity -5'\nassert solution('''\n-1 1 1 1 1 1\n0 0 0 0 0 0\n0 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n-1 0 0 0 0 0\n''') == 'negative-infinity -5'\nassert solution('''\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == 'negative-infinity -5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == '5 12.5'\nassert solution('6 10 10 10 10 0') == 'negative-infinity -5'"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '''\nnegative-infinity 0\n5 12.5\nnegative-infinity -5\n'''\nassert solution('''\n5 0 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '''\nnegative-infinity 0\nnegative-infinity -5\nnegative-infinity -5\n'''\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '''negative-infinity -5\n-5 10.5\n-5 -5.5\n-5 -5.5\nnegative-infinity'''\n\nassert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '''negative-infinity -5\n-5 10.5\n-5 -5.5\n-5 -5.5\nnegative-infinity'''\n\nassert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '''negative-infinity -5\n-5 10.5\n-5 -5.5\n-5 -5.5\nnegative-infinity'''"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '5 12.5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == 'negative-infinity -5'\nassert solution('6 10 10 10 10 0') == 'negative-infinity negative-infinity'\nassert solution('6 10 10 5 10 0') == 'negative-infinity negative-infinity'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10 10 10 10 0') == '5 12.5'\nassert solution('6 10 10 10 10 0') == '6 12.5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n-100 100\n-100 100\n-100 100\n-100 100\n''') == 'negative-infinity -5\\n5 12.5\\nnegative-infinity -5\\n5 12.5\\nnegative-infinity -5\\n'\n\nprint(solution(open('input.txt')))\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == 'negative-infinity 0\n''' == 0\n\nassert solution('''\n5 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n''') == '5 12.5\n''' == 'negative-infinity -5'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4') == '2'\n\n'''"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4') == '2'\nassert solution('50 10000') == 'IMPOSSIBLE'\nassert solution('100 30000') == '2'\nassert solution('400 0') == 'IMPOSSIBLE'\nassert solution('50 10000') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == \"1\"\nassert solution('2 4') == \"2\"\nassert solution('1 1') == \"IMPOSSIBLE\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n\nassert solution('''\n5 5\n200 30000\n300 10000\n400 0\n500 10000\n600 10000\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"IMPOSSIBLE\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == '2'\nassert solution('5 7') == '3'\nassert solution('10 10') == 'IMPOSSIBLE'\nassert solution('2 2') == 'IMPOSSIBLE'\nassert solution('1 1') == '1'"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0') == '2'\nassert solution('4 4\\n100 30000\\n200 20000\\n300 10000\\n400 -40000') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"5 2\") == \"IMPOSSIBLE\"\nassert solution(\"100 30000\") == \"2\"\nassert solution(\"200 20000\") == \"2\"\nassert solution(\"300 10000\") == \"2\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"\"\"345 2\nrotS 2 1\nnegR 2\n\"\"\"\nassert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"\"\"345 2\nrotS 2 1\nnegR 2\n\"\"\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 2\n-1 -2\n1 2 3\n\"\"\") == \"345 2\"\n\nassert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\"\n\nassert solution(\"\"\"\n2 3\n1 2 3\n-2 1 2\n-1 -2 1\n1 1 -1\n\"\"\") == \"180 3\"\n\nassert solution(\"\"\"\n3 3\n1 2 3\n-2 1 2\n-1 -2 1\n1 1 -1\n\"\"\") == \"180 3\"\n\nassert solution(\"\"\"\n3 3\n1 2 3\n4 5 6\n-2 1 2\n-1 -2 1\n1 1 -1\n\"\"\") == \"360 3\""
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"5\"\nassert solution(\"1\") == \"1\"\nassert solution(\"-2\") == \"2\"\nassert solution(\"-10\") == \"4\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2\\nrotS 2 1\\nnegR 2'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n1 1\n2 1\n''') == '1'\nassert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\nSample Output:\n345 2\nrotS 2 1\nnegR 2\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n''') == \"345 2\\nrotS 2 1\\nnegR 2\\n\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\\n') == '345 2\\nrotS 2 1\\nnegR 2\\n'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3 4\n    1 -2 5 200\n    -8 0 -4 -10\n    11 4 0 100\n    \"\"\"\n    ) == \"345 2\"\n    assert solution(\n    \"\"\"\n    3 4\n    1 2 3\n    2 4 5\n    3 4 6\n    \"\"\"\n    ) == \"5\"\n    assert solution(\n    \"\"\"\n    3 4\n    1 2 3\n    2 4 5\n    3 4 6\n    \"\"\"\n    ) == \"0\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\\n') == '345 2\\nrotS 2 1\\nnegR 2\\n'\n\nassert solution('3 2\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n') == '12 34\\nrotR 2 1\\nnegR 2\\n'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3 2') == '0.5'\nassert solution('2\\n3 1 1') == '0.5'\nassert solution('3\\n3 2') == '0'\nassert solution('4\\n3 2') == '0'\nassert solution('5\\n3 2') == '0'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '0.5'\nassert solution('3 2') == '0.75'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2\n3 1 1\n''') == '0.5'\nassert solution('''4 3\n2 3 4\n''') == '3.5'\nassert solution('''2 3\n1 1 2\n''') == '1'\nassert solution('''2 2\n5 5 5\n''') == '1.5'\nprint('You passed all tests!')"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n3 1 1') == '0.5'\n\nimport math\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '0.5', 'First'\nassert solution('3 2') == '1', 'Second'\nprint('Almost done! Go check your tests!')\n\"\"\""
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '0.5'\n\n'''\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2\n3 1 1\n''') == '0.5'\nassert solution('''3 3\n1 1 1\n''') == '1.0'\n'''\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '0.5'\nassert solution('3 3') == '0.3333333333333333'\n\n
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3 1 1') == '0.5'\nassert solution('5 3\\n6 7 4 7') == '1.0'\nassert solution('5 6\\n5 7 4 7') == '0.5'\nprint('Tests passed')"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n3 1 1\") == \"0.5\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 4\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5'\nassert solution('''\n10 10\n1 4\n1 4\n2 4\n2 4\n3 4\n3 4\n3 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n1 4\n3 4\n5 4\n1 5\n3 5\n''') == '1 4 5 2 6 7'\n\nassert solution('''\n5 4\n1 4\n3 4\n5 4\n1 5\n3 5\n''') == '1 4 5 3 6 7'\n\nassert solution('''\n9 8\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 3 6 7 2'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 5\n1 4\n2 2\n3 3\n1 1\n1 3\n1 5\n2 2\n3 3\n''') == '1 4 5'\n\nassert solution('''\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 2 7 9'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 2 6 7 8 9'\nassert solution('''\n7 9\n1 2\n4 5\n3 6\n1 6\n5 8\n7 9\n''') == '1 6 2 4 5 7'\nassert solution('''\n7 5\n1 2\n4 3\n2 6\n1 6\n4 5\n7 8\n''') == '2 6 1 4 3 5 7'\nassert solution('''\n7 4\n1 2\n4 5\n2 3\n1 6\n5 8\n7 9\n''') == '1 2 3 4 6 5 7 9'\nassert solution('''\n5 3\n1 2\n4 5\n2 3\n1 6\n5 7\n8 9\n''') == '1 6 2 4 5 7 8 9'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n10 10\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"1 4 5 2 6 7 3 8 9 6 8 5 9\"\n\nassert solution(\"\"\"\n3 5\n1 4\n5 4\n1 5\n\"\"\") == \"1 4 5\"\n\nassert solution(\"\"\"\n2 5\n1 4\n5 4\n1 5\n\"\"\") == \"1 4 5\"\n\nassert solution(\"\"\"\n2 2\n1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n8 5\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"2 6 7 3 8 9 6 8 5 9\"\n\nprint(solution(*map(int, input().split())))\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5\n1 2\n3 4\n4 1\n3 4\n''') == '1 4 5 2 3 4'\nassert solution('''\n5 5\n1 2\n3 4\n4 1\n3 4\n''') == '1 4 5 2 3 4'\nassert solution('''\n6 3\n1 5\n3 5\n5 1\n5 2\n3 4\n''') == '1 5 5 3 5 2 4'\nassert solution('''\n7 6\n1 5\n1 6\n6 2\n5 4\n5 1\n6 3\n4 3\n''') == '1 5 1 6 2 5 4 6 3'\nassert solution('''\n1 5\n1 6\n5 1\n5 2\n6 1\n6 2\n''') == '1 5 1 6 2 5 4 6 3'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5\\n2 6 7\\n3 8 3\\n8 9 8\\n6 8 5\\n5 9 5'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n8\n2\n5\n\"\"\") == \"1 4 5 2 6 7 3 8\"\nassert solution(\"\"\"\n4\n3\n5\n8\n6\n\"\"\") == \"1 4 5 6 7 8 3\"\nassert solution(\"\"\"\n1\n5\n7\n\"\"\") == \"1 5 7\"\nassert solution(\"\"\"\n8\n4\n3\n5\n2\n6\n\"\"\") == \"2 3 5\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"1 4 5 2 6 7 3 8 9\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '1 2 3'\nassert solution('2 2') == '1 2'\nassert solution('5 4') == '1 4 2 5'\nassert solution('5 5') == '1 4 4 5'\nassert solution('3 10') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11 2') == '13500'\nassert solution('12000') == '13500'\nassert solution('9000') == '13500'\nassert solution('4500') == '13500'\nassert solution('10000') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 2') == '13500'\nassert solution('11 2') == '13500'\nassert solution('10 0') == '0'\nassert solution('0 0') == '0'\nassert solution('0 0') == '0'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''11 2\n    12000\n    9000\n4500\n    10000\n12000\n    11000\n    12000\n    18000\n    10000\n    9000\n    12000''') == '13500'\nassert solution('''100 11\n    12000\n    9000\n4500\n    10000\n    12000\n    11000\n    12000\n    18000\n    10000\n    9000\n    12000''') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n    5 1\n    4000\n    3000\n    5000\n    8000\n    8000\n\"\"\") == \"13500\"\nprint(solution(r\"\"\"\n    5 1\n    4000\n    3000\n    5000\n    8000\n    8000\n\"\"\") == \"13500\")\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    11 2\n    12000\n    9000\n    4500\n    10000\n    12000\n    11000\n    12000\n    18000\n    10000\n    9000\n    12000''') == '13500'\nprint(solution('''\n    11 2\n    12000\n    9000\n    4500\n    10000\n    12000\n    11000\n    12000\n    18000\n    10000\n    9000\n    12000'''))"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 2') == '13500'\nassert solution('12000') == '13500'\nassert solution('9000') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"11 2\") == \"13500\"\nassert solution(\"9000\") == \"13500\"\n\"\"\""
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11 2') == '1350'\nassert solution('12000') == '1350'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11 2\") == \"1350\"\nassert solution(\"12000\") == \"1350\"\nassert solution(\"9000\") == \"1350\"\nassert solution(\"4500\") == \"1350\"\nassert solution(\"10000\") == \"1350\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n\"\"\") == \"13500\"\nassert solution(\"\"\"\n12 10\n10 20 30 40 50 60\n15 50\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4\nSample Output:\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 16') == \"\"\"Hot_cross_buns!=\n________Hot_cross_buns!=\nHot_cross_buns!_=___Hot_cross_buns!_=\n________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nOne_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nOne_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\n________One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\n________Hot_cross_buns!=\nHot_cross_buns!=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nOne_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\n________One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=\n________Hot_cross_buns!=\nHot_cross_buns!=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot_cross_buns!=\nHot_cross_buns!_=________Hot"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 0 1 1 2 2 2\n2 2 2 2 2 2 2 2\n3 3 3 2 3 2 3 2\n4 4 4 4 4 4 4 4 4\n''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\n''')\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 16\") == \"\"\"Hot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\nSample Output:\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n________Hot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n'\n\nprint(solution('''\n2 20\nhot_cross_buns! hot_cross_buns! =\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2''') == '''Hot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 16\") == \"\"\"Hot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross buns! =\nHot cross buns! =\n\nHot cross"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 4 4 4 4\nSample Output:\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 16\\n4 4 4 4 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\nassert solution('4 4 2\\n1 3 5 2\\n2 5 6 4\\n3 4 2 1\\n4 2 5 1') == '4'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 1') == '33'\nassert solution('2 2 1') == '10'\nassert solution('3 2 1') == '10'\nassert solution('2 1 1') == '10'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('3 2 1 2') == '70'\nassert solution('3 2 1 2 2') == '77'\nassert solution('3 2 1 2 2 2') == '85'\nassert solution('3 2 1 2 2 2 2') == '86'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\nassert solution('5 7 7\\n2 1 1 1 2\\n1 2 3 4\\n3 3 1 1\\n3 4 4 4\\n4 1 3 3\\n4 1 2 3') == '0'\nprint('all tests passed')\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('10 3 1') == '33'\nassert solution('10 3 2') == '36'\nassert solution('2 4 4') == '42'\nassert solution('9 4 4') == '42'\n\"\"\"\n\n\nimport math\nfrom bisect import bisect_left\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('2 2 1') == '10'\n\nassert solution('3 1 1') == '10'\nassert solution('2 1 1') == '10'\n\nassert solution('3 2 2') == '60'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n    3 2 1\n    1 2 10\n    1 4 6 6\n    1 6 10 5\n    2 10 30 33\n    '''\n    ) == '33'"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == \"33\"\nassert solution(\"5 2 3 2\") == \"13\"\nassert solution(\"5 5 5 5 5\") == \"15\"\nassert solution(\"20 10 10 20 10 10 10 20 20\") == \"55\"\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n\"\"\") == \"33\"\n\nassert solution(\"\"\"\n2 1\n2 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 2\n1 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 3\n1 2\n1 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 2\n1 2\n3 4\n\"\"\") == \"0\""
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\\n') == '33'\nassert solution('2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\\n') == '70'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n20 15 10\\n7 7\\n30 0') == '405'"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n1\n20 15 10\n7 7\n30 1\n\"\"\") == \"375\"\nassert solution(\"\"\"\n5\n20 15 10\n7 7\n30 1\n40 0\n50 0\n\"\"\") == \"475\"\nassert solution(\"\"\"\n5\n20 15 10\n7 7\n30 1\n40 0\n50 0\n\"\"\") == \"475\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    3\n    20 15 10\n    7 7\n    30 0\n''') == '405'\n\nassert solution('''\n    3\n    20 15 10\n    7 7\n    30 0\n    30 0\n    30 0\n    30 0\n''') == '405'\n\nassert solution('''\n    3\n    20 15 10\n    7 7\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n''') == '405'\n\nassert solution('''\n    3\n    20 15 10\n    7 7\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n''') == '405'\n\nassert solution('''\n    3\n    20 15 10\n    7 7\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n    30 0\n''') == '405'"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\nassert solution('''\n3\n20 15 10\n7 7\n30 1\n''') == '1044'\nassert solution('''\n3\n20 15 10\n7 7\n30 15\n''') == '1044'\nassert solution('''\n3\n20 15 10\n7 7\n30 16\n''') == '945'\nassert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n10 10 20 10\n5 0 0 0\n10 0 0 0\n0 0 0 0\n5 0 0 0\n''') == \"75\"\nassert solution('''\n4\n10 10 20 10\n5 0 0 0\n10 0 0 0\n0 0 0 0\n5 0 0 0\n''') == \"55\"\n'''\nFirst run:\ninput:\n3\n20 15 10\n7 7\n30 0\noutput:\n405\n\nSecond run:\ninput:\n4\n10 10 20 10\n5 0 0 0\n10 0 0 0\n0 0 0 0\n5 0 0 0\noutput:\n55\n'''"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\nassert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\n\nSample Input:\n2\n1\n2\n1 2\nSample Output:\n4\n''' == '4')\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n2\n3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n20 15 10\\n7 7\\n30 0') == '405'\nassert solution('2\\n1 1 2\\n0 0 0\\n1 1 3\\n0 0 1\\n0 0 0\\n1 1 4\\n1 1 5\\n0 0 0\\n0 0 0') == '15'"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n20 15 10\\n7 7\\n30 0') == '405'\nprint('Solution: ', solution(input()))\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 2 4 7\n''') == '28 4 21 14.000000'\n'''\nYou are given a string,, of length, comprised of letters 'L' and 'G'.\n\nFor each letter in, you need to count the number of 'L' letters in a substring of, starting from.\n\nFind the number of distinct letter substrings of, and assign that value to a variable,.\n\nThen, compute and print the number of distinct letter substrings of, in ascending order. Each distinct string should be printed on a new line.\n\nFunction Description\n\nComplete the function countLetters in the editor below. The function must return an integer that corresponds to the number of distinct letter substrings of, in ascending order.\n\ncountLetters has the following parameter(s):\n\ns: a string\nInput Format\n\nThe first line contains a single integer, the number of distinct letter substrings of.\nThe second line contains  space-separated string, the substring.\n\nConstraints\n\n, where,\nOutput Format\n\nPrint the number of distinct letter substrings of, in ascending order.\n\nSample Input\n\n2\nTGLLGG\nTGLLGG\nSample Output\n\n1\n2\nExplanation\n\nTGLLGG has 4 distinct letter substrings.\nTGLLGG, G, L, and G, are the distinct letter substrings."
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 4 7') == '28 4 21 14.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"28 4 21 14.0\"\nassert solution(\"1\\n6\") == \"1 1 1 1 1 1\"\nassert solution(\"4\\n1 1 2 3\") == \"1 2 3 1 2\"\nassert solution(\"4\\n1 2 3 5\") == \"1 1 5 1 2\"\nassert solution(\"4\\n1 2 3 4\") == \"1 2 3 4 1\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '28 4 21 14.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 4\\n1 2\\n1 3\\n4 5') == '15.0 14.0 20.0'"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n4 5 7') == '28 4 21 14.0'\nassert solution('3\\n4 5 7 8 9') == '28 4 21 14.0'\nassert solution('1\\n2') == '3 3'\n'''\nimport math"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 4 7\\n') == '28 4 21 14.0'\nassert solution('3\\n5 5 5\\n') == '10 15 15 10.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 2 4 7\n''') == '28 4 21 14.0'\n\n\"\"\""
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'\n'''"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"1 2 3\"\"\") == \"28 21 14\"\nassert solution(\"\"\"1 1 1\"\"\") == \"28 1 1\"\nassert solution(\"\"\"1 1 2 3\"\"\") == \"28 1 1\"\nassert solution(\"\"\"1 1 2 3\"\"\") == \"28 1 1\"\nassert solution(\"\"\"1 1 1 2 3\"\"\") == \"28 1 1\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes'\nassert solution('''\n4 3\n1 2 3\n2 3 4\n3 1 4\n''') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n1 2 3 4\\n4 3 2 1\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\"\nassert solution(\"3 4\\n1 2 3 4\\n4 3 2 1\\n2 3 4 1\") == \"no\"\nprint(solution(input()))"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2\\n1 2 3\\n1 3 4') == 'yes\\n1 2 3 4'\nassert solution('3 2\\n1 2 3\\n2 3 1') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 3\n2 4 1 5 6\n4 5 2 6 3 1\n3 1 6 5 2 4\n6 5 4 2 1 3\n1 4 3 2 6 5\"\"\") == \"\"\"yes\n1 2 3 4 \n2 3 4 1 \n3 4 1 2 \n4 1 2 3\n1 4 3 2\n6 5 4 2 1\n3 1 6 5 2 4\n5 6 5 2 1 3\n4 2 3 1 6 5\"\"\".strip()\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'\n\"\"\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'\nassert solution('10 10\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n5 6 7 8\\n7 8 1 2\\n1 2 3 4\\n3 4 1 2\\n4 5 6 7\\n6 7 1 2\\n5 6 7 8\\n8 1 2 3\\n7 8 1 2\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\\n\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\\n\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\nassert solution(\"4 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n\") == \"yes\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"\n10 10\n1 2 3 4 5 6 7 8 9 10\n2 3 4 1 6 7 8 9 10\n3 4 1 6 7 8 9 10\n4 1 6 7 8 9 10\n5 6 7 8 9 10\n6 7 8 9 10\n7 8 9 10\n8 9 10\n9 10\n10\"\"\") == \"\"\"yes\n1 2 3 4 5 6 7 8 9 10 \n2 3 4 1 6 7 8 9 10 \n3 4 1 6 7 8 9 10 \n4 1 6 7 8 9 10 \n5 6 7 8 9 10\n6 7 8 9 10 \n7 8 9 10 \n8 9 10 \n9 10\"\"\"[:-1]\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n10 10 -10 -4 10\n''') == '10.000000000'\nassert solution('''\n2\n1 2\n''') == '1.50000000000001'\n'''\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n10 10 -10 -4 10\n''') == '10.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n10 10 -10 -4 10\\n') == '10.000000000'\n\"\"\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0.0'\nassert solution('3') == '10.0'\nassert solution('6') == '11.0'\nassert solution('6') == '11.0'\nassert solution('3') == '0.0'"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n2 2 -10 -4 2') == '2.0'\n\"\"\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n10 10 -10 -4 10\n''') == '10.0'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n10 10 -10 -4 10\n''') == '10.000000000'\nassert solution('''\n4\n1 3 -2 -3\n''') == '1.3333333333'\n\"\"\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10.000000000\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000000'\nassert solution('10\\n10 10 -10 -4 10') == '10.000000000'\n'''"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n10 10 -10 -4 10\\n') == '10.0'\nassert solution('5\\n10 10 -10 -4 10\\n1') == '0.0'\nassert solution('5\\n10 10 -10 -4 10\\n-1') == '0.0'\nassert solution('5\\n10 10 -10 -4 10\\n-1 -3') == '0.0'\nassert solution('5\\n10 10 -10 -4 10\\n-1 -3 -5') == '10.0'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 1\nassert solution('3') == 2\nassert solution('10') == 10"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'\nassert solution('4\\n5\\n3\\n2\\n3') == '2'\nassert solution('4\\n5\\n3\\n2\\n10') == '1'\nassert solution('4\\n5\\n3\\n2\\n10') == '2'\nassert solution('1\\n2\\n10\\n10') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n30\n3\n2\n45\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n4\n3\n2\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n7\n3\n2\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n7\n6\n3\n2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n7\n6\n5\n4\n\"\"\") == \"1\""
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3\\n2\\n1') == '1'\nassert solution('6\\n1\\n5\\n4\\n3\\n7\\n10') == '1'\nassert solution('10\\n1\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1') == '1'\nassert solution('16\\n1\\n13\\n10\\n7\\n6\\n5\\n4\\n3\\n2\\n1') == '2'\nassert solution('1\\n2\\n3\\n4\\n5') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2\\n4\\n10\\n3\") == \"1\"\nassert solution(\"5\\n3\\n5\\n10\\n3\") == \"0\"\nassert solution(\"5\\n3\\n4\\n10\\n3\") == \"0\"\nassert solution(\"5\\n3\\n2\\n10\\n3\") == \"1\"\nassert solution(\"5\\n3\\n2\\n10\\n3\") == \"0\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n30\\n3\\n2\\n45\") == \"1\"\nassert solution(\"4\\n10\\n2\\n5\\n5\\n4\\n3\\n7\") == \"8\"\nassert solution(\"10\\n24\\n1\\n8\\n13\\n10\\n12\\n5\\n6\\n4\") == \"8\"\nassert solution(\"10\\n20\\n1\\n8\\n15\\n10\\n12\\n5\\n6\\n4\") == \"8\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'\nassert solution('6\\n2\\n5\\n9\\n20\\n18') == '2'\nassert solution('15\\n3\\n5\\n9\\n7\\n13') == '2'\nassert solution('1\\n3\\n6\\n10') == '0'\nassert solution('5\\n1\\n3\\n4\\n2\\n2') == '3'\n\"\"\"\nimport math\n\nn = int(input())\nfactors_dict = {}\n\nfor num in range(2, 10**9+1):\n    if num not in factors_dict:\n        factors_dict[num] = []\n    for j in range(num, 10**9+1, num):\n        if j not in factors_dict:\n            factors_dict[j] = []\n        factors_dict[num].append(j)\n        factors_dict[j].append(num)"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"3\\n\") == \"2\"\nassert solution(\"5\\n\") == \"3\"\nassert solution(\"9\\n\") == \"4\"\nassert solution(\"9\\n\") == \"4\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.360000000\"\nassert solution(\"10 10 0.0 0.1\\n1 2 10\\n2 3 10\\n3 4 10\\n4 5 10\\n5 6 10\\n6 7 10\\n7 8 10\\n8 9 10\\n9 10 0.1\\n\") == \"0.000000000 -0.450000000\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000'\nassert solution('10 1.000 1.000\\n2 3 7\\n3 4 5\\n4 5 1\\n5 7 8\\n7 8 1\\n1 7 6\\n6 6 2\\n8 1 8\\n1 1 1\\n') == '-0.880000000 0.000000000'\nassert solution('2 5 8\\n3 4 7\\n1 4 5\\n1 5 7\\n2 5 2\\n4 5 1\\n5 7 8\\n7 8 1\\n1 7 6\\n6 6 2\\n8 1 8\\n1 1 1\\n') == '0.000000000 1.360000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\\n'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000\nassert solution('''\n10 10 5.0 0.66\n5 8 8\n4 6 1\n6 9 1\n8 3 1\n5 7 7\n6 5 5\n3 5 3\n''') == '0.000000000 1.360000000\n'''\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2 2 1 3\") == \"0.800000\"\nassert solution(\"1 1 2 2 1 3\") == \"0.800000\"\nassert solution(\"3 3 5 3 5 3\") == \"1.08\"\nassert solution(\"2 2 2 1 1 2 1 2 1\") == \"0.9595959595959598\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 6 3.0 0.66\") == \"0.000000000 1.360000000\"\nassert solution(\"2 4 8\") == \"0.000000000 1.000000000\"\nassert solution(\"4 6 1\") == \"0.000000000 1.000000000\"\nassert solution(\"3 6 1\") == \"0.000000000 1.000000000\"\nassert solution(\"4 5 5\") == \"0.000000000 0.360000000\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000'\n\nassert solution('''\n6 6 2.0 0.33\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.000000000'\n\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000'\n\nassert solution('''\n6 6 2.0 0.33\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.000000000'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('12') == '2'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '4\\n'\n    '0 0\\n'\n    '0 3\\n'\n    '3 3\\n'\n    '3 0\\n'\n    '2\\n'\n    '1 1\\n'\n    '2 2'\n) == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '4'\nassert solution('8') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n\"\"\"\n) == \"4\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n2') == '4', 'First example'\nassert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\\n') == '2', 'Second example'\nprint('The local tests passed')"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2''') == \"4\"\nassert solution('''1\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2''') == \"2\"\nassert solution('''10\n0 0\n0 5\n5 5\n5 0\n5 -3\n3 -3\n3 0\n2\n1 2\n2 2\n10\n-2 -2\n-2 -3\n-3 -3\n-3 0\n-3 1\n-2 2\n-2 2\n-2 1\n-1 1\n-1 0\n0 1\n0 0\n-1 -1\n-1 0\n0 -1\n0 1\n2\n2\n2\n2\n2\n1\n0\n0\n-1\n-1\n-1\n0\n-1\n1\n1\n0\n2\n2\n1\n1\n-2\n-2\n-1\n-1\n0\n1\n0\n0\n-1\n0\n0\n0\n-1\n-1\n-2\n-2\n0\n-1\n0\n1\n1\n-1\n-1\n0\n0\n0\n0\n-1\n1\n1\n0\n-1\n0\n1\n0\n0\n1\n-1\n-1\n-1\n0\n0\n0\n-1\n0\n-1\n0\n0\n0\n0\n-1\n-1\n1\n-1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n3 0\n2 1\n3 2\n3 0\n1 1\n2 2''') == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 0\") == \"2\"\nassert solution(\"4 0\") == \"4\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"4 3\") == \"4\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 0\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 0\\n0 1\\n0 2\\n0 3') == '2 3 1'\nassert solution('5 0\\n0 1\\n0 2\\n0 3\\n0 4') == '4 2 1'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 0') == '2'\nassert solution('4 0\\n0 1') == '3 2'\nassert solution('4 0\\n0 2\\n0 1') == '3 1 2'\nassert solution('4 0\\n0 3\\n0 2\\n0 1') == '3 1 2'\nassert solution('4 0\\n0 3\\n0 2\\n0 1\\n1 0') == '4 1 2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 0\") == \"2\"\nassert solution(\"4 0 1\") == \"3 2\"\nassert solution(\"4 0 1 2\") == \"3 1 2\"\nassert solution(\"4 0 1 2 3\") == \"3 1 2\"\nassert solution(\"4 0 1 2 3 4\") == \"3 1 2\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"2 3\"\nassert solution(\"4 0\") == \"2 3\"\nassert solution(\"8 3\") == \"2 3\"\n\"\"\""
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\nSample Output:\n0\n2 1\n0 3\n\"\"\") == \"0 2 1\"\n\nassert solution(\"\"\"\n2 3\n1 2\n0 3\nSample Output:\n0\n1 2\n0 3\n\"\"\") == \"0 1 2\"\n\nassert solution(\"\"\"\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n0 1\n0 2\n0 3\nSample Output:\n3 2 1\n\"\"\") == \"3 2 1\""
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\n\"\"\") == \"3 2 1\"\nassert solution(\"\"\"\n3 0\n1 0\n2 0\n\"\"\") == \"3 1 2\"\nassert solution(\"\"\"\n1 0\n2 0\n\"\"\") == \"1 0 2\"\nassert solution(\"\"\"\n2 0\n3 0\n\"\"\") == \"2 0 3\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 0\n0 1\n0 2\n0 3\n''') == '''\n2\n3 2\n3 1\n'''\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n3 1\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 0 0\\n0 1.5 0\\n\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"ok\"\nassert solution(\"3\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'ok'\nassert solution('2 3') == 'ok'\nassert solution('2 1.5 0') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n0 0 0\n0 1.5 0\n''') == 'ok'\nassert solution('''\n2\n0 0 0\n0 1.5 0\n''') == 'crash'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n0 0 0\n0 1.5 0\n''') == 'ok'\nassert solution('''3\n0 0 0\n0 1.5 0\n0 2.5 0\n''') == 'ok'\nassert solution('''4\n0 0 0\n0 1.5 0\n0 2.5 0\n0 3.5 0\n''') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n0 0 0\n0 1.5 0\n0 2 0\n\"\"\") == \"ok\"\nassert solution(\"\"\"\n1\n0 0 1\n\"\"\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"ok\"\nassert solution(\"2\") == \"ok\"\nassert solution(\"3\") == \"not ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 1.5 0\\n1 0.0 0') == 'ok'\nassert solution('2\\n0 0 0\\n0 1.5 0\\n1 0.0 0') == 'crash'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == \"ok\"\nassert solution(test_input_2) == \"crash\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n0 0 0\n0 1.5 0\n\"\"\") == \"ok\"\nassert solution(\"\"\"\n2\n0 0 0\n0 1.5 0\n\"\"\") == \"crash\""
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4''') == '2'\n\nassert solution('''10 10\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10''') == '10'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\"\nassert solution(\"1\\n1\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n1\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == '2\\nR 2\\nG 2'"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'R 0'"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n0\\n1\\n1\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n') == '2'\nassert solution('3\\n2\\n1\\n2\\n1\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n') == '1'\nassert solution('10\\n7\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n') == '0'\nassert solution('30\\n14\\n15\\n17\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '2'\n\nassert solution('5 3\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '2'\n\nassert solution('3 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '3'"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2\\n0 2\") == \"1\"\nassert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\") == \"2\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 3 3 3\") == \"2\"\nassert solution(\"4 2 6 1 2\") == \"2\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('2 1 2 2') == '3'\nassert solution('2 1 2 1') == '2'"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('2 3 7 3') == '3'\nassert solution('12 3 9 10 4 5 5 7 6') == '4'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('3 1 2 4 5 6') == '4'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('10 1 2 3') == '3'\nassert solution('15 5 15 3') == '1'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('1 1 1 1') == '1'\n\"\"\""
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2 2 3') == '2'\nassert solution('1 1 2 1') == '1'"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('7 8 3 3') == '1'\nassert solution('4 5 3 3') == '0'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n    4\nYYY\nNYY\nYNY\n\"\"\") == \"2 1 2 3\"\n\nassert solution(\"\"\"\n    3\nYYY\nNYY\nYNY\n\"\"\") == \"3 1 2\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1 2 3'\nassert solution('2') == '1 2 3'\nassert solution('3') == '1 2 3'\nassert solution('4') == '1 2 3'\nassert solution('5') == '1 2 3'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\nYYY\\nNYY\\nYNY') == '2 3 1 2'\nassert solution('3\\nYYY\\nNYY\\nYNY') == '3 1 2 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\nYYY\\nNYY\\nYNY\") == \"2 3 1 2\"\nassert solution(\"3\\nYYY\\nNYY\\nYNY\\nYYY\\nYYY\\nYYY\") == \"2 5 1 2\"\nassert solution(\"3\\nYYY\\nNYY\\nYNY\\nYYY\\nYYY\\nYYY\") == \"1 1 1 1\"\nassert solution(\"3\\nYYY\\nYYY\\nYYY\\nYYY\\nYYY\\nYYY\") == \"1 1 1 1\"\nassert solution(\"3\\nYYY\\nYYY\\nYYY\\nYYY\\nYYY\\nYYY\") == \"1 1 1 1\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\nYYY\\nNYY\\nYNY\\n\") == \"2 1 2\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3 1 2'\nassert solution('2 2') == '3 1 2'\nassert solution('2 1') == '3 1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2 1 2'\nassert solution('2') == '1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"10\") == \"5 6 7 8 9\"\nassert solution(\"1\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nNYY\nYYY\nYNY\n''') == '3 1 2'\nassert solution('''\nNYY\nYYY\nYYY\n''') == '3 1 2'\n'''\n    n = int(stdin)\n    starts = []\n    for i in range(n):\n        starts.append(int(stdin.split()[i]))\n    starts.sort()\n    l, r = 0, starts[-1]\n    ans = 0\n    while l < r:\n        mid = (l + r) // 2\n        count = 1\n        for i in range(1, n):\n            if starts[i] >= mid:\n                count += 1\n        if count >= n:\n            ans = mid\n            l = mid + 1\n        else:\n            r = mid\n    return str(ans)"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\nx.x\\n...\\n\") == \"1\\n0\"\n\nassert solution(\"2 2\\nx.x\\nx.x\\nx.x\\n\") == \"1\\n0\"\n\nassert solution(\"3 3\\nx.x\\nx.x\\nx.x\\nx.x\\n\") == \"0\\n1\\n0\"\n\nassert solution(\"3 5\\nx.x\\nx.x\\nx.x\\nx.x\\n\") == \"0\\n0\\n1\\n0\\n0\"\n\nassert solution(\"10 10\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\nx.x\\n\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\nx..\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2') == '4\\n0\\n5'\nprint(solution(input()))\n\n(2,1,3,1,4)\n(2,2,3,1)\n(2,3,3,1)\n(2,4,3,1)\n(2,5,3,1)\n(2,6,3,1)\n(2,7,3,1)\n(2,8,3,1)\n(2,9,3,1)\n(2,10,3,1)\n(2,11,3,1)\n(2,12,3,1)\n(2,13,3,1)\n(2,14,3,1)\n(2,15,3,1)\n(2,16,3,1)\n(2,17,3,1)\n(2,18,3,1)\n(2,19,3,1)\n(2,20,3,1)\n(2,21,3,1)\n(2,22,3,1)\n(2,23,3,1)\n(2,24,3,1)\n(2,25,3,1)\n(2,26,3,1)\n(2,27,3,1)\n(2,28,3,1)\n(2,29,3,1)\n(2,30,3,1)\n(2,31,3,1)\n(2,32,3,1)\n(2,33,3,1)\n(2,34,3,1)\n(2,35,3,1)\n(2,36,3,1)\n(2,37,3,1)\n(2,38,3,1)\n(2,39,3,1)\n(2,40,3,1)\n(2,41,3,1)\n(2,42,3,1)\n(2,43,3,1)\n(2,44,3,1)\n(2,45,3,1)\n(2,46,3,1)\n(2,47,3,1)\n(2,48,3,1)\n(2,49,3,1)\n(2,50,3,1)\n(2,51,3,1)\n(2,52,3,1)\n(2,53,3,1)\n(2,54,3,1)\n(2,55,3,1)\n(2,56,3,1)\n(2,57,3,1)\n(2,58,3,1)\n(2,59,3,1)\n(2,60,3,1)\n(2,61,3,1)\n(2,62,3,1)\n(2,63,3,1)\n(2,64,3,1)\n(2,65,3,1)\n(2,66,3,1)\n(2,67,3,1)\n(2,68,3,1)\n(2,69,3,1)\n(2,70,3,1)\n(2,71,3,1)\n(2,72,3,1)\n(2,73,3,1)\n(2,74,3,1)\n(2,75,3,1)\n(2,76,3,1)\n(2,77,3,1)\n(2,78,3,1)\n(2,79,3,1)\n(2,80,3,1)\n(2,81,3,1)\n(2,82,3,1)\n(2,83,3,1)\n(2,84,3,1)\n(2,85,3,1)\n(2,86,3,1)\n(2,87,3,1)\n(2,88,3,1)\n(2,89,3,1)\n(2,90,3,1)\n(2,91,3,1)\n(2,92,3,1)\n(2,93,3,1)\n(2,94,3,1)\n(2,95,3,1)\n(2,96,3,1)\n(2,97,3,1)\n(2,98,3,1)\n(2,99,3,1)\n(2,100,3,1)\n(2,101,3,1)\n(2,102,3,1)\n(2,103,3,1)\n(2,104,3,1)\n(2,105,3,1)\n(2,106,3,1)\n(2,107,3,1)\n(2,108,3,1)\n(2,109,3,1)\n(2,110,3,1)\n(2,111,3,1)\n(2,112,3,1)\n(2,113,3,1)\n(2,114,3,1)\n(2,115,3,1)\n(2,116,3,1)\n(2,117,3,1)\n(2,118,3,1)\n(2,119,3,1)\n(2,120,3,1)\n(2,121,3,1)\n(2,122,3,1)\n(2,123,3,1)\n(2,124,3,1)\n(2,125,3,1)\n(2,126,3,1)\n(2,127,3,1)\n(2,128,3,1)\n(2,129,3,1)\n(2,130,3,1)\n(2,131,3,1)\n(2,132,3,1)\n(2,133,3,1)\n(2,134,3,1)\n(2,135,3,1)\n(2,136,3,1)\n(2,137,3,1)\n(2,138,"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '0'\nassert solution('4 3') == '5'\nassert solution('5 3') == '0'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\nx..\\n...\\n...') == '4'\nassert solution('3 3\\nx.x.\\n...\\n...') == '0'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\") == \"4\\n0\\n5\\n\"\n\nassert solution(\"\"\"\n6 6\nx.\nxxxx\nxxxx\nxxxx\nxxxx\nxxx.\nx.\n\"\"\") == \"16\\n0\\n16\\n\"\n\nassert solution(\"\"\"\n1 1\n1\n\"\"\") == \"0\\n\"\n\nassert solution(\"\"\"\n3 5\nx.\nxxx\nxxx\nxxx\nxxx\nxxx\n\"\"\") == \"2\\n0\\n2\\n\"\n\nassert solution(\"\"\"\n7 7\nxxxxxx\nxxx.xx\nxxx.xx\nxx.xxx\nx.xxx\nxx.xx\nxx.xx\n\"\"\") == \"15\\n0\\n15\\n\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '4 0 5'"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"\n1 1\n1 1\n1 1\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n2 3\n.x.\n...\n.x.\n\"\"\"\n) == \"1\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '5'\nassert solution('3 3\\nx..\\n...\\nx..') == '0'\n\"\"\"\n\n\"\"\"\nRuntime: 40 ms, faster than 94.92% of Python3 online submissions for Squared Distance from a Random Point to the Left or Right of a Matrix.\nMemory Usage: 14.2 MB, less than 100.00% of Python3 online submissions for Squared Distance from a Random Point to the Left or Right of a Matrix.\n\"\"\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\nx.\n...\n...\n''') == '4'\nassert solution('''\n3\nx.\n...\n...\n''') == '0'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"10 20\") == \"19\"\nassert solution(\"8 2\") == \"7\"\nassert solution(\"10 2\") == \"5\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n3\n4\n5 3\n\"\"\") == \"4.114 -2.842\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n5\n3\n4\n5 3\"\"\") == \"4.114 -2.842\"\nassert solution(\"\"\"\n5\n3\n1\n2\n1\"\"\") == \"4.944 3.100\"\nassert solution(\"\"\"\n2\n3\n1\n3\n5\"\"\") == \"4.944 3.100\"\nassert solution(\"\"\"\n5\n3\n1\n2\n3\"\"\") == \"4.944 3.100\"\nassert solution(\"\"\"\n3\n1\n4\n4\n4\"\"\") == \"4.944 3.100\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1.118 2.037\"\nassert solution(\"1\") == \"0.000 0.000\"\nassert solution(\"1 2\") == \"0.000 0.000\"\nassert solution(\"1 3\") == \"0.000 0.000\"\nassert solution(\"1 2 3\") == \"0.000 0.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == \"4.114 -2.842\"\nassert solution('3') == \"6.297 -0.784\"\nassert solution('3') == \"5.000 3.000\"\nassert solution('2') == \"0.000 0.000\"\nassert solution('1') == \"0.000 0.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n2\n5\n3\n4\n5 3\n\"\"\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\\n\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\nassert solution(\"3\\n5\\n3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3.100'\nassert solution('2') == '1.000'\nassert solution('4') == '3.000'\nassert solution('5') == '3.000'\nassert solution('5 3') == '2.000'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\n3\n1\n\"\"\") == \"3.100\"\n\nassert solution(\"\"\"\n3\n1\n2\n\"\"\") == \"3.100\"\n\nassert solution(\"\"\"\n3\n2\n5\n3\n\"\"\") == \"4.114 -2.842\"\n\nassert solution(\"\"\"\n5\n6\n3\n2\n5\n3\n\"\"\") == \"6.297 -0.784\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n5\\n3') == '4.114 -2.842'\nassert solution('2\\n5\\n2') == '4.000 -1.000'\nassert solution('10\\n20\\n10') == '9.994 -0.001'\nassert solution('10\\n20\\n10') == '9.994 -0.001'\nassert solution('10\\n20\\n10') == '9.994 -0.001'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1.118 2.037\"\nassert solution(\"2\") == \"4.114 -2.842\"\nassert solution(\"3\") == \"1.118 2.037\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3\\n2 1 2 3') == '3'\nassert solution('5 3\\n2 1 2 3\\n8') == '10'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '8'\nassert solution('''\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '13'\nassert solution('''\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '10'\nassert solution('''\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '8'\nassert solution('''\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '10'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"3\\n5\\n8\\n\"\nprint(solution('''6 2\n3\n2\n5\n8\n4\n7'''))\n\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\nSample Output:\n3\n5\n8\n10\n13\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 5\n2 3 5 7\n2\n3\n5\n6\n8''') == '3 5 8 10 13'\n\nassert solution('''4 10\n1 2 2 3\n1\n2\n1\n2\n1\n2\n1\n1\n1\n1\n''') == '1 1 1 2 3 1 1 2 2'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8') == '3\\n5\\n8\\n10\\n13'"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8') == '3\\n5\\n8'\n\n\"\"\""
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"10\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"3\\n5\\n8\\n10\\n13\\n\"\nassert solution(\"2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"8\\n10\\n\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\") == \"10\"\nassert solution(\"3 4\") == \"7\"\nassert solution(\"5 5\") == \"10\""
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 5 7') == '3'\nassert solution('2') == '5'\nassert solution('5') == '8'\nassert solution('6') == '10'\nassert solution('8') == '13'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n''') == \"0\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('6 4\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '1'\nassert solution('6 5\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '2'\nassert solution('5 5\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '4'\nassert solution('100 5\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '43'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3\\n1 3\\n0 0') == '2'\nassert solution('6\\n1 2\\n2 3\\n2 4\\n2 5\\n1 2 5') == '2'\nassert solution('6\\n3 1\\n2 2\\n2 3\\n3 4\\n5 1\\n5 2') == '3'"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4') == '2'\nassert solution('5 6') == '0'\nassert solution('3 5 4 6') == '2'"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('3 3\\n0 1\\n1 2\\n2 3\\n3 4\\n2 5\\n1 2 5') == '0'\nassert solution('1 1\\n0 1') == '1'\nassert solution('2 4\\n0 1\\n1 2\\n2 3\\n1 4\\n2 3') == '3'\nassert solution('3 3\\n0 1\\n1 2\\n2 3\\n3 4\\n2 5\\n1 2 5') == '1'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n\"\"\") == \"0\"\nassert solution(\"\"\"\n7 4\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n0 1\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6 5\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n0 1\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 4\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n0 1\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n7 4\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n0 1\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n3 2 0 1\\n0 1 2\\n1 2 3\\n2 3 1\\n1 5 3\\n1 2 3 4 5\\n') == '1'\nassert solution('6\\n3 2 0 1\\n1 2 3\\n2 3 4\\n2 4 1\\n1 5 3\\n5 4 1\\n1 2 3 4 5\\n') == '0'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('2\\n0 1\\n1 2\\n2 3') == '1'\nassert solution('2\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2') == '0'\n\n'''"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"6 4\") == \"1\"\nassert solution(\"6 5\") == \"2\"\nassert solution(\"6 6\") == \"1\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"106\\n107\\n71\""
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '106\\n107\\n71'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1''') == '106'\nassert solution('''1 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1''') == '107'\nassert solution('''3 3\n100 2 5 C1 L1 C1 U1 C1\n50 2 5 C1 L1 C100 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1''') == '106'\nassert solution('''3 3\n100 2 5 C1 L1 C100 U1 C1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1''') == '107'\nassert solution('''3 2\n100 2 5 C1 L1 C100 U1 C1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1''') == '106'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '107'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"106\\n107\\n71\\n\"\nprint(solution())"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '106'\nassert solution('1 1') == '107'\nassert solution('70 3 1 C1') == '71'\nprint('AC')\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n') == '106\\n107\\n71'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n') == '106\\n'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '107'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n') == '107\\n'\nassert solution('1\\n1 2\\n3 1 C1 L1 C1 U1 C1\\n2 3\\n4 3 C1 L1 C1 U1 C1\\n5 4\\n6 4 C1 L1 C1 U1 C1\\n7 5\\n8 1 C1 L1 C1 U1 C1\\n') == '106\\n107\\n71\\n'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"51\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('AA') == '51'\nassert solution('BB') == '0'\nprint(solution(input()))\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"AA\") == \"51\"\n\n### \n## Your code goes here\n## Hint: One way to solve this problem is to count all palindromic strings of length $2N$, and then filter those that are in the window of $S$.\n##\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nAA\nAA''') == '51'\nassert solution('''\nAA\nAA''') == '51'"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"AA\") == \"51\"\nassert solution(\"A\") == \"1\"\n'''"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"AA\") == \"51\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('AA') == '51'\nassert solution('AAB') == '50'\nassert solution('ABCD') == '76'\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('AB') == 2\nassert solution('AA') == 4\nassert solution('AC') == 5\nassert solution('AAAB') == 6\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"51\"\n\n---Input is sufficient---\nYour submission script will test the correctness of your code using stdin/stdout.\nYour output will be sent to stdout by your code.\n---Your code is already written correctly---\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''AA''') == \"5\"\nassert solution('''AB''') == \"3\"\nassert solution('''AAB''') == \"0\"\n''')"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71''') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"no ties\"\nassert solution(\"3\") == \"1 2\"\nassert solution(\"4\") == \"no ties\"\nassert solution(\"5\") == \"no ties\"\nassert solution(\"6\") == \"no ties\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"no ties\"\nassert solution(\"\"\"\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"no ties\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"1 2\"\nassert solution(\"1\\n3\\n5\\n7\\n9\") == \"1 3\"\nassert solution(\"2\\n4\\n5\\n7\\n9\") == \"2 4\"\nassert solution(\"1\\n2\\n4\\n5\\n7\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\") == \"1 2\"\nassert solution(\"10\\n
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '2 1'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\nassert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\nassert solution(\"2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\") == \"1 2\"\nassert solution(\"6\\n20 44 52 68\\n1 23 31 57 64\\n8 25 40 49 61\\n15 26 42 53 71\\n9 17 35 55 61\\n4 27 42 54 71\") == \"1 2\"\nassert solution(\"10 25 31 57 64\\n8 17 35 55 61\\n6 20 44 52 68\\n4 27 42 54 71\\n9 23 31 58 63\\n15 26 42 53 71\\n11 25 40 49 61\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'no ties'\nassert solution('3') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n') == '1 2'\nassert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n') == '1 2'\nassert solution('3\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n') == '1 2'\nassert solution('4\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n') == '1 2'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 2\n1 2\n''') == '0'\nassert solution('''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '0'\nassert solution('''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '2'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0'\nassert solution('1') == '1'\nassert solution('3 2 1') == '0'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3') == '1'"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0'\nassert solution('3 2 1') == '0'\nassert solution('1 2 3') == '0'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0'\nassert solution('3 2 1') == '0'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3') == '2'\n'''\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3') == '0'\nprint(solution(input()))\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1 2 3') == '1'\nassert solution('3\\n2 3 1') == '0'\nassert solution('4\\n1 4 3 2\\n2 1 3 1') == '0'\nassert solution('2\\n2 4 1 1\\n2 3 1') == '1'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('10') == '2'\nassert solution('100') == '6'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n3 2 1\n1 2 3\n1 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4\n5 3 2 1\n2 3 1 2\n2 1 3 1\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n5 1 1\n1 1 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n3 2 1\n1 2 3\n1 2 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '0.4'\nassert solution('3') == '0'\nassert solution('10') == '0.2'\nassert solution('16') == '0.171428571429'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0.5'\nassert solution('4') == '0.454545454545'\nassert solution('10') == '0.454545454545'\nassert solution('16') == '0.454545454545'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3') == '0.4'\nassert solution('10\\n1 2 3\\n10 2 3') == '0.2'\nassert solution('16\\n1 2 3\\n10 2 3') == '0.171428571429'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3') == '0.4'\nassert solution('5\\n1 2 3\\n10 2 3\\n16 3 4') == '0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n6 2 3\n10 2 3\n16 3 4\nSample Output:\n0.4\n0\n0.2\n0.171428571429\n0.228571428571\n''') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3') == '0.4\\n0'\nassert solution('2\\n6 2 3\\n10 2 3') == '0'\nassert solution('4\\n1 5 3\\n6 2 3\\n10 2 3') == '0'\nprint('all tests passed')\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '0.4\\n0.2\\n0.171428571429\\n0.228571428571'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\\n'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571'\nprint(solution('''4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n'''))\nassert float(solution('''4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''')) == 0.4\nprint(float(solution('''4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''')))\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\\n'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 5\n3 3\n4 5\n-1 -6\n''') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n'\nprint('All tests passed!')\n\n\"\"\"\n--- Day 1: Report Repair ---\n\nAfter saving Christmas five years in a row, you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.\n\nThe tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them stars. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.\n\nTo save your vacation, you need to get all fifty stars by December 25th.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n\nBefore you leave, the Elves in accounting just need you to fix your expense report (your puzzle input); apparently, something isn't quite adding up.\n\nSpecifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.\n\nFor example, suppose your expense report contained the following:\n\n1721\n979\n366\n299\n675\n1456\nIn this list, the two entries that sum to 2020 are 1721 and 299. Multiplying them together produces 1721 * 299 = 514579, so the correct answer is 514579.\n\nOf course, your expense report is much larger. Find the two entries that sum to 2020; what do you get if you multiply them together?\n\nans:"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1 * 2 = 2\\n2 + 1 = 3\\n3 - 1 = 2\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n3 4\") == \"1 + 2 = 3\\n3 * 3 = 9\"\n\nassert solution(\"3\\n1 2\\n3 4\\n3 2\") == \"1 + 2 = 3\\n3 * 3 = 9\\n3 + 2 = 5\"\n\nassert solution(\"2\\n3 2\\n3 2\") == \"3 * 3 = 9\\n3 + 2 = 5\"\n\nassert solution(\"4\\n3 3\\n3 2\\n3 1\") == \"3 * 3 = 9\\n3 + 2 = 5\\n3 + 1 = 4\"\n\nassert solution(\"3\\n-3 -1\\n-2 1\") == \"-3 - 1\\n-2 * 1 = -2\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 5\n3 3\n4 5\n-1 -6\n''') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('''\n5\n1 5\n3 3\n4 5\n-1 -6\n0 0\n0 0\n''') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n0 0 = 0\\n0 0 = 0'\nassert solution('''\n5\n1 1\n0 0\n1 1\n-1 -1\n1 1\n0 0\n''') == '1 + 1 = 2\\n0 0 = 0\\n1 + 1 = 3\\n-1 - 1 = 2\\n1 + 1 = 4\\n0 0 = 0'\n''')\nassert solution('''\n5\n3 3\n1 1\n4 4\n-1 -1\n0 0\n0 0\n''') == '3 * 3 = 9\\n1 + 1 = 2\\n4 - 4 = 0\\n-1 - 1 = 2\\n1 + 1 = 3\\n0 0 = 0\\n0 0 = 0'\n''')\n'''\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 5\\n3 3\\n4 5\\n-1 -6\\n') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n', \"First example test\"\nassert solution('2\\n1 5\\n3 3\\n4 5\\n-1 -6\\n') == 'impossible', \"Second example test\"\nassert solution('5\\n1 5\\n3 3\\n4 5\\n-1 -6\\n') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n', \"Third example test\"\n\ninput = open('input.txt')\nn = int(input.readline().strip())\npairs = []\nfor i in range(n):\n    pairs.append(list(map(int, input.readline().strip().split())))\n\nexprs = {}\nfor i in range(n):\n    for j in range(i + 1, n):\n        exprs[pairs[i] + pairs[j]] = {\n            '+': pairs[i],\n            '-': pairs[j],\n            '*': pairs[i] * pairs[j]\n        }\n\nexprs = {k: v for k, v in exprs.items() if v['+']!= v['-'] and v['*']!= v['+'] and v['+']!= v['-']}\n\nanswers = []\nfor pair in pairs:\n    answers.append((pair,\n                    exprs[pair]['+'],\n                    exprs[pair]['-'],\n                    exprs[pair]['*']\n                   ))"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"1 + 2 = 3\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"5\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\nimpossible\"\nassert solution(\"1\\n1\") == \"impossible\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n4\\n-1\\n') == '1 + 3 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('2\\n2\\n2\\n2\\n') == 'impossible'\n\n'''\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('6\\n1 -5\\n3 -3\\n4 -5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('1\\n2 3\\n4 5\\n-1 -6') == '2 * 3 = 6\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('2\\n2 3\\n4 5\\n-1 -6') == '2 + 3 = 5\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('3\\n2 3\\n4 5\\n-1 -6') == '2 * 3 = 6\\n4 - 5 = -1\\n-1 - -6 = 5'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4\n1 5\n3 3\n4 5\n-1 -6\n\"\"\") == \"\"\"\n1 + 5 = 6\n3 * 3 = 9\n4 - 5 = -1\n-1 - -6 = 5\n\"\"\"\nassert solution(\n\"\"\"\n3\n1 2\n3 4\n-2 -4\n\"\"\") == \"\"\"\n1 + 2 = 3\n3 * 4 = 12\n-2 - 4 = -2\n\"\"\"\nassert solution(\n\"\"\"\n3\n1 2\n3 4\n-2 -4\n\"\"\") == \"\"\"\n1 + 2 = 3\n3 * 4 = 12\n-2 - 4 = -2\n\"\"\"\nassert solution(\n\"\"\"\n3\n1 2\n3 4\n-2 -4\n\"\"\") == \"\"\"\nimpossible\nimpossible\nimpossible\n\"\"\""
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n2 3\n3 4\n5 6''') == '1 + 2 = 3\\n2 * 3 = 6\\n3 * 4 = 12\\n5 - 6 = -2\\n'\nassert solution('''4\n1 2\n3 4\n5 6\n-1 -2''') == '1 + 2 = 3\\n3 * 4 = 12\\n5 - 6 = -2\\n'\nassert solution('''7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n-1 -2''') == '1 + 2 = 3\\n3 * 4 = 12\\n5 - 6 = -2\\n'\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n-1 -2''') == '1 + 2 = 3\\n3 * 4 = 12\\n5 - 6 = -2\\n'\nassert solution('''1\n2 1\n1 2\n1 2''') == 'impossible\\n'"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"4\\n1\\n4\\n6\\n0\"\n\"\"\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '''4\n1\n4\n6\n0\n'''\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == '4 1 6 0'"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1 5\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n\"\"\"\n) == \"\"\"4\n0\n4\n6\n0\n\"\"\"\n\nassert solution(\n\"\"\"\n4 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n\"\"\"\n) == \"\"\"\n4\n1\n4\n6\n0\n\"\"\""
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '4\\n1\\n4\\n6\\n0\\n'\n\nassert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '4\\n1\\n4\\n6\\n0\\n'\n\nassert solution('''\n2 1\n1 1\n''') == '0\\n0\\n'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '\\n'.join(['4', '1', '4', '6', '0'])\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1\\n3\\n1\\n2\\n5\\n2\\n5\\n1\\n2\\n5') == '1\\n4\\n6\\n0\\n'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '''\n4\n1\n4\n6\n0\n'''\n\nassert solution('''\n4\n1\n1\n1\n1\n''') == '''\n4\n0\n'''\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3\n4\n''') == '''\n1\n1\n'''\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == 4\nassert solution('4 5 6 7') == 5\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"4\""
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4') == \"4\"\nassert solution('4\\n1 2 3 4') == \"4\"\nassert solution('4\\n1 2 3 4') == \"4\"\nassert solution('4\\n1 2 3 4') == \"4\"\nassert solution('4\\n1 2 3 4') == \"4\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('10 20 30 40') == '3'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == \"4\", \"Failed Test\"\nassert solution(solution.__annotations__) == \"4\", \"Failed Test\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == 4\nassert solution('5 2 2 3 4') == 6\nassert solution('1 2 2 2 3') == 1\nassert solution('1 2 2 3 4') == 6\nassert solution('1 2 2 3 5') == 3\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n100\n2 3 4\n\"\"\") == \"2\"\n\n\"\"\"\n     TC: O(N^2)\n\"\"\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n4 1\n\"\"\") == \"3\", \"Wrong\"\nassert solution(\"\"\"\n3\n-1 1 -1\n\"\"\") == \"3\", \"Wrong\"\nassert solution(\"\"\"\n4\n-1 -1 2 3\n\"\"\") == \"3\", \"Wrong\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(INPUT) == OUTPUT"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 30 2\n20 60\n50 90\n''') == '4 3'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2\n1\n1\n1''') == '2 1'\nassert solution('''1 21\n1\n1\n1''') == '2 1'\nassert solution('''1 1\n1\n1\n1''') == '1 1'\nassert solution('''1 1\n2\n1\n1''') == '1 1'\nassert solution('''1 1\n2\n1\n1''') == '1 1'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 2\n1 2\n1 2\n\"\"\") == \"3 3\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 31 2\\n20 60\\n50 90') == '4 3'\nassert solution('1 1 2\\n1 2 3\\n1 3 1\\n1 1 1\\n1 2 1') == '3 2'\nassert solution('1 1 3\\n1 2 1\\n1 2 3\\n1 1 1\\n1 2 1') == '4 2'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3\\n20 60\\n50 90') == '4 3'\nassert solution('100 30\\n10 20\\n20 30') == '3 2'\nassert solution('100 60\\n20 20\\n10 20') == '2 1'\nassert solution('100 20\\n10 30\\n20 20') == '1 2'"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1 1\"\"\") == \"1 3\"\nassert solution(\"\"\"4 2\"\"\") == \"4 1\"\nassert solution(\"\"\"1 2\"\"\") == \"1 0\"\nassert solution(\"\"\"2 1\"\"\") == \"2 3\"\nassert solution(\"\"\"1 2\"\"\") == \"1 0\"\n\"\"\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4 3'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 31 2\") == \"4 3\"\nassert solution(\"20 60\") == \"3 2\"\nassert solution(\"50 90\") == \"1 2\"\nassert solution(\"100 80\") == \"2 1\"\nassert solution(\"1 4 4\") == \"0 0\"\n\"\"\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"1 31 2\\n\"\n    \"20 60\\n\"\n    \"50 90\\n\"\n) == \"4 3\"\nassert solution(\n    \"10 32 5\\n\"\n    \"20 40\\n\"\n    \"80 80\\n\"\n) == \"4 2\"\nassert solution(\n    \"1 5 2\\n\"\n    \"5 5\\n\"\n    \"100 100\\n\"\n) == \"1 2\"\nassert solution(\n    \"5 5 1\\n\"\n    \"5 5\\n\"\n    \"100 100\\n\"\n) == \"2 1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 31 2\n20 60\n50 90\n''') == '4 3'\nassert solution('''\n1 30 2\n20 70\n40 90\n''') == '6 3'\nassert solution('''\n1 30 3\n20 70\n40 90\n''') == '6 2'\nassert solution('''\n1 30 2\n20 70\n40 90\n''') == '8 2'\n''')"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('2 2 2') == '6'"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '3'\nassert solution('3 2 1') == '6'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('2 2 4') == '6'\nassert solution('2 2 3') == '1'\nassert solution('2 2 2') == '1'\nassert solution('2 2 2 4') == '1'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == '3'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('2 2 1') == '3'\nassert solution('1 1 1') == '3'\n\n'''\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"2 2 10\") == \"6\"\nassert solution(\"2 2 0.7\") == \"1\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1') == '3'\nassert solution('10 10 1') == '10'\n'''\n\nr, w, d = input().split()\nr, w, d = int(r), int(w), int(d)\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('10 8 1') == '10'\nassert solution('10 8 1') == '10'"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2 1''') == '3'\nassert solution('''3 3 3''') == '4'\n\"\"\""
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\nassert solution(\"4\\n1910 2618 3000 2720 2714\") == \"0 0\"\nassert solution(\"4\\n2413 2412 1500 2411\") == \"3 1\"\nassert solution(\"8\\n2112 2213 2214 2215 2216\") == \"1 0\"\nassert solution(\"8\\n2542 2543 2544 2545 2546 2547\") == \"4 1\""
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1341 2412 1200 3112 2391\n2\n2384 2383\n''') == '1 2'\n'''\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1341 2412 1200 3112 2391\n''') == '3 1'\nassert solution('''\n3\n9 5 3\n''') == '0 1'\n'''\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n10\n1341 2412 1200 3112 2391\n3 1\n\"\"\") == r\"3 1\"\nassert solution(r\"\"\"\n1\n1341 2412 1200 3112 2391\n3 1\n\"\"\") == r\"2 1\"\nassert solution(r\"\"\"\n2\n1341 2412 1200 3112 2391\n4 1\n\"\"\") == r\"0 0\"\nassert solution(r\"\"\"\n0\n1\n2\n\"\"\") == r\"1 0\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"3 1\"\nassert solution(\"1\") == \"0 1\"\nassert solution(\"2\") == \"0 1\""
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2 1'\nassert solution('6') == '5 2'\nassert solution('8') == '5 2'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"5\\n1341 2412 1200 3112 2391\\n\") == \"3 1\"\nassert solution(\n    \"3\\n1341 2412 1200 3112 2391\\n\") == \"3 1\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2 1'\nassert solution('10') == '5 2'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\""
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n1341 2412 1200 3112 2391\n\"\"\") == \"3 1\"\n\nassert solution(\"\"\"\n6\n1001 2201 2361 2412 1123 2121\n\"\"\") == \"3 2\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([10, 20]) == '6'\nassert solution([3, 5]) == '7'\nassert solution([1, 3, 7]) == '3'\nassert solution([2, 1, 1]) == '1'\nassert solution([2, 3, 2]) == '5'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'\nassert solution('1 1\\n2 1\\n') == '0'\nassert solution('10 100\\n10 20\\n') == '10'\nassert solution('2 10\\n1 1\\n') == '20'\nassert solution('2 1\\n1 1\\n') == '1'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 20\\n3 5') == '6'\nassert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\n\nassert solution('''5\n10 20\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '11'\n\nassert solution('''3\n5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '7'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\nassert solution('''5 10\n1 5 1\n2 4 2\n3 3 5\n''') == '9'\nassert solution('''5 20\n1 5 1\n2 4 2\n3 3 5\n4 3 4\n''') == '12'"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n2 3\\n2 3 5\") == \"6\"\nassert solution(\"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\") == \"7\"\nassert solution(\"15 5\\n3 5\\n1 2 2\\n2 3 2\\n2 3 5\\n3 2 4\\n3 3 5\") == \"4\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 20') == '6'\nassert solution('10 10') == '9'\nassert solution('100 100') == '99'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 a\n2 b\n1 a\n1 b\n2 a\n1 b\n1 a\n1 b\n''') == '0 1 -1 0\\n'\nassert solution('''\n2\na b\n1 a\n1 b\n''') == '0 1 2\\n'\nassert solution('''\n2\nab\n1 b\n1 ab\n''') == '0 2 1\\n'\nassert solution('''\n2\nab\n1 b\n1 ab\n''') == '0 1 2\\n'\nassert solution('''\n2\nab\n1 b\n1 ab\n''') == '0 1 -1\\n'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 ab b\\n1 b') == '0 1'\nassert solution('3 ab b\\n1 a\\n2 b') == '0 2'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == stdin.splitlines()[1]\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n2 ab b\n1 b\n''') == '0 1'\nassert solution('''2\n2 ab b\n1 b\n''') == '-1 0'\nassert solution('''\n20\naab aaa\nbba ab\nab aa b\nbbb bb b\na ab b\nb aa b\na bb b\nb aa b\nb bb b\na ab b\nb aa b\na bb b\nb aa b\na bb b\nb aa b\na ab b\na bb b\nbbb bb b\n''') == '-1 -1'\nassert solution('''\n20\nbbb bbb b\na ab b\na bb b\nb aa b\nb aa b\nb aa b\na bb b\na ab b\na ab b\na ab b\na ab b\na ab b\na ab b\nb aa b\nb aa b\na ab b\nb aa b\na aa b\na aa b\nb aa b\nb aa b\na ab b\na ab b\nbbb bbb b\n''') == '0 1'\nassert solution('''\n2\naa aa\na a\n''') == '0 1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n2 a\n1 b\n''') == '0 1'\nassert solution('''2\na\n2\n''') == '-1 0'\nassert solution('''3\na\na\n1\n''') == '2 1'\nassert solution('''3\na\nb\n2\n''') == '3 0 1'\nassert solution('''4\nb\nc\nd\n''') == '3 0 1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 a a\n2 b\n\"\"\") == \"0 1\"\nassert solution(\"\"\"\n3 a a\n1 a\n\"\"\") == \"1 -1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 ab b\\n1 b') == '0 1'\n\"\"\""
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 ab b\n1 b\n''') == '0 1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 ab b\n1 b''') == '0 1'\nassert solution('''\n3 ab b\n1 c\n''') == '0 1'\nassert solution('''\n3 ab b\n2 c\n''') == '1 1'\n'''\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0 1'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4') == '1'\nassert solution('1 1 2') == '3'\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4\\n1 1 2\\n2\\n1 1 2\\n2\\n') == '3'\nassert solution('2 5\\n2 1 2\\n2\\n2\\n1\\n1\\n') == '1'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2 4\n1 1 2\n2\n1 1 2\n2\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n2 4\n1 1 2\n2\n1 1 2\n1\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n2 4\n1 1 2\n2\n2\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n2 4\n1 1 2\n1 1 2\n2\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\") == \"1\"\nassert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\") == \"2\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\") == \"1\\n3\"\nassert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\") == \"0\\n1\"\n\"\"\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\") == \"3\"\nassert solution(\"2 4\\n1 1 2\\n2\") == \"8\"\n\"\"\"\nfrom functools import reduce\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\n1 2 3\n1 1 2\n2''') == '1'\n\nassert solution('''2 4\n1 1 2\n1 1 2\n2\n1 1 2\n2\nSample Input:\n2 5\n1 1 2\n1 1 2\n2\nSample Output:\n0.1\n1\n''') == '0.1'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4\\n1 1 2\\n2\\n1 1 2\\n2') == '3'\nassert solution('4 6\\n1 1 2\\n2\\n1 1 2\\n2') == '4'\nassert solution('3 3\\n1 1 2\\n2\\n1 1 2\\n2') == '2'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 4\n1 1 2\n2''') == '1'\nassert solution('''2 4\n1 1 2\n2''') == '3'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4\\n1 1 2\\n2\\n1 1 2\\n2\\n') == '1\\n3'\n\nSample Input:\n5 5\n5\n4 1 5\n1 2 3\n2 1 2\n3 2 2\n2 4 1\n3 4 2\n1 4 1\n3 2 4\nSample Output:\n2.8\n1.0\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n0 5 2\n5 0 4\n2 4 0\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '7'\nassert solution('4') == '5'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3 5 2\\n5 0 4\\n2 4 0') == '7'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n0 5 2\n5 0 4\n2 4 0''') == '7'\n\nassert solution('''4\n0 1 2\n1 0 2\n2 0 3\n3 0 4''') == '3'\n\nassert solution('''5\n1 3 4\n1 2 4\n2 3 4\n3 4 5''') == '4'\n\nassert solution('''5\n1 2 3 4\n1 2 4\n1 3 4\n1 4 5\n4 3 2''') == '3'\n\nassert solution('''5\n1 3 4\n1 2 4\n1 4 5\n2 3 4\n3 2 4''') == '2'"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"1\\n2\\n0\\n5\\n4\\n3\\n0\\n0\\n\") == \"7\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 0\\n5 0 4\\n2 4 0\\n') == '7'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 3\\n3 2\\n') == '5'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3\\n0 5 2\\n5 0 4\\n2 4 0\"\n) == \"7\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '7'\n\n\"\"\""
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1099511627776\n''') == '8'\nassert solution('''\n3\n3\n''') == '3'\nassert solution('''\n1000000000\n''') == '5'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('1099511627776') == '8'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1099511627776') == '8'\nassert solution('9') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '8'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"12\") == \"4\"\nassert solution(\"1000000000000000\") == \"20\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1099511627776\") == \"8\"\nprint(solution(input()))\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"2\"\nassert solution(\"1234\") == \"2\"\nassert solution(\"12345\") == \"3\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1099511627776') == '8'\nassert solution('12345678910111213141516') == '1'"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\nx.x.\nx.x.\nx.x.\n''') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\nx.\\nx.\\nx.\") == \"2\"\nassert solution(\"3 3\\nx..\\nx.\\nx.x\") == \"4\"\nassert solution(\"3 3\\nx.\\n.x.\\nx.x\") == \"2\"\nassert solution(\"3 3\\nx.x.x\\nx.\\nx.\") == \"3\"\nassert solution(\"3 3\\nx.x.x\\nx.\\nx.x\") == \"4\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x\\n') == '2'\n\nimport math"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\nx..\\n.x.x\\nx.x.x\\n') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n    3 3\n    x.\n    .x.\n    x.x\n    \"\"\") == \"2\"\nassert solution(\"\"\"\n    3 3\n    .x.\n    x.x\n    .x.x\n    \"\"\") == \"3\"\nassert solution(\"\"\"\n    3 3\n    x.\n    .x.\n    x.x\n    \"\"\") == \"3\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n.x.\nx.x\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 5\nx.x\n.x.\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n10 7\nx.x.\nx.x.\nx.x.\n.x.x.\nx.x.x.\nx.x.x.\nx.x.x.\nx.x.x.\n.x.x.x\nx.x.x.\nx.x.x.\n\"\"\") == \"2\""
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '2'\nassert solution('1 2') == '1'\nassert solution('5 5') == '3'\nassert solution('1 0') == '1'\nassert solution('1 0 0 0') == '1'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\nx.\n''') == '2'\nassert solution('''\n1 2\nx.x\n''') == '2'\nassert solution('''\n2 2\nx.x\n''') == '3'\nassert solution('''\n3 3\nx.x\n.x.\n''') == '2'\nassert solution('''\n3 4\nx.x\n.x.x\n.x.x\n''') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\nx..\n.x.\nx.x\n''') == '2'\nassert solution('''\n5 3\nx.x\n..x\nx.x\nx.x\n.x.\n''') == '1'\nassert solution('''\n5 3\nx.x\n..x\nx.x\nx.x\n.x.\n''') == '0'\nassert solution('''\n6 6\nxxx\nxxx\nxxxx\nx..x\n..x.\nxxxx\n''') == '4'\nassert solution('''\n5 4\nx.x\nx.x\nx.x\nx.x\nx.x\n''') == '3'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"9\"\nassert solution(\"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 2') == '9'\nassert solution('2 5 2') == '6'\nassert solution('3 0 0') == '5'\nassert solution('4 2 4') == '6'\nassert solution('5 3 0') == '-1'\n\"\"\""
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n\") == \"9\\n6\\n-1\\n5\\n6\"\nassert solution(\"10\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3\\n4 4 4 4\\n5 5 5 5\\n6 6 6 6\\n7 7 7 7\\n8 8 8 8\\n9 9 9 9\\n10 10 10 10\\n\") == \"15\\n-1\\n5\\n10\\n16\\n-1\\n7\\n12\\n18\\n19\\n20\\n\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"9\"\nassert solution(\"5\\n\") == \"-1\"\nassert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n\") == \"6\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n5 2 1\\n1 5 2') == '10'\nassert solution('4\\n5 2 1\\n1 5 2\\n2 5 2') == '-1'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"9\"\nassert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"9\"\nassert solution(\"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3\n-2\n-1\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '9\\n-1\\n5\\n6\\n'"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n2\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\"\n) == \"9\"\nassert solution(\n    \"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\"\n) == \"6\"\nassert solution(\n    \"\"\"\n2\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\"\n) == \"5\""
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1 1 40 30 20 10\\n2 1 95 95 95 10') == '91'\nassert solution('4\\n1 1 40 30 20 10\\n2 1 95 95 95 10') == '100'\nassert solution('5\\n1 1 40 30 20 10\\n2 1 95 95 95 10') == '98'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\nassert solution(\"\"\"3\n1 1 40 30 20 10\n2 1 95 95 95 10\n3 1 95 50 30 20\n\"\"\") == \"92\"\nassert solution(\"\"\"1\n1 1 40 30 20 10\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\nassert solution(\"\"\"\n10\n10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == \"91\"\nassert solution('''\n4\n1 1 2 3\n2 1 3 4\n3 1 4 5\n4 1 2 3\n''') == \"10\"\nassert solution('''\n5\n1 1 2 3 4\n2 1 4 3 5\n3 1 5 4 2\n4 1 5 2 3\n5 1 4 3 2\n''') == \"7\"\n'''\n--- Part Two ---\nIt can happen that when you finish a level, you loose the item you used to finish it. This can be caused either by using it or just not using it.\n\nIf you don't use the item that you just finished, you get $-1$ less for each item that you haven't used. If you don't finish a level, you get $-5$ more for each item that you haven't used.\n\nIn fact, if you finish a level in the order that you used the items, you get $n$ extra points.\n\nThis means that if you finish the level in a particular order, you get $n$ extra points regardless of whether you use or not use the items in the order you finished them.\n\nThe challenge now is to finish the levels in the order that you used the items.\n\nGiven a string $S$ describing the items you used in a particular order (without the items that you used to finish a level) and an integer $n$ denoting the number of levels, return the total amount of extra points you would have if you finished the levels in this order.\n\nFor example:\n\nS = \"1 2 4\"\nn = 2\n\nIn this example, you finish the first and second level (with the item 1). You get $5$ extra points, and you get $-1$ less for each item you didn't use (in this case, only 2).\n\nS = \"2 1 4\"\nn = 2\n\nIn this example, you finish the second and third level (with the items 2 and 4). You get $10$ extra points, and you get $-5$ less for each item you didn't use (in this case, only 1).\n\nS = \"2 3 1\"\nn = 2\n\nIn this example, you finish the second and third level (with the items 2, 3 and 1). You get $11$ extra points, and you get $-5$ less for each item you didn't use (in this case, only 1).\n\nS = \"4 5 2 1\"\nn = 2\n\nIn this example, you finish the third and fourth level (with the items 5 and 2), and you get $12$ extra points, and you get $-10$ less for each item you didn't use (in this case, only 1 and 3).\n\nS = \"4 1 2\"\nn = 2\n\nIn this example, you finish the fourth and fifth level (with the items 4 and 1), and you get $13$ extra points, and you get $-10$ less for each item you didn't use (in this case, only 1).\n\nS = \"1\"\nn = 2\n\nIn this case, you finish the first and second level (with the item 1), and you get $9$ extra points. You get $-1$ less for each item you didn't use (in this case, only 2).\n\nS = \"\"\nn = 2\n\nIn this case, you finish all levels (with the items 2, 3, 4 and 5), and you get $21$ extra points. You get $-5$ less for each item you didn't use (in this case, only 1, 2, 3 and 5).\n\nS = \"0\"\nn = 2\n\nIn this case, you finish all levels (with the items 1 and 2), and you get $6$ extra points. You get $-1$ less for each item you didn't use (in this case, only 1).\n\nS = \"10\"\nn = 2\n\nIn this case, you finish all levels (with the items 10 and 2), and you get $11$ extra points. You get $-1$ less for each item you didn't use (in this case, only 2).\n\nS = \"2 3 1 4\"\nn = 3\n\nIn this case, you finish all levels (with the items 2, 3, 1, and 4), and you get $13$ extra points. You get $-2$ less for each item you didn't use (in this case, only 3 and 2).\n\nS = \"1 3 2 4\"\nn = 3\n\nIn this case, you finish all levels (with the items 1, 3, and 2), and you get $14$ extra points. You get $-2$ less for each item you didn't use (in this case, only 2 and 4).\n\nS = \"5 7 2 1\"\nn = 3\n\nIn this case, you finish all levels (with the items 5, 7, 2, and 1), and you get $15$ extra points. You get $-3$ less for each item you didn't use (in this case, only 1 and 7).\n\nS = \"7 5 2 1\"\nn = 3\n\nIn this case, you finish all levels (with the items 7, 5, 2, and 1), and you get $15$ extra points. You get $-3$ less for each item you didn't use (in this case, only 1 and 7).\n\nS = \"4 1 2\"\nn = 4\n\nIn this case, you finish all levels (with the items 4 and 1), and you get $16$ extra points. You get $-4$ less for each item you didn't use (in this case, only 2).\n\nS = \"4 1 3 2\"\nn = 4\n\nIn this case, you finish all levels (with the items 4, 1, 3, and 2), and you get $17$ extra points. You get $-4$ less for each item you didn't use (in this case, only 2 and 3).\n\nS = \"4 1 3 2\"\nn = 5\n\nIn this case, you finish all levels (with the items 4, 1, 3, 2, and 2), and you get $18$ extra points. You get $-5$ less for each item you didn't use (in this case, only 3 and 2).\n\nS = \"7 5 2 1\"\nn = 5\n\nIn this case, you finish"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '91'\nassert solution('1 1 40 30 20 10') == '91'\nassert solution('2 1 95 95 95 10') == '95'"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == \"91\"\nassert solution('2') == \"95\"\nassert solution('5') == \"95\"\nassert solution('10') == \"95\"\nassert solution('20') == \"95\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\\n') == '91'"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '91'\nassert solution('4') == '61'\nassert solution('5') == '31'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == '91'\n'''"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\nassert solution(\"\"\"\n3\n3 3 50 40 30 20\n2 3 60 40 20 10\n1 2 50 30 20\n\"\"\") == \"251\"\nassert solution(\"\"\"\n100\n2 1 1 1 1 2 2 2 1 2 2 2 2 2\n
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '11'\nassert solution('3') == '12'\nassert solution('4') == '13'\nassert solution('5') == '14'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1\n0\n''') == '0'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n5 2\n1\n1 2\n\"\"\") == \"15\"\nassert solution(\"\"\"\n5\n20 8\n0\n0 1\n0\n\"\"\") == \"20\"\nassert solution(\"\"\"\n2\n5 2\n0\n0 1\n\"\"\") == \"15\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n15 20\\n0\\n1 1') == '15'\nassert solution('2\\n25 15\\n1\\n1 1\\n1 1 2') == '15'\nassert solution('2\\n1 2\\n0\\n1 1 2') == '1'\n\"\"\""
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n15 20\n0\n2 1\n\"\"\") == \"15\"\nassert solution(\"\"\"\n6\n15 20\n0\n4 1\n\"\"\") == \"15\"\nassert solution(\"\"\"\n4\n15 20\n0\n3 2\n\"\"\") == \"15\"\nassert solution(\"\"\"\n7\n15 20\n0\n4 2\n\"\"\") == \"20\"\nassert solution(\"\"\"\n8\n15 20\n0\n3 2\n\"\"\") == \"15\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n10 5\\n0\\n1 1') == \"10\"\nassert solution('3\\n10 5\\n0\\n1 1\\n1 2') == \"10\"\nassert solution('3\\n10 5\\n1\\n1 2') == \"10\"\nassert solution('3\\n10 5\\n1\\n1 2\\n1 3') == \"10\"\nassert solution('3\\n10 5\\n1\\n1 2\\n2 3') == \"10\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n15 20\\n0\\n1 1') == '15'\nassert solution('3\\n10 10 10\\n1 1 1\\n2 2 2') == '10'\nassert solution('3\\n1 1 1\\n2 2 2') == '0'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n0\n''') == '0'\nassert solution('''\n2\n2\n0\n''') == '2'\nassert solution('''\n2\n1\n0\n''') == '1'\nassert solution('''\n3\n2\n0\n''') == '2'\nassert solution('''\n6\n0\n1\n3\n4\n5\n''') == '6'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '15'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"15\"\n\"\"\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == 'impossible'\nassert solution('''\n2 1\n3 5\n1 2\n''') == '2'\nassert solution('''\n2 4\n2 3\n1 2\n3 2\n''') == 'impossible'\n\n'''\nPlease note that your program must work for all input cases even if some of them are invalid.\n\nYou can find some test cases in the \"test_data\" folder.\n\nIn addition, please note that your program must work for all input cases even if some of them are invalid.\n'''"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([5,4],[3,1,375],[2,5,283],[1,4,716],[3,4,98]) == \"impossible\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2 3\n4 5 6\n5 4 7\n6 7 8\n''') == \"impossible\"\nassert solution('''\n6\n1 2 3\n4 5 6\n4 5 7\n5 4 8\n6 4 9\n''') == \"impossible\"\nassert solution('''\n5\n1 2 3\n4 5 6\n4 5 7\n5 4 8\n6 4 9\n''') == \"4\"\nassert solution('''\n5\n1 2 3\n4 5 6\n4 5 7\n5 4 8\n6 4 9\n''') == \"4\"\nassert solution('''\n5\n1 2 3\n4 5 6\n4 5 7\n5 4 8\n6 4 9\n''') == \"impossible\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4') == 'impossible'\nassert solution('3 1 375') == '1250'\nassert solution('2 5 283') == '1250'\nassert solution('1 4 716') == '1250'\nassert solution('3 4 98') == '1250'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([5, 4],\n        [[3, 1, 375],\n         [2, 5, 283],\n         [1, 4, 716],\n         [3, 4, 98]]) == \"impossible\"\n\nassert solution([3, 4],\n        [[1, 2, 4],\n         [2, 3, 2],\n         [1, 3, 1]]) == \"1\"\n\nassert solution([5, 4],\n        [[3, 1, 375],\n         [2, 5, 283],\n         [1, 4, 716],\n         [3, 4, 98],\n         [2, 3, 2],\n         [1, 3, 1]]) == \"impossible\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == \"impossible\"\nassert solution('''\n5 3\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == \"376\"\nassert solution('''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == \"376\"\nassert solution('''\n5 4\n3 2 375\n2 3 283\n1 1 716\n3 4 98\n''') == \"376\"\nassert solution('''\n5 3\n2 1 375\n3 2 283\n1 4 716\n3 4 98\n''') == \"376\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"impossible\"\nassert solution(\"5 4\\n3 1 375\") == \"375\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4') == 'impossible'\nassert solution('5 5') == '835'\nassert solution('5 6') == 'impossible'\nassert solution('5 7') == '835'\nassert solution('5 8') == 'impossible'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == 'impossible'\nassert solution('''5 5\n0 1 750\n1 3 100\n3 4 100\n0 5 100\n2 2 500\n''') == '250'\nassert solution('''3 3\n1 1 250\n2 2 250\n3 3 250\n''') == '250'\nassert solution('''4 3\n1 1 750\n2 3 100\n3 4 100\n''') == '500'\nassert solution('''5 3\n1 1 250\n2 3 100\n3 4 100\n4 5 250\n''') == '500'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n''') == '0.9999999999999998'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.5000000000000002'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('5') == '2.000000000'\n\"\"\"\nimport sys\n\nsys.stdin = open(\"input.txt\")\n\nn = int(input())\n\ncount = 0\nwhile (n > 0):\n    if n % 2 == 0:\n        n = n / 2\n    else:\n        n = (3 * n) + 1\n    count += 1\n\nprint(count)"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '2.5'\n\n-- Python --\n\nimport sys\n\nsys.stdin = open(\"input.txt\", \"r\")"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1.000000000\"\nassert solution(\"12\") == \"2.624999998\"\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\nA:1\nA:1\nA:1\n''') == '3'\n\nassert solution('''4\nA:1\nB:1\nC:2\nD:1\n''') == '3'\n\nassert solution('''5\nA:1\nB:2\nC:1\nD:1\nE:1\n''') == '4'\n\nassert solution('''6\nA:2\nB:1\nC:1\nD:2\nE:1\n''') == '3'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1.000000000'"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '1.000000000'\nassert solution('3') == '1.000000000'\n\"\"\""
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1\n\"\"\") == \"1.000000000\"\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '1.444444444'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\nassert solution('''\n3 1 10\n2 5 9\n1 1 1\n''') == '3.6'\n'''\n---\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100 3 10') == '115.000000000'\nassert solution('15 99 98') == '149.9999999999'\nassert solution('40 3 2') == '143.8000000001'\nassert solution('90 10 9') == '72.58'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\n\nassert solution('''\n3 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\n\nassert solution('''\n1 10 10\n10 9 9\n3 2 2\n''') == '16.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"100 3 10\") == \"115\"\nassert solution(\"15 99 98\") == \"98\"\nassert solution(\"40 3 2\") == \"101\"\nassert solution(\"90 10 9\") == \"110\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\nassert solution('''\n50 50 50\n0 0 0\n''') == '0.0'\nassert solution('''\n100 200 300\n80 100 50\n50 200 100\n''') == '15.16'\nassert solution('''\n100 200 300\n80 100 50\n50 200 100\n''') == '11.28'\nassert solution('''\n100 100 100\n100 100 100\n''') == '30.000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    3 10\n    99 98\n    40 3 2\n    90 10 9\n''') == '115.000000000'\n\nprint(solution('''\n    100 3\n    99 98\n    40 3 2\n    90 10 9\n'''))\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 10') == '115.000000000'\nassert solution('15 99 98') == '115.000000000'\nassert solution('40 3 2') == '115.000000000'\nassert solution('90 10 9') == '115.000000000'"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n100 3 10\\n15 99 98\\n40 3 2') == '115.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n1 1 2\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('100 3 10') == '115'\nassert solution('15 99 98') == '104.9999999999'\nassert solution('40 3 2') == '120.000000000'\nassert solution('90 10 9') == '95.0000000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n100 1 1\\n100 1 1.5\") == \"199.500000\"\nassert solution(\"3\\n4 5 6\\n5 5 5\") == \"12.500000\"\nassert solution(\"5\\n7 9 1\\n7 9 2.5\\n7 9 4\\n7 9 6.5\\n7 9 8\") == \"8.500001\"\n\"\"\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n90000 1 1\n60000 1 1\n30000 1 1.5\n''') == '20000.0'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n100 1 1') == '199.500000'\nassert solution('2\\n100 1 1') == '200.000000'\nassert solution('3\\n100 1 1') == '201.000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n100 1 1\n100 1 1.5\n''') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '199.500000'\nassert solution('3') == '199.500000'\n\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n100 1 1\n100 1 1.5\n\"\"\") == \"199.50000000000001\""
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"199.500000\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n100 1 1\n100 1 1.5\n''') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n''') == '199.500001'\nassert solution('''\n3\n1 1 2\n1 1 2\n1 1 2\n''') == '199.500001'\nassert solution('''\n10\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"2 1\n1 2 3 4 5 6 7 8 9 10 11 12\"\"\") == \"1\"\nprint(\"PASSED\")\n\n\"\"\"Runtime: 24 ms, faster than 98.03% of Python3 online submissions for Assign Cookies to People.\nMemory Usage: 13.7 MB, less than 91.12% of Python3 online submissions for Assign Cookies to People.\"\"\""
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sample_input_1) == \"1\"\nassert solution(input_1) == \"3\"\nassert solution(input_2) == \"5\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 2 3 4 5 6 7 8 9 10 11 12') == '1'\nassert solution('1000000000\\n
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == \"1\"\nassert solution('2') == \"1\"\nassert solution('3') == \"2\"\nassert solution('4') == \"2\"\nassert solution('5') == \"2\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '1'\nassert solution('''\n3\n1 2 1\n''') == '1'\nassert solution('''\n10\n1 1 2 2 2 3 3 3 4 4 4 4 4 5 5 6 7 7 7 7 7 8 8 8 8 8 9 9 9 9 9\n''') == '3'\n\n'''\n3\n1 2 1\n'''"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"1 2 3 4 5 6 7 8 9 10 11 12\"\n) == \"1\""
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 3\\n1 2 3 4 5 6 7 8 9 10 11 12\") == \"1\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 2 3 4 5 6 7 8 9 10 11 12\") == \"1\"\nassert solution(\"20 1\\n
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1 3\\n1 2 3 4 5 6 7 8 9 10 11 12\"\n) == \"1\"\nassert solution(\n    \"2 1\\n1 3 2 4 5 6 7 8 9 10 11 12\"\n) == \"3\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n2 1 1\n''') == 'Impossible'\nassert solution('''\n20\n
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 1\n''') == 'Impossible', solution.__doc__\nassert solution('''\n1\n10 1 5\n''') == '5', solution.__doc__"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 4 3\\n') == 'Impossible'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3 2 1 1') == 'Impossible'\nassert solution('1\\n1 2 1 1') == '2'\nassert solution('1\\n2 1 1 1') == '1'\nassert solution('1\\n2 3 1 1') == 'Impossible'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"13\\n3 2 1 1\"\n) == \"5\"\nassert solution(\n    \"10\\n2 1 1 1 1 1\"\n) == \"7\"\nassert solution(\n    \"100\\n1 1 1 1 1 1 1 1 1\"\n) == \"2\"\nassert solution(\n    \"1000\\n1 1 1 1 1 1 1 1 1\"\n) == \"0\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'Impossible'\nassert solution() == '5'"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'Impossible'\nassert solution('2') == '5'\nassert solution('5') == '5'\nassert solution('13') == 'Impossible'\nassert solution('22') == '10'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('13') == 'Impossible'\nassert solution('2') == '1'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"Impossible\"\nassert solution(\"11\") == \"10\"\nassert solution(\"7\") == \"2\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"6\\n2 2 1 1\\n\"\n) == \"Impossible\"\n\nassert solution(\n    \"16\\n4 5 2 3\\n\"\n) == \"4\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\nassert solution('') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\nassert solution('ad') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aabcad\") == \"yes\", \"Third example\"\nassert solution(\"aba\") == \"yes\", \"First example\"\nassert solution(\"acd\") == \"no\", \"Second example\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r'''\nb\nc\n''') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''aabcad''') == 'yes', 'Wrong!'\nassert solution('''aba''') == 'no', 'Wrong!'\nassert solution('''acd''') == 'no', 'Wrong!'\n''')\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aabcad') == 'yes', \"Sample tests\"\n\nassert solution('aba') == 'no', \"Sample tests\"\n\nassert solution('acd') == 'no', \"Sample tests\"\n\"\"\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'\nassert solution('5 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'\nassert solution('10 8 7\\n10 3 5\\n5 1 9\\n9 3 6\\n8 1 1\\n3 1 5\\n6 6 8\\n7 4 4\\n1 2 5\\n4 7 8\\n') == '11'\nassert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5 10') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == \"5\"\nassert solution('''\n2 3\n0 1\n0 2\n''') == \"0\"\nassert solution('''\n4 5\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n''') == \"2\"\nassert solution('''\n3 3\n1 2\n2 3\n''') == \"2\"\nassert solution('''\n2 2\n0 0\n0 1\n0 2\n''') == \"0\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\nassert solution('''4 5 10\n2 4 3 5\n3 1 1 6\n3 4 7 10\n2 4 8 9\n4 2 8 9\n''') == '4'\nassert solution('''4 5 10\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 8 9\n4 2 8 9\n''') == '0'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\nassert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\nassert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\nassert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\nassert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"1\") == '0'\nassert solution(\"2\") == '1'\nassert solution(\"3\") == '1'\nassert solution(\"4\") == '1'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 1 1\\n3 1 1 6') == '2'\nassert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == \"5\"\nassert solution('''\n10 4 5\n2 4 6 5\n3 4 5 2\n5 4 5 2\n6 5 5 4\n4 7 3 3\n2 8 9 1\n''') == \"10\"\nassert solution('''\n4 5 5\n1 1 1 1\n1 1 1 2\n1 1 1 2\n1 1 1 1\n1 1 1 2\n1 1 1 2\n1 1 1 1\n1 1 1 1\n''') == \"6\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\nassert solution('2 4 same') == '1'\n\"\"\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n1 0\n0 1\n0 0\n''') == '4'\n\n'''\nThe same as the previous example:\n\n- For the first case, the answer is 4.\n- For the second case, the answer is 0.\n'''"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 4 same\\n3 5 same\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4'\n\"\"\""
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 2\n2 4 same\n3 5 same\"\"\") == \"4\"\nassert solution(\"\"\"5 2\n2 4 same\n3 5 same\n2 3 same\n1 4 same\"\"\") == \"2\"\nassert solution(\"\"\"5 3\n3 1 false\n5 1 false\n1 2 false\n3 4 false\"\"\") == \"2\"\nassert solution(\"\"\"5 5\n1 2 1 2\n3 4 1 2\n5 4 3 4\n1 1 1 1\n2 5 2 5\n3 4 2 2\"\"\") == \"16\"\nassert solution(\"\"\"3 2\n3 2 1\n2 2 1\"\"\") == \"0\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 4 same') == '4'\nassert solution('5 2\\n3 5 same') == '0'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same') == '4'\nassert solution('5 2\\n3 5 same\\n2 4 same') == '0'\nassert solution('5 2\\n1 4 same\\n2 5 same\\n3 4 same\\n5 6 same\\n6 4 same\\n7 5 same') == '1'\nassert solution('5 2\\n3 4 different\\n3 5 different\\n2 4 different\\n2 5 different\\n2 6 different\\n3 4 different\\n3 5 different') == '5'"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\nassert solution('''\n5 2\n2 4 same\n3 5 different\n''') == '5'\nassert solution('''\n10 4\n1 2 same\n2 3 different\n3 4 same\n4 5 same\n5 6 different\n6 7 same\n7 8 same\n8 9 different\n9 10 different\n10 11 same\n''') == '3'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '5 2\\n'\n    '2 4 same\\n'\n    '3 5 same\\n'\n) == '4'"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\n\nassert solution('''\n4 2\n2 4 same\n3 5 same\n''') == '3'\n\nassert solution('''\n2 2\n3 4 same\n5 6 same\n''') == '0'\n\nassert solution('''\n8 2\n1 2 same\n1 3 same\n1 4 same\n1 5 same\n1 6 same\n1 7 same\n2 4 same\n2 5 same\n2 6 same\n2 7 same\n3 4 same\n3 5 same\n3 6 same\n3 7 same\n4 5 same\n4 6 same\n4 7 same\n5 6 same\n5 7 same\n6 7 same\n''') == '0'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 4\\n0 1\\n0 2\\n3 4\\n3 5') == \"3\"\nassert solution('2 1\\n3 5') == \"1\"\nassert solution('1\\n1') == \"0\"\nassert solution('0\\n0') == \"0\"\nprint('You passed the test!')\n\"\"\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n0 1\") == \"3\"\nassert solution(\"10 2\\n0 2\\n3 4\\n4 6\\n8 1\\n8 7\\n7 9\\n9 10\\n5 10\") == \"2\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '1'\nassert solution('5 3') == '2'\nassert solution('10 4') == '2'\nassert solution('10 5') == '3'\nassert solution('100 5') == '7'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 4\n0 1\n0 2\n3 4\n3 5\n''') == '3'\n\nassert solution('''\n6 2\n1 2\n2 3\n''') == '1'\n\nassert solution('''\n10 20\n1 5\n4 9\n0 5\n4 7\n8 1\n0 2\n4 8\n4 6\n7 7\n''') == '8'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 1') == '0'\nassert solution('4 4') == '0'\nassert solution('10 10') == '0'\nassert solution('10 10') == '2'"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 4\n0 1\n0 2\n3 4\n3 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 4') == '3'\nassert solution('10 4') == '4'\nassert solution('8 3') == '2'\nassert solution('20 4') == '6'\nassert solution('10 20') == '3'"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6 4\n0 1\n0 2\n3 4\n3 5\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 4\n0 1\n0 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6 3\n0 1\n1 2\n2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n9 7\n1 0\n1 2\n3 4\n3 5\n4 6\n5 7\n6 8\n0 9\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n6 4\n0 1\n0 2\n3 4\n3 5\n4 6\n5 7\n6 8\n0 9\n0 10\n\"\"\") == \"1\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 4\n0 1\n0 2\n3 4\n3 5\n''') == '3'\nassert solution('''\n6 5\n0 2\n0 3\n1 4\n2 5\n''') == '4'\nassert solution('''\n10 3\n2 7\n4 8\n3 9\n3 10\n3 11\n5 12\n5 13\n6 14\n6 15\n7 16\n7 17\n8 18\n8 19\n''') == '7'\nassert solution('''\n10 2\n0 2\n0 3\n1 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n8 16\n8 17\n''') == '4'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 4, 0, 1, 3, 2]) == '2'\nassert solution([0, 1, 0, 1]) == '0'\nassert solution([3, 3, 3]) == '0'\nassert solution([1, 1, 1, 1]) == '0'\nassert solution([0, 1, 0, 1]) == '1'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"3.0\"\nassert solution(\"5\") == \"9.0\"\n\nimport math"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '9.0'\nassert solution('1 4') == '9.0'\nassert solution('2 2') == '6.5'\nassert solution('4 1') == '6.5'\nassert solution('3 5') == '2.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '9.0'\nassert solution('2') == '6.5'\nassert solution('4') == '2.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\"\n) == \"9.0\"\n\nassert solution(\n    \"10\"\n) == \"45.0\"\n\nassert solution(\n    \"30\"\n) == \"250.0\"\n\nassert solution(\n    \"20\"\n) == \"67.5\"\n\nassert solution(\n    \"10\"\n) == \"45.0\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"9.0\"\nassert solution(\"3\") == \"2.5\"\nassert solution(\"4\") == \"6.5\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5'\nassert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nD') == '9.0\\n6.5\\n2.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '5.0'\nassert solution('4') == '5.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 1\\n5 3\") == \"9.0\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n1\n2\n''') == '9.0'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5'\nassert solution('15\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\\n11 1\\n12 1\\n13 1\\n14 1\\n15 1\\n16 1\\n17 1\\n18 1\\n19 1\\nLUR') == '30.0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 2\\nB 1 2\\nB 2 3\\nR 3 1') == \"1\"\nprint('Test 1 Successful!')\nassert solution('4 5 1\\nR 2 1\\nB 1 2\\nR 3 4\\nB 4 2\\nR 1 3\\nB 3 4') == \"1\"\nprint('Test 2 Successful!')\nassert solution('1') == \"0\"\nprint('Test 3 Successful!')\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n1\\n2\\n1') == '0'\nassert solution('3\\n3\\n3\\n') == '1'\nassert solution('4\\n3\\n1\\n3\\n') == '0'\n\"\"\""
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3 2\nR 1 2\nB 2 3\nR 3 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 3 3\nB 1 2\nR 3 1\nB 3 3\nR 3 2\nR 1 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 3 3\nB 1 2\nR 3 1\nB 3 3\nR 3 2\nB 3 2\n\"\"\") == \"1\""
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == \"1\"\nassert solution('2') == \"0\"\nassert solution('3') == \"0\"\nassert solution('4') == \"0\"\nassert solution('5') == \"0\"\n\"\"\"\n\nfrom math import sqrt\n\nn, m, k = list(map(int, input().split()))\n\nedges = [[False for _ in range(n)] for _ in range(n)]\nfor _ in range(m):\n    u, v, color = list(map(int, input().split()))\n    if color == 0:\n        edges[u-1][v-1] = True\n        edges[v-1][u-1] = True"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4 2\\nR 1 2\\nB 2 3\\nB 3 1\\n') == '1'\nassert solution('10 5 2\\nR 1 2\\nB 2 3\\nB 3 1\\nR 4 5\\nB 4 6\\nB 5 1\\nR 5 6\\nR 6 7\\nB 7 8\\nB 8 9\\nR 9 10\\nB 10 1\\nB 11 2\\nR 11 3\\nB 11 4\\nB 12 1\\nR 12 4\\nR 13 1\\nB 13 2\\nR 13 3\\nB 13 4\\nB 14 2\\nR 14 3\\nR 15 1\\nB 15 2\\nR 15 3\\nB 15 4\\nB 16 2\\nR 16 3\\nB 16 4\\nB 17 2\\nB 17 3\\nR 17 4\\nB 18 2\\nB 18 3\\nB 19 2\\nB 19 3\\nB 20 2\\nB 20 3\\nR 21 2\\nB 21 3\\nR 22 2\\nB 22 3\\nB 23 2\\nB 23 3\\nB 24 2\\nB 24 3\\nB 25 2\\nB 25 3\\nR 26 2\\nB 26 3\\nB 27 2\\nB 27 3\\nB 28 2\\nB 28 3\\nB 29 2\\nB 29 3\\nB 30 2\\nB 30 3\\nB 31 2\\nB 31 3\\nR 32 2\\nB 32 3\\nR 33 2\\nB 33 3\\nR 34 2\\nB 34 3\\nB 35 2\\nB 35 3\\nB 36 2\\nB 36 3\\nR 37 2\\nB 37 3\\nR 38 2\\nB 38 3\\nB 39 2\\nB 39 3\\nR 40 2\\nB 40 3\\nR 41 2\\nB 41 3\\nB 42 2\\nB 42 3\\nB 43 2\\nB 43 3\\nR 44 2\\nB 44 3\\nR 45 2\\nB 45 3\\nR 46 2\\nB 46 3\\nR 47 2\\nB 47 3\\nB 48 2\\nB 48 3\\nB 49 2\\nB 49 3\\nB 50 2\\nB 50 3\\nB 51 2\\nB 51 3\\nB 52 2\\nB 52 3\\nB 53 2\\nB 53 3\\nB 54 2\\nB 54 3\\nB 55 2\\nB 55 3\\nB 56 2\\nB 56 3\\nB 57 2\\nB 57 3\\nB 58 2\\nB 58 3\\nB 59 2\\nB 59 3\\nB 60 2\\nB 60 3\\nB 61 2\\nB 61 3\\nR 62 2\\nB 62 3\\nR 63 2\\nB 63 3\\nB 64 2\\nB 64 3\\nB 65 2\\nB 65 3\\nR 66 2\\nB 66 3\\nB 67 2\\nB 67 3\\nR 68 2\\nB 68 3\\nB 69 2\\nB 69 3\\nB 70 2\\nB 70 3\\nR 71 2\\nB 71 3\\nB 72 2\\nB 72 3\\nB 73 2\\nB 73 3\\nR 74 2\\nB 74 3\\nB 75 2\\nB 75 3\\nB 76 2\\nB 76 3\\nB 77 2\\nB 77 3\\nB 78 2\\nB 78 3\\nB 79 2\\nB 79 3\\nB 80 2\\nB 80 3\\nB 81 2\\nB 81 3\\nB 82 2\\nB 82 3\\nB 83 2\\nB 83 3\\nB 84 2\\nB 84 3\\nB 85 2\\nB 85 3\\nB 86 2\\nB 86 3\\nB 87 2\\nB 87 3\\nB 88 2\\nB 88 3\\nB 89 2\\nB 89 3\\nB 90 2\\nB 90 3\\nB 91 2\\nB 91 3\\nB 92 2\\nB 92 3\\nB 93 2\\nB 93 3\\nR 94 2\\nB 94 3\\nR 95 2\\nB 95 3\\nR 96 2\\nB 96 3\\nB 97 2\\nB 97 3\\nR 98 2\\nB 98 3\\nR 99 2\\nB 99 3\\nB 100 2\\nB 100 3\\nR 101 2\\nB 101 3\\nR 102 2\\nB 102 3\\nB 103 2\\nB 103 3\\nB 104 2\\nB 104 3\\nB 105 2\\nB 105 3\\nR 106 2\\nB 106 3\\nB 107 2\\nB 107 3\\nB 108 2\\nB 108 3\\nB 109 2\\nB 109 3\\nB 110 2\\nB 110 3\\nB 111 2\\nB 111 3\\nB 112 2\\nB 112 3\\nB 113 2\\nB 113 3\\nB 114 2\\nB 114 3\\nB 115 2\\nB 115 3\\nB 116 2\\nB 116 3\\nB 117 2\\nB 117 3\\nB 118 2\\nB 118 3\\nB 119 2\\nB 119 3\\nB 120 2\\nB 120 3\\nB 121 2\\nB 121 3\\nB 122 2\\nB 122 3\\nB 123 2\\nB 123 3\\nB 124 2\\nB 124 3\\nB 125 2\\nB 125 3\\nB 126 2\\nB 126 3\\nB 127 2\\nB 127 3\\nB 128 2\\nB 128 3\\nB 129 2\\nB 129 3\\nB 130 2\\nB 130 3\\nB 131 2\\nB 131 3\\nB 132 2\\nB 132 3\\nB 133 2\\nB 133 3\\nB 134 2\\nB 134 3\\nB 135 2\\nB 135 3\\nB 136 2\\nB 136 3\\nB 137 2\\nB 137 3\\nB 138 2\\nB 138 3\\nB 139 2\\nB 139 3\\nB 140 2\\nB 140 3\\nB 141 2\\nB 141 3\\nB 142 2\\nB 142 3\\nB 143 2\\nB 143 3\\nB 144 2\\nB 144 3\\nB 145 2\\nB 145 3\\nB 146 2\\nB 146 3\\nB 147 2\\nB 147 3\\nB 148 2\\nB 148 3\\nB 149 2\\nB 149 3\\nB 150 2\\nB 150 3\\nB 151 2\\nB 151 3\\nB 152 2\\nB 152 3\\nB 153 2\\nB 153 3\\nB 154 2\\nB 154 3\\nB 155 2\\nB 155 3\\nB 156 2\\nB 156 3\\nB 157 2\\nB 157 3\\nB 158 2\\nB 158 3\\nB 159 2\\nB 159 3\\nB 160 2\\nB 160 3\\nB 161 2\\nB 161 3\\nB 162 2\\nB 162 3\\nB 163 2\\nB 163 3\\nB 164 2\\nB 164 3\\nB 165 2\\nB 165 3\\nB 166 2\\nB"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 3 2\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 3 2\nB 1 2\nR 2 3\nR 3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 3 2\nB 1 2\nR 2 3\nR 3 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 3 2\nB 1 2\nR 2 3\nR 3 1\n\"\"\") == \"1\""
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 4 2\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5 3\nR 3 1\nB 2 3\nR 2 1\nB 1 4\n\"\"\") == \"0\"\n\n'''\n\nclass Solution:\n    def spanningTree(self, n, m, k):\n        blue = 0\n        blue_list = []\n        if (n,m) not in k:\n            return \"0\"\n        if (n,m,k) in self.cache:\n            return self.cache[(n,m,k)]\n        if k == 0:\n            return \"1\"\n        for i in range(n):\n            if self.countBlue(i,m,k) > 0:\n                blue += 1\n                blue_list.append(i)\n        self.cache[(n,m,k)] = \"1\" if blue == k else \"0\"\n        return self.cache[(n,m,k)]\n\n    def countBlue(self, i, m, k):\n        count = 0\n        for j in range(m):\n            if self.tree[i][j] == \"B\":\n                count += 1\n        return count\n\ns = Solution()\nprint(s.spanningTree(5, 4, 2))\nprint(s.spanningTree(5, 5, 3))\nprint(s.spanningTree(4, 4, 0))"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2') == '1'\nassert solution('5 5 2') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2\") == \"1\"\nassert solution(\"10 3 5 2\") == \"0\"\nassert solution(\"8 2 7 3\") == \"1\"\nassert solution(\"10 5 4 2\") == \"0\"\nassert solution(\"100000 4 5 2\") == \"1\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 0 5\n7 0 7\n4\n88''') == '88'\nassert solution('''5 0 5\n7 0 7\n4\n88''') == '5'\nassert solution('''5 0 5\n7 0 7\n4\n7''') == '7'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([5, 0, 5]) == \"88\"\nassert solution([7, 0, 7]) == \"5\"\nassert solution([4, 0, 0]) == \"5\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '5'\nassert solution('2') == '5'\nassert solution('4') == '3'\nassert solution('1') == '0'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 0 5') == '88'\nassert solution('7 0 7') == '5'\nassert solution('4') == '7'\nassert solution('88') == '5'\nassert solution('5') == '7'\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '88'\nassert solution('''2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '7'\nassert solution('''3\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '5'\nassert solution('''3\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '7'\nassert solution('''3\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '7'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == \"88\"\n\nassert solution('''\n2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == \"88\"\n\nassert solution('''\n2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == \"88\"\n\nassert solution('''\n3\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == \"88\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([5, 0, 5]) == \"88\"\nassert solution([7, 0, 7]) == \"5\"\nassert solution([4, 0, 0]) == \"5\""
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"8\"\nassert solution(stdin=\"2\") == \"4\"\nassert solution(stdin=\"5 0 5\") == \"8\"\nassert solution(stdin=\"7 0 7\") == \"8\"\nassert solution(stdin=\"4\") == \"7\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"5 0 5\") == \"88\"\nassert solution(\"7 0 7\") == \"5\"\nassert solution(\"4\") == \"7\""
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n5 0 5\n7 0 7\n4\n\"\"\") == \"88\"\nassert solution(\"\"\"\n3\n3 3 3\n3\n3 2\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1\n5\n1 3 4 5\n3\n5\n4\n3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2 1 3') == '5'\nassert solution('4 2 1 3') == '5'\nassert solution('2 3 1 2') == '-1'"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 1 2') == '5'\nassert solution('5 4 1 2') == '-1'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 2 1\n2 2 3\n1 3 1\n2 3 3\"\"\") == \"5\"\n\nassert solution(\"\"\"\n5 1 1\n2 2 2\n3 3 3\n4 4 4\n1 3 1\n2 4 2\"\"\") == \"5\"\n\nassert solution(\"\"\"\n5 2 1\n1 1 1\n3 3 3\n4 4 4\n1 3 1\n2 3 2\"\"\") == \"-1\"\n\nassert solution(\"\"\"\n5 1 1\n1 1 1\n3 3 3\n4 4 4\n1 3 1\n2 3 2\"\"\") == \"3\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n3\n1 2\n1 3 1\n2 3 3\n4 5 5\n5 4 4\n3 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n2\n1 2\n1 3 1\n2 3 3\n4 5 5\n5 4 4\n3 3\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n3\n1\n1 2\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n1\n3 1\n\"\"\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"5\"\n'''\n\nimport sys\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3 1 2') == '-1'\nassert solution('4 5 2 2') == '7'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3 3 3 4\n1\n2 2\n1 3 1\n2 3\n3 4 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1 5 7\n1 3\n2 3\n3 4\n4 5\n5 4\n\"\"\") == \"-1\"\n\nprint(\"All test cases passed\")"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n3 4\") == \"5\"\nassert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"7\"\nassert solution(\"1 2\\n2 1\") == \"-1\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 1 2') == '5'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2 3 1 2\n1 2 2\n1 3 1\"\"\") == \"5\"\nassert solution(\"\"\"5 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\"\"\") == \"5\"\nassert solution(\"\"\"6 3 1 2\n1\n1 2\n2 3\n3 4\n3 5\n4 6\n5 7\n6 8\"\"\") == \"12\"\nassert solution(\"\"\"8 3 2\n2\n3\n1 2\n3 4\n5 6\n7 8\n4 9\n6 10\n7 11\n8 12\n5 13\"\"\") == \"8\"\nassert solution(\"\"\"10 4 2\n2\n5\n3\n4\n6\n7\n8\n9\n10\n11\n12\n13\"\"\") == \"6\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkniz\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('c4nizCC44') =='mirkovniz'"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"heA2s6hgAA4r\") == \"hear\"\nassert solution(\"heh1hi4gAA4r\") == \"hear\"\nassert solution(\"hA2s6hgAA4r\") == \"hear\"\n\"\"\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\n\nSample Input:\nmirkovC4nizCC44\nC4a1b\nSample Output:\nmirkovnizab\n\"\"\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkniz\"\nprint(solution(input()))\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz', \"Second\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''mirkovC4nizCC44''') =='mirkovniz', 'Challenge #1'\nassert solution('''C4\nmirkovC4nizCC44''') =='mirkovniz', 'Challenge #2'\nassert solution('''C4\nmirkovCC44''') =='mirkovCC44', 'Challenge #3'\nassert solution('''C4\nmirkovCC44''') =='mirkovCC44', 'Challenge #4'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovnizCC44\"\nassert solution(\"mirko17C3nizCC44\") == \"mirko17C3nizCC44\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('mirkoC44nizCC44') =='mirkoC44nizCC44'\nassert solution('mirko4nizCC44') =='mirko4nizCC44'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n3 65\\n45 10\\n60 25') == '32'\n\nassert solution('3\\n1 1\\n1 100000\\n1 1') == '10'\n\nassert solution('10\\n5 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == '10'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '32'\nassert solution('2') == '4'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n4 2\\n3 1\\n') == '13'\n\"\"\"\nimport math"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '32'"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '32'"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n65\\n45\\n60') == '32'\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == '12'\nassert solution('10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10') == '10'\nassert solution('100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100') == '0'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n3 65\n45 10\n60 25\n''') == '32'\n\nassert solution('''\n5\n8 4\n7 9\n6 2\n8 1\n7 1\n''') == '11'\n\n'''"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '32'\nassert solution('3 5') == '32'\nassert solution('3 5 2') == '35'\nassert solution('1 10') == '10'\nassert solution('1 1000000000') == '0'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n3 10\n5 10\n''') == '32'\n\nassert solution('''\n1\n3 10\n5 10\n''') == '35'\n\nassert solution('''\n3\n3 10\n5 10\n''') == '35'\n\nassert solution('''\n1\n1 1\n1 2\n''') == '3'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n1\\n2\\n3\\n') == '1'\nassert solution('10\\n5\\n10\\n15\\n10\\n') == '35'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '2'\nassert solution('1 2 0 3 1') == '3'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 0 3 1\n''') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 0 3\\n') == '1'\nassert solution('3\\n2 2 0 3\\n') == '1'\nassert solution('3\\n1 2 0 2\\n') == '2'\nassert solution('2\\n0 0\\n') == '2'\nassert solution('3\\n1 2 0 3\\n') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '3'\nassert solution('5\\n5 5 5 5 5\\n') == '5'\nassert solution('5\\n1 2 0 3 1\\n') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 2 0 3 1\n''') == '2'\nassert solution('''\n5\n1 2 0 3 1\n''') == '3'\nassert solution('''\n6\n1 2 0 3 1 0\n''') == '2'\nassert solution('''\n6\n0 0 1 1 1 1\n''') == '1'\nassert solution('''\n5\n1 2 0 3 1 0\n''') == '1'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '2\\n3'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 0 3\\n') == '2'\nassert solution('3\\n0 1 2 3\\n') == '3'\nassert solution('3\\n1 2\\n') == '0'"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2 0 3 1\n''') == '3\n2\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3 2'"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '3'\nassert solution('10\\n1 2 0 3 4 5 2 5 5 5\\n') == '5'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\nassert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 5 5\") == \"2\"\nassert solution(\"10 5 5\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 1 5\\n- 1 6\\n+ 1 7\\n- 1 8\\n+ 1 9\\n- 1 10\") == \"8\"\nassert solution(\"100 100 100\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 1 5\\n- 1 6\\n+ 1 7\\n- 1 8\\n+ 1 9\\n- 1 10\\n+ 1 11\\n- 1 12\\n+ 1 13\\n- 1 14\\n+ 1 15\\n- 1 16\\n+ 1 17\\n- 1 18\\n+ 1 19\\n- 1 20\\n+ 1 21\\n- 1 22\\n+ 1 23\\n- 1 24\\n+ 1 25\\n- 1 26\\n+ 1 27\\n- 1 28\\n+ 1 29\\n- 1 30\\n+ 1 31\\n- 1 32\\n+ 1 33\\n- 1 34\\n+ 1 35\\n- 1 36\\n+ 1 37\\n- 1 38\\n+ 1 39\\n- 1 40\\n+ 1 41\\n- 1 42\\n+ 1 43\\n- 1 44\\n+ 1 45\\n- 1 46\\n+ 1 47\\n- 1 48\\n+ 1 49\\n- 1 50\\n+ 1 51\\n- 1 52\\n+ 1 53\\n- 1 54\\n+ 1 55\\n- 1 56\\n+ 1 57\\n- 1 58\\n+ 1 59\\n- 1 60\\n+ 1 61\\n- 1 62\\n+ 1 63\\n- 1 64\\n+ 1 65\\n- 1 66\\n+ 1 67\\n- 1 68\\n+ 1 69\\n- 1 70\\n+ 1 71\\n- 1 72\\n+ 1 73\\n- 1 74\\n+ 1 75\\n- 1 76\\n+ 1 77\\n- 1 78\\n+ 1 79\\n- 1 80\\n+ 1 81\\n- 1 82\\n+ 1 83\\n- 1 84\\n+ 1 85\\n- 1 86\\n+ 1 87\\n- 1 88\\n+ 1 89\\n- 1 90\\n+ 1 91\\n- 1 92\\n+ 1 93\\n- 1 94\\n+ 1 95\\n- 1 96\\n+ 1 97\\n- 1 98\\n+ 1 99\") == \"12\"\nassert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"1\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 4') == '8'\nassert solution('3 3 4') == '36'\nassert solution('2 1 2') == '1'\nassert solution('2 5 5') == '37'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n') == '2'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4''') == '1'\nassert solution('''4 8 4\n+ 1 1\n+ 1 3\n+ 1 5\n- 1 2\n- 1 4\n- 1 6\n- 1 8\n- 1 9\n+ 1 11\n- 1 12\n- 1 14\n+ 1 15\n- 1 16\n+ 1 17\n+ 1 19\n- 1 20\n- 1 21\n+ 1 22\n- 1 24\n+ 1 26\n- 1 28\n+ 1 30\n+ 1 32\n- 1 34\n- 1 36\n+ 1 37\n+ 1 39\n- 1 40\n- 1 41\n+ 1 42\n+ 1 44\n+ 1 46\n- 1 48\n- 1 49\n+ 1 51\n+ 1 53\n- 1 54\n- 1 55\n+ 1 56\n- 1 58\n- 1 59\n+ 1 61\n+ 1 63\n- 1 64\n+ 1 66\n+ 1 68\n+ 1 70\n+ 1 72\n+ 1 74\n- 1 76\n+ 1 78\n- 1 80\n+ 1 82\n+ 1 84\n+ 1 86\n- 1 88\n- 1 90\n- 1 92\n+ 1 94\n+ 1 96\n- 1 98\n+ 1 100''') == '8'\nassert solution('''5 5 5\n+ 1 1\n+ 1 3\n+ 1 5\n- 1 2\n- 1 4\n+ 1 6\n- 1 8\n+ 1 9\n- 1 11\n- 1 13\n+ 1 15\n- 1 17\n+ 1 19\n- 1 21\n+ 1 23\n+ 1 25\n- 1 27\n+ 1 29\n+ 1 31\n+ 1 33\n- 1 35\n+ 1 37\n- 1 39\n+ 1 41\n+ 1 43\n+ 1 45\n+ 1 47\n+ 1 49\n- 1 51\n+ 1 53\n- 1 55\n+ 1 57\n+ 1 59\n- 1 61\n+ 1 63\n+ 1 65\n+ 1 67\n- 1 69\n+ 1 71\n+ 1 73\n+ 1 75\n+ 1 77\n- 1 79\n+ 1 81\n+ 1 83\n- 1 85\n- 1 87\n- 1 89\n- 1 91\n+ 1 93\n+ 1 95\n+ 1 97\n- 1 99\n+ 1 101\n- 1 103\n+ 1 105\n+ 1 107\n+ 1 109\n+ 1 111\n- 1 113\n+ 1 115\n- 1 117\n+ 1 119\n+ 1 121\n+ 1 123\n- 1 125\n+ 1 127\n+ 1 129\n+ 1 131\n- 1 133\n+ 1 135\n+ 1 137\n+ 1 139\n+ 1 141\n+ 1 143\n+ 1 145\n- 1 147\n- 1 149\n+ 1 151\n+ 1 153\n- 1 155\n+ 1 157\n+ 1 159\n+ 1 161\n- 1 163\n+ 1 165\n+ 1 167\n+ 1 169\n+ 1 171\n+ 1 173\n+ 1 175\n- 1 177\n- 1 179\n+ 1 181\n+ 1 183\n+ 1 185\n+ 1 187\n+ 1 189\n+ 1 191\n+ 1 193\n- 1 195\n+ 1 197\n+ 1 199\n+ 1 201\n+ 1 203\n+ 1 205\n+ 1 207\n+ 1 209\n+ 1 211\n+ 1 213\n+ 1 215\n+ 1 217\n- 1 219\n+ 1 221\n+ 1 223\n+ 1 225\n+ 1 227\n+ 1 229\n+ 1 231\n+ 1 233\n- 1 235\n+ 1 237\n+ 1 239\n+ 1 241\n+ 1 243\n+ 1 245\n+ 1 247\n+ 1 249\n+ 1 251\n+ 1 253\n- 1 255\n- 1 257\n+ 1 259\n+ 1 261\n+ 1 263\n+ 1 265\n+ 1 267\n+ 1 269\n+ 1 271\n+ 1 273\n+ 1 275\n+ 1 277\n+ 1 279\n+ 1 281\n+ 1 283\n+ 1 285\n+ 1 287\n- 1 289\n+ 1 291\n+ 1 293\n+ 1 295\n+ 1 297\n+ 1 299\n+ 1 301\n+ 1 303\n+ 1 305\n+ 1 307\n+ 1 309\n+ 1 311\n+ 1 313\n+ 1 315\n- 1 317\n+ 1 319\n+ 1 321\n+ 1 323\n+ 1 325\n+ 1 327\n+ 1 329\n+ 1 331\n+ 1 333\n+ 1 335\n+ 1 337\n+ 1 339\n+ 1 341\n+ 1 343\n+ 1 345\n+ 1 347\n+ 1 349\n+ 1 351\n+ 1 353\n+ 1 355\n+ 1 357\n+ 1 359\n+ 1 361\n+ 1 363\n+ 1 365\n+ 1 367\n+ 1 369\n+ 1 371\n+ 1 373\n+ 1 375\n+ 1 377\n+ 1 379\n+ 1 381\n+ 1 383\n+ 1 385\n+ 1 387\n+ 1 389\n+ 1 391\n+ 1 393\n+ 1 395\n+ 1 397\n+ 1 399\n+ 1 401\n+ 1 403\n+ 1 405\n+ 1 407\n+ 1 409\n+ 1 411\n+ 1 413\n+ 1 415\n+ 1 417\n+ 1 419\n+ 1 421\n+ 1 423\n+ 1 425\n+ 1 427\n+ 1 429\n+ 1 431\n+ 1 433\n+ 1 435\n+ 1 437\n+ 1 439\n+ 1 441\n+ 1 443\n+ 1 445\n+ 1 447\n+ 1 449\n+ 1 451\n+ 1 453\n+ 1 455\n+ 1 457\n+ 1 459\n+ 1 461\n+ 1 463\n+ 1 465\n+ 1 467\n+ 1 469\n+ 1 471\n+ 1 473\n+ 1 475\n+ 1 477\n+ 1 479\n+ 1 481\n+ 1 483\n+ 1 485\n+ 1 487\n+ 1 489\n+ 1 491\n+ 1 493\n+ 1 495\n+ 1 497\n+ 1 499\n+ 1 501\n+ 1 503\n+ 1 505\n+ 1 507\n+ 1 509\n+ 1 511\n+ 1 513\n+ 1 515\n+ 1 517\n+ 1 519\n+ 1 521\n+ 1 523\n+ 1 525\n+ 1 527\n+ 1 529\n+ 1 531\n+ 1 533\n+ 1 535\n+ 1 537\n+ 1 539\n+ 1 541\n+ 1 543\n+ 1 545\n+ 1 547\n+ 1 549\n+ 1 551\n+ 1 553\n+ 1 555\n+ 1 557\n+ 1 559\n+ 1 561\n+ 1 563\n+ 1 565\n+ 1 567\n+ 1 569\n+ 1 571\n+ 1 573\n+ 1 575\n+ 1 577\n+ 1 579\n+ 1 581\n+ 1 583\n+ 1 585\n+ 1 587\n+ 1 589\n+ 1 591\n+ 1 593\n+ 1 595\n+ 1 597\n+ 1 599\n+ 1 601\n+ 1 603\n+ 1 605\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3\") == \"2\"\nassert solution(\"2 4 4\") == \"0\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 1\") == \"0\"\nassert solution(\"1 2 2\") == \"0\"\nassert solution(\"1 2 3\") == \"4\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n- 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1\n+ 1\n+ 1\n- 1"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '2'\nassert solution('5 5 5\\n+ 1 2\\n+ 1 3\\n+ 1 4\\n- 1 5\\n+ 2 3\\n- 2 4\\n- 3 4\\n+ 4 5\\n- 1 3\\n+ 2 2\\n- 1 4\\n- 2 2\\n- 3 2\\n+ 2 1\\n+ 3 1\\n+ 4 1\\n+ 5 1\\n- 1 5\\n- 3 5\\n+ 1 4\\n+ 2 4\\n+ 3 4\\n+ 4 4\\n+ 1 4') == '5'\nassert solution('1 1\\n+ 1 1\\n- 1 1\\n+ 1 2\\n- 1 2\\n+ 1 3\\n- 1 3\\n+ 1 4\\n- 1 4\\n+ 1 5\\n- 1 5\\n+ 1 6\\n- 1 6\\n+ 1 7\\n- 1 7\\n+ 1 8\\n- 1 8\\n+ 1 9\\n- 1 9\\n+ 1 10\\n- 1 10\\n+ 1 11\\n- 1 11\\n+ 1 12\\n- 1 12\\n+ 1 13\\n- 1 13\\n+ 1 14\\n- 1 14\\n+ 1 15\\n- 1 15\\n+ 1 16\\n- 1 16\\n+ 1 17\\n- 1 17\\n+ 1 18\\n- 1 18\\n+ 1 19\\n- 1 19\\n+ 1 20\\n- 1 20\\n+ 1 21\\n- 1 21\\n+ 1 22\\n- 1 22\\n+ 1 23\\n- 1 23\\n+ 1 24\\n- 1 24\\n+ 1 25\\n- 1 25\\n+ 1 26\\n- 1 26\\n+ 1 27\\n- 1 27\\n+ 1 28\\n- 1 28\\n+ 1 29\\n- 1 29\\n+ 1 30\\n- 1 30\\n+ 1 31\\n- 1 31\\n+ 1 32\\n- 1 32\\n+ 1 33\\n- 1 33\\n+ 1 34\\n- 1 34\\n+ 1 35\\n- 1 35\\n+ 1 36\\n- 1 36\\n+ 1 37\\n- 1 37\\n+ 1 38\\n- 1 38\\n+ 1 39\\n- 1 39\\n+ 1 40\\n- 1 40\\n+ 1 41\\n- 1 41\\n+ 1 42\\n- 1 42\\n+ 1 43\\n- 1 43\\n+ 1 44\\n- 1 44\\n+ 1 45\\n- 1 45\\n+ 1 46\\n- 1 46\\n+ 1 47\\n- 1 47\\n+ 1 48\\n- 1 48\\n+ 1 49\\n- 1 49\\n+ 1 50\\n- 1 50\\n+ 1 51\\n- 1 51\\n+ 1 52\\n- 1 52\\n+ 1 53\\n- 1 53\\n+ 1 54\\n- 1 54\\n+ 1 55\\n- 1 55\\n+ 1 56\\n- 1 56\\n+ 1 57\\n- 1 57\\n+ 1 58\\n- 1 58\\n+ 1 59\\n- 1 59\\n+ 1 60\\n- 1 60\\n+ 1 61\\n- 1 61\\n+ 1 62\\n- 1 62\\n+ 1 63\\n- 1 63\\n+ 1 64\\n- 1 64\\n+ 1 65\\n- 1 65\\n+ 1 66\\n- 1 66\\n+ 1 67\\n- 1 67\\n+ 1 68\\n- 1 68\\n+ 1 69\\n- 1 69\\n+ 1 70\\n- 1 70\\n+ 1 71\\n- 1 71\\n+ 1 72\\n- 1 72\\n+ 1 73\\n- 1 73\\n+ 1 74\\n- 1 74\\n+ 1 75\\n- 1 75\\n+ 1 76\\n- 1 76\\n+ 1 77\\n- 1 77\\n+ 1 78\\n- 1 78\\n+ 1 79\\n- 1 79\\n+ 1 80\\n- 1 80\\n+ 1 81\\n- 1 81\\n+ 1 82\\n- 1 82\\n+ 1 83\\n- 1 83\\n+ 1 84\\n- 1 84\\n+ 1 85\\n- 1 85\\n+ 1 86\\n- 1 86\\n+ 1 87\\n- 1 87\\n+ 1 88\\n- 1 88\\n+ 1 89\\n- 1 89\\n+ 1 90\\n- 1 90\\n+ 1 91\\n- 1 91\\n+ 1 92\\n- 1 92\\n+ 1 93\\n- 1 93\\n+ 1 94\\n- 1 94\\n+ 1 95\\n- 1 95\\n+ 1 96\\n- 1 96\\n+ 1 97\\n- 1 97\\n+ 1 98\\n- 1 98\\n+ 1 99\\n- 1 99\\n+ 1 100\\n- 1 100\\n+ 1 101\\n- 1 101\\n+ 1 102\\n- 1 102\\n+ 1 103\\n- 1 103\\n+ 1 104\\n- 1 104\\n+ 1 105\\n- 1 105\\n+ 1 106\\n- 1 106\\n+ 1 107\\n- 1 107\\n+ 1 108\\n- 1 108\\n+ 1 109\\n- 1 109\\n+ 1 110\\n- 1 110\\n+ 1 111\\n- 1 111\\n+ 1 112\\n- 1 112\\n+ 1 113\\n- 1 113\\n+ 1 114\\n- 1 114\\n+ 1 115\\n- 1 115\\n+ 1 116\\n- 1 116\\n+ 1 117\\n- 1 117\\n+ 1 118\\n- 1 118\\n+ 1 119\\n- 1 119\\n+ 1 120\\n- 1 120\\n+ 1 121\\n- 1 121\\n+ 1 122\\n- 1 122\\n+ 1 123\\n- 1 123\\n+ 1 124\\n- 1 124\\n+ 1 125\\n- 1 125\\n+ 1 126\\n- 1 126\\n+ 1 127\\n- 1 127\\n+ 1 128\\n- 1 128\\n+ 1 129\\n- 1 129\\n+ 1 130\\n- 1 130\\n+ 1 131\\n- 1 131\\n+ 1 132\\n- 1 132\\n+ 1 133\\n- 1 133\\n+ 1 134\\n- 1 134\\n+ 1 135\\n- 1 135\\n+ 1 136\\n- 1 136\\n+ 1 137\\n- 1 137\\n+ 1 138\\n- 1 138\\n+ 1 139\\n- 1 139\\n+ 1 140\\n- 1 140\\n+ 1 141\\n- 1 141\\n+ 1 142\\n- 1 142\\n+ 1 143\\n- 1 143\\n+ 1"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4\n''') == '2'\n\"\"\"\n\n'''\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4\n''') == '0'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\\n\"\nassert solution(\"1000000000 0\\n\") == \"500000004\\n\"\nassert solution(\"1000000000 1\\n\") == \"60000000\\n\""
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5000000000 1\n5000000000 2\n5000000000 3\n5000000000 4\n5000000000 5\n''') == \"500000004\"\n\nassert solution('''\n3\n1 1\n2 2\n3 3\n''') == \"70000000\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n10000000000 0\n10000000000 1\n10000000000 2\n''') == '500000004'\nassert solution('''\n3\n10000000000 0\n10000000000 1\n10000000000 2\n''') == '100000000'\nassert solution('''\n3\n10000000000 0\n10000000000 1\n10000000000 2\n''') == '0'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"500000004\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n'.join([\n    '3',\n    '3 1',\n    '2 2',\n    '1 2',\n    '2 1',\n    '1 3',\n    '2 2',\n    '1 5',\n    '1 4',\n    '2 3',\n    '4 6',\n    '3 5',\n    '2 4',\n    '4 6',\n    '3 4',\n    '5 5',\n    '2 6',\n    '4 3',\n    '5 6',\n    '4 3',\n    '2 7',\n    '4 5',\n    '5 2',\n    '3 7',\n    '4 7',\n    '5 7',\n    '5 6',\n    '6 4',\n    '6 2',\n    '5 6',\n    '4 1',\n    '4 3',\n    '2 4',\n    '4 7',\n    '4 7',\n    '3 6',\n    '2 7',\n    '4 6',\n    '5 7',\n    '1 2',\n    '2 2',\n    '3 3',\n    '4 5',\n    '5 5',\n    '6 6',\n    '7 8',\n    '3 6',\n    '5 5',\n    '1 4',\n    '4 7',\n    '6 6',\n    '1 6',\n    '6 7',\n    '7 6',\n    '4 6',\n    '1 7',\n    '6 6',\n    '1 6',\n    '2 6',\n    '6 6',\n    '7 7',\n    '4 8',\n    '4 7',\n    '7 8',\n    '3 7',\n    '5 6',\n    '6 5',\n    '6 3',\n    '7 1',\n    '3 6',\n    '5 4',\n    '5 4',\n    '4 1',\n    '5 3',\n    '6 4',\n    '1 6',\n    '2 4',\n    '4 6',\n    '5 4',\n    '5 6',\n    '6 2',\n    '4 3',\n    '6 2',\n    '6 3',\n    '3 3',\n    '5 1',\n    '5 2',\n    '2 3',\n    '5 3',\n    '4 1',\n    '4 2',\n    '5 5',\n    '4 6',\n    '5 3',\n    '5 2',\n    '2 2',\n    '3 2',\n    '2 2',\n    '2 6',\n    '2 4',\n    '4 2',\n    '1 2',\n    '3 4',\n    '5 2',\n    '5 3',\n    '2 4',\n    '5 4',\n    '3 5',\n    '4 4',\n    '4 7',\n    '2 5',\n    '1 3',\n    '2 5',\n    '5 4',\n    '4 4',\n    '5 6',\n    '3 5',\n    '4 6',\n    '6 4',\n    '4 6',\n    '3 5',\n    '5 3',\n    '5 6',\n    '4 6',\n    '2 2',\n    '1 2',\n    '1 2',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '2 1',\n    '"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"10\") == \"\"\nassert solution(\"1000000000 0\") == \"500000004\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"8\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n1 1\n''') == '500000004', solution('''\n1\n1 2\n''')\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '4.5'\nassert solution('2') == '5.0'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"7\"\nassert solution(\"4\") == \"13\"\nassert solution(\"5\") == \"13\"\nassert solution(\"6\") == \"13\"\nassert solution(\"7\") == \"13\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 8\") == \"12\"\nassert solution(\"10 5\") == \"2\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100') == '12'\nassert solution('1 3\\n10 11\\n4 7\\n7 8\\n2 5\\n6 1\\n7 9\\n7 6\\n8 7\\n8 6\\n7 4\\n6 5\\n7 1\\n7 2\\n') == '6'\nassert solution('1 1\\n0 0\\n0 1\\n1 0\\n1 0\\n') == '0'\nassert solution('1 1\\n0 0\\n1 1\\n1 1\\n1 0\\n') == '1'\nassert solution('5\\n') == '1'"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n2 1 4 11\\n2 1 9 12\\n3 5 28 100\") == \"12\"\nprint(\"All Tests Passed\")"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == \"12\"\nassert solution('1 2 1 10') == \"1\"\n\"\"\""
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 8\\n\"\n    \"1 2 1 10\\n\"\n    \"2 4 11 16\\n\"\n    \"2 1 9 12\\n\"\n    \"3 5 28 100\\n\"\n    \"1 2 3 8\\n\"\n    \"4 3 20 21\\n\"\n    \"1 3 13 27\\n\"\n    \"3 5 23 24\") == \"12\"\n\nassert solution(\n    \"5 8\\n\"\n    \"1 2 1 10\\n\"\n    \"2 4 11 16\\n\"\n    \"2 1 9 12\\n\"\n    \"3 5 28 100\\n\"\n    \"1 3 13 27\\n\"\n    \"3 5 23 24\") == \"0\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == '12'\nassert solution('''\n3 1\n1 2 3\n''') == '1'\nassert solution('''\n4 5\n3 1 3 2\n1 4 2 4\n2 4 1 4\n1 4 3 3\n''') == '5'\nassert solution('''\n3 3\n1 1 2\n1 2 3\n2 3 1\n''') == '5'\nassert solution('''\n4 5\n3 1 3 2\n1 4 2 4\n2 4 1 4\n1 4 3 3\n''') == '2'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == '12'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([5, 8]) == \"12\"\nassert solution([2, 4, 11, 16]) == \"12\"\nassert solution([2, 1, 9, 12]) == \"1\"\nassert solution([3, 5, 28, 100]) == \"21\"\nassert solution([1, 3, 13, 27]) == \"15\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 8') == '12'\nprint(solution(''))\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 8') == '12'\nassert solution('4 4') == '8'\nassert solution('10 8') == '6'\nassert solution('1 2 1 10') == '12'\nassert solution('2 4 11 16') == '11'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    3\n    15 5 3\n    12 4 4\n    20 10 5\n''') == '3'\n\nassert solution('''\n    10\n    1 1 1\n    2 2 2\n    3 3 3\n    4 4 4\n    5 5 5\n    6 6 6\n    7 7 7\n    8 8 8\n    9 9 9\n    10 10 10\n''') == '10'\n\nassert solution('''\n    20\n    1 1 1\n    2 2 2\n    3 3 3\n    4 4 4\n    5 5 5\n    6 6 6\n    7 7 7\n    8 8 8\n    9 9 9\n    10 10 10\n    11 11 11\n    12 12 12\n    13 13 13\n    14 14 14\n    15 15 15\n    16 16 16\n    17 17 17\n    18 18 18\n    19 19 19\n    20 20 20\n''') == '20'\n\nassert solution('''\n    40\n    1 1 1\n    2 2 2\n    3 3 3\n    4 4 4\n    5 5 5\n    6 6 6\n    7 7 7\n    8 8 8\n    9 9 9\n    10 10 10\n    11 11 11\n    12 12 12\n    13 13 13\n    14 14 14\n    15 15 15\n    16 16 16\n    17 17 17\n    18 18 18\n    19 19 19\n    20 20 20\n    21 21 21\n    22 22 22\n    23 23 23\n    24 24 24\n    25 25 25\n    26 26 26\n    27 27 27\n    28 28 28\n    29 29 29\n    30 30 30\n    31 31 31\n    32 32 32\n    33 33 33\n    34 34 34\n    35 35 35\n    36 36 36\n    37 37 37\n    38 38 38\n    39 39 39\n    40 40 40\n''') == '40'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 20\n15 5 3\n12 4 4\n20 10 5\n''') == '3'\nassert solution('''\n1 20\n15 5 3\n12 4 4\n20 10 5\n''') == '2'\nassert solution('''\n2 20\n15 5 3\n12 4 4\n20 10 5\n''') == '0'\n\n'''\n3\n15 5 3\n12 4 4\n20 10 5\n'''\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 19') == '3'\nassert solution('12 4 4') == '2'\nassert solution('20 10 5') == '2'"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n15 5 3\n12 4 4\n20 10 5\"\"\") == \"3\"\nassert solution(\"\"\"6\n10 15 6\n15 5 8\n10 9 5\n10 10 2\n5 12 4\n9 12 3\"\"\") == \"4\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n3\n15 5 3\n12 4 4\n20 10 5\nSample Input 2:\n5\n10 100\n20 3 5\n30 7 20\n50 2 4\n20 1 1\nSample Output 2:\n3\n    \"\"\"\n) == \"3\"\nassert solution(\n    \"\"\"\n1\n10 100\nSample Input 3:\n10\n10 100\n20 5 5\n30 7 20\n50 2 4\n20 1 1\nSample Output 3:\n5\n    \"\"\"\n) == \"5\"\nassert solution(\n    \"\"\"\n10\n10 100\n20 5 5\n30 7 20\n50 2 4\n20 1 1\nSample Input 4:\n5\n10 100\n20 3 5\n30 7 20\n50 2 4\n20 1 1\nSample Output 4:\n3\n    \"\"\"\n) == \"3\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 19\\n15 5 3\\n12 4 4\\n20 10 5\\n\") == \"3\"\nassert solution(\"1 100\\n10 10 5\\n20 20 5\\n\") == \"1\"\nassert solution(\"2 100\\n10 10 5\\n20 20 5\\n\") == \"2\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n15 5 3\\n12 4 4\\n20 10 5') == '3'\n\n'''"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 7 1') == '2', 'First'\nassert solution('3 6 5') == '1', 'Second'\nassert solution('100 10 10') == '99', 'Third'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n15 5 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1\n20 10 5\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2\n7 5 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n5 5 5\n5 5 5\n10 10 10\n5 5 5\n5 5 5''') == '3'\nassert solution('''3\n15 5 3\n12 4 4\n20 10 5\nSample Output:\n3\n''') == '2'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''1 2\n1 3\n2 4\n1 5\n3 6''') == '2'\nassert solution('''1 4\n2 4\n2 5\n3 6''') == '2'\nassert solution('''1 5\n3 4\n2 5\n4 6''') == '2'\nassert solution('''1 6\n5 4\n2 5\n4 6''') == '2'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 1\n1 2\n''') == '2'\nassert solution('''\n4\n1 1 1 1\n1 1 2 2\n1 2 1 1\n1 2 2 2\n''') == '1'\nassert solution('''\n5\n1 1 1 1 1\n1 1 2 2 1\n1 2 1 1 1\n1 2 2 2 1\n1 3 1 1 1\n1 3 2 1 1\n''') == '4'\nassert solution('''\n10\n
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5 1\n1 2\n1 3\n2 3\n2 4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 1') == '1'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\nassert solution(\"1 1\") == '1'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1 1\n2 3\n''') == '1'\nassert solution('''10\n1 1\n1 2\n2 3\n3 4\n3 5\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 10\n''') == '2'\nassert solution('''7\n1 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 10\n''') == '1'\nassert solution('''12\n1 1\n1 2\n2 3\n3 4\n3 5\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 10\n''') == '0'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\n\"\"\"\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1\\n1 2\\n') == '1'\nassert solution('2 1\\n3 2\\n') == '2'\nassert solution('3 1\\n4 2\\n') == '1'\nassert solution('4 1\\n5 2\\n') == '2'\nassert solution('5 1\\n6 2\\n') == '2'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"RRYG\") == \"4\"\nassert solution(\"RGBG\") == \"7\"\nassert solution(\"RBYB\") == \"5\"\nassert solution(\"RGBY\") == \"7\"\nassert solution(\"RRGGB\") == \"9\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"RGGR\\nGBGB\\nBYBY\\nYRYR\\n\") == \"3\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"2\"\nassert solution(\"BYBY\") == \"1\"\nassert solution(\"YRYR\") == \"0\"\nprint(solution(input()))\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"RGGR\") == \"1\"\nassert solution(\"GBGB\") == \"2\"\nassert solution(\"BYBY\") == \"4\"\nassert solution(\"YRYR\") == \"5\""
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"2\"\nassert solution(\"BYBY\") == \"2\"\nassert solution(\"YRYR\") == \"4\"\n\ninput:\nBGBR\nGBGB\nBBBY\nRBYR\n\noutput:\n4\n\nYour Input\nRGRG\nGBGB\nBGBB\nRBYR\nYour Output\n4\n\nYour Input\nBGBB\nGBGB\nBBBY\nRBYR\nYour Output\n2\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"RGGGR\") == \"1\"\nassert solution(\"GBGB\") == \"1\"\nassert solution(\"BYBY\") == \"1\"\nassert solution(\"YRYR\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"RGGR\") == \"3\"\n\nassert solution(\"GBGB\") == \"4\"\n\nassert solution(\"BYBY\") == \"5\"\n\nassert solution(\"YRYR\") == \"5\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"RGBR\") == \"3\"\nassert solution(\"GRB\") == \"3\"\nassert solution(\"GGB\") == \"3\"\nassert solution(\"RBYY\") == \"3\"\nassert solution(\"GYRY\") == \"3\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"3\"\nassert solution(\"BYBY\") == \"3\"\nassert solution(\"YRYR\") == \"3\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('RGR') == '2'\nassert solution('GBG') == '2'\nassert solution('BYB') == '2'\nassert solution('YRY') == '3'\nassert solution('YYY') == '3'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"AAABB\""
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'AAAA'\nassert solution('5 1 2 3 4') == 'AAAA'\nassert solution('5 -2 1 0 1 2') == 'AAAB'\nassert solution('5 2 1 0 1 2') == 'AAAB'\nassert solution('4 1 0 1 2') == 'AABB'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n-2 -1 0 1 2\\n2 1 0 -1 -2') == 'AAAAA'\n\"\"\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n\"\"\"\n) == \"ABA\"\n\"\"\"\n--Input--\n5\n1 2 -3 4 5\n3 -4 -5 6 7\n--Output--\nABA\n\"\"\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"ABABA\"\nassert solution(\"10\") == \"ABAABA\"\nassert solution(\"1\") == \"A\"\n\"\"\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAAAA'\nassert solution('''\n3\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAABB'\nassert solution('''\n4\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAAAAABBB'\nassert solution('''\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAABBBB'\nassert solution('''\n3\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAABBBBBB'\n\nprint('test passed')\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input) == sample_output\n'''"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"ABAA\"\nassert solution(\"5 0 2 0 1\") == \"AAAB\"\nassert solution(\"5 -2 1 0 1 -2\") == \"AAAA\"\nassert solution(\"5 0 -2 1 0 1\") == \"ABAB\"\nassert solution(\"5 0 2 1 0 -2\") == \"AAAB\"\n\"\"\"\nimport math"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"ABBB\"\n\"\"\"\n\nstdin = input()\nn, *a = map(int, stdin.split())\nb = tuple(map(int, stdin.split()))\n\nfor i in range(2, len(a)):\n    a[i] += max(a[i-2], b[i-2])\nprint(\"\".join([\"A\" if a[i] > b[i] else \"B\" for i in range(len(a))]))\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"ABBBB\"\nassert solution(\"1\") == \"B\"\nassert solution(\"-2\") == \"A\""
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 3\n2 3\n4 0\n0 2\n6 1\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n8 3\n0 0\n0 3\n3 0\n1 1\n0 1\n3 3\n0 0\n''') == '1'\n\nassert solution('''\n8 3\n0 0\n0 3\n3 0\n1 1\n0 1\n3 3\n0 0\n''') == '2'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"6 3\") == \"2\"\nassert solution(\"4 0\") == \"IMPOSSIBLE\"\nassert solution(\"0 2\") == \"IMPOSSIBLE\"\nassert solution(\"6 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 3\\n2 3\\n4 0\\n0 2\\n6 1') == 'IMPOSSIBLE'\nassert solution('6 3\\n2 3\\n5 2\\n1 5\\n6 0\\n3 6') == '3'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"6 3\\n\"\n    \"2 3\\n\"\n    \"4 0\\n\"\n    \"0 2\\n\"\n    \"6 1\"\n) == \"IMPOSSIBLE\"\nassert solution(\n    \"6 3\\n\"\n    \"4 0\\n\"\n    \"0 2\\n\"\n    \"6 1\"\n) == \"6\"\n\n-----Hints-----\nUsing recursion\n\nUse dynamic programming\n\n'''"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 3\\n2 3\\n4 0\\n0 2\\n6 1\\n') == 'IMPOSSIBLE'\nassert solution('7 1\\n0 1\\n1 0\\n1 1\\n1 2\\n2 1\\n2 2\\n') == '1'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 3') == 'IMPOSSIBLE'\nassert solution('2 3') == '4'\nassert solution('4 0') == '2'\nassert solution('0 2') == '6'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 3\n2 3\n4 0\n0 2\n6 1\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7 2\n5 0\n0 2\n6 1\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"IMPOSSIBLE\""
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 3\\n2 3\\n4 0\\n0 2\\n6 1\\n') == 'IMPOSSIBLE'\nassert solution('1 5\\n3 3\\n4 4\\n5 6\\n') == '3'\nassert solution('5 7\\n6 1\\n4 5\\n3 8\\n7 9\\n') == '8'\nassert solution('10 2\\n9 10\\n8 1\\n7 0\\n') == '9'\nassert solution('6 8\\n9 2\\n0 6\\n8 1\\n7 3\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria\\n') == '12'\nassert solution('2 2\\na\\n') == '2'\nassert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria\\n') == '10'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria\\n') == '12\\n4\\n11\\n3\\n2\\n'\nassert solution('0 0\\n') == '0\\n'\nassert solution('1\\n') == '1\\n'\nassert solution('1\\n') == '1\\n'\nassert solution('1\\n') == '1\\n'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria\\n\") == \"12\"\nassert solution(\"5 10\\nabcd\\nae\\nbdc\\nefg\\nijkl\\nmnop\\nqrst\\nuvwxyz\\nabcd\\nae\\nbdc\\nefg\\nijkl\\nmnop\\nqrst\\nuvwxyz\\nabcd\\n\") == \"18\"\nassert solution(\"1\\na\") == \"0\"\nassert solution(\"1\\n\") == \"0\"\nassert solution(\"1\\n\") == \"0\"\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == '12'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx') == '12\\n4\\n11\\n3\\n2\\n'\nassert solution('1 2\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11') == '1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5\\n'\n                'austria\\n'\n                'autocorrect\\n'\n                'program\\n'\n                'programming\\n'\n                'computer\\n'\n                'autocorrelation\\n'\n                'programming\\n'\n                'competition\\n'\n                'zyx\\n'\n                'austria\\n'\n                '3\\n'\n                '4\\n'\n                '11\\n'\n                '2\\n'\n                '12\\n'\n                '> ') == '12\\n'\n\nassert solution('3\\n'\n                'austria\\n'\n                '> ') == '0\\n'\n\nassert solution('5\\n'\n                'austria\\n'\n                'autocorrect\\n'\n                'program\\n'\n                'programming\\n'\n                'computer\\n'\n                'autocorrelation\\n'\n                'programming\\n'\n                'competition\\n'\n                'zyx\\n'\n                '> ') == '4\\n'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == '12'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\nautocorrect\\nzyx\\n\") == \"1\"\nassert solution(\"1 4\\nautocorrect\\nprogram\\n\") == \"3\"\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria\") == \"12\"\nassert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\n austria\") == \"14\"\nassert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria\") == \"15\"\nassert solution(\"5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria\") == \"15\"\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n4 4\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n\"\"\") == \"16\"\n\nassert solution(\"\"\"\n2 2\na\nb\nSample Output:\n3\n\"\"\") == \"3\""
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1\\n') == '1'\nassert solution('1 1 1 1\\n') == '1'\nassert solution('2 2 2\\n') == '3'\nassert solution('3 5 3\\n') == '4'\nassert solution('5 8 8\\n') == '4'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([3, 1, 1]) == \"3\"\nassert solution([3, 1, 1, 1]) == \"2\"\nassert solution([3, 2, 0, 1, 2]) == \"1\"\nassert solution([3, 2, 2, 1, 1]) == \"3\"\nassert solution([3, 2, 0, 0, 1, 2]) == \"2\"\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n0\\n') == '12'\nassert solution('4\\n4\\n1 2 3\\n') == '6'\nassert solution('4\\n5\\n1 3 5\\n') == '11'\nassert solution('4\\n6\\n1 3 5 2\\n') == '12'\nassert solution('4\\n7\\n1 3 5 2 4\\n') == '12'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n0 2 0\\n') == '1'\nassert solution('3\\n0 1 1 1\\n') == '3'\nassert solution('3\\n0 1 2 2\\n') == '3'\nassert solution('3\\n1 1 1 1\\n') == '3'\nassert solution('4\\n0 1 1 1\\n') == '3'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 1 1\n''') == '3'\n\nassert solution('''\n3\n0 0 1\n''') == '3'\n\nassert solution('''\n2\n0 0 0\n''') == '1'\n\nassert solution('''\n2\n1 1 1\n''') == '2'\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '3'"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n2 1 0') == '3'\nassert solution('3\\n1 1 1') == '1'\nassert solution('3\\n1 1 1\\n1 1 1') == '1'\nassert solution('4\\n2 0 0\\n1 2 0\\n0 0 1') == '2'\nassert solution('10\\n2 4 6\\n3 4 5 6\\n5 5 3') == '4'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n0 1 1\\n') == '3'\nassert solution('10\\n0 0 2 2 2 2 2 2 2 2\\n') == '8'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '3'\nassert solution('3') == '2'\nassert solution('4') == 'impossible'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3, 0, 1, 1]) == '3'\nassert solution([3, 0, 1, 2]) == '4'\nassert solution([3, 0, 0, 2]) == '2'\nassert solution([3, 0, 0, 0]) == 'impossible'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n0 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2\n0 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n0 1 1\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3\n0 1 1\n\"\"\") == \"impossible\""
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('HFBBIGEDCJA') == 'HFBBIGEDCJA'\nassert solution('BIGEDCJFAH') == 'BIGEDCJFAH'\nassert solution('BIGEDCJFAH') == 'BIGEDCJFAH'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''HFIEDCJA\nEDCJFAH\nEDCJFAH\n''') == 'Pre In Post In Post Pre'\nassert solution('''DFCGBCA\nADCGIJ\nDCCGAD''') == 'Pre In Post In Pre'\nassert solution('''CAADABCACACAA\nAABAADAAB\nAABABCCCBB''') == 'In In Pre Pre In In Pre Pre'\nassert solution('''FGHBSABAC\nBACBDFGH\nBACABBCB\n''') == 'In In In Pre In In In'\nassert solution('''ADJGADMAA\nAAGEJPMC\nADJGADMAA''') == 'In In In In In In'\n'''"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"HFBIGEDCJA\") == \"HFBJCDEGIA\", \"Wrong!\"\nassert solution(\"BIGEDCJFAH\") == \"BIGEDCJFAH\", \"Wrong!\"\nassert solution(\"BIGEDCJFAH\") == \"BIGEDCJFAH\", \"Wrong!\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"HFBIGEDCJA\") == \"Pre In Post In Pre\""
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('HFBJCDEGIA') == 'Pre In Post In Pre'\nassert solution('BIGEDCJFAH') == 'BIGEDCJFAH'\nassert solution('IGEDCJBAFH') == 'HFBJCDEGIA'"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('HFBIGEDCJA') == 'HFBJCDEGIA'\nassert solution('BIGEDCJFAH') == 'BIGEDCJFAH'\nassert solution('BIGEDCJFAH') == 'IGEDCJBAFH'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"HFBJCDEGIA\"\nassert solution(input()) == \"BIGEDCJFAH\"\nassert solution(input()) == \"IGEDCJBAFH\"\n\n(stdin).split() == [\"HFBIGEDCJA\", \"BIGEDCJFAH\", \"BIGEDCJFAH\", \"BIGEDCJFAH\", \"IGEDCJBAFH\"]\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    \"HFBIGEDCJA\"\n    \"BIGEDCJFAH\"\n    \"BIGEDCJFAH\"\n''') == '''Pre Post In Post In Pre\n    HFBIGEDCJA\n    BIGEDCJFAH\n    IGEDCJBAFH\n'''\n\nassert solution('''\n    \"TFCKDDH\"\n    \"DDFGACD\"\n    \"DDFACDC\"\n''') == '''Pre Post In Post In Pre\n    TFCKDDG\n    ACDDFGA\n    ACDFDCC\n'''\n\nassert solution('''\n    \"DFDFC\"\n    \"BCCC\"\n    \"ACCC\"\n''') == '''Pre Post In Post In Pre\n    DFDFC\n    BCCC\n    ACCC\n'''\n\nassert solution('''\n    \"FC\"\n    \"BB\"\n    \"AC\"\n''') == '''Pre Post In Post In Pre\n    FBBAC\n    FCBB\n    FCBB\n'''\n\nassert solution('''\n    \"EF\"\n    \"AA\"\n    \"AB\"\n''') == '''Pre Post In Post In Pre\n    EFAA\n    AAEF\n    EFAB\n'''"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('HFBIGEDCJA') == 'Pre In Post In Pre Pre In Post In In'\nassert solution('BIGEDCJFAH') == 'Pre In Post In In In In In In In'\nassert solution('BIGEDCJFAH') == 'Pre In In In In In In In In'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nHFD\nBFD\nDFF\n''') == 'HDCDCD'\nassert solution('''\nHIHI\nHHIHI\nH\n''') == 'HHIHIHI'\nassert solution('''\nBHE\nBHE\nB\n''') == 'BHEBHE'\nassert solution('''\nDF\nDF\nDF\n''') == 'DFDDF'\nassert solution('''\nHB\nHB\n''') == 'HBHB'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n2\n10 0\n3 1 1\n1\n4 1 0\n''') == '11'\nassert solution('''3\n1\n1\n''') == '1'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\n10 0') == '10'\nassert solution('3\\n1 1 1\\n1') == '2'\nassert solution('4\\n1 1 1\\n1\\n1') == '1'\nassert solution('4\\n3 3 3\\n3\\n1') == '4'\nassert solution('4\\n4 1 2 1\\n1\\n1') == '3'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '1'"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n10 0\n3 1 1\n1\n4 1 0\n''') == '10'\nassert solution('''\n4\n6 0\n5 1 0\n1\n3 2 3\n''') == '6'\n''')\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '11'\nassert solution('4') == '14'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n1\n0\n0\n0\n1\n0\n1\n0\n1\n1\n1\n1\n0\n1\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n1\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n1\n1\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n1\n1\n1\n0\n1\n1\n1\n0\n1\n1\n0\n1\n1\n1\n1\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1\n0\n1\n1"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0') == '10'\nassert solution('5\\n3\\n1 2 1') == '1'\nassert solution('2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0') == '10'\n\"\"\"\n\nn = int(input())\nl = []\nfor i in range(n):\n    l.append([int(i) for i in input().split()])\n\nfor i in range(n):\n    if len(l[i]) == n:\n        print(l[i][0])\n        break\n\nfor i in range(n):\n    if len(l[i]) == n:\n        print(l[i][0])\n        break\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n10 0\") == \"10\"\nassert solution(\"2\\n3\\n1 1 1\") == \"3\"\nassert solution(\"2\\n4\\n1 1 1 1\") == \"4\""
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"11\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"100\") == \"107\"\n\"\"\"\nfrom itertools import product"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '11'\nassert solution('1') == '1'\nassert solution('4') == '11'\nassert solution('5') == '2'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'''\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n    0 0 100 100\n    30 30 60 60\n    '''\n) == \"10000.00\"\n\nassert solution(\n    '''\n    1\n    1 1 1\n    1 1 1\n    '''\n) == \"2.0\"\n\nassert solution(\n    '''\n    0\n    2 2\n    5 7\n    10 11\n    '''\n) == \"50.0\"\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('1\\n0 0 100 100') == '0.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\nassert solution('''\n1\n2 2\n''') == '1.00'\nassert solution('''\n4\n1 2\n2 3\n3 4\n4 5\n''') == '9.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"10000.00\""
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 0 100 100\\n30 30 60 60\\n') == '10000.00'\n\"\"\""
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0 0 100 100\\n30 30 60 60') == '10000.00'"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('5\\n0 0 100 100\\n0 0 100 100\\n0 0 100 100\\n0 0 100 100\\n0 0 100 100') == '10000.00'\nassert solution('5\\n0 0 100 100\\n0 0 100 100\\n0 0 100 100\\n0 0 100 100\\n0 0 100 100') == '1000.00'\n\"\"\"\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('4\\n0 0 100 100\\n10 10 20 20') == '10000.00'\nassert solution('3\\n0 0 100 100\\n100 100 100') == '10000.00'\nassert solution('2\\n0 0 100 100\\n10 10 20 20') == '10000.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nprint(solution('''4\n0 0 10 10\n10 0 0 0\n10 0 0 10\n10 10 10 10\n0 10 10 10\n0 10 10 10\n\n''')) == '100000.00'\n\n'''\nSample Input:\n2\n0 0 100 100\n30 30 60 60\nSample Output:\n10000.00\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n1 3\n4 5\n2 4\n''') == '5'\nassert solution('''\n5 2\n1 3\n4 5\n2 4\n''') == '2'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 3\n4 5\n2 4\n''') == '5'\n\nassert solution('''5 3\n1 3\n4 5\n2 4\n''') == '5'\n\nassert solution('''5 5\n3 3\n5 1\n1 2\n1 3\n''') == '5'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 3\\n4 5\\n2 4') == \"5\"\nassert solution('5 5\\n2 3\\n4 5\\n2 4') == \"8\""
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 3\n4 5\n2 4\n''') == '2'\n\nassert solution('''\n1\n1 2\n''') == '0'\n\nassert solution('''\n2\n1 3\n4 5\n2 4\n''') == '5'\n\nassert solution('''\n2\n1 3\n4 5\n1 5\n''') == '5'\n\nassert solution('''\n3\n1 3\n4 5\n2 4\n''') == '3'"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 3\n4 5\n2 4\n''') == '5'\n\nassert solution('''5 2\n2 2\n''') == '5'\n\nassert solution('''3 2\n2 2\n''') == '2'\n\nassert solution('''6 3\n1 2\n2 1\n1 3\n2 4\n3 2\n4 2\n5 2\n1 3\n4 5\n''') == '1'\n\nassert solution('''7 3\n1 2\n2 2\n1 3\n4 5\n2 5\n3 3\n5 4\n1 3\n4 4\n''') == '0'"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\n1 3\n4 5\n2 4\n''') == '6'\nassert solution('''\n3 2\n1 2\n4 5\n2 4\n''') == '2'\nassert solution('''\n5 5\n5 2\n1 4\n2 4\n2 3\n''') == '3'\nassert solution('''\n10 7\n10 7\n10 5\n4 6\n1 4\n1 5\n2 5\n2 4\n2 6\n3 5\n3 6\n3 4\n''') == '9'\nassert solution('''\n10 4\n1 4\n2 4\n2 3\n2 4\n3 4\n3 2\n1 2\n1 3\n2 4\n2 5\n3 4\n''') == '4'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '5'\nassert solution('4 3') == '1'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 2\n1 3\n2 4\n1 2\n2 3\n1 1\n2 2\n''') == '5'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '5'\nassert solution('1 3') == '1'\nassert solution('4 5') == '4'\nassert solution('2 4') == '3'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n11 13 17\n5 2 4\n0 0 0\n''') == '2095'\nassert solution('''\n17 11 9\n9 4 7\n0 0 1\n''') == '1214'\nassert solution('''\n10 5 5\n8 3 5\n4 1 3\n''') == '3050'\nassert solution('''\n10 11 9\n7 5 7\n0 0 1\n''') == '4597'\nassert solution('''\n17 11 9\n8 9 7\n0 0 1\n''') == '6987'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11 13 17\\n5 2 4\\n0 0 0') == '2095'\nassert solution('2 4 6\\n1 3 2\\n5 4 2') == '1'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"11 13 17\\n5 2 4\\n0 0 0\"\n) == \"2095\"\nassert solution(\n    \"11 17 13\\n5 2 4\\n0 0 0\"\n) == \"2096\"\nassert solution(\n    \"13 17 11\\n5 2 4\\n0 0 0\"\n) == \"2312\"\nassert solution(\n    \"16 17 11\\n5 2 4\\n0 0 0\"\n) == \"2313\"\nassert solution(\n    \"16 17 11\\n5 2 4\\n0 0 0\"\n) == \"2312\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11 13 17') == '2095'\nassert solution('6 7 8') == '160'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2095\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 13 17') == '2095'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\\n\") == \"2095\"\nassert solution(\"10 20 30\\n5 2 4\\n0 0 0\\n\") == \"30\"\nassert solution(\"9 9 9\\n5 2 4\\n0 0 0\\n\") == \"9\"\nassert solution(\"1 1 1\\n5 2 4\\n0 0 0\\n\") == \"1\"\nassert solution(\"1 1 1\\n5 2 4\\n0 0 0\\n\") == \"1\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"15 5 2\\n0 0 0\") == \"2095\"\nassert solution(\"5 2 4\\n0 0 0\") == \"2095\"\nassert solution(\"5 13 17\\n0 0 0\") == \"2095\"\nassert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\nassert solution(\"11 13 17\\n5 2 4\\n3 3 3\") == \"1337\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\\\n13 13 17\n5 2 4\n0 0 0\n''') == '2095'\n\nassert solution('''\\\n7 5 7\n8 2 1\n2 0 3\n1 1 2\n0 0 1\n''') == '145'\nassert solution('''\\\n3 4 8\n0 0 1\n0 0 2\n''') == '0'\nassert solution('''\\\n4 5 7\n0 0 2\n0 0 1\n0 0 2\n''') == '0'\nassert solution('''\\\n4 5 7\n0 0 2\n1 1 3\n0 0 2\n''') == '1'"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    11 13 17\n    5 2 4\n    0 0 0\n    ''') == '2095'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\"\"\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"\"\"\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nend.\"\"\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"\"\"\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.\"\"\") == \"My name is Gon\\nMy name is Gon\\nMy name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${b}`;\\nprint `My name is ${c}`;\\nend.') == 'My name is Gon'\nassert solution('print `My name is ${a}`;\\nprint `My name is ${b}`;\\nprint `My name is ${c}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${b}`;\\nprint `My name is ${c}`;\\nend.') == 'My name is Gon'\nassert solution('print `My name is ${a}`;\\nprint `My name is ${b}`;\\nprint `My name is ${c}`;\\nend.') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.''') == 'My name is Gon\\nMy name is Gon'\n'''"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon\\n'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n'.join(['var a = \"Gon\";', 'var b = a;', 'var c = `My name is ${a}`;', 'print c;', 'print `My name is ${b}`;', 'end.'])) == 'My name is Gon'\nassert solution('\\n'.join(['var a = \"Gon\";', 'var b = a;', 'var c = `My name is ${a}`;', 'print `My name is ${b}`;', 'end.'])) == 'My name is Gon'\nassert solution('\\n'.join(['var a = \"Gon\";', 'var b = a;', 'var c = `My name is ${a}`;', 'print `My name is ${b}`;', 'end.', 'print c;', 'end.'])) == 'My name is Gon'\nassert solution('\\n'.join(['var a = \"Gon\";', 'var b = a;', 'var c = `My name is ${a}`;', 'print `My name is ${b}`;', 'end.', 'print `My name is ${c}`;', 'end.'])) == 'My name is Gon'\nassert solution('\\n'.join(['var a = \"Gon\";', 'var b = a;', 'var c = `My name is ${a}`;', 'print `My name is ${b}`;', 'end.', 'print `My name is ${c}`;', 'end.'])) == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.''') == 'My name is Gon\\nMy name is Gon'"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon'\n'''\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('a = \"Gon\";\\nb = a;\\nc = `My name is ${a}`;\\nprint(c);\\nprint(`My name is ${b}`);\\n') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"var a = 'Gon';\\n\"\n\"var b = a;\\n\"\n\"var c = `My name is ${a}`;\\n\"\n\"print(c);\\n\"\n\"print(`My name is ${b}`);\\n\"\n\"end.\") == \"My name is Gon\"\nassert solution(\"var a = 'Gon';\\n\"\n\"var b = a;\\n\"\n\"var c = `My name is ${a}`;\\n\"\n\"print(c);\\n\"\n\"print(`My name is ${b}`);\\n\"\n\"end.\") == \"My name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.''') == 'My name is Gon\\nMy name is Gon'\n''')\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n7 8\\n10\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\ndiscard 1\"\nassert solution(\"2\\n10\\n20\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\"\nassert solution(\"1\\n1\\n1\") == \"impossible\""
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n10\n20\n15\n\"\"\") == \"\"\"\nfill 1\ntransfer 1 3\ndiscard 1\nfill 1\ntransfer 1 2\ndiscard 1\nfill 1\ntransfer 1 0\ndiscard 1\nfill 1\ntransfer 1 0\ndiscard 1\n\"\"\".strip()\n\nassert solution(\"\"\"\n2\n10\n20\n\"\"\") == \"\"\"\ndiscard 1\ndiscard 1\n\"\"\".strip()\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n10\n20\n30\n40\n50''') == 'discard 5'\n\nassert solution('''3\n20\n30\n40''') == 'fill 3 1'\n\nassert solution('''4\n1\n5\n3\n5''') == 'fill 4 0'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n1 2 4\n1\n1\n1\n\"\"\") == \"\"\"\n1 0\n1 2\n1 1\n\"\"\", \"Simple\"\nassert solution(\"\"\"\n3\n1 2\n1\n1\n\"\"\") == \"\"\"\n1 2\n1 0\n1 1\n\"\"\", \"2\"\nassert solution(\"\"\"\n5\n3 2 4 1\n1\n1\n1\n1\n\"\"\") == \"\"\"\n1 0\n1 2\n1 1\n1 1\n1 0\n1 2\n1 1\n1 1\n\"\"\", \"3\"\nassert solution(\"\"\"\n5\n3 2 4 1\n1\n1\n1\n1\n\"\"\") == \"\"\"\n1 0\n1 2\n1 1\n1 1\n1 1\n1 0\n1 2\n1 1\n1 1\n\"\"\", \"4\"\nassert solution(\"\"\"\n5\n3 2 4 1\n1\n1\n1\n1\n\"\"\") == \"\"\"\n1 0\n1 2\n1 1\n1 1\n1 1\n1 1\n1 0\n1 2\n1 1\n1 1\n\"\"\", \"5\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n7 8\n10\"\"\") == \"\"\"\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\n\"\"\".strip()\n\nassert solution(\"\"\"\n1\n1\n1\"\"\") == \"\"\"\n\"\"\".strip()\n\nassert solution(\"\"\"\n1\n3\n4\n3\n2\n5\n4\n\"\"\") == \"\"\"\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\n\"\"\".strip()\n\nassert solution(\"\"\"\n5\n5\n2\n4\n1\n5\"\"\") == \"\"\"\ndiscard 5\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\n\"\"\".strip()\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\nassert solution('3') == 'impossible'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\n7 8\n10\nSample Output:\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\n\"\"\") == \"\"\"\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\n\"\"\".strip()\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n2\\n\") == \"discard 1\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\"\nassert solution(\"2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n\") == \"discard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n'\n\nassert solution('2\\n0 0\\n') == 'impossible'\n\nassert solution('3\\n1 2\\n4\\n') == 'impossible'\n\nassert solution('4\\n0 1 2 3\\n5\\n') == 'impossible'\n\nassert solution('5\\n0 0 0 1 2 3\\n5\\n') == 'impossible'"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 3') == '27'\nassert solution('10 4 3') == '27'\nassert solution('1000000000000 10 100000000000 100000000000') == '250000000000000'\nassert solution('20 20 20') == '20'\nassert solution('10 1 1') == '1'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"27\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('100 4 3') == '27'\nassert solution('1000000 4 3') == '4999999'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 4 3') == '27'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 4 3\n''') == '27'\nassert solution('''\n10 5 4\n''') == '28'\nassert solution('''\n10 5 2\n''') == '9'\nassert solution('''\n10 2 3\n''') == '4'\nassert solution('''\n10 2 1\n''') == '1'\n''') == '4'"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('10 3 3') == '30'\nassert solution('10 5 5') == '30'\nassert solution('100000 50 50') == '99999'"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n10 2\\n5 3') == '27'\n\"\"\"\nimport sys\ninput_lines = sys.stdin.read().splitlines()\nn,m,k = map(int, input_lines[0].split())"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2 2') == '4'\nassert solution('10 5 3') == '10'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '27'"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"27\"\nassert solution(\"10 4 3\") == \"27\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n1 2\n1 3\n1 4\n2\n1 2\n2\n1 3\n2\n1 5\n3\n1 3\n3\n1 5\n3\n2\n2\n\"\"\"\n) == \"3\\n4\"\nassert solution(\n\"\"\"\n2 3\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n1 1 1\n2\n1 1 1\n2\nSample Input:\n4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n1 1 1\n2\nSample Output:\n3\n-1\n4\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3 5\") == \"3\"\nassert solution(\"2 3 1 2\") == \"4\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\") == \"4\"\nassert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\") == \"-1\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 5\") == \"3\"\nassert solution(\"2 4 6\") == \"-1\"\nassert solution(\"3 5\") == \"1\"\nassert solution(\"4 5\") == \"2\"\nassert solution(\"4 6\") == \"2\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1''') == '3'\n\nassert solution('''4 3 5\n2 3 1 2\n1 3 3\n2\n1 1 1\n2\n1 1 1''') == '-1'"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 5') == '3', 'Wrong'\nassert solution('2 1 1 3') == '4', 'Wrong'\nassert solution('3 2 1 3') == '2', 'Wrong'"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2''') == '3'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '4\\n3\\n1'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4 5\\n2 3 1 2') == '3', 'First'\nassert solution('4 3 5\\n2 3 1 2') == '4', 'Second'\nassert solution('4 3 5\\n2 3 1 2') == '-1', 'Third'\nassert solution('4 3 5\\n2 3 1 2') == '-1', 'Fourth'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3 5') == '3'\nassert solution('3 4 5') == '-1'\nassert solution('10 10 10 10 10 10 10 10 10 10') == '5'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100 100 1000') == '533.3333333333'\n\n\"\"\""
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000 3000 1000\\n') == '533.3333333333'\nassert solution('100 1000 100\\n') == '100.0'\nassert solution('300 100 100\\n') == '300.0'\nassert solution('500 100 100\\n') == '500.0'\nassert solution('100 1000 100\\n') == '0.0'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1000 1000 1000') == '533.3333333333'\nassert solution('2\\n1000 1000 1000') == '533.3333333333'\nassert solution('3\\n1000 1000 1000') == '533.3333333333'"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1000 3000 1000\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"100 1000 1000\n\"\"\") == \"0\"\nassert solution(\"\"\"1000 20 20\n\"\"\") == \"1000000\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n'.join(['1000 3000 1000',\n                            '533.3333333333'])) == '533.3333333333'\n\nassert solution('\\n'.join(['1000 3000 1000',\n                            '999999999999'])) == '999999999999'\n\nassert solution('\\n'.join(['1000 3000 1000',\n                            '9999999999999'])) == '999999999999'\n\nassert solution('\\n'.join(['10000 3000 1000',\n                            '0.0000000000001'])) == '0.0000000000001'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '533.3333333333'\nassert solution('1 2 3') == '8.666666666667'\nassert solution('3 3 1') == '10.0'\n\"\"\""
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1000 1000\\n') == '533.3333333333'\nassert solution('1 100 1000\\n') == '233.3333333333'\nassert solution('1 1000 10\\n') == '0.9'\nassert solution('1 1000 1\\n') == '0.0'\nassert solution('1 100 1\\n') == '0.0'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\nassert solution('1000000 2000000 1000000') == '1000000'\n\nimport math\n\nd, w, c = list(map(int, input().split()))\n\nsmoothie_in_trousers = math.ceil((d + w)/2)\n\nprint(smoothie_in_trousers)\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1 1\") == \"4.0000000000000\"\nassert solution(\"10 1 2\") == \"8.000000000000\"\nassert solution(\"1 1 5\") == \"5.0000000000000\"\nassert solution(\"1 2 2\") == \"3.000000000000\"\nassert solution(\"0 0 0\") == \"0.000000000000\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3') == '5.000000000000'\nassert solution('1000\\n2000\\n3000') == '533.3333333333'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 0\n10 0\n10 10\n''') == '14.14'\n\nassert solution('''\n4 0\n20 20\n10 10\n1 1\n2 2\n''') == '2.56'\n\nassert solution('''\n5 0\n20 20\n0 0\n10 10\n10 10\n10 10\n''') == '11.32'\n\nassert solution('''\n5 0\n0 0\n10 10\n10 10\n10 10\n''') == '11.34'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 0') == '14.14'\nassert solution('1 1') == '1.41'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '14.14'"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '1.00'\nassert solution('2 4') == '1.41'\nassert solution('2 8') == '1.61'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 0\") == \"14.14\"\nassert solution(\"4 1\") == \"8.13\"\nassert solution(\"2 2\") == \"0.00\""
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 0\\n10 0\\n10 10\") == \"14.14\"\nassert solution(\"0 0\\n10000 10000\") == \"2.00\"\nassert solution(\"4 5\\n4 5\") == \"2.00\"\n\"\"\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 0\\n10 0\\n10 10') == '14.14'\nassert solution('8 1\\n2 0\\n8 1\\n2 0\\n2 0\\n2 0\\n2 0\\n2 0') == '8.05'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3 2') == '4.5'\nassert solution('3\\n3 4') == '4.5'\nassert solution('1\\n0 0') == '1.00'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 0\\n\"\n    \"10 0\\n\"\n    \"10 10\"\n) == \"14.14\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '14.14'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n1\n\"\"\") == \"1 0\nassert solution(\"\"\"\n5\n1\n1\n1\n1\n1\n\"\"\") == \"1 0 1 1 1\nassert solution(\"\"\"\n10\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '0 2\\n1 1\\n0 2\\n'''\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n'''\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n3\n3\n2\n2\n2\n''') == '0 2\\n1 0\\n'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '3 3'\n    '123456 14323 1700000'\n    '123458 41412 1900000'\n    '123457 15221 1800000'\n    '123456'\n    '123458'\n    '123457'\n) == '123457 0\\n0 2\\n123458 1\\n', 'Should return the following output: 123457 0\\n0 2\\n123458 1'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n'''\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n0 2\\n'"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n'''\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '0 2\\n1 0\\n2 1'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"123457 1\\n0 2\\n123458 1\\n\""
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3') == \"90\"\nassert solution('10\\n2 3 5 4 7 8 6 1 9\\n8 9 2 3 7 4 5 1\\n2 1 3 4 5 7 8 9\\n1 2 3 4 5 7 8 9\\n1 2 3 4 5 7 8 9\\n1 1 3 4 5 7 8 9\\n1 2 3 4 5 7 8 9\\n2 3 5 4 7 8 9 1\\n3 5 4 7 8 9 1\\n3 5 4 7 8 9 1\\n5 7 8 9 1 3 4\\n5 7 8 9 1 3 4\\n7 8 9 1 3 5 4\\n7 8 9 1 3 5 4\\n9 1 3 5 7 8 4\\n9 1 3 5 7 8 4\\n1 3 5 7 8 9 4\\n1 3 5 7 8 9 4\\n2 4 5 7 8 9 1\\n2 4 5 7 8 9 1\\n4 5 7 8 9 1 2\\n4 5 7 8 9 1 2\\n5 7 8 9 1 2 4\\n5 7 8 9 1 2 4\\n7 8 9 1 2 5 4\\n7 8 9 1 2 5 4\\n9 1 2 5 7 8 4\\n9 1 2 5 7 8 4\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8 9 1 4\\n2 5 7 8 9 1 4\\n5 7 8 9 1 4 2\\n5 7 8 9 1 4 2\\n7 8 9 1 4 5 2\\n7 8 9 1 4 5 2\\n9 1 4 5 7 8 2\\n9 1 4 5 7 8 2\\n1 4 5 7 8 9 2\\n1 4 5 7 8 9 2\\n2 5 7 8"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3 5 10 2 5\n2 4 5 1 3\n''') == '90'\nassert solution('''\n1\n1 1\n''') == '1'\nassert solution('''\n6\n2 3 1 3 1 1\n1 2 3 3 2 1\n''') == '5'\nassert solution('''\n7\n3 3 1 3 1 3 2\n2 2 1 3 3 2 1\n''') == '9'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"3\\n\"\n) == \"90\"\nassert solution(\n    \"3\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"3\\n\"\n) == \"90\"\nassert solution(\n    \"2\\n\"\n    \"3\\n\"\n    \"2\\n\"\n    \"3\\n\"\n) == \"10\"\nassert solution(\n    \"1\\n\"\n    \"3\\n\"\n    \"2\\n\"\n    \"3\\n\"\n) == \"10\"\nassert solution(\n    \"1\\n\"\n    \"3\\n\"\n    \"2\\n\"\n    \"1\\n\"\n) == \"10\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n3 5 10 2 5\n2 4 5 1 3''') == '90'\nassert solution('''5\n1 3 2 5 4\n2 4 1 5 3''') == '40'\nassert solution('''3\n2 6 3\n1 3 4''') == '20'\nassert solution('''3\n1 2 1\n2 2 2''') == '1'\nassert solution('''5\n2 1 2 3 4\n4 3 2 1''') == '60'"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '90'\nassert solution('4') == '8'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n3 5 10 2 5\n2 4 5 1 3\n''') == '90'\nassert solution('''7\n7 8 9 10 1 2 6\n''') == '867'\nassert solution('''8\n5 3 7 1 6 8 4 2\n''') == '357'\nassert solution('''5\n4 4 4 4 4\n''') == '24'\nassert solution('''5\n6 6 6 6 6\n''') == '6'\n'''\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3') == '90'\nassert solution('8\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1') == '36'\nassert solution('10\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '19'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\\\n5\n3 5 10 2 5\n2 4 5 1 3\n\"\"\") == \"90\"\nassert solution(\"\"\"\\\n5\n3 2 2 2 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\\\n5\n3 5 10 2 5\n3 2 1 2 3\n\"\"\") == \"0\"\n\"\"\""
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n5\n1 2 3 4 5\n2 4 1 3 5\n\"\"\") == \"90\"\nassert solution(\"\"\"\n2\n3\n1 2 3\n1 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10\n3 3 2 5 1 6 9 8 4 7 10\n1 3 4 1 2 5 2 8 4 7 6 9\n\"\"\") == \"111\"\nassert solution(\"\"\"\n10\n4 4 5 5 1 1 5 6 6 4\n1 3 2 5 1 2 5 6 4 4 6\n\"\"\") == \"90\"\nassert solution(\"\"\"\n10\n4 4 5 5 1 1 5 6 6 4\n1 3 2 5 1 2 5 6 4 4 6\n\"\"\") == \"110\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3\\n') == '90'\nassert solution('5\\n3 5 10 2 5\\n1 3 2 4 5\\n') == '90'\nassert solution('4\\n3 5 10 2 5\\n1 3 2 4 5\\n') == '40'\nassert solution('2\\n1 2\\n') == '2'\nassert solution('6\\n5 5 5 5 5\\n1 2 3 4 5\\n') == '40'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '6'\n\"\"\""
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 5') == '2.000000'\nassert solution('5 3') == '4.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 10\\n1 2 6\\n0 4 3\\n0 8 2\") == \"6.000000\"\nassert solution(\"10 10\\n0 2 10\\n0 10 2\\n0 8 2\") == \"3.000000\"\nassert solution(\"5 5\\n1 2 6\\n0 4 3\\n0 8 2\\n1 3 4\") == \"4.000000\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 10\n1 2 6\n0 4 3\n0 8 2\n''') == '6.000000'\nprint(solution('''\n10 15\n0 0 0\n1 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n''')) == '0.000000'\nprint(solution('''\n4 4\n1 2\n1 3\n1 3\n2 3\n0 0\n0 0\n''')) == '1.000000'\nprint(solution('''\n3 5\n0 0\n0 0\n0 0\n''')) == '0.000000'\nprint(solution('''\n1 5\n0 0\n1 0\n0 0\n''')) == '0.000000'\nprint(solution('''\n3 5\n0 0\n0 0\n0 0\n''')) == '0.000000'\nprint(solution('''\n1 5\n0 0\n0 0\n0 0\n''')) == '0.000000'\nprint(solution('''\n1 5\n0 0\n0 0\n0 0\n''')) == '0.000000'\nprint(solution('''\n2 5\n0 0\n0 0\n0 0\n0 0\n''')) == '0.000000'\nprint(solution('''\n2 5\n0 0\n0 0\n0 0\n''')) == '0.000000'\nprint(solution('''\n3 3\n0 0\n0 0\n0 0\n''')) == '0.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n2\\n3\") == \"6.000000\"\nassert solution(\"0\\n2\\n3\") == \"2.000000\"\nassert solution(\"0\\n4\\n3\") == \"4.000000\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 10') == '6.000000', solution('3 10')\nassert solution('2 5') == '2.5000000', solution('2 5')\nassert solution('1 2') == '1.000000', solution('1 2')\nassert solution('1 2 2 2 2 2') == '1.000000', solution('1 2 2 2 2 2')\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2') == '6.000000'\nassert solution('3 1000\\n1 2 6\\n0 4 3\\n0 8 2') == '6.99999'\nassert solution('3 1000\\n1 2 6\\n0 4 3\\n0 8 2') == '7.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 10\n1 2 6\n0 4 3\n0 8 2\n''') == '6.000000'\nassert solution('''\n3 10\n1 2 3\n0 4 1\n0 8 2\n''') == '8.000000'\nassert solution('''\n3 10\n0 0 4\n1 1 1\n0 0 0\n''') == '1.000000'\n'''\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 10\n1 2 6\n0 4 3\n0 8 2\n''') == '6.000000'\nprint(solution('''10 1 2\n0 4 3\n0 8 2\n'''))\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 10\n1 2 6\n0 4 3\n0 8 2\n''') == '6.000000'\nassert solution('''\n4 10\n0 0 0 0\n0 2 4\n0 3 3\n0 1 1\n''') == '5.000000'\n'''\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n5\\n0\\n0\\n0\\n0') == '0.1'\nassert solution('2\\n3\\n1\\n2\\n0\\n0') == '0.1.2'\nassert solution('1\\n5\\n0\\n0\\n0\\n0') == '0.1.0'\nassert solution('2\\n3\\n1\\n2\\n0\\n1') == '0.1.0.1'\nassert solution('1\\n5\\n0\\n0\\n0\\n0\\n1') == '0.1.0.0.0.1'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4') == '1.8.2.7.7.4.4.9.3.4.5.6.5.4.1.3.7.2.5.4.8.8.1.8.2.4.6.3.7.5.4.3.1.5.4.8.1.6.9.4.8.7.5.4.7.2.1.6.7.4.6.8.8.1.8.6.4.5.8.9.4.7.3.9.6.7.8.8.4.1.1.7.8.4.3.2.6.9.7.8.3.1.6.7.3.1.7.8.2.2.9.7.3.2.5.1.6.4.6.7.2.4.9.3.6.1.6.7.6.4.7.3.7.9.2.5.8.7.8.4.4.2.3.1.8.5.1.7.7.9.5.6.7.4.4.5.8.6.4.4.6.7.5.5.8.6.9.7.5.7.7.6.7.9.4.7.8.6.6.8.8.4.7.5.9.5.6.7.2.8.8.8.8.4.7.7.3.8.5.5.7.6.6.6.7.6.7.9.9.7.7.5.7.9.7.6.6.7.5.7.7.7.5.9.8.3.1.6.7.7.1.9.8.7.5.7.7.9.8.7.6.7.7.7.9.7.5.7.7.7.8.8.4.5.7.9.7.8.7.6.9.7.5.8.7.6.9.8.7.6.7.5.7.7.9.8.7.6.7.7.7.7.8.7.6.7.7.9.6.6.7.5.6.7.7.6.7.6.9.7.5.6.9.8.6.6.7.7.9.8.9.7.4.9.3.6.7.7.6.5.6.7.8.8.9.8.7.9.7.9.9.7.7.8.9.7.7.7.7.7.7.7.7.7.9.8.7.7.7.7.8.7.7.6.7.7.7.7.7.7.7.7.7.7.7.8.5.6.7.8.8.4.5.7.7.8.9.7.7.9.7.7.7.7.8.5.6.7.7.7.7.7.7.7.7.7.7.7.7.7.8.5.6.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7."
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n0 0\\n1.\") == \"0.\\n0.\\n1.\\n0.\\n\"\nassert solution(\"4\\n2.\\n2.\\n1.\\n3.\") == \"3.\\n3.\\n3.\\n2.\\n\"\nassert solution(\"8\\n0.\\n0.\\n1.\\n1.\\n2.\\n0.\\n1.\\n2.\") == \"2.\\n2.\\n2.\\n1.\\n1.\\n2.\\n1.\\n2.\\n\"\nassert solution(\"4\\n0.\\n1.\\n0.\\n0.\") == \"0.\\n0.\\n0.\\n0.\\n\"\nassert solution(\"8\\n0.\\n1.\\n1.\\n1.\\n2.\\n0.\\n1.\\n2.\") == \"2.\\n2.\\n2.\\n1.\\n1.\\n2.\\n1.\\n2.\\n\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1.') == '1.\\n..\\n'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n0 0\n0 0\n1''') == '1.\\n..\\n'\n\nassert solution('''2\n1 0\n1 0\n1''') == '1.\\n..\\n'\n\nassert solution('''5\n0 0\n0 0\n0 0\n0 0\n0 0\nSample Output:\n2.\n..\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n."
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1') == '1\\n..\\n0'\nassert solution('3\\n0 0\\n0 0\\n1.5\\n1.5') == '1.5\\n..\\n1.5'\nassert solution('5\\n0 0\\n0 0\\n1.5\\n1.5\\n2\\n2') == '1.5\\n..\\n2\\n2\\n2\\n2'\nassert solution('5\\n0 0\\n0 0\\n1.5\\n1.5\\n2\\n2\\n2\\n2\\n2\\n2') == '1.5\\n..\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2'\nassert solution('10\\n0 0\\n0 0\\n1.5\\n1.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2.5\\n2"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.1\\n2.1\\n1.1\\n.1') == '1.1\\n.1\\n.1\\n.1'\nassert solution('2.1\\n2.1\\n.1\\n.1') == '.1\\n.1\\n.1\\n.1'\nassert solution('2.1\\n.1\\n2.1\\n.1') == '.1\\n.1\\n.1\\n.1'\nassert solution('.1\\n.1\\n2.1\\n.1') == '.1\\n.1\\n.1\\n.1'\nassert solution('2.1\\n.1\\n.1\\n.1') == '.1\\n.1\\n.1\\n.1'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1.') == '1.\\n.'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1.0'\nassert solution('4') == '2.0'\nassert solution('5') == '1.0'\nassert solution('10') == '1.0'\nassert solution('50') == '1.0'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \".1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35.36.37.38.39.40.41.42.43.44.45.46.47.48.49.50.51.52.53.54.55.56.57.58.59.60.61.62.63.64.65.66.67.68.69.70.71.72.73.74.75.76.77.78.79.80.81.82.83.84.85.86.87.88.89.90.91.92.93.94.95.96.97.98.99.100.101.102.103.104.105.106.107.108.109.110.111.112.113.114.115.116.117.118.119.120.121.122.123.124.125.126.127.128.129.130.131.132.133.134.135.136.137.138.139.140.141.142.143.144.145.146.147.148.149.150.151.152.153.154.155.156.157.158.159.160.161.162.163.164.165.166.167.168.169.170.171.172.173.174.175.176.177.178.179.180.181.182.183.184.185.186.187.188.189.190.191.192.193.194.195.196.197.198.199.200.201.202.203.204.205.206.207.208.209.210.211.212.213.214.215.216.217.218.219.220.221.222.223.224.225.226.227.228.229.230.231.232.233.234.235.236.237.238.239.240.241.242.243.244.245.246.247.248.249.250.251.252.253.254.255.256.257.258.259.260.261.262.263.264.265.266.267.268.269.270.271.272.273.274.275.276.277.278.279.280.281.282.283.284.285.286.287.288.289.290.291.292.293.294.295.296.297.298.299.300.301.302.303.304.305.306.307.308.309.310.311.312.313.314.315.316.317.318.319.320.321.322.323.324.325.326.327.328.329.330.331.332.333.334.335.336.337.338.339.340.341.342.343.344.345.346.347.348.349.350.351.352.353.354.355.356.357.358.359.360.361.362.363.364.365.366.367.368.369.370.371.372.373.374.375.376.377.378.379.380.381.382.383.384.385.386.387.388.389.390.391.392.393.394.395.396.397.398.399.400.401.402.403.404.405.406.407.408.409.410.411.412.413.414.415.416.417.418.419.420.421.422.423.424.425.426.427.428.429.430.431.432.433.434.435.436.437.438.439.440.441.442.443.444.445.446.447.448.449.450.451.452.453.454.455.456.457.458.459.460.461.462.463.464.465.466.467.468.469.470.471.472.473.474.475.476.477.478.479.480.481.482.483.484.485.486.487.488.489.490.491.492.493.494.495.496.497.498.499.500.501.502.503.504.505.506.507.508.509.510.511.512.513.514.515.516.517.518.519.520.521.522.523.524.525.526.527."
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\nabc\\nabc\\nabc') == '1'\nassert solution('3\\na\\nbc\\nabc') == '1'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1'\nassert solution('2') == '2'\nassert solution('1') == '2'\nassert solution('0') == '2'\n'''\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\nassert solution() == '1'\nassert solution() == '1'"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\nassert solution('''\n2\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1'\n\"\"\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\na\\nb\\n') == '1'\nassert solution('3\\na\\nb\\n') == '1'"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\\n1\\n1\"\n\nSample Input:\n4\nitisthisisatest\nthisisatest\nthis\n4\n2\n3\n2 3\nSample Output:\n1\n1\n0\n1\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1'\nassert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 2\n''') == '1'\nassert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '0'\nassert solution('''\n1\na\nbc\nabc\n3\n1 abca\n2 1\n2 2\n''') == '0'\n'''\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1'\nassert solution('''6\na\nbc\nabc\nbca\nbc\nabc\n''') == '2'\nassert solution('''5\na\nbc\nabc\nbca\nbc\n''') == '1'\nassert solution('''6\na\nbc\nabc\nbca\nbc\nabc\n''') == '1'\nassert solution('''4\na\nbc\nabc\nbca\nbc\nabc\n''') == '2'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '2'\nassert solution('10') == '2'\nassert solution('15') == '2'\nassert solution('20') == '3'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'YES'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 2 2 2') == 'NO'\nassert solution('1 1 1 2') == 'YES'\nassert solution('1 1 2 1') == 'YES'\nassert solution('2 1 1 2') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1 1 1\n''') == 'YES'\nassert solution('''\n1 1 1 1\n''') == 'NO'\n''')\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1 1') == 'YES'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'YES'\nassert solution('1 1 1 1') == 'YES'\nassert solution('1 2 3 4') == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('1 2 3 4 5 6') == 'YES'\nassert solution('1 2 3 4 5 6 7') == 'NO'\nassert solution('1 2 3 4 5 6 7 8') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('2 2 2 2') == 'NO'\n\"\"\"\nfrom functools import reduce\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 1 1 1\\n') == 'YES'\nassert solution('1 1 1 1\\n') == 'YES'\nassert solution('1 1 1 1\\n') == 'YES'\nassert solution('3 2 6 2') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1 1 1''') == 'YES'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"2 2 2 2\") == \"NO\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 96') == \"80.5696000000\"\nassert solution('3 10') == \"101.0101010101\"\nassert solution('4 5') == \"86.3333333333\"\nassert solution('1') == \"100.00\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696000000'\nassert solution('6 10\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000') == '80.5696000000'\nassert solution('15 20\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000') == '80.5696000000'\nassert solution('20 40\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000') == '80.5696000000'\nassert solution('50 80\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000\\n0.0080 1.5417 25.0000') == '80.5696000000'"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 96\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n''') == '80.5696000000'\n\nprint(solution('''\n2 96\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n'''))\n\"\"\""
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 96\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n''') == '80.5696000000'\n\n\"\"\"\n\nfrom math import sqrt\n\nN, T = map(int, input().split())\n\nsubj_grades = []\nfor i in range(N):\n    subj_grades.append(list(map(float, input().split())))\n\ns_sum_all = 0\nfor g in subj_grades:\n    s_sum_all += g[0]\n\ns_sum_first = s_sum_all / N\n\ngrades = [0] * N\nfor i in range(N):\n    grades[i] = (subj_grades[i][1] - s_sum_first) ** 2 + \\\n        (subj_grades[i][2] - subj_grades[i][0]) ** 2\n\ngrades.sort()\n\navg = (grades[0] + grades[N-1]) / 2\n\npossible_s = T / 2\ns = sqrt(possible_s)\n\nres = 1\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 96\") == \"80.5696000000\"\nassert solution(\"5 5 1 1.5\") == \"10.25000000\"\nassert solution(\"15 10 0.5 0.75\") == \"35.500000000\"\nassert solution(\"20 10 1.0 1.0\") == \"25.0\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 96\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000''') == '80.5696000000'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 96\") == \"80.5696000000\", \"Wrong\"\nprint(solution(\"2 96\"))\nprint(solution(\"5 2 2\"))\n\"\"\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 96\") == \"80.5696000000\"\nassert solution(\"1 3 -1.23\") == \"74.002633333\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 96\") == \"80.5696000000\"\n\"\"\"\n\nn, t = list(map(int, input().split()))\nstdin = []\nfor _ in range(n):\n    stdin.append(list(map(float, input().split())))\nstdin.sort(key=lambda x: x[0])"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 96\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n''') == '80.5696000000'\nassert solution('''\n5 90\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n''') == '100.0'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\n\nSample Input:\n5 -5 -1 1 3 3 1 -1\nSample Output:\n1\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 0 0 1 1 1 0 0 1') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([1, 0, 1, 1, 1, 0, 1, 1, 0]) == '1'\nassert solution([1, 0, 1, 1, 1, 1, 1, 1, 0]) == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\nassert solution('3 2 4 1 1 5') == '2'\nassert solution('2 1 1 2 3 5') == '1'\nassert solution('6 0 0 1 2 3 4 5') == '1'\nassert solution('3 2 2 2 2') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 0 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"3 0 0 1 1 1 0 0 1 2 1\") == \"1\"\nassert solution(\"3 0 0 1 1 1 0 0 1 2 1 2 1\") == \"2\""
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"2 3 0 1 3 0 2 2\") == \"3\"\nassert solution(\"2 3 4 1 3 2 2\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 0 0 1 1 1 0 0 1\") == \"2\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 0 1 0 0 1 1 1 1\") == \"2\"\nassert solution(\"1 0 1 1 1 1 1 1 1\") == \"3\"\nassert solution(\"0 0 1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\") == \"1\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\""
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3\") == \"1400\"\nassert solution(\"3 3 3\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n\"\"\") == \"1400\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 3') == 'impossible'\nassert solution('3 2 3') == '1400'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == '1400'\nassert solution('''\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == 'impossible'\nassert solution('''\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == 'impossible'\nassert solution('''\n3 2 2\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == 'impossible'\nassert solution('''\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == 'impossible'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"2 2 2\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\"\"\") == \"1400\"\nassert solution(\"\"\"2 2 2\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\"\"\") == \"impossible\"\nassert solution(\"\"\"2 1 3\n0 0 200\n1 0 200\n2 0 200\n3 0 200\"\"\") == \"impossible\"\nassert solution(\"\"\"2 2 2\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == '1400'\nprint('solution() done.')\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n\"\"\") == \"1400\"\nassert solution(\"\"\"\n1 1 2\n0 0 10\n4 0 10\n\"\"\") == \"11\"\nassert solution(\"\"\"\n2 1 1\n1 1 10\n\"\"\") == \"12\"\nassert solution(\"\"\"\n5 5 5\n0 0 0\n200 0 200\n200 0 400\n200 0 600\n200 0 700\n300 0 700\n500 0 300\n500 0 200\n500 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200\n400 0 200"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\") == \"1400\"\nassert solution(\"5 1 10\\n3 3 10\\n0 0 400\\n1000 0 400\\n2000 0 400\\n3000 0 400\\n4000 0 400\\n5000 0 400\") == \"2000\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n3\n0 0 400\n1000 0 400\n2000 0 400\n3\n0 0 400\n1300 0 400\n1000 0 400\n5\n1 0 200\n2 0 200\n3 0 200\n4 0 200\n\"\"\") == \"1500\"\n\nassert solution(\"\"\"\n5\n1\n0 0 400\n2 0 400\n3 0 400\n4 0 400\n5 0 400\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n1\n3\n0 0 400\n1000 0 400\n2000 0 400\n3\n0 0 400\n1300 0 400\n1000 0 400\n5\n1 0 200\n2 0 200\n3 0 200\n4 0 200\n\"\"\") == \"impossible\""
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam''') == '3907'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 15\") == \"3907\"\nassert solution(\"10 20\") == \"0\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london''') == '3907'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3907'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 15') == '3907'\n\"\"\""
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm\\noslo london\\noslo brussels\\noslo helsinki\\noslo copenhagen\\noslo berlin\\nstockholm helsinki\\nstockholm amsterdam\\nstockholm brussels\\nstockholm oslo\\noslo london\\noslo berlin\\noslo dublin\\noslo rykjavik\\noslo copenhagen\\noslo amsterdam\\noslo london\\noslo brussels\\noslo helsinki\\noslo close\\nstockholm oslo\\noslo helsinki\\noslo brussels\\noslo oslo\\noslo dublin\\noslo stockholm\\noslo amsterdam\\noslo close\\noslo rykjavik\\noslo brussels\\noslo amsterdam\\noslo close\\noslo copy\\noslo close\\noslo dublin\\noslo close\\noslo rykjavik\\noslo amsterdam\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\noslo close\\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 15\") == \"3907\"\nassert solution(\"10 15\") == \"3907\"\nassert solution(\"10 15\") == \"3907\"\nassert solution(\"15 15\") == \"15\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 10\namsterdam\namsterdam\namsterdam\ncopenhagen\nlondon\nstockholm\noslo\ndublin\nhelsinki\nbrussels\noslo stockholm\nstockholm amsterdam\ncopenhagen amsterdam\nstockholm london\noslo london\ndublin amsterdam\nstockholm london\nhelsinki amsterdam\nstockholm helsinki\nstockholm copenhagen\ncopenhagen helsinki\ncopenhagen amsterdam\nstockholm amsterdam\ncopenhagen london\nlondon amsterdam\nstockholm amsterdam\namsterdam london\namsterdam helsinki\nlondon amsterdam\namsterdam helsinki\nstockholm amsterdam\namsterdam london\noslo amsterdam\noslo london\noslo london\nstockholm amsterdam\nstockholm amsterdam\ncopenhagen amsterdam\nstockholm amsterdam\ndublin amsterdam\ndublin helsinki\ndublin amsterdam\ndublin amsterdam\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo london\noslo l"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 15') == '3907'"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10') == '3907'\nassert solution('10 15') == '3907'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n\") == \"1\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n\") == \"1\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n\") == \"1\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 4\\n\"\n    \"3 1 3 4 2\\n\"\n    \"0 5\\n\"\n    \"0 9\\n\"\n    \"4 5\\n\"\n    \"2 1\\n\"\n    ) == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\") == \"2\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n\") == \"1\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '2'\nassert solution('''5 4\n1 3 1 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '1'\nassert solution('''5 4\n1 3 2 4 1\n0 5\n0 9\n4 5\n2 1\n''') == '2'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n3 1 3 4 2') == '2'\nassert solution('5 1\\n1 0\\n0 8\\n0 3\\n4 5\\n2 1\\n') == '1'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n\"\"\") == \"1\"\nassert solution(\n\"\"\"5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n\"\"\") == \"2\"\nassert solution(\n\"\"\"5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n\"\"\") == \"1\"\nassert solution(\n\"\"\"5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n') == '1'"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '1'\nassert solution('''5 4\n3 1 3 4 2\n0 5\n1 5\n4 5\n2 1\n''') == '2'\nassert solution('''5 4\n3 1 3 4 2\n0 5\n2 1\n4 5\n1 5\n''') == '2'\nassert solution('''5 4\n3 1 3 4 2\n0 5\n2 1\n4 5\n1 5\n0 5\n''') == '1'\nassert solution('''5 4\n3 1 3 4 2\n0 5\n2 1\n4 5\n1 5\n0 5\n''') == '1'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4') == '2'\nassert solution('5 4') == '2'\nassert solution('5 4') == '1'\nassert solution('5 4') == '2'"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 5\n01001\n11100\n10111\n''') == '00010'\nassert solution('''\n10\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n00000\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 5\n01001\n11100\n10111\n''') == '00010'\n\"\"\"\nThe maximum similarity between any two characters is equal to the sum of similarities of all their features. To get the maximum similarity, you can compare every feature of the character with every feature of another character. To get the similarity of the two characters, you can compare every feature of the first with the first, then, compare the first with the second, then, compare the second with the third, and so on.\n\nFor the first character, the similarity is:\n\nThe first character does not have any features, so there is no need to compare anything. Thus, the similarity increases by one.\nThe second character also does not have any features, so the similarity increases by one.\nThe third character also has no features, so the similarity increases by one.\nThe fourth character has two features, which both the first and the second character have. Therefore, they are the only two characters with a similarity of three.\nAfter comparing the fifth character with all other characters, the fourth character is the only one with a similarity of three.\n\nBut, the last character is the one that has the maximum similarity, so the answer is the only character with a similarity of one.\n\"\"\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5') == '00010'\nassert solution('5 6') == '00010'\nassert solution('5 7') == '00011'\n\n---Input---\n3 5\n0\n1\n1\n0\n1\n0\n1\n1\n0\n0\n1\nSample Output:\n0\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 5\n01001\n11100\n10111\n''') == '00010'\nassert solution('''1 1\n1\n1\n1\n''') == '01010'\nassert solution('''3 3\n010\n000\n''') == '01010'\nassert solution('''3 3\n00\n01\n''') == '00100'\nassert solution('''3 4\n11111\n01110\n10110\n''') == '010100'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5') == '00010'\nassert solution('1 1') == '000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"01001\"\nassert solution(\"3 5\") == \"00010\"\n\nassert solution(\"2 2\") == \"0100\"\nassert solution(\"2 3\") == \"0111\"\n\nassert solution(\"3 2\") == \"0101\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"01010\""
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 5\n01001\n11100\n10111\n''') == '00010', f'Expected \\'00010\\' from \\'{solution('')}\\'.'\n\nassert solution('''\n3 2\n01\n1\n''') == '0101', f'Expected \\'0101\\' from \\'{solution('')}\\'.'\n\nassert solution('''\n2 10\n1 0\n1 1\n''') == '00101', f'Expected \\'00101\\' from \\'{solution('')}\\'.'\n'''\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '00010'\n\nSample Input:\n4 7\n1011\n1110\n10111\n11111\nSample Output:\n00010\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5\\n01001\\n11100\\n10111\\n') == '00010'\nassert solution('3 1\\n0\\n1\\n') == '0'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n6 2\\n0 4\\n6 12') == 'possible'\nassert solution('10\\n10\\n0\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1 2') == \"impossible\"\nassert solution('1\\n1 4') == \"impossible\"\nassert solution('1\\n1 2 3') == \"possible\"\nassert solution('1\\n1 2 3 4') == \"impossible\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1\n2\n3\"\"\") == \"impossible\"\n\nassert solution(\"\"\"1\n3\n2\"\"\") == \"possible\"\n\nassert solution(\"\"\"1\n3\n4\n2\"\"\") == \"possible\""
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(solution.__doc__) == 'impossible'"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'possible'\nassert solution('3') == 'impossible'\nassert solution('4') == 'possible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n0 2\n0 6\n2 5\n2 3\n2 4\n2 5''') == 'impossible'\nassert solution('''1\n0 2\n1 3''') == 'possible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n10\n1 2\n2 3\n2 4\n3 4\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n16 17\n18 19\n20 21\n22 23\n24 25\n26 27\n28 29\n30 31\n32 33\n34 35\n36 37\n38 39\n40 41\n42 43\n44 45\n46 47\n48 49\n50 51\n52 53\n54 55\n56 57\n58 59\n60 61\n62 63\n64 65\n66 67\n68 69\n70 71\n72 73\n74 75\n76 77\n78 79\n80 81\n82 83\n84 85\n86 87\n88 89\n90 91\n92 93\n94 95\n96 97\n98 99\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n10\n0 4\n6 12\nSample Output:\nimpossible\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1\n1\n''') == 'impossible'\n\nassert solution('''\n3\n1\n2\n''') == 'possible'\n\nassert solution('''\n3\n1\n2\n''') == 'possible'\n\nassert solution('''\n3\n1\n2\n3\n''') == 'possible'\n\nassert solution('''\n3\n1\n2\n3\n4\n5\n6\n''') == 'impossible'"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n6 2') == 'possible'\nassert solution('6 2') == 'impossible'\nassert solution('6 1') == 'impossible'\nassert solution('6 12') == 'possible'\nassert solution('6 6') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n4\\n6\\n12\") == \"possible\"\n\"\"\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '1'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n-5 0 1\n''') == '2'\n\nassert solution('''\n5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n-5 0 1\n''') == '2'\n\nassert solution('''\n1\n1 0 1\n''') == '0'\n\nassert solution('''\n1\n1 0 1\n''') == '0'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == '2'\n\n'''"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '2'\nassert solution('1\\n10 0 1\\n') == '1'"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('5 0 1') == '2'\nassert solution('10 0 1') == '2'\nassert solution('0 5 1') == '2'\nassert solution('0 -5 1') == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1') == '2'\nassert solution('1\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1') == '1'\nassert solution('1\\n5 0 1\\n10 0 1\\n0 -5 1\\n-5 0 1\\n-5 0 1') == '1'\nassert solution('1\\n1 -10 1\\n1 0 1\\n1 -10 1\\n1 -5 1\\n-5 -10 1') == '1'"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('5 0 1') == '2'\nassert solution('10 0 1') == '2'\nassert solution('0 5 1') == '2'\nassert solution('0 -5 1') == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('2 3') == '1'\nassert solution('4') == '2'\nassert solution('10 0 1') == '1'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\nassert solution(\"2\\n-5 0 1\\n-5 0 1\\n-5 0 1\\n10 0 1\\n10 0 1\\n10 0 1\") == \"2\"\nassert solution(\"3\\n-5 0 1\\n-5 0 1\\n5 0 1\") == \"1\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\nassert solution(\"10\\n5 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n-5 0 1\") == \"2\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Yes\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"Plot Error\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"3 Just A Dream\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Plot Error\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nd\") == \"Yes\\n3 Just A Dream\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\nassert solution('''5\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\nassert solution('''5\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\nassert solution('''5\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\nassert solution('''5\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\nassert solution('''\n4\nD\nE\nS 1\nS 2\nS 3\nS 4\nS 5\nS 6\nS 7\nS 8\nS 9\nS 10\nS 11\nS 12\nS 13\nS 14\nS 15\nS 16\nS 17\nS 18\nS 19\nS 20\nS 21\nS 22\nS 23\nS 24\nS 25\nS 26\nS 27\nS 28\nS 29\nS 30\nS 31\nS 32\nS 33\nS 34\nS 35\nS 36\nS 37\nS 38\nS 39\nS 40\nS 41\nS 42\nS 43\nS 44\nS 45\nS 46\nS 47\nS 48\nS 49\nS 50\nS 51\nS 52\nS 53\nS 54\nS 55\nS 56\nS 57\nS 58\nS 59\nS 60\nS 61\nS 62\nS 63\nS 64\nS 65\nS 66\nS 67\nS 68\nS 69\nS 70\nS 71\nS 72\nS 73\nS 74\nS 75\nS 76\nS 77\nS 78\nS 79\nS 80\nS 81\nS 82\nS 83\nS 84\nS 85\nS 86\nS 87\nS 88\nS 89\nS 90\nS 91\nS 92\nS 93\nS 94\nS 95\nS 96\nS 97\nS 98\nS 99\nS 100\nS 101\nS 102\nS 103\nS 104\nS 105\nS 106\nS 107\nS 108\nS 109\nS 110\nS 111\nS 112\nS 113\nS 114\nS 115\nS 116\nS 117\nS 118\nS 119\nS 120\nS 121\nS 122\nS 123\nS 124\nS 125\nS 126\nS 127\nS 128\nS 129\nS 130\nS 131\nS 132\nS 133\nS 134\nS 135\nS 136\nS 137\nS 138\nS 139\nS 140\nS 141\nS 142\nS 143\nS 144\nS 145\nS 146\nS 147\nS 148\nS 149\nS 150\nS 151\nS 152\nS 153\nS 154\nS 155\nS 156\nS 157\nS 158\nS 159\nS 160\nS 161\nS 162\nS 163\nS 164\nS 165\nS 166\nS 167\nS 168\nS 169\nS 170\nS 171\nS 172\nS 173\nS 174\nS 175\nS 176\nS 177\nS 178\nS 179\nS 180\nS 181\nS 182\nS 183\nS 184\nS 185\nS 186\nS 187\nS 188\nS 189\nS 190\nS 191\nS 192\nS 193\nS 194\nS 195\nS 196\nS 197\nS 198\nS 199\nS 200\nS 201\nS 202\nS 203\nS 204\nS 205\nS 206\nS 207\nS 208\nS 209\nS 210\nS 211\nS 212\nS 213\nS 214\nS 215\nS 216\nS 217\nS 218\nS 219\nS 220\nS 221\nS 222\nS 223\nS 224\nS 225\nS 226\nS 227\nS 228\nS 229\nS 230\nS 231\nS 232\nS 233\nS 234\nS 235\nS 236\nS 237\nS 238\nS 239\nS 240\nS 241\nS 242\nS 243\nS 244\nS 245\nS 246\nS 247\nS 248\nS 249\nS 250\nS 251\nS 252\nS 253\nS 254\nS 255\nS 256\nS 257\nS 258\nS 259\nS 260\nS 261\nS 262\nS 263\nS 264\nS 265\nS 266\nS 267\nS 268\nS 269\nS 270\nS 271\nS 272\nS 273\nS 274\nS 275\nS 276\nS 277\nS 278\nS 279\nS 280\nS 281\nS 282\nS 283\nS 284\nS 285\nS 286\nS 287\nS 288\nS 289\nS 290\nS 291\nS 292\nS 293\nS 294\nS 295\nS 296\nS 297\nS 298\nS 299\nS 300\nS 301\nS 302\nS 303\nS 304\nS 305\nS 306\nS 307\nS 308\nS 309\nS 310\nS 311\nS 312\nS 313\nS 314\nS 315\nS 316\nS 317\nS 318\nS 319\nS 320\nS 321\nS 322\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\n'''"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Yes\"\nassert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 3!bobby_dies\\nS 4!bobby_dies\\nS 5!bobby_dies\\nS 6!bobby_dies\\nS 7!bobby_dies\\nS 8!bobby_dies\\nS 9!bobby_dies\\nS 10!bobby_dies\\nS 11!bobby_dies\\nS 12!bobby_dies\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\nD 5\\nS 3!bobby_dies\\nD 6\\nS 4!bobby_dies\\nD 7\\nS 5!bobby_dies\\nD 8\\nS 6!bobby_dies\\nD 9\\nS 7!bobby_dies\\nD 10\\nS 8!bobby_dies\\nD 11\\nS 9!bobby_dies\\nD 12\\nS 10!bobby_dies\\nS 11!bobby_dies\\nS 12!bobby_dies\\nS 13!bobby_dies\\nS 14!bobby_dies\\nD 14\\nS 13!bobby_dies\\nD 13\\nD 12\\nS 11!bobby_dies\\nS 10!bobby_dies\\nS 9!bobby_dies\\nD 9\\nD 8\\nS 8!bobby_dies\\nD 7\\nS 7!bobby_dies\\nD 6\\nS 6!bobby_dies\\nD 5\\nS 5!bobby_dies\\nD 4\\nS 4!bobby_dies\\nD 3\\nS 3!bobby_dies\\nD 2\\nS 2!bobby_dies\\nS 1!bobby_dies\\nS 0\\nD 0\\nS -1!bobby_dies\\nS -2!bobby_dies\\nS -3!bobby_dies\\nS -4!bobby_dies\\nS -5!bobby_dies\\nS -6!bobby_dies\\nS -7!bobby_dies\\nS -8!bobby_dies\\nS -9!bobby_dies\\nS -10!bobby_dies\\nD -10\\nD -9\\nS -8!bobby_dies\\nS -7!bobby_dies\\nS -6!bobby_dies\\nS -5!bobby_dies\\nS -4!bobby_dies\\nS -3!bobby_dies\\nS -2!bobby_dies\\nS -1!bobby_dies\\nS 0\\nS -1\\nD -1\\nD -2\\nD -3\\nD -4\\nS -4\\nS -3\\nS -2\\nS -1\\nS 0\\nD -1\\nD -2\\nD -3\\nD -4\\nD -5\\nD -6\\nD -7\\nD -8\\nD -9\\nD -10\\nD -11\\nD -12\\nD -13\\nD -14\\nD -15\\nD -16\\nD -17\\nD -18\\nD -19\\nD -20\") == \"Yes\"\nassert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\nS 3!bobby_dies\\nS 4!bobby_dies\\nS 5!bobby_dies\\nS 6!bobby_dies\\nS"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([\n  \"9\",\n  \"12\",\n  \"34\",\n  \"22\",\n  \"66\",\n  \"42\",\n  \"13\",\n  \"45\",\n  \"12\",\n  \"55\",\n  \"39\",\n  \"15\",\n  \"47\",\n  \"13\",\n  \"74\",\n  \"41\",\n  \"10\",\n  \"60\",\n  \"20\",\n  \"66\",\n  \"55\",\n  \"29\",\n  \"63\",\n  \"46\",\n  \"15\",\n  \"47\",\n  \"50\",\n  \"22\",\n  \"23\",\n  \"78\",\n  \"37\",\n  \"16\",\n  \"59\",\n  \"69\",\n  \"36\",\n  \"32\",\n  \"12\",\n  \"47\",\n  \"38\",\n  \"33\",\n  \"19\",\n  \"26\",\n  \"45\",\n  \"19\",\n  \"26\",\n  \"31\",\n  \"12\",\n  \"28\",\n  \"37\",\n  \"56\",\n  \"66\",\n  \"15\",\n  \"64\",\n  \"71\",\n  \"65\",\n  \"72\",\n  \"11\",\n  \"69\",\n  \"30\",\n  \"31\",\n  \"17\",\n  \"48\",\n  \"47\",\n  \"37\",\n  \"12\",\n  \"27\",\n  \"49\",\n  \"36\",\n  \"32\",\n  \"31\",\n  \"26\",\n  \"37\",\n  \"17\",\n  \"49\",\n  \"32\",\n  \"17\",\n  \"48\",\n  \"36\",\n  \"22\",\n  \"44\",\n  \"16\",\n  \"32\",\n  \"27\",\n  \"26\",\n  \"47\",\n  \"43\",\n  \"15\",\n  \"41\",\n  \"53\",\n  \"32\",\n  \"17\",\n  \"46\",\n  \"51\",\n  \"16\",\n  \"32\",\n  \"44\",\n  \"29\",\n  \"12\",\n  \"33\",\n  \"29\",\n  \"33\",\n  \"31\",\n  \"23\",\n  \"39\",\n  \"31\",\n  \"41\",\n  \"12\",\n  \"36\",\n  \"50\",\n  \"37\",\n  \"46\",\n  \"37\",\n  \"28\",\n  \"37\",\n  \"26\",\n  \"47\",\n  \"43\",\n  \"31\",\n  \"37\",\n  \"45\",\n  \"47\",\n  \"17\",\n  \"22\",\n  \"26\",\n  \"17\",\n  \"48\",\n  \"43\",\n  \"21\",\n  \"13\",\n  \"15\",\n  \"33\",\n  \"47\",\n  \"31\",\n  \"22\",\n  \"26\",\n  \"41\",\n  \"31\",\n  \"35\",\n  \"45\",\n  \"41\",\n  \"19\",\n  \"47\",\n  \"36\",\n  \"45\",\n  \"28\",\n  \"31\",\n  \"43\",\n  \"13\",\n  \"17\",\n  \"38\",\n  \"23\",\n  \"31\",\n  \"43\",\n  \"24\",\n  \"33\",\n  \"28\",\n  \"31\",\n  \"35\",\n  \"23\",\n  \"27\",\n  \"32\",\n  \"44\",\n  \"43\",\n  \"27\",\n  \"22\",\n  \"17\",\n  \"13\",\n  \"28\",\n  \"45\",\n  \"43\",\n  \"44\",\n  \"30\",\n  \"41\",\n  \"47\",\n  \"37\",\n  \"23\",\n  \"30\",\n  \"30\",\n  \"44\",\n  \"32\",\n  \"32\",\n  \"37\",\n  \"46\",\n  \"27\",\n  \"43\",\n  \"36\",\n  \"45\",\n  \"39\",\n  \"47\",\n  \"30\",\n  \"33\",\n  \"30\",\n  \"29\",\n  "
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n+------------------------+-+'\nassert solution('4 4 8 7') == '+------------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n+------------------------------+-+'\nassert solution('3 3 8 7') == '+----------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n+----------------------------+-+'\nassert solution('2 2 7 7') == '+-------------------------------------+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n+-------------------------------------+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 9, 5, 0, 0, 4, 1, 7, 3, 5]) == \"++++-++\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"24 5 8 7\") == \"-+---------+\"\n\nassert solution(\"0 0 10 0 1\") == \"|^+++-------+|\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"25 5 8 7\") == \"  +------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\"\nassert solution(\"10 10 9 5\") == \"  +------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\"\nassert solution(\"50 50 9 5\") == \"  +------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\"\n\n\"\"\"\n\nimport itertools\nimport sys"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('24 5 8 7') == '+--------+-+\\n|exercitation|^|\\n|laboris| | |\\n|ex| e| a| c|o|n|u|m|p| | |\\n|du| i|s| u|t| | | | |\\n|    t| |i|n|s| | | | |\\n|    | |i| | | | | |\\n+--------+-+'\n\"\"\"\n\n\nimport sys\nsys.stdin = open('input.txt')\nfrom collections import deque"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([24, 5, 8, 7]) == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"24 5 8 7\") == \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consectetur |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\"\nassert solution(\"10 10 10 10\") == \"+------------------------+-+\\n|lorem ipsum dolor sit amet consectetur |^|\\n|adipisicing elit sed do eiusmod tempor | |\\n|incididunt ut labore et dolore magna aliqua Ut enim | |\\n|ad ipso | | aliquip ex ea commodo consectetur | |\\n|sint | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12 3 10 10\") == \"++++++++\"\n\n\"\"\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 5 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1') == 'impossible'\nassert solution('5 10') == 'possible'\n\"\"\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('4 1\\n1 0 2 3\\n3 2 0 1\\n2 1 3 0\\n0 3 1 2') == 'impossible'\nprint('You passed all the tests!')"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 10\") == \"impossible\"\nassert solution(\"2 3\") == \"impossible\"\nassert solution(\"1 0 1 0\") == \"impossible\"\n\nInput:\n\n2 4\n5 6\n8 7\n8 6\n6 7\n\nOutput:\n\npossible\n\n\"\"\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"possible\"\nassert solution(\"4 10\\n0 3 2 1\\n2 1 0 2\\n1 3 2 0\") == \"impossible\"\nassert solution(\"4 10\\n0 3 2 1\\n1 0 2 3\\n1 3 2 0\\n3 0 1 2\\n2 1 0 1\") == \"possible\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('10 10\\n3 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'impossible'\n\"\"\""
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\\n\") == \"impossible\"\n\n\"\"\"\n\nn, L = (int(x) for x in input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(tuple(map(int, input().split())))\n\npoints = list(set(points))\npoints.sort()\n\ntotaldist = 0\nfor i in range(n):\n    totaldist += abs(points[i][1] - points[i][0])"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n''') == 'possible'\nassert solution('''\n3 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n''') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\\n') == 'possible'\nassert solution('5 1\\n1 2 1\\n1 3 2\\n2 3 4\\n4 2 1\\n3 1 2 1\\n3 5 5\\n4 5 2 1\\n2 1 3 2\\n') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"impossible\"\nprint(solution(input))\n\"\"\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'impossible'\n\nSample Input:\n5 2\n0 1 0 1\n2 1 0 2\n3 0 1 3\n4 0 1 4\n5 0 1 5\nSample Output:\nimpossible'''\n\n\nimport sys\nsys.path.append('..')\n\nfrom cs50 import get_string\nfrom sys import argv\nfrom math import ceil\n\nn, l = argv[1:]\nn, l = int(n), int(l)\n\npoints = []\n\nfor _ in range(n):\n    point = get_string()\n    points.append(point)"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\\n1\\n2\") == \"1.00000000\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == \"1\"\nassert solution('2 2 1') == \"0\"\nassert solution('3 3 3') == \"1\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1.00000000'\n\nassert solution('2 1 1\\n2\\n1') == '1.00000000'\n\nassert solution('2 5 2\\n2 4 3\\n1 2') == '1.00000000'\n\nassert solution('10 10 10\\n5 5 5\\n1 2') == '1.00000000'\n\nassert solution('20 10 10\\n10 5 5\\n1 2') == '1.00000000'"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1\") == \"1.00000000\"\nassert solution(\"3 3 1\") == \"1.00000000\"\nassert solution(\"100 100 100\") == \"1.00000000\"\nassert solution(\"2 2\") == \"0.500000000\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\\n1\\n2\") == \"1.0\"\nprint('hello, world!')\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\\n1\\n2\\n\") == \"1.00000000\"\nassert solution(\"5 5 1\\n1 2 2 1\\n1 1 1 1 1\\n1\\n2\\n\") == \"1.00000000\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 1') == '1'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 3\") == \"1\"\nassert solution(\"6 2 1\") == \"2\"\n\n'''\n\nimport math\nimport sys"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"1.00000000\"\nassert solution(\"3 1 1\") == \"2.00000000\"\nassert solution(\"4 1 1\") == \"2.00000000\"\nassert solution(\"6 1 1\") == \"1.00000000\"\nassert solution(\"10 1 1\") == \"1.00000000\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\") == \"1.00000000\", \"Wrong\"\nassert solution(\"1 2 3\") == \"2.00000000\", \"Wrong\"\nassert solution(\"1 1 1\") == \"1.00000000\", \"Wrong\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 3 3 2\\n3\\n1 2\\n1 1\") == \"1\"\nassert solution(\"5\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n3 4\") == \"1\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '3'\nassert solution('''\n5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '1'\nassert solution('''\n5\n4 3 3 2\n1\n1 2\n1 1\n2 4\n''') == '3'\nassert solution('''\n5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '2'\nassert solution('''\n5\n4 3 3 2\n1\n1 2\n1 1\n2 4\n''') == '2'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n4 3 3 2\\n3\\n1 2') == '1\\n2\\n3'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4 3 3 2') == '2'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\") == \"2 1\"\nassert solution(\"5\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n3 4\") == \"1\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n') == '1'\nassert solution('5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n5 5 5 5 5\\n') == '2'"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 4 3 3 2\"\n) == \"2\"\nassert solution(\n    \"5 4 3 3 2\"\n) == \"1\"\nassert solution(\n    \"5 4 3 3 2\"\n) == \"3\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4 3 3 2\") == \"2\", \"Wrong answer\"\nprint(\"Correct\")\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '2', \"Wrong solution\"\nassert solution('5 4 3 3 2') == '1', \"Wrong solution\"\nassert solution('3') == '1', \"Wrong solution\"\nassert solution('3 1 2') == '2', \"Wrong solution\"\nassert solution('3 1 1') == '3', \"Wrong solution\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n0 1\\n1 2\\n0 2\\n') == '1'\nassert solution('3\\n2\\n0 1\\n1 2\\n0 2\\n') == '1'\nassert solution('3\\n3\\n0 1\\n1 2\\n0 2\\n') == '0'\nassert solution('5\\n5\\n0 1\\n1 2\\n0 2\\n') == '2'\nassert solution('5\\n5\\n0 1\\n1 2\\n1 2\\n') == '1'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 4') == '1'\nassert solution('1 1') == '1'\nassert solution('5 5') == '2'\nassert solution('3 0') == '2'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == \"1\"\nassert solution('5 3') == \"2\"\nassert solution('7 2') == \"1\"\nassert solution('1 5') == \"1\"\nassert solution('3 3') == \"1\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2\\n0 1\\n1 2\\n0 2') == '1'\nassert solution('3 3\\n1 0\\n1 1\\n2 0') == '2'\nassert solution('3 3\\n1 0\\n2 2\\n2 1') == '2'\nassert solution('3 3\\n1 0\\n2 2\\n1 1') == '2'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '1'\nassert solution('1') == 'never meet'\n\"\"\"\n\nn, m = list(map(int, stdin.split()))\n\npairs = []\nfor i in range(m):\n    pairs.append([i, i+1])"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"4 10\") == \"1.58\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n2\n1 2\n2 3\n3 4''') == '2'\nassert solution('''2\n2\n2 2\n1 3\n2 4''') == '1'\nprint('All tests passed!')\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2\\n0 1\\n1 2\\n0 2') == \"1\"\nassert solution('4 2\\n0 1\\n1 2\\n2 3\\n0 3') == \"1\"\nassert solution('5 2\\n0 1\\n1 2\\n2 3\\n3 4\\n0 4') == \"0\"\nassert solution('5 2\\n0 1\\n1 2\\n2 3\\n3 4\\n4 5\\n0 5') == \"0\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 2\n0 1\n1 2\n0 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\n\"\"\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4 2') == '14500000001'\nassert solution('5 3 3') == '15500000115'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0.150217754536'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4 2') == '14500000001'\n\"\"\"\n\n\"\"\"\nfrom fractions import gcd\n\nR, C, K = map(int, input().split())\n\nx = [i for i in range(1, R+1)]\ny = [i for i in range(1, C+1)]"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4 2') == '14500000001'\nassert solution('2 2 2') == '9'\nassert solution('5 5 2') == '11'\nassert solution('5 5 5') == '25'\nassert solution('10 10 5') == '1'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 4 2\n11\n1 2\n1 3\n2 1\n''') == '1462500000000000000000'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n3\\n1\\n1\\n1') == '7'\nassert solution('3\\n3\\n1\\n2\\n1') == '1'\nassert solution('3\\n3\\n2\\n2\\n2') == '0'\nassert solution('5\\n5\\n1\\n1\\n1') == '1'\nassert solution('5\\n5\\n1\\n2\\n2') == '2'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4 2') == '14500000001'\n\nassert solution('10 3 2') == '1000000001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4 2') == '14500000001'\nassert solution('3 10 4') == '141858333719'\nassert solution('5 5 5') == '25'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\nassert solution(\"2 4 3\") == \"17\"\nassert solution(\"7 4 2\") == \"86559523\"\nassert solution(\"8 5 3\") == \"2\"\nassert solution(\"9 5 2\") == \"1\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4 2') == '14500000001'\nassert solution('1 1 1') == '1'\nassert solution('8 9 5') == '704753547'\nassert solution('10 5 10') == '5753547'\nassert solution('5 5 10') == '4753547'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n3\n1 6\n2 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n3\n1 4\n2 5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3 4\\n1 6\\n2 6') == '2'\nassert solution('5\\n4 5\\n2 3\\n3 7\\n3 4') == '4'\nassert solution('1000\\n5000\\n0 0\\n0 0') == '1000'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 4\\n3 7\\n1 6\\n2 6') == '0\\n1\\n1\\n2\\n', 'wrong'\nassert solution('5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5') == '1\\n1\\n1\\n1\\n2\\n', 'wrong'\nassert solution('100\\n99 99\\n100 100\\n99 99\\n99 99\\n99 99') == '99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n99\\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 4\n3 7\n1 6\n2 6\n''') == '1 2 1 2 2'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 4\n3 7\n1 6\n2 6\n''') == '2'\nassert solution('''\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n''') == '1'\nassert solution('''\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n''') == '0'\nassert solution('''\n5\n3 8\n1 6\n4 7\n3 6\n4 7\n''') == '4'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1 4\n3 7\n1 6\n2 6\n''') == '2'\n\nassert solution('''\n4\n3 7\n1 4\n1 6\n1 3\n''') == '2'\n\nassert solution('''\n4\n1 4\n2 6\n1 3\n''') == '3'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 4') == '0\\n1\\n1\\n'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 4\\n3 7\\n1 6\\n2 6') == '2'\nassert solution('5\\n1 4\\n3 7\\n1 6\\n2 6\\n2 5') == '1 1'\n\"\"\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 4\\n3 7\\n1 6\\n2 6') == '0 1 1 1'\nprint(solution(input()))\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"3 7\") == \"1\"\nassert solution(\"1 6\") == \"2\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\nassert solution(\"5 4\\n1 2 500\\n1 3 500\\n2 4 500\\n2\") == \"6100\"\nassert solution(\"3 1\\n1 1 200\\n1 3 200\") == \"201\"\nassert solution(\"1 1\\n1 1 200\\n1 3 200\") == \"201\"\nassert solution(\"1 1\\n1 1 200\\n1 3 200\\n1 2 200\\n1 3 200\") == \"201\""
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2''') == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\nassert solution('''\n10 10\n1 2 3\n2 3 4\n1 3 5\n5 6 7\n9 8 9\n4 2 6\n3 5 8\n8 1 5\n4 7 6\n''') == '0'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '3100'\nassert solution('4 4') == '0'\n\n'''\n\n\nfrom collections import defaultdict\nfrom queue import Queue\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300''') == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3100\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3 1000') == '3100'"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\nassert solution(\"1 1 1000\\n2 2 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3150\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\n''')"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '0.5'\nassert solution('4 2') == '1.0'\nassert solution('2 4') == '2.5'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 4') == '4.0'\nassert solution('4 1') == '4.0'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"5.250000000\"\nassert solution(\"5 5\") == \"4.50000000\"\nassert solution(\"1 9\") == \"1.90000000\"\nassert solution(\"3 4\") == \"2.50000000\"\nassert solution(\"2 4\") == \"2.0\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 5\\n4 8\\n\") == \"5.50000000\"\nassert solution(\"5\\n2 5\\n4 8\\n\") == \"5.50000000\"\nassert solution(\"5\\n2 5\\n4 8\\n\") == \"5.50000000\"\nassert solution(\"5\\n2 5\\n4 8\\n\") == \"5.50000000\"\nassert solution(\"5\\n2 5\\n4 8\\n\") == \"5.50000000\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\n1 8\n6 5\n2 5\n2 9\n7 13\n''') == '5.250000000'\n'''"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '5.25'\nassert solution('3 1') == '5.5'\nassert solution('4 3') == '4.5000000000000002'"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1.5'\nassert solution('4 2') == '1.5'\nassert solution('8 2') == '2.0'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n5 7\") == \"4.5000000000000003\"\nassert solution(\"2 1\\n2 3\") == \"2.5\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2\\n2 1\\n2 5\\n4 3') == '4.5000000000000003'\nassert solution('5 4\\n5 6\\n8 9\\n10 10\\n12 12\\n14 16\\n18 18\\n20 20\\n22 22\\n24 24\\n26 26\\n28 28\\n30 30\\n32 32\\n34 34\\n36 36\\n38 38\\n40 40\\n42 42\\n44 44\\n46 46\\n48 48\\n50 50\\n52 52\\n54 54\\n56 56\\n58 58\\n60 60\\n62 62\\n64 64\\n66 66\\n68 68\\n70 70\\n72 72\\n74 74\\n76 76\\n78 78\\n80 80\\n82 82\\n84 84\\n86 86\\n88 88\\n90 90\\n92 92\\n94 94\\n96 96\\n98 98\\n100 100\\n102 102\\n104 104\\n106 106\\n108 108\\n110 110\\n112 112\\n114 114\\n116 116\\n118 118\\n120 120\\n122 122\\n124 124\\n126 126\\n128 128\\n130 130\\n132 132\\n134 134\\n136 136\\n138 138\\n140 140\\n142 142\\n144 144\\n146 146\\n148 148\\n150 150\\n152 152\\n154 154\\n156 156\\n158 158\\n160 160\\n162 162\\n164 164\\n166 166\\n168 168\\n170 170\\n172 172\\n174 174\\n176 176\\n178 178\\n180 180\\n182 182\\n184 184\\n186 186\\n188 188\\n190 190\\n192 192\\n194 194\\n196 196\\n198 198\\n200 200\\n202 202\\n204 204\\n206 206\\n208 208\\n210 210\\n212 212\\n214 214\\n216 216\\n218 218\\n220 220\\n222 222\\n224 224\\n226 226\\n228 228\\n230 230\\n232 232\\n234 234\\n236 236\\n238 238\\n240 240\\n242 242\\n244 244\\n246 246\\n248 248\\n250 250\\n252 252\\n254 254\\n256 256\\n258 258\\n260 260\\n262 262\\n264 264\\n266 266\\n268 268\\n270 270\\n272 272\\n274 274\\n276 276\\n278 278\\n280 280\\n282 282\\n284 284\\n286 286\\n288 288\\n290 290\\n292 292\\n294 294\\n296 296\\n298 298\\n300 300\\n302 302\\n304 304\\n306 306\\n308 308\\n310 310\\n312 312\\n314 314\\n316 316\\n318 318\\n320 320\\n322 322\\n324 324\\n326 326\\n328 328\\n330 330\\n332 332\\n334 334\\n336 336\\n338 338\\n340 340\\n342 342\\n344 344\\n346 346\\n348 348\\n350 350\\n352 352\\n354 354\\n356 356\\n358 358\\n360 360\\n362 362\\n364 364\\n366 366\\n368 368\\n370 370\\n372 372\\n374 374\\n376 376\\n378 378\\n380 380\\n382 382\\n384 384\\n386 386\\n388 388\\n390 390\\n392 392\\n394 294\\n396 396\\n398 398\\n400 400\\n402 402\\n404 404\\n406 406\\n408 408\\n410 410\\n412 412\\n414 414\\n416 416\\n418 418\\n420 420\\n422 422\\n424 424\\n426 426\\n428 428\\n430 430\\n432 432\\n434 434\\n436 436\\n438 438\\n440 440\\n442 442\\n444 444\\n446 446\\n448 448\\n450 450\\n452 452\\n454 454\\n456 456\\n458 458\\n460 460\\n462 462\\n464 464\\n466 466\\n468 468\\n470 470\\n472 472\\n474 474\\n476 476\\n478 478\\n480 480\\n482 482\\n484 484\\n486 486\\n488 488\\n490 490\\n492 492\\n494 494\\n496 496\\n498 498\\n500 500\\n502 502\\n504 504\\n506 506\\n508 508\\n510 510\\n512 512\\n514 514\\n516 516\\n518 518\\n520 520\\n522 522\\n524 524\\n526 526\\n528 528\\n530 530\\n532 532\\n534 534\\n536 536\\n538 538\\n540 540\\n542 542\\n544 544\\n546 546\\n548 548\\n550 550\\n552 552\\n554 554\\n556 556\\n558 558\\n560 560\\n562 562\\n564 564\\n566 566\\n568 568\\n570 570\\n572 572\\n574 574\\n576 576\\n578 578\\n580 580\\n582 582\\n584 584\\n586 586\\n588 588\\n590 590\\n592 592\\n594 594\\n596 596\\n598 598\\n600 600\\n602 602\\n604 604\\n606 606\\n608 608\\n610 610\\n612 612\\n614 614\\n616 616\\n618 618\\n620 620\\n622 622\\n624 624\\n626 626\\n628 628\\n630 630\\n632 632\\n634 634\\n636 636\\n638 638\\n640 640\\n642 642\\n644 644\\n646 646\\n648 648\\n650 650\\n652 652\\n654 654\\n656 656\\n658 658\\n660 660\\n662 662\\n664 664\\n666 666\\n668 668\\n670 670\\n672 672\\n674 674\\n676 676\\n678 678\\n680 680\\n682 682\\n684 684\\n686 686\\n688 688\\n690 690\\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 8') == '5.250000000'\nassert solution('4 2') == '5.250000000'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7\\n2\\n2\\n0\\n4\\n'''\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7\\n2\\n2\\n0\\n4\\n'''\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 1 2 1 1\") == \"7\"\nassert solution(\"5\") == \"2\"\nassert solution(\"1 2 1 2 1\") == \"0\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7\\n2\\n2\\n0\\n4\\n'''\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"1 2 3 1 2 1 1\") == \"2\"\nassert solution(\"1 2 1 2\") == \"0\"\nassert solution(\"1 2 1 2\") == \"0\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == \"7\"\nassert solution('''7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == \"2\"\nassert solution('''5\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == \"0\"\nassert solution('''7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == \"4\"\nassert solution('''7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == \"4\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n\" +\n                \"1 2 3 1 2 1 1\\n\" +\n                \"5\\n\" +\n                \"1 3 1 2 3\\n\" +\n                \"1 2 1 2\\n\" +\n                \"2 2 2 3\") == \"7\"\nassert solution(\"1\\n\" +\n                \"1 2 3 1 2 1 1\\n\" +\n                \"5\\n\" +\n                \"1 3 1 2 3\\n\" +\n                \"1 2 1 2\\n\" +\n                \"2 2 2 3\") == \"2\"\nassert solution(\"5\\n\" +\n                \"1 2 3 1 2 1 1\\n\" +\n                \"5\\n\" +\n                \"1 3 1 2 3\\n\" +\n                \"1 2 1 2\\n\" +\n                \"2 2 2 3\") == \"4\"\nassert solution(\"3\\n\" +\n                \"1 2 1 2\\n\" +\n                \"2 2 2 3\") == \"0\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2''') == '2'\n\nassert solution('''3\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2''') == '0'\n\nassert solution('''7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\nSample Output:\n7\n2\n2\n0\n4\n4\n4\n5\n4\n''') == '4'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n\"\"\") == \"7\\n2\\n2\\n0\\n4\\n\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\\n1 2 1 1\\n5\\n1 3 1 2 3\") == \"7\\n2\\n0\""
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n\"\"\") == \"32.6405451448\"\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50') == '32.6405451448'\nassert solution('100\\n10 30 30 40 20 40 50 30 30 50') == '59.6849478770'\n\"\"\"\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2\\n') == '32.6405451448'\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2') == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2') == '32.6405451448'\nassert solution('5\\n4 4 4 4 4\\n0.0 0.0 0.4 0.4 0.0\\n0.0 0.0 0.0 0.0 0.4\\n0.0 0.0 0.4 0.4 0.4\\n0.0 0.0 0.4 0.4 0.4\\n0.4 0.0 0.4 0.4 0.4') == '41.7620000015'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2\\n\") == '32.6405451448'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 2 3 4\nSample Input:\n2\n2 1 4\nSample Output:\n1 4 2\n''') == '1 4 2'\nassert solution('''\n3\n1 2 3\nSample Input:\n2\n1 1 2\nSample Output:\n1 2 1\n''') == '1 2 1'\nassert solution('''\n4\n1 2 3 4\nSample Input:\n2\n2 1 4\nSample Output:\n1 4 2\n''') == '1 4 2'\n'''\n\nstdin = \\\n'''\n5\n1 2 3 4 5\nSample Input:\n2\n1 1 2\nSample Output:\n1 2 1\n'''"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 4 3\\n\") == \"3 2 1 4\\n\"\nassert solution(\"5\\n1 3 2 4 1\\n\") == \"4 3 2 1\\n\"\nassert solution(\"8\\n2 3 1 2 3 4 1 2\\n\") == \"4 3 1 2 3\\n\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"6 7 8 9 10 1 2 3 4 5\\n\""
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n2 4 1 3 5\n\"\"\") == \"\"\"2 3 4 1 5\"\"\"[1:]"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '2 1 4 3\\n'\n    '2 3 4 1\\n'\n) == '3 2 4 1\\n'\n\nassert solution(\n    '3 1 2\\n'\n    '2 1 3\\n'\n    '3 1 4\\n'\n    '4 1 2\\n'\n) == '2 3 4 1\\n'\n\nassert solution(\n    '3 1 2\\n'\n    '2 1 3\\n'\n    '3 1 4\\n'\n    '4 1 2\\n'\n    '1 2 3\\n'\n    '2 1 3\\n'\n    '1 2 4\\n'\n    '4 1 2\\n'\n    '1 3 4\\n'\n    '2 3 4\\n'\n    '3 4 1\\n'\n) == '2 1 4 1\\n'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '4\\n2 1 4 3\\n'\n    ) == '2 3 1 4'\n'''\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 4 3') == '2 3 4 1'\nassert solution('3 4 5 2 1') == '5 3 1 4 2'"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n2 1 4 3\n\"\"\") == \"2 3 4 1\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"\n10\n1 5 2 4 3 6 8 7 6 5 4 3 2 1\n\"\"\") == \"1 5 2 4 3 6 8 7 6 5 4 3 2 1\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 1 4 3\\n') == '2 3 4 1'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n2 1 4 3\n''') == '2 3 4 1'\nassert solution('''\n2\n1 1\n''') == '1 1'\nassert solution('''\n2\n1 1\n''') == '1 1'\nassert solution('''\n1\n3 2\n''') == '3 2 1'\nassert solution('''\n1\n3 2\n''') == '3 2 1'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 1 4 3\n\"\"\") == \"\"\"\n2 3 1 4\n\"\"\".strip()\n\nassert solution(\"\"\"\n5\n3 1 2 4 5\n\"\"\") == \"\"\"\n3 2 5 1 4\n\"\"\".strip()\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2 3\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '7.656854249492381'\nassert solution('1') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\\n2\\n3\") == \"7.656854249492381\"\nassert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\nassert solution(\"3\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\""
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('2\\n1 2\\n1 3') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\nassert solution('4\\n1 2\\n3 3\\n2 3\\n') == '5.0'\nassert solution('3\\n1 2\\n3 3\\n2 3\\n') == '4.0'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2\n2 3\n3 4\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''5\n-1 1\n1 1\n-1 1\n-1 -1\n-1 -1\n''') == '7.656854249492381'\nassert solution('''6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '6.063491250026835'\nassert solution('''13\n1 2\n1 3\n2 4\n3 2\n3 2\n2 1\n4 1\n5 3\n6 4\n7 5\n8 6\n9 7\n10 8\n11 9\n12 10\n13 11\n''') == '6.063491250026835'\nassert solution('''15\n-1 2\n-1 3\n-1 4\n-1 5\n-1 6\n-1 7\n-1 8\n-1 9\n-1 10\n-1 11\n-1 12\n-1 13\n-1 14\n-1 15\n''') == '5.001056640612977'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\nassert solution('5\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n10\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n\"\"\") == \"7.656854249492381\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"3 5 2\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"1\"\nassert solution(\"\"\"3 5 2\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"3\"\nassert solution(\"\"\"3 5 2\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"1\"\nassert solution(\"\"\"3 5 2\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n') == \"2\"\nassert solution('5 5 5\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n') == \"0\"\nassert solution('4 4 4\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n') == \"0\"\nassert solution('5 5 5\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n') == \"0\"\nassert solution('2 5 4\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n') == \"0\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 5 2\n0 0\n1 1\n0 2\n0 3\n1 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 3 2\n0 0\n0 1\n0 2\n1 2\n1 3\n2 2\n2 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '3', \"Wrong answer for input '1 2'\"\nassert solution('3 5 3') == '2', \"Wrong answer for input '3 5 3'\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\n\nassert solution('''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '1'\n\nassert solution('''\n2 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '0'\n\nassert solution('''\n7 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '1'\n\nassert solution('''\n7 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(r\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == '2'\nassert solution(r\"\"\"\n2 4 4\n2 2\n1 4\n4 3\n1 2\n\"\"\") == '3'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '9'\nassert solution('5') == '9'\nassert solution('1000000000') == '99999'\nassert solution('5000000000000') == '99999'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '9'\nassert solution('10 5') == '6'"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n''') == '9'\nassert solution('''\n1 1000000\n''') == '98245353'\nassert solution('''\n100000 1\n''') == '98245353'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '9'\nassert solution('1 2') == '1'\nassert solution('2 3') == '1'\nassert solution('3 2') == '1'\nassert solution('4 1') == '1'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '9'\nassert solution('5 8') == '3'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '9'\nassert solution('9 2') == '3'\nassert solution('6 5') == '6'\nassert solution('15 8') == '11'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '9'\nassert solution('4 3') == '2'\nassert solution('2 2') == '1'\nassert solution('1 1') == '1'"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '9'\nassert solution('2 2') == '3'\nassert solution('2 5') == '6'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1') == '9'\nassert solution('10 1') == '9'\nassert solution('5 5') == '2'\nassert solution('5 5') == '3'\nassert solution('5 5') == '3'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '9'\nassert solution('4 3') == '11'\nassert solution('10 12') == '19'\nassert solution('1000000000 100000000') == '99999999999'\nassert solution('9 2') == '0'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n2\\n3\\n5\\n7\\n12') == '12'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3\n5\n7\n''') == '12'\nassert solution('''\n5\n2\n3\n5\n7\n''') == '12'\nassert solution('''\n4\n1\n3\n5\n7\n''') == '7'\n'''\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2\\n3\\n5\\n7\\n12') == '12'\nassert solution('5\\n2\\n3\\n5\\n7\\n12') == '12'\nassert solution('5\\n2\\n3\\n5\\n7\\n12') == '12'\nassert solution('5\\n2\\n3\\n5\\n7\\n12') == '12'\nassert solution('5\\n2\\n3\\n5\\n7\\n12') == '12'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '12'\nassert solution('6') == '1'\nassert solution('7') == '2'\nassert solution('8') == '3'\nassert solution('9') == '4'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n2\n3\n5\n7\n12\nSample Input 2:\n4\n2\n2\n3\n5\n7\nSample Output 2:\n3\nSample Input 3:\n1\n2\n3\nSample Output 3:\n-1\n''') == '-1'\n\nassert solution('''\n4\n1\n2\n3\n5\nSample Output 4:\n5\n''') == '5'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"12\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"7\"\nassert solution(\"5\") == \"12\"\n\"\"\""
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '12'\nassert solution('3\\n5\\n7\\n9\\n11\\n13') == '13'\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '0'\nassert solution('10\\n20\\n30\\n40\\n50\\n60\\n70\\n80') == '60'\nassert solution('10\\n100\\n200\\n300\\n400\\n500\\n600\\n700\\n800') == '700'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1\n5\n2\n''') == '1'\nassert solution('''\n4\n7\n8\n9\n10\n''') == '9'\nassert solution('''\n2\n0\n2\n1\n1\n''') == '2'\nassert solution('''\n4\n-3\n-1\n1\n3\n''') == '3'\nassert solution('''\n5\n0\n2\n-1\n3\n-2\n''') == '3'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '12'\nassert solution('2') == '5'\nassert solution('3') == '7'\nassert solution('5') == '12'\nassert solution('7') == '12'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n5\\n7\\n12') == '12'\nassert solution('5\\n2\\n3\\n5\\n7\\n12') == '12'\nassert solution('4\\n-2\\n3\\n5\\n7\\n12') == '12'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20') == ''"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '110'\nassert solution('6') == '111'"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"1011101\") == \"100\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '01'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '01'\nassert solution('12') == '110'\nassert solution('9') == '111'\nassert solution('25') == '111'\nassert solution('1') == '0'\n\"\"\"\nimport math"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n00\\n01\\n10\\n110\\n111') == '11'\nassert solution('1\\n10') == '10'\nassert solution('15') == '10'\n\"\"\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '110'\nassert solution('4') == '111'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '0'\nassert solution('01') == '0'\nassert solution('00') == '0'\nassert solution('0101') == '111'\nassert solution('1111') == '1111'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '01'\nassert solution('11') == '01'\nassert solution('110') == '00'\n\"\"\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1111\"\nassert solution(\"4\") == \"111\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n00\\n01\\n10\\n110\\n111') == '11'\nassert solution('5\\n00\\n01\\n10\\n110\\n111\\n101') == '110'\n\n\"\"\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n\"\"\") == \"100 250 320\"\nassert solution(\"\"\"\n3\n3\n20 100\n100 10\n1\n150 50\n1\n150 100\n\"\"\") == \"100 250 320\"\nassert solution(\"\"\"\n1\n2\n20 100\n100 10\n\"\"\") == \"100 200\"\nassert solution(\"\"\"\n1\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n\"\"\") == \"100 200\"\nassert solution(\"\"\"\n1\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n\"\"\") == \"100 200\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n20 100\\n100 10\\n1\") == \"100 250 320\"\nassert solution(\"4\\n3\\n100\\n150\\n1\\n1\") == \"100 250 320\"\nassert solution(\"5\\n3\\n100\\n150\\n100\\n1\") == \"100 250 320\""
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '100 250 320'\nassert solution('20') == '100 250 320'\nassert solution('3') == '100 250 320'"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n    3\n    2\n    20 100\n    100 10\n    1\n    150 50\n    1\n    150 100\n\"\"\") == \"100 250 320\""
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '100 250 320'\nassert solution('3') == '100 250 320'\nassert solution('4') == '400 450 600'\nassert solution('5') == '400 450 600'\nassert solution('6') == '400 450 600'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2\n20 100\n100 10\"\"\") == \"100 250 320\"\nassert solution(\"\"\"1\n150 50\n1\n150 100\"\"\") == \"150 250 320\"\nprint(solution(input()))\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n\nassert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n\nassert solution('''\n2\n2\n2\n''') == '1'\n\nassert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n\nassert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"100\"\nassert solution(\"3\") == \"250 200 480 320\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n\"\"\") == \"\"\"100 250 320\n\"\"\"[:-1]\nassert solution(\"\"\"\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n\"\"\") == \"\"\"100 250 320\n\"\"\"[:-1]\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '200 300 340'\nassert solution('2') == '100 200 300'\nassert solution('1') == '100'\n\nimport io\nimport sys\n\nsys.stdin = io.StringIO(\"\"\"\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n\"\"\")\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\nassert solution(\"1 2\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\n\"\"\"\n\nimport itertools\nfrom math import factorial"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"9 7 4 6 5 7 2 15 2\"\n\"\"\""
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"50 100\") == \"7 7 7 7 7 7 7 7 7\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8\\n7\") == \"1\"\nassert solution(\"1\\n100\") == \"3\"\nassert solution(\"5\\n50\") == \"2\"\nassert solution(\"3\\n100\") == \"10\"\nassert solution(\"100\\n50\") == \"9\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"9 7 4 6 5 7 2 15 2\"\nassert solution(input()) == \"1 2 4 8 16 32 64 128\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"12 8\") == \"2 1 2 3 1 1 2 2 1\"\nassert solution(\"20 21\") == \"2 1 2 2 1 1 1 2 2 1 2 1 2 1\"\nassert solution(\"20 21\") == \"2 1 2 2 1 1 1 2 2 1 2 1 2 1 2 1\"\nassert solution(\"123456789\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == \"40.0000000000\"\nassert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == \"41.0000000000\"\nassert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == \"40.0000000000\"\nassert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == \"41.0000000000\"\n'''"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n4\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0000000000'\nassert solution('2\\n2\\n0 0\\n0 14\\n15 14\\n15 0') == '41.0000000000'\nassert solution('3\\n3\\n0 0\\n0 14\\n15 14\\n15 0') == '41.0000000000'\nassert solution('4\\n2\\n0 0\\n0 14\\n15 14\\n15 0') == '41.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '40.0000000000'"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '40.0000000000'\nprint('solution() finished successfully!')\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n0 0\n0 14\n15 14\n15 0\n''') == '40.0000000000', 'First'\nassert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n''') == '40.0000000000', 'Second'\nassert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n''') == '40.0000000000', 'Third'\nassert solution('''\n3\n0 0\n0 14\n15 14\n15 0\n''') == '40.0000000000', 'Fourth'\nassert solution('''\n3\n0 0\n0 14\n15 14\n15 0\n''') == '40.0000000000', 'Fifth'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"4\n0 0\n0 14\n15 14\n15 0\"\"\") == \"40.0000000000\"\nassert solution(\"\"\"4\n0 0\n0 14\n15 14\n15 0\"\"\") == \"40.0000000000\"\nassert solution(\"\"\"3\n-10 -10\n10 10\n10 -10\"\"\") == \"20.0000000000\"\nassert solution(\"\"\"5\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\"\"\") == \"40.0000000000\"\nassert solution(\"\"\"3\n0\n0\n0\"\"\") == \"0.0000000000\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == \"40.0000000000\"\nassert solution('''\n2\n0 0\n0 14\n15 14\n15 0\n''') == \"15.0\"\n\nassert solution('''\n5\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == \"60.0\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0.0000000000'\nassert solution('2') == '0.0000000000'\nassert solution('3') == '0.0000000000'\nassert solution('5') == '0.0000000000'\nassert solution('6') == '0.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == '40.0000000000', 'First'\nassert solution('''\n6\n-1 -1\n-1 -10\n-10 -1\n-10 -10\n-1 -10\n-1 -1\n''') == '10.0000000000', 'Second'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '40.0000000000'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n3 1 3 2 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\n2 1 3') == '1'\nassert solution('3\\n2 1 3') == '2 1'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n2 1 3\n\"\"\") == \"1\nassert solution(\"\"\"\n2\n3 1\n\"\"\") == \"1\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"0\n\"\"\")"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n3 1 3\n1 2 3\n''') == '2'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n3 1 3\n''') == '1\n\nassert solution('''\n1\n3 2\n''') == '2\n\nassert solution('''\n1\n2\n''') == '1\n\nassert solution('''\n3\n1 1 2\n''') == '1\n\nassert solution('''\n2\n1 1\n''') == '1\n'''"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2 1 3') == '1'\nassert solution('2\\n3 1 1') == '1'\nassert solution('3\\n3 3 3') == '2'\nassert solution('4\\n3 1 3') == '2'\nassert solution('4\\n3 2 1') == '1'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\n2 1 3') == '1\\n1\\n1'\nassert solution('3\\n2 1 3\\n4 1 2\\n3 1 4') == '2\\n1\\n1'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\nassert solution('''\n1\n3\n1 2 1\n''') == \"1\"\nassert solution('''\n2\n4\n4 3 2\n''') == \"0\""
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n2 3\n1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n4 5\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n\"\"\") == \"1 2 3 4\"\n\nassert solution(\"\"\"\n1\n5\n1 2 3 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n2 5\n1 2\n\"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n1\n5\n1 2\n\"\"\") == \"1\""
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\") == \"0 0\"\nassert solution(\"0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\") == \"0 0\"\nassert solution(\"2.10 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\") == \"0 1\"\n\nprint(solution(input()))"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n73.05 1.71 2.38\n''') == '199 162'\nassert solution('''\n\n''') == 'None'\nprint('Congratulations!')"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '0.0000 11.00 3.40'\n    ) == '0.0000 0.0000 3.40'\nassert solution(\n    '0.0000 5.00 8.00'\n    ) == '5.00 2.00'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'None'\nassert solution('10') == '199 162'\nassert solution('18') == '199 162'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input) == sample_output"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'\nassert solution('9.86 9.57 1.17 0.87 0.29 0.39 0.56 0.24 0.32') == 'None'\nprint('All test cases passed...')\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"725.85 1.71 2.38\"\n) == \"199 162\"\nassert solution(\n    \"12.14 0.20 23.90\"\n) == \"0 1\"\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5.29 3.94 3.74 3.47 3.67 1.72 0.61\\n\") == \"209 162\"\nassert solution(\"0.01 0.05 0.09 0.99\\n\") == \"None\"\nassert solution(\"0.01 0.5 0.09 0.99\\n\") == \"None\""
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '199 162'"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0.00\\n10.00\\n0.00\\n') == 'none'\nassert solution('7.00\\n0.00\\n0.00\\n') == 'none'\nassert solution('7.00\\n0.00\\n10.00\\n') == 'none'\nassert solution('3.00\\n7.00\\n8.00\\n') == '2 4'\nassert solution('7.00\\n0.00\\n4.00\\n') == '1 2'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '17'"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '16'\nassert solution('5 5') == '1'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '16'\nassert solution('1 3 2') == '7'\nassert solution('2 1 -1') == '4'\nassert solution('1 3 2') == '3'\nassert solution('0 2 3') == '4'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\") == \"16\"\nassert solution(\"10 20\\n4 5 7\\n1 2 3\\n2 2 2\\n3 2 4\\n4 4 4\\n5 6 7\\n6 7 5\\n7 6 5\\n8 7 6\\n9 8 8\\n10 10 5\\n11 11 7\\n12 12 7\\n13 13 8\\n14 14 8\\n15 15 6\\n16 16 7\\n17 17 6\\n18 18 7\\n19 19 7\\n20 20 6\\n21 21 6\\n22 22 7\\n23 23 7\\n24 24 6\\n25 25 7\\n26 26 6\\n27 27 7\\n28 28 7\\n29 29 6\\n30 30 7\\n31 31 6\\n32 32 7\\n33 33 7\\n34 34 6\\n35 35 7\\n36 36 6\\n37 37 7\\n38 38 6\\n39 39 7\\n40 40 7\\n41 41 6\\n42 42 7\\n43 43 7\\n44 44 6\\n45 45 7\\n46 46 7\\n47 47 6\\n48 48 7\\n49 49 7\\n50 50 7\\n51 51 7\\n52 52 7\\n53 53 7\\n54 54 7\\n55 55 7\\n56 56 7\\n57 57 7\\n58 58 7\\n59 59 7\\n60 60 7\\n61 61 7\\n62 62 7\\n63 63 7\\n64 64 7\\n65 65 7\\n66 66 7\\n67 67 7\\n68 68 7\\n69 69 7\\n70 70 7\\n71 71 7\\n72 72 7\\n73 73 7\\n74 74 7\\n75 75 7\\n76 76 7\\n77 77 7\\n78 78 7\\n79 79 7\\n80 80 7\\n81 81 7\\n82 82 7\\n83 83 7\\n84 84 7\\n85 85 7\\n86 86 7\\n87 87 7\\n88 88 7\\n89 89 7\\n90 90 7\\n91 91 7\\n92 92 7\\n93 93 7\\n94 94 7\\n95 95 7\\n96 96 7\\n97 97 7\\n98 98 7\\n99 99 7\\n100 100 7\\n101 101 7\\n102 102 7\\n103 103 7\\n104 104 7\\n105 105 7\\n106 106 7\\n107 107 7\\n108 108 7\\n109 109 7\\n110 110 7\\n111 111 7\\n112 112 7\\n113 113 7\\n114 114 7\\n115 115 7\\n116 116 7\\n117 117 7\\n118 118 7\\n119 119 7\\n120 120 7\\n121 121 7\\n122 122 7\\n123 123 7\\n124 124 7\\n125 125 7\\n126 126 7\\n127 127 7\\n128 128 7\\n129 129 7\\n130 130 7\\n131 131 7\\n132 132 7\\n133 133 7\\n134 134 7\\n135 135 7\\n136 136 7\\n137 137 7\\n138 138 7\\n139 139 7\\n140 140 7\\n141 141 7\\n142 142 7\\n143 143 7\\n144 144 7\\n145 145 7\\n146 146 7\\n147 147 7\\n148 148 7\\n149 149 7\\n150 150 7\\n151 151 7\\n152 152 7\\n153 153 7\\n154 154 7\\n155 155 7\\n156 156 7\\n157 157 7\\n158 158 7\\n159 159 7\\n160 160 7\\n161 161 7\\n162 162 7\\n163 163 7\\n164 164 7\\n165 165 7\\n166 166 7\\n167 167 7\\n168 168 7\\n169 169 7\\n170 170 7\\n171 171 7\\n172 172 7\\n173 173 7\\n174 174 7\\n175 175 7\\n176 176 7\\n177 177 7\\n178 178 7\\n179 179 7\\n180 180 7\\n181 181 7\\n182 182 7\\n183 183 7\\n184 184 7\\n185 185 7\\n186 186 7\\n187 187 7\\n188 188 7\\n189 189 7\\n190 190 7\\n191 191 7\\n192 192 7\\n193 193 7\\n194 194 7\\n195 195 7\\n196 196 7\\n197 197 7\\n198 198 7\\n199 199 7\\n200 200 7\\n201 201 7\\n202 202 7\\n203 203 7\\n204 204 7\\n205 205 7\\n206 206 7\\n207 207 7\\n208 208 7\\n209 209 7\\n210 210 7\\n211 211 7\\n212 212 7\\n213 213 7\\n214 214 7\\n215 215 7\\n216 216 7\\n217 217 7\\n218 218 7\\n219 219 7\\n220 220 7\\n221 221 7\\n222 222 7\\n223 223 7\\n224 224 7\\n225 225 7\\n226 226 7\\n227 227 7\\n228 228 7\\n229 229 7\\n230 230 7\\n231 231 7\\n232 232 7\\n233 233 7\\n234 234 7\\n235 235 7\\n236 236 7\\n237 237 7\\n238 238 7\\n239 239 7\\n240 240 7\\n241 241 7\\n242 242 7\\n243 243 7\\n244 244 7\\n245 245 7\\n246 246 7\\n247 247 7\\n248 248 7\\n249 249 7\\n250 250 7\\n251 251 7\\n252 252 7\\n253 253 7\\n254 254 7\\n255 255 7\\n256 256 7\\n257 257 7\\n258 258 7\\n259 259 7\\n260 260 7\\n261 261 7\\n262 262 7\\n263 263 7\\n264 264 7\\n265 265 7\\n266 266 7\\n267 267 7\\n268 268 7\\n269 269 7\\n270 270 7\\n271 271 7\\n272 272 7\\n273 273 7\\n274 274 7\\n275 275 7\\n276 276 7\\n277 277 7\\n278 278 7\\n279 279 7\\n280 280 7\\n281 281 7\\n282 282 7\\n283 283 7\\n284 284 7\\n285 285 7\\n286 286 7\\n287 287 7\\n288 288 7\\n289 289 7\\n290 290 7\\n291 291 7\\n292 292 7\\n293 293 7\\n294 294 7\\n295 295 7\\n296 296 7\\n297 297 7\\n298 298 7\\n299 299 7\\n300 300 7\\n301 301 7\\n302 302 7\\n303 303 7\\n304 304 7\\n305 305 7\\n306 306 7\\n307 307 7\\n308 308 7\\n309 309 7\\n310 310 7\\n311 311 7\\n312 312 7\\n313 313 7\\n314 314 7\\n315 315 7\\n316 316 7\\n317 317 7\\n318 318 7\\n319 319 7\\n320 320 7\\n321 321 7\\n322 322 7\\n323 323 7\\n324 324 7\\n325 325 7\\n326 326 7\\n327 327 7\\n328 328 7\\n329 329 7\\n330 330 7\\n331 331 7\\n332 332 7\\n333 333 7\\n334 334 7\\n335 335 7\\n336 336 7\\n337 337 7\\n338 338 7\\n339 339 7\\n340 340 7\\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n''') == \"16\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"16\"\nassert solution(\"5 3\") == \"10\"\nassert solution(\"3 1\") == \"10\"\nassert solution(\"1 3 2\") == \"17\"\nassert solution(\"2 1 1\") == \"9\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == '16', 'error'\n''')\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '16'\nassert solution('10 3') == '18'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n0 0\\n0 0\\n\") == \"16\\n\"\nassert solution(\"1\\n1 0\\n0 1\\n\") == \"15\\n\"\nassert solution(\"1\\n1 1\\n1 0\\n\") == \"4\\n\"\nassert solution(\"1\\n1 1\\n1 0\\n\") == \"3\\n\"\nassert solution(\"1\\n1 1\\n1 0\\n\") == \"2\\n\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"16\"\n\"\"\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"O 3 1\"\n\nSample Input:\n3\nO 9\nI 8\nE 10\nSample Output:\n3 1 3\n\"\"\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2 1 4'\nassert solution('2') == '3 2 1'\nassert solution('3') == '2 1 3'\nassert solution('4') == '1 2 3'\nassert solution('5') == '1 2 3'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nO 4') == '2 1 4'\n\n'''"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\nO 4\\n') == '2 1 4'\nassert solution('2\\nO 2\\nE 6\\nI 1\\n') == '2 1 4'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\nO 4\n\"\"\") == \"2 1 4\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2 1 4'\nassert solution('2 1') == '1 1 2'\nassert solution('1') == '1 1 1'"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"1 1 1\"\nassert solution(\"O 2\") == \"2 1 2\"\nassert solution(\"E 2\") == \"2 2 2\"\nassert solution(\"I 5\") == \"1 5 5\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nO 3\\nE 1\\n') == '2 3 1'\nassert solution('2\\nE 4\\nI 1\\n') == '2 1 1'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"2 1 4\""
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nO 4\nO 2\nO 2\nO 8\nE 1\nE 1\nI 2\nI 1\n''') == '1 2 4'\nassert solution('''\nO 1\nO 1\nO 1\nO 1\nI 2\nI 2\nI 2\nI 2\nE 1\nE 1\nE 1\nE 1\n''') == '4 1 2'\nassert solution('''\nO 1\nO 2\nO 2\nO 2\nI 2\nI 2\nI 2\nI 2\nE 1\nE 1\nE 1\nE 1\n''') == '3 1 4'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14') == '4'\n\n'''\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14') == '4'\nassert solution('3\\n1 1 1\\n1 2 1\\n1 3 1') == '2'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 8\\n\"\n    \"2 1 4 5\\n\"\n    \"5 1 12 4\\n\"\n    \"5 5 9 10\\n\"\n    \"1 6 4 10\\n\"\n    \"2 11 7 14\"\n) == \"4\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == \"4\"\nassert solution('''\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == \"1\"\nassert solution('''\n4 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == \"1\"\nassert solution('''\n3 5\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == \"2\"\n'''\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '4'\n\nassert solution('''\n6 5\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '6'\n\nassert solution('''\n20 20\n5 1 6 8 1 1 2 1 2 1 2 1 2 1\n1 2 1 2 1 3 5 4 1 1 1 2 1 3\n1 1 4 2 1 3 1 4 1 1 1 1 2 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 8') == '4'\nassert solution('5 1 12 4') == '1'\nassert solution('5 5 9 10') == '4'\nassert solution('1 6 4 10') == '3'\nassert solution('2 11 7 14') == '2'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 10\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2 2\n1 1\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n8 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 5\n1 2 5\n1 3 6\n1 4 4\n1 5 6\n2 5 6\n3 5 6\n4 5 5\n5 5 5\n6 5 6\n7 5 5\n8 5 5\n9 5 5\n10 5 5\n11 5 5\n12 5 5\n13 5 5\n14 5 5\n15 5 5\n16 5 5\n17 5 5\n18 5 5\n19 5 5\n20 5 5\n21 5 5\n22 5 5\n23 5 5\n24 5 5\n25 5 5\n26 5 5\n27 5 5\n28 5 5\n29 5 5\n30 5 5\n31 5 5\n32 5 5\n33 5 5\n34 5 5\n35 5 5\n36 5 5\n37 5 5\n38 5 5\n39 5 5\n40 5 5\n41 5 5\n42 5 5\n43 5 5\n44 5 5\n45 5 5\n46 5 5\n47 5 5\n48 5 5\n49 5 5\n50 5 5\n51 5 5\n52 5 5\n53 5 5\n54 5 5\n55 5 5\n56 5 5\n57 5 5\n58 5 5\n59 5 5\n60 5 5\n61 5 5\n62 5 5\n63 5 5\n64 5 5\n65 5 5\n66 5 5\n67 5 5\n68 5 5\n69 5 5\n70 5 5\n71 5 5\n72 5 5\n73 5 5\n74 5 5\n75 5 5\n76 5 5\n77 5 5\n78 5 5\n79 5 5\n80 5 5\n81 5 5\n82 5 5\n83 5 5\n84 5 5\n85 5 5\n86 5 5\n87 5 5\n88 5 5\n89 5 5\n90 5 5\n91 5 5\n92 5 5\n93 5 5\n94 5 5\n95 5 5\n96 5 5\n97 5 5\n98 5 5\n99 5 5\n100 5 5\n101 5 5\n102 5 5\n103 5 5\n104 5 5\n105 5 5\n106 5 5\n107 5 5\n108 5 5\n109 5 5\n110 5 5\n111 5 5\n112 5 5\n113 5 5\n114 5 5\n115 5 5\n116 5 5\n117 5 5\n118 5 5\n119 5 5\n120 5 5\n121 5 5\n122 5 5\n123 5 5\n124 5 5\n125 5 5\n126 5 5\n127 5 5\n128 5 5\n129 5 5\n130 5 5\n131 5 5\n132 5 5\n133 5 5\n134 5 5\n135 5 5\n136 5 5\n137 5 5\n138 5 5\n139 5 5\n140 5 5\n141 5 5\n142 5 5\n143 5 5\n144 5 5\n145 5 5\n146 5 5\n147 5 5\n148 5 5\n149 5 5\n150 5 5\n151 5 5\n152 5 5\n153 5 5\n154 5 5\n155 5 5\n156 5 5\n157 5 5\n158 5 5\n159 5 5\n160 5 5\n161 5 5\n162 5 5\n163 5 5\n164 5 5\n165 5 5\n166 5 5\n167 5 5\n168 5 5\n169 5 5\n170 5 5\n171 5 5\n172 5 5\n173 5 5\n174 5 5\n175 5 5\n176 5 5\n177 5 5\n178 5 5\n179 5 5\n180 5 5\n181 5 5\n182 5 5\n183 5 5\n184 5 5\n185 5 5\n186 5 5\n187 5 5\n188 5 5\n189 5 5\n190 5 5\n191 5 5\n192 5 5\n193 5 5\n194 5 5\n195 5 5\n196 5 5\n197 5 5\n198 5 5\n199 5 5\n200 5 5\n201 5 5\n202 5 5\n203 5 5\n204 5 5\n205 5 5\n206 5 5\n207 5 5\n208 5 5\n209 5 5\n210 5 5\n211 5 5\n212 5 5\n213 5 5\n214 5 5\n215 5 5\n216 5 5\n217 5 5\n218 5 5\n219 5 5\n220 5 5\n221 5 5\n222 5 5\n223 5 5\n224 5 5\n225 5 5\n226 5 5\n227 5 5\n228 5 5\n229 5 5\n230 5 5\n231 5 5\n232 5 5\n233 5 5\n234 5 5\n235 5 5\n236 5 5\n237 5 5\n238 5 5\n239 5 5\n240 5 5\n241 5 5\n242 5 5\n243 5 5\n244 5 5\n245 5 5\n246 5 5\n247 5 5\n248 5 5\n249 5 5\n250 5 5\n251 5 5\n252 5 5\n253 5 5\n254 5 5\n255 5 5\n256 5 5\n257 5 5\n258 5 5\n259 5 5\n260 5 5\n261 5 5\n262 5 5\n263 5 5\n264 5 5\n265 5 5\n266 5 5\n267 5 5\n268 5 5\n269 5 5\n270 5 5\n271 5 5\n272 5 5\n273 5 5\n274 5 5\n275 5 5\n276 5 5\n277 5 5\n278 5 5\n279 5 5\n280 5 5\n281 5 5\n282 5 5\n283 5 5\n284 5 5\n285 5 5\n286 5 5\n287 5 5\n288 5 5\n289 5 5\n290 5 5\n291 5 5\n292 5 5\n293 5 5\n294 5 5\n295 5 5\n296 5 5\n297 5 5\n298 5 5\n299 5 5\n300 5 5\n301 5 5\n302 5 5\n303 5 5\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 8') == '4'\nassert solution('5 1 12 4') == '5'\nassert solution('5 5 9 10') == '6'\nassert solution('1 6 4 10') == '5'\nassert solution('2 11 7 14') == '4'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14') == '4'\nassert solution('8 8\\n1 1 4 5\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\\n1 1 1 1 1\\n6 8 8 8\\n3 1 2 3 4') == '5'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 4 5\") == \"4\"\nassert solution(\"5 1 12 4\") == \"5\"\nassert solution(\"5 5 9 10\") == \"5\"\nassert solution(\"1 6 4 10\") == \"6\"\nassert solution(\"2 11 7 14\") == \"14\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\n\"\"\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '7.081921'\nassert solution('9 99 9 99 9') == '6.252927'\nassert solution('9.99 9999.99 9999.99') == '4.781141'\nassert solution('9.99999 99999.99 9999.99') == '4.996464'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 99 9') == '9.585073'"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"99 9 999 9999\") == \"99.00\"\nassert solution(\"9 99 9 99 9\") == \"9.00\""
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 99 9') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.722222'\n\"\"\""
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"9 9 999 9999\") == \"9.585073\"\nassert solution(\"99 99 9999 9999\") == \"10.23915\"\nassert solution(\"99 99 999 999\") == \"10.23915\"\nassert solution(\"99.99 9999.99\") == \"10.23915\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"99 9 999 9\") == \"9.585073\"\nassert solution(\"-99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"-99.99 -99.99 9999.99\") == \"9.585073\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 20') == '12.74 127.83'\nassert solution('8 10') == '12.74 127.83'\nassert solution('1 20') == 'impossible'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 30\\n2 10 20 2 24 18 28 10') == '12.74 127.83'\nassert solution('20 20 20 20 20 20 20\\n2 10 10 10 10 10 10') == '12.74 12.74'\nassert solution('20 20 20 20 20 20 20\\n2 10 10 10 10 10 10') == 'impossible'\nassert solution('20 20 20 20 20 20 20\\n2 10 10 10 10 10 10') == 'impossible'\n\n---\nSample Input:\n20 30\n2 10 20 2 24 18 28 10\n20 10 20 10 10 10 10\nSample Output:\n12.74 127.83\nimpossible\n---\nSample Input:\n20 30\n2 10 20 2 24 18 28 10\n20 10 20 10 10 10 10\nSample Output:\n12.74 12.74\nimpossible\n---\nSample Input:\n20 30\n2 10 20 2 24 18 28 10\n20 10 20 10 10 10 10\nSample Output:\n12.74 12.74\nimpossible\n---\nSample Input:\n20 30\n2 10 20 2 24 18 28 10\n20 10 20 10 10 10 10\nSample Output:\n12.74 12.74\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\n12.74 12.74\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\n12.74 12.74\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\n12.74 12.74\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\n12.74 12.74\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\n12.74 12.74\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\n12.74 12.74\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\n12.74 12.74\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\n12.74 12.74\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output:\nimpossible\nimpossible\n---\nSample Input:\n20 20 20 20 20 20 20\n2 10 10 10 10 10 10\nSample Output"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''20 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83'\nassert solution('''\n8 10\n1 9 2 3 4 5 6 7\n1 10 1 8\n1 9 1 8\n1 10 1 8\n1 10 1 8\n1 9 1 8\n1 10 1 8\n1 11 1 8\n1 12 1 8\n1 13 1 8\n1 14 1 8\n1 15 1 8\n1 16 1 8\n1 17 1 8\n1 18 1 8\n''') == '10.35 11.61 12.81 13.65 14.55 15.55 16.55 17.55 18.55'\n\n\n2\n2\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n1 3 1\n2 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n1 3 1\n1 2 1\n2 1 1\n2 2 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n2 1 1\n1 2 1\n1 3 1\n2 1 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3 1\n1 2 1\n2 1 1\n1 3"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 30') == '12.74 127.83'\nassert solution('20 30') == '12.74 127.83'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n20 30\\n2 10 20 2 24 18 28 10\\n') == '12.74 127.83'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''20 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83'''"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('20 30\\n2 10 20 2 24 18 28 10') == '12.74 127.83'\nassert solution('40 30\\n2 10 20 2 24 18 28 10') == 'impossible'\nassert solution('30 40\\n2 10 20 2 24 18 28 10') == '12.74 127.83'\n\"\"\"\n\nfrom math import pi"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''20 30\n2 10 20 2 24 18 28 10''') == '12.74 127.83'\nassert solution('''10 20\n2 10 20 2 24 18 28 10''') == 'impossible'\nprint('all tests passed')\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''20 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"20 30\") == \"12.74 127.83\"\nassert solution(\"20 10\") == \"2.9 12.75\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '2\\n110\\n6'\n    ) == '0116'\nassert solution(\n    '1\\n00\\n0'\n    ) == '00'\nassert solution(\n    '2\\n001\\n100'\n    ) == '0001'\nassert solution(\n    '2\\n01\\n10'\n    ) == '0110'\nassert solution(\n    '2\\n10\\n0'\n    ) == '0110'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n110\\n') == '0116'\nassert solution('5\\n000\\n0\\n1\\n2\\n4\\n1\\n4\\n4\\n') == '0'\nassert solution('8\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n') == '00100'\nassert solution('10\\n000\\n000\\n000\\n000\\n000\\n000\\n000\\n') == '0000'\n\"\"\"\nimport sys"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n110\n6\n''') == '0116'\nassert solution('''\n2\n110\n9\n''') == '0279'\nassert solution('''\n3\n000\n111\n''') == '0009'\nassert solution('''\n10\n11234\n56789\n''') == '112356789'\nassert solution('''\n10\n1234\n56789\n''') == '567891234'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n5\n1234\n1\n12\n3\n5\n\"\"\") == \"012345\""
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n110\n6\n''') == '0116'\n\nassert solution('''\n2\n1425\n2\n''') == '1425'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('110') == '0116'\nassert solution('1') == '1'\nassert solution('100') == '100'\nassert solution('1000') == '1000'\n\"\"\"\nn = int(input())\nprices = input()\nprices = list(map(int, prices.split()))\nprices.sort()\nfor i in range(len(prices)-1, 0, -1):\n    if prices[i] <= prices[i-1]:\n        prices.pop(i)\nfor i in range(len(prices)):\n    prices[i] = str(prices[i])\nprices.reverse()\n\nsolution = \"\".join(prices)\n\nprint(solution)\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n110\\n6') == '0116'\nassert solution('4\\n1\\n1\\n1\\n1') == '111'\nassert solution('4\\n2\\n3\\n2\\n1') == '211'\nassert solution('4\\n1\\n2\\n1\\n3') == '312'\nassert solution('4\\n1\\n3\\n2\\n1') == '312'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"0116\""
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\\\n1\n00\n5\n\"\"\") == \"0116\"\nassert solution(\"\"\"\\\n5\n00\n0\n\"\"\") == \"00010\"\nassert solution(\"\"\"\\\n8\n1\n1\n\"\"\") == \"00111\"\nassert solution(\"\"\"\\\n6\n0\n0\n\"\"\") == \"00010\"\nassert solution(\"\"\"\\\n9\n1\n1\n\"\"\") == \"11111\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n110\\n6') == '0116'\nassert solution('2\\n110\\n100\\n6\\n9\\n8') == '0116\\n9100'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8 3\n4 4 4''') == '0 2 4'"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"5\\n\"\n    \"5 2 4 1 5\"\n) == \"0 1 2 4 5\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n4 5 4\n6 7 6\n8 9 8''') == '0 2 4'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n8 3\n4 4 4\n\"\"\") == \"\"\"0 2 4\n\"\"\".strip()\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n4 4\\n1 1 4') == '2 4 2'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 3') == '0 1 2'\nassert solution('2 2 2') == '0 2 2'\nassert solution('2 2 2 2') == '0 2 2 2'\nassert solution('2 2 2 2 2') == '0 2 2 2 2'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 3') == '0 2 4', \"123\"\nassert solution('4 4') == '0 2 3', \"123\"\nassert solution('20 50') == '0 2 7 10 13 14 18 20 25 27 30 31 32 36 37 39 40 42 44 45 46 48 49 50 51 55 57 60 61 63 64 65 67 68 69 71 72 73 75 76 78 79 80 82 84 85 86 87 88 90 92 94 96 98 100 101 102 103 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 1012\n\n'''\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 3\") == \"0 2 4\"\nassert solution(\"10 0 0 0\") == \"0\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\n4 4 4\") == \"0 2 4\"\nassert solution(\"5 2\\n4 4 4\") == \"0 0 2\"\nassert solution(\"10 10\\n3 3 3\") == \"3 3 3\"\nassert solution(\"10 10\\n3 3 3\") == \"0 0 0\"\nassert solution(\"10 10\\n6 6 6\") == \"0 0 0\""
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8 3\n4 4 4\n''') == '0 2 4'\n\nassert solution('''\n5 5\n3 5 3\n''') == '2 4 4 3'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\nassert solution('''3\n4\n2 2 2\n1 1 2\n3 3\n''') == 'possible'\n\nimport sys\nimport math\n\nclass BitVector:\n    def __init__(self, size):\n        self.size = size\n        self.arr = []\n        for i in range(self.size):\n            self.arr.append(False)\n\n    def set_bit(self, n):\n        if n > self.size:\n            raise Exception(\"Index is greater than length of vector\")\n        self.arr[n] = True\n\n    def clear_bit(self, n):\n        if n > self.size:\n            raise Exception(\"Index is greater than length of vector\")\n        self.arr[n] = False\n\n    def get_bit(self, n):\n        if n > self.size:\n            raise Exception(\"Index is greater than length of vector\")\n        return self.arr[n]\n\n    def set_bits(self, n, val):\n        if n > self.size:\n            raise Exception(\"Index is greater than length of vector\")\n        for i in range(n):\n            self.arr[i] = val\n            \n    def clear_bits(self, n):\n        if n > self.size:\n            raise Exception(\"Index is greater than length of vector\")\n        for i in range(n):\n            self.arr[i] = False\n\n    def get_bits(self, n):\n        if n > self.size:\n            raise Exception(\"Index is greater than length of vector\")\n        return self.arr[:n]\n    \n    def size(self):\n        return self.size"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\\n\"\n) == \"impossible\"\nassert solution(\n    \"5\\n7\\n1 1 3 3 4 2 3\\n1 1 1 1 2 3 2\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1 1 1 1 2 3\\n1 1"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'impossible', 'impossible'\nassert solution('2') == 'possible', 'possible'\nassert solution('3') == 'impossible', 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n4\n2 1 2\n4 2 5\n2 4\nSample Output:\npossible\n''') == 'possible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\nprint(solution('''4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n'''))"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\nassert solution('''\n1\n1\n1\n1\n1\n1\n''') == 'possible'\nassert solution('''\n4\n4\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\nassert solution('''\n1\n1\n1\n1\n1\n1\n''') == 'possible'\nassert solution('''\n5\n8\n2 2 3 2 2 4 2 2\n2 2 1 1 1 2 2 2 2\n2 2 1 1 1 2 2 2 2\n2 2 1 1 1 2 2 2 2\n1 1 1 1 1 2 2 2 2\n1 1 1 1 1 2 2 2 2\n1 1 1 1 1 2 2 2 2\n''') == 'possible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"impossible\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"2\") == \"possible\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"4.00000\"\n\nassert solution(\"\"\"\n3\n3 4\n2 5\n1 8\n\"\"\") == \"inf\"\n\nassert solution(\"\"\"\n1\n0\n0\n\"\"\") == \"1.00000\"\n\nassert solution(\"\"\"\n5\n0 0\n0 10\n3 4\n3 5\n2 4\n4 4\n2 5\n1 5\n\"\"\") == \"7.00000\"\n\nassert solution(\"\"\"\n2\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"4.00000\""
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n0 10') == '4.00000'\nassert solution('2\\n0 0\\n2 3\\n4 4') == 'impossible'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"4.00000\"\n\nassert solution(\"\"\"\n0 0\n0 10\n2\n3 0\n3 10\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n1\n1\n2\n2\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3\n10\n4\n0\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n8\n0 0\n0 10\n2\n4 10\n4 0\n6 0\n6 10\n8 10\n8 0\n\"\"\") == \"8.00000\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Impossible\"\nassert solution(\"4\") == \"5.00000\"\nassert solution(\"1\") == \"Impossible\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 0\\n0 10\\n2\"\n) == \"4.00000\"\nassert solution(\n    \"2 0\\n0 10\\n2\"\n) == \"Impossible\"\nassert solution(\n    \"0 0\\n0 10\\n2\"\n) == \"2.00000\"\nassert solution(\n    \"0 0\\n0 10\\n2\"\n) == \"Impossible\"\nassert solution(\n    \"0 0\\n0 10\\n0\"\n) == \"0.00000\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0 0\n0 10\n2\n4 10\n4 0\n''') == '4.00000'\nassert solution('''\n0 0\n0 10\n2\n4 10\n4 0\n''') == 'impossible'\n\n------Task------\nWrite a function `solution` that, given a string representation of the coordinates of places in the path and the path's lengths, returns the minimal delivery time.\n\nFor example:\n\nsolution(\"2 4 0 0 2\")\nreturns 4.0\n\nsolution(\"2 4 0 0 1\")\nreturns impossible\n\nsolution(\"2 4 1 4 1\")\nreturns 5.0\n\nsolution(\"1 1 1 1 1\")\nreturns impossible\n\nsolution(\"1 1 1 1 1\")\nreturns impossible\n\n------Input Format------\nThe input to the function/method consists of two lines. The first line contains an integer $n$, the number of places. The second line contains n space-separated integers $x_ i$, $y_ i$, where $0 \\leq x_ i, y_ i \\leq 30000$.\n\n------Output Format------\nThe output of the function/method should be a float, that is the minimal time needed to deliver the package along the optimal path.\n\nIf there is no possible path, return `impossible`.\n\n------Example------\nInput\n2\n0 0\n0 10\n2\n4 10\n4 0\nOutput\n4.00000\n\nInput\n2\n1 1 1 1 1\n1 1 1 1 1\n\nOutput\nimpossible\n\n------Precondition------\nAll inputs are valid, i.e. no empty spaces or negative numbers, and the number of places is at most $50000$.\n\n------Constraints------\nThere are no loops, and the path can only be traversed without stopping.\n\n------Test Cases------\nInput:\n    3\n    0 0\n    0 10\n    2\n    4 10\n    4 0\n    Output:\n    4.00000\nInput:\n    3\n    0 0\n    0 10\n    2\n    4 10\n    4 0\n    Output:\n    impossible\n'''"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"4.00000\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n0 0\n0 10\n2\n4 10\n4 0\n''') == '5.00000'\nprint(solution('''\n5\n1 0\n2 3\n3 2\n4 1\n5 4\n'''))"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0\\n0 10\\n2\\n4 10\\n4 0\\n') == '4.00000'\nassert solution('1\\n0\\n1\\n') == 'Impossible'\nassert solution('1\\n0\\n1\\n1\\n') == 'Impossible'\nassert solution('10\\n0\\n10\\n0\\n10\\n0\\n10\\n0\\n10\\n') == 'Impossible'\nassert solution('10\\n0\\n10\\n0\\n10\\n0\\n10\\n0\\n10\\n10\\n10\\n') == 'Impossible'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'Impossible'\nassert solution('1 1') == '1.00000'\nassert solution('6') == '4.00000'\nassert solution('6 4 10 6 8') == '6.0000'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 4 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n6 2 2\n1 1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 3 3\n1 1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n10 10 10\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\nSample Input:\n4 3 1\n1 2\n3 4\n1 3\n2 4\nSample Output:\n0\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 5\") == \"1\"\n\nassert solution(\"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\") == \"0\"\n\nassert solution(\"7 7 8\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n2 4\\n4 1\\n4 3\\n2 2\\n3 2\") == \"1\"\n\"\"\"\nimport math"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 3\\n1 1\\n1 3\\n3 1') == '1'\nassert solution('3 4 5\\n2 1\\n1 3\\n3 2') == '0'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1', 'First'\nassert solution('''5 4 8\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n''') == '0', 'Second'\nassert solution('''5 5 4\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n''') == '1', 'Third'\nassert solution('''5 5 5\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n''') == '0', 'Fourth'\nassert solution('''20 20 20\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n5 8\n6 6\n6 7\n6 8\n7 7\n7 8\n8 8\n''') == '1', 'Fifth'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n') == '1', \"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\nassert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n2 2\n''') == '0'\nassert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n1 2\n''') == '0'\nassert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n1 2\n1 2\n''') == '1'\n'''\nSample Output:\n'''"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '1 3'\nassert solution('''\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '1 0'\nassert solution('''\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == 'impossible'\nassert solution('''\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2\n2 4\n3 4\n''') == '1 3'\n\nassert solution('''\n2\n0 2\n1 2\n''') == '0 1'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\") == \"5 3\\n1 0\\n2 4\\n\"\nassert solution(\"2 2\\n0 1\\n1 2\\n2 1\\n1 1\\n2 2\\n2 1\\n0 2\\n1 0\\n\") == \"2 0\\n1 1\\n\""
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == '5 3\\n1 0\\n2 4\\n'\nassert solution('3 3\\n1 0\\n2 4\\n') == '3 3\\n1 0\\n2 4\\n'\nassert solution('4 3\\n1 2\\n3 3\\n') == '4 3\\n1 2\\n3 3\\n'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '5 3'\nassert solution('7 5') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 6') == '3 1\\n0 2\\n0 1\\n1 2\\n3 3'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5\\n') == '1 3\\n'\nassert solution('2 5\\n') == '1 2\\n'\nassert solution('4 5\\n') == '2 3\\n'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '5 3\\n1 0\\n2 4'\nassert solution('''\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == 'impossible'\n'''\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '5 3'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == '5 3'\nassert solution('5 6\\n1 0\\n2 4\\n1 2\\n4 3') == 'impossible'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"1 2\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"4 3\") == \"2 1\"\nassert solution(\"4 5\") == \"1 2 3 4\"\nassert solution(\"4 1\") == \"2\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 1') == '2'\nassert solution('5 1') == '1 4'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3 2\\n3 4\\n0 1') == '2\\n1 2\\n1 3\\n1 4\\n'\nassert solution('5\\n4 2\\n3 4\\n0 1\\n0 2\\n2 3') == '3\\n2 1\\n2 2\\n2 3\\n1 3\\n'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2\\n1 2'\nassert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2\\n1 2'\n'''\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"3 1\") == \"1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2'\n'''\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2\n2\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '2'\nassert solution('1 1') == '1'\nassert solution('2 2') == '1'\nassert solution('3 1') == '1 2'\nassert solution('1 2') == '1 2'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 4') == '1 3'\nassert solution('8 2') == '1 3 5 6 7 8'\nassert solution('10 3') == '2 4 5 6 7 8 9'\nassert solution('100 100') == '99'\n\nn, d = map(int, input().split())\ns = set()\nfor _ in range(n):\n    x, y = map(int, input().split())\n    s.add((x, y))\n\nans = set()\nfor i in range(n):\n    for j in range(i+1, n):\n        if (x, y) in s:\n            ans.add((x, y))\n\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2\\n1 2'\n\"\"\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '1'\nassert solution('3 5') == '1'\nassert solution('5 2') == '2'\nassert solution('6 2') == '2'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"1\"\nassert solution(\"5 3\") == \"2\""
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 4\n5 2\n4 3\n4 1\n3 2\n2 1\n\"\"\") == \"3\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('10 2\\n1 3 5 7 9 11 13 15 17 16\\n') == '1'"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"10 2\n1 3 5 7 9 11 13 15 17 16\n\"\"\") == \"1\"\nassert solution(\"\"\"100 10\n1 1 1 1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '1'\nassert solution('100 2') == '100'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 2') == '1'\nassert solution('5 3') == '0'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n') == '0'\nassert solution('2\\n3 2\\n') == '1'\nprint('Congratulations, have fun using anaconda env.')\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n1 3 5 7 9 11 13 15 17 16\n''') == '1'\nassert solution('''2\n1 3 5 7 9 11 13 15 17 16\n''') == '1'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n''') == '4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7''') == '7 4'\nassert solution('''5\n1 5\n2 4\n3 3\n4 4\n5 4''') == '5 5'\nassert solution('''1\n1 2\n2 1\n2 2''') == '1 2'\nassert solution('''5\n1 5\n2 4\n3 3\n4 4\n5 4''') == '5 5'\n'''\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\nABABAABDBC\n0 1\n''') == '2 4'\nassert solution('''\n7\nAAABAABDBC\n0 1\n''') == '2 4'\nassert solution('''\n10\nAAABAABDBC\n0 1\n''') == '2 4'\nassert solution('''\n8\nAAABAABDBC\n0 1\n''') == '2 4'\n'''\n    print(f'{\"=\" * 5}[ans]{\"=\" * 5}')\n    print(f'{solution(input())}')\n'''"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7''') == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7''') == '7 4'\n\"\"\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\\n') == '7 4'\n\n\"\"\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 5\\n'+\n                    'ACDBB\\n'+\n                    '5 6\\n'+\n                    '8 9\\n'+\n                    '4 13\\n'+\n                    '1 10\\n'+\n                    '7 4\\n') == '7 4'\n\n\"\"\""
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 5') == '10 9'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7 5\") == \"7 4\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7''') == '''7 4'''\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\nABDCDBB\nBABCD\n''') == '8 6'\nassert solution('''\n1\nABDCDBB\n''') == '4 6'\nassert solution('''\n1\nABDCDBB\n''') == '4 6'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\\\\\" \\\\\\\" \\\\\\\" \\\\\\\" \\\\\\\" \\\\\\\" \\\\\\\" \\\\\\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\\n\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\""
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nassert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"10 LET A = 1\\n20 PRINT 'HELLO THERE'\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5'\nassert solution(\n    \"10 LET A = 1\\n20 PRINT 'HELLO THERE'\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n\nInput:\n2\n5 LET A = 5\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n70 LET A = A + 1\n80 PRINT \"HELLO THERE \"\n90 PRINTLN A\n100 LET A = A + 1\n110 IF A <= 5 THEN GOTO 20\n120 PRINTLN \"DONE\"\n130 LET A = A + 1\n140 PRINT \"HELLO THERE \"\n150 PRINTLN A\n160 LET A = A + 1\n170 IF A <= 5 THEN GOTO 20\n180 PRINTLN \"DONE\"\n190 LET A = A + 1\n200 PRINT \"HELLO THERE \"\n210 PRINTLN A\n220 LET A = A + 1\n230 IF A <= 5 THEN GOTO 20\n240 PRINTLN \"DONE\"\n250 LET A = A + 1\n260 PRINT \"HELLO THERE \"\n270 PRINTLN A\n280 LET A = A + 1\n290 IF A <= 5 THEN GOTO 20\n300 PRINTLN \"DONE\"\n210\n220\n230\n240\n250\n260\n270\n280\n290\n300\n310\n320\n330\n340\n350\n370\n380\n390\n400\n410\n420\n430\n440\n450\n460\n470\n480\n490\n500\n510\n520\n530\n540\n550\n560\n570\n580\n590\n600\n610\n620\n630\n640\n650\n660\n670\n680\n690\n700\n710\n720\n730\n740\n750\n760\n770\n780\n790\n800\n810\n820\n830\n840\n850\n860\n870\n880\n900\n910\n920\n930\n940\n950\n960\n970\n980\n990\n1000\n1000\n2000\n3000\n4000\n5000\n6000\n7000\n8000\n9000\n10000\n20000\n300000\n4000000\n5000000\n6000000\n7000000\n8000000\n9000000\n100000000\n11000000\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE'\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\\n\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\\n\"\n\nIn the first example, the program will execute and print the value of A when A is set to the value 1. The program will print the value of A when A is set to the value 2, then print the value of A when A is set to the value 3, then print the value of A when A is set to the value 4, then print the value of A when A is set to the value 5. Finally, the program will print the value of A when it is set to the value 5.\n\nFor the second example, the program will print the value of A when A is set to the value 1. Then the program will execute and print the value of A when A is set to the value 2, then print the value of A when A is set to the value 3, then print the value of A when A is set to the value 4, then print the value of A when A is set to the value 5. Finally, the program will print the value of A when it is set to the value 5."
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 10 LET A = 1\\n20 PRINT \") == \"1 10 LET A = 1\\n20 PRINT L\\n1 10 LET A = A + 1\\n20 PRINT L\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\n20 PRINTLN A\\n1 10 LET A = A + 1\\"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 LET A = 1') == 'HELLO THERE 1'\nassert solution('20 PRINT \"HELLO THERE \"') == 'HELLO THERE'\nassert solution('30 PRINTLN A') == 'HELLO THERE'\nassert solution('40 LET A = A + 1') == 'HELLO THERE 2'\nassert solution('50 IF A <= 5 THEN GOTO 20') == 'HELLO THERE'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"\\n') == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nassert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nassert solution('''\n1 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n'''\nSample Input:\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \"NO NO NO\"\n40 LET A = A - 1\n50 IF A >= 1 THEN GOTO 20\n60 PRINTLN \"DONE\"\n20 LET A = 2\n30 PRINT \""
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2\n1 2\n1 3\"\"\") == \"1\"\nassert solution(\"\"\"4\n1 1 1 1\n1 3\n1 3\n2 3\"\"\") == \"5\""
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('3 0 1') == '3'\nassert solution('3 0 1 2') == '4'\nassert solution('3 0 1 2 3') == '6'\nassert solution('3 0 1 2 3 4') == '6'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    3\n    3 0 1\n    0 1\n    ''') == '3'\nassert solution('''\n    4\n    1 0 2 3\n    ''') == '4'\nassert solution('''\n    5\n    1 0 2 3 0\n    0 1\n    ''') == '1'\n'''\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n3 0 1\n0 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 0\n2 0\n''') == '3'\nassert solution('''\n2\n0 1\n1 2\n''') == '3'\nassert solution('''\n3\n2 1 1\n0 1\n2 2\n''') == '4'\nassert solution('''\n3\n1 1 2\n1 2\n2 1\n''') == '5'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n3 0 1\\n0 1') == '2'\nassert solution('2\\n2 1\\n0 1') == '2'\nassert solution('5\\n3 0 1\\n0 1') == '1'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 0\n0 1\n''') == '1', \"incorrect\"\n\nassert solution('''\n2\n0 1\n0 1\n''') == '0', \"incorrect\"\n\nassert solution('''\n3\n0 1\n0 1\n0 1\n''') == '3', \"incorrect\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'RRRRLLRLL'\nassert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRRRLLL'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\") == \"RLR\"\nassert solution(\"5\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\") == \"LLRLLLLLLLLRRRRLRLL\"\nassert solution(\"5\\n1 3\\n3 4\\n4 5\\n3 5\\n5 6\\n5 7\\n6 8\\n7 8\\n8 9\\n9 10\\n10 8\\n8 10\\n9 9\\n9 8\\n8 7\\n7 7\\n7 6\\n6 6\\n5 5\\n5 5\\n5 4\\n4 4\\n4 3\\n3 3\\n3 2\\n2 2\\n2 1\\n1 1\\n1 3\\n3 2\\n2 3\\n1 3\\n\") == \"RLRRRRRLLRLLLLLLRRRLLLLLLRRLLRRRRRLLRLLLLLRRLLLLLLRRRRLLRRLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == \"LLRRRRLL\"\nassert solution('3\\n1 3\\n3 5\\n4 5\\n1 3') == \"impossible\"\nassert solution('1\\n2 5\\n5 3\\n4 3\\n1 3') == \"RRLLLRRRRLLLRRLL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"LLRRRRLL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\") == \"LLRRRRLL\"\nassert solution(\"2\\n3 2\\n4 4\\n1 1\\n1 1\\n2 2\\n3 2\\n3 3\\n1 1\\n1 1\\n2 3\\n4 4\\n3 2\") == \"RRRLLRLRLL\"\nassert solution(\"3\\n3 2\\n4 4\\n1 1\\n1 1\\n2 2\\n3 2\\n3 3\\n1 1\\n1 1\\n2 3\\n4 4\\n3 2\") == \"impossible\""
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([5,1,2,4,3,5,3,4,5,4,2,1,3,5,4,3,3,4,5,4,3,2,1]) == 'LLRRRRLL'\nassert solution([5,1,2,4,3,5,3,4,5,4,3,2,1,3,5,4,3,2,1]) == 'LLRLRLL'\nassert solution([5,1,2,4,3,5,3,4,5,4,3,2,1,3,5,4,3,2,1]) == 'impossible'\nassert solution([5,1,2,4,3,5,3,4,5,4,3,2,1,3,5,4,3,2,1]) == 'LLRRRRLL'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == \"LLRRRRLL\"\nassert solution(\"2\\n\") == \"LLRLRRLR\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'LLRRRRLL'\nassert solution('4\\n1 2\\n2 5\\n1 3\\n3 4\\n3 4\\n3 4\\n') == 'LRLLRRRLL'\nassert solution('6\\n1 2\\n2 5\\n3 4\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\\n5 4\\n5 4\\n') == 'RRLLRLRLLR'\nassert solution('10\\n1 2\\n2 5\\n3 4\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\\n5 4\\n5 4\\n6 7\\n6 8\\n6 8\\n
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"LR\"\nassert solution(\"2 5\") == \"LLLRRRLLLL\"\nassert solution(\"2 3\") == \"RL\"\nassert solution(\"1 3\") == \"RRRRRRRL\"\nassert solution(\"3 5\") == \"RRRRRRRLRLRLRRLLRLLLLLLRLRRRRRLRRRLRRLRRRRLLRLRLRLRRRRLLRLRRRLRRRRRRLLLLLLLLRRRRRRRRLLRLRLRRRRRRRRLLRRRLRRRRRRLLRRRRRLRRRRRRRRRRRRRRLLRRRRRRRRRRRRLLRLRLRLRLRLRLRLRLRRRRRRRRRRRLRLRLRLRLRRRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRRRRLLRRRRRLRLRLRLRRRLRLRLRLRLRLRLRLRLRLRLRRRRLLRLRRRRRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRL"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRRRRLL'\nassert solution('''\n2\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LRLLRLRLL'\nassert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'RRRLLRLLRLLLLRRRLLLLRRRLLRLLRRLLLLRRRLLLLRRRLLRRLLRRLLLLRRLLRLLRRLLRLLRRRRLLLLRRRLLRLLRRLLRRRLLRRLLRLLLLRRRRLLRLLRRLLRLLRRLLLLRRLLRLLRRLLRRRLLRRLRLLLLRRLLRLLRRRRLLRLLRLRLLRRRRLLRRLRRLLRLLRLRRLLRLLRLRRRLRLLRLRRRRLRLLRLRRLLRLRLLRLRLRLLRRLRLRLRLRLRRRLLRLRLRLRLRRRLLRLRLRLRLRLRRRLLRLRLRLRLRRRRRLLRRRRLLRLLRRRRRLRLLRLRLRLRLRLRLRLRRRLLRLRLRLRLRLRRLLRLLRLRRRLLRLRLRLRRRRRLLRRRRLLRLLRRRRLLRLLRRRRRRRLLRLRLRRLLLLRLRLRLRLRLLRRRLRRLRLRLRLRLLRLRLRRLLRRLRLRLRLRLLRRLRLRLLRLRLRLRLRLLLLRLRLRLRLRLRLRLRLRLRLLRLLRLRLRLRLRLRLRRRRRLRRLLRLLRLRLRLRLRLLRLRRRRRRLLRRLRLRLRLRLRLLRRRLRLRLRLRRLLRLLRLRLRLRLRRRRLLRLLRLRLRLRLRLLRLRLRLRLRLRLLRRLLRRRRLLRLLRRRLRLRLLRLRLRLRRLLRRLRLRLRLRLRLRRLLRLRLRLRLRLLRLRLRLRLRLRRLLRRLRLRRRLRLLRRLRLRLRLLRLRLRLRLRLLRRLRLRLRLRLLRLRLRLRLRLRLRLRLRLRLLLRLRLRLRLRLRLRRLLRLLRRRRLLRLLRRRRRRRLLRLRLRLRLRRRLRLRLRLRLRLLRLRLRRLLRRLRLRLRLLRLRLRRLLRLLRRLLRLLRRRRRLLRRLRLRLRLRLRLRLRLRLLRRRRLLRLLRRRRRRRLLRLRLRLRLRLRLRRLLRRRLLRLRLRLRLRLLRLRLRLRLRLRLLLLRRRRRLLRRRRRRLRLLRLRLRRRLRRLLRLRLRLRRRLLRLRLRLRLRLLRRLLRLLRRRLLRRRLLRLRRLRRRLLRLRLRLRLLRRLRLRRLRLLRRLRLRLLRLLRLRLRLLRLRLRLRLLRLLRLRLRRLRLLRRRRLRLLRRLRLRLRRLRLLRLLRLRLRLRLLRRLRLRRLRLLRRRRRRLRRLRLRLRLLRLRLRLRLLRLRLRLRLLRLRLRRLLLRLRLRLRLRLRLRLLRLRLRRLLLRRRLLRLRLRLRRLRLRLRLLRLRLRRRLLRRLRLRLRLRLLRLRLRLRLLLRRRRRLLRLLRLRLRLRLLRRRRRLLRLLRLRLRLRLLRLRLRLRLLRRLRRRRLLRLLRRLLRRLRLLRLRLRLLRRLLRRRLLLRLRLRLRLRLRLRLRLRLRLRLLLRRRLRLLRLLRLRLRLRLLRLRLRLRLLLLRRRLLRLLRLRLRLRLLRLLRRRLLRLLRLRLRLRLRRLLLLRLRLRLRLRRLLRLLRRRLLLRLRLRLRLRLRRLLRLLRRRLLLLRLRLRLRLLRLRLRLRLRLLLLRLRRLLLRLRLRLRLRLLLLRLRRRLLLLLLRRRRLLRLLRRLLRLLRRRRLLRLLLLRLRLRLRLRRLLRLRLRLRLRLLRLRLRRRRRRRRLLRRLRLRLRLRLLRRLRLRLLRLRLRLRLRLLRLRLRRLLRLLRLRLRLRLLRLRLRLRRLLRLLRRLLRLRLRLRLRLLRLRLRLRLRLRLRLLRLLLLRLRLLRLRLRLRLLRLLRLRLRLRRLLLLRLRRLLRLLRLRLRLRLLLLRLRLRRLLRLLRRLLRLLRRRRRLLLLRLRLRLRLLRLRLRLRLRLLRLLRRLLRLLRRLLRLLRRLLLLRRRRRLLRLLRLRLRLRLLRLLRRLLLLRRLRLRLRLLRRRLRLRLRLRLLRLLRLRLRLRLRLLRLRLRLRLRLLLLRLRLRLRLRLRLLRLRLRLRLLRLRLRLRLRLLRLLRLRLRLRRLLLRLRLRLRLRLLRRRRRLRLRRLRLRLRLLRLLRLRLRLRLRLLRLRLRLRRRLLLLRLRLRLRLRLRLRLRLLLRRRRRLLLRRRRRLLRLLRLRLRRRLLLLRLRLRLRLRLLLLRLRRLLLRRRLLRLLRLRLRLRLLLRLRLRLRLRLLLRLRLRLRLLRLLRRRLRLLRLLRRRLRLLRLRLRLRLRLLRLLRRLLRLLRRRLRLLRRLLRLLRRRLLLLRLRLRLRLRLRLRLRLRLRLLRLLRLRLRRLLRLLRRRLRLLRLLRLRLRLLRLLRLRLRLLRLLRRLLLRRLLRLLRLRLLRLRLRRLLLLRLLRRLLRLLRRLLRLLRRRLLRLLRRLLRLLRRRRRLLRLRLRLRLRLLRLLRLRLRRLLRLLRRRLLRLLRLRLRLRLLRRLLRRLLRLLRRRRRLLLLRLRLRLRLRLLLLRLRLRLLLLRLRLRLLLRLRLRLRLRLLRLRLRLRLLLRLRRRRRLLRLLRRLRLRLLR"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1001\\n1017\\n') == '1\\n2011\\n'\nassert solution('2\\n1009 1009\\n') == '2\\n1009'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2\") == \"2\""
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n1009 2011\n1017 2011\n''') == '12011'\n\nassert solution('''\n2\n1009 2011\n1017 2011\n1001 2012\n''') == '22012'\n\nprint(solution('''\n2\n1009 2011\n1017 2011\n1001 2012\n'''))\n\n'''\n4\n1 2\n2 3\n3 4\n'''\n\n'''\n9\n1009 2011\n1017 2011\n1001 2012\n1001 2013\n1005 2014\n1004 2015\n1003 2016\n1002 2017\n1001 2018\n'''\n'''\n5\n1009 2011\n1017 2011\n1001 2012\n1001 2013\n1001 2014\n1005 2015\n1004 2016\n1003 2017\n1002 2018\n1001 2019\n'''\n'''\n5\n1009 2011\n1017 2011\n1001 2012\n1001 2013\n1001 2014\n1005 2015\n1004 2016\n1003 2017\n1002 2018\n1001 2019\n'''\n'''\n6\n1009 2011\n1017 2011\n1001 2012\n1001 2013\n1001 2014\n1005 2015\n1004 2016\n1003 2017\n1002 2018\n1001 2019\n1002 2020\n'''\n'''\n4\n1009 2011\n1017 2011\n1001 2012\n1001 2013\n1001 2014\n1005 2015\n1004 2016\n1003 2017\n1002 2018\n1001 2019\n'''\n'''\n4\n1009 2011\n1017 2011\n1001 2012\n1001 2013\n1001 2014\n1005 2015\n1004 2016\n1003 2017\n1002 2018\n1001 2019\n'''\n'''\n4\n1009 2011\n1017 2011\n1001 2012\n1001 2013\n1001 2014\n1005 2015\n1004 2016\n1003 2017\n1002 2018\n1001 2019\n'''\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2\\n1009 2011\\n1017 2011\"\n) == \"1\\n2011\""
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\\n2011\""
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(samples[0]) == '1'\nassert solution(samples[1]) == '2011'\n\nstdin = '''2\n1001 2012\n1017 2011'''\nprint(solution(stdin))"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1001\\n1019\\n') == '1'\nassert solution('2\\n1001\\n1019\\n') == '1'\nassert solution('3\\n1002\\n1009\\n') == '2'\nassert solution('4\\n1003\\n1004\\n') == '3'\nassert solution('5\\n1006\\n1008\\n') == '4'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1009 2011\\n1017 2011') == '1\\n2011'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\") == \"0 3\"\nassert solution(\"3 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\") == \"0 2\"\nassert solution(\"7 5\\n0 1 100\\n1 2 100\\n1 4 100\\n2 3 100\\n3 5 100\\n4 6 100\\n5 6 100\") == \"4 6\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 4\\n1 2 100\\n0 2 100\\n0 1 100\") == \"0 3\"\nassert solution(\"3 4\\n1 2 100\\n0 2 100\\n0 1 100\") == \"0 1\"\nassert solution(\"3 4\\n0 2 100\\n1 3 100\\n0 1 100\") == \"0 3\"\nassert solution(\"4 4\\n0 2 100\\n0 1 100\\n1 3 100\\n2 3 100\") == \"0 3\"\nassert solution(\"4 4\\n0 2 100\\n0 1 100\\n1 3 100\\n2 3 100\\n0 3\") == \"0 2\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"0 2 3\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('4 3') == '3'\nassert solution('3 3') == '2'"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2 3\\n3 2\\n3 1\\n') == '0 3'\nassert solution('5\\n1 3 4 5\\n0 2 3 4\\n0 3 1 2\\n1 4 0 2\\n2 4 0 1\\n2 5 0 1\\n') == '0 3 4 5'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n\"\"\"\n) == \"0 3\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n\"\"\") == \"0 3\"\n\nassert solution(\"\"\"\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n\"\"\") == \"0 3\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"0 1\"\n\n\"\"\"\n\nn, m = map(int, input().split())\nstations = []\nfor i in range(n):\n    stations.append(list(map(int, input().split())))\n\ntarget = int(input())\n\ntarget_station = []\nfor i in range(n):\n    if i == target:\n        target_station.append(i)\n\nreach_stations = []\nfor i in target_station:\n    reach_stations.append(1)\n    for j in range(m):\n        if i == stations[j][1]:\n            reach_stations[-1] += reach_stations[-1]\n    reach_stations.append(1)\n    for j in range(m):\n        if i == stations[j][0]:\n            reach_stations[-1] += reach_stations[-1]\n    reach_stations.append(1)\n\nreach_stations.sort()\n\nprint(' '.join(map(str, reach_stations)))\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"0 3\"\nassert solution(\"3 3\") == \"0 1 2\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3''') == '0 3'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\nassert solution('''3.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\nassert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\nassert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\nassert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2.0 10.0') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"20\""
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2.0 10.0\") == \"20.00000\"\nassert solution(\"3 3 0 0\") == \"20.00000\"\nassert solution(\"2001 1000 100\") == \"20.00000\"\nassert solution(\"1001 10000 200\") == \"20.00000\"\nassert solution(\"100 0 0\") == \"20.00000\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"20.000000\"\nassert abs(solution() - 20) < 0.000001\nassert abs(solution() - 20) < 0.000001\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n\nassert solution('''0.5 0.1\n0.5 0.1\n0.5 0.1\n0.5 0.1''') == '0.1'\n\"\"\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n0 1 2\\n0 1 3\\n0 2 3') == '4'\nassert solution('5\\n0 2 3 4 5\\n0 2 3 4 5\\n0 2 3 4 5\\n0 2 3 4 5\\n0 2 3 4 5\\n0 2 3 4 5') == '4'\nassert solution('7\\n0 1 3 5 2 4 6\\n0 1 4 2 5 3 6\\n0 2 3 4 5 6 7\\n0 2 3 4 5 6 7\\n0 2 3 4 5 6 7\\n0 2 3 4 5 6 7\\n0 2 3 4 5 6 7\\n0 2 3 4 5 6 7') == '5'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n0 1 3\n0 1 3\n0 1 3\nSample Output:\n0\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '3'\n\nprint(solution('6'))"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n0 2 3 4 5\n0 1 3 4 5\n1 6 5 4 2\n2 6 5 3 2\n1 1 2 3 4 6\n2 1 2 3 4 5''') == '3'\nassert solution('''7\n0 2 3 4 5 6 7\n0 1 3 4 5 6 7\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6 7\n2 1 2 3 4 5 7\n3 1 3 2 2 1''') == '2'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 1 2 3 4 6\n2 2 3 4 5 6\n1 1 2 3 4 6\n2 1 2 3 4 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n0 1 2 3 4 5 6\n0 1 2 3 4 5 6\n1 1 2 3 4 5 6\n2 2 3 4 5 6\n1 1 2 3 4 5 6\n2 1 2 3 4 5 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 1 2 3 4 6\n2 1 2 3 4 5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 1 2 3 4\\n0 1 2 3 4 5\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == \"4\"\nassert solution(\"5\\n0 1 2 3 4\\n0 1 2 3 4 5\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == \"4\"\nassert solution(\"5\\n0 1 2 3 4\\n0 1 2 3 4 5\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == \"4\"\nassert solution(\"5\\n0 1 2 3 4\\n0 1 2 3 4 5\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == \"3\"\nassert solution(\"5\\n0 1 2 3 4\\n0 1 2 3 4 5\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\") == \"3\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 1 3 4 5\\n2 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == \"4\"\nassert solution('3 2 1 4 5 6\\n2 1 3 4 5 6\\n1 1 2 3 4 5\\n2 1 3 4 5 6\\n1 1 1 1 1 1\\n1 1 1 2 3 4 5\\n') == \"4\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n1 2 3 4 5 6\n1 1 3 4 5 6\n1 1 2 3 4 5\n1 2 3 4 5 6\n1 2 2 3 4 5\n1 1 3 4 5 6\n2 1 2 3 4 5 6\n1 1 2 3 4 5 6\n2 1 2 3 4 5 6\n1 1 2 3 4 5 6\n2 1 2 3 4 5 6\n1 1 1 2 3 4 5 6\n1 1 1 1 1 1 1 1\n''') == '4'\nassert solution('''\n10\n4 1 2 3 6 5 2 4 7 9 3 7 2 6 5 8 6 7\n1 5 9 6 5 2 1 2 3 4 6 6 6 2 4 7\n1 1 4 5 6 8 1 9 3 8 4 2 2 6 3\n1 2 4 4 1 5 9 6 7 2 3 6 8 3 6\n1 1 7 3 2 3 2 2 5 6 4 4 8 6\n1 1 7 3 2 3 2 2 5 6 4 4 8 6\n1 1 4 5 6 8 1 9 3 8 4 2 2 6\n1 1 4 5 6 8 1 9 3 8 4 2 2 6\n1 1 4 5 6 8 1 9 3 8 4 2 2 6\n1 1 4 5 6 8 1 9 3 8 4 2 2 6\n1 2 1 4 5 6 8 1 9 3 8 4 2 2 6\n1 1 4 5 6 8 1 9 3 8 4 2 2 6\n1 2 1 4 5 6 8 1 9 3 8 4 2 2 6\n1 2 1 4 5 6 8 1 9 3 8 4 2 2 6\n1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 1 1 1 7 3 2 3 2 2 5 6 4 4 8\n1 2 1 4 5 6 8 1 9 3 8 4 2 2 6\n1 1 1 4 5 6 8 1 9 3 8 4 2 2 6\n1 1 1 1 4 5 6 8 1 9 3 8 4 2 2 6\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\\n1 2 3\\n1 2 3\\n\") == \"4\"\nassert solution(\"3\\n3 5 6\\n1 2 3\\n1 2 3\\n1 2 3\\n\") == \"4\"\nassert solution(\"4\\n2 3 4\\n1 1\\n2 2\\n3 1\\n4 2\\n\") == \"4\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 1\n1 2 3\n2 3 4\n3 4 5''') == '4'\nassert solution('''10\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n5 6 7 8\n6 7 8 9\n7 8 9 10\n8 9 10 11\n9 10 11 12\n10 11 12 13\n11 12 13 14\n12 13 14 15\n13 14 15 16\n14 15 16 17\n15 16 17 18\n16 17 18 19\n17 18 19 20\n18 19 20 21\n19 20 21 22\n20 21 22 23\n21 22 23 24\n22 23 24 25\n23 24 25 26\n24 25 26 27\n25 26 27 28\n26 27 28 29''') == '28'"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7''') == '4'\nassert solution('''6\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n5 5 6 7''') == '7'\nassert solution('''12\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n5 5 6 7\n6 5 6 7\n7 5 6 7\n8 5 6 7\n9 5 6 7\n10 5 6 7\n11 5 6 7\n12 5 6 7''') == '31'\nassert solution('''20\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n5 5 6 7\n6 5 6 7\n7 5 6 7\n8 5 6 7\n9 5 6 7\n10 5 6 7\n11 5 6 7\n12 5 6 7\n13 5 6 7\n14 5 6 7\n15 5 6 7\n16 5 6 7\n17 5 6 7\n18 5 6 7\n19 5 6 7\n20 5 6 7''') == '83'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\"\n\"\"\""
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\n0 0\n0 1\n0 2\n0 3\n0 4\n1 5\n2 6\n3 7\n4 8\n5 9\n6 10\n7 11\n8 12\n9 13\n10 14\n''') == '4'\nassert solution('''\n5\n0 1\n0 2\n0 3\n1 4\n2 5\n''') == '4'\nassert solution('''\n5\n0 1\n0 2\n0 3\n1 4\n2 5\n''') == '3'\nassert solution('''\n5\n0 1\n0 2\n0 3\n1 4\n2 5\n''') == '2'\nassert solution('''\n5\n0 1\n0 2\n0 3\n1 4\n2 5\n''') == '1'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n5 5 6 7 8\n''') == '4'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6') == '4'\nassert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6') == '7'\nassert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n2 2\\n1 2\\n1 2') == '2'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\\n') == '4'\nassert solution('10\\n1 1\\n1 2 2 3 3 4 4 5 5 6\\n2 3 4 4 5 5 6 6 7\\n3 4 4 5 5 6 7 7 8\\n4 5 5 6 7 8 9 9 10\\n5 5 6 7 8 9 9 10 10 11\\n6 6 7 8 9 9 10 11 12\\n7 7 8 9 9 10 11 12 13\\n8 8 9 9 10 11 12 13 14\\n9 9 10 11 12 13 14 15\\n10 10 11 12 13 14 15 16\\n11 11 12 13 14 15 16 17\\n12 12 13 14 15 16 17 18\\n13 13 14 15 16 17 18 19\\n14 14 15 16 17 18 19 20\\n15 15 16 17 18 19 20 21\\n16 16 17 18 19 20 21 22\\n') == '21'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '4'\nassert solution('4') == '3'\nassert solution('8') == '5'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '4'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\nassert solution('''\n9\n1.0 1.0\n1.0 3.1\n3.1 3.1\n3.1 1.0\n3.1 3.1\n4.2 3.1\n4.2 3.1\n4.2 3.1\n4.2 3.1\n''') == '10'\nassert solution('''\n10\n1.0 1.0\n3.1 1.0\n3.1 1.0\n3.1 1.0\n3.1 1.0\n4.2 1.0\n4.2 1.0\n4.2 1.0\n4.2 1.0\n''') == '11'\nassert solution('''\n50\n0.5 0.5\n3.1 0.5\n1.0 1.0\n0.5 0.5\n0.5 0.5\n0.5 0.5\n0.5 0.5\n0.5 0.5\n''') == '60'\nassert solution('''\n100\n0.0 0.0\n1.0 1.0\n2.0 1.0\n3.0 1.0\n4.0 1.0\n5.0 1.0\n6.0 1.0\n7.0 1.0\n8.0 1.0\n9.0 1.0\n10.0 1.0\n11.0 1.0\n12.0 1.0\n13.0 1.0\n14.0 1.0\n15.0 1.0\n16.0 1.0\n17.0 1.0\n18.0 1.0\n19.0 1.0\n20.0 1.0\n21.0 1.0\n22.0 1.0\n23.0 1.0\n24.0 1.0\n25.0 1.0\n26.0 1.0\n27.0 1.0\n28.0 1.0\n29.0 1.0\n30.0 1.0\n31.0 1.0\n32.0 1.0\n33.0 1.0\n34.0 1.0\n35.0 1.0\n36.0 1.0\n37.0 1.0\n38.0 1.0\n39.0 1.0\n40.0 1.0\n41.0 1.0\n42.0 1.0\n43.0 1.0\n44.0 1.0\n45.0 1.0\n46.0 1.0\n47.0 1.0\n48.0 1.0\n49.0 1.0\n50.0 1.0\n51.0 1.0\n52.0 1.0\n53.0 1.0\n54.0 1.0\n55.0 1.0\n56.0 1.0\n57.0 1.0\n58.0 1.0\n59.0 1.0\n60.0 1.0\n61.0 1.0\n62.0 1.0\n63.0 1.0\n64.0 1.0\n65.0 1.0\n66.0 1.0\n67.0 1.0\n68.0 1.0\n69.0 1.0\n70.0 1.0\n71.0 1.0\n72.0 1.0\n73.0 1.0\n74.0 1.0\n75.0 1.0\n76.0 1.0\n77.0 1.0\n78.0 1.0\n79.0 1.0\n80.0 1.0\n81.0 1.0\n82.0 1.0\n83.0 1.0\n84.0 1.0\n85.0 1.0\n86.0 1.0\n87.0 1.0\n88.0 1.0\n89.0 1.0\n90.0 1.0\n91.0 1.0\n92.0 1.0\n93.0 1.0\n94.0 1.0\n95.0 1.0\n96.0 1.0\n97.0 1.0\n98.0 1.0\n99.0 1.0\n100.0 1.0\n101.0 1.0\n102.0 1.0\n103.0 1.0\n104.0 1.0\n105.0 1.0\n106.0 1.0\n107.0 1.0\n108.0 1.0\n109.0 1.0\n110.0 1.0\n111.0 1.0\n112.0 1.0\n113.0 1.0\n114.0 1.0\n115.0 1.0\n116.0 1.0\n117.0 1.0\n118.0 1.0\n119.0 1.0\n120.0 1.0\n121.0 1.0\n122.0 1.0\n123.0 1.0\n124.0 1.0\n125.0 1.0\n126.0 1.0\n127.0 1.0\n128.0 1.0\n129.0 1.0\n130.0 1.0\n131.0 1.0\n132.0 1.0\n133.0 1.0\n134.0 1.0\n135.0 1.0\n136.0 1.0\n137.0 1.0\n138.0 1.0\n139.0 1.0\n140.0 1.0\n141.0 1.0\n142.0 1.0\n143.0 1.0\n144.0 1.0\n145.0 1.0\n146.0 1.0\n147.0 1.0\n148.0 1.0\n149.0 1.0\n150.0 1.0\n151.0 1.0\n152.0 1.0\n153.0 1.0\n154.0 1.0\n155.0 1.0\n156.0 1.0\n157.0 1.0\n158.0 1.0\n159.0 1.0\n160.0 1.0\n161.0 1.0\n162.0 1.0\n163.0 1.0\n164.0 1.0\n165.0 1.0\n166.0 1.0\n167.0 1.0\n168.0 1.0\n169.0 1.0\n170.0 1.0\n171.0 1.0\n172.0 1.0\n173.0 1.0\n174.0 1.0\n175.0 1.0\n176.0 1.0\n177.0 1.0\n178.0 1.0\n179.0 1.0\n180.0 1.0\n181.0 1.0\n182."
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n') == '6'\nprint(solution(input()))"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1''') == '6'\nassert solution('''5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1''') == '6'\nassert solution('''5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1''') == '6'\nassert solution('''5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1''') == '6'\nassert solution('''5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1''') == '6'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nassert solution('8\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n5.0 3.1\\n5.0 4.2\\n5.0 5.0\\n5.0 6.1\\n5.0 7.1\\n5.0 8.1\\n5.0 9.1\\n5.0 10.1\\n5.0 11.1\\n5.0 12.1\\n') == '12'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\n\"\"\"\nimport math"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\\n0.0 0.0\\n3.1 1.0\") == \"2\"\nassert solution(\"3\\n1.0 3.1\\n3.1 3.1\") == \"3\"\nassert solution(\"4\\n1.0 3.1\\n3.1 3.1\") == \"4\"\nassert solution(\"5\\n1.0 3.1\\n3.1 3.1\") == \"5\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\nassert solution('''\n5\n1.1 2.2\n3.1 4.4\n4.4 5.5\n5.5 7.7\n6.6 7.7\n''') == '7'\nassert solution('''\n10\n1.2 2.3\n4.5 6.8\n7.9 7.9\n9.9 9.9\n6.5 5.5\n2.4 1.6\n1.8 3.9\n1.8 5.6\n''') == '11'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\nassert solution(\"10\\n2.0 2.0\\n4.0 2.0\\n4.0 4.0\\n2.0 4.0\\n8.0 4.0\\n8.0 8.0\\n8.0 8.0\\n2.0 8.0\\n4.0 8.0\\n4.0 4.0\\n4.0 4.0\\n2.0 4.0\\n4.0 4.0\\n4.0 8.0\\n2.0 8.0\\n4.0 8.0\\n2.0 2.0\\n4.0 2.0\\n8.0 2.0\\n2.0 2.0\\n8.0 8.0\\n2.0 2.0\\n4.0 8.0\\n2.0 2.0\\n4.0 2.0\\n2.0 8.0\\n4.0 8.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 8.0\\n2.0 8.0\\n4.0 8.0\\n2.0 8.0\\n2.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n2.0 2.0\\n4.0 2.0\\n8.0 2.0\\n2.0 2.0\\n8.0 8.0\\n2.0 2.0\\n4.0 8.0\\n2.0 2.0\\n4.0 4.0\\n2.0 4.0\\n4.0 4.0\\n4.0 8.0\\n2.0 8.0\\n4.0 8.0\\n2.0 2.0\\n4.0 2.0\\n8.0 2.0\\n2.0 2.0\\n8.0 8.0\\n2.0 2.0\\n4.0 8.0\\n2.0 2.0\\n4.0 2.0\\n2.0 8.0\\n4.0 8.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 8.0\\n2.0 8.0\\n4.0 8.0\\n2.0 8.0\\n2.0 2.0\\n4.0 2.0\\n8.0 2.0\\n2.0 2.0\\n8.0 8.0\\n2.0 2.0\\n4.0 8.0\\n2.0 2.0\\n4.0 4.0\\n2.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4.0 4.0\\n4"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\n\nassert solution('''\n3\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n2\n2\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n4\n2\n2\n2\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n5\n4\n3\n2\n1\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\n2\\n') == '5'\nassert solution('5\\n2\\n2\\n') == '5'\nassert solution('4\\n2\\n1\\n') == '5'\nassert solution('4\\n3\\n3\\n') == '4'\nassert solution('4\\n5\\n1\\n') == '4'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1') == '1\\n'\nassert solution('2\\n1\\n1') == '5\\n'\nassert solution('3\\n2\\n1\\n1') == '5\\n'\nassert solution('4\\n2\\n1\\n1') == '4\\n'\nassert solution('5\\n2\\n1\\n1') == '4\\n'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n2\n2\n2\n''') == \"5\"\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n    2\n    2\n    2\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n    2\n    2\n    2\n    \"\"\") == \"5\"\n\nassert solution(\"\"\"\n    2\n    4\n    2\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n    3\n    3\n    3\n    \"\"\") == \"7\"\n\nassert solution(\"\"\"\n    3\n    3\n    3\n    \"\"\") == \"7\"\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3\\n2') == '4\\n'\n\nassert solution('2\\n5\\n2') == '7\\n'\n\nassert solution('3\\n2\\n3') == '7\\n'\n\nassert solution('4\\n4\\n3') == '7\\n'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n3') == '4'\nassert solution('3\\n4') == '3'\nassert solution('4\\n5') == '5'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2\\n2\\n2') == '5'\nassert solution('20\\n12\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n2\") == \"5\"\nassert solution(\"3\\n2\\n2\") == \"7\"\nassert solution(\"3\\n2\\n3\") == \"4\"\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2\n2\n2\n''') == '5'\nassert solution('''\n1\n2\n2\n2\n''') == '3'\n\n'''\n--------------------------------------------------------------------------------------------------------------------\n4. Write a function which returns True if a given string is a palindrome.\n\nPalindrome means that it is the same forwards and backwards. A palindrome is a string that reads the same in both directions.\n\nFor example, \u201cmadam\u201d is a palindrome.\n\nWrite a function that returns True if the given string is a palindrome.\n\nNote: This is a challenging problem, but it is less tricky than the previous one!\n\nNote: For reference, the following is a Python language snippet that can be used to create a palindrome:\n'''"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1 3\n2 2 2 1\"\"\") == \"1 1\""
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 3\n2 2 2 1\n''') == '1 1'\nassert solution('''1 1\n1 1\n''') == '1 1'\n'''\n-----Hints-----\n* We know that the pikeman is always very efficient. Therefore, each time it solves a problem, he could add the time to the penalty counter. Therefore, we can simply add the time to the penalties.\n* There are only two cases:\n    Case 1: t1 < t2, and this means that the pikeman has not yet solved the problem that requires the minimum time. In this case we must subtract (C - t1) from the penalty.\n    Case 2: t1 >= t2, and this means that the pikeman has solved all the problems that require the minimum time. In this case we must add (t1 - C) to the penalty.\n* Now we know that for the case 1, if we subtract (t1 - t0) from the penalty, we will get the number of problems that we need to solve to reach the minimum time. In the other case, if we add (t1 - t0) to the penalty, we will get the number of problems that we need to solve to reach the maximum time.\n* We can have a similar idea for the case 2. In the case 2, if we add (t1 - t0) to the penalty, we will get the number of problems that we need to solve to reach the maximum time. In the other case, if we subtract (t1 - t0) from the penalty, we will get the number of problems that we need to solve to reach the minimum time.\n* We can simply iterate over the elements in the input, and get the penalty and number of problems for each case. The output will be modulo 10^8.\n'''\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\n2 2 2 1') == '1 1'\nassert solution('1 1\\n1 1 1 1') == '0 0'\nassert solution('3 2\\n2 3 5 1\\n2 3 5 2') == '5 7'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1 1'\nassert solution('2 4') == '2 1'\nassert solution('2 1') == '1 2'\nassert solution('1') == '1 0'\nassert solution('1 2') == '0 0'"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3\n2 2 2 1\n''') == '1 1'\n\nassert solution('''\n3 3\n1 2 3\n''') == '2 3'\n\nassert solution('''\n3 5\n1 2 3\n4 5 6\n''') == '3 3'\n\nassert solution('''\n3 5\n1 2 3\n4 5 6\n''') == '2 2'"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"1 1\"\nassert solution(\"2 2 2 1\") == \"2 1\"\nassert solution(\"2 2 2 1\") == \"2 1\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 2\") == \"1 1\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 3\n2 2 2 1\n\"\"\") == \"1 1\"\nassert solution(\"\"\"\n2\n3\n2 1\n\"\"\") == \"2 2\"\nassert solution(\"\"\"\n3\n4\n1 2\n3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3\\n2 2 2 1\\n') == '1 1'"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3') == '1 1'\nassert solution('2 2 2 1') == '1 1'\nassert solution('10 3') == '1 1'\nassert solution('10 3') == '1 1'"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '1') == '10'"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n') == '1'\nassert solution('3\\n') == '17'\nassert solution('2\\n') == '2'\nassert solution('10\\n') == '12'\nassert solution('100\\n') == '1252'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('5') == '1'\nassert solution('6') == '0'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '10'\nassert solution('1') == '10'\nassert solution('10000') == '10'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"10\") == \"10\"\nassert solution(\"123\") == \"4\"\nassert solution(\"18\") == \"4\"\nassert solution(\"123456789\") == \"9\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0') == '10'\nassert solution('1') == '9'\nassert solution('10') == '100'\nassert solution('100') == '10100'\nassert solution('1010') == '10000'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('666') == '10'\nassert solution('876') == '7'\nassert solution('875') == '7'\nassert solution('904') == '5'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '5'\nassert solution('123') == '8'\nassert solution('223') == '9'\nassert solution('33') == '10'\nassert solution('33') == '10'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"10\"\n\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '7'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '0.001'"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == \"0.001\"\nassert solution('1 2') == \"0.0\"\nassert solution('1 2') == \"0.0000\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n1000 1 0\n1 1000 1\n''') == '0.001'\nassert solution('''\n2 3\n1000 1 0\n1 1000 1\n''') == '0.000'\n'''\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('1 1000 1') == '0.001'\nassert solution('1000 1 0') == '0.001'\nassert solution('1 1000 1') == '0.001'\nassert solution('1 0 0') == '0.001'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_str) == \"0.001\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1000 1 0\\n1 1000 1') == '0.001'\nassert solution('2 2\\n1000 1 0\\n1 1000 1') == '0.001'\n\n\"\"\"\n\nk, n = map(int, input().split())"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 4\n1 100 1\n2 500 2\n3 100 1\nSample Output:\n16.00000\n''') == '16.00000'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1000 1 0\n1 1000 1\n1 1000 1\n1 1000 1\nSample Output:\n0.001\n''') == '0.001', 'First'\nassert solution('''\n1\n1000 1 0\nSample Output:\n0.001\n''') == '0.001', 'Second'\nassert solution('''\n3\n1000 1 0\n1 1000 1\n1 1000 1\nSample Output:\n0.000999999999999979\n''') == '0.000999999999999979', 'Third'\nassert solution('''\n1\n1000 1 0\nSample Output:\n0.0\n''') == '0.0', 'Fourth'\nassert solution('''\n5\n1000 1 0\n1 1000 1\n1 1000 1\n1 1000 1\n1 1000 1\nSample Output:\n0.000999999999999979\n''') == '0.000999999999999979', 'Fifth'\n''') == '0.000999999999999979', 'Sixth'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"0.001\"\nassert solution(\"1000 1 0\") == \"0.001\"\nassert solution(\"1 1000 1\") == \"0.001\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n5 1 0\n1 0 1\n1 2 1\n''') == '0.001'\nassert solution('''\n3\n1 1 0\n1 0 1\n1 2 1\n''') == '0.005'\nassert solution('''\n3\n1 1 0\n1 0 1\n1 2 1\n''') == '0.009'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1\\n') == '0'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2 10000\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"5 10\") == \"23\"\nassert solution(\"100 100\") == \"10\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 2') == '0'\nassert solution('1 2') == '2'\nassert solution('2 1') == '0'\nassert solution('2 2') == '1'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3 2 10000\n1 2\n2 3\n3 1''') == '0'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 2 10000\n1 2\n2 3\n3 1''') == '0'\n\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1 5 1') == '0'\nassert solution('3 3 2 10000') == '0'\nassert solution('3 3 2 500') == '2'\nassert solution('5 5 5 5 2') == '4'\nassert solution('10 5 5 5 2') == '8'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1') == '0'\nassert solution('5 3 4\\n2 3\\n3 2\\n3 4\\n4 1\\n1 4') == '5'\nassert solution('5 3 4\\n2 3\\n3 2\\n3 4\\n4 1\\n1 4') == '3'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 2 10000') == '0'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\") == \"0\"\nassert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\") == \"1\"\nassert solution(\"5 5 2 10000\\n1 2\\n2 3\\n3 4\\n4 5\") == \"2\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2 10000\") == \"1\"\nassert solution(\"1 1 1 10000\") == \"2\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 0 0\n2 0 1\n2 2 0\n''') == '0'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '26'\nassert solution
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n\") == \"2\"\nassert solution(\"3\\n1 2 3\\n1 2 3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\\n1 2 3 0\") == \"4\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '26'\nassert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '54'\nassert solution('3\\n0 1 1 1\\n1 2 0 3\\n1 2 3 0') == '21'\nassert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '16'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n1 3 0 0\n\"\"\") == \"26\"\nassert solution(\"\"\"\n10\n0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"14\"\nassert solution(\"\"\"\n10\n0 1 2 3 4 5 6 7 8 9\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"28\"\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"18\"\nassert solution(\"\"\"\n10\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"25\""
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n''') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\\n') == '26'\n\"\"\"\n\nfrom typing import List, Set\n\nclass Solution:\n    def problem_solution(self, stdin: str) -> str:\n        num_nodes = int(stdin.strip())\n        graph = []\n        for i in range(num_nodes):\n            graph.append(list(map(int, stdin.strip().split())))\n        # print(graph)\n        max_size = 0\n        max_set = set()\n        for edge_index in range(num_nodes):\n            is_edges_same = True\n            for edge in graph:\n                if edge_index!= edge[0] and edge_index!= edge[1] and edge[0]!= edge[1]:\n                    is_edges_same = False\n            if is_edges_same:\n                if len(max_set) < 2:\n                    max_set.add(edge_index)\n                    max_size = max(max_size, len(max_set))\n                    continue\n                else:\n                    break\n        return max_size\n\nprint(Solution().problem_solution('5\\n1 2 1 2\\n2 2 2 1\\n1 3 1 3\\n1 3 2 1\\n'))\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '26'"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n''') == '26'\nassert solution('''\n5\n0 1 1 1 0\n1 0 2 2 0\n1 2 0 3 0\n1 2 3 0 0\n1 2 0 0 0\n''') == '30'\nassert solution('''\n8\n1 1 1 1 1 1 1 1\n1 0 2 2 2 2 2 2\n1 2 0 3 3 3 3 3\n1 2 3 0 4 4 4 4\n1 2 3 4 0 5 5 5\n1 2 3 4 5 0 0 0\n1 2 0 0 0 0 0 0\n1 2 3 0 0 0 0 0\n''') == '107'\nassert solution('''\n5\n1 1 1 1 1\n1 0 2 2 2\n1 2 0 3 3\n1 2 3 0 0\n1 2 0 0 0\n''') == '107'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == \"12\"\nassert solution('4') == \"34\"\nassert solution('5') == \"120\""
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n20 20 20 40\n.X.\n.X\n.T\n.T\n''') == '0.7358490566037736'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '0.166667'\nassert solution('15 5 1') == '0.166667'\nassert solution('6 5 1') == '0.33333333'\n\nimport sys\nimport io\nimport os\n\nfrom collections import deque, defaultdict"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2\n20 20 20 40\nX.X\nT.T\n''') == '0.666666667'\n\nassert solution('''3 3\n100 100 100 100\nX.X\nX.X\nX.X\n''') == '0.6'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2\n20 20 20 40\nX.X\nT.T\n''') == '0.666666667\n\nassert solution('''\n3 2\n20 20 20 40\nX.X\nT.T\n''') == '0.333333333\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0.333333333\\n0.666666667'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '0.333333333\\n0.666666667\\n0.333333333\\n0.666666667'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2\n20 20 20 40\nX.X\nT.T\nSample Output:\n0.333333333\n0.666666667\nSample Input:\n5\n5 5\n.X.\n.X.\n.X.\n.T\nSample Output:\n0.50000000000000002\n0.50000000000000002\n''') == '0.50000000000000002'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n10 10\nXX.X.\nX.T.\nT.T.\nT.T.\n.XX.\n.XX.\n.X.T.\nX.X.\n\"\"\") == \"0.16666666666666666\"\n\n\"\"\""
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0.055555555'\nassert solution('3 2') == '0.166666667'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n20 20 20 40\n.T\nT.T\n
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''45 45 0 0''') == '0.75', \"First Example\"\nassert solution('''60 60 0 0''') == '0.50', \"Second Example\"\nassert solution('''90 90 0 0''') == '0.75', \"Third Example\"\nassert solution('''0 0 0 0''') == '1', \"Fourth Example\""
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('22 40 10 0') == '1.0'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('35 35 25 25') == '0.0075'\nassert solution('90 90 30 30') == '0.99'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('45 45 0 0') == '0.75', 'Challenge Test 1 Failed'\nassert solution('1 1 0 0') == '0.0', 'Challenge Test 2 Failed'\nassert solution('4.1 4.1 0.1 0.1') == '0.25', 'Challenge Test 3 Failed'\nassert solution('4.1 4.1 0.1 0.1 0.1') == '0.25', 'Challenge Test 4 Failed'\nassert solution('2.1 2.1 0.1 0.1') == '0.75', 'Challenge Test 5 Failed'"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"180 0 0 0\") == \"0.0\"\nassert solution(\"90 90 0 0\") == \"1.0\"\nassert solution(\"60 60 0 0\") == \"0.75\"\nassert solution(\"45 60 0 0\") == \"0.0\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''45 45 0 0''') == '0.75'''"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('0.89 0.5 0 0.09') == '0.75'\nassert solution('0.6 0.7 0.2 0.1') == '0.7'\nassert solution('0.2 0.3 0.4 0.1') == '0.3'\nassert solution('0.2 0.3 0.4 0.1') == '0.3'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('0 0 0 0') == '0.00'\nassert solution('5 0 0 0') == '0.25'\nassert solution('10 0 0 0') == '0.50'\nassert solution('0 0 0 0') == '0.00'"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('45 45 0.1 0.2 0.3') == '0.08'\nassert solution('3.1 3.2 3.3') == '0.05'\nassert solution('0.01 0.02 0.03') == '0.0099'\nassert solution('0.005 0.01 0.02 0.03') == '0.0099999'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('15 20 0 0') == '0.75'\nassert solution('0 15 0 0') == '0.5'\nassert solution('0 15 0 0.1') == '0.1'\nassert solution('1.2 2.3 1.1') == '0.9'"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '4'\nassert solution('0 0 0') == '0'\nassert solution('2 1 0') == '0'\nassert solution('3 0 0') == '0'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\nprint(solution())\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 5\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n3 4\n0 2 0\n0 1 1\n1 1 4\n1 2 4\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == \"4\"\nassert solution('''\n3 5\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == \"6\"\nassert solution('''\n2 5\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == \"7\"\nassert solution('''\n1 2\n0 3 8\n''') == \"8\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '4'\nassert solution('2 2') == '1'\nassert solution('1 2') == '1'\nassert solution('6 10') == '1'\nassert solution('5 2') == '1'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\nassert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\\n4 5 3\") == \"6\""
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\\n\") == \"0\"\nassert solution(\"5\\n1 2 3 4\\n\") == \"4\"\nassert solution(\"5\\n1 3 5\\n\") == \"3\"\nassert solution(\"5\\n1 2 2 3 4\\n\") == \"1\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\n\nassert solution('''\n5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '12'\n\nassert solution('''\n5 7\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '12'\n\nassert solution('''\n5 20\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '63'\n\nassert solution('''\n5 5\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '12'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"5 5\") == \"7\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '100'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n10 10 0 5') == \"100\"\nassert solution('2\\n2 5 2 3') == \"3\"\nassert solution('3\\n10 10 0 5') == \"100\"\nassert solution('4\\n100 10 0 5') == \"200\"\nassert solution('5\\n2 100 0 5') == \"200\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"100\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n10 10 0 5') == '100'\nassert solution('2\\n10 20 0 5') == '200'\nassert solution('3\\n10 20 0 5') == '200'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 10 0 5\") == \"100\"\nassert solution(\"10 100 0 5\") == \"150\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n10 10 0 5') == '100'\nassert solution('2\\n1 1 0 5') == '5'\nassert solution('3\\n2 2 0 5') == '3'\nassert solution('4\\n2 2 2 2 2') == '1'\nassert solution('5\\n10 10 10 10 10') == '10'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n10 10 0 5\n\"\"\") == \"100\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"100\"\nprint(solution())\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '100'\nassert solution('10 10 0 5') == '100'\nassert solution('3 2 5 1 4') == '30'\nassert solution('10 10 0 5 1 3 2') == '60'\nassert solution('3 3 5 2 2 4 2 5 2 6 4') == '10'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n0 0 2 2\n1 1 3 4\n5 7 6 8''') == '1'\nassert solution('''3\n0 0 2 2\n1 1 3 4\n5 7 6 8\nSample Input:\n4\n2 2 1 4\n2 2 5 2\nSample Output:\n0\n''') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1 3 4\\n5 7 6 8\\n') == '1'\nassert solution('3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\\n') == '0'\nassert solution('6\\n0 0 1 1\\n0 1 0 1\\n1 1 1 1\\n2 2 2 2\\n2 2 1 1\\n1 1 1 1\\n1 1 1 1\\n') == '0'"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '1'\nassert solution('''\n2\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '0'\nassert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '1'\n''')\n\n\n\n'''\nclass Solution:\n    def solve(self, A):\n        x_1, y_1, x_2, y_2 = A\n\n        return 1 if (x_1 < x_2 and y_1 < y_2) or (x_2 < x_1 and y_2 < y_1) else 0\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '0'\nassert solution('4') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n0 0 2 2\n1 1 3 4\n5 7 6 8\n6 0 2 2\n5 5 7 7\n4 6 7 6\n''') == '1'\nassert solution('''\n5\n0 0 2 2\n1 1 3 4\n5 7 6 8\n4 6 7 6\n3 5 7 6\n''') == '1'\n'''\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n2 1 3\n1 2 4\n''') == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '1'\nassert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '0'\nassert solution('''\n3\n1 1 3 4\n0 0 2 2\n5 7 6 8\n''') == '1'\nassert solution('''\n4\n10 10 10 -10\n10 -10 -10 10\n10 -10 -10 10\n-10 10 10 -10\n-10 -10 -10 10\n10 10 10 10\n''') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\") == \"1\""
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\nassert solution('1\\n2 3 4 5 6 7 8') == '1'\nassert solution('4\\n3 2 5 8\\n5 6 8 7') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    3\n    0 0 2 2\n    1 1 3 4\n    5 7 6 8\n    ''') == '1'"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"17\"\nassert solution(\"5 5\") == \"17\"\nassert solution(\"5 5\") == \"17\"\nassert solution(\"5 5\") == \"17\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '17'\nprint(solution('''6 6\nE E E E E E E E E E\n1 2 3 4 5 6 7 8 9\nE E E E E E E E E E E\n1 2 3 4 5 6 7 8 9\nE E E E E E E E E E E\n1 2 3 4 5 6 7 8 9\nE E E E E E E E E E E\n1 2 3 4 5 6 7 8 9\nE E E E E E E E E E E\n1 2 3 4 5 6 7 8 9\nE E E E E E E E E E E\n1 2 3 4 5 6 7 8 9''')) == '22'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == \"17\"\nassert solution('10 1\\n3 3\\n1 2\\n2 3\\n3 4\\n2 3\\n3 4\\n3 2\\n4 2\\n2 4\\n3 2\\n3 4\\n4 3\\n4 1\\n2 2\\n4 4\\n4 2\\n5 4\\n3 2\\n5 1\\n2 4\\n4 4\\n1 2\\n3 3\\n2 3\\n3 2\\n3 4\\n2 4\\n4 3\\n3 3\\n2 4\\n1 2\\n4 2\\n2 3\\n1 4\\n2 1\\n2 1\\n3 1\\n2 4\\n3 1\\n4 1\\n3 4\\n4 3\\n3 4\\n4 4\\n2 2\\n2 3\\n2 3\\n2 4\\n1 4\\n2 4\\n3 2\\n1 4\\n2 1\\n2 3\\n3 1\\n2 3\\n2 3\\n2 3\\n3 1\\n2 4\\n1 4\\n2 4\\n2 4\\n3 1\\n3 4\\n4 2\\n3 4\\n1 2\\n1 2\\n3 4\\n3 2\\n3 1\\n1 2\\n2 1\\n2 1\\n2 1\\n1 2\\n2 3\\n1 4\\n1 4\\n2 3\\n1 4\\n3 3\\n2 1\\n2 2\\n4 1\\n1 4\\n3 4\\n1 2\\n1 2\\n3 1\\n3 4\\n2 2\\n2 2\\n3 4\\n2 4\\n2 4\\n3 1\\n3 1\\n3 1\\n2 1\\n3 2\\n2 3\\n1 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n3 4\\n2 3\\n3 3\\n1 2\\n2 2\\n3 2\\n2 4\\n3 2\\n2 4\\n2 4\\n2 4\\n2 4\\n1 2\\n3 2\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n1 2\\n2 3\\n2 2\\n2 3\\n3 2\\n1 4\\n2 4\\n1 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n3 4\\n2 2\\n3 2\\n2 2\\n2 2\\n3 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 4\\n2 2\\n2 4\\n1 2\\n2 2\\n2 2\\n2 4\\n2 2\\n2 4\\n1 2\\n2 4\\n2 4\\n1 2\\n2 4\\n2 4\\n2 4\\n1 4\\n2 1\\n1 4\\n3 4\\n2 4\\n3 2\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n1 2\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n1 4\\n1 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n1 4\\n2 4\\n1 4\\n2 4\\n1 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n1 2\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n1 2\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n1 4\\n1 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n1 4\\n2 4\\n2 4\\n2 4\\n1 4\\n2 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n1 2\\n1 2\\n2 4\\n2 4\\n1 2\\n1 2\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n1 4\\n1 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n1 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n1 4\\n2 4\\n2 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\n''')\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '17'\n\nassert solution('''5\n1 2 3 4 5\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '-1'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\nassert solution('''2 2\n11 1\n10 2\n1 1\n''') == '10'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5') == '17'\nassert solution('3 1') == '1'\nassert solution('1 2 3 4 5') == '1'\nassert solution('-2 -2 -2 -2 -2') == '9'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == '17'\nassert solution('7 3\\n7 2 7 5 8 7 5 7\\n1 2 3 4 5 6\\n7 7 7\\n1 1 1 1\\n8 8 8 8\\n1 2 3 4 5 6') == '25'\nassert solution('10\\n111111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111') == '11'\nassert solution('10\\n111111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111') == '1'\nassert solution('10\\n111111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111\\n11111111') == '0'"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"17\"\nassert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\") == \"17\"\nassert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\") == \"20\"\nassert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\") == \"20\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == \"17\"\nassert solution('''4 4\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == \"2\"\nassert solution('''3 3\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == \"3\"\nassert solution('''6 6\nE E E E E E E\n1 2 3 4 5 6\n5 4 3 2 1 2\n-2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8\n9 9 9 9 9 9 9\nS S S S S S S S''') == \"18\"\nassert solution('''5 5\nE E E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8 8\n9 9 9 9 9\nS S S S S S\n1 1 1 1 1 1 1\n5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8\n9 9 9 9 9 9 9\nS S S S S S S S\n1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9\nS S S S S S S S S\n1 1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9\nS S S S S S S S S S\n1 1 1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9\nS S S S S S S S S S S\n1 1 1 1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9\nS S S S S S S S S S S S\n1 1 1 1 1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9 9\nS S S S S S S S S S S S S\n1 1 1 1 1 1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9 9 9\nS S S S S S S S S S S S S S\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9 9 9 9\nS S S S S S S S S S S S S S S\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\nS S S S S S S S S S S S S S S S\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\nS S S S S S S S S S S S S S S S\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\nS S S S S S S S S S S S S S S S\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\nS S S S S S S S S S S S S S S S\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\nS S S S S S S S S S S S S S S S\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n-2 -2 -2 -2 -2 -2 -2 -2"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n5\\n1 2 3 4 5') == '1 4 3 5 2'\nassert solution('2\\n10\\n2 3 1 4 5 6 8 7') == '3 4 1 2 5 6 8 7'\nassert solution('3\\n1\\n3 2 1') == '3 1 2 1'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"4\\n2 4 1 2 4\") == \"1 4 3 5 2\"\nassert solution(\"3\\n3 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\""
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('6\\n1 2 3 4 5 6') == '1 2 3 4 5 6'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('7\\n5 6 3 2 1 4 2') == '4 5 1 2 3 6 7'\nprint('All Tests Passed')\n\"\"\""
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1 4 3 5 2'\nassert solution('1') == '1 1 1 1 1'\nassert solution('2') == '2 2 2 2 2'\nassert solution('3') == '3 3 3 3 3'\nassert solution('4') == '4 4 4 4 4'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"6\\n4 5 1 6 3 2\") == \"3 5 4 6 1 2\"\n\n--------------------------------------------------\n------------------------------------------------------\n---------------------------------------------------------------\n------------------------------------------------------\n------------------------------------------------------\n------------------------------------------------------\n------------------------------------------------------\n------------------------------------------------------\n------------------------------------------------------\n\n\"\"\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == 'impossible'\nassert solution('10') == '1 4 3 5 2'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 1 1\") == \"2 3 5 1 4\"\nassert solution(\"2\\n1 1 1\") == \"impossible\"\nassert solution(\"5\\n2 3 1 1\") == \"impossible\"\nassert solution(\"4\\n2 3 1 1\") == \"impossible\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 3 1 1\\n') == '1 4 3 5 2'\nassert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"10\\n5 6 7 3 2 1\") == \"2 4 8 6 5 7 3 1\""
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n1 1\n\"\"\") == \"0.76772047\nassert solution(\"\"\"\n100000\n1 100000\n\"\"\") == \"0.999994716\n\"\"\")\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 0 1\n1 4\n''') == '0.76772047'\nassert solution('''\n3 0 1\n1 2\n''') == '0.16065054'\nassert solution('''\n1 1 1\n''') == '1.0'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n3 0 1\\n1 4\\n') == '0.76772047'\nassert solution('2\\n3 0 1\\n1 2\\n') == '0.76772047'\nassert solution('2\\n2 0 0\\n2 2\\n') == '0.16666666667'\nassert solution('2\\n2 0 0\\n1 2\\n') == '0.16666666667'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0.69314718'\nassert solution('2') == '0.69314718'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 0 1\\n1 4\\n') == '0.76772047'\nassert solution('100000\\n0 0 1\\n0 2 3\\n') == '0.003571429'"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 0 1\\n1 4\\n') == '0.76772047'\nassert solution('100 0 1\\n1 100\\n') == '0.76772047'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0.76772047'\nprint(solution())"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3 0 1\\n1 4\\n') == '0.76772047'\nprint(solution(*tuple(open(0))))"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n6\n-2 0 -4\n0 4\n-3 0 0\n2 -1\n3 -1\n4 2\n1 -1\n\"\"\") == \"0.76772047\"\n\nassert solution(\"\"\"\n6\n0 1 1\n1 4\n-3 0 0\n2 -1\n3 -1\n4 2\n1 -1\n\"\"\") == \"0.7698245\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n0 1\n1 4\n''') == '0.76772047', 'First Test'\nassert solution('''\n2\n0 1\n1 4\n0 2\n1 4\n''') == '0.80904911', 'Second Test'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('hello teams') == '27'\nassert solution('bbdddbbbb') == '1+2+3=6'\nassert solution('sdffsdf') == '1'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\na b b b c\na c b a b a\nb c a b c a b c\n''') == '27'\nassert solution('''\nabcabcabc\na c a b c a\na a b c a a a\na c a b a c a\nb a b c a a b c\nc a b a a a b c\n''') == '27'\nassert solution('''\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\nhello teams\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"27\"\n\nassert solution(\"hello teams\") == \"27\"\nassert solution(\"teams\") == \"27\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('hello teams') == '27'\nassert solution('teams hello') == '6'\nprint('PASSED!!')"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('hello teams') == '27'\nassert solution('helo tes') == '3'\n\n##############"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('hello teams') == '27'\nassert solution('hello teams') == '27'\nassert solution('bbddbbbbb') == '3'\nassert solution('dddddddddddddd') == '3'\n\n\"\"\""
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"hello bbdddbbbb\") == \"1\"\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('hello teams') == '27'\nassert solution('bbdddbbbb') == '1+2=3'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"hello z\") == \"1\"\nassert solution(\"hello z z\") == \"1\"\nassert solution(\"teams hello\") == \"3\"\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('hello teams') == '27'\nassert solution('hi dennys') == '1'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '2'\nassert solution('''3 3\n1 7\n4 6\n4 5\n1 3\n2 3\nSample Output:\n2\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 10\n3 8\n4 7\n7 10\n9 2\n11 5\n''') == '2'\nassert solution('''\n3 5\n6 2\n9 2\n10 10\n11 10\n''') == '1'\nassert solution('''\n3 1\n1 1\n2 4\n''') == '0'\nassert solution('''\n3 4\n2 3\n4 4\n''') == '0'\nassert solution('''\n5 3\n1 5\n2 5\n3 5\n''') == '1'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 3\\n1 8\\n5 4\\n7 7\\n9 2\\n16 6\\n17 10\\n4 7 2\\n6 3 1\\n12 6 3\\n\") == \"2\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2\n1 8\n5 4\n7 7\n''') == '2'\n\n\"\"\""
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '2'\nassert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '5'\nassert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '4'\nassert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '3'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == \"2\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3\n1 8\n5 4\n7 7\n9 2\n''') == '2'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 1\n5 5\n10 3\n10 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 2\n3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 1\n5 5\n10 3\n10 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 1\n5 5\n10 3\n10 2\n\"\"\") == \"1\""
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 6\n1 2\n2 3\n2 4\n3 2\n3 4\n4 2\n4 3\n''') == '2'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"6 3\\n1 8\\n5 4\\n7 7\\n9 2\\n16 6\\n17 10\\n4 7 2\\n6 3 1\\n12 6 3\\n\") == \"2\"\nassert solution(\n    \"100 100\\n1 4\\n3 4\\n1 2\\n5 2\\n1 5\\n4 5\\n1 7\\n3 7\\n1 9\\n4 9\\n1 13\\n5 13\\n1 17\\n4 17\\n1 19\\n5 19\\n1 23\\n4 23\\n1 29\\n5 29\\n1 31\\n4 31\\n1 33\\n4 33\\n1 37\\n4 37\\n1 41\\n4 41\\n1 43\\n4 43\\n1 47\\n4 47\\n1 53\\n4 53\\n1 59\\n4 59\\n1 61\\n4 61\\n1 67\\n4 67\\n1 73\\n4 73\\n1 79\\n4 79\\n1 81\\n4 81\\n1 83\\n4 83\\n1 89\\n4 89\\n1 97\\n4 97\\n1 99\\n4 99\\n1 101\\n4 101\\n1 103\\n4 103\\n1 107\\n4 107\\n1 109\\n4 109\\n1 113\\n4 113\\n1 117\\n4 117\\n1 127\\n4 127\\n1 131\\n4 131\\n1 135\\n4 135\\n1 139\\n4 139\\n1 143\\n4 143\\n1 147\\n4 147\\n1 151\\n4 151\\n1 155\\n4 155\\n1 159\\n4 159\\n1 163\\n4 163\\n1 167\\n4 167\\n1 171\\n4 171\\n1 175\\n4 175\\n1 179\\n4 179\\n1 183\\n4 183\\n1 187\\n4 187\\n1 191\\n4 191\\n1 195\\n4 195\\n1 199\\n4 199\\n1 203\\n4 203\\n1 207\\n4 207\\n1 211\\n4 211\\n1 215\\n4 215\\n1 219\\n4 219\\n1 223\\n4 223\\n1 227\\n4 227\\n1 229\\n4 229\\n1 233\\n4 233\\n1 237\\n4 237\\n1 239\\n4 239\\n1 243\\n4 243\\n1 247\\n4 247\\n1 251\\n4 251\\n1 254\\n4 254\\n1 259\\n4 259\\n1 263\\n4 263\\n1 267\\n4 267\\n1 271\\n4 271\\n1 275\\n4 275\\n1 279\\n4 279\\n1 283\\n4 283\\n1 287\\n4 287\\n1 291\\n4 291\\n1 295\\n4 295\\n1 299\\n4 299\\n1 303\\n4 303\\n1 307\\n4 307\\n1 311\\n4 311\\n1 315\\n4 315\\n1 319\\n4 319\\n1 323\\n4 323\\n1 337\\n4 337\\n1 341\\n4 341\\n1 345\\n4 345\\n1 349\\n4 349\\n1 353\\n4 353\\n1 357\\n4 357\\n1 361\\n4 361\\n1 365\\n4 365\\n1 369\\n4 369\\n1 373\\n4 373\\n1 377\\n4 377\\n1 383\\n4 383\\n1 387\\n4 387\\n1 391\\n4 391\\n1 395\\n4 395\\n1 399\\n4 399\\n1 401\\n4 401\\n1 403\\n4 403\\n1 407\\n4 407\\n1 409\\n4 409\\n1 411\\n4 411\\n1 413\\n4 413\\n1 417\\n4 417\\n1 419\\n4 419\\n1 423\\n4 423\\n1 427\\n4 427\\n1 431\\n4 431\\n1 435\\n4 435\\n1 439\\n4 439\\n1 443\\n4 443\\n1 447\\n4 447\\n1 451\\n4 451\\n1 455\\n4 455\\n1 459\\n4 459\\n1 463\\n4 463\\n1 467\\n4 467\\n1 470\\n4 470\\n1 475\\n4 475\\n1 479\\n4 479\\n1 481\\n4 481\\n1 485\\n4 485\\n1 490\\n4 490\\n1 494\\n4 494\\n1 509\\n4 509\\n1 513\\n4 513\\n1 517\\n4 517\\n1 521\\n4 521\\n1 525\\n4 525\\n1 529\\n4 529\\n1 533\\n4 533\\n1 537\\n4 537\\n1 541\\n4 541\\n1 545\\n4 545\\n1 549\\n4 549\\n1 553\\n4 553\\n1 557\\n4 557\\n1 561\\n4 561\\n1 565\\n4 565\\n1 569\\n4 569\\n1 573\\n4 573\\n1 577\\n4 577\\n1 581\\n4 581\\n1 585\\n4 585\\n1 589\\n4 589\\n1 593\\n4 593\\n1 597\\n4 597\\n1 601\\n4 601\\n1 605\\n4 605\\n1 608\\n4 608\\n1 612\\n4 612\\n1 616\\n4 616\\n1 619\\n4 619\\n1 622\\n4 622\\n1 626\\n4 626\\n1 630\\n4 630\\n1 634\\n4 634\\n1 638\\n4 638\\n1 642\\n4 642\\n1 646\\n4 646\\n1 650\\n4 650\\"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('5') == '2'\nassert solution('3') == '2'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '26'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5 3\na\nb\nc\nd\ne\ncad\n\"\"\") == \"26\""
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5\\nbcdef\\n') == '12'\n\"\"\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"26\"\n\"\"\""
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\na\nb\nc\nd\ne\ncad\n''') == '26'\n\nassert solution('''\na\nb\nc\nd\ne\ncad\nf\n''') == '10'\n\nassert solution('''\na\na\nc\nd\ne\ncad\nf\n''') == '4'\n\nassert solution('''\na\na\nc\nd\ne\ncad\nf\n''') == '11'\n\nassert solution('''\na\na\nc\nd\ne\ncad\nf\n''') == '17'"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n') == '2'\nassert solution('1\\n3\\n') == '1'\nassert solution('1\\n3\\n3\\n') == '2'\nassert solution('2\\n3\\n4\\n5\\n5\\n') == '2'\nassert solution('1\\n3\\n3\\n3\\n3\\n') == '1'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\\n3\\na\\n\") == \"8\"\nassert solution(\"10\\n6\\nacb\\n\") == \"10\"\nassert solution(\"10\\n6\\nabd\\n\") == \"6\"\nassert solution(\"10\\n5\\nabcd\\n\") == \"0\"\nassert solution(\"10\\n5\\nadbc\\n\") == \"3\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\na\nb\nc\nd\ne\ncad\n''') == '26'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\na\\nb\\nc\\nd\\ne\\n\") == \"26\"\nassert solution(\"5 4\\nabc\\ndef\\n\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('5 10 10 1 3') == '2 5 4 1 3'\nassert solution('5 10 10 0 3') == '2 5 1 4 3'\nassert solution('5 10 10 0 3 1') == '1 5 2 4 3 3'\nassert solution('5 10 10 0 3 1 2') == '1 5 2 4 3 3 2'\n\"\"\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3 5 2 1 4\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('6 5 20') == '4 5 3 2 1'\n\n'''"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('10 5 3 1 3') == '3 5 2 1 4'\nassert solution('10 10 10 10') == '10 10 10 10'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4', \"Wrong!\"\nassert solution('1 1 1 1 1') == '1 1 1 1 1', \"Wrong!\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 10 30\") == \"3 5 2 1 4\"\n\n\"\"\""
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2 3 4 5\"\nassert solution(\"10 30\") == \"3 5 2 1 4\"\nassert solution(\"5 10 30\") == \"2 3 4 5\"\nassert solution(\"10 5 30\") == \"2 3 4 5\"\nassert solution(\"5 10 10\") == \"5 10\""
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 10 30\n10 5 3 1 3\n''') == '3 5 2 1 4'\nassert solution('''5 10 30\n10 5 3 1 4\n''') == '1 5 3 4 2'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('5 100 50') == '7 3 4 2'"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('10 5 3 1 3') == '3 5 2 1 4'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"shovel time!\"\n\"\"\""
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n1 1\\n2 3\\n2 3') == '2'\nassert solution('4\\n3 7\\n2 2\\n4 9\\n5 8') == '4'\nassert solution('6\\n2 7\\n3 8\\n4 9\\n4 6\\n5 6') == '1'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n1 1\n2 3\n2 3\n2 3\n2 3\n2 3\n1 1\n''') == '2'\nassert solution('''\n9\n1 1\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n1 1\n''') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"shovel time!\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n1 1\n2 3\n2 3\n\"\"\") == \"shovel time!\"\nassert solution(\"\"\"\n2\n1 1\n2 1\nSample Output:\n1\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '2'\nassert solution('2 3') == '2'"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1 1\n2 3\n2 3\n\"\"\") == \"shovel time!\"\nassert solution(\"\"\"\n3\n1 5\n2 4\n3 2\n\"\"\") == \"shovel time!\"\nassert solution(\"\"\"\n5\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"shovel time!\"\nassert solution(\"\"\"\n2\n1 1\n1 1\n\"\"\") == \"shovel time!\"\nassert solution(\"\"\"\n1\n1 2\n\"\"\") == \"shovel time!\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 1\n2 3\n2 4\n2 5\n3 4\n3 5\n''') == '2'\n\nassert solution('''\n5\n1 2\n1 4\n2 2\n2 5\n3 3\n3 6\n3 9\n3 12\n3 16\n4 4\n4 6\n4 8\n5 5\n5 7\n5 8\n6 6\n6 7\n6 8\n7 7\n7 8\n7 9\n8 8\n8 9\n9 9\n''') == '4'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') =='shovel time!'\nassert solution('2') =='shovel time!'\nassert solution('3') =='shovel time!'"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 2 1 2\n''') == '3'\nassert solution('''\n3\n2 2 2\n''') == '2'\n'''"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 1 2\n3\n1 2''') == '3\nassert solution('''5\n1 2 1 2 3\n2\n1 2''') == '4'''\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2 1 2\\n') == '3'\nassert solution('4\\n1 2 1 2\\n') == '3'\nassert solution('8\\n1 2 1 2\\n') == '4'"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 1 2\\n') == '3'\nassert solution('4\\n1 2 1 2\\n1 1\\n') == '2'\nassert solution('4\\n1 2 1 2\\n1 1\\n2 3') == '1'\nassert solution('3\\n1 2\\n1 1\\n2 3') == '2'\nassert solution('5\\n5 5\\n5 4\\n1 2\\n3 4') == '3'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n2\n1 2\n''') == \"3\"\nassert solution('''3\n3\n2\n1\n''') == \"2\"\nassert solution('''4\n1\n2\n3\n1\n''') == \"2\"\nassert solution('''5\n1\n1\n2\n3\n1\n''') == \"4\"\nassert solution('''6\n1\n1\n1\n1\n1\n1\n''') == \"4\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 1 2\n''') == '3'\nassert solution('''2\n1 1\n''') == '1'\nassert solution('''3\n1 2 1 2\n''') == '1'\nassert solution('''1\n1 1\n''') == '1'\n'''\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"3\"\nassert solution(\"10\\n1 2 2 3 5 6 7 8 9 1 2 5\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4\\n1 2 1 2\\n\"\n) == \"3\"\n\nassert solution(\n    \"1\\n3 2 2\\n\"\n) == \"2\"\n\nassert solution(\n    \"7\\n1 3 6 5 2 4 2\\n\"\n) == \"5\"\n\nassert solution(\n    \"1\\n1\\n\"\n) == \"1\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n10\n10\n1 2\n1 3\n2 1\n1 2\n1 3\n2 3\n2 2\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2\n1 3\n2 1\n1 2"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2 1 2\n''') == '3'\nassert solution('''\n4\n1 2 1 2\n''') == '2'\nassert solution('''\n10\n1 9 8 3 4 6 5 2 7\n''') == '7'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\nassert solution(\"8 2 4 5\") == \"74\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 5 8\n3\n4\n2\n''') == '35'\nassert solution('''\n4 4 999999937\n3\n4\n2\n''') == '23'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"79\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '79'\nassert solution('''\n3 1 2\n1 2 3\n1 1 2\n''') == '13'\nassert solution('''\n4 3 8\n5 4 1\n3 1 2\n''') == '13'\nassert solution('''\n7 10 4\n7 2 4 1 3 5 6\n6 2 1 3\n5 4 1 3 2\n3 1 2 1 2\n4 1 2 1\n2 1\n1 1 1 1 1\n''') == '723'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 999999937\") == \"79\"\nassert solution(\"10 10 999999937\") == \"56412\"\nassert solution(\"100 100 999999937\") == \"145613\""
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 4 999999937\n1 2\n2 3\n3 4\n4 5''') == '79'\nassert solution('''5 4 999999937\n1 2\n2 3\n3 4\n4 5\n2 3''') == '8'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4 999999937''') == '79'\nprint('PASSED')"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 4 999999937''') == '79'"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n+zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nartichoke\\nmushrooms\\nozucchini'\n'''\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\") == \"zucchini\"\nassert solution(\"3\\n2 +1 -3\") == \"\"\nassert solution(\"4\\n2 +1 -3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n4 +zucchini +mozzarella +mushrooms -artichoke\nSample Output:\nzucchini\nmozzarella\nmushrooms\nartichoke''') == 'zucchini\\nmushrooms\\nmushrooms\\nartichoke\\n'\n\nassert solution('''2\n2\n+mushrooms +artichoke\nSample Output:\nmushrooms\nartichoke''') =='mushrooms\\nartichoke\\n'\n\nassert solution('''3\n2\n-mozzarella -artichoke\nSample Output:\nmozzarella\\nartichoke''') =='mozzarella\\nartichoke\\n'\n\nassert solution('''4\n2\n+artichoke +mushrooms\nSample Output:\nartichoke\\nmushrooms''') == 'artichoke\\nmushrooms\\n'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n4 +zucchini +mozzarella +mushrooms -artichoke') == 'zucchini\\nmushrooms\\nmozzarella'\nassert solution('2\\n4 +zucchini +mozzarella +mushrooms -artichoke') == 'artichoke'\nassert solution('2\\n4 +zucchini +mozzarella +mushrooms -artichoke\\n') == 'artichoke'\nassert solution('2\\n4 +zucchini +mozzarella +mushrooms\\n-artichoke') == 'zucchini'\nassert solution('1\\n1 +zucchini +mozzarella +mushrooms') == 'zucchini'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n+zucchini +mozzarella +mushrooms -artichoke\nSample Output:\nzucchini\nmozzarella\nmushrooms\nartichoke\n''') == 'zucchini\\nmushrooms\\nartichoke\\n'''\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"zucchini\"\nassert solution(\"2\") == \"zucchini\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n4 +zucchini +mozzarella +mushrooms -artichoke') == 'zucchini'\n\nSample Input:\n1\n6 +mushrooms +mozzarella -zucchini +onion +cucumber +pepper -pepperoni +extra cheese +beer\nSample Output:\nonion\nmushrooms\npepper\npepperoni\nbeer\nSample Input:\n2\n4 +carrot +potato +onion +onion +cucumber +cucumber +carrot\nSample Output:\ncarrot\npotato\nonion\nSample Input:\n4\n4 +pepperoni +chicken +pineapple +honey +mayo +honey +mayo +ginger +chicken +mayo +mayo\nSample Output:\npepperoni\nmayo\nhoney\ningredient\nSample Input:\n5\n4 +grape +orange +banana +cherry +apricot +cherry +grape +cherry +apricot\nSample Output:\napricot\ncherry\ningredient\nSample Input:\n1\n2\n4 +zucchini +mozzarella +mushrooms -artichoke\nSample Output:\nzucchini\nmozzarella\ningredient\nSample Input:\n1\n7\n4 +pepperoni +cheese +pepper +lettuce +onion +mushrooms +mushrooms\nSample Output:\nlettuce\nonion\ningredient\nSample Input:\n1\n4\n3 +cherry +pepper +pepper +cherry\nSample Output:\ncherry\ningredient\nSample Input:\n1\n7\n3 +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\npepper\ningredient\nSample Input:\n1\n3\n3 +pepper +pepper +pepper\nSample Output:\ningredient\nSample Input:\n5\n1\n1 +zucchini +mozzarella\nSample Output:\nzucchini\ningredient\nSample Input:\n4\n1\n4 +chicken +cheese +pepper +pepper +pepper +cheese +pepper\nSample Output:\ningredient\nSample Input:\n5\n1\n1 +zucchini +mozzarella\nSample Output:\nzucchini\ningredient\nSample Input:\n1\n7\n4 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n7\n4 +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n2\n4 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n5\n1\n1 +zucchini +mozzarella\nSample Output:\nzucchini\ningredient\nSample Input:\n1\n7\n3 +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n7\n3 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n7\n4 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n5\n1\n1 +zucchini +mozzarella\nSample Output:\nzucchini\ningredient\nSample Input:\n1\n7\n3 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n5\n1\n1 +zucchini +mozzarella\nSample Output:\nzucchini\ningredient\nSample Input:\n5\n7\n3 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n7\n3 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n5\n1\n1 +zucchini +mozzarella\nSample Output:\nzucchini\ningredient\nSample Input:\n1\n7\n4 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n7\n4 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n7\n4 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n7\n4 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n7\n4 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n7\n4 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n7\n4 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n7\n4 +cheese +pepper +pepper +pepper +pepper +lettuce +lettuce +lettuce +lettuce\nSample Output:\ningredient\nSample Input:\n1\n7\n4 +cheese +pepper +pepper +pe"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'zucchini'\nassert solution('4') == 'zucchini'\nassert solution('4') == 'zucchini'"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 'zucchini'\nassert solution(\"2\") == 'zucchini mozzarella'\nassert solution(\"3\") == 'zucchini mozzarella mushrooms'\nassert solution(\"4\") == 'zucchini mozzarella mushrooms artichoke'\nassert solution(\"5\") == 'zucchini artichoke mozzarella mushrooms'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n4 +zucchini +mozzarella +mushrooms -artichoke\\n') == 'zucchini\\nmushrooms\\nmozzarella'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'SS'\nassert solution('2') == 'SS'\nassert solution('3') == 'RR'\nassert solution('4') == 'RR'\nassert solution('5') == 'PP'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\nPP\\nRR\\nPS') == 'PS'\nassert solution('1\\n3\\nPP\\nRR\\nSS') == 'PS'\nassert solution('2\\n3\\nPP\\nRR\\nSS') == 'PS'\nassert solution('2\\n3\\nPP\\nPP\\nRR\\nSS') == 'PP'\nassert solution('2\\n3\\nPS\\nPP\\nSS') == 'PP'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 5\nRR\nPP\nPS\nPS''') == 'PP'\n\nassert solution('''3 4\nPP\nRR\nPS\nSS''') == 'PP'\n\nassert solution('''3 4\nPS\nRR\nPP\nSS''') == 'PS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 4\nRR\nPS\nSS\n''') == 'SS'"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\nRR\nPP\nPS\n''') == 'PS'\n\nassert solution('''\n3\nRPS\nRPS\nPS\n''') == 'RPS'\n\nassert solution('''\n3\nRPS\nPS\nRPS\n''') == 'RPS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 4\\nPP\\nRR\\nPS\\n\"\n) == \"PS\"\nassert solution(\n    \"3 4\\nRR\\nPP\\n\"\n) == \"PS\"\nassert solution(\n    \"3 4\\nRR\\nRR\\nPS\\n\"\n) == \"PS\"\nassert solution(\n    \"3 4\\nRRRR\\nPPPS\\n\"\n) == \"PS\"\nassert solution(\n    \"3 4\\nPPSS\\nPPP\\n\"\n) == \"PS\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\nPP\\nRR\\nPS\\nSS\") == \"PS\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'SS'\nassert solution('2') == 'R'\nassert solution('3') == 'P'\nassert solution('4') == 'S'\nassert solution('1') == 'R'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\nRR\nPP\n''') == 'PP'\nassert solution('''3\nRR\nPP\nPS\n''') == 'PS'\nassert solution('''4\nRR\nPP\nPS\nSS\n''') == 'PS'\nassert solution('''5\nRR\nPP\nPS\nSS\nPP\n''') == 'SS'\nassert solution('''6\nRR\nPP\nPS\nSS\nPP\n''') == 'SS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'S'\nassert solution('2') == 'S'\nassert solution('3') == 'P'\nassert solution('4') == 'S'\nassert solution('5') == 'R'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"288\"\nassert solution(\"10\") == \"384\"\nassert solution(\"100\") == \"430\"\nassert solution(\"1000\") == \"1300\"\nassert solution(\"100000\") == \"1350000\""
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5\n0.1 2.0\n0\n0\n0\n0\n0\n\"\"\"\n) == \"288.0\"\n\nassert solution(\n\"\"\"\n5\n1\n0\n0\n0\n0\n\"\"\"\n) == \"366.0\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\n0.1 1.0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n''') == '289.01'\nassert solution('''\n100\n0.1 1.0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n''') == '287.9'\nassert solution('''\n100\n0.1 0.9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n''') == '287.9'\nassert solution('''\n100\n0.1 0.9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n''') == '287.9'\nassert solution('''\n100\n0.1 0.9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n''') == '287.9'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5.0') == '288'\nassert solution('0.1') == '108'\nassert solution('0') == '0'\nassert solution('2.0') == '0'\n\nimport sys\nimport math\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '288'\nassert solution('0.1 2.0') == '288'\nassert solution('0.1 0.2') == '0'\nassert solution('0.1 0.2 0.3') == '0'\nassert solution('0.1 0.2 0.3 0.4') == '0'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1') == '0.5'\nassert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0') == '288'\nassert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0') == '288'\nassert solution('1000000000') == '1000000000.0'\nassert solution('1000000000.0') == '1000000000.0'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0.1\n0\n0\n0\n0\nSample Input 2:\n10\n1\n20\n30\n40\n50\n60\n70\n80\n90\n100\nSample Output 2:\n1539.9599659499656\n''') == '1539.9599659499656'\n\nassert solution('''\n9\n0.01\n30\n30\n30\n30\n30\n30\n30\n30\n30\n30\n''') == '815.589614347826'\n\nassert solution('''\n23\n0.1\n20\n30\n40\n50\n60\n70\n80\n90\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '0.0'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1.0'\nassert solution('5') == '288.0'\nassert solution('3') == '3.0'\nassert solution('10') == '6.0'\nassert solution('11') == '11.0'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"45\"\nassert solution(\"6\") == \"197\"\nassert solution(\"3\") == \"45\"\n\nassert solution(\"5\") == \"189\"\n\nassert solution(\"7\") == \"295\""
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('pastimeofwhimsy') == 1\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"a\") == 1\nassert solution(\"aa\") == 2\nassert solution(\"aaaaaaaa\") == 10\nassert solution(\"a\" * 10) == 10\nassert solution(\"aa\" * 10) == 20\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('pastimeofwhimsy') == '1'\n\"\"\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"pastimeofwhimsy\") == \"1\"\nassert solution(\"a\") == \"1\"\nassert solution(\"abc\") == \"2\"\nassert solution(\"aabcccd\") == \"4\"\nassert solution(\"acccd\") == \"4\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('pastimeofwhimsy') == '1'\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('pastimeofwhimsy') == '1'\n\n\"\"\")"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('pastimeofwhimsy') == '1'\nassert solution('abcefg') == '2'\nassert solution('bananas') == '3'\nassert solution('toy') == '1'\nassert solution('day') == '1'\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('pastimeofwhimsy') == '1'\nassert solution('dodgson') == '3'\nassert solution('arghamim') == '4'\n\"\"\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('pastimeofwhimsy') == \"1\"\n\nSample Input:\nGoodbyecat\nSample Output:\n2\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"h\") == \"hi\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 4\n1 2 1\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n2 5\n1 2 2 2 1\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 2 1\") == \"YES\"\nassert solution(\"3 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"9\") == \"YES\"\nassert solution(\"10\") == \"YES\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 2 1\\n') == 'YES'\nassert solution('3 3\\n1 1 1 1\\n') == 'NO'\nassert solution('3 2 1\\n1 1 2\\n') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 4\n1 2 2 1\n''') == 'YES'\n\nassert solution('''\n3 4\n1 2 2 1\n''') == 'NO'\n\nassert solution('''\n1 3\n1 1 1\n''') == 'NO'\n\nassert solution('''\n2 2\n2 1 2\n''') == 'YES'\n\nassert solution('''\n2 2\n3 2 1\n''') == 'NO'"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4\\n1 2 2 1') == 'YES'\nassert solution('3 4\\n1 1 1 1') == 'NO'"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4') == 'YES','sample case'\nassert solution('5 6') == 'NO', 'another sample case'\nassert solution('5 8') == 'YES', 'another sample case'"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 1\\n\") == \"YES\"\nassert solution(\"3 4\\n\") == \"YES\""
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('1 2 2 1') == 'NO'\nassert solution('1 1 2 2') == 'YES'"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n1 2\n3\n4\n\"\"\") == \"3/1\"\nassert solution(\"\"\"\n1\n5\n1 2\n3\n4\n\"\"\") == \"6/5\"\nassert solution(\"\"\"\n1\n10\n1 2\n3\n4\n\"\"\") == \"5/4\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n3') == '3/1'\nassert solution('2 3\\n4') == '2/1'\nassert solution('5 6\\n7 8') == '8/7'"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n4\n1 2\n1 3\n2 4\n''') == \"3/1\"\n\nassert solution('''\n3\n1\n2\n2\n1\n''') == \"3/1\"\n\nassert solution('''\n5\n5\n5\n3\n4\n1\n''') == \"5/5\"\n\nassert solution('''\n5\n2\n5\n3\n4\n1\n''') == \"5/5\"\n\nassert solution('''\n6\n1\n2\n2\n1\n1\n1\n''') == \"2/1\""
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1/2'\nassert solution('3') == '1/3'\nassert solution('4') == '1/4'"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2\\n4') == '1/2'\nassert solution('5 6\\n3') == '3/1'\nassert solution('10 20\\n4 9') == '5/1'"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n5\n3\n\"\"\") == \"3/1\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n4\") == \"7.0\"\nassert solution(\"6\\n1\\n2\\n3\\n4\\n5\") == \"10/9\""
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1 2\n3\n4\n\"\"\") == \"3/1\"\nassert solution(\"\"\"\n2\n1 2\n3\n\"\"\") == \"3/2\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n3\\n\") == \"3/1\"\nassert solution(\"1 2\\n3\\n\") == \"3/2\"\nassert solution(\"10 11\\n3 4 5\\n5 6 7\\n1 2 8\\n8 7 6\\n4 2 5\\n4 5 1\\n3 4 7\\n3 4 1\\n4 3 2\\n5 3 6\\n6 2 5\\n5 1 4\\n1 6 4\\n2 7 3\\n6 2 1\\n7 4 5\\n5 2 1\\n2 6 3\\n7 3 5\\n3 7 6\\n2 1 6\\n4 4 5\\n4 8 3\\n5 3 7\\n2 4 1\\n3 4 1\\n1 5 2\\n5 1 8\\n3 8 7\\n5 8 2\\n4 5 7\\n5 8 5\\n2 8 1\\n3 7 4\\n4 4 6\\n2 4 8\\n2 5 5\\n7 5 4\\n5 2 2\\n6 1 2\\n3 5 5\\n7 3 1\\n2 6 5\\n1 3 7\\n8 2 3\\n3 5 2\\n6 8 1\\n6 7 5\\n8 6 7\\n4 8 1\\n6 4 2\\n7 8 3\\n2 7 3\\n4 8 3\\n7 1 6\\n6 8 1\\n2 7 7\\n1 1 6\\n2 6 5\\n1 3 5\\n5 2 5\\n7 6 7\\n3 8 4\\n6 3 8\\n6 4 8\\n4 5 6\\n7 8 1\\n1 2 4\\n5 4 6\\n3 8 2\\n3 5 1\\n5 3 3\\n2 8 5\\n1 1 1\\n4 5 2\\n5 4 2\\n4 8 3\\n2 2 8\\n2 1 3\\n5 1 1\\n3 2 3\\n2 2 1\\n1 5 3\\n4 1 3\\n4 5 4\\n6 4 4\\n5 2 5\\n5 6 3\\n3 4 1\\n2 3 7\\n5 3 5\\n5 3 3\\n3 1 5\\n6 1 6\\n1 6 3\\n1 4 3\\n2 5 6\\n2 6 6\\n5 6 4\\n2 5 4\\n5 4 2\\n2 5 6\\n3 6 3\\n4 5 2\\n7 2 7\\n5 1 2\\n5 8 3\\n6 1 3\\n5 5 4\\n3 8 8\\n7 6 7\\n1 8 2\\n6 7 1\\n6 4 7\\n8 2 7\\n8 2 2\\n7 2 4\\n3 7 7\\n4 4 2\\n6 4 3\\n4 3 4\\n6 5 4\\n6 1 4\\n5 2 6\\n2 7 4\\n5 3 3\\n4 4 2\\n8 2 8\\n5 3 5\\n2 5 4\\n2 3 3\\n6 4 2\\n1 1 7\\n5 1 8\\n6 6 6\\n1 1 5\\n4 5 4\\n4 5 6\\n8 3 4\\n6 2 1\\n4 6 1\\n5 3 7\\n6 3 1\\n6 7 4\\n8 4 8\\n3 7 3\\n5 4 4\\n3 4 7\\n8 1 7\\n8 2 4\\n2 1 4\\n6 6 3\\n3 3 2\\n2 2 8\\n5 3 1\\n2 4 3\\n1 2 5\\n3 2 6\\n2 5 2\\n1 5 8\\n3 2 4\\n3 1 2\\n8 4 6\\n8 6 3\\n1 1 5\\n5 8 3\\n1 5 4\\n3 6 4\\n7 1 3\\n6 2 8\\n5 1 6\\n1 6 3\\n7 2 7\\n5 5 6\\n4 6 2\\n6 5 8\\n4 4 6\\n2 5 1\\n3 3 3\\n5 1 2\\n2 2 6\\n5 6 2\\n2 4 4\\n3 6 2\\n1 1 6\\n7 4 1\\n4 5 2\\n5 1 7\\n1 6 7\\n1 4 1\\n3 4 7\\n6 6 6\\n2 3 5\\n5 3 1\\n1 2 7\\n2 8 3\\n3 6 3\\n4 5 7\\n8 6 6\\n8 5 3\\n1 4 6\\n2 1 6\\n8 7 6\\n6 5 1\\n4 3 8\\n5 5 1\\n4 8 3\\n5 3 3\\n4 7 5\\n6 8 2\\n2 2 1\\n7 3 1\\n4 3 6\\n2 8 5\\n7 6 4\\n1 2 5\\n7 4 8\\n4 8 8\\n4 8 5\\n1 4 8\\n6 7 2\\n1 4 7\\n4 4 6\\n3 8 5\\n2 6 2\\n2 3 3\\n2 6 3\\n8 7 6\\n1 6 7\\n7 4 1\\n1 7 2\\n3 5 4\\n8 6 1\\n5 6 2\\n3 3 7\\n5 5 3\\n4 6 5\\n4 2 5\\n8 2 2\\n7 5 2\\n5 6 7\\n6 3 3\\n1 4 6\\n6 3 1\\n5 2 6\\n8 6 3\\n8 5 3\\n2 7 5\\n4 5 7\\n3 4 3\\n2 8 4\\n1 4 5\\n5 2 8\\n6 1 7\\n5 4 4\\n8 8 4\\n2 8 1\\n6 1 6\\n4 2 5\\n7 3 2\\n8 2 4\\n2 7 4\\n7 6 8\\n3 2 7\\n4 2 2\\n2 3 7\\n8 3 7\\n2 7 6\\n4 4 4\\n3 1 1\\n4 6 1\\n4 1 8\\n2 5 8\\n8 7 3\\n2 6 2\\n2 4 1\\n2 6 5\\n7 3 5\\n2 4 2\\n4 8 4\\n2 3 1\\n2 5 4\\n5 5 1\\n1 2 6\\n7 6 8\\n8 7 3\\n6 1 3\\n6 8 1\\n2 4 6\\n7 3 3\\n5 4 2\\n3 4 6\\n4 4 2\\n5 4 6\\n6 7 3\\n3 4 3\\n7 1 5\\n1 2 7\\n6 5 6\\n6 1 4\\n3 2 1\\n1 8 8\\n8 3 6\\n5 4 4\\n6 6 5\\n1 2 1\\n2 8 4\\n5 1 8\\n8 6 3\\n4 6 3\\n6 5 2\\n1 7 6\\n3 4 2\\n7 8 4\\n5 3 4\\n4 5 6\\n5 4 4\\n7 6 5\\n5 4 2\\n1 2 5\\n2 8 3\\n2 2 6\\n4 8 1\\n7 5 1\\n4 4 2\\n4 3 4\\n5 3"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '7/5'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1.2 10.2\\n2.2 15.2') == \"1.114672365\"\nassert solution('5\\n1.2 1.2 1.2 1.2 1.2') == \"1.11452365\""
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1.2 10.2\n2.2 15.2\n''') == '1.114672365'\nassert solution('''\n5\n0.16 0.20\n0.17 0.23\n0.18 0.24\n0.19 0.25\n0.21 0.26\n''') == '0.292542956'\nassert solution('''\n100\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001 0.000001\n0.000001"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1.2 10.2\n2.2 15.2''') == '1.114672365'\nassert solution('''5\n1.2 1.2 1.2 1.2 1.2\n2.2 2.2 2.2 2.2 2.2\n3.2 3.2 3.2 3.2 3.2\n4.2 4.2 4.2 4.2 4.2\n5.2 5.2 5.2 5.2 5.2''') == '8.843689859'\nassert solution('''5\n1.2 1.2 1.2 1.2 1.2\n2.2 2.2 2.2 2.2 2.2\n3.2 3.2 3.2 3.2 3.2\n4.2 4.2 4.2 4.2 4.2\n5.2 5.2 5.2 5.2 5.2''') == '33.28348862'\n\n'''"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1.1429993197'\nassert solution('1') == '0.0'"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0.0000'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0.0\"\nassert solution(\"1\") == \"0.0\"\nassert solution(\"1.2\") == \"0.0\"\nassert solution(\"2.2\") == \"1.0\"\nassert solution(\"2.2\") == \"1.0\"\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.2 10.2') == '1.114672365'\nassert solution('2.2 15.2') == '1.117304072'\nassert solution('4.4 6.6') == '1.119807866'\nassert solution('10.2 10.2') == '1.114672365'\nassert solution('15.2 15.2') == '1.117304072'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1.2 10.2\\n2.2 15.2') == '1.1142', \"Wrong answer\"\nassert solution('1\\n1') == '1', \"Wrong answer\"\nassert solution('1\\n1.2') == '1.1142', \"Wrong answer\"\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1.11404495'\n\"\"\"\n\n__author__ = 'artem_meron'\n\nn = int(input())\n\nL = list(map(int, input().split()))\nR = list(map(int, input().split()))\n\nL.sort()\nR.sort()\n\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        ans += L[i] - R[j]\n\nprint(ans/n**2)\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1.2 10.2') == '1.114680301'\nassert solution('2.2 15.2') == '0.440120032'\nassert solution('1.2 1.2') == '0.00000'\nassert solution('2.2 1.2') == '0.0'\nassert solution('3.2 1.2') == '0.0'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 3\n1 1\n2 1\n2 0\n''') == '3 1 2 3'\nassert solution('''\n4\n0 3\n1 1\n2 1\n2 0\n''') == '2 1 1'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1 2 3'\nassert solution('4') == '1 2 3 4'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0 3\n1 1\n2 1\n2 0\n''') == '''\n3\n1 2 3 2\n'''\n\nassert solution('''\n1\n1\n2\n3\n''') == '''\n1\n1\n1\n1\n'''\n\nassert solution('''\n2\n2\n1\n1\n''') == '''\n1\n1\n1\n1\n'''\n\nassert solution('''\n5\n1 5\n2 0\n1 3\n3 4\n4 1\n2 0\n''') == '''\n1\n2 1 2 2\n1 1 1 2\n2 2 1 1\n2 1 1 1\n'''\n\nassert solution('''\n8\n1 5\n2 0\n1 3\n3 4\n4 1\n2 0\n1 3\n2 0\n1 0\n''') == '''\n1\n2 2 2 1\n1 1 1 2\n1 1 1 1\n2 1 1 1\n1 1 1 1\n2 2 1 1\n1 1 1 1\n2 1 1 1\n1 1 1 1\n1 1 1 1\n'''\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 3\\n1 1\\n2 1\\n2 0\\n') == '3 1 2 3 2'\n\"\"\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3\\n2 1\\n2 0\\n') == '1 2 3 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n0 3\n1 1\n2 1\n2 0\n''') == '3 1 2 2'\nassert solution('''\n1\n0 1\n''') == '1'\nassert solution('''\n1\n1 0\n''') == '1 1'\nassert solution('''\n1\n2 0\n''') == '1 1 1'\nassert solution('''\n1\n1 1\n''') == '1 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n0 3\n1 1\n2 1\n2 0\n\"\"\") == \"3 1 2 1\"\nassert solution(\"\"\"\n3\n1 2 3\n1 1\n1 0\n\"\"\") == \"2 1 2 1\"\nprint('Done!')"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"4\") == \"1 2 3 2\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '3 2 1 2'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1 2 3'\nassert solution('5') == '4 3 2 1 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\nassert solution('4') == '1 2 3'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('4') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"none\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3') == '3'\nassert solution('4\\n1 2 1 3') == 'none'"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('4') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\n1 2 3\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n3\n1 1 2\n\"\"\") == \"none\"\nassert solution(\n\"\"\"\n4\n1 1 2 2\n\"\"\") == \"none\""
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('3 2 3') == '3'\nassert solution('5 1 1 2 3') == '1'\nassert solution('2 1 1 2 2 1 2 1 2 3') == '1'\nassert solution('3 2 2') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n2\\n1\\n1\\n3') == 'none'\nassert solution('1\\n1\\n2\\n1\\n1\\n3') == 'none'\nassert solution('3\\n2\\n1\\n2\\n3\\n1') == '1'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2 3') == '1'\nassert solution('3\\n1 2 1 3') == '1'\nassert solution('4\\n1 1 2 1 3') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '1\nassert solution('''\n3\n1 1 2\n''') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 3\n''') == '1'\nassert solution('''3\n1 1 2\n''') == 'none'\nassert solution('''4\n1 1 2 1 3\n''') == 'none'\nassert solution('''5\n1 1 2 2 3\n''') == 'none'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n2 1 0 1 2 3 3') == '5'\n\nstdin = '6\\n2 1 0 1 2 3 3'\nprint(solution(stdin))\n\n\"\"\"\n\n\"\"\"\nsolution(stdin):\nInput\n\nA number N, N is the number of pebbles. It is guaranteed that the length of the line of pebbles is N. It is guaranteed that the sequence of numbers of dark spots on the pebbles is the same as the order of the pebbles in the wetland.\n\nOutput\n\nA single integer denoting the distance of the pebble which can be reached by a sequence of jumps.\n\nConstraints\n1\u2264N\u22641000000\n1\u2264i\u2264N\n0\u2264P[i]\u226410^9\n1\u2264j\u2264i\nThere is exactly one pebble where the sum of the spots on the pebbles is equal to the distance between them.\n\nSample Input:\n7\n2 1 0 1 2 3 3\nSample Output:\n5\n\n\"\"\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1 0 1 2 3 3\n''') == '5'\nassert solution('''\n7\n2 1 0 1 2 3 3\n''') == '6'\nassert solution('''\n10\n3 7 5 3 1 8 1 0 6 3\n''') == '6'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 0 1 2 3 3') == '5'\nassert solution('1\\n2 1 0 1 2 3 3') == '3'\nassert solution('3\\n1 1 0 1 2 3 3') == '3'\nassert solution('8\\n1 1 0 1 2 3 3 4 5 5 5') == '10'\nassert solution('3\\n1 1 0 1 2 3 3 4 5 5') == '8'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 0 1\n2 1 2\n3 1 3\n''') == '5'\nassert solution('''\n5\n2 1 0 1 2 3 3\n5 2 4 6 7 8 9 10 11 12 13 14\n6 1 6 1 6 1 6 1\n11 2 1 2 1 1 1 1 1 1\n12 1 1 2 1 1 1 1 1\n13 2 1 2 1 1 1 1\n14 1 1 1 1 1 1 1\n''') == '12'\n\nassert solution('''\n3\n1 0 1\n2 1 2\n3 1 3\n4 2 2 2\n5 2 1 2\n''') == '4'\n\nassert solution('''\n5\n2 1 0 1 2 3 3\n5 2 4 6 7 8 9 10 11 12 13 14\n6 1 6 1 6 1 6 1\n11 2 1 2 1 1 1 1 1 1 1\n12 1 1 2 1 1 1 1 1 1\n13 2 1 2 1 1 1 1 1\n14 1 1 1 1 1 1 1 1\n''') == '12'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7\n2 1 0 1 2 3 3\n''') == \"5\"\nassert solution('''\n7\n2 0 1 1 2 3 3\n''') == \"5\"\nassert solution('''\n7\n0 0 1 1 2 3 3\n''') == \"0\"\nassert solution('''\n7\n0 0 1 1 2 3 2\n''') == \"1\"\nassert solution('''\n7\n0 0 1 1 2 3 2\n''') == \"0\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n3 2 1 0 1 2\n''') == '3'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"5\"\nassert solution([7, 2, 1, 1, 2, 3, 3]) == \"5\""
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n') == '5'\nassert solution('3\\n2 3 2\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n2 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n2 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\n1 2 1\\n3 2 2\\n2 2 1\\"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7\\n2 1 0 1 2 3 3') == '5'\nassert solution('7\\n2 2 2 0 1 1') == '4'\nassert solution('7\\n2 2 0 0 1 1') == '3'\nassert solution('7\\n2 1 2 1 2 2') == '4'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n#####\\n#_###\\n_M.#\\n__.#\\n#####\") == \"4 4 5 6 -1\\n4 4 -1 -1 -1\\n4 1 0 1 -1\\n3 1 2 -1 -1\\n-1 -1 -1 -1 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 6\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 6\\n#####\\n#_###\\n_M.#\\n__.#\\n#####') == '-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1\\n'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6\") == \"1 4 5 6 -1\"\nassert solution(\"5 2\") == \"1 4 -1 -1 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n_###\\n_M.#\\n__.#\\n#####\") == \"4 4 5 6 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '1 3 2 -1'\nassert solution('3 1 2') == '3 2 1 -1'\nassert solution('4 6') == '4 5 6 -1'\nassert solution('7 8') == '7 8 6 -1'\nassert solution('4 5') == '-1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 6\n#####\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    4 6 1\n    1\n    1 2 1\n    1 3 1\n    1 4 1\n    2 3 2\n    2 4 4\n    3 4 3\n    \"\"\"\n) == \"6\"\n\"\"\"\nExplanation:\nThe city of RMRCity has an estimate of the cost of connecting any two buildings that are not in the same room. The following building is connected to building 2, which can be connected to building 4.\n\"\"\""
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 6 1') == '6'\nassert solution('4 6 1') == '12'\nassert solution('4 6 1') == 'impossible'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\\n\") == \"6\"\nassert solution(\"8 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\\n4 5 3\\n\") == \"impossible\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\nassert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'Impossible'\nassert solution('''\n4 6 2\n1 2 1\n1 3 1\n2 4 2\n1 4 1\n3 5 2\n1 6 1\n3 5 3\n''') == 'Impossible'\n'''\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\\n\") == \"6\"\nassert solution(\"6 4 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\\n\") == \"7\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 1\") == \"Impossible\"\nassert solution(\"3 3 1\") == \"2\"\nassert solution(\"5 5 3\") == \"Impossible\"\nassert solution(\"6 6 2\") == \"4\""
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\n\nassert solution('''\n4 7 1\n1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 1\n2 3 2\n2 4 2\n3 4 3\n3 5 2\n3 6 2\n4 5 2\n4 6 2\n5 6 2\n''') == '4'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\\n') == '6'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\nassert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'Impossible'\nassert solution('''\n4 6 2\n1\n1 2 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 1\n''') == '10'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"1 1 2 2\") == \"0\"\nassert solution(\"2 1 2 1\") == \"10\"\nassert solution(\"1 1 1 1\") == \"11\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 4 2 1''') == '01001'\nassert solution('''8 3 6 5''') == '01110'\nassert solution('''8 3 6 5''') == '01110'\nassert solution('''8 3 6 5''') == '01110'\nassert solution('''8 3 6 5''') == '01110'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4 2 1') == '01001'\n'''"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"4 2 1\") == \"101\"\nassert solution(\"5 2 1\") == \"11111\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '01001'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"01001\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4 1\") == \"0111\"\nassert solution(\"3 4 2 1\") == \"0110\"\nassert solution(\"7 7 7\") == \"11101\"\nassert solution(\"1 1 1\") == \"1110\"\nassert solution(\"3 3 3\") == \"11111\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '01001'\nassert solution(stdin) == '01001'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('1 4 2 1') == '01010'\nassert solution('2 4 2 1') == '01010'\nassert solution('1 4 4 2 1') == '01010'\nassert solution('2 4 4 2 1') == '01010'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\"\"\") == \"possible\"\n\nassert solution(\"\"\"3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n4 4\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == \"possible\"\nassert solution('''2 3 5\n0 1\n1 1\n1 0\n1 1\n2 1\n2 2\n3 3\n3 4\n4 4\n4 5\n5 5\n5 6\n6 6\n6 7\n7 7\n7 8\n8 8\n8 9\n9 9\n9 10\n10 10\n10 11\n11 11\n11 12\n12 12\n12 13\n13 13\n13 14\n14 14\n14 15\n15 15\n15 16\n16 16\n16 17\n17 17\n17 18\n18 18\n18 19\n19 19\n19 20\n20 20\n20 21\n21 21\n21 22\n22 22\n22 23\n23 23\n23 24\n24 24\n24 25\n25 25\n25 26\n26 26\n26 27\n27 27\n27 28\n28 28\n28 29\n29 29\n29 30\n30 30\n30 31\n31 31\n31 32\n32 32\n32 33\n33 33\n33 34\n34 34\n34 35\n35 35\n35 36\n36 36\n36 37\n37 37\n37 38\n38 38\n38 39\n39 39\n39 40\n40 40\n40 41\n41 41\n41 42\n42 42\n42 43\n43 43\n43 44\n44 44\n44 45\n45 45\n45 46\n46 46\n46 47\n47 47\n47 48\n48 48\n48 49\n49 49\n49 50\n50 50\n50 51\n51 51\n51 52\n52 52\n52 53\n53 53\n53 54\n54 54\n54 55\n55 55\n55 56\n56 56\n56 57\n57 57\n57 58\n58 58\n58 59\n59 59\n59 60\n60 60\n60 61\n61 61\n61 62\n62 62\n62 63\n63 63\n63 64\n64 64\n64 65\n65 65\n65 66\n66 66\n66 67\n67 67\n67 68\n68 68\n68 69\n69 69\n69 70\n70 70\n70 71\n71 71\n71 72\n72 72\n72 73\n73 73\n73 74\n74 74\n74 75\n75 75\n75 76\n76 76\n76 77\n77 77\n77 78\n78 78\n78 79\n79 79\n79 80\n80 80\n80 81\n81 81\n81 82\n82 82\n82 83\n83 83\n83 84\n84 84\n84 85\n85 85\n85 86\n86 86\n86 87\n87 87\n87 88\n88 88\n88 89\n89 89\n89 90\n90 90\n90 91\n91 91\n91 92\n92 92\n92 93\n93 93\n93 94\n94 94\n94 95\n95 95\n95 96\n96 96\n96 97\n97 97\n97 98\n98 98\n98 99\n99 99\n99 100\n100 100\n100 101\n101 101\n101 102\n102 102\n102 103\n103 103\n103 104\n104 104\n104 105\n105 105\n105 106\n106"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4 6') == 'possible'\nassert solution('4 6 2') == 'impossible'\nassert solution('10 10 4') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n3 5\") == \"impossible\"\nassert solution(\"2 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"impossible\"\nassert solution(\"2 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n4 4\") == \"impossible\"\nassert solution(\"2 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n5 5\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"impossible\"\n'''\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'possible'\nassert solution('''\n4 4 4\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'impossible'\n'''\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'possible'\n\nassert solution([3,4,6]) == 'impossible'\nassert solution([1,1,2,2,3,3,4,4,5,5,6,6]) == 'possible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"impossible\"\nassert solution([3, 4, 6]) == \"possible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 6') == 'possible'\nassert solution('5 5 4') == 'impossible'\nassert solution('5 6 4') == 'impossible'"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n') == '2.0'\nassert solution('2\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n') == '4.0'\nassert solution('1\\n0 0 1\\n1 0 2\\n2 1 3\\n2 0 3\\n') == '3.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n') == \"2.0\"\nassert solution('15\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n2 0 4\\n2 1 4\\n3 0 5\\n3 1 5\\n3 0 6\\n3 1 6\\n3 0 7\\n3 1 7\\n3 0 8\\n3 1 8\\n3 0 9\\n3 1 9\\n3 0 10\\n3 1 10\\n') == \"9.0000000000000\"\nassert solution('1\\n0 0 1\\n') == \"1.0\"\nassert solution('1\\n0 0 1\\n0 0 1\\n') == \"1.0\"\nassert solution('3\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n') == \"3.0\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n''') == '2.0'\nassert solution('''\n5\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n0 2 4\n0 3 4\nSample Input:\n6\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n0 2 4\n0 3 4\n2 5 5\nSample Output:\n3.141592653589793\n''') == '3.141592653589793'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n') == '2.0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n') == '2.0'"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n0 1 1\n0 1 1\n0 1 1\n2 0 3\n2 1 3\nSample Output:\n3.0\n''') == '3.0', 'Should return the minimum distance in order to visit all the planets.'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n\"\"\") == \"2.0\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n''') == '2.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0.0\"\nassert solution(\"2 0 1\") == \"2.0\"\nassert solution(\"2 0 1\") == \"2.0\"\nassert solution(\"2 0 1\") == \"2.0\"\nassert solution(\"2 0 1\") == \"2.0\"\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"2\"\nassert solution(\"7\") == \"3\"\nassert solution(\"7\") == \"1\"\n\nSample Input:\n5\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n5 5 1 1 3 4 7\n2 5 1 4 3 6 7\nSample Output:\n4\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\\\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n3 4 1 5 2 7\"\"\") == \"1\"\nassert solution(\"\"\"7\n1 3 4 5 6 7\n7 5 4 2 3 1\n5 4 7 2 3 6\"\"\") == \"2\"\nassert solution(\"\"\"7\n1 3 4 5 6 7\n7 5 4 2 3 1\n5 4 7 2 3 6\"\"\") == \"0\"\nassert solution(\"\"\"7\n3 4 1 5 2 7\n7 5 4 2 3 1\n5 4 7 2 3 6\"\"\") == \"3\"\nassert solution(\"\"\"7\n3 4 1 5 2 7\n7 5 4 2 3 1\n5 4 7 2 3 6\"\"\") == \"0\"\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 5 4 3 2 1 6 7\") == \"4\"\nassert solution(\"7 5 5 1 1 3 4 7\") == \"3\"\nassert solution(\"3 7 1 4 5 6 2\") == \"4\"\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\nassert solution('9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 7 8 9') == '0'\nassert solution('1000\\n17  23  13  2  50  9  5  16  3  7  6  50  12  8  11  4  7  10  5  11  17  10  2  8  16  15  8  13  6  5  10  5  9  17  11  12  10  8  13  1  6  6  13  9  17  12  7  2  3  7  9  11  11  6  6  4  10  11  5  9  11  1  8  14  8  12  7  1  9  4  5  4  3  5  4  2  6  2  6  3  7  4  4  5  6  1  6  4  5  3  2  3  7  2  6  1  4  5  1  7  5  9  9  1  6  7  5  6  6  3  6  2  1  5  1  9  2  8  9  3  3  7  8  4  1  7  2  5  8  7  2  6  1  7  5  1  6  2  5  7  1  4  6  9  4  7  7  5  3  3  7  6  1  3  4  5  8  8  3  6  2  5  2  6  7  5  3  2  5  6  5  4  7  3  6  1  2  5  8  2  1  6  8  6  8  7  1  3  2  4  1  6  5  1  2  7  9  8  3  6  6  7  5  1  3  3  7  1  2  8  5  3  7  9  1  4  1  6  5  3  8  1  2  6  6  1  1  1  2  6  8  1  7  8  6  8  7  1  4  6  1  3  3  1  7  2  8  2  4  4  7  1  4  2  3  1  1  8  4  9  7  9  5  7  1  8  4  7  1  9  3  5  4  5  2  1  7  8  7  4  1  6  9  7  4  7  2  5  5  2  8  4  1  9  3  6  5  6  7  8  4  2  5  1  9  7  8  5  6  6  7  1  2  1  1  3  8  1  4  9  2  4  5  2  1  4  3  4  8  6  2  2  5  6  4  3  7  2  7  2  9  8  1  7  2  1  4  1  7  6  5  8  4  3  1  7  1  7  3  1  7  2  4  5  7  2  1  5  1  2  6  3  2  6  5  8  1  2  7  2  9  9  5  1  7  6  1  7  8  1  3  4  1  2  3  4  3  1  6  5  7  9  2  1  6  5  1  6  7  4  4  8  1  2  8  2  7  2  2  8  1  5  8  2  4  1  1  2  8  6  1  4  4  9  4  1  7  4  5  3  1  1  2  9  6  1  6  1  2  2  1  3  5  8  1  7  8  2  1  3  1  1  6  2  4  9  4  2  4  3  7  1  1  9  4  3  6  5  7  8  1  2  8  1  3  1  6  3  2  6  6  4  8  2  5  5  1  5  5  2  4  7  8  6  2  4  5  2  3  2  4  4  2  7  3  3  1  4  6  7  1  3  8  2  2  6  6  2  2  1  6  1  1  4  9  6  1  5  2  1  7  8  3  1  6  2  1  7  5  4  1  9  9  6  1  2  8  7  1  7  4  1  2  2  4  2  1  4  3  7  1  5  1  4  8  4  5  3  1  1  1  2  7  7  2  3  5  9  5  1  3  3  6  1  1  2  3  2  5  5  1  4  2  8  7  1  2  2  1  1  5  5  3  1  8  8  3  2  1  7  6  8  6  9  2  1  7  9  1  1  4  3  1  2  3  2  4  2  7  2  6  7  7  3  3  4  6  2  9  2  2  7  5  3  4  1  5  3  1  1  1  8  8  1  5  7  1  4  4  2  1  6  1  7  3  2  5  6  5  2  7  8  2  4  5  8  1  9  1  7  5  9  1  4  3  7  1  7  8  1  1  4  2  3  4  7  5  4  3  1  1  8  2  9  4  2  8  3  1  1  4  6  6  2  5  7  3  3  8  3  2  8  1  3  2  9  4  1  2  2  1  1  8  6  1  3  3  1  2  2  1  1  9  1  2  4  3  3  4  6  1  3  3  1  5  1  1  2  2  8  3  8  9  "
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '4'\nassert solution('4') == '5'\nassert solution('5') == '5'\nassert solution('6') == '5'\nassert solution('7') == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2''') == '4'\nassert solution('''8\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n1 2 4 6 8 7 9''') == '3'\nassert solution('''1\n1 1 1 1 1 1\n1 1 1 1 1 1''') == '1'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '1'\n\n'''\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\nassert solution('5\\n6 5 8 7 4 2\\n5 7 6 4 8 2\\n5 5 8 6 7 4\\n7 8 5 6 5 4') == '3'\nassert solution('4\\n5 1 6 3 2\\n7 3 9 8 2\\n1 9 8 9 2\\n2 9 8 3 2') == '1'\nassert solution('5\\n5 8 7 6 4\\n6 7 6 5 4\\n5 5 8 6 7 4\\n7 6 5 4 8\\n5 5 7 6 7 4') == '4'\nassert solution('3\\n1 8 2 7\\n1 7 2 8\\n1 7 8 2') == '0'"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n''') == \"4\"\n\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == \"5\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('5\\n-10 0\\n-10 10') == '2'\nassert solution('5\\n-10 0\\n-10 10\\n-20 -10\\n-20 20') == '3'\nassert solution('5\\n-10 0\\n-10 10\\n-20 -10\\n-20 20\\n-30 -20\\n-30 -10\\n-30 20') == '4'\nassert solution('5\\n-10 0\\n-10 10\\n-20 -10\\n-20 20\\n-30 -20\\n-30 -10\\n-30 20') == '3'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n-10 0\n-10 10\n''') == '2'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n-10 0\n-10 10\n''') == '2'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n-10 -10\n-10 -10\n''') == '3'\nassert solution('''\n5\n0 0\n0 10\n''') == '4'\nassert solution('''\n5\n-10 -10\n-10 10\n''') == '1'\n'''"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '2'\nassert solution('10') == '2'\nassert solution('-10 -10') == '3'\nassert solution('10 10') == '3'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\nassert solution([\n    \"6\",\n    \"1 2\",\n    \"4 5\",\n    \"3 7\",\n    \"2 8\",\n    \"7 4\",\n    \"6 5\",\n]) == \"3\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 5\n1\n0\n10\n11\n2\n4\n5\n6\n7\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 5\n''') == '0'\nassert solution('''1 9\n''') == '1'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 5\") == \"0\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"10 10\") == \"2\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 5\n''') == '0'\nassert solution('''\n1 1\n''') == '1'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 5\n''') == '0'\nassert solution('''\n10 5\n''') == '1'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == '0'\nassert solution('1 5') == '0'\nassert solution('1 2') == '2'\nassert solution('1 4') == '1'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 5\n''') == '0'\nassert solution('''\n2 3\n''') == '2'\nassert solution('''\n100 1\n''') == '100'\nassert solution('''\n1 100000000\n''') == '0'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 5\") == \"0\"\nassert solution(\"2 5\") == \"1\"\nassert solution(\"10 100\") == \"99\"\nprint(\"Congratulations! All test cases passed\")"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5') == '0'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0 0'\nassert solution('5 5\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '1 1'\nassert solution('5 5\\n2 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '2 1'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n''') == '0 0\\n1 1'\nassert solution('''\n2 1\n1 0\n0 1\n1 0\n0 1\n0 0 1\n''') == '1 1'\nassert solution('''\n4 4\n0 0\n1 1\n1 1\n0 0\n''') == '0 0 1 1\\n1 0 1 0\\n0 1 1 0\\n1 1 0 0'\nassert solution('''\n12 3\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '0 0\\n1 1'\nassert solution('3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '1 1'\nassert solution('1 1\\n0 1\\n0 0\\n3 3') == '0 0'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n''') == '0 0'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n\") == \"0 0\\n1 1\"\nassert solution(\"6 1\\n1 0\\n0 1\\n0 0\\n0 0\\n0 1\\n\") == \"0 0\\n1 1\"\nassert solution(\"6 2\\n0 0\\n1 1\\n0 1\\n1 0\\n1 0\\n\") == \"0 0\\n1 1\"\nassert solution(\"100 100\\n0 0\\n1 1\\n0 1\\n1 0\\n1 0\\n\") == \"0 0\\n1 1\"\nassert solution(\"6 2\\n0 0\\n1 1\\n0 1\\n1 0\\n1 0\\n\") == \"0 0\\n1 1\""
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"0 0\\n1 1\\n\""
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 0\\n0 1') == '0 0'\nassert solution('3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '0 0'\nassert solution('3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0 0'\nassert solution('5 5\\n1 0 1 1 1\\n1 1 1 1 0\\n1 1 1 0 1\\n0 1 1 1 1\\n0 0 1 0 1') == '0 0'\nassert solution('2 2\\n1 0\\n0 1') == '0 0'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0 0\\n1 1'\n'''"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4\\n1 0\\n0 1\\n3 3') == '0 0\\n1 1\\n'"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 0\\n0 1') == '0 0'\nassert solution('3 3\\n1 0 0 1 0\\n0 1 0 0 1\\n0 0 1 1 0') == '1 1'"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 0.950000\\n0.700000 50\") == \"44.975\""
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n\"\"\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 2 0.950000\n0.700000 50\n\"\"\") == \"44.975\"\nassert solution(\"\"\"\n5 5 1.000000\n1 3 1.000000\n0 2 1.000000\n0 1 1.000000\n0 1 0.000000\n\"\"\") == \"25.75\"\nassert solution(\"\"\"\n1 4 1.000000\n3 3 1.000000\n0 2 1.000000\n0 1 1.000000\n0 1 0.000000\n\"\"\") == \"25.75\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 0.950000\\n0.700000 50\") == \"44.975\"\nassert solution(\"6 2 0.950000\\n0.700000 50\\n1 2 0.950000\\n0.700000 50\\n1 2 0.950000\\n0.700000 50\\n1 2 0.950000\\n0.700000 50\\n1 2 0.950000\\n0.700000 50\\n1 2 0.950000\\n0.700000 50\\n1 2 0.950000\\n0.700000 50\\n1 2 0.950000\\n0.700000 50\\n1 2 0.950000\\n0.700000 50\\n1 2 0.950000\\n0.700000 50\\n1 2 0.950000\\n0.700000 50\\n1 2 0.950000\\n0.700000 50\") == \"46.188122578186\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 0.950000\") == \"44.975\"\nprint(solution(input()))\n\"\"\"\nimport math\nfrom decimal import Decimal\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 0.950000') == '44.975'\nassert solution('1 1 0.950000') == '16.67'\nassert solution('2 2 0.950000') == '11.75'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 0.950000') == '44.975'\nassert solution('3 1 0.950000') == '0.1075'\n\"\"\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 0.950000\n0.700000 50\n''') == '44.975', 'First'\nassert solution('''\n1 2 0.955000\n0.700000 50\n''') == '45.1036', 'Second'\nassert solution('''\n2 1 0.950000\n0.700000 50\n''') == '72.8079', 'Third'\nassert solution('''\n4 1 0.950000\n0.700000 50\n''') == '89.5989', 'Fourth'\nassert solution('''\n4 1 0.950000\n0.700000 50\n''') == '89.595', 'Fifth'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2 0.950000\n0.700000 50''') == '44.975'\nassert solution('''7 2 0.950000\n0.700000 50\n0.100000 50\n0.100000 50\n0.100000 50\n0.100000 50\n0.100000 50\n0.100000 50''') == '60.750000'\nassert solution('''8 3 0.950000\n0.700000 50\n0.100000 50\n0.100000 50\n0.100000 50\n0.100000 50\n0.100000 50\n0.100000 50\n0.100000 50''') == '68.750000'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3\") == \"2\"\nassert solution(\"2 2 3\") == \"2\""
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2 3\") == \"IMPOSSIBLE\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 3') == '2'\nassert solution('3 3 5 2') == '2'\nassert solution('5 3 2 4') == '1'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2 3\n1 1\n5 2\n1 3\n3''') == '2'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n''') == '2'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 2 3\n1 1\n5 2\n1 3\n3\"\"\") == \"2\"\nassert solution(\"\"\"5 2\n1 1\n3\n2\n1\n3\nSample Input:\n3 1\n1 1\n5 1\n1 3\n1\nSample Output:\n2\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n1 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n    \"\"\") == \"2\"\nassert solution(\n    \"\"\"\n4 3\n2 3\n1 1\n4 5\n3 3\n2 1\n1 4\n    \"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4 3') == '3'\nassert solution('3 2 3') == 'IMPOSSIBLE'\nassert solution('3 2 4') == '4'"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 'IMPOSSIBLE'\nassert solution('2 1 2') == '2'\nassert solution('1 2 3') == '2'\nassert solution('2 1 3') == 'IMPOSSIBLE'\n\n\"\"\""
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\nprint(solution(*[input() for _ in range(int(input()))]))\n\"\"\""
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\nassert solution('2 3\\n0.0 6.0\\n6.0 0.0\\n0.0 7.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '5.0'\nassert solution('2 2\\n0.0 6.0\\n6.0 0.0\\n0.0 7.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '2.0'\nassert solution('1 1\\n0.0 6.0\\n6.0 0.0\\n0.0 7.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('3 1') == '0.2'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('5 5') == '45.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '4.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('9 3') == '12.0'\nassert solution('20 3') == '33.0'\n\n\"\"\""
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('20 12') == '36.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('1 1') == '1.0'\nassert solution('2 2') == '1.0'\nassert solution('5 5') == '6.0'"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0\n\"\"\") == \"4.0\"\nassert solution(\"\"\"\n4 4\n0.0 1.0\n1.0 0.0\n1.0 1.0\n0.0 1.0\n2.0 2.0\n2.0 1.0\n\"\"\") == \"11.0\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0\n\"\"\") == \"4.0\"\nassert solution(\"\"\"\n3 1\n1.0 1.0\n2.0 2.0\n\"\"\") == \"3.0\"\nassert solution(\"\"\"\n1 1\n0.0 0.0\n\"\"\") == \"0.0\"\n\"\"\"\nEXPLANATION\n\nThe first test input:\n\n0.0 6.0\n6.0 0.0\n6.0 6.0\nThe input for the second test input:\n\n1.0 1.0\n2.0 2.0\nThere are 3 points, so the triangle is not a real point.\n\nThe third test input:\n\n1.0 1.0\n2.0 2.0\nThere are 2 points, so the triangle is a real point.\n\nThe fourth test input:\n\n1.0 1.0\n2.0 2.0\nThere are 3 points, so the triangle is not a real point.\n\nThe fourth test input:\n\n1.0 1.0\n2.0 2.0\nThere are 2 points, so the triangle is a real point.\n\n\"\"\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10\\n150 20\\n180 30\\n190 30\\n200 9\\n220 29') == '18000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n220 29\n195 20\n200 9\n180 30\n''') == '18000'\nassert solution('''\n10\n220 30\n195 20\n200 9\n180 30\n120 150\n''') == '40500'\nassert solution('''\n3\n220 30\n195 20\n120 150\n''') == '20000'\nassert solution('''\n5\n220 30\n195 20\n180 30\n120 150\n''') == '30000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n220 29\\n195 20\\n200 9\\n180 30\\n') == '18000'\nprint('PASSED')\n\n'''\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n220 29\n195 20\n200 9\n180 30\n''') == '18000'\nassert solution('''\n2\n6\n3\n5\n''') == '0'\nassert solution('''\n100\n300\n600\n300\n900\n''') == '900000'"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n220 29\n195 20\n200 9\n180 30\nSample Output:\n18000\n\"\"\") == \"18000\"\n\nassert solution(\"\"\"\n2\n250 250\n200 20\n280 30\nSample Output:\n16500\n\"\"\") == \"16500\"\n\nassert solution(\"\"\"\n3\n100 100\n200 20\n300 30\nSample Output:\n7500\n\"\"\") == \"7500\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n220 29\n195 20\n200 9\n180 30\n''') == '18000'\nassert solution('''\n4\n220 29\n195 20\n200 9\n180 30\n''') == '18000'\nassert solution('''\n3\n-10\n-10\n-10\n''') == '0'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n220 29\\n195 20\\n200 9\\n180 30\\n\") == \"18000\"\nassert solution(\"3\\n1\\n3\\n10\\n5\\n\") == \"90000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n220 29\n195 20\n200 9\n180 30\n''') == '18000'\n\nassert solution('''\n7\n168 160\n144 130\n168 158\n172 150\n144 156\n144 165\n''') == '384'"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n220 29\n195 20\n180 30\n''') == '18000'\nassert solution('''\n1\n1\n''') == '1001'\nassert solution('''\n2\n1\n2\n''') == '2000'\nassert solution('''\n3\n2\n1\n3\n''') == '3000'\nassert solution('''\n4\n220 220 220 220\n195 195 195 195\n200 9 9 9\n180 30 30 30\n''') == '180000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"BUYSTICKERS\") == \"IMPOSSIBLE\"\nassert solution(\"STICKY\") == \"10\"\nassert solution(\"TICKERS\") == \"28\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"BUYSTICKERS\"\n) == \"BUYER\"\n\"\"\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"BUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\"\"\") == \"28\"\nassert solution(\"\"\"BUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\nTICKERS 1\nERS 10\nTICKERS 1\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"BUYSTICKERS\n4\nBUYER 10\nERS 8\nTICKERS 1\nERS 10\nTICKERS 1\"\"\") == \"28\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('BUYSTICKERS') == '28'\nassert solution('TICKERS') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''BUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n''') == '28'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\nassert solution(\"TICKERS\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('BUYSTICKERS') == '28'\nassert solution('4') == 'IMPOSSIBLE'\nassert solution('5') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"BUYSTICKERS\") == \"IMPOSSIBLE\"\nassert solution(\"4\") == \"28\"\nassert solution(\"4\") == \"28\"\nassert solution(\"TICKERS\") == \"28\"\nassert solution(\"2\") == \"22\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == \"28\""
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"BUYSTICKERS\\n\"\n    \"4\\n\"\n    \"BUYER 10\\n\"\n    \"STICKY 10\\n\"\n    \"TICKERS 1\\n\"\n    \"ERS 8\"\n) == \"28\"\n\nassert solution(\n    \"BUYSTICKERS\\n\"\n    \"10\\n\"\n    \"BUYER 10\\n\"\n    \"STICKY 10\\n\"\n    \"TICKERS 1\\n\"\n    \"ERS 8\\n\"\n    \"ERS 10\\n\"\n    \"ERS 8\\n\"\n    \"ERS 10\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n    \"BUYSTICKERS\\n\"\n    \"20\\n\"\n    \"BUYER 1\\n\"\n    \"STICKY 2\\n\"\n    \"BUYER 1\\n\"\n    \"STICKY 2\\n\"\n    \"TICKERS 5\\n\"\n    \"ERS 8\\n\"\n    \"ERS 10\\n\"\n    \"ERS 8\\n\"\n    \"ERS 10\"\n) == \"28\"\n\nassert solution(\n    \"BUYSTICKERS\\n\"\n    \"20\\n\"\n    \"BUYER 1\\n\"\n    \"STICKY 2\\n\"\n    \"BUYER 1\\n\"\n    \"STICKY 2\\n\"\n    \"TICKERS 5\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 10\\n\"\n    \"ERS 10\\n\"\n    \"ERS 10\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 10\\n\"\n    \"ERS 10\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 10\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 10\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \"ERS 8\\n\"\n    \""
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 8') == 'INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\\nCORP 2'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 8') == 'INDV 1\\nINDV 4\\nCORP 1\\nINDV 5\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 2\\nCORP 4\\n'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([5, 3, 8]) == 'INDV 1 CORP 2 INDV 4 CORP 1 INDV 3 CORP 1 INDV 5 CORP 2'\nassert solution([10, 10, 9]) == 'INDV 9 CORP 9 INDV 9 CORP 9 INDV 9 CORP 9 INDV 9 CORP 9'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 8') == 'INDV 2'\nassert solution('1 1') == 'INDV 1'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n''') == 'INDV 2 CORP 2 INDV 4 CORP 2 INDV 5'\nassert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n''') == 'INDV 4 CORP 2 INDV 5'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 8\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\"\nassert solution(\"10 5 8\") == \"INDV 5\\nINDV 6\\nINDV 7\\nINDV 8\\nCORP 2\\nINDV 9\\nINDV 10\\nINDV 11\\nINDV 12\\nCORP 1\"\nassert solution(\"7 3 4\") == \"INDV 2\\nCORP 2\\nINDV 1\\nCORP 1\\nINDV 5\\nCORP 3\\nINDV 4\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n''') == 'INDV 2'\nassert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n''') == 'CORP 4'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3''') == 'INDV 1\\nCORP 1\\nINDV 2\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\\nCORP 5'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3 8') == 'INDV 1'\nassert solution('1 1') == 'INDV 1'\nassert solution('2 1') == 'INDV 1'\nassert solution('3 1') == 'INDV 2'\nassert solution('4 2') == 'CORP 2'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n''') == 'INDV 2'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0.0000000000000000\"\nassert solution(\"3\") == \"0.0\"\nassert solution(\"5\") == \"2.14285714285714\"\nassert solution(\"9\") == \"2.414213562373095\"\nassert solution(\"10\") == \"3.16227766016837\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n3 1\\n4\\n1\\n5\\n1') == \"3.7777777777777778\"\nassert solution('7\\n1 1\\n10\\n3 1\\n6 1\\n9 1\\n7 1\\n5 2\\n7 2\\n5 2\\n8 2\\n5 2\\n6 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8 2\\n5 2\\n7 2\\n8"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1.7320508075688772\"\nassert solution(\"100\") == \"2.1739130434782608\"\nassert solution(\"3\") == \"1.7320508075688772\"\nassert solution(\"1000\") == \"0.9999999999999998\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n0\\n10\\n10') == '0.4142135624'\nassert solution('4\\n10 1\\n1\\n0\\n10\\n10') == '2.4142135624'\nassert solution('3\\n10 1\\n1\\n0\\n10\\n10') == '4.0'\nassert solution('6\\n10 1\\n1\\n0\\n10\\n10') == '3.1428571429'\nassert solution('1\\n1\\n0\\n10\\n10\\n10') == '2.4142135624'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n5 1\\n1\\n10\\n10') == \"2.4142135624\"\nassert solution('4\\n10 1\\n1\\n10') == \"2.0\"\nassert solution('5\\n1 1\\n1\\n10\\n10') == \"2.0\"\nassert solution('4\\n10 1\\n1\\n10') == \"4.0\"\nassert solution('5\\n1 1\\n1\\n10\\n10') == \"2.0\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0.33333333333'\nassert solution('3') == '0.33333333333'\nassert solution('4') == '1.4142135624'\nassert solution('5') == '1.4142135624'\nassert solution('6') == '2.0'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == \"0.8\"\nassert solution('4') == \"0.333333333333333333\"\nassert solution('5') == \"0.6666666666666666666666666667\"\nassert solution('10') == \"0.0\"\nassert solution('100') == \"3.333333333333333333333333333\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n10 1\n1\n0\n10\n10''') == '2.4142135624'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2.4142135624\"\nassert solution(\"5\\n10 1\\n0\\n10\\n10\") == \"2.4142135624\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n5 1\n1\n0\n8\n4\n''') == '6.4142135624'\nassert solution('''\n7\n3 5\n1\n0\n4\n1\n1\n1\n''') == '5.4142135624'\nassert solution('''\n20\n30 20\n1\n''') == '40.4142135624'\nassert solution('''\n10\n8\n8\n8\n7\n6\n5\n4\n3\n2\n''') == '16.2382608765'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"15\\n\", \"Should be 15\\n\"\nassert solution(\"3\") == \"15\\n\", \"Should be 15\\n\"\nassert solution(\"3\") == \"15\\n\", \"Should be 15\\n\""
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\nassert solution(\"\"\"\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\nassert solution(\"\"\"\n4\n2 5 4 5\n2 5 4 2\n5 5 4 2\n2 5 4 2\n\"\"\") == \"12\"\nassert solution(\"\"\"\n1\n1\n3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\nassert solution(\"\"\"\n4\n3 3 6\n4 4 4\n5 5 4\n1 1\n6 5\n1 3\n3 4\n5 3\n\"\"\") == \"11\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n2 1\n2 1\n2 1\n2 1\n''') == \"15\"\n\"\"\"\n[1, 2, 5, 7, 7, 6, 6, 4, 4]\n[3, 1, 5, 7, 7, 6, 6, 4, 4]\n[2, 1]\n[5, 0]\n[1, 3]\n\"\"\""
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 5') == '15'\nassert solution('3 1 5') == '10'\nassert solution('2 1') == '5'\nassert solution('5 0') == '10'\nassert solution('1 3') == '7'"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3\\n\"\n    \"1 2 5\\n\"\n    \"3 1 5\\n\"\n    \"2 1\\n\"\n    \"5 0\\n\"\n    \"1 3\"\n) == \"15\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 5\\n3 1 5\\n2 1\") == \"15\"\nassert solution(\"3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3\\nSample Output:\") == \"4\"\n\"\"\"\n\n\"\"\"\nRead a given string, change the character at a given index and then print the modified string.\n\nInput Format:\nThe first line contains a integer $n$ denoting the length of the string.\nThe second line contains a string.\nThe third and fourth lines contain integers $a$ and $b$ respectively.\n\nOutput Format:\nPrint the modified string.\n\nSample Input:\n5\nGeeksForGeeks\n5 1\n1 2\n2 3\n3 4\n4 5\nSample Output:\nGeeks\nWe\nFor\nGeeks\n\n\"\"\"\n\n\"\"\"\nGiven an array arr[] of N distinct numbers and a target value, the task is to find all elements in the array whose sum is equal to the target value.\n\nInput:\nThe first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case consists of two lines. The first line of each test case contains an integer N denoting the size of the array. The second line of each test case contains N space separated integers denoting the elements of the array. The third and fourth lines of each test case contains an integer K denoting the target value.\n\nOutput:\nPrint the list of elements which are equal to the target value.\n\nConstraints:\n1 <= T <= 100\n1 <= N <= 107\n1 <= arr[i] <= 105\n1 <= K <= 105\n\nExample:\nInput:\n2\n4\n1 3 5 2\n4\n2 5 1 3\n4\n2\nOutput:\n3 5\n2\n\"\"\"\n\n\"\"\"\nInput Format:\nThe first line of input contains a single integer N.\nThe next N lines each contain an integer Ai.\n\nOutput Format:\nPrint all the integers from 1 to N that don't appear in any other integer sequence.\n\nSample Input:\n4\n1 2 3 3\n1 2 4 5\n5 1 3 2\n5\n\nSample Output:\n1\n3\n\n\"\"\"\n\n\"\"\"\nGiven a string, print all the subsequences of the given string that are palindromes.\n\nInput:\nThe first line of input contains a single integer T denoting the no of test cases. Then T test cases follow. Each test case consists of a single string S.\n\nOutput:\nPrint all the subsequences of the given string that are palindromes.\n\nConstraints:\n1 <= T <= 100\n1 <= |S| <= 100\n\nExample:\nInput:\n2\na\naabaa\nOutput:\na aa\na aaa\na aaaa\na aaabb\na aaaba\na aaabbb\na aaabbbb\na aaabbbc\na aaabbc\na aaabbcb\na aaabbcc\na aaabbccb\na aaabbcbc\na aaabbcbcb\na aaabbcbcbc\na aaabbcbcbcc\na aaabbcbcbccb\na aaabbcbcbccbc\na aaabbcbcbccbcc\na aaabbcbcbccbbc\na aaabbcbcbccbbcb\na aaabbcbcbccbbcc\na aaabbcbcbccbbcbb\na aaabbcbcbccbbcbbc\na aaabbcbcbccbbcbbcb\na aaabbcbcbccbbcbbcc\na aaabbcbcbccbbcbbccb\na aaabbcbcbccbbcbbccc\na aaabbcbcbccbbcbbcccb\na aaabbcbcbccbbcbbcccbc\na aaabbcbcbccbbcbbcccbcbc\na aaabbcbcbccbbcbbcccbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc\na aaabbcbcbccbbcbbcccbcbcbcbcbcbcbcbcbcbcbc"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\n\nassert solution('''\n3\n5 1 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\n\nassert solution('''\n5\n5 1 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\n\nassert solution('''\n5\n5 1 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\n\nassert solution('''\n5\n1 3\n0 1\n2 1\n3 1\n1 1\n''') == '5'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''\n2\n1 2\n1 1\n''') == '3'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n3 1 5\\n3 1 5\\n2 1\\n5 0\\n1 3') == '15'\nassert solution('3\\n1 2 5\\n3 1 5\\n2 1\\n5 0\\n1 3') == '15'\nassert solution('4\\n3 1 2\\n2 3\\n1 3\\n2 1\\n2 3') == '8'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1') == 'ABCABCABC'\nassert solution('5\\n5\\n3\\n3\\n4') == '...AB.@.@.@.A.'\n\n\"\"\"\nimport math\nimport re\nimport sys"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5 3 5\") == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\n\n\"\"\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5 3 3 4\") == \"....C\\n@DDDD\\n.....\\n..BBC\\n..A.C\\n\"\n\n--PEP-8--"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5 3 3 4\\n') == 'ABCDD\\n'\nassert solution('10 10 20 10 20\\n') == '...........@\\n.@..@..@..@.\\n....@....@....\\n...@...@...@.\\n....@....@....\\n.@..@..@..@.\\n...@...@...@.\\n.@..@..@..@.\\n.@..@..@..@.\\n.@..@..@..@.\\n'\nassert solution('10 20 10 20\\n') == '...........@\\n.@..@..@..@.\\n....@....@....\\n...@...@...@.\\n....@....@....\\n.@..@..@..@.\\n...@...@...@.\\n.@..@..@..@.\\n.@..@..@..@.\\n.@..@..@..@.\\n'\n\"\"\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3 3 4\") == '.....\\n.BBBC\\n..AA.\\n....C\\n@DDDD'\n\"\"\""
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 3 3 4') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD\\n'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5 3 3 4\\n') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\n\"\"\"\n\nclass ZigzagMatrix:\n\n    def __init__(self, r: int, c: int):\n        self.r = r\n        self.c = c\n        self.matrix = [[None for _ in range(c)] for _ in range(r)]\n    \n    def print_matrix(self):\n        print(\"\\n\".join([\"\".join([str(x) for x in row]) for row in self.matrix]))\n\n    def print_matrix_recursive(self, i, j):\n        if i == self.r or j == self.c or self.matrix[i][j] is None:\n            return\n        \n        self.matrix[i][j] = '@'\n        self.print_matrix_recursive(i+1, j)\n        self.print_matrix_recursive(i, j+1)\n        self.print_matrix_recursive(i+1, j+1)\n        self.matrix[i][j] = '.'\n        self.print_matrix_recursive(i-1, j)\n        self.print_matrix_recursive(i, j-1)\n        self.print_matrix_recursive(i-1, j-1)\n\n    def print_matrix_iterative(self, i: int, j: int) -> None:\n        pass\n\n    def clean(self):\n        pass"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5 3 3 4') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\nassert solution('1 1 1 1 1') == '@'\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5 3 3 4\") == \".....\\n..BBC\\n..A.C\\n....C\\n@DDDD\\n\""
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '001'\nassert solution('6 3') == '000'\nassert solution('3 4') == '100'\nassert solution('13 10') == '1001'\n\nInput:\nThe input consists of:\n - one line containing the integers $n$ and $m$ ($1 \\le n \\le 40$, $1 \\le m \\le 400$), the number of numbers and the number of digits in each number, respectively.\n - $n$ lines each containing an integer $v$ ($0 \\le v < 10^{m}$). The numbers are zero-padded to exactly $m$ digits.\n\nSample Output:\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3\n111\n001\n000\n111\n000''') == '0010111000'\nassert solution('''5 3\n111\n001\n000\n111\n000''') == '0010111000'\nassert solution('''5 3\n111\n001\n000\n111\n000''') == '0010111000'\nassert solution('''5 3\n111\n001\n000\n111\n000''') == '0010111000'\nassert solution('''5 3\n111\n001\n000\n111\n000''') == '0010111000'\n\n-----Hints-----\n* `str.zfill(length)` can be used to zero-pad strings of numbers to a certain length.\n\n* `sorted(iterable, key=None, reverse=False)` can be used to sort the elements of an iterable.\n\n* The `min(...)` function can be used to find the smallest element of an iterable.\n\"\"\""
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"001\"\nassert solution(\"6 3\") == \"001\"\nassert solution(\"8 3\") == \"001\"\nassert solution(\"12 3\") == \"001\"\nassert solution(\"14 3\") == \"001\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\nassert solution(\"5 5\\n1111\\n1111\\n1111\\n1111\\n1111\") == \"1111\\n1111\\n1111\\n1111\\n1111\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\n111\n001\n000\n111\n000''') == '001'\nassert solution('''5 2\n11\n1''') == '11'\nassert solution('''5 3\n111\n001\n000\n111\n000''') == '001'\nassert solution('''3 3\n111\n001\n000''') == '111'\nassert solution('''4 3\n111\n001\n000''') == '111'\n\n\"\"\"\nfrom itertools import permutations\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n111\\n001\\n000\\n111') == '001\\n001\\n001\\n111\\n200'\nassert solution('5 3\\n111\\n001\\n000\\n111') == '001\\n001\\n001\\n111'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\n') == '21\\n','min change is 0'\nassert solution('1 2\\n') == '12\\n','min change is 1'\nassert solution('1 1\\n') == '11\\n','min change is 1'\nassert solution('1 0\\n') == '11\\n','min change is 1'\nassert solution('1 9\\n') == '11\\n','min change is 1'\n\n----------------------------------------\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n111\\n001\\n111\\n000\\n111\\n000\\n') == '001\\n001\\n001\\n111\\n200\\n'\nassert solution('6 3\\n1234\\n1234\\n1234\\n1234\\n1234\\n') == '1234\\n1234\\n1234\\n1234\\n1234\\n'\nassert solution('6 3\\n1234\\n1234\\n1234\\n1234\\n1234\\n') == '1234\\n1234\\n1234\\n1234\\n1234\\n'\nassert solution('7 3\\n1234\\n1234\\n1234\\n1234\\n1234\\n1234\\n') == '1234\\n1234\\n1234\\n1234\\n1234\\n1234\\n1234\\n'\nassert solution('7 3\\n1234\\n1234\\n1234\\n1234\\n1234\\n1234\\n') == '1234\\n1234\\n1234\\n1234\\n1234\\n1234\\n1234\\n'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n111\\n001\\n111\\n000\\n111\\n000') == '001\\n001\\n001\\n111\\n200'\nassert solution('5 3\\n111\\n001\\n111\\n000\\n111\\n000\\n111\\n000') == '111\\n111\\n111\\n111\\n111'\nassert solution('5 3\\n111\\n001\\n111\\n000\\n111\\n000\\n111\\n000\\n111\\n000') == '111\\n111\\n111\\n111\\n111'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '001'\nassert solution('5 1') == '00100'\nassert solution('5 2') == '001'"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''19/13\n10/1\n19/14\n4/3''') == '10 20'\n\nassert solution('''19/13\n10/1\n19/14\n4/3''') == '10 15 14 13 7 2'\n\nassert solution('''19/13\n10/1\n19/14\n4/3''') == '10 20'\n\nassert solution('''4/3\n20/7\n19/7\n10/1''') == '20 15 14 13 7 2'\n\nassert solution('''4/3\n20/7\n19/7\n10/1''') == '20 20'"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10'\nassert solution('19/14') == '19 20'\nassert solution('4/3') == '4 6 5'\nassert solution('20/7') == '20'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10'\nassert solution('19/14') == '20'\nassert solution('4/3') == '7'\nassert solution('20/7') == '2'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\\n') == '17 15 14 13 7 2'\nassert solution('1') == '1'\nassert solution('13') == '13'\nassert solution('1/3') == '1/3'\nassert solution('1/2') == '1'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('19/13\\n') == '19 20'\nassert solution('10/1\\n') == '10 1'\nassert solution('19/14\\n') == '19 1'\nassert solution('4/3\\n') == '4 3'\nassert solution('20/7\\n') == '20 7'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''19/13\n10/1\n19/14\n4/3\n20/7\n19/7\n20/13\n19/15\n10/7\n20/17\n19/2\n19/17\n''') == '20 15 14 13 7 2'\n\nprint(solution('''19/13\n10/1\n19/14\n4/3\n20/7\n19/7\n20/13\n19/15\n10/7\n20/17\n19/2\n19/17\n'''))\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"19/13\") == \"19 20\"\nassert solution(\"10/1\") == \"10 10\"\nassert solution(\"19/14\") == \"10 10\"\nassert solution(\"4/3\") == \"4 4 4\"\nassert solution(\"20/7\") == \"7 6 6 5 4 3\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10 1'\nassert solution('19/14') == '19 14'\nassert solution('4/3') == '4 3'\nassert solution('20/7') == '20 7'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('19/13\\n10/1') == '19 20'\nassert solution('19/14\\n4/3') == '19 20'\nassert solution('4/3\\n19/14\\n19/7') == '19 20'\nassert solution('19/7\\n20/13\\n19/15') == '19 20'\nassert solution('19/13\\n10/7\\n19/2\\n19/17\\n4/3') == '19 20'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"19/13\") == \"20 17 14 13 7 2\"\nassert solution(\"10/1\") == \"19 20\"\nassert solution(\"19/14\") == \"17 15 14 13 7 2\"\nassert solution(\"4/3\") == \"19 20\"\nassert solution(\"20/7\") == \"17 15 14 13 7 2\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"impossible\"\nassert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"possible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'possible'\nassert solution('1 2') == 'impossible'\nassert solution('2 2 2') == 'impossible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    5 3\n    0 0\n    0 2\n    2 0\n    1 2 3\n    2 2 2\n    3 0 3\n    \"\"\"\n) == \"possible\"\nassert solution(\n    \"\"\"\n    6 6\n    0 0\n    0 2\n    2 0\n    1 2 3\n    2 2 2\n    3 0 3\n    \"\"\"\n) == \"possible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'possible'\nassert solution('5 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\nSample Input 2:\n6 4\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n4 4\n5 2\n6 2\nSample Output 2:\nimpossible\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"possible\"\nassert solution(\"1 3\") == \"possible\"\nassert solution(\"2 0\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"possible\"\nassert solution(\"5 4\") == \"possible\"\nassert solution(\"1 10\") == \"impossible\""
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n\"\"\") == \"possible\"\nassert solution(\"\"\"\n4 3\n1 1\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n\"\"\") == \"impossible\"\n\"\"\"\n    \n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"possible\"\nassert solution(\"0 0\") == \"possible\"\nassert solution(\"1 2\") == \"impossible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"possible\"\nassert solution(\"4 3\\n0 0\\n0 2\\n2 0\\n1 2 3\") == \"impossible\"\nassert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\") == \"possible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == 'impossible'\nassert solution('0 0') == 'possible'\n\n\"\"\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"4\""
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 2\n2\n2\n''') == '4'\nassert solution('''\n4 2\n2\n3\n''') == '3'\nassert solution('''\n4 2\n2\n3\n''') == '2'\n'''\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2\n2\n2\n2\n''') == \"4\"\nassert solution('''3 1\n1\n3\n''') == \"3\"\nprint('PASSED')\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1 2 3'\nassert solution('4 2') == '1 2 3 4'"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\n2\n2\n2\n''') == \"4\"\nassert solution('''\n3 2\n1\n2\n''') == \"3\"\nassert solution('''\n2 2\n1\n2\n''') == \"2\"\nassert solution('''\n3 3\n3\n1\n2\n''') == \"3\"\nassert solution('''\n4 3\n1\n2\n3\n''') == \"4\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2\n1\n3\n2\n2\n3\n''') == \"4\"\nassert solution('''\n4 2\n1\n3\n2\n2\n3\n''') == \"4\"\nassert solution('''\n4 1\n1\n3\n2\n2\n''') == \"3\"\nassert solution('''\n4 2\n1\n3\n2\n2\n3\n''') == \"3\"\nassert solution('''\n4 2\n1\n3\n2\n2\n3\n''') == \"3\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\n2\n2\n3\n''') == '4'\nassert solution('''\n10 3\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '10'\nassert solution('''\n10 7\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '5'\nassert solution('''\n2 2\n1 1\n''') == '2'"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2\\n2\\n2\\n') == '4'\nassert solution('3 3\\n1\\n2\\n') == '3'\nassert solution('2 5\\n3\\n2\\n') == '2'\nassert solution('2 5\\n2\\n2\\n') == '2'\nassert solution('5 5\\n4\\n4\\n3\\n4\\n') == '5'"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '4'\n\nassert solution('2 2') == '2'\n\nassert solution('2 1') == '1'\n\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 2\\n2 1\\n2 1\\n') == '4'\nassert solution('2 5\\n3 2\\n1 4\\n3 2\\n3 2\\n') == '6'"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1\\n1 2\\n1 3\\n') == 'Mirko'\nassert solution('10\\n1 1\\n1 2\\n1 3\\n') == 'Slavko'\nassert solution('10\\n1 1\\n1 2\\n1 3\\n') == 'Mirko'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n') == 'Mirko'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == 'Mirko'\nassert solution('2 2') == 'Mirko'\nassert solution('3 1') == 'Slavko'\nassert solution('3 2') == 'Slavko'\nassert solution('3 3') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"Mirko\"\nassert solution(\"2\\n1 1\\n1 2\") == \"Slavko\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1\\n2 2\\n3 3\\n1 3\\n') == 'Slavko'\nassert solution('6\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n1 3\\n') == 'Mirko'\nassert solution('12\\n5 4\\n4 5\\n4 6\\n4 5\\n2 2\\n') == 'Slavko'\nassert solution('100\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n1 10\\n') == 'Slavko'\nassert solution('10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n1 10\\n') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 1\n1 2\n1 3\n2 2\n2 3\n3 3\n''') == 'Mirko'\n\nassert solution('''\n5\n1 1\n1 2\n1 3\n2 2\n2 3\n3 3\n''') == 'Slavko'\n\nassert solution('''\n3\n1 1\n1 2\n1 3\n''') == 'Slavko'\n\nassert solution('''\n10\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 2\n2 3\n2 4\n2 5\n2 6\n2 7\n3 3\n3 4\n3 5\n3 6\n3 7\n4 4\n4 5\n4 6\n4 7\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n''') == 'Slavko'\n\nassert solution('''\n4\n1 1\n1 2\n1 3\n2 2\n2 3\n3 3\n''') == 'Mirko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''2\n3 4\n3 4''') == 'Slavko'\nassert solution(\n'''1\n2\n3\n4\n5''') == 'Mirko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'Mirko'\n\nassert solution('4') == 'Slavko'\n\nassert solution('5') == 'Slavko'\n\n\"\"\""
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1\\n1 2\\n1 3') == 'Mirko'\nassert solution('3\\n1 1\\n1 2\\n1 3') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == 'Mirko'\nassert solution('5') == 'Slavko'\nassert solution('5') == 'Mirko'\nassert solution('5') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'Mirko'\nassert solution('2') == 'Slavko'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2 4\"\nassert solution(\"1 2 3 4\") == \"2 4\""
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n6\n34\n38\n''') == '2 4'\nassert solution('''\n5\n1\n2\n4\n6\n''') == '5'\nassert solution('''\n5\n1\n2\n4\n6\n3\n''') == '4'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2 4'\nassert solution('3') == '2 4'\nassert solution('6') == '2 4'\nassert solution('4') == '2 4'\nassert solution('15') == '2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    4\n    25\n    1\n    2\n    ''') == '2 4'\n    \n    assert solution('''\n    2\n    1\n    1\n    1\n    ''') == '2'\n    \n    assert solution('''\n    6\n    1\n    10\n    30\n    11\n    30\n    30\n    ''') == '2 4'\n''')\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\\\n5\n4\n5\n3\n5\n\"\"\") == \"2 4\"\n\n\"\"\""
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n6\n34\n38\n''') == '2 4'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2 4\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n7\n9\n''') == '2 4'\nassert solution('''\n3\n5\n7\n''') == '1 2 3 4'\n\"\"\"\n--- Day 14: Docking Data ---\n--- Part Two ---\nIt\u2019s getting pretty hot out there. The Elves are having a lunch break, so they\u2019ve decided to write a program to help them find the right balance between using too much data and crashing their program.\n\nEach Elf is assigned a single-digit ID. They begin by pairing up all of the available IDs and giving one to each Elf. Then, they\u2019ll start sending data by repeatedly asking for the next Elf\u2019s ID and checking whether it matches the previous ID. If it does, they add that ID to their list and move on. If it doesn\u2019t, they skip that ID and keep looking for the next Elf.\n\nFor example, suppose you\u2019re assigned the following IDs:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nThen, you could potentially go from 1 \u2192 2 \u2192 3 \u2192 4 \u2192 5 \u2192 6 \u2192 7 \u2192 8 \u2192 9 \u2192 10.\n\nSuppose you\u2019re assigned the following IDs:\n\n1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n21\n23\n25\n27\n29\n31\n33\n35\n37\n39\n41\n43\n45\n47\n49\n51\n53\n55\n57\n59\n61\n63\n65\n67\n69\n71\n73\n75\n77\n79\n81\n83\n85\n87\n89\n91\n93\n95\n97\n99\n101\n103\n105\n107\n109\n111\n113\n115\n117\n119\n121\n123\n125\n127\n129\n131\n133\n135\n137\n139\n141\n143\n145\n147\n149\n151\n153\n155\n157\n159\n161\n163\n165\n167\n169\n171\n173\n175\n177\n179\n181\n183\n185\n187\n189\n191\n193\n195\n197\n199\n201\n203\n205\n207\n209\n211\n213\n215\n217\n219\n221\n223\n225\n227\n229\n231\n233\n235\n237\n239\n241\n243\n245\n247\n249\n251\n253\n255\n257\n259\n261\n263\n265\n267\n269\n271\n273\n275\n277\n279\n281\n283\n285\n287\n289\n291\n293\n295\n297\n299\n301\n303\n305\n307\n309\n311\n313\n315\n317\n319\n321\n323\n325\n327\n329\n331\n333\n335\n337\n339\n341\n343\n345\n347\n349\n351\n353\n355\n357\n359\n361\n363\n365\n367\n369\n371\n373\n375\n377\n379\n381\n383\n385\n387\n389\n391\n393\n395\n397\n399\n401\n403\n405\n407\n409\n411\n413\n415\n417\n419\n421\n423\n425\n427\n429\n431\n433\n435\n437\n439\n441\n443\n445\n447\n449\n451\n453\n455\n457\n459\n461\n463\n465\n467\n469\n471\n473\n475\n477\n479\n481\n483\n485\n487\n489\n491\n493\n495\n497\n499\n501\n503\n505\n507\n509\n511\n513\n515\n517\n519\n521\n523\n525\n527\n529\n531\n533\n535\n537\n539\n541\n543\n545\n547\n549\n551\n553\n555\n557\n559\n561\n563\n565\n567\n569\n571\n573\n575\n577\n579\n581\n583\n585\n587\n589\n591\n593\n595\n597\n599\n601\n603\n605\n607\n609\n611\n613\n615\n617\n619\n621\n623\n625\n627\n629\n631\n633\n635\n637\n639\n641\n643\n645\n647\n649\n651\n653\n655\n657\n659\n661\n663\n665\n667\n669\n671\n673\n675\n677\n679\n681\n683\n685\n687\n689\n691\n693\n695\n697\n699\n701\n703\n705\n707\n709\n711\n713\n715\n717\n719\n721\n723\n725\n727\n729\n731\n733\n735\n737\n739\n741\n743\n745\n747\n749\n751\n753\n755\n757\n759\n761\n763\n765\n767\n769\n771\n773\n775\n777\n779\n781\n783\n785\n787\n789\n791\n793\n795\n797\n799\n801\n803\n805\n807\n809\n811\n813\n815\n817\n819\n821\n823\n825\n827\n829\n831\n833\n835\n837\n839\n841\n843\n845\n847\n849\n851\n853\n855\n857\n859\n861\n863\n865\n867\n869\n871\n873\n875\n877\n881\n883\n885\n887\n889\n891\n893\n895\n897\n899\n901\n903\n905\n907\n909\n911\n913\n915\n917\n919\n921\n923\n925\n927\n929\n931\n933\n935\n937\n939\n941\n943\n945\n947\n949\n951\n953\n955\n957\n959\n961\n963\n965\n967\n969\n971\n973\n975\n977\n979\n981\n983\n985\n987\n989\n991\n993\n995\n997\n999\n\nFind the number of each letter and how many times each letter appears in the above sequence.\n\nNotes\nA single letter is not considered to have a consecutive repetition. For example, the letter 'a' does not count as a repetition of itself.\nThe resulting numbers should be sorted by the frequency of letters, so \"bc\" is listed as \u201c1\u201d, not as \u201c2\u201d.\nLetters are always in the range 'a' to 'z'.\n\"\"\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2 4'\nprint(solution())\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2 4\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"12\""
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '12'\nassert solution('5') == '12'"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '12'\nassert solution('5') == '12'"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n4\n10000 400000 500000 900000\n\"\"\") == \"12\"\nassert solution(\n\"\"\"\n5\n8 10 2 1000000 30556926000\n\"\"\") == \"12\"\nassert solution(\n\"\"\"\n6\n8 9 1 1000000 1000000\n\"\"\") == \"12\"\nassert solution(\n\"\"\"\n6\n8 9 1 1000000 1000000\n\"\"\") == \"12\""
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"12\"\nassert solution(\"5\") == \"12\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2\n1\n1\n4\n10\n11\n''') == '12'\nassert solution('''\n7\n4\n10 20 30 40 50 60\n2\n3\n1 2\n3\n4\n5\n6\n7\n''') == '13'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\nassert solution('''\n5\n600000 800000 800000 300000\n''') == '0'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\nassert solution('''\n6\n10000 400000 500000 900000 2000000 300000\n''') == '15'\nassert solution('''\n7\n10000 400000 500000 900000 2000000 300000 2000000\n''') == '15'\nassert solution('''\n8\n10000 400000 500000 900000 2000000 300000 2000000 2000000\n''') == '18'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"12\""
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '12'\nassert solution('5') == '12'\nassert solution('6') == '12'\nassert solution('7') == '12'\nassert solution('8') == '12'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 8') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('8 1') == 'NO'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    8 8\n    0\n    2 4 0\n    1 8 0\n    8 5 0\n    4 3 7 0\n    5 2 6 0\n    1 6 0\n    7 3 0\n    \"\"\") == \"YES\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'YES'\nassert solution('8 10\\n0\\n2 1 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'NO'\nassert solution('8 10\\n0\\n2 1 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'NO'\nassert solution('8 10\\n0\\n2 1 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'NO'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 8') == 'YES'\nassert solution('0') == 'NO'\nassert solution('8') == 'NO'\nassert solution('5 4 0') == 'NO'\nassert solution('5 2 0') == 'NO'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0''') == 'YES'\n'''\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 8') == 'YES'\nassert solution('8 8') == 'NO'"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES'\nprint('YOUR CODE TAKES {} LINES TO RUN'.format(count_lines(stdin='''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''')))\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 8') == 'YES'\nassert solution('4 1') == 'NO'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES'\nassert solution('''2 3 4 5\n10\n10\n9\n''') == 'NO'\nassert solution('''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'NO'\nassert solution('''5 5\n10\n10\n9\n''') == 'YES'\nassert solution('''5 5\n20\n20\n10\n''') == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0''') == 'YES'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 2') == \"5 6 1 2 3 4\"\nassert solution('12 2') == \"3 4 6 1 2 5 8 7 9 12\"\nassert solution('4 4') == \"3 4 5 6\"\nassert solution('10 10') == \"4 4 5 6 7 8 9\"\nassert solution('3 3') == \"3\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 5 6 1 2') == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4'\nassert solution('''5 4 5 1 2 3 4\n''') == '5 1 2 3 4 5'\nassert solution('''5 5 5 5 5 5\n''') == '5 1 2 3 4 5'\nassert solution('''5 6 6 5 4 4\n''') == '5 1 2 3 4 5'\nassert solution('''10 8 10 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n''') == '9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n''') == '10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n''') == '10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"Impossible\"\nassert solution(\"1 2\") == \"3 2\"\nassert solution(\"4 4\") == \"1 2 3 4\""
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"5 6 1 2 3 4\""
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n7 4\n2 3 4 5 6 1 2\n\"\"\") == \"\"\"5 6 1 2 3 4\"\"\"\nassert solution(\"\"\"\n5 4\n2 3 4 5 1 2\n\"\"\") == \"\"\"5 1 2 3 4\"\"\"\nassert solution(\"\"\"\n4 4\n1 2 3 4\n\"\"\") == \"\"\"1 2 3 4\"\"\"\nassert solution(\"\"\"\n6 4\n1 2 3 4 5 6\n\"\"\") == \"\"\"1 2 3 4 5\"\"\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 2\") == \"5 6 1 2 3 4\""
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 2\n3 4 5 6 1 2''') == '5 6 1 2 3 4'\n''')\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"1 1 1 3 1 1 3 1 1 1\"\n) == \"1 3 1 2 1 1 1 1 1 3\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n\n---\n\nSample Input:\n6 3\n1 2 4 3 1 2\nSample Output:\n3 1 2 4 1 2\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 4') == '20512'\nassert solution('4 2 4') == '20504'\nassert solution('5 2 4') == '20504'\nassert solution('5 3 4') == '20504'\nassert solution('10 2 4') == '20504'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 2 8 4''') == '20512'\nassert solution('''5 2 8 4''') == '20512'\nassert solution('''5 2 8 4''') == '20512'\nassert solution('''5 2 8 4''') == '20512'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 8 4') == '20512'\nassert solution('2 3 3 1') == 'IMPOSSIBLE'\n\nassert solution('3 5 1 2') == '2111'\nassert solution('7 3 1 6') == 'IMPOSSIBLE'\n\nassert solution('2 2 2 1') == '22'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2 8 4''') == '20512'\nassert solution('''10 2 4 6''') == '20172'\nassert solution('''11 1 7 5''') == '20175'\nassert solution('''11 1 4 5''') == '20175'\nassert solution('''11 3 3 3''') == '20175'"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2 8 4') == '20512'\nassert solution('0 1') == 'IMPOSSIBLE'\nassert solution('2 3 1') == '3120'\nassert solution('20') == 'IMPOSSIBLE'"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 8 4') == '20512'\n\nSample Input:\n7 5 3 4\nSample Output:\nIMPOSSIBLE\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 5 7 4\"\n) == \"20512\"\n\nassert solution(\n    \"3 6 9 4\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n    \"20 5 7 4\"\n) == \"20512\"\n\nassert solution(\n    \"20 7 6 5\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n    \"20 8 6 4\"\n) == \"IMPOSSIBLE\""
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2 8 4''') == '20512', solution\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(['5', '2', '8', '4']) == '20512'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 100000 8 4''') == '20512'\nassert solution('''4 5 2 3''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == 2\nassert solution(\"1 1 1\") == 1\nassert solution(\"1 2 3 4\") == 1\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nBAC\nABC\n''') == 2\nassert solution('''\n3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE\n''') == 3\nassert solution('''\n7 7\nMOM\nTOM\nBON\nNOM\nNOAH\nROM\n''') == 4\nassert solution('''\n2 8\nBAC\nABC\n''') == 2\nassert solution('''\n3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE\n''') == 3"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\nBAC\nABC\n''') == 2\nassert solution('''\n3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE\n''') == 3\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\nBABA\nBABA\nBABA\nBABA\nBABA\n''') == '3'\nassert solution('''\n2 3\nBAC\nABC\n''') == '2'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\nABC\nABC\nABC\nABC\nABCD\nBACD''') == \"3\"\nassert solution('''5 10\nDBCA\nBCDA\nBCDA\nBCDA\nBCDA\nBCDA\nBCDA\nBCDA\nBCDA''') == \"5\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == 2\nassert solution(\"3 8\") == 3"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\nBAC\nABC\n''') == \"2\"\nassert solution('''\n3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE\n''') == \"3\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 8') == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == 2\nassert solution('3 8') == 3\nassert solution('4 5') == 4\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 1') == '2'\nassert solution('4 4') == '5'\nassert solution('5 5') == '6'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2\n1 1\n1 2\n1 1''') == '3'\nassert solution('''3 1\n1 1\n1 2\n1 1''') == '4'\nassert solution('''4 1\n1 1\n1 2\n1 1''') == '2'\nassert solution('''4 2\n1 1\n1 2\n1 1''') == '0'\nassert solution('''4 2\n1 1\n2 1\n1 1''') == '3'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '3'\nassert solution('5 6') == '7'\nassert solution('5 10') == '8'\nassert solution('1 5') == '3'\nassert solution('6 10') == '7'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 2') == '2'\nassert solution('2 1') == '1'\nassert solution('3 3') == '6'\nassert solution('5 2') == '8'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '3'\nassert solution('4 5') == '27'\nassert solution('5 8') == '4632'\nassert solution('2 3') == '0'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 2') == '6'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 4') == '6'\nassert solution('1 5') == '4'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 1') == '2'\nassert solution('3 3') == '2'"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 2') == '3'\nassert solution('3 3') == '13'\nassert solution('2 2') == '3'\nassert solution('4 4') == '25'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 2 1 1 1') == '3'\nassert solution('3 3') == '2'\nassert solution('3 3 2') == '4'\nassert solution('3 3 2 2') == '6'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n') == '1'\nassert solution('10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n') == '10'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\nassert solution('5 3\\n2 1 2\\n3 1 4 5\\n3 1 2 3\\n2 2 3') == '3'\nassert solution('10 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10') == '5'\nassert solution('10 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10') == '4'\n\nSample Input 2:\n1 100000\n1 0\n2 1 0\n2 1 1\n2 0 2\n2 0 1\n1 1 2\n1 1 1\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1 1 0\n1 0 2\n1"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n''') == '3'\nassert solution('''\n5 4\n3 1 2\n3 1 4\n1 1 3\n0 0 0\n''') == '2'\nassert solution('''\n5 5\n1 1 2\n1 2 3\n2 3 4\n2 1 3\n2 3 1\n''') == '3'\nassert solution('''\n3 5\n0 0 2\n0 1 3\n0 1 0\n0 1 1\n1 2 2\n''') == '2'\nassert solution('''\n9 4\n0 0 2\n0 1 4\n1 1 3\n1 2 3\n1 3 0\n1 3 1\n1 3 2\n1 2 4\n2 2 3\n2 3 0\n''') == '3'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3\\n') == '3'\nassert solution('10 4\\n0 1 2\\n0 2 1 2\\n0 3 1 4\\n0 4 1 5\\n1 2 0 3\\n2 3 0 0\\n3 4 1 2\\n4 0 0 1\\n4 1 2 0\\n3 4 1 2\\n3 2 4 2\\n2 4 3 1\\n1 3 2 4\\n1 4 2 3\\n3 2 2 4\\n0 1 1 0\\n0 0 0 0\\n1 1 0 2\\n2 0 0 0\\n1 1 0 2\\n1 1 0 0\\n3 0 0 0\\n') == '5'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '2'\nassert solution('10 4') == '4'\nassert solution('100 2') == '2'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 4\n0 3 2 4 1\n2 1 4 0\n3 0 1 4 2\n3 0 1 4 2\n2 1 4 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 2\n0 1\n2 1\n3 0\n4 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 3\n0 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 1 4\n\"\"\") == \"2\"\n\"\"\"\nFor each line, the first number is the size of the committee.\n\nThe second line contains integers for the disciplines of the committee.\n\nThe third line contains the number of candidates, the second and third numbers in the third line are the numbers of the candidates and the fourth number, the fifth number, in the fourth line, are the numbers of the candidates and the sixth number, seventh number, in the sixth line, are the numbers of the candidates.\n\nThe seventh line contains the numbers of the candidates in the fifth line.\n\nThe seventh line contains the number of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the number of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe seventh line contains the numbers of the candidates in the sixth line.\n\nThe"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n''') == '3'\nassert solution('''\n5 4\n1 3 2 0\n4 1 2 3\n2 2 3 3\n3 3 3 2\n2 3 2 2\n''') == '2'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"11\") == \"2\"\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '3'\nassert solution('5 5') == '5'\nassert solution('5 0') == '0'\nassert solution('5 1') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3\\n') == '3'\nassert solution('2 4\\n0 1 2 3\\n3 0 1 4\\n2 0 4\\n') == '2'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3\\n1 1\") == \"YES\"\nassert solution(\"2\\n3\\n1 3\") == \"YES\"\nassert solution(\"2\\n3\\n2 2\") == \"NO\"\nassert solution(\"2\\n2\\n2 3\") == \"NO\"\nassert solution(\"2\\n3\\n1 1\") == \"NO\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"6\") == \"YES\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\") == \"YES\"\nassert solution(\"2\\n4 1\\n3 2\\n3 1\\n3 2\\n4 1\\n4 3\\n4 1\\n4 1\\n4 3\\n4 1\\n4 3\\n4\") == \"NO\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n2\n2 3\n3 1\n3 2\n1 1\n1 2\n2 1\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n2\n2 3\n3 1\n3 2\n1 1\n1 2\n2 1\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"YES\"\nassert solution([\n    '3',\n    '1 2',\n    '2 1',\n    '1 3',\n    '2 2',\n    '3 1',\n    '2 3',\n    '1 1'\n]) == \"YES\"\nassert solution([\n    '4',\n    '1 1',\n    '1 3',\n    '2 2',\n    '3 3'\n]) == \"NO\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'YES'\nassert solution('2') == 'NO'\nassert solution('1') == 'YES'\n\nimport math\nimport itertools\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\") == \"YES\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\") == \"NO\""
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 1\\n1 3\\n2 2\\n2 3\") == \"YES\"\nassert solution(\"1\\n1\\n1\") == \"YES\"\n\nprint(solution(*input()))\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n4\n3 2\n3 4\n2 2\n2 3\n2 4\n3 2\n3 4\n3 4\n3 3\n2 2\n2 2\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'YES'\nassert solution('''\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'NO'"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3.000000000'\nassert solution('2') == '3.000000000'\n\"\"\"\nimport math"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '3.000000000'\nassert solution('9') == '20.000000000'"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0.25'\nassert solution('10') == '11.99999'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"3.000000000\"\nassert solution(\"1\") == \"2.000000000\"\nassert solution(\"0\") == \"0\"\nassert solution(\"5\") == \"4.000000000\"\nassert solution(\"-1\") == \"0\"\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3.000000000'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '3.000000000'\nassert solution('100') == '108.08597958'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3.000000000'\n\n\"\"\""
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('10') == '10.000000000'\nassert solution('5') == '8.000000000'\nassert solution('2') == '3.000000000'\n\"\"\"\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1.000000'\nassert solution('2') == '3.000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('5') == '5.000000000'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n3\") == \"1\"\nassert solution(\"2 2\\n3\") == \"1\"\nassert solution(\"3 2\\n3\") == \"1\"\nassert solution(\"4 1\\n1\") == \"2\"\nassert solution(\"4 2\\n1\") == \"2\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '1'\nassert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '1'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n3') == '1'\nassert solution('1 2\\n3 4') == '2'\nassert solution('1 2\\n3 4 5') == '1'\nassert solution('1 2\\n3 4 5 6') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '0'\nassert solution('0') == '0'\nassert solution('5') == '1'\nassert solution('15') == '2'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\n4 5 6\\n1 2 3 4') == '2'\nassert solution('6 3\\n10 4 5\\n7 8 9 10\\n7 4 1 2 3') == '3'\nassert solution('10 5\\n15 2 1 5\\n8 8 7 6\\n8 7 9 2 3') == '3'\n\n\"\"\""
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2\n3\n''') == '1'\n\nassert solution('''\n1 10\n3 4 4 4 4 5 5 6 7 8 9\n''') == '3'"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2\n3\n''') == \"1\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n\nprint('All Tests Passed!')\n\n\"\"\""
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n2 1 4\n1 3 2\n1 2 4''') == \"2\"\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n2 1 4\n1 3 2\n1 2 4\n2 1 4''') == \"3\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3 3\n1 2 3\n1 3 4\n1 1 2\n1 1 4\nSample Input 2:\n5 3 5\n2 2 2 2 2\n1 4 1\n0 2 0\n2 1 0\n2 3 0\n1 1 0\n2 1 0\nSample Output 2:\n1\n2\n2\n0\n0\n''') == '0'\n\nassert solution('''\n5 3 5\n2 2 2 2 2\n1 4 1\n0 2 0\n2 1 0\n2 3 0\n1 1 0\n2 1 0\nSample Output 3:\n3\n2\n3\n0\n1\n''') == '1'\n\nassert solution('''\n5 3 5\n2 2 2 2 2\n1 4 1\n0 2 0\n2 1 0\n2 3 0\n1 1 0\n2 1 0\nSample Output 4:\n1\n2\n1\n2\n0\n''') == '0'"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n\nassert solution('''\n2 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\n\nassert solution('''\n5 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n\nassert solution('''\n2 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '4'\n\nassert solution('''\n5 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '3'\nassert solution('1 3 4') == '2'\nassert solution('0 2 2 3 2') == '3'\nassert solution('1 3 2') == '1'\nassert solution('1 2 4') == '3'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\nassert solution('''\n2 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == \"2\"\nassert solution('''\n2 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == \"3\"\nassert solution('''\n2 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == \"3\"\n'''\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\n\nstdin = \"\"\"\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\na\n''') == '0 '\nassert solution('''\n2\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***''') == '2 def solution(stdin: str) -> str:\n\nassert solution('''\n3\na\n''') == '1 '\nassert solution('''\n4\na\n''') == '0 '\nassert solution('''\n2\na\n''') == '0 '\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***''') == '2 HelloWorld.c\\n2 Add.c\\n2 THE END\\n'"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2 HelloWorld.c\"\nassert solution(\"4\") == \"4 Add.c\"\nassert solution(\"12\") == \"0\"\nassert solution(\"\") == \"0\"\n\"\"\"\n\nimport heapq\n\nn = int(input())\n\nrepo = {}\n\nfor i in range(n):\n    frag = input()\n    if frag.count(\"***END***\") >= 1:\n        break\n    file_name = frag[:frag.find(\"***END***\")].strip()\n    code = frag[frag.find(\"***END***\") + len(\"***END***\"):]\n    repo[file_name] = code\n\ns = input()\n\nwhile s!= \"***END***\":\n    file_name = s[:s.find(\"***END***\")].strip()\n    s = s[s.find(\"***END***\") + len(\"***END***\"):]\n    print(file_name, end=\" \")\n    for c in repo[file_name]:\n        print(c, end=\" \")\n    print()\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\nHelloWorld.c\\nint Main() {\") == \"2 HelloWorld.c\\ndef solution(stdin: str) -> str:\"\nassert solution(\"1\\nint Main() {\\n  for (int i=0; i<10; i++) {\\n    sum += i;\\n  }\\n  printf(\"SUM %d\", sum);\\n}\\n***END***\") == \"1 def solution(stdin: str) -> str:\"\nassert solution(\"0\\n\") == \"0\"\nassert solution(\"1\\n1\\n\") == \"0\"\nassert solution(\"2\\n1\\n\") == \"2\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\nHelloWorld.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\n''') == '2 HelloWorld.c'\n\nassert solution('''\n5\nHelloWorld.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\n''') == '5 HelloWorld.c'\n\nassert solution('''\n6\nHelloWorld.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\n''') == '5 HelloWorld.c'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n'\n 'HelloWorld.c\\n'\n 'int Main() {\\n'\n '    printf(\"Hello %d\\n\",i);\\n'\n '}') == '2 HelloWorld.c'\nassert solution('1\\n'\n 'Add.c\\n'\n 'int Main() {\\n'\n' for (int i=0; i<10; i++) { \\n'\n'   sum += i; \\n'\n' } \\n'\n' printf(\"SUM %d\", sum); \\n'\n '}') == '1 def solution(stdin: str) -> str:'\nassert solution('0\\n'\n 'HelloWorld.c\\n'\n 'int Main() {\\n'\n '    printf(\"Hello %d\\n\",i);\\n'\n '}') == '0 HelloWorld.c'\nassert solution('0\\n'\n 'Add.c\\n'\n 'int Main() {\\n'\n' for (int i=0; i<10; i++) { \\n'\n'   sum += i; \\n'\n' } \\n'\n' printf(\"SUM %d\", sum); \\n'\n '}') == '0 Add.c'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'HelloWorld.c', \"First\"\nassert solution('Add.c') == 'int Main() {', \"Second\"\nassert solution('HelloWorld.c') == 'HelloWorld.c', \"Third\"\n\"\"\""
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'HelloWorld.c'\nassert solution('3') == 'The End'\nassert solution('4') == 'Hello World'\nassert solution('5') == 'Hello World'\nassert solution('6') == 'Hello World'\n\nSample Input:\n2\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\nHelloWorld.c\\nint Main() {') == '2 HelloWorld.c'\nassert solution('1\\nAdd.c\\nint Main() {') == '1 Add.c'\nassert solution('1\\nint Main() {') == '1'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"HelloWorld.c\") == \"1 HelloWorld.c\"\nassert solution(\"Add.c\") == \"1 Add.c\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n3 3\n2 2 2\n4 2 1\n4 4 1\n\"\"\"\n) == \"1 2 2\"\nassert solution(\n    \"\"\"\n5 3\n3 1 2\n2 2 3\n2 3 4\n3 4 1\n2 1 3\n\"\"\"\n) == \"1 2 3 2\"\nassert solution(\n    \"\"\"\n5 5\n3 1 4\n2 4 2\n2 1 3\n4 1 2\n3 3 1\n\"\"\"\n) == \"2 1 2 3\"\nassert solution(\n    \"\"\"\n5 5\n2 4 1\n2 1 3\n2 3 4\n1 1 2\n3 2 3\n\"\"\"\n) == \"2 1 2 3 2\"\n\nimport sys\nfrom io import StringIO\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n2 2 2\n4 2 1\n4 4 1''') == '1 2 2 2 3'"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3\n2 2 2\n4 2 1\n4 4 1\n\"\"\") == \"\"\"\n1\n2\n2\n\"\"\".strip()\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 3') == '2'\nassert solution('6 3') == '2'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 4') == '2'\nassert solution('3 5') == '3'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '2 3\\n2 2 2\\n4 2 1\\n4 4 1\\n') == '1\\n2\\n2\\n2'"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1\\n2\\n2'\nassert solution('4 3') == '1\\n2\\n2'\nassert solution('4 2') == '1\\n1\\n1'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2 5 2\\n1 1 2\\n4 1 4\\n') == '1'\n\"\"\""
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '2'"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n2 2 2\n4 2 1\n4 4 1\n''') == '2', \"First\"\nassert solution('''\n1 1\n1\n''') == '1', \"Second\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"20\") == \"5\"\nassert solution(\"20 20 10\") == \"10\"\nassert solution(\"20 20 10 20 20 10 20 20 10\") == \"10\"\nassert solution(\"20 50 70 10\") == \"15\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\nassert solution('''\n3 20\n50 0 10\n100 110 4\n150 190 16\n''') == '3'\nassert solution('''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\nassert solution('''\n4 1\n2 5 4\n5 6 5\n7 6 6\n''') == '5'\n'''\n4 10\n2 3 9\n3 4 10\n5 6 9\n''') == '6'\n'''\n4 20\n2 5 4\n5 6 5\n7 6 6\n''') == '7'\n'''\n3 20\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n4 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n4 20\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n4 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n'''\n3 20\n50 0 10\n100 110 4\n150 190 16\n''') == '3'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 20\n2 5 4\n5 6 5\n7 6 6\n''') == '7'\n'''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 20\n2 5 4\n5 6 5\n7 6 6\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 20\n2 5 4\n5 6 5\n7 6 6\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 10\n2 3 9\n3 4 10\n5 6 9\n''') == '7'\n'''\n3 20\n50 70"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('1 1 1') == '2'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '5'\nassert stdin == '3 20\\n50 70 10\\n100 110 4\\n150 190 16\\n'"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\nassert solution('5 20\\n1 1 1\\n2 2 2\\n2 2 2\\n3 3 3') == '2'\nassert solution('5 20\\n2 2 2\\n3 3 3\\n4 4 4\\n6 6 6') == '3'\nassert solution('5 20\\n5 5 5\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n6 6 6') == '1'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 20') == '5'\nassert solution('2 5') == '2'\nassert solution('3 5') == '1'\nassert solution('4 5') == '2'\nassert solution('5 5') == '1'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n\nassert solution('''\n10000000 1000000000 1000000000 1000000000\n''') == '100001000010000100001000010000'\n\nassert solution('''\n2 10 20\n10 20\n''') == '5'\n\nassert solution('''\n2\n1 1\n''') == '1'\n\nassert solution('''\n2\n1 1\n''') == '2'"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1\\n3 100\\n1 100 4') == '2'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '3'\nassert solution('20 2') == '20'\nassert solution('20 100 100 4') == '5'\nassert solution('20 120 130 150 190 160 160 4') == '6'"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == \"IMPOSSIBLE\"\nassert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"10 1\") == \"IMPOSSIBLE\"\nassert solution(\"4 4\") == \"16\"\nassert solution(\"10 10\") == \"20\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"5 5\\n\"\n    \"(2 5)\\n\"\n    \"(5 3)\\n\"\n    \".....\\n\"\n    \".#.#.\\n\"\n    \"....#\\n\"\n    \".#.##\\n\"\n    \"1\\n\"\n    \"6 (4 2)\\n\"\n    \"(4 2)\\n\"\n    \"(3 3)\\n\"\n    \"(2 3)\\n\"\n    \"(1 3)\\n\"\n    \"(1 2)\"\n    ) == \"26\""
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)') == '26'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n(2 5)\\n.....\\n.#.#.\\n#.#.#.\\n....#\\n.#.##\\n1\") == '26'\nassert solution(\"3 3\\n(1 2) (1 3) (1 4) (1 5) (1 6) (1 7)\\n....\\n(2 3) (2 4)\\n(2 5)\\n(2 6)\\n(2 7)\\n....\\n(3 4) (3 5)\\n(3 6)\\n(3 7)\\n(3 8)\\n....\\n(4 5) (4 6)\\n(4 7)\\n(4 8)\\n(4 9)\\n....\\n(5 6)\\n(5 7)\\n(5 8)\\n(5 9)\\n....\\n(6 7)\\n(6 8)\\n(6 9)\\n(6 10)\\n....\\n(7 8)\\n(7 9)\\n(7 10)\\n(7 11)\") == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 5\n(2 5) (5 3)\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)''') == '26'\nassert solution('''5 5\n(2 5) (5 3)\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5') == '26'\nassert solution('6 4') == 'IMPOSSIBLE'\nassert solution('7 4') == '26'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\\\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)''') == \"26\"\nassert solution('''\\\n5 5\n(2 5) (5 3)\n.....\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5') == '26'\nassert solution('2 5') == 'IMPOSSIBLE'\nassert solution('6 4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n#.#.#\\n....#\\n#.##') == '26'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"success\"\nassert solution(\"\"\"\n6\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n\"\"\") == \"failure\"\nassert solution(\"\"\"\n1\n-1 0\n0 0\n1 0\n\"\"\") == \"success\"\n\"\"\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n') == 'failure'\nassert solution('5\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n') =='success'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n-1 0\\n0 0\\n1 0\") == \"failure\"\nassert solution(\"3\\n0 -1\\n0 0\\n1 0\") == \"success\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nassert solution('12\\n-1 -1\\n0 0\\n1 -1\\n-1 1\\n0 2\\n1 1\\n2 2\\n2 0\\n2 1') =='success'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"success\"\n\"\"\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"success\"\nprint(solution())\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0\\n1 0\\n-1 1\") == \"success\"\nassert solution(\"4\\n-1 0\\n0 0\\n1 0\\n-1 1\") == \"failure\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"success\"\nprint(solution(input()))\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n') == 'failure'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n') == 'failure'\n\nassert solution('8\\n-5 0\\n0 0\\n5 0\\n-5 1\\n0 2\\n1 1\\n2 2\\n2 0\\n') == 'failure'\n\nassert solution('10\\n-1 1\\n1 1\\n-1 2\\n1 2\\n-1 5\\n1 5\\n') =='success'"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 2 2\\n\"\n    \"1 2\\n\"\n    \"3 3\"\n) == \"possible\"\nassert solution(\n    \"2 2 2\\n\"\n    \"5 2 2\\n\"\n    \"5 2 2\\n\"\n) == \"impossible\"\n\"\"\"\nfrom typing import List\nimport sys\nimport math\nimport unittest\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('1 2') == 'impossible'\nassert solution('3 3') == 'impossible'\nassert solution('5 2 2') == 'impossible'\nassert solution('5 2 2') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n3 4\") == \"impossible\"\nassert solution(\"2 2\\n5 3\") == \"possible\"\nassert solution(\"4 3\\n4 4\") == \"possible\"\nassert solution(\"4 4\\n4 3\") == \"impossible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3') == 'impossible'\nassert solution('2 2 2\\n1 2\\n3 3') == 'possible'\nassert solution('5 2 2\\n5 2\\n3 3') == 'impossible'\nassert solution('5 2 2\\n5 2\\n3 3') == 'possible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2\n2 3\n1 2\n1 2\n1 2\n''') == \"impossible\"\nassert solution('''\n1 1\n2 3\n''') == \"impossible\"\nassert solution('''\n3 3\n3 3\n''') == \"impossible\"\nassert solution('''\n2 4\n3 2\n''') == \"impossible\"\nassert solution('''\n2 4\n3 2\n''') == \"impossible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3') == 'possible'\nassert solution('2 2 2\\n1 2\\n3 3') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == 'possible'\nassert solution('3 3 2') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 2 2\n1 2\n3 3\n5 2 2\n5 2 2\"\"\") == \"possible\"\nassert solution(\"\"\"2 2 1\n1 2\n3 3\n5 2 2\n5 2 2\"\"\") == \"impossible\"\nassert solution(\"\"\"5 5 0\n10 3\n5 5\n4 2\n2 1\n2 4\n5 2\n3 4\n4 1\n3 4\n1 2\n1 4\n5 5\"\"\") == \"possible\"\nassert solution(\"\"\"5 5 0\n5 5\n10 3\n5 5\n4 2\n2 1\n2 4\n5 2\n3 4\n4 1\n3 4\n1 2\n1 4\n5 5\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('1 2') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n2 1\n2 1\n2 1\n2 1\n2 1\n1 3\n2 1\n2 1\n2 1\n1 3\n1 2''') == 'impossible'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '1'"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '0'\nassert solution('3 2') == '1'\nassert solution('3 2') == '0'\nassert solution('3 3') == '1'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 2\\n1 2 1\\n1 2 1\\n-1 1 2\\n') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2\n1 1 2\n1 2 1\n-1 1 2''') == '0'\nassert solution('''1 1\n1 2\n-1 1 2''') == '1'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 1 2\\n1 2 1\\n-1 1 2\") == \"0\"\nassert solution(\"8 3\\n1 1 3\\n1 2 1\\n1 3 3\\n1 4 2\\n1 5 2\\n1 6 4\\n1 7 3\\n1 8 2\\n-1 1 2\") == \"1\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 1\") == \"0\"\nassert solution(\"-1 1 2\") == \"0\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '0'\n\n--Input\n3 3\n2 1 2\n1 1 1\n1 2 2\n--Output\n3"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\n\nassert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '1'\n\nassert solution('''\n5 2\n1 1 2\n2 2 2\n1 2 3\n1 2 2\n-1 1 1\n''') == '3'\n\nassert solution('''\n5 2\n1 1 2\n2 2 2\n1 2 3\n1 2 2\n-1 1 1\n''') == '2'\n\nassert solution('''\n5 3\n1 1 2\n2 2 2\n3 3 3\n1 2 2\n-1 1 1\n''') == '3'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '0'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '6'\nassert solution('4') == '7'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'\nassert solution('5 4') == '5'"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"4\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"1 9\") == \"8\"\nassert solution(\"3 9\") == \"5\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()[:-1]\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n20\n''') == '2'\nassert solution('''\n3\n1235\n''') == '4'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"./input.txt\") == \"3\"\n\nassert solution(\"./input2.txt\") == \"4\""
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n353') == '3\\n353'\nassert solution('4\\n1234') == '4\\n1313'\nassert solution('5\\n12345') == '5\\n12345'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n353\") == \"3\"\nassert solution(\"4 2\\n1234\") == \"4\"\nassert solution(\"5 2\\n1235\") == \"5\"\nassert solution(\"6 2\\n1236\") == \"6\"\nassert solution(\"7 2\\n1237\") == \"7\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([12, 30, 45, 3, 11]) == \"NO\"\nassert solution([3, 47, 0, 4, 9]) == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 47 0 4 9\") == \"YES\"\nassert solution(\"12 30 45 3 11\") == \"NO\""
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"12 30 45 3 11\"\n) == \"NO\"\n\nassert solution(\n    \"3 47 0 4 9\"\n) == \"YES\""
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\n\n\n'''"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\nassert solution('1 1 2 3 1 0') == '0'\nassert solution('1 1 2 3 1 0') == '0'\nassert solution('1 1 2 3 1 0') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == \"3\"\nassert solution(\"1 1 2 3 1 0\\n2 2 1\") == \"0\"\nassert solution(\"1 1 2 3 1 0\\n2 2 1\\n2 2 1\") == \"0\"\nassert solution(\"1 1 2 3 1 0\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 2 3 1 0\\n2 4 20\\n') == '3'\nassert solution('1 1 2 3 1 0\\n15 27 26\\n') == '2'\nassert solution('1 1 2 3 1 0\\n1 1 2 3 1 0\\n') == '0'\nassert solution('1 1 2 3 1 0\\n2 2 1\\n') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 3 1 0\") == \"3\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\nassert solution(\"1 1 2 3 1 0\") == \"2\"\n\n---"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 2 3 1 0\\n2 4 20') == '3'\nassert solution('1 1 2 3 1 0\\n15 27 26') == '2'\nassert solution('1 1 2 3 1 0\\n15 27 26\\n32 1') == '0'\n\n\n'''\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"1 1 2 3 1 0\\n2 4 20\"\n) == \"3\"\nassert solution(\n    \"1 1 2 3 1 0\\n15 27 26\"\n) == \"2\"\nassert solution(\n    \"1 1 2 3 1 0\\n2 2 1\"\n) == \"0\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 2 3 1 0\\n2 4 20\") == \"3\"\nassert solution(\"1 1 2 3 1 0\\n15 27 26\") == \"2\"\nassert solution(\"1 1 2 3 1 0\\n1 1 2 3 1 0\") == \"0\""
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([1, 1, 2, 3, 1, 0]) == '3'\nassert solution([2, 4, 20]) == '2'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\nassert solution('1 1 2 3 1 0') == '0'\n\n\n'''"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_test_1) == '3'\nassert solution(input_test_2) == '2'\nassert solution(input_test_3) == '0'\nassert solution(input_test_4) == '0'\nassert solution(input_test_5) == '1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n0 0 1\\n2 0 1\\n4 0 1\\n') == '4'\nassert solution('3\\n0 0 2\\n3 0 2\\n6 0 2\\n') == '6'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '4'\nassert solution('3') == '4'\nassert solution('3') == '4'\nassert solution('3') == '4'\nassert solution('3') == '4'\n\n'''\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '4'\nassert solution('3') == '8'\nassert solution('3') == '10'\n\n\n'''\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0 1\\n2 0 1\\n4 0 1\\n') == '4'\nassert solution('3\\n0 0 2\\n3 0 2\\n6 0 2\\n') == '8'\n\n\n\"\"\""
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"3\") == \"4\"\nassert solution(\"3\") == \"4\""
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4\"\nassert solution(\"3\\n0 0 1\\n2 0 1\\n4 0 1\\n\") == \"4\"\nassert solution(\"3\\n0 0 2\\n3 0 2\\n6 0 2\\n\") == \"6\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\nassert solution('''\n3\n0 0 2\n3 0 2\n6 0 2\n''') == '8'\nassert solution('''\n3\n0 0 2\n2 0 2\n1 1 2\n''') == '8'\nassert solution('''\n5\n0 0 2\n2 0 2\n0 0 2\n1 1 2\n5 0 2\n''') == '10'\nassert solution('''\n4\n0 0 2\n2 0 2\n1 1 2\n5 0 2\n4 0 2\n''') == '10'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\nassert solution('''\n3\n0 0 2\n3 0 2\n6 0 2\n''') == '6'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\nassert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n''') == '8'\nassert solution('''\n3\n0 0 2\n3 0 2\n6 0 2\n''') == '12'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('\\n'.join([\n    \"1\",\n    \"0 0 1\",\n    \"2 0 1\",\n    \"4 0 1\",\n])) == \"4\"\n\nassert solution('\\n'.join([\n    \"0 0 2\",\n    \"2 0 2\",\n    \"1 1 2\",\n])) == \"8\""
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\\n') == \"YES\"\nassert solution('0 0 6 0 6 6 0 6\\n7 4 4 7 7 10 10 7\\n') == \"NO\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\nassert solution('''\n0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n''') == 'NO'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\nassert solution('''0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n''') == 'NO'\nassert solution('''6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'YES'\n'''\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_1) == \"YES\"\nassert solution(input_2) == \"NO\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\\n\") == \"YES\"\nassert solution(\"0 0 6 0 6 6 0 6\\n7 4 4 7 7 10 10 7\\n\") == \"YES\"\nassert solution(\"6 0 6 6 0 6 0 0\\n10 10 10 10 10 10 10 10\\n\") == \"NO\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\\n') == 'YES'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\n\nassert solution('''\n0 0 6 0 6 6 0 6\n7 4 4 7 7 10 10 7\n''') == 'NO'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\\n\") == \"YES\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 0 6 0 6 6 0 6') == 'YES'\nassert solution('1 3 3 5 5 3 3 1') == 'YES'\nassert solution('6 0 6 6 0 6 0 0') == 'YES'\nassert solution('7 4 4 7 7 10 10 7') == 'NO'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\nassert solution('''\n0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n''') == 'NO'\n\n'''"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n0\n''') == 'cslnb'\nassert solution('''\n2\n1 0\n''') == 'cslnb'\nassert solution('''\n2\n2 2\n''') =='sjfnb'\nassert solution('''\n3\n2 3 1\n''') =='sjfnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0\\n\") == \"cslnb\"\nassert solution(\"2\\n1 0\\n\") == \"cslnb\"\nassert solution(\"3\\n2 3 1\\n\") == \"sjfnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n0\") == \"cslnb\"\nassert solution(\"2\\n1 0\") == \"cslnb\"\nassert solution(\"2\\n2 2\") == \"sjfnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\""
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) in ['sjfnb', 'cslnb']"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2\\n\"\n    \"1 0\"\n    ) == \"sjfnb\"\n\nassert solution(\n    \"2\\n\"\n    \"2 2\"\n    ) == \"sjfnb\"\n\nassert solution(\n    \"3\\n\"\n    \"2 3 1\"\n    ) == \"sjfnb\"\n\nassert solution(\n    \"3\\n\"\n    \"1 0 1\"\n    ) == \"sjfnb\"\n\nassert solution(\n    \"3\\n\"\n    \"0 0 1\"\n    ) == \"cslnb\""
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') =='sjfnb'\nassert solution('2') == 'cslnb'\nassert solution('3') =='sjfnb'\nassert solution('4') =='sjfnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n0\") == \"cslnb\"\nassert solution(\"2\\n1 0\") == \"cslnb\"\nassert solution(\"2\\n2 2\") == \"sjfnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0') == 'cslnb'\nassert solution('2\\n1 0') == 'cslnb'\nassert solution('2\\n2 2') =='sjfnb'\nassert solution('3\\n2 3 1') =='sjfnb'\n\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"cslnb\"\nassert solution(\"3\") == \"sjfnb\"\nassert solution(\"4\") == \"sjfnb\"\nassert solution(\"5\") == \"cslnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) in {'sjfnb', 'cslnb'}"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"2\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"0\""
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == 1\nassert solution('1 1') == 0\nassert solution('1 1 1') == 1\n\n\"\"\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == 2\nassert solution(\"1 2\") == 1\nassert solution(\"1 1\") == 0\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 5\n1 5 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"1 2\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"1 1\n1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5\\n1 5 3') == '2'\nassert solution('1 2\\n1') == '1'\nassert solution('1 1\\n1') == '0'\nassert solution('1 1\\n2') == '0'"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 1') == '0'\nassert solution('1 0') == '0'\n\n'''\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 5\n1 5 3\n''') == '2'\n\nassert solution('''1 2\n1\n''') == '1'\n\nassert solution('''1 1\n1\n''') == '0'\n\nassert solution('''5 1\n5\n''') == '4'\n\nassert solution('''4 1\n1\n''') == '3'"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(None) == None\nassert solution(\"1\") == None\nassert solution(\"1 1\") == None\nassert solution(\"1 1 1 1\") == None\nassert solution(\"1 1 1 1 1\") == None\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3, 5]) == 2\nassert solution([1, 2]) == 1\nassert solution([1, 1]) == 1\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == \"1\"\nassert solution(\"2\") == \"-1 0 1\""
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\\n0 -1\"\nassert solution(\"2\") == \"2\\n-1 0 1\""
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"-1 0 1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"-1 0 1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_stdin) == \"2 -1 0 1\"\nprint(solution(input_stdin))\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2 1'\nassert solution('2') == '1 0'\nassert solution('4') == '-1 1'\nassert solution('8') == '-1 1'\nassert solution('5') == '1 0'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == '2'\nassert solution(\"1\") == '1'\nassert solution(\"0\") == '0'\nassert solution(\"5\") == '1'\n\nprint(solution(input()))\n\n\n\n'''"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n\nInput\n3\n\nOutput\n4\n3 3 2 2\n3 1 2 2\n0 1 2 2\n-1 0 1 2\n-1 0 1 2\n-1 0 1 2\n-1 0 1 2\n-1 0 1 2\n-1 0 1 2"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '2 3 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '1 2 2'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == stdin"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '1 3 1'\nassert solution('3 1 5 2') == '1 2 1'\n\n'''\n\n'''\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, K, M, A = map(int, stdin.split())\n        votes = sorted(list(map(int, stdin.split())))\n        candidates = list(range(1, N + 1))\n        candidates = sorted(candidates, key=lambda x: (-votes.count(x), votes.index(x)))\n        ranks = {}\n        for candidate in candidates:\n            if candidate in ranks:\n                ranks[candidate] += 1\n            else:\n                ranks[candidate] = 1\n        res = []\n        for i in range(K):\n            if A - (N - i) < 0:\n                break\n            res.append(candidates[i])\n        for i in range(N - K):\n            if A - (N - i) < 0:\n                break\n            res.append(candidates[i])\n        return \" \".join(map(str, res))\n\n\nsolution(\"3 1 5 4\")\nsolution(\"3 1 5 3\")\nsolution(\"3 2 5 3\")\nsolution(\"3 3 2\")\n\n'''\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 1 5 4\n1 2 1 3\n\n\"\"\") == \"1 3 3\"\nassert solution(\"\"\"\n3 1 5 3\n1 3 1\n\n\"\"\") == \"2 3 2\"\nassert solution(\"\"\"\n3 2 5 3\n1 3 1\n\n\"\"\") == \"1 2 2\"\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '1 2 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1 5 4\n1 2 1 3\n''') == '1 3 3'\nassert solution('''\n3 1 5 3\n1 3 1\n''') == '1 2 2'\nassert solution('''\n2 2 5 3\n1 3 1\n''') == '1 2 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 1 5 4\\n1 2 1 3\"\n) == \"1 3 3\"\nassert solution(\n    \"3 1 5 3\\n1 3 1\"\n) == \"2 3 2\"\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1 5 4\n1 2 1 3\n\n3 1 5 3\n1 3 1\n\n3 2 5 3\n1 3 1\n\n4 1 5 2\n1 3 1\n\n4 1 5 2\n1 2 2\n\n3 1 5 2\n1 3 1''') == '1 3 3'\n\nassert solution('''3 1 5 3\n1 3 1\n\n3 1 5 2\n1 2 2\n\n3 2 5 2\n1 3 1\n\n3 2 5 1\n1 3 1\n\n3 1 5 2\n1 2 2\n\n3 2 5 3\n1 3 1''') == '1 3 3'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1 5 4\n1 2 1 3\n''') == '1 3 3', solution('''3 1 5 3\n1 3 1\n''') == '2 3 2', solution('''3 1 5 3\n1 3 1\n''') == '2 3 2', solution('''3 1 5 3\n1 3 1\n''') == '1 3 2', solution('''3 2 5 3\n1 3 1\n''') == '2 3 2', solution('''3 2 5 3\n1 3 1\n''') == '1 3 2'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''110''') == '3'\nassert solution('''111111011''') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\nassert solution('11111111111111111') == '172'\nassert solution('1') == '1'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n\n----------------------------------"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"110\") == \"3\"\nassert solution(\"111111011\") == \"169\"\nassert solution(\"12345678901234567890\") == \"2169\"\nassert solution(\"100000000000001\") == \"2\"\nassert solution(\"1111111111111111\") == \"218\"\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n\n'''\nfrom math import ceil,log2\nfrom functools import reduce\nclass Solution:\n    def solve(self,n,k):\n        def toBin(x):\n            return reduce(lambda a,b:int(a)<<1 | b,reversed(bin(x)[2:]))\n        return (ceil((log2(n) + log2(n) + k) / k) - 1) * n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('110') == '3'\nassert solution('1101') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 0 4 2 2 0') == '33.121375178000'\nassert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('2 1') == '1'"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 0 4 2 2 0') == '33.121375178000'\nassert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('0') == '0'\nassert solution('5') == '0'\nassert solution('3 2 2') == '0'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) == '33.121375178000'\nprint(solution(input_data))\n\n\"\"\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\nassert solution('5 1 2 3 0 0') == '6.83058203884'"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('3') == '33.121375178000'\n\n\"\"\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 0 4 2 2 0') == '33.121375178000'\nassert solution('6 0 4 2 3 0') == '31.977649833134'\nassert solution('4 0 0 0 0 0') == '4.8261335143264'\nassert solution('10 0 0 0 0 0') == '8.6766140967881'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == '11.084259940083'\nassert solution('''5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'\nprint(solution('''1\n3\n3\n2\n4\n5\n4\n2\n3\n2\n'''))\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 0 4 2 2 0') == '33.121375178000'\nassert solution('3 1 1 2 0 0') == '11.084259940083'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1\\n3 1\\n2 1') == '11.084259940083'\nassert solution('5 0 4 2 2 0\\n5\\n5 2\\n3 0\\n5 5\\n3 5\\n3 3\\n') == '33.121375178000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4\") == \"2\"\nassert solution(\"8 5\") == \"2\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 5\n''') == '2'\nassert solution('''\n1000000000000 1000000000001\n''') == '1'\nassert solution('''\n7 20\n''') == '0'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'\nprint('all tests passed')"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\""
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8 5\n''') == '2'\nassert solution('''8 15\n''') == '1'\nassert solution('''7 20\n''') == '0'\nassert solution('''1000000000000 1000000000001\n''') == '500000000000'"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n8 5\n''') == '2'\nassert solution('''\n8 15\n''') == '1'\nassert solution('''\n7 20\n''') == '0'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8 5\n''') == '2'\nassert solution('''\n8 15\n''') == '1'\nassert solution('''\n7 20\n''') == '0'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '11'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1 10\") == \"11\"\nassert solution(\"5 10 1\") == \"2\"\nassert solution(\"7 2 3\") == \"0\""
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == str(11)\nassert solution(input()) == str(0)"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 1 10\n01000''') == '11'\nassert solution('''5 10 1\n01000''') == '2'\nassert solution('''7 2 3\n1111111''') == '0'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"11\"\nassert solution(\"11\") == \"1\"\nassert solution(\"111\") == \"0\"\nassert solution(\"0110\") == \"1\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([5, 1, 10]) == 11\nassert solution([5, 10, 1]) == 2\nassert solution([7, 2, 3]) == 0\n\nassert solution([5, 5, 5]) == 0\nassert solution([5, 5, 4]) == 3\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\nprint(solution(input()))"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1 1\n''') == '2 1'\nassert solution('''\n5 1 2\n''') == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1 1\n    ''') == '2 1'\n\nassert solution('''5 1 2\n    ''') == '19 5'\n\nassert solution('''5 2 2\n    ''') == '-1'\n\nassert solution('''5 3 4\n    ''') == '19 5'\n\nassert solution('''5 5 5\n    ''') == '-1'"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\n\n\n\nfrom math import log"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1 1\n''') == '2 1'\nassert solution('''\n5 1 2\n''') == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\""
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"6\"\nassert solution(\"10 2\") == \"4\""
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n\n\n\"\"\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 1\"\n) == \"4\"\n\nassert solution(\n    \"10 2\"\n) == \"4\""
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 1\\n') == '6'\nassert solution('10 2\\n') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7 1\n''') == '6'\nassert solution('''10 2\n''') == '4'"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\nassert solution('-149.154.167.99') == '0.0.0.0/0'\nassert solution('+149.154.167.100/30') == '149.154.167.100/30'\nassert solution('+149.154.167.128/25') == '149.154.167.128/25'\nassert solution('-149.154.167.120/29') == '149.154.167.120/29'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n-149.154.167.99\n''') == '1 0.0.0.0/0\\n'\nassert solution('''\n4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n''') == '2 0.0.0.0/0\\n'\nassert solution('''\n5\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31\n''') == '2 195.0.0.0/8\\n'\n\nassert solution('''\n1\n-149.154.167.99\n''') == '1 -1\\n'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('2') == '195.0.0.0/8'\nassert solution('4') == '0.0.0.0/30'\nassert solution('5') == '195.0.0.0/8'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n-149.154.167.99\\n\") == \"1\\n0.0.0.0/0\\n\"\nassert solution(\"4\\n-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n\") == \"2\\n149.154.167.99\\n149.154.167.120/29\\n\"\nassert solution(\"5\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\\n\") == \"2\\n195.0.0.0/8\\n127.0.0.4/30\\n\"\nassert solution(\"2\\n+127.0.0.1/32\\n-127.0.0.1\\n\") == \"-1\\n\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0.0.0.0/0\"\nassert solution(\"4\") == \"0.0.0.0/0\"\nassert solution(\"5\") == \"195.0.0.0/8\"\nassert solution(\"2\") == \"195.0.0.0/8\"\nassert solution(\"3\") == \"-1\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '0.0.0.0/0'\nassert solution('3') == '-1'\n\n'''\n\nimport sys\nsys.stdin = open('input.txt')"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n-149.154.167.99\\n') == '1\\n0.0.0.0/0\\n'\nassert solution('4\\n-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n') == '2\\n149.154.167.99\\n149.154.167.120/29\\n'\nassert solution('5\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\\n') == '2\\n195.0.0.0/8\\n127.0.0.4/30\\n'"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '196.0.0.0/8'\nassert solution('3') == '196.0.0.0/8'"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n-149.154.167.99\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31\n\"\"\") == \"2\""
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(open(0).read()) == '1'\nassert solution(open(1).read()) == '2'\nassert solution(open(2).read()) == '0'"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\nassert solution([\"1\", \"4\", \"5\"]) == \"1\"\nassert solution([\"8\", \"9\", \"0\"]) == \"0\"\nassert solution([\"1\", \"2\", \"3\"]) == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"11\") == \"0\""
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"2\""
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"11\") == \"0\""
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n11\n00000000008\n''') == '1'\nassert solution('''\n22\n0011223344556677889988\n''') == '2'\nassert solution('''\n11\n31415926535\n''') == '0'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n11\n00000000008\n''') == '1'\nassert solution('''\n22\n0011223344556677889988\n''') == '2'\nassert solution('''\n11\n31415926535\n''') == '0'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n11\n00000000008\n\n''') == '1'\n\nassert solution('''\n22\n0011223344556677889988\n\n''') == '2'\n\nassert solution('''\n11\n31415926535\n\n''') == '0'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n11\n00000000008\n''') == '1', 'TEST 1'\nassert solution('''\n22\n0011223344556677889988\n''') == '2', 'TEST 2'\nassert solution('''\n11\n31415926535\n''') == '0', 'TEST 3'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\nassert solution('3 5') == 'row 1'\nassert solution('3 3') == 'row 1'\nassert solution('3 3') == 'row 2'\nassert solution('3 3') == 'row 3'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5') == '4'\nassert solution('3 3') == '3'\nassert solution('3 3') == '-1'"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"4\\nrow 1\\nrow 2\\nrow 3\\n\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n2 2 2 3 2\") == \"4\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"3\"\nassert solution(\"3 3\\n0 0 0\\n0 1 0\\n0 0 0\") == \"-1\""
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"row 1\\nrow 1\\ncol 4\"\nassert solution(\"3 3\") == \"row 1\\nrow 2\\nrow 3\""
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5\\n2 2 2 3 2') == '4'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '3'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '4'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n2 2 2 3 2\") == \"4\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"-1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '-1'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\", \"Should be Yes\"\nassert solution(\"8 6 4 6\") == \"NO\", \"Should be No\"\nassert solution(\"10 3 11 4\") == \"YES\", \"Should be Yes\"\nassert solution(\"4 2 1 4\") == \"NO\", \"Should be No\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8 6 4 5\\n\") == \"YES\"\nassert solution(\"8 6 4 6\\n\") == \"NO\"\nassert solution(\"10 3 11 4\\n\") == \"YES\"\nassert solution(\"4 2 1 4\\n\") == \"YES\"\nassert solution(\"4 2 1 4\\n\") == \"YES\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 1 1 5\") == \"YES\"\nassert solution(\"10 2 1 4\") == \"NO\"\nassert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"10 3 11 4\") == \"NO\""
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 4\") == \"YES\"\nassert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"10 3 11 4\") == \"NO\""
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\", \"first\"\nassert solution(\"8 6 4 6\") == \"NO\", \"second\"\nassert solution(\"10 3 11 4\") == \"NO\", \"third\"\nassert solution(\"4 2 1 4\") == \"YES\", \"fourth\""
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'YES'\nassert solution('4 2 1 4') == 'YES'\nassert solution('0 0 1 0') == 'NO'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8 6 4 5\n''') == 'YES'\nassert solution('''8 6 4 6\n''') == 'NO'\nassert solution('''10 3 11 4\n''') == 'YES'\nassert solution('''4 2 1 4\n''') == 'YES'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"NO\""
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('10 3 11 4') == 'NO'\nassert solution('4 2 1 4') == 'YES'"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2') == '6'\nassert solution('7 8') == '12'\nassert solution('1 6') == '-1'\nassert solution('2 1') == '-1'"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == '6'\nassert solution('7 8') == '12'\n\n'''"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\n1 3\n1 4\n\n''') == \"6\"\nassert solution('''\n7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n\n''') == \"12\"\nassert solution('''\n2 2\n1 2\n2 1\n\n''') == -1\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2\n1 3\n1 4\n\n''') == '6'\nassert solution('''\n7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n\n''') == '12'\nassert solution('''\n2 2\n1 2\n2 1\n\n''') == '-1'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"4 2\") == \"12\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == '6'\nassert solution('7 8') == '12'\n\n\n\"\"\"\n\nn, m = map(int, input().split())\nv = [[0]*(n+1) for _ in range(n+1)]\nfor i in range(m):\n    x, y = map(int, input().split())\n    v[x][y] = 1\n    v[y][x] = 1\nvisited = []"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 2\n1 3\n1 4\n\n''') == '6'\nassert solution('''7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n\n''') == '12'\nassert solution('''2 2\n1 2\n2 1\n\n''') == '-1'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2') == '6'\nassert solution('7 8') == '12'\nassert solution('1 2') == '-1'\nassert solution('2 1') == '-1'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\"\nassert solution(\"2 2\") == \"-1\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2') == '6', solution('4 2')\nassert solution('7 8') == '12', solution('7 8')\nassert solution('2 2') == '-1', solution('2 2')\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"NO\"\n\"\"\"\nn, k = map(int, input().split())\nproblems = []\nfor i in range(n):\n    problems.append(list(map(int, input().split())))"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == 'NO'\nassert solution('5 3') == 'YES'"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\n\"\"\"\n\nn, k = list(map(int, input().split(\" \")))\nproblem_set = list(map(int, input().split(\" \")))\n\neven_problem_set = []\nodd_problem_set = []\n\nfor i, p in enumerate(problem_set):\n    if p % 2 == 0:\n        even_problem_set.append(i+1)\n    else:\n        odd_problem_set.append(i+1)"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == \"NO\"\nassert solution('5 4') == \"YES\"\n'''\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\n1 0\n1 1\n0 1\n\n''') == 'NO'\nassert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n\n''') == 'YES'\n'''\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n0 0 1\n1 1 0\n0 0 0\n''') == \"NO\"\n\nassert solution('''\n5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == \"YES\"\n\n'''"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('3 1') == 'NO'\nassert solution('5 3') == 'YES'\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"5 3\") == \"NO\""
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == 'YES'\nassert solution('3 3') == 'NO'\nassert solution('5 3') == 'NO'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == 'No'\nassert solution('5 7') == 'Yes'\n\n\n\n\"\"\"\n\n\"\"\"\nTASK:\nGiven a positive integer $n$ and a positive integer $k$, write a program that determines if the number $x$ can be expressed as an integer multiple of $k$ (modulo) by any sum of any two integers.\n\nWrite a program in python2.7 that solves the problem.\n\"\"\"\n\n\n\"\"\"\nTASK:\nGiven an array A[] of size N and an integer K,\nfind the number of elements of A[] such that A[i] is divisible by K.\n\nOutput format:\nFor each test case, in a new line, output the count of elements.\n\nInput format:\nThe first line contains N, size of the array.\nThe next line contains N space separated integers denoting elements of the array A[].\nThe next line contains K.\nOutput format:\nFor each test case, output the count of elements.\n\nSample Input 1:\n5\n1 2 3 4 5\n2\nSample Output 1:\n2\nSample Input 2:\n3\n2 3 5\n4\nSample Output 2:\n2\nSample Input 3:\n3\n2 3 1\n4\nSample Output 3:\n1\n\"\"\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 7\") == \"No\"\nassert solution(\"2 5\") == \"Yes\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 7') == 'No'\nassert solution('3 5') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n2 3 5 12\") == \"Yes\"\nassert solution(\"2 7\\n2 3\") == \"No\"\n\n\"\"\"\n\nn, k = map(int, input().split())\nc = list(map(int, input().split()))\n\nn = min(n, max(c))"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5\\n2 3') == 'Yes'\nassert solution('2 7\\n2 3') == 'No'"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"Yes\"\nassert solution(\"2 7\") == \"No\"\n\nimport math\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5') == 'Yes'\nassert solution('2 7') == 'No'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 5\n2 3 5 12\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\n2 7\n2 3\n\"\"\") == \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3\") == \"Yes\", \"4:2\"\nassert solution(\"5 2\") == \"No\", \"4:1\"\nassert solution(\"4 5\") == \"Yes\", \"4:5\"\nassert solution(\"2 7\") == \"No\", \"2:7\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('2 7') == 'No'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4 1\n''') == '6'\nassert solution('''6 4 2\n''') == '8'\nassert solution('''2 3 4\n''') == '-1'\nassert solution('''5 5 5\n''') == '5'"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\""
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4 1\n''') == '6'\nassert solution('''6 4 2\n''') == '8'\nassert solution('''2 3 4\n''') == '-1'\n\nassert solution('''2 3 4\n''') == '8'"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(example_input_1) == \"6\"\nassert solution(example_input_2) == \"8\"\nassert solution(example_input_3) == \"-1\""
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\""
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4 1\n''') == '6'\nassert solution('''6 4 2\n''') == '8'\nassert solution('''2 3 4\n''') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n\n\n'''\nn, m, k = map(int, input().split())"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 2 2 4 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n0 1 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 2 4 3') == '2'\nassert solution('3\\n4 1 1') == '0'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('3') == '0'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 1\\n') == '1'\nassert solution('5\\n1 2 2 4 3\\n') == '-1'\nassert solution('5\\n1 2 2 4 3\\n') == '3'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == '-1'\nassert solution(\"4\") == '0'\nassert solution(\"5\") == '2'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 2 4 3\n''') == '2'\nassert solution('''3\n4 1 1\n''') == '0'\nassert solution('''4\n0 3 0 4\n''') == '0'\nassert solution('''5\n1 2 2 4 3\n''') == '-1'\nassert solution('''3\n4 1 1\n''') == '2'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\nassert solution('4') == '0'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2 2\n''') == '2'\nassert solution('''\n5\n1 2 2 4 3\n''') == '2'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == \"2\"\nassert solution(\"3\\n4 1 1\") == \"0\""
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 2 2 4 3\n''') == '2'\nassert solution('''\n3\n4 1 1\n''') == '0'\nassert solution('''\n4\n0 3 0 4\n''') == '0'\nassert solution('''\n6\n1 0 0 2 4 4\n''') == '-1'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10000011') == '5'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(['1', '0', '0', '0', '0', '0', '0', '0']) == '8'\nassert solution(['0', '1', '0', '0', '0', '0', '0', '0']) == '4'\nassert solution(['0', '0', '1', '0', '0', '0', '0', '0']) == '3'\nassert solution(['0', '1', '0', '0', '1', '1', '0', '1']) == '1'\nassert solution(['0', '0', '1', '0', '0', '0', '1', '0']) == '1'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"0\"\nassert solution(\"01\") == \"2\""
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"8\") == \"5\""
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8\n10000011\n\nOutput\n5\n\n2\n01\n\nOutput\n2\n''') == \"5\"\nassert solution('''2\n01\n\nOutput\n2\n''') == \"2\"\nassert solution('''5\n10011011\n\nOutput\n5\n\n5\n''') == \"6\"\nassert solution('''3\n01\n\nOutput\n5\n\n1\n''') == \"1\"\nassert solution('''9\n10001100\n\nOutput\n2\n\n2\n''') == \"1\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0001\") == \"2\"\nassert solution(\"8\\n1000000001\") == \"5\"\nassert solution(\"1\\n100\") == \"1\"\nassert solution(\"4\\n11111\") == \"3\"\nassert solution(\"4\\n001\") == \"2\""
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('1') == 1\nassert solution('11') == 1\nassert solution('11') == 2\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8') == 5\nassert solution('2') == 2"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"8\") == 5\nassert solution(\"2\") == 2\n\n\n\"\"\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"1\""
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n2 3 1 4') == '3'\n\nassert solution('4\\n4 4 4 4') == '-1'\n\nassert solution('4\\n2 1 4 3') == '1'"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('2 2 1 4 3') == '-1'\nassert solution('3 4 3 2 1') == '1'\nassert solution('4 4 4 4') == '-1'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 4\") == \"3\"\nassert solution(\"4 4 4 4\") == \"-1\"\nassert solution(\"2 1 4 3\") == \"1\"\nprint(\"\u2705\")\n\n\n\"\"\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n2 3 1 4\n''') == '3'\nassert solution('''4\n4 4 4 4\n''') == '-1'\nassert solution('''4\n2 1 4 3\n''') == '1'"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n2\n1 2''') == '1'\nassert solution('''4\n4\n4 4 4 4''') == '3'\nassert solution('''4\n1 2 4 3''') == '-1'\n\n'''\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    s = []\n    for i in range(1, n + 1):\n        if i not in s:\n            for j in range(1, n + 1):\n                if j!= i and l[j-1] == i:\n                    s.append(j)\n                    break\n    return s if len(s) > 1 else -1\n'''\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1'\nassert solution('4') == '1'\nassert solution('1 2 3 4') == '1'\nassert solution('4 4 4 4') == '-1'\n\n'''\n\n\nfrom itertools import combinations"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 3 1 4\\n\") == \"3\"\nassert solution(\"5\\n4 4 4 4\\n\") == \"-\"\nassert solution(\"5\\n2 1 4 3\\n\") == \"1\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4\n2 3 1 4\n\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n4\n4 4 4 4\n\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n4\n2 1 4 3\n\n\"\"\"\n) == \"-1\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n2 3 1 4\n''') == '3'\nassert solution('''4\n4 4 4 4\n''') == '-1'\nassert solution('''4\n2 1 4 3\n''') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7') == '0'\nassert solution('2') == '1'\nassert solution('4') == '2'"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n\n1 3 2 0\n\n''') == '2'\nassert solution('''\n7\n\n1 3 3 2 1 2 3\n\n''') == '0'\nassert solution('''\n2\n\n2 2\n\n''') == '1'\nprint('\"Run\" is good. Time to check.')\n\nimport timeit\nsetup = '''\nfrom __main__ import solution\n'''\n\nprint(timeit.timeit('solution(input)', number=1000, setup=setup))\n\ninput = '''\n4\n\n1 3 2 0\n\n'''\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"2\") == \"1\""
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\nassert solution() == \"1\"\nassert solution() == \"0\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n\n1 3 2 0\n\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n7\n\n1 3 3 2 1 2 3\n\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2\n\n2 2\n\n\"\"\") == \"1\""
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"0\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"7\") == \"1\"\nassert solution(\"10\") == \"2\""
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 3 2 0\n''') == '2'\nassert solution('''\n7\n1 3 3 2 1 2 3\n''') == '0'\nassert solution('''\n2\n2 2\n''') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('7') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\nassert solution('8') == '240'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n\n5\n\n10\n\n''') == '504'\n\nassert solution('''\n\n9\n\n''') == '504'\n\nassert solution('''\n\n7\n\n6\n\n5\n\n''') == '210'"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n\"\"\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n'''\n\nn = int(input())\nn1 = int(n * 2)\nn2 = int(n * 3)\nn3 = int(n * 5)\nn4 = int(n * 6)\nn5 = int(n * 7)\n\nlcm1 = (n1 // 1) * n2 * n3\nlcm2 = (n2 // 2) * n3 * n4\nlcm3 = (n3 // 3) * n4 * n5\nlcm4 = (n4 // 4) * n5 * n1\nlcm5 = (n5 // 5) * n1 * n2\n\nlcm = lcm1 + lcm2 + lcm3 + lcm4 + lcm5\nprint(lcm)\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([9]) == \"504\"\nassert solution([7]) == \"210\"\nassert solution([7, 6, 5]) == \"210\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n''') == '6'\nassert solution('''7\n''') == '210'\nassert solution('''9\n''') == '504'\nassert solution('''7\n6\n5\n''') == '210'\nassert solution('''6\n7\n5\n''') == '210'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8\") == \"384\"\nassert solution(\"6\") == \"108\"\nassert solution(\"4\") == \"24\""
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '60'\nassert solution('10') == '600'\nassert solution('100') == '1000'\nassert solution('1234') == '1234'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1 1'\nassert solution('3') == '1 1'\nassert solution('4') == '1 1'\nassert solution('5') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1 1'\nassert solution('''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''\n4\n0 0 5 5\n0 1 1 1\n1 0 2 1\n1 2 4 1\n2 4 4 5\n\n''') == '3 4'\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1 1'\nassert solution('3') == '1 1'\nassert solution('4') == '3 4'\nassert solution('5') == '3 4'\nassert solution('10') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1 1'\nassert solution('3') == '1 1'\nassert solution('5') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n0 0 5 5\n0 1 4 4\n1 0 2 1\n1 1 4 4\n3 0 4 1\n''') == '1 1'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''\n3\n0 0 1 1\n0 1 1 2\n1 0 2 1\n''') == '1 1'\nassert solution('''\n5\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n8 1 9 2\n''') == '3 4'\nassert solution('''\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\\n') == '1 1'\nassert solution('4\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1\\n') == '1 1'\nassert solution('4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\\n') == '1 1'\nassert solution('4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\\n') == '1 1'\nassert solution('5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\\n') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\n\nassert solution('''3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\n\nassert solution('''4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\n\nassert solution('''5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1 1'\nassert solution('3') == '1 1'\nassert solution('5') == '3 4'\nassert solution('4') == '3 4'\nassert solution('4') == '3 4'"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1 1\"\nassert solution(\"4\") == \"1 1\"\nassert solution(\"5\") == \"3 4\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('8') == 'YES'"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n18 55 16 17') == 'YES'\nassert solution('6\\n40 41 43 44 44 44') == 'NO'\nassert solution('8\\n5 972 3 4 1 4 970 971') == 'YES'\nassert solution('4\\n18 55 16 17') == 'NO'\nassert solution('10\\n39 39 39 39 39') == 'NO'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == 'YES'\nassert solution('8') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n18 55 16 17') == 'YES'\nassert solution('4\\n40 41 43 44 44 44') == 'NO'\nassert solution('8\\n5 972 3 4 1 4 970 971') == 'YES'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    4\n    18 55 16 17\n    \"\"\"\n    ) == \"YES\"\n\nassert solution(\n    \"\"\"\n    6\n    5 972 3 4 1 4 970 971\n    \"\"\"\n    ) == \"YES\"\n\nassert solution(\n    \"\"\"\n    8\n    5 972 3 4 1 4 970 971\n    \"\"\"\n    ) == \"NO\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n18 55 16 17\n''') == 'YES'\nassert solution('''6\n40 41 43 44 44 44\n''') == 'NO'\nassert solution('''8\n5 972 3 4 1 4 970 971\n''') == 'YES'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'YES'\nassert solution() == 'NO'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''\n5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\nassert solution('''\n5 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\nassert solution('''10\n1 2 3 4 5\n1 2 3 4 5\n''') == '6'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 9\") == \"9\"\nassert solution(\"5 5\") == \"10\""
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 9') == '9'\nassert solution('5 5') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '10'\nassert solution('''2 3\n1 2 3\n1 2 3 7 8 9 11 12 13''') == '10'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\nprint('\"Run\" is good. Great job!')"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(example) == \"9\"\nassert solution(input) == str(len(set(range(int(input()))) - set(map(int, input().split()))))\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\nassert solution('''2 1\n1\n''') == '1'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 9\") == \"9\"\nassert solution(\"5 5\") == \"10\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n\") == \"Vasya\"\nassert solution(\"2\\n\") == \"Petya\"\nassert solution(\"8\\n\") == \"Petya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n''') == 'Vasya'\nassert solution('''2\n''') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n') == 'Vasya'\nassert solution('2\\n') == 'Petya'\nassert solution('8\\n') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\""
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1 3') == '1'\nassert solution('2 2\\n1 2') == '2'\nassert solution('2 3\\n1 3') == '1'\nassert solution('3 3\\n1 3') == '2'\n\n'''\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 3') == '0'\nassert solution('4 1 4') == '2'\nassert solution('4 4 4') == '1'\n\n------Analysis------"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2 3\n1 2\n2 2\n2 1\n''') == '0'\nassert solution('''1 5 3\n1 3\n1 1\n1 5\n''') == '2'\nassert solution('''4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n''') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 3') == '0'\nassert solution('1 5 3') == '2'\nassert solution('4 3 6') == '1'"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3\") == \"0\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"4 3 6\") == \"1\""
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 3') == '0'\nassert solution('1 5 3') == '2'\nassert solution('4 3 6') == '1'\nassert solution('2 1') == '1'\nassert solution('5 1') == '4'\n\n\n\"\"\"\n\nimport collections\nfrom typing import List\n\nclass Solution:\n    def solution(self, n, m, q, stdin: str) -> str:\n        elements: List[int] = list()\n        elements = [int(x) for x in stdin.split(' ')]\n        elements.sort()\n        n_min, m_min = min(n, m), min(n * m, q)\n        print(n_min, m_min)\n        if m_min > n_min:\n            return \"0\"\n\n        # find minimum elements needed\n        def ncr(n, r):\n            if r == 0:\n                return 1\n            if r == 1:\n                return n\n\n            numer = 1\n            denom = 1\n            for i in range(r):\n                numer = numer * (n - i)\n                denom = denom * (i + 1)\n            return numer // denom\n\n        print(ncr(n, n_min - 1))\n\n        # initialize\n        min_samples_needed: int = ncr(n, n_min - 1)\n        n_min_elements: int = 0\n        l, r = 0, 0\n        elements_range = collections.defaultdict(int)\n        for i in range(n):\n            for j in range(m):\n                elements_range[elements[i * m + j]] += 1\n        elements_needed: List[int] = list()\n        elements_needed.append(elements_range[1])\n        elements_needed.append(elements_range[2])\n\n        # construct the solution\n        while True:\n            for i in range(2, m):\n                elements_needed[0] -= elements_needed[1]\n                elements_needed[1] = elements_needed[0] + 1\n\n            if elements_needed[0] == m_min:\n                break\n\n        return str(elements_needed[0])\n\n\nprint(Solution().solution('2 2 3', '1 2', '2 1', '1 5'))\nprint(Solution().solution('1 5 3', '1 3', '2 2', '2 3'))\nprint(Solution().solution('4 3 6', '1 2', '3 2', '2 3'))\nprint(Solution().solution('2 1', '5 1', '4 1', '2 1'))\nprint(Solution().solution('5 1', '4 1', '4 1', '2 1'))\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n''') == '1'\nassert solution('''\n1 5 3\n1 3\n1 1\n1 5\n\n''') == '2'\nassert solution('''\n2 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n\n''') == '1'\n\nassert solution('''\n1 4 3\n1 3\n1 1\n1 5\n\n''') == '1'\nassert solution('''\n2 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n\n''') == '2'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 5 3\\n1 2\\n2 2\\n2 1\") == \"0\"\nassert solution(\"3 3 7\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"1\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nn, m, q = list(map(int, input().split()))"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INP1) == EXP1\nassert solution(INP2) == EXP2\nassert solution(INP3) == EXP3\n\n'''\n\nimport sys\nfrom typing import List, Tuple, Dict, Callable\n\nsys.setrecursionlimit(100000)\n\n\"\"\"\n[input]\n2 2 3\n1 2\n2 2\n2 1\n\n[output]\n0\n\n\"\"\"\n\nINP1 = \"\"\"\n2 2 3\n1 2\n2 2\n2 1\n\"\"\"\n\nINP2 = \"\"\"\n4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n\"\"\"\n\nINP3 = \"\"\"\n5 3 7\n1 2\n2 2\n3 1\n4 1\n5 1\n6 2\n6 1\n6 3\n6 2\n5 2\n\"\"\"\n\nEXP1 = \"0\"\nEXP2 = \"1\"\nEXP3 = \"2\"\n\n\"\"\"\n[input]\n3 2 1\n1 2\n2 2\n2 1\n\n[output]\n1\n\n\"\"\"\n\nINP4 = \"\"\"\n1 2\n1 3\n1 4\n\"\"\"\n\nEXP4 = \"1\"\n\n\"\"\"\n[input]\n1 3 1\n2 2\n3 3\n\n[output]\n0\n\n\"\"\"\n\nINP5 = \"\"\"\n2 3\n1 2\n2 2\n2 1\n\n[output]\n1\n\n\"\"\"\n\nEXP5 = \"0\"\n\n\"\"\"\n[input]\n2 3\n1 2\n2 2\n2 1\n\n[output]\n0\n\n\"\"\"\n\nINP6 = \"\"\"\n4 3 6\n1 2\n2 2\n2 1\n3 1\n3 3\n\n[output]\n1\n\n\"\"\"\n\nEXP6 = \"2\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 3\") == \"0\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"4 3 6\") == \"1\"\n\nstdin = '1 5 3'\nprint(solution(stdin))\n\nstdin = '2 3'\nprint(solution(stdin))\n\nstdin = '3 3'\nprint(solution(stdin))\n\nstdin = '2 2'\nprint(solution(stdin))\n\nstdin = '4 3 6'\nprint(solution(stdin))\n\nstdin = '5 5 5'\nprint(solution(stdin))\n\nstdin = '6 5 7'\nprint(solution(stdin))\n\nstdin = '6 4 5'\nprint(solution(stdin))\n\nstdin = '4 4 4'\nprint(solution(stdin))\n\nstdin = '3 3 3'\nprint(solution(stdin))\n\nstdin = '7 7 7'\nprint(solution(stdin))\n\n\nstdin = '2 4 2'\nprint(solution(stdin))\n\nstdin = '3 4 2'\nprint(solution(stdin))\n\nstdin = '4 3 4'\nprint(solution(stdin))\n\nstdin = '2 3 2'\nprint(solution(stdin))\n\nstdin = '2 3 2'\nprint(solution(stdin))\n\nstdin = '4 3 2'\nprint(solution(stdin))\n\nstdin = '3 2 2'\nprint(solution(stdin))\n\nstdin = '1 2 3'\nprint(solution(stdin))\n\nstdin = '2 2 1'\nprint(solution(stdin))\n\nstdin = '3 3 3'\nprint(solution(stdin))\n\nstdin = '3 3 1'\nprint(solution(stdin))\n\nstdin = '4 2 4'\nprint(solution(stdin))\n\nstdin = '2 2 2'\nprint(solution(stdin))\n\nstdin = '5 5 5'\nprint(solution(stdin))\n\nstdin = '6 5 7'\nprint(solution(stdin))\n\nstdin = '6 4 5'\nprint(solution(stdin))\n\nstdin = '4 4 4'\nprint(solution(stdin))\n\nstdin = '3 3 3'\nprint(solution(stdin))\n\nstdin = '7 7 7'\nprint(solution(stdin))\n\nstdin = '7 7 7'\nprint(solution(stdin))\n\nstdin = '6 6 6'\nprint(solution(stdin))\n\nstdin = '2 4 2'\nprint(solution(stdin))\n\nstdin = '3 4 2'\nprint(solution(stdin))\n\nstdin = '4 3 2'\nprint(solution(stdin))\n\nstdin = '2 3 2'\nprint(solution(stdin))\n\nstdin = '2 3 2'\nprint(solution(stdin))\n\nstdin = '4 3 2'\nprint(solution(stdin))\n\nstdin = '3 2 2'\nprint(solution(stdin))\n\nstdin = '1 2 3'\nprint(solution(stdin))\n\nstdin = '2 2 1'\nprint(solution(stdin))\n\nstdin = '3 3 3'\nprint(solution(stdin))\n\nstdin = '3 3 1'\nprint(solution(stdin))\n\nstdin = '4 2 4'\nprint(solution(stdin))\n\nstdin = '2 2 2'\nprint(solution(stdin))\n\nstdin = '5 5 5'\nprint(solution(stdin))\n\nstdin = '6 5 7'\nprint(solution(stdin))\n\nstdin = '6 4 5'\nprint(solution(stdin))\n\nstdin = '4 4 4'\nprint(solution(stdin))\n\nstdin = '3 3 3'\nprint(solution(stdin))\n\nstdin = '7 7 7'\nprint(solution(stdin))\n\nstdin = '7 7 7'\nprint(solution(stdin))\n\nstdin = '6 6 6'\nprint(solution(stdin))\n\nstdin = '2 4 2'\nprint(solution(stdin))\n\nstdin = '3 4 2'\nprint(solution(stdin))\n\nstdin = '4 3 2'\nprint(solution(stdin))\n\nstdin = '2 3 2'\nprint(solution(stdin))\n\nstdin = '2 3 2'\nprint(solution(stdin))\n\nstdin = '4 3 2'\nprint(solution(stdin))\n\nstdin = '3 2 2'\nprint(solution(stdin))\n\nstdin = '1 2 3'\nprint(solution(stdin))\n\nstdin = '2 2 1'\nprint(solution(stdin))\n\nstdin = '3 3 3'\nprint(solution(stdin))\n\nstdin = '3 3 1'\nprint(solution(stdin))\n\nstdin = '4 2 4'\nprint(solution(stdin))\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\nA\\nB\\nB\\nA') == '2'\nassert solution('4\\nA\\nB\\nB\\nA') == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\nA\\nB\\nB\\nA\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '2'\nassert solution('7') == '3'\nassert solution('8') == '3'\nassert solution('9') == '5'"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\nAA\\nAB\\nBA\\nBB\") == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nAA\\nAB\\nBA\\nBB') == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '1'\nassert solution('6') == '1'\n\n'''\nfrom math import factorial, pow, sqrt, ceil\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\nA\\nB\\nB\\nA') == 2\nassert solution('10\\nA\\nA\\nB\\nB\\nA\\nA\\nA\\nB\\nB') == 8\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\nA\\nB\\nB\\nA\") == '2'\nassert solution(\"5\\nAA\\nAB\\nBA\\nBB\") == '5'\nassert solution(\"6\\nAA\\nAB\\nBA\\nBB\\nAC\\nAD\\nAE\\nAF\") == '7'\nassert solution(\"1\\nA\\nB\\nA\") == '0'\nassert solution(\"2\\nA\\nB\\nB\") == '1'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\nA\\nB\\nB\\nA') == '2'\nassert solution('20\\nAA\\nAB\\nBB\\nAA') == '14'"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"2\") == \"1\""
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n2 3 4') == '2'\nassert solution('5\\n2 3 4 6 7') == '3'\nprint('YOUR CODE IS CORRECT!')\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3 4\\n') == '2'\nassert solution('5\\n2 3 4 6 7\\n') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"5\") == \"5\"\nassert solution(\"3\") == \"2\"\nassert solution(\"2 3 4\") == \"2\""
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 4\\n2 3 4\") == \"2\"\nassert solution(\"5 2 3 4 6 7\\n2 3 4 6 7\") == \"3\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2 3 4\") == \"2\"\nassert solution(\"5\\n2 3 4 6 7\") == \"3\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 4\") == \"2\"\nassert solution(\"5 2 3 4 6 7\") == \"3\""
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2 3 4\\n') == '2'\nassert solution('5\\n2 3 4 6 7\\n') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2 3 4\\n') == '2'\nassert solution('5\\n2 3 4 6 7\\n') == '3'\n\n\"\"\""
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 3 4\n\n''') == '2'\nassert solution('''\n5\n2 3 4 6 7\n\n''') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2 3 4\n''') == '2'\nassert solution('''\n5\n2 3 4 6 7\n''') == '3'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\nABAAC\") == \"11\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nABAAC') == '11'\n\"\"\"\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin):\n        pass\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"11\""
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\nABCABC\") == \"1\"\nassert solution(\"5\\nABCABCD\") == \"11\""
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '11'\nassert solution('10') == '10'\n\n'''\n\nn = int(input())\ns = input()\n\nresult = 1\n\nfor i in range(n):\n    if s[i]!= s[i+1]:\n        s = s[:i]+s[i+1]\n        result = (result * len(s)) % (10**9+7)\n\nprint(result)"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"ABCDE\") == \"8\"\nassert solution(\"AAABBB\") == \"6\"\nassert solution(\"ABC\") == \"2\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"10\") == \"11\"\nassert solution(\"10\") == \"10\"\nassert solution(\"10\") == \"11\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '11'\nassert solution('ABC') == '8'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\nABACA') == '11'\nassert solution('10\\nABABAC') == '10'"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\nABABC\\n\") == \"7\"\n\"\"\"\n\nimport collections\n\nN = int(input())\n\nS = input()"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n4 2\n1 1\n0 1\n2 3\n\n''') == '3', \"First\"\nassert solution('''\n1023\n1 2\n1 0\n1 2\n1 1\n\n''') == '-1', \"Second\""
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([5,4,2,1,0,1,0,2,3]) == 3\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"1023 1 2\") == \"-1\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"0 1\") == \"2\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"1023 1\") == \"-\"\nassert solution(\"1023 1 2\") == \"3\"\nassert solution(\"1023 1 0\") == \"3\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n4 2\n1 1\n0 1\n2 3\n''') == '3'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"3\"\n\"\"\"\n\nn = int(input())\nh1, h2 = list(map(int, input().split()))\nx1, y1 = list(map(int, input().split()))\nh1_ = h1\nh2_ = h2\nx1_ = x1\ny1_ = y1\n\nwhile True:\n    h1_ = (h1_ + y1_) % n\n    h2_ = (h2_ + x1_) % n\n    x1_ = (x1_ + y1_) % n\n    y1_ = (y1_ + x1_) % n\n    if h1_ == h2_:\n        print(-1)\n        break\n    print(int(abs(h2_ - h1_) * n + abs(x1_ - y1_) * n) % n)\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '-1'\nassert solution(input()) == '-1'\nassert solution(input()) == '-1'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([5, 4, 2, 1, 0, 1, 0, 2, 3]) == \"3\", \"Wrong!\"\nassert solution([5, 4, 2, 1, 0, 1, 1, 2, 3]) == \"1\", \"Wrong!\"\nassert solution([5, 4, 2, 1, 0, 1, 0, 1, 1, 1, 1, 2, 3]) == \"1\", \"Wrong!\"\nassert solution([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == \"0\", \"Wrong!\"\n\n'''"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2\n1 1\n0 1\n2 3\n''') == \"3\"\nassert solution('''1023\n1 2\n1 0\n1 2\n1 1\n''') == \"-\"\nassert solution('''5\n1 1\n1 1\n1 2\n2 2\n''') == \"2\"\nassert solution('''1 2\n1 1\n1 2\n2 2\n''') == \"2\"\nassert solution('''5\n1 1\n1 2\n1 1\n1 2\n''') == \"2\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"-1\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n4 5') == '2'\nassert solution('2\\n2 2 3') == '1'\n\n'''\n\n\nimport math\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n4 5\n''') == '2'\nassert solution('''\n4\n5 6 7\n''') == '1'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4 5\\n\") == \"2\"\nassert solution(\"3\\n2 3 3\\n\") == \"3\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '2'\nassert solution('5') == '1'\nassert solution('5') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('4 5') == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('4 5') == '2'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 2 3') == 'NO'\nassert solution('2 2 2 3') == 'NO'\nassert solution('1 2 2 3') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 2 1') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('2 2 2 3') == 'NO'\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([2, 2, 2, 1]) == \"YES\"\nassert solution([1, 2, 3, 4]) == \"NO\"\nassert solution([1, 1, 2, 3]) == \"NO\"\nassert solution([1, 1, 2, 3]) == \"NO\"\nassert solution([1, 2, 3]) == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2 2 2 1\n\"\"\"\n) == \"YES\n\nassert solution(\n\"\"\"\n1 2 3 4\n\"\"\"\n) == \"NO\"\n\nassert solution(\n\"\"\"\n2 2 2 3\n\"\"\"\n) == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_sample_one) == \"YES 0 1 0 1 2 3 2\"\nassert solution(input_sample_two) == \"YES 1 1 1 2 2 3 2\"\nassert solution(input_sample_three) == \"NO\"\nassert solution(input_sample_four) == \"YES 0 0 0 1 1 2 3 2\"\nassert solution(input_sample_five) == \"NO\"\n\n\n>>>"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\nassert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"2 2 2 3\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"YES\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"YES\"\nassert solution(\"4 4\") == \"YES\"\nassert solution(\"3 6\") == \"YES\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\\n\") == \"YES\"\nassert solution(\"3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n\") == \"NO\"\nassert solution(\"3 8\\n2 1 3 4 5 6 8\\n1 2 4 3 5 6 8\\n1 2 3 4 6 8 5\\n\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n\") == \"YES\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"YES\", \"sample\"\nassert solution(\"4 4\") == \"YES\", \"sample\"\nassert solution(\"3 6\") == \"YES\", \"sample\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"YES\"\nassert solution(s)!= \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\\n\") == \"YES\"\nassert solution(\"3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n\") == \"NO\"\nassert solution(\"4 4\\n1 2 3 4 5 6\\n1 3 4 2 5 6\\n1 2 4 3 6 5\\n4 1 2 3 5 6\\n\") == \"YES\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input(\"\")) == \"NO\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\"\nassert solution([1, 3, 2, 4]) == \"YES\"\nassert solution([1, 3, 4, 2]) == \"NO\"\nassert solution([1, 4, 2, 3]) == \"YES\"\nassert solution([2, 1, 4, 3]) == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([[1, 2, 3, 4], [1, 4, 3, 2], [1, 2, 3, 4]]) == \"YES\"\nassert solution([[2, 1, 3, 4], [2, 4, 3, 1], [2, 3, 4, 1]]) == \"NO\"\nassert solution([[3, 1, 2, 4], [3, 2, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3], [4, 2, 3, 1]]) == \"NO\"\nassert solution([[2, 1, 3, 4], [2, 4, 3, 1], [2, 3, 4, 1], [4, 1, 2, 3], [4, 2, 3, 1]]) == \"NO\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'NO'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n\n'''"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\nassert solution('1 3 1') == '1'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\nassert solution('1 1 2') == '2'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1 1\n''') == '0'\nassert solution('''1 2 1\n''') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1 1\n''') == '0'\nassert solution('''\n1 2 1\n''') == '666666672'\n'''\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 1 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1 2 1\n\"\"\") == \"666666672\"\nassert solution(\"\"\"\n1 3 1\n\"\"\") == \"333333333\"\n\"\"\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 1\n''') == '0'\nassert solution('''\n1 2 1\n''') == '666666672'\n''')"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"5\"\nassert solution(\"7\") == \"6\"\nassert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '5'\nassert solution('7') == '5'\nassert solution('8') == '4'\nassert solution('9') == '4'\nassert solution('10') == '4'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == 0\nassert solution(\"2 3 1\") == 2\nassert solution(\"6 2 3 1 5 6\") == 5\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '5'\nassert solution('''\n6\n7 2 3 1 5 6\n''') == '5'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"5\"\nassert solution(\"7\") == \"5\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '4'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n7 2 3 1 5 6') == '5'\nassert solution('6\\n3 2 1 5 6') == '5'\nassert solution('6\\n1 2 3 4 5 6') == '6'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '5'\nassert solution('1') == '0'\nassert solution('6') == '4'\nassert solution('4') == '2'\nassert solution('8') == '2'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n7 2 3 1 5 6\n''') == '5'\nassert solution('''\n10\n7 2 3 5 1 6 9 8 4\n''') == '8'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 8\") == '2'\nassert solution(\"4 2 2 6\") == '3'\nassert solution(\"3 7 4 6\") == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\n\n\n'''\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 8\") == 2\nassert solution(\"4 2 2 6\") == 3\nassert solution(\"3 7 4 6\") == 1\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 8') == \"2\"\nassert solution('4 2 2 6') == \"3\"\nassert solution('3 7 4 6') == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 8') == \"2\"\nassert solution('4 2 2 6') == \"3\"\nassert solution('3 7 4 6') == \"1\""
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 2 5\n4\n-1 -1 15''') == '2'\nassert solution('''0 -1 5\n4\n-1 -1 15''') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"4\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2 5\n4\n-1 -5''') == '2'\nassert solution('''0 -1 5\n3\n-1''') == '4'\nassert solution('''0 -1 5\n3\n-1''') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'\n\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == '2'\nassert solution('6 2\\n1 1 2 2 3 3') == '0'\nassert solution('6 1\\n1 1 2 2 3 3') == '2'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 1\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n6 2\n2 1 2 3 4 3\n''') == '0'\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '2'\n'''\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 1\n0 0 1 1 2 2 2 2 3 3 3 4 4 4 5 5 5 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 8 8 8 9 9 9 9 10 10 10 10\n''') == '2'\n\nassert solution('''\n10 1\n0 0 1 1 2 2 2 2 3 3 3 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 8 8 8 9 9 9 9 10 10 10 10\n''') == '0'\n\nassert solution('''\n6 1\n2 2 2 3 3 3\n''') == '0'\n\nassert solution('''\n6 1\n2 3 4 5 5\n''') == '0'\n\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '0'"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1 2 3 4 3\") == \"2\"\nassert solution(\"2 1 2 3 4 3\") == \"0\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"6 1\") == \"0\"\n\n---"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 1\n2 1 2 3 4 3\n\n''') == '2'\nassert solution('''\n6 2\n2 1 2 3 4 3\n\n''') == '0'\nassert solution('''\n6 1\n1 1 2 2 3 3\n\n''') == '2'"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 1\n2 1 2 3 4 3\n''') == '2'\n\nassert solution('''\n5 2\n1 1 2 2 3 3\n''') == '0'\n\nassert solution('''\n5 1\n1 1 2 2 3 3\n''') == '2'\n\nassert solution('''\n5 1\n1 1 2 2 3 3\n''') == '0'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 1\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n6 2\n2 1 2 3 4 3\n''') == '0'\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '2'\n\n'''\nOutput:\n\n2\n\n'''\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n2 2\n3 3''') == '0'\nassert solution('''2\n1 1\n2 2''') == '1'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '2'\nassert solution(input_) == '0'"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"saturday\") == \"YES\"\nassert solution(\"sunday\") == \"NO\"\nassert solution(\"friday\") == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('monday\\ntuesday\\n') == 'YES'\nassert solution('saturday\\ntuesday\\n') == 'YES'\nassert solution('saturday\\nsaturday\\n') == 'NO'\nassert solution('sunday\\nsunday\\n') == 'YES'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'NO'\nassert solution(input()) == 'YES'"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('monday\\ntuesday') == 'NO'\nassert solution('saturday\\ntuesday') == 'YES'\nassert solution('saturday\\nfriday') == 'NO'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('monday\\ntuesday') == 'NO'\nassert solution('sunday\\ntuesday') == 'YES'\nassert solution('saturday\\ntuesday') == 'YES'"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"YES\""
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('monday') == 'NO'\nassert solution('tuesday') == 'YES'\nassert solution('saturday') == 'YES'\nassert solution('sunday') == 'NO'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"wednesday\") == \"YES\"\nassert solution(\"thursday\") == \"YES\"\nassert solution(\"friday\") == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('saturday') == 'YES'\nassert solution('sunday') == 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''monday\ntuesday''') == 'NO'\nassert solution('''sunday\nsaturday''') == 'YES'\nassert solution('''saturday\ntuesday''') == 'YES'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n27\n''') == \"1+7+1+8\"\n\nassert solution('''\n10000000000\n''') == \"91\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"35\") == \"17\"\nassert solution(\"10000000000\") == \"91\""
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''7\n8\n''') == '0'\n\nassert solution('''35\n\n''') == '17'\n\nassert solution('''10000000000\n\n''') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('35\\n') == '17\\n'\nassert solution('10000000000\\n') == '91\\n'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '17'\nassert solution('10000000000') == '91'\n\n'''"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5000000001 4999999999') == '91'\nassert solution('10000000000') == '17'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('XO') == 'NO'"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''ABCDEFGHI JKLMNOPQRSTUVWXYZ''') == 'YES'\nassert solution('''XO''') == 'NO'\nassert solution('''Z''') == 'NO'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nassert solution('AHA') == 'YES'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == 'NO'\nassert solution('ABCDEFGHI JKLMNOPQRSTUVWXYZ') == 'YES'\nassert solution('XO') == 'NO'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('XO') == 'NO'\nprint(solution(input()))"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ABD\") == \"YES\"\nassert solution(\"Z\") == \"YES\"\nassert solution(\"XO\") == \"NO\"\nassert solution(\"ABA\") == \"YES\""
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\""
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n1 5\") == \"0\"\nassert solution(\"3\\n1 2 5\") == \"1\"\nassert solution(\"2\\n1 2 5\") == \"1\"\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 5''') == '0'\nassert solution('''3\n1 2 5''') == '1'\nassert solution('''4\n1 2 3 5''') == '2'\nassert solution('''5\n1 2 3 4 5''') == '2'\nassert solution('''6\n1 2 3 4 5 6''') == '2'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 5\n\n''') == '1'\nassert solution('''\n3\n1 2 5\n\n''') == '2'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n''') == '1'\nassert solution('''1\n1 2\n''') == '0'\nassert solution('''2\n1 2\n''') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n1\n''') == '1'\nassert solution('''\n2\n1 5\n''') == '0'\nassert solution('''\n3\n1 2 5\n''') == '1'\n\nwith open('input.txt', 'r') as fin:\n    data = fin.read()\n    print(solution(data))"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1 5\n''') == '0'\nassert solution('''3\n1 2 5\n''') == '1'\nassert solution('''4\n1 2 5 6\n''') == '2'\nassert solution('''5\n1 2 5 6 7\n''') == '3'\nassert solution('''6\n1 2 5 6 7 8\n''') == '4'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == str(output)"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n1 5\n\n''') == '1'\nassert solution('''\n3\n1 2 5\n\n''') == '1'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2\\nRURD') == 'Yes'\nassert solution('1 2\\nR') == 'No'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(INP_S) == \"Yes\"\n\"\"\"\n\nimport sys\n\nINP_S = sys.stdin.read()"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\nRU\") == \"Yes\"\nassert solution(\"1 2\\nRU\") == \"No\"\nassert solution(\"-1 1000000000\\nLRRLU\") == \"Yes\"\nassert solution(\"0 0\\nD\") == \"Yes\"\n\nstdin = \"2 2\\nRU\"\nprint(solution(stdin))\n\nstdin = \"1 2\\nRU\"\nprint(solution(stdin))\n\nstdin = \"-1 1000000000\\nLRRLU\"\nprint(solution(stdin))\n\nstdin = \"0 0\\nD\"\nprint(solution(stdin))"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('-1 1000000000') == 'Yes'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\nRU''') == 'Yes'\nassert solution('''1 2\nRU''') == 'No'\nassert solution('''0 0\nD''') == 'Yes'\nassert solution('''10 10\nRLDRDLLRLLR''') == 'Yes'\nassert solution('''-1 1000000000\nLRRLU''') == 'Yes'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\nRURDL\") == \"Yes\"\nassert solution(\"-1 1000000000\\nLRRLU\") == \"Yes\"\nassert solution(\"0 0\\nD\") == \"Yes\""
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\""
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\nassert solution('60') == '1'\n\n\"\"\"\nimport re\nimport math\nfrom itertools import zip_longest"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '1'\n\nTest Case 2:\n\nSample Input 1:\n10 3 7\nSample Output 1:\n1\n\nSample Input 2:\n10   3   7\nSample Output 2:\n1\n\nSample Input 3:\n314\n159 265\n358\nSample Output 3:\n0\n\nSample Input 4:\n22 19 3\nSample Output 4:\n1\n\nSample Input 5:\n   60\n  \n  29\n  \n      31\n          \n          \n          \n          \nSample Output 5:\n1\n\nSample Input 6:\n   40\n\nSample Output 6:\n1\n\nSample Input 7:\n   10\n\nSample Output 7:\n0\n\nSample Input 8:\n\nSample Output 8:\n1\n\nSample Input 9:\n\nSample Output 9:\n0\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\nassert solution('60') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 3 7\n''') == '1'\n\nassert solution('''\n10   3   7\n''') == '1'\n\nassert solution('''\n314\n159 265\n358\n''') == '0'\n\nassert solution('''\n22 19 3\n''') == '1'\n\nassert solution('''\n\n   60\n  \n  \n  \n  \n''') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''10 3 7\n''') == '1'\nassert solution('''10   3   7\n''') == '1'\nassert solution('''314\n159 265\n358\n''') == '0'\nassert solution('''22 19 3\n''') == '1'\nassert solution('''60\n''') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\""
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3 7') == '1'\nassert solution('10 3 7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\nassert solution('60') == '1'\n\"\"\""
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"1\\n\") == \"9\""
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"9\"\n\"\"\"\nfrom functools import reduce"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n\") == \"9\"\nassert solution(\"1\\n\") == \"9\"\nassert solution(\"1\\n\") == \"9\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '9'\nassert solution('10') == '9'"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '9'\nassert solution('3') == '12'\nassert solution('4') == '14'\nassert solution('5') == '21'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '9'\nassert solution('1010') == '10'\nassert solution('10000') == '9'\nassert solution('100001') == '10'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '9'\nassert solution('10') == '18'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '8'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 6 28 9\\n\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\\n\") == \"3\"\nassert solution(\"6\\n1 2 4 8\\n\") == \"-1\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\n3 6 28 9\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5\n5 12 9 16 48\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4\n1 2 4 8\n\"\"\") == \"-1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n3 6 28 9\n''') == '4'\n\nassert solution('''5\n5 12 9 16 48\n''') == '3'\n\nassert solution('''4\n1 2 4 8\n''') == '-1'"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4'\nassert solution() == '3'\nassert solution() == '-1'"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"5\") == \"4\"\nassert solution(\"4\") == \"-1\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n3 6 28 9\n''') == '4'\nassert solution('''5\n5 12 9 16 48\n''') == '3'\nassert solution('''4\n1 2 4 8\n''') == '-1'\nassert solution('''4\n0 0 0 0\n''') == '-1'\nassert solution('''4\n1 2 3 4\n''') == '-1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 6 28 9\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\""
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n    3\n    3 6 28 9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n    5\n    5 12 9 16 48\n\"\"\") == \"3\"\nassert solution(\"\"\"\n    4\n    1 2 4 8\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n3 6 28 9\n\n''') == '4', 'First'\n\nassert solution('''\n5\n5 12 9 16 48\n\n''') == '3', 'Second'\n\nassert solution('''\n4\n1 2 4 8\n\n''') == '-1', 'Third'"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 6 28 9\\n\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\\n\") == \"3\"\nassert solution(\"4\\n1 2 4 8\\n\") == \"-1\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"2\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 2 3\\n\") == \"2\"\nassert solution(\"7\\n1 0 0 5 0 0 2\\n\") == \"1\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.readline()\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1 7 3 5 6 4 2'"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"1\""
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n0 5 0 2 3') == '2'\nassert solution('7\\n1 0 0 5 0 0 2') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1'"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10\n''') == '2'\nassert solution('''\n100\n''') == '5'\nassert solution('''\n15\n''') == '4'\nassert solution('''\n18\n''') == '3'\nassert solution('''\n10\n''') == '2'"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n''') == '2'\nassert solution('''5\n''') == '5'\n''')"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n') == '2'\nassert solution('5\\n') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n\") == \"2\\n\"\nassert solution(\"5\\n\") == \"5\\n\"\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '5'\n\n\nfrom math import gcd\nfrom itertools import permutations, combinations"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n\") == \"2\"\nassert solution(\"5\\n\") == \"5\"\nassert solution(\"1\\n\") == \"1\""
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"5\""
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '5'\n\n'''\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3\n2\n2\n4''') == '5'\n\nassert solution('''6\n4\n3\n2\n1\n1\n1''') == '4'\n\nassert solution('''6\n5\n3\n3\n3\n3\n3''') == '5'\n\nassert solution('''6\n1\n2\n2\n3\n3\n3''') == '4'\n\nassert solution('''6\n1\n2\n2\n3\n3\n3''') == '3'"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2 2\n1 3 4 5 2\n5 3 2 1 4\n''') == '18'\nassert solution('''4 2 2\n10 8 8 3\n10 7 9 4\n''') == '31'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('4 2 2') == '31'"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == '18 4'\nassert solution(input) == '1 3 5 4'\n\nstdin = '5 2 2'\nstdout = '18 4'\n\nprint(f'{stdin} | {solution(stdin)}')\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2 2\n1 3 4 5 2\n5 3 2 1 4''') == '18'\nassert solution('''4 2 2\n10 8 8 3\n10 7 9 4\n\nOutput\n31\n1 2 \n3 4 \n\nInput\n5 3 1\n5 2 5 1 7\n6 3 1 6 3\n\nOutput\n23\n1 3 5 \n4''') == '23'\nassert solution('''5 3 1\n5 2 5 1 7\n6 3 1 6 3''') == '31'\nassert solution('''4 2 2\n10 8 8 3\n10 7 9 4\n\nOutput\n31\n1 3 5 \n4''') == '31'\nassert solution('''2 1\n1''') == '1'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2 2') == '18', \"the answer to the first example is 18\"\nassert solution('4 2 2') == '31', \"the answer to the second example is 31\"\nassert solution('5 3 1') == '1 3 5', \"the answer to the third example is 1 3 5\""
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2 2\n1 3 4 5 2\n5 3 2 1 4\n''') == '18'\n\nassert solution('''4 2 2\n10 8 8 3\n10 7 9 4\n''') == '31'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('4 2 2') == '31'\nassert solution('5 3 1') == '1 3 5'\nassert solution('6 3 1 6 3') == '4'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2 2\n1 3 4 5 2\n5 3 2 1 4''') == '18'\nassert solution('''4 2 2\n10 8 8 3\n10 7 9 4\n\nOutput\n31\n1 2 \n3 4 \n\nInput\n5 3 1\n5 2 5 1 7\n6 3 1 6 3\n\nOutput\n23\n1 3 5 \n4\n''') == '23'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 2 2\n1 3 4 5 2\n5 3 2 1 4\n''') == '18'\n\nassert solution('''4 2 2\n10 8 8 3\n10 7 9 4\n''') == '31'\n\nprint(solution('''\n5 2 2\n1 3 4 5 2\n5 3 2 1 4\n'''))\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 2\") == \"18\"\nassert solution(\"5 2 2\") == \"31\"\nassert solution(\"4 2 2\") == \"23\"\n\nstdin = \"\"\"\n5 2 2\n1 3 4 5 2\n5 3 2 1 4\n\"\"\"\n\nstdout = \"\"\"\n23\n3 4 \n1 5 \n\"\"\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n1 2\\n') == 'Yes'\nassert solution('4 3\\n1 2\\n1 3\\n1 4\\n') == 'No'\nprint(solution(input()))"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 2\") == \"Yes\\naa\\n\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"No\\n\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"Yes\\nab\\n\""
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1\n1 2\n''') == 'Yes'\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'No'\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n1 5\n''') == 'Yes'\nassert solution('''\n2 3\n1 2\n1 3\n''') == 'Yes'\nassert solution('''\n3 3\n1 2\n2 3\n''') == 'No'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n1 2\\n\") == \"Yes\"\nassert solution(\"2 3\\n1 3\\n1 4\\n\") == \"No\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('4 3') == 'No'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 1\n1 2\n''') == 'Yes'\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'No'\nassert solution('''\n2 2\n1 1\n''') == 'No'\nprint('done')\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == 'Yes\\naa'\nassert solution('4 3') == 'No'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"4 3\") == \"No\""
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 2\") == \"Yes\\naa\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"No\"\nassert solution(\"2 1\\n2 2\") == \"Yes\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 2\\n') == 'Yes'\nassert solution('4 3\\n1 2\\n1 3\\n1 4\\n') == 'No'"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"7\""
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 1 1\") == \"7\"\nassert solution(\"0 2 1\") == \"19\""
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0 1 1\") == \"7\"\nassert solution(\"0 2 1\") == \"19\"\nassert solution(\"0 2 0\") == \"0\"\nassert solution(\"2 2 2\") == \"10\"\nassert solution(\"3\") == \"0\""
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 0 1\n1 2 0\n3\n''') == '7'\nassert solution('''\n3\n1 0 1\n1 2 0\n3\n''') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0\\n3\\n') == '7'\nassert solution('0 2 1\\n1 0 100\\n1 2 0\\n3\\n') == '19'\nassert solution('0 2 1\\n1 0 100\\n1 2 0\\n5\\n') == '87'"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 1 1\") == \"7\"\nassert solution(\"0 2 2\") == \"19\"\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0 1 1\n1 0 1\n1 1 0\n3\n''') == '7'\n\nassert solution('''\n0 2 1\n1 0 100\n1 2 0\n5\n''') == '87'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0\\n3\\n') == '7'\nassert solution('0 2 1\\n1 0 100\\n1 2 0\\n5\\n') == '87'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 0 1\") == \"2\"\nassert solution(\"1 1 0\") == \"3\"\nassert solution(\"1 1 1 1\") == \"1\""
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 1 1\") == \"7\"\nassert solution(\"0 2 2\") == \"19\"\nassert solution(\"0 1 1 1\") == \"15\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''Bulbbasaur''') == '1'\nassert solution('''F''') == '0'\nassert solution('''aBddulbasaurrgndgbualdBdsagaurrgndbb''') == '2'\nassert solution('''Zpzzzzz''') == '0'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\nassert solution(\"BB\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\""
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\\n\".join([\n        \"Bulbbasaur\",\n        \"F\"\n    ])) == \"1\"\n\nassert solution(\"\\n\".join([\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\"\n    ])) == \"2\"\n\nassert solution(\"\\n\".join([\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"C\"\n    ])) == \"0\"\n\nassert solution(\"\\n\".join([\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\"\n    ])) == \"3\"\n\nassert solution(\"\\n\".join([\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"C\",\n        \"aBddulbasaurrgndgbualdBdsagaurrgndbb\",\n        \"B\",\n        \"Bulbbasaur\",\n        \"F"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == 0\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 2\nassert solution(\"F\") == 0\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == 1\nassert solution(\"hello\") == 0\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"Bulbbasaur\") == \"1\"\nassert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"Bulbbasaur\") == \"1\"\nassert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"Bulbbasaur\") == \"1\"\nassert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\nassert solution(\"aaBBBccCCcdddEEEEEEff\") == \"6\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Bulbbasaur') == '1'\nassert solution('F') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\narc\\nrac') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\n\n'''"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"5 4\") == \"NO\"\n\n--\nstdin = \"6 6\"\nstdin = \"3 5\"\n\n--\nstdin = \"10 10\"\nstdin = \"5 5\"\n\n--\nstdin = \"5 9\"\nstdin = \"7 9\"\n\n--\nstdin = \"10 8\"\nstdin = \"5 8\"\n\n--\nstdin = \"5 6\"\nstdin = \"7 5\"\n\n--\nstdin = \"6 10\"\nstdin = \"7 10\"\n\n--\nstdin = \"5 7\"\nstdin = \"7 5\"\n\n--\nstdin = \"4 2\"\nstdin = \"6 2\"\n\n--\nstdin = \"6 1\"\nstdin = \"6 1\"\n\n--\nstdin = \"3 1\"\nstdin = \"3 1\"\n\n--\nstdin = \"2 4\"\nstdin = \"4 2\"\n\n--\nstdin = \"3 4\"\nstdin = \"4 3\"\n\n--\nstdin = \"6 5\"\nstdin = \"5 6\"\n\n--\nstdin = \"10 9\"\nstdin = \"9 10\"\n\n--\nstdin = \"9 1\"\nstdin = \"9 1\"\n\n--\nstdin = \"2 3\"\nstdin = \"3 2\"\n\n--\nstdin = \"6 2\"\nstdin = \"2 6\"\n\n--\nstdin = \"8 3\"\nstdin = \"3 8\"\n\n--\nstdin = \"2 7\"\nstdin = \"7 2\"\n\n--\nstdin = \"2 5\"\nstdin = \"5 2\"\n\n--\nstdin = \"6 2\"\nstdin = \"6 2\"\n\n--\nstdin = \"7 2\"\nstdin = \"2 7\"\n\n--\nstdin = \"2 5\"\nstdin = \"5 2\"\n\n--\nstdin = \"7 3\"\nstdin = \"3 7\"\n\n--\nstdin = \"7 2\"\nstdin = \"2 7\"\n\n--\nstdin = \"7 2\"\nstdin = \"2 7\"\n\n--\nstdin = \"6 8\"\nstdin = \"8 6\"\n\n--\nstdin = \"8 8\"\nstdin = \"8 8\"\n\n--\nstdin = \"8 5\"\nstdin = \"5 8\"\n\n--\nstdin = \"8 6\"\nstdin = \"6 8\"\n\n--\nstdin = \"4 3\"\nstdin = \"3 4\"\n\n--\nstdin = \"6 5\"\nstdin = \"5 6\"\n\n--\nstdin = \"8 1\"\nstdin = \"1 8\"\n\n--\nstdin = \"8 2\"\nstdin = \"2 8\"\n\n--\nstdin = \"8 2\"\nstdin = \"2 8\"\n\n--\nstdin = \"8 2\"\nstdin = \"2 8\"\n\n--\nstdin = \"6 8\"\nstdin = \"6 8\"\n\n--\nstdin = \"6 1\"\nstdin = \"1 6\"\n\n--\nstdin = \"2 4\"\nstdin = \"4 2\"\n\n--\nstdin = \"7 2\"\nstdin = \"2 7\"\n\n--\nstdin = \"6 8\"\nstdin = \"8 6\"\n\n--\nstdin = \"5 3\"\nstdin = \"3 5\"\n\n--\nstdin = \"8 5\"\nstdin = \"5 8\"\n\n--\nstdin = \"5 8\"\nstdin = \"8 5\"\n\n--\nstdin = \"2 3\"\nstdin = \"3 2\"\n\n--\nstdin = \"2 8\"\nstdin = \"8 2\"\n\n--\nstdin = \"8 5\"\nstdin = \"5 8\"\n\n--\nstdin = \"5 2\"\nstdin = \"2 5\"\n\n--\nstdin = \"3 2\"\nstdin = \"3 2\"\n\n--\nstdin = \"8 4\"\nstdin = \"4 8\"\n\n--\nstdin = \"5 4\"\nstdin = \"4 5\"\n\n--\nstdin = \"1 3\"\nstdin = \"3 1\"\n\n--\nstdin = \"5 4\"\nstdin = \"4 5\"\n\n--\nstdin = \"5 8\"\nstdin = \"8 5\"\n\n--\nstdin = \"5 6\"\nstdin = \"6 5\"\n\n--\nstdin = \"4 4\"\nstdin = \"4 4\"\n\n--\nstdin = \"3 4\"\nstdin = \"3 4\"\n\n--\nstdin = \"1 2\"\nstdin = \"2 1\"\n\n--\nstdin = \"8 4\"\nstdin = \"4 8\"\n\n--\nstdin = \"8 3\"\nstdin = \"3 8\"\n\n--\nstdin = \"5 2\"\nstdin = \"2 5\"\n\n--\nstdin = \"5 7\"\nstdin = \"7 5\"\n\n--\nstdin = \"6 8\"\nstdin = \"8 6\"\n\n--\nstdin = \"8 2\"\nstdin = \"2 8\"\n\n--\nstdin = \"8 1\"\nstdin = \"1 8\"\n\n--\nstdin = \"4 3\"\nstdin = \"3 4\"\n\n--\nstdin = \"8 7\"\nstdin = \"7 8\"\n\n--\nstdin = \"5 2\"\nstdin = \"2 5\"\n\n--\nstdin = \"7 4\"\nstdin = \"4 7\"\n\n--\nstdin = \"6 3\"\nstdin = \"3 6\"\n\n--\nstdin = \"5 7\"\nstdin = \"7 5\"\n\n--\nstdin = \"2 1\"\nstdin = \"1 2\"\n\n--\nstdin = \"4 5\"\nstdin = \"5 4\"\n\n--\nstdin = \"7 6\"\nstdin = \"6 7\"\n\n--\nstdin = \"4 6\"\nstdin = \"6 4\"\n\n--\nstdin = \"7 3\"\nstdin = \"3 7\"\n\n--\nstdin = \"6 3\"\nstdin = \"3 6\"\n\n--\nstdin = \"2 4\"\nstdin = \"4 2\"\n\n--\nstdin = \"5 8\"\nstdin = \"8 5\"\n\n--\nstdin = \"5 3\"\nstdin = \"3 5\"\n\n--\nstdin = \"7 8\"\nstdin = \"8 7\"\n\n--\nstdin = \"5 1\"\nstdin = \"1 5\"\n\n--\nstdin = \"5 6\"\nstdin = \"6 5\"\n\n--\nstdin = \"3 8\"\nstdin = \"8 3\"\n\n--\nstdin = \"8 7\"\nstdin = \"7 8\"\n\n--\nstdin = \"8 3\"\nstdin = \"3 8\"\n\n--\nstdin = \"2 4\"\nstdin"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\na\n''') == 'NO'\nassert solution('''\n3 3\nabc\nzxy\n''') == 'NO'\nassert solution('''\n2 3\na\nb\n''') == 'YES'\nassert solution('''\n3 3\nabc\nzxy\n''') == 'NO'\nassert solution('''\n6 4\naacb\nxyza\ncabx\nxxzy\nyxyz\nzxc\n''') == 'YES'\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('5 4') == 'NO'\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\narc\\nrac\") == \"YES\"\n\nassert solution(\"2 3\\narc\\nrac\") == \"YES\"\n\nassert solution(\"2 3\\narc\\nrac\") == \"YES\"\n\nassert solution(\"2 3\\narc\\nrac\") == \"YES\"\n\nassert solution(\"2 3\\narc\\nrac\") == \"YES\""
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == 'YES'\nassert solution('2 1') == 'NO'\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == 'YES'\nassert solution('3 2') == 'NO'\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"5 7\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\narc\\nrac') == 'YES'\nassert solution('2 3\\nxyz') == 'NO'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 111\") == \"4\"\nassert solution(\"3 101\") == \"3\"\nassert solution(\"3 100\") == \"3\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 111\") == \"4\"\nassert solution(\"5 15\") == \"4\"\nassert solution(\"20 13\") == \"1\"\nassert solution(\"100 111\") == \"3\"\n\n\"\"\"\nfrom math import log2\n\nn, x = list(map(int, input().split()))\n\na = []\nfor _ in range(n):\n    a.append(int(input()))\n\nxor = set()\nfor i in range(2**n):\n    if (i & (1<<n)) == 0:\n        cnt = 0\n        for j in range(n):\n            if (i >> j) & 1:\n                cnt ^= a[j]\n        if cnt <= x:\n            xor.add(i)\n\nprint(len(xor))"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 111\") == \"4\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"4 999\") == \"5\"\n\"\"\""
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 111\n1111\n10111\n10010''') == '4'"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\", \"Test 1 failed.\"\nassert solution(\"1\") == \"2\", \"Test 2 failed.\"\nassert solution(\"1 1\") == \"2\", \"Test 3 failed.\"\nassert solution(\"1 2 3\") == \"2\", \"Test 4 failed.\"\nassert solution(\"1 1 1 1\") == \"2\", \"Test 5 failed.\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline().strip()\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 111\n1111\n10111\n10010\n''') == '4'\nprint(solution('''3 111\n1111\n10111\n10010\n'''))\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 111\n1111\n10111\n10010\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n3 2\n11\n10111\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n3 2\n11\n10111\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 111\n1111''') == '4'\nassert solution('''6 10010\n1111''') == '3'\nassert solution('''8 10011\n1111''') == '3'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11 11 5') == \"1\"\nassert solution('11 2 3') == \"-1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"11 11 5\\n\") == \"1\"\nassert solution(\"11 2 3\\n\") == \"-1\"\nassert solution(\"11 3 5\\n\") == \"1\"\nassert solution(\"11 11 5\\n\") == \"2\""
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('11 11 5') == \"1\"\nassert solution('11 2 3') == \"-\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'\n\n'''"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('11 11 5') == 1\nassert solution('11 2 3') == -1"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''abacaba''') == 'NO'\nassert solution('''jinotega''') == 'YES'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('a') == 'YES'\nassert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"NO\"\nassert solution(\"jinotega\") == \"YES\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"NO\"\nassert solution(\"jinotega\") == \"YES\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2 20''') == '20.0'\n\nassert solution('''3 2 6''') == '6.5'\n\nassert solution('''4 2 20''') == '20.0'\n\nassert solution('''4 2 20''') == '20.0'\n\nassert solution('''3 2 6''') == '6.5'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n\"\"\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '20.0'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2 6\n''') == '6.5'\nassert solution('''4 2 20\n''') == '20.0'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4 2 20\"\n) == \"20.0\"\n\nassert solution(\n    \"3 2 6\"\n) == \"6.5\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n\n----Hints----\n\nUse int(stdin.readline()) to convert str to int.\n'''"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\""
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n..\n..\n\n''') == '2'\n\nassert solution('''\n3 4\n....\n.##.\n....\n\n''') == '1'\n\nassert solution('''\n3 4\n....\n.#.#\n....\n\n''') == '2'\n\nassert solution('''\n4 4\n....\n.##.\n....\n\n''') == '1'\n\nassert solution('''\n4 4\n....\n.#.#\n....\n\n''') == '3'"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4\n..##\n##.\n####\n''') == '2'\nassert solution('''2 2\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\n..\n..\n\nOutput\n2\n''') == '2'\nassert solution('''3 4\n....\n.##.\n....\n\nOutput\n1\n''') == '2'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4 4\n...\n.##.\n...\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\n..\n..\n''') == '2'\n\nassert solution('''\n4 4\n....\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n..\n..\n\nOutput\n2''') == \"1\"\nassert solution('''3 4\n....\n.##.\n....\n\nOutput\n2''') == \"1\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\n..\n..\n\n''') == '2'\nassert solution('''4 4\n....\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"3 4\") == \"2\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n..\n..''') == '2'\nassert solution('''3 4\n....\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\nassert solution() == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"8\"\nassert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 1 1\\n\") == \"5\\n\"\nassert solution(\"2\\n1 1\\n\") == \"3\\n\"\nassert solution(\"5\\n1 2 1 1 2\\n\") == \"6\\n\"\nassert solution(\"3\\n1 1\\n\") == \"2\\n\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 1 3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n4\n1 1 1 3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n5\n1 1 3 2\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n20\n
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n2 1 2 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n1 1 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 3') == '6'\nassert solution('4\\n1 1 1 1') == '10'\nassert solution('5\\n2 2 4 3 3') == '13'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n1 1 3') == '6'\n\"\"\""
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n1\n3\n''') == '6'"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"12\") == \"24\"\n\"\"\""
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '11'\n\n\"\"\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 4 3 7 5') == '11\\n3'\nassert solution('2\\n1 2') == '2'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '11'\nassert solution('5') == '3'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '11'\nassert solution('12') == '1'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 4 3 7 5\n''') == '11'\nassert solution('''5\n1 2 3 4 5\n''') == '14'\nassert solution('''5\n3 2 1 5 7\n''') == '12'\nassert solution('''5\n1 2 3 4 5\n''') == '12'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '11'\nassert solution('10') == '13'\nassert solution('20') == '18'\nassert solution('100') == '202'\nassert solution('1000') == '1001'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 4 3 7 5\\n\") == \"11\\n3\"\nassert solution(\"10\\n1\\n\") == \"2\"\nassert solution(\"10\\n1 2 2 3 4 4 4\\n\") == \"5\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 4 3 7 5''') == '11'\nassert solution('''2\n1 2\n1''') == '4'\n'''"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 4 3 7 5\") == \"11\\n3\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 4 3 7 5') == '11\\n3'\nassert solution('10\\n1 2 3 4 5 6 7 8 9') == '13\\n5'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 1\") == \"10.25\"\nassert solution(\"6 2\") == \"10.3\"\nassert solution(\"3 100\") == \"9.2\"\n\"\"\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '10.25'\nassert solution(input()) == '10.3'\nassert solution(input()) == '10.30'\n\"\"\"\nimport math"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n10.245') == '10.25'\nassert solution('2\\n10.245') == '10.3'\nassert solution('3\\n10.245') == '10.30'\nassert solution('4\\n10.245') == '10.3'\nassert solution('5\\n10.245') == '10.3'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1\n10.245\n''') == '10.25'\nassert solution('''6 1\n10.245\n''') == '10.25'\nassert solution('''3 1\n1.224\n''') == '1.3'\nassert solution('''6 1\n10.245\n''') == '10.25'\nassert solution('''5 1\n10.245\n''') == '10.25'\n\nstdin = '''6 1\n10.245\n'''\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 1\") == \"10.25\"\nassert solution(\"6 2\") == \"10.3\"\nassert solution(\"3 100\") == \"9.2\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 1\\n10.245\") == \"10.25\"\nassert solution(\"6 2\\n10.245\") == \"10.3\"\nassert solution(\"3 100\\n9.2\") == \"9.2\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 1\n10.245\n\n''') == '10.25'\nassert solution('''6 2\n10.245\n\n''') == '10.3'\nassert solution('''3 100\n9.2\n\n''') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 1\") == \"10.25\"\nassert solution(\"6 2\") == \"10.3\"\nassert solution(\"3 100\") == \"9.2\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 1') == '10.25'\nassert solution('6 2') == '10.3'\nassert solution('3 100') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"6 1\"\n) == \"10.25\", \"First sample\"\nassert solution(\n    \"6 2\"\n) == \"10.3\", \"Second sample\"\nassert solution(\n    \"3 100\"\n) == \"9.2\", \"Third sample\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == \"Impossible\"\nassert solution('1') == \"0110\"\nassert solution('1 2') == \"0110\"\nassert solution('1 2 3') == \"0110\"\nassert solution('1 2 3 4') == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2 3 4''') == '0110'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"0110\"\n\n\"\"\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"0110\"\nassert solution(input()) == \"Impossible\"\nassert solution(input()) == \"1011\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"Impossible\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == 'Impossible'\nassert solution('1 2 2 1') == '0110'"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"1 2 3 4\n1 2 2 1\n\"\"\"\n) == \"0110\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"0110\"\nassert solution(\"1 2 2 1\") == \"0110\"\nassert solution(\"1 1 1 1\") == \"11\"\nassert solution(\"1 1 1 1\") == \"11\"\nassert solution(\"1 1 1 1\") == \"11\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2 3 4''') == 'Impossible'\nassert solution('''1 2 2 1''') == '0110'"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 1 2 2\n1 1 1 0''') == '0'\nassert solution('''1 0 2 2\n1 1 1 0''') == '0'\nassert solution('''1 2 2 1\n1 1 1 0''') == '0'\nassert solution('''1 2 2 0\n1 1 1 0''') == '0'\nassert solution('''1 2 2 1\n1 1 1 1''') == '0110'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6\n*..P*P*\n\n''') == '3'\nassert solution('''10\n.**PP.*P.*\n\n''') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(open(\"input.txt\").read()) == \"3\""
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"3\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7\n*..P*P*\n''') == '3'\nassert solution('''\n10\n.**PP.*P.*\n''') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\""
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7\n*..P*P*\n''') == '3'\nassert solution('''\n10\n.**PP.*P.*\n''') == '2'\nassert solution('''\n10\n*..P*P*\n''') == '0'\nassert solution('''\n4\n*..P*\n''') == '2'"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7') == '3'\nassert solution('10') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n*.PP*\n''') == '3'\nassert solution('''5\n**PP**\n''') == '5'\nassert solution('''9\n.***.\n''') == '2'\nassert solution('''50\n
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"16\""
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n2\n2\n''') == '4'\nassert solution('''3\n2\n2\n''') == '8'\nassert solution('''4\n2\n2\n''') == '16'\nassert solution('''10\n1\n1\n''') == '10'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '16'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"16\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"4\"\n\nassert solution(\"2\\n\") == \"8\"\n\nassert solution(\"3\\n\") == \"16\""
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1 1 1 2 3\n''') == '1 2 3 3 2 1'\nassert solution('''\n100 100 52 50 46 56\n''') == '100 99 84 84 1 2 3'\nassert solution('''\n4 4 0 0 4\n''') == '4 4 0 0 1 1'\nassert solution('''\n9 9 5 5 2 1\n''') == '1 3 9 7'\nassert solution('''\n100 100 52 50 46 56\n''') == '100 99 84 84 1 2 3'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9 9 5 5 2 1') == '1 3 9 7'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'\nprint('all tests passed')\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"9 9 5 5 2 1\") == \"1 3 9 7\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 10 5 5 2 1\") == \"1 3 9 7\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9 9 5 5 2 1') == '1 3 9 7'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 20 10 60\") == \"17,8,86,92\"\nassert solution(\"4 4 1\") == \"1,1,4,4\"\nassert solution(\"\") == \"0,0,0,0\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"9 9 5 5 2 1\\n\") == \"1 3 9 7\"\nassert solution(\"100 100 52 50 46 56\\n\") == \"17 8 86 92\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n9 9 5 5 2 1\n''') == '1 3 9 7'\nassert solution('''\n100 100 52 50 46 56\n''') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 10 7 7\n''') == '1 4 9 7'\nassert solution('''\n100 100 52 50 46 56\n''') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\", \"Solution Failed\"\nassert solution(\"FTFFTFFF\") == \"Yes\", \"Solution Failed\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FTFFTTFF\") == \"No\"\nassert solution(\"F\") == \"Yes\"\nassert solution(\"T\") == \"Yes\"\n\n------Submissions------\nsubmission:\nhttps://leetcode.com/submissions/detail/468050492/\n------Ideas------\n\n\"\"\"\nfrom collections import Counter\nimport collections\nfrom functools import lru_cache\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        # print(stdin)\n        move = stdin\n        # print(move)\n        # print(move.split(\"T\"))\n        direction_counter = collections.Counter(move.split(\"T\"))\n        # print(direction_counter)\n        # print(direction_counter[\"F\"])\n        # print(direction_counter[\"T\"])\n        # print(direction_counter.get(\"F\", 0) + direction_counter.get(\"T\", 0))\n        \n        # print(direction_counter.get(\"F\", 0) + direction_counter.get(\"T\", 0) + 1)\n        return \"Yes\" if direction_counter.get(\"F\", 0) + direction_counter.get(\"T\", 0) + 1 <= 8 else \"No\"\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        # print(stdin)\n        move = stdin\n        # print(move)\n        # print(move.split(\"T\"))\n        direction_counter = collections.Counter(move.split(\"T\"))\n        # print(direction_counter)\n        # print(direction_counter[\"F\"])\n        # print(direction_counter[\"T\"])\n        # print(direction_counter.get(\"F\", 0) + direction_counter.get(\"T\", 0))\n        \n        # print(direction_counter.get(\"F\", 0) + direction_counter.get(\"T\", 0) + 1)\n        return \"Yes\" if direction_counter.get(\"F\", 0) + direction_counter.get(\"T\", 0) + 1 <= 8 else \"No\"\n\ns = Solution()\nprint(s.solve(stdin))\n\n\"\"\"\n--- Day 2: Password Philosophy ---\nYour flight departs in a few days from the coastal airport; the easiest way down to the coast from here is via toboggan.\n\nThe shopkeeper at the North Pole Toboggan Rental Shop is having a bad day. \"Something's wrong with our computers; we can't log in!\" You ask if you can take a look.\n\nTheir password database seems to be a little corrupted: some of the passwords wouldn't have been allowed by the Official Toboggan Corporate Policy that was in effect when they were chosen.\n\nTo try to debug the problem, they have created a list (your puzzle input) of passwords (according to the corrupted database) and the corporate policy when that password was set.\n\nFor example, suppose you have the following list:\n\n1-3 a: abcde\n1-3 b: cdefg\n2-9 c: ccccccccc\nEach line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, 1-3 a means that the password must contain a at least 1 time and at most 3 times.\n\nIn the above example, 2 passwords are valid. The middle password, cdefg, is not; it contains no instances of b, but needs at least 1. The first and third passwords are valid: they contain one a or nine c, both within the limits of their respective policies.\n\nHow many passwords are valid according to their policies?\n\"\"\""
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"No\", \"Should print No\"\nassert solution(\"F\") == \"Yes\", \"Should print Yes\"\nassert solution(\"FFF\") == \"No\", \"Should print No\"\nassert solution(\"FFTTFF\") == \"Yes\", \"Should print Yes\"\nassert solution(\"FFTFF\") == \"No\", \"Should print No\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FTF\") == \"No\"\nassert solution(\"FTF\") == \"Yes\"\nassert solution(\"FTF\") == \"Yes\"\nassert solution(\"FTFFTFFF\") == \"No\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''FFTFTFFF\n4 2''') == 'Yes'\nassert solution('''TTTT\n2 1''') == 'No'"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\n\"\"\"\n\nx = int(input())\ny = int(input())"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nF\n3\n\nT\n3\n\nF\n5\n\nF\n6\n\nT\n2\n\nF\n1\n\nT\n6\n\nF\n2\n\n''') == 'Yes'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FTFFTFFF\") == \"No\"\nassert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FTFFTFFF\") == \"No\"\nassert solution(\"FTFFTFFF\") == \"Yes\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"TTTTTTFFF\") == \"No\"\nassert solution(\"TTTTTTTTT\") == \"No\"\nassert solution(\"TTTTTTTTTT\") == \"No\"\nassert solution(\"TTTTTTTTTT\") == \"No\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('TTTTFFTFF') == 'No'\n\n\"\"\""
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n0\n1''') == '2'\nassert solution('''3\n0\n1\n2''') == '3'\nassert solution('''4\n0\n1\n2\n3''') == '5'\nassert solution('''5\n0\n1\n2\n3''') == '6'\nassert solution('''6\n0\n1\n2\n3\n4''') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n\n1\n\n1\n\n1''') == '2'\nassert solution('''2\n\n1\n\n1\n\n1''') == '3'\nassert solution('''3\n\n1\n\n1\n\n1''') == '5'\nassert solution('''4\n\n1\n\n1\n\n1\n\n1''') == '6'\nassert solution('''5\n\n1\n\n1\n\n1\n\n1\n\n1''') == '7'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n2''') == '1'\nassert solution('''2\n3''') == '3'\nassert solution('''4\n5''') == '5'\nassert solution('''6\n7''') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\nprint(solution(input()))\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n''') == '2'\nassert solution('''\n2\n''') == '3'\nassert solution('''\n3\n''') == '5'\nassert solution('''\n4\n''') == '6'\nassert solution('''\n6\n''') == '6'\nprint('\u2705') if solution('''\n''') == '7' else print('\u274c')\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1.3333333333\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1.3333333333'\nassert solution('4') == '1.25'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2 3\n3\n\n''') == \"1.3333333333\"\nassert solution('''5\n1 2 3 4 5\n5\n\n''') == \"0.666666666666\"\nassert solution('''5\n1 2 3 4 5\n5\n\n''') == \"0.666666666666\"\nassert solution('''7\n1 2 3 4 5 6 7\n7\n\n''') == \"0.75\"\nassert solution('''8\n1 2 3 4 5 6 7 8\n8\n\n''') == \"0.0\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1.3333333333'\nassert solution('6') == '0.83333333333'\nassert solution('1000') == '0.0'\nassert solution('1234') == '0.0'\nassert solution('55') == '0.0'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1 2\\n3') == '1.3333333333'\nassert solution('3\\n1 2 3\\n3\\n4 5 6') == '1.666666666667'\nassert solution('4\\n2 6 4\\n4\\n6\\n1 2 3\\n5') == '1.3333333333'\nassert solution('5\\n5 5 5 5\\n1 2 3 4\\n4\\n5\\n4 4 4\\n5\\n6\\n5 4') == '1.3333333333'"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1.3333333333\"\nprint(solution())\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 3\n3\n\n''') == '1.3333333333'\nassert solution('''3\n1 2 3\n3\n\n''') == '1.3333333333'\nassert solution('''3\n1 2 3\n2\n\n''') == '0.666666666667'"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2 3\n3\n\n''') == '1.3333333333'\nassert solution('''\n3\n1 2 3\n2\n\n''') == '1.3333333333'\nassert solution('''\n3\n1 2 3\n4\n\n''') == '0.266666666667'\nassert solution('''\n3\n1 2 3\n6\n\n''') == '0.9'\nassert solution('''\n3\n1 2 3\n12\n\n''') == '2.9999999999'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1.3333333333'\nassert solution([3, 1, 2]) == '1.3333333333'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1.3333333333'\nassert solution('2') == '2.3333333333'\nassert solution('1') == '3.3333333333'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2\\n9 7 11 15 5\") == \"13 7\"\nassert solution(\"2 100000 569\\n605 986\") == \"986 605\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == '876 654'\nprint(solution(input_))"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 1 2\n9 7 11 15 5\n\nOutput\n13 7''') == '996 7'\nassert solution('''2 100000 569\n605 986\n\nOutput\n986 605''') == '996 605'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2\") == \"13 7\"\nassert solution(\"2 100000 569\") == \"986 605\"\nassert solution(\"3 4 5 6 7 8 9 10\") == \"14 15 16 17 18 19 20\"\nassert solution(\"8 1 1\") == \"17\"\nassert solution(\"4 7 3 6 6 7 6 3 5\") == \"10 9 8 1\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 2') == '13 7'\nassert solution('5 1 2') == '986 605'\nassert solution('10 1 2') == '986 605'\nassert solution('20 1 2') == '13 7'\nassert solution('40 1 2') == '13 7'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1 2') == '13 7'\nassert solution('5 1 2') == '986 605'\nassert solution('5 1 2') == '986 605'\nassert solution('5 1 2') == '13 7'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"13 7\""
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 100000 569\") == \"986 605\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1 2') == '13 7'\nassert solution('2 100000 569') == '986 605'\nassert solution('2 5') == '5'\nassert solution('2 -1') == '1'\nassert solution('5 -2') == '2'\n\nprint('All tests passed!')\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n9\\n7\\n11\\n15\\n5') == '13 7'\nassert solution('2\\n100000 569\\n') == '986 605'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"3\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 3 3 5') == '0'\nassert solution('3 3 3 3 5') == '3'\nassert solution('5 5 1 2 3') == '-1'\nassert solution('3 4 1 1 3') == '3'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '-1'\nassert solution('3 4 1 1 3') == '3'"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '-1'\nassert solution('3 4 1 1 3') == '3'"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 1 2 3\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"3\"\nassert solution(\"3 4 1 1 3\") == \"3\"\n\nstdin = \"\"\"\n5 3 1 2 3\n2 3 2\n\"\"\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3 2 4 4\n2 5 4 10''') == '1'\nassert solution('''5 5 1 2 3\n2 3 5 4 2''') == '0'\nassert solution('''3 4 1 1 3\n2 3 5 4 2''') == '-1'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 1 2 3') == '0'\nassert solution('3 3 3 3 5') == '-1'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 2 1 1 4\n2 3 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5 1 2 3\n2 3 5 4 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3 3 1 1 3\n2 3 5 4 2\n\"\"\") == \"0\"\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"0\"\nassert solution(\"3 4 1 1 3\") == \"3\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5 1 2 3\\n2 3 2\\n') == '3'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nG3 G3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4\nB1 Y1 W1 G1 R1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5\nB1 Y1 W1 G1 R1\nB2 Y2 W2 G2 R2\nB3 Y3 W3 G3 R3\nB4 Y4 W4 G4 R4\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4\nB1 Y1 W1 G1 R1\nB2 Y2 W2 G2 R2\nB3 Y3 W3 G3 R3\nB4 Y4 W4 G4 R4\n\"\"\") == \"3\""
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\nB1 Y1 W1 G1 R1\n''') == '4'\nassert solution('''\n2\nG3 G3\n''') == '0'\nassert solution('''\n5\nB1 Y1 W1 G1 R1\n''') == '4'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\nB1 Y1 W1 G1 R1\n\n''') == \"4\"\nassert solution('''\n5\nB1 Y1 W1 G1 R1\n\n''') == \"4\"\nassert solution('''\n5\nB1 Y1 W1 G1 R1\n\n''') == \"4\"\n\n'''"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '0'\n\nassert solution(input()) == '2'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\nB4 R4 R3\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\nR3') == '0'\nassert solution('2\\nR1 G4') == '1'\nassert solution('3\\nB1 Y3') == '4'\nassert solution('4\\nB1 G1') == '0'\nassert solution('5\\nB1 Y3 W1') == '3'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\nG3 G3\n''') == '0'\n\nassert solution('''4\nG4 R4 R3 B3\n''') == '2'\n\nassert solution('''5\nB1 Y1 W1 G1 R1\n''') == '4'\n\nprint(solution('''4\nG4 R4 R3 B3\n'''))"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"4\"\n\"\"\""
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n3 3 4 3\\n4 7 6 5\\n') == '2 6'\nassert solution('2\\n1 1\\n100 100\\n') == '1 1'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '2 6'\nassert solution('2') == '1 1'\nassert solution('5') == '3 11'"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n5 10 5 6\\n4 7 6 5\\n') == '2 6'\nassert solution('4\\n1 1\\n100 100\\n') == '1 1'\nassert solution('5\\n10 30 5 6 24\\n10 41 7 8 24\\n') == '3 11'"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n10 30 5 6\\n10 41 7 8 24') == '3 11'\nassert solution('4\\n3 3 4 3\\n4 7 6 5') == '2 6'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n10 30 5 6 24\n10 41 7 8 24\n''') == '3 11'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"2 6\"\nassert solution(\"4\") == \"2 6\""
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2 1'\nassert solution('3') == '2 6'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"3 11\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"2\") == \"1 1\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 3 4 3\\n4 7 6 5\\n\") == \"2 6\"\nassert solution(\"5\\n10 30 5 6 24\\n10 41 7 8 24\\n\") == \"3 11\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 4\n3B\n2 2\nImpossible''') == \"3AB1B\"\n\nassert solution('''1 2\n3B\n1 1\n3A\n3 A\nImpossible''') == \"1A1B\"\n\nassert solution('''1 1\n1 A\n1 1\n2 A\n2 A\n3 A\n3 A\nImpossible''') == \"Impossible\"\n\nassert solution('''2 2\n1 A\n1 A\n2 A\n2 A\n3 A\n3 A\nImpossible''') == \"Impossible\"\n\nassert solution('''4 4\n3B\n3B\n3B\n3B\n1 A\n1 A\n1 A\n1 A\n1 A\n1 A\n1 A\nImpossible''') == \"Impossible\""
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\nassert solution('100') == 'Impossible'\nassert solution('1 100') == 'Impossible'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '''1 4\n    '''\n) == '3B', solution(\n    '''1 4\n    '''\n)\nassert solution(\n    '''2 2\n    '''\n) == 'Impossible', solution(\n    '''2 2\n    '''\n)\nassert solution(\n    '''3 2\n    '''\n) == '1A1B', solution(\n    '''3 2\n    '''\n)\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n''') == 'Impossible'\nassert solution('''\n3 2\n''') == '1A1B'\nassert solution('''\n1 2\n''') == '3B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 4\n''') == \"3B\"\nassert solution('''\n2 2\n''') == \"Impossible\"\nassert solution('''\n3 2\n''') == \"1A1B\"\nassert solution('''\n3 2\n''') == \"Impossible\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '3B'"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 4\") == \"3B\"\nassert solution(\"2 2\") == \"Impossible\"\nassert solution(\"3 2\") == \"1A1B\"\nassert solution(\"3 3\") == \"Impossible\"\nprint(solution(input()))\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"5 5\") == \"3\""
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4') == '25'\n\n\n\"\"\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '1\\n'\nassert solution('5 4\\n') == '25\\n'\nassert solution('3 2\\n') == '3\\n'\nassert solution('5 4\\n') == '25\\n'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n''') == '3'\n\nassert solution('''\n5 4\n''') == '25'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\nprint(solution(input))\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2''') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5 0 1 2 -4 3\") == \"1\"\nassert solution(\"4 1 2 3\") == \"1\"\nassert solution(\"4 1 2 3\") == \"2\"\nassert solution(\"4 1 2 3\") == \"3\"\nassert solution(\"4 1 2 3\") == \"3\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n3 2 2\\n1 2') == '1'\nassert solution('6 6\\n6 2 2 2 2\\n1 2 1 2\\n2 4 2 4\\n3 4 3 3') == '2'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '1'\nassert solution('5 5') == '1'\nassert solution('9 9') == '1'\nassert solution('10 10') == '0'\nassert solution('6 6') == '0'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2''') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '1'\nassert solution('5 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '0'\nassert solution('5 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '1'\nassert solution('5 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '0'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n') == '1'\nassert solution('6 3\\n10 8 -3 1 2 3 4 -1\\n4 5 6\\n5 4 6\\n2 5 6\\n7 8 9\\n2 3 5\\n9 10 11\\n7 8\\n9 10\\n') == '4'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '1'\nassert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '1'\nassert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '2'\nassert solution('7 6\\n2 4 0 0 0\\n-5 2 0 0 0 0\\n0 1 1 1 1 1\\n0 1 1 1 1 1\\n1 2 1 1 1 1\\n1 2 1 1 1 1\\n1 3 1 1 1 1\\n1 3 1 1 1 1') == '2'\nassert solution('5 5\\n4 -1 -1 3\\n2 1 -1\\n2 1 1\\n3 1 1\\n3 1 1') == '3'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 3\n.o.\n.o.\no.T\n\"\"\") == \"2\"\nassert solution(\"\"\"3 4\n.o.\n.o.\no.T\n.S.\n\"\"\") == \"1\"\n\"\"\""
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n.oS\\n.o.S') == '2'\nassert solution('3 3\\nS.o\\n.o.T') == '-1'\nassert solution('3 3\\nS.o.S\\no.T') == '-1'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\nassert solution(__import__('sys').stdin.read()) == '-1'\nassert solution(__import__('sys').stdin.read()) == '-1'\nassert solution(__import__('sys').stdin.read()) == '-1'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\nS.o\\no.T') == '2'\nassert solution('3 4\\n.o.\\no.S\\no.T') == '-1'\n\n-----Explanation-----\nThe input is a 2x3 matrix where each element is either a., o, S or T.\nWe perform the following steps to solve the problem:\n - Remove the upper-right and lower-left leaves.\n\nGiven 2x3 matrix:\n -.,.,.,.,.,.,.,.\n -.,.,.,.,.,.,.,.\n -.,.,.,.,.,.,.,.\n\nThe solution is 2, as the maximum number of leaves that we can remove is 2.\n'''\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\nassert solution(\"3 3\\n.o\\n.o.\\no.T\\n\") == \"2\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\nS.o\\n.o.\\no.T\") == \"2\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == -1\nassert solution(\"3 3\") == 2\nassert solution(\"1 1.o\") == -1\nassert solution(\"1 2.o\") == 2\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n''') == '1'\nassert solution('''\n3 2\n''') == '3'\nassert solution('''\n199 200\n''') == '199 200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\nassert solution(\"-10 10\") == \"1\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 2\") == \"3\"\n\nassert solution(\"199 200\") == \"200\""
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\""
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\nprint(solution(input()))\n\"\"\"\n\nimport math"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Takahashi\"\nassert solution(\"2\") == \"Aoki\"\n\nThe code above accepts a solution. Write a function solution(N, K_1,..., K_N) that returns the winner of the game. The input consists of N integers K_i. If the winner is Takahashi, then return \"Takahashi\". If the winner is Aoki, then return \"Aoki\".\n\n-----Test-----\nInput:\n2\n5 2\n3 3\n\nOutput:\nAoki\n\nInput:\n3\n2 2 1\n3 1\n2 2 1\n\nOutput:\nTakahashi\n\nInput:\n1\n100 100\n\nOutput:\nAoki\n\nInput:\n3\n1 2 1\n1 3 1\n1 4 1\n\nOutput:\nAoki\n\nInput:\n5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n\nOutput:\nTakahashi\n\nInput:\n5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n\nOutput:\nTakahashi\n\nInput:\n4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\nOutput:\nAoki\n\nInput:\n6\n2 2 2 2 2 2\n2 2 2 2 2 2\n2 2 2 2 2 2\n2 2 2 2 2 2\n2 2 2 2 2 2\n2 2 2 2 2 2\n\nOutput:\nTakahashi\n\n\"\"\""
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n5 2\n3 3\n2\n''') == 'Aoki'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == 'Aoki'\nassert solution('2 1') == 'Takahashi'\n\n\"\"\"\n\nn, k_1, k_2 = map(int, stdin.strip().split())"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3\\n\") == \"Aoki\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'Takahashi'\nassert solution(input()) == 'Aoki'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n5 2\") == \"Aoki\"\n\n\"\"\"\n\nn, k1, k2 = map(int, stdin.readline().strip().split())"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"Aoki\"\n\nIn sample case, the solution is Aoki.\n'''"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n5 2\\n3 3') == 'Aoki'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\nassert solution(\"4\\n2 2\\n3 3\") == \"Takahashi\"\nassert solution(\"4\\n2 2\\n3 3\") == \"Takahashi\"\nassert solution(\"4\\n2 2\\n3 3\") == \"Takahashi\"\nassert solution(\"4\\n2 2\\n3 3\") == \"Takahashi\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"Aoki\"\nassert solution(\"2\") == \"Takahashi\"\nassert solution(\"4\") == \"Takahashi\"\nassert solution(\"4\") == \"Aoki\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0\"\nassert solution() == \"8\""
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2\n3 5\n8 9\n''') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2\n''') == '0'\nassert solution('''\n3 3\n''') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n''') == '0'\nassert solution('''\n3 3\n''') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n''') == '0'\nassert solution('''\n3 3\n''') == '8'\nassert solution('''\n0 0\n''') == '0'\nassert solution('''\n0 0\n''') == '0'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n''') == '0'\nassert solution('''\n3 3\n''') == '8'\n\n\n'''"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"8\""
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2\n\n''') == '0'\nassert solution('''3 3\n\n''') == '8'\nassert solution('''3 1\n\n''') == '0'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 2') == '0'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"-1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 3\") == \"-1\"\nassert solution(\"3 2\") == \"0\"\n\nstdin = \"\"\nwith open('input.txt', 'r') as f:\n    stdin = f.read().strip()\nprint(solution(stdin))\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 3\") == \"-1\"\nassert solution(\"2 3\") == \"-1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == \"1\""
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\n1 2 3 4\\n1 5 3 4') == '1'\nassert solution('2 3\\n1 2 4 5\\n1 5 3 4') == '0'\nassert solution('2 3\\n1 2 3 4\\n1 5 3 4') == '-1'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 2 3 4\\n1 5 3 4\\n') == '1'\nassert solution('2 3\\n1 2 4 5\\n1 5 2 3 4\\n') == '0'\nassert solution('2 3\\n1 2 3 2 2 3\\n') == '-1'\nassert solution('2 2\\n1 2 3 4\\n1 5 3 4\\n') == '1'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n1 2 3 4\n1 5 3 4\n''') == '1'\n\nassert solution('''\n2\n1 2 3 4\n1 5 3 4\n''') == '0'\n\nassert solution('''\n2\n1 2 3 4\n1 5 6 4\n''') == '-1'"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\n1 2 3 4\n1 5 3 4\n''') == \"1\"\nassert solution('''\n2 2\n1 2 3 4\n1 5 6 4\n''') == \"0\"\nassert solution('''\n2 3\n1 2 4 5\n1 2 1 3 2 3\n''') == \"-1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(INPUT) == OUTPUT"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n24\n17:30\n''') == '17:30'\nassert solution('''\n12\n17:30\n''') == '07:30'\nassert solution('''\n24\n99:99\n''') == '09:09'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('12') == '00:00'\nassert solution('24') == '00:00'\nassert solution('99') == '00:00'\nassert solution('10') == '10:00'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"24\") == \"09:09\"\nassert solution(\"12\") == \"17:30\"\nassert solution(\"24\") == \"07:30\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('24') == '09:09'\nassert solution('12') == '17:30'\nassert solution('24') == '07:30'"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('12') == '00:12'\nassert solution('24') == '00:00'\nassert solution('99') == '09:09'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"03:00\"\nassert solution(\"24\") == \"23:59\"\nassert solution(\"99\") == \"23:59\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('12') == '12:00'\nassert solution('24') == '00:00'\nassert solution('24') == '00:00'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(r\"12\") == r\"07:00\"\nassert solution(r\"24\") == r\"09:00\"\nassert solution(r\"99:99\") == r\"09:09\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"99:99\"\nassert solution(input()) == \"17:30\"\nassert solution(input()) == \"07:30\""
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"12\\n17:30\") == \"17:30\"\nassert solution(\n    \"24\\n99:99\") == \"99:99\"\nassert solution(\n    \"12\\n24:99\") == \"24:09\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3\n2\n1 2 1\n2 3 1\n3 1 1\n''') == '6'"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"2\\n\"\n    \"1 2 1\\n\"\n    \"2 3 1\\n\"\n    \"3 1 1\"\n) == \"6\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 7\") == \"4\"\n\nimport collections\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '4'\nassert solution('2 1 2 1') == '5'\nassert solution('3 3') == '6'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '6'\nassert solution('6') == '0'\nassert solution('4 2') == '2'\nassert solution('4 3') == '5'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 2\n1 2 1\n2 3 1\n3 1 1\n\"\"\") == \"6\"\n\nassert solution(\n\"\"\"\n3 3\n2\n1 2 1\n2 3 1\n3 1 1\n\"\"\") == \"7\"\n\nassert solution(\n\"\"\"\n3 3\n2\n1 2 2\n2 3 1\n3 1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '6'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 1 2 1\"\n) == \"6\"\nassert solution(\n    \"3 3\"\n) == \"6\"\nassert solution(\n    \"3 3\"\n) == \"7\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '6'"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '5'\nassert solution() == '-1'\n'''\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '5'\nassert solution('1') == '0'\nassert solution('6') == '-1'\n'''\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0'\nassert solution('1') == '-1'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n2 0 3 0 1 1\n\n''') == '5 2 1'\nassert solution('''\n1\n0\n\n''') == '0'\nassert solution('''\n6\n3 2 2 2 1 1\n\n''') == '-1'"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n0\n''') == '-1'\nassert solution('''\n3\n2 1\n2 5\n3 3\n3 6\n5 6\n''') == '5 6'\nassert solution('''\n6\n3 2 2 2 1 1\n''') == '5 6'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(example_input_1) == \"5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6\"\nassert solution(example_input_2) == \"-1\"\nprint(solution(stdin))"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '5'\nassert solution('1') == '0'\nassert solution('6') == '-1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(s) == \"0\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6\\n2 0 3 0 1 1') == '5\\n2 1'\n\nassert solution('6\\n3 2 2 2 1 1') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"6\") == \"5\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 8\\n12 20\") == \"2\"\nassert solution(\"3 10\\n10 20 30\") == \"1\"\n\nstdin = \"3 10\\n10 20 30\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 8') == '2'\nassert solution('3 10') == '1'\n\"\"\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 8\n12 20''') == '2'\nassert solution('''3 10\n10 20 30''') == '1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 8]) == \"2\"\nassert solution([3, 10]) == \"1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 8') == '2'\nassert solution('3 10') == '1'"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '2'\nassert solution(input) == '1'\n\n\n'''\nimport math"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n12 20''') == '2'\nassert solution('''5 6\n12 20 30 40 50''') == '0'\n\n'''"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 8\") == \"2\"\nassert solution(\"3 10\") == \"1\""
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 10\") == \"1\"\nassert solution(\"3 10\") == \"0\"\nassert solution(\"6 3\") == \"2\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 8\n12 20''') == '2'\nassert solution('''3 10\n10 20 30''') == '1'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''0 0 5 5\n3 2\n-1 -1\n-1 0\n''') == '3.729935587093555327'\nassert solution('''0 0 0 1000\n100 1000\n-50 0\n50 0\n''') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 0 5 5\n3 2\n-1 -1\n-1 0\n''') == '3.729935587093555327'\nassert solution('''\n0 0 0 1000\n100 1000\n-50 0\n50 0\n''') == '11.547005383792516398'\nassert solution('''\n5 5\n-2 -1\n1 -1\n-1 0\n0 0\n0 0\n''') == '5.000000000000000004'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('3 2') == '1.73205080756887729'\nassert solution('-1 -1') == '1.73205080756887729'\nassert solution('-1 0') == '2.16216216216216216'\nassert solution('0 0 0 1000') == '10.18253953259087597'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('100 1000') == '11.547005383792516398'\nassert solution('-50 0') == '2.99710198578947353'"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"3.729935587093555327\"\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 5 5\") == \"3.729935587093555327\"\nassert solution(\"0 0 0 1000\") == \"11.547005383792516398\"\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('100 1000') == '11.547005383792516398'\nassert solution('-50 0') == '3.2712804213945558'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '11.547005383792516398'\nassert abs(solution() - 11.547005383792516398) <= 10 ** -6\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''0 0 5 5\n3 2\n-1 -1\n-1 0\n''') == '3.729935587093555327'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3.729935587093555327'\nprint(solution())"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'Second'\nassert solution('2') == 'First'\nassert solution('4') == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n3\n1 2\n2 1''') == 'Second'\nassert solution('''3\n3\n1 2\n2 1''') == 'First'\nassert solution('''2\n2\n1 2''') == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'Second'\nassert solution('4') == 'First'"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"Second\\nFirst\\nSecond\"\nassert solution(\"5\") == \"Second\\nFirst\\nSecond\\nThird\\nSecond\"\nassert solution(\"5\") == \"Second\\nFirst\\nSecond\\nThird\\nSecond\"\nassert solution(\"6\") == \"Second\\nFirst\\nSecond\\nThird\\nSecond\\nThird\"\nassert solution(\"1\") == \"Second\\n\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n\"\"\") == \"Second\"\n\nassert solution(\"\"\"\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n\"\"\") == \"First\"\n\nassert solution(\"\"\"\n3\n3\n1 2\n2 3\n2 1\n\"\"\") == \"First\"\n\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"Second\"\n\nassert solution(\"\"\"\n4\n1\n2\n1\n1\n\"\"\") == \"Second\""
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == 'Second'\n'''\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1\\n10\\n2\\n1 2') == 'Second\\nFirst\\nSecond'\n'''"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'Second'\n\n\"\"\"\n\nimport sys\nfrom collections import deque\nsys.setrecursionlimit(10**7)\ninput = lambda: sys.stdin.readline()\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\") == \"Second\\nFirst\\nSecond\"\nassert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\") == \"Second\\nFirst\\nSecond\"\nassert solution(\"1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\") == \"Second\\nFirst\\nSecond\"\nassert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\") == \"Second\\nFirst\\nSecond\"\nassert solution(\"1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\") == \"Second\\nFirst\\nSecond\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Second\"\nassert solution(\"2\") == \"First\"\nassert solution(\"3\") == \"Second\"\nassert solution(\"4\") == \"First\"\nassert solution(\"5\") == \"Second\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == '1'\n\n---\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"10 20 30 40 50 60 70 80 90 100\") == \"9\"\nassert solution(\"4 3 2\") == \"0\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3 2\n4 3 1 5 2\n''') == '1'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 3 2\n4 3 1 5 2\n''') == '1'\nassert solution('''\n5 3 2\n4 3 1 5 2\n''') == '2'\nassert solution('''\n5 3 2\n4 3 1 5\n''') == '1'\nassert solution('''\n5 3 2\n4 3 1 5\n''') == '1'\n''')\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 2') == '1'\nassert solution('10 20 30 40 50 60 70 80 90 100') == '4'\nassert solution
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3 2') == '1'\nassert solution('5 3 2') == '2'\nassert solution('4 3 1 5 2') == '2'\nassert solution('5 3 1 5 2') == '1'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"5 3 2\") == \"1\"\nassert solution(\"5 3 2\") == \"2\"\nassert solution(\"5 3 2\") == \"3\"\nassert solution(\"5 3 2\") == \"4\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\") == \"1\"\nassert solution(\"2 2 2\") == \"0\""
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"6 3 3\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"5\"\nassert solution(\"6 2 2 2 5 6 2 2 1\") == \"3\"\nassert solution(\"1000000000\") == \"100000\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"5 4 2\") == \"0\"\nassert solution(\"5 4 2\") == \"1\""
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n''') == '1'\nassert solution('''\n3 2\n''') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n''') == '1'\nassert solution('''\n3 2\n''') == '24'\nassert solution('''\n4 5\n''') == '45'\n\n'''\n- {1} with cost 1^2 = 1\n\n- {2} with cost 1^2 = 1\n\n- {1, 2} with cost 2^2 = 4\n\n- {3} with cost 1^2 = 1\n\n- {1, 3} with cost 2^2 = 4\n\n- {2, 3} with cost 2^2 = 4\n\n- {1, 2, 3} with cost 3^2 = 9\n\nThe total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.\n''') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\""
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    1 1\n    ''') == '1'\nassert solution('''\n    3 2\n    ''') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '3'\nassert solution('4 4') == '3'\nassert solution('7 3') == '1196'\nassert solution('31 8') == '64921457'\nassert solution('3 3') == '3'\n\"\"\"\n\nfrom collections import defaultdict\nimport itertools"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '6'\nassert solution('4 4') == '3'\nassert solution('7 3') == '1196'\nassert solution('31 8') == '64921457'\n\n\n'''"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '6 4\\n'\n    '2 3\\n'\n    '3 1\\n'\n    '5 2\\n'\n    '1 2\\n'\n    '4 5\\n'\n    '3 5\\n'\n    '5 4\\n'\n    ) == '6'\n\nassert solution(\n    '7 3\\n'\n    '2 3\\n'\n    '3 1\\n'\n    '5 2\\n'\n    '1 2\\n'\n    '4 5\\n'\n    '3 5\\n'\n    '5 4\\n'\n    ) == '1196'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"31 8\") == \"64921457\"\n'''"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n\n''') == '3', 'Should be 3'\nassert solution('''\n31 8\n\n''') == '64921457', 'Should be 64921457'\nassert solution('''\n7 3\n\n''') == '1196', 'Should be 1196'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1196'\nassert solution() == '64921457'"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n1\n''') == '6'\nassert solution('''4\n1\n''') == '14'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n3 4\n''') == '6'\nassert solution('''\n3 4\n5 4\n''') == '3'\nassert solution('''\n7 3\n3 2\n''') == '1196'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2\n3\n4 5\n5 4''') == '3'\n\nassert solution('''4 4\n4\n3 3\n1 1\n3 3\n3 2\n3 1''') == '11'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '5'"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 2') == '#.X#\\nX.#.\\n#...'\nassert solution('5 4 5') == '#XXX\\n#X#.\\nX#..\\n...#\\n.#.#'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4 5') == '#X#.\\nX.#.\\nX#..\\n...#\\n.#.#'\nassert solution('3 4 2') == '#.X#\\nX.#.\\n#...'\nassert solution('0 0 1') == 'X.X'\nassert solution('3 3 1') == '.#.X'\nassert solution('3 3 3') == '...X'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 4 2\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"##.X#\"\nassert solution(\"5 4 5\") == \"#.X#\"\n\n'''\nfrom copy import deepcopy\n\nclass Solution:\n    def transform(self, m: str, k: int) -> str:\n        if not m or len(m) < k or len(m[0]) < k:\n            return m\n\n        # create a maze with only empty cells\n        k = len(m) - 1 if len(m[0]) - 1 < k else k\n        maze = [i for i in range(len(m))]\n\n        # add k-th wall on the edge\n        for i in range(1, k + 1):\n            maze[0] = maze[0] + i\n            maze[-1] = maze[-1] - i\n            maze[i - 1] = maze[i - 1] + i\n            maze[len(m) - i + 1] = maze[len(m) - i + 1] - i\n\n        for i in range(len(m)):\n            for j in range(len(m[0])):\n                if m[i][j] == \".\":\n                    maze[i] = maze[i] + 1\n                elif m[i][j] == \"#\":\n                    maze[i] = maze[i] - 1\n\n        return \"\\n\".join(map(lambda x: x * 2, maze))\n\n    def transform2(self, m: str, k: int) -> str:\n        if not m or len(m) < k or len(m[0]) < k:\n            return m\n\n        maze = deepcopy(m)\n        for i in range(k):\n            maze = [i for i in range(len(m) - 1, -1, -1)] + maze\n\n        return \"\\n\".join(map(lambda x: x * 2, maze))\n\nprint(Solution().transform(\"#.#.#\", 2))\nprint(Solution().transform(\"#..X\", 1))\nprint(Solution().transform(\"#.X#\", 2))\nprint(Solution().transform(\"#.X#\", 3))\nprint(Solution().transform2(\"#.X#\", 3))\nprint(Solution().transform2(\"#.#.#\", 2))\nprint(Solution().transform2(\"#..X\", 1))\nprint(Solution().transform2(\"#.X#\", 2))\nprint(Solution().transform2(\"#.X#\", 3))\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4 5') == '#X#.\\nX#..\\nX#..\\n...#\\n.#.#'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == \"#####\"\nassert solution(\"5 4 5\") == \"#####\"\nassert solution(\"5 5 5\") == \"#####\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 2') == '#.X#\\nX.#.\\n#...'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 4 2\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2\") == \"###.###\"\nassert solution(\"5 4 5\") == \"###.###\"\nassert solution(\"6 6 6\") == \"#####\"\nassert solution(\"1 1 1\") == \"########\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2\") == \"X.X.X\"\nassert solution(\"5 4 5\") == \"X.#X\"\nprint(\"You're a grid master!\")"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '4'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\\n\") == \"1\"\nassert solution(\"5\\n1 2 2 2\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1\n''') == '1'\nassert solution('''5\n1 2 2 2\n''') == '3'\nassert solution('''18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n''') == '4'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n1 1\n''') == '1'\nassert solution('''5\n1 2 2 2\n''') == '3'\nassert solution('''18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n''') == '4'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1\n''') == '1'\nassert solution('''5\n1 2 2 2\n''') == '3'\nassert solution('''18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n''') == '4'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"18\") == \"4\""
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"18\") == \"4\""
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([1,2,3]) == '-1'\nassert solution([1,2,3,4,5]) == '1 4 2 5 3'\nassert solution([2,2,2,3,3,3]) == '-1'\n\n'''\n\nN, A, B = [int(x) for x in input().split()]"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3 2\n''') == '2 4 1 5 3'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\nassert solution('4 5 2 1') == '2 4 1 5'"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\nassert solution(\"5 5 7 5\") == \"5 7 5\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3 2\n''') == '2 4 1 5 3'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 2') == '4 1 5 3'\n\n'''\n\nN, A, B = map(int, input().split())\n\ncount = 0\n\nmax_len = 0\n\nfor i in range(1, N + 1):\n    if count < A:\n        count += 1\n        max_len = max(max_len, i)\n    elif count > A and count <= N:\n        count += 1\n        max_len = max(max_len, i)\n    else:\n        count = 1\n        max_len = i\n\nfor i in range(N, 0, -1):\n    if count < B:\n        count += 1\n        max_len = max(max_len, i)\n    elif count > B and count <= N:\n        count += 1\n        max_len = max(max_len, i)\n    else:\n        count = 1\n        max_len = i\n\nprint(max_len)\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n3 6 9 18 36\n3 6\n''') == 'Yes'\nassert solution('''2\n7\n17\n''') == 'No'\nassert solution('''9\n4 8 10 12 15 18 33 44 81\n4 8\n''') == 'Yes'\nassert solution('''8\n1\n5\n4\n1\n''') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == \"Yes\"\nassert solution(input_string_2) == \"No\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\n3 6 9 18 36 108\n''') == 'Yes'\nassert solution('''2\n7 17\n''') == 'No'\nassert solution('''9\n4 8 10 12 15 18 33 44 81\n''') == 'Yes'"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'Yes'\nassert solution() == 'No'\nassert solution() == 'Yes'\n\n\"\"\""
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == 'Yes'\nassert solution('3 6 9 18 36 108') == 'Yes'\nassert solution('2') == 'No'\nassert solution('9') == 'No'\nassert solution('4 8 10 12 15 18 33 44 81') == 'Yes'\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n3 6 9 18 36 108\\n') == 'Yes'\nassert solution('2\\n7 17\\n') == 'No'\nassert solution('9\\n4 8 10 12 15 18 33 44 81\\n') == 'Yes'\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 6 9 18 36 108\") == \"Yes\"\nassert solution(\"2\\n7 17\") == \"No\"\nassert solution(\"9\\n4 8 10 12 15 18 33 44 81\") == \"Yes\""
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"9\") == \"Yes\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n3 6 9 18 36 108\n\n''') == 'Yes'\nassert solution('''\n2\n7 17\n\n''') == 'No'\nassert solution('''\n9\n4 8 10 12 15 18 33 44 81\n\n''') == 'Yes'"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n3 6 9 18 36 108\\n') == 'Yes\\n', \"Should be 'Yes'\"\nassert solution('2\\n7 17\\n') == 'No\\n', \"Should be 'No'\"\nassert solution('9\\n4 8 10 12 15 18 33 44 81\\n') == 'Yes\\n', \"Should be 'Yes'\""
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\n1 2 -6 4 5 3\n''') == '12'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '12'"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n-1 2 5\\n\") == \"12\""
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 -6 4 5 3\") == \"12\"\nassert solution(\"5 -4 2 3 1\") == \"5\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"12\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"3 -4\") == \"6\"\nassert solution(\"4 5\") == \"6\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 -6 4 5 3\") == \"12\""
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 -6 4 5 3\") == \"12\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"12\"\nassert solution(\"5\") == \"0\"\n\"\"\"\n\n\nfrom math import gcd"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    5\n    1 2 -6 4 5 3\n    ''') == '12'\n\nprint(solution(input()))"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"12\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '5'\nassert solution('4 3') == '4'"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3\n3 1 4 2\n''') == '5'\nassert solution('''4 3\n3 1 4 2\n''') == '4'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 1 2') == '5'\nassert solution('1 5 1 2 3') == '5'\nassert solution('1 5 1 2 3 4') == '4'\nassert solution('1 5 1 2 3 4 5') == '5'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == '5'\nassert solution('5 3') == '5'\nassert solution('7 3') == '5'\nassert solution('7 7') == '6'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"3 3\\n1 2 3\\n\") == \"4\"\nassert solution(\"5 3\\n3 1 4 2\\n\") == \"5\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '5'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '5'\nassert solution('5 3') == '5'\nassert solution('10 0') == '10'\nassert solution('20 0') == '20'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '5'"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '5'\nassert solution('20 50') == '21'\nassert solution('10 50') == '10'"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2 3\n3 2 1''') == '0 0'\nassert solution('''3 2 1\n1 2 3''') == '1 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2 3\n2 1 3\n3 2 1\n2 3 1\n1 3 2\n3 1 2\n1 3 2''') == \"0 0\"\nassert solution('''3 2 1\n2 1 3\n3 1 2\n1 3 2\n2 3 1\n1 2 3''') == \"0 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2 3\n''') == '0 0'\nassert solution('''3\n2 3 1\n''') == '0 1'\nassert solution('''3\n3 2 1\n''') == '2 1'\n\n'''\n\n## My Solution:\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0 0'\nassert solution('3') == '0 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3]) == '0 0'\nassert solution([3]) == '0 1'\nassert solution([3]) == '0 1'\nassert solution([3]) == '0 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0 0'\nassert solution('3') == '0 1'\nassert solution('3') == '1 2'\nassert solution('3') == '2 3'\nassert solution('3') == '0 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0 0'\nassert solution('3') == '0 1'\nassert solution('3') == '2 1'\n\n'''"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"1 2 3\n\"\"\") == \"0 0\"\nassert solution(\"\"\"2 3 1\n\"\"\") == \"0 1\"\nassert solution(\"\"\"3 2 1\n\"\"\") == \"2 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"0 0\"\nassert solution(\"3\") == \"0 1\"\nassert solution(\"3\") == \"2 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 3\n\n''') == '0 0'\nassert solution('''3\n2 3 1\n\n''') == '0 1'\nassert solution('''3\n3 2 1\n\n''') == '2 1'\nassert solution('''3\n3 2 1\n\n''') == '2 1'\nassert solution('''3\n3 2 1\n\n''') == '2 1'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 4\naa\nbb\n''') == '6'\nassert solution('''3 3\naba\nbba\n''') == '8'\nassert solution('''4 5\nabbb\nbaaa\n''') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4\\naa\\nbb\\n') == '6'\nassert solution('3 3\\naba\\nbba\\n') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4\\naa\\nbb\\n') == 6\nassert solution('3 3\\naba\\nbaa\\n') == 8\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5') == '8'\nassert solution('2 4') == '6'\nassert solution('3 3') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '6'\nassert solution(input()) == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '8'\nassert solution('4 5') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == 6\n\nassert solution(\"3 3\") == 8"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 4\naa\nbb''') == '6'\nassert solution('''3 3\naba\nbba''') == '8'\nassert solution('''4 5\nabbb\nbaaa''') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 5\nabbb\nbaaa\n\n''') == \"8\"\nassert solution('''3 3\naba\nbba\n\n''') == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == '6'\n\"\"\"\n\n\"\"\"\n\nFirst, I am a lazy programmer. So, I will solve the problem by myself.\n\nI start to think about the case, when we would need to make a choice between prefix and suffix of a word.\n\nLet us say, we have to find a prefix.\n\n1. We are left with a word \"aa\" and there is prefix \"aa\".\n2. We are left with a word \"bb\" and there is no prefix.\n3. We are left with a word \"aab\" and there is prefix \"aab\".\n4. We are left with a word \"aba\" and there is prefix \"aba\".\n5. So, let us say, we have to make a choice. And we can make a choice only if there is a prefix.\n\nThis is very difficult to solve. But, we can solve it with the help of a function.\n\nLet's say, if we do not have a prefix, then we are looking for a suffix.\n\nWe are left with a word \"aa\" and there is no suffix.\n\nLet us say, we have to make a choice. And we can make a choice only if there is a suffix.\n\nAnd we need to be careful, that we will not be stuck in this loop forever.\n\nIf we are stuck in this loop forever, then we will be stuck in an infinite loop.\n\nThat is, the problem in Python is a pit.\n\nIn fact, you will come to the conclusion that we need a function to solve the problem, and then we will use the function to solve the problem.\n\nExample\nInput:\n2 4\naba\nbba\n\nOutput:\n8\n\nExplanation:\n\naba and bba are lexicographically not smaller than aba, but they are bigger than aba. We can make a choice in aba and say, we will put a suffix on it and in bba we will put prefix on it and we can make a choice.\n\nNow we have to make a choice.\n\nIf we do not have a prefix, then we are looking for a suffix.\n\nIn the case of \"aba\", there is no prefix, so we can make a choice.\n\nBut, if we have a prefix, we need to make a choice.\n\nIf we have a prefix, we need to make a choice.\n\nThe more we need to make a choice, the bigger our answer will be.\n\nAfter, we can see, that we can make a choice in aba and we can put suffix on it and we can make a choice in bba.\n\nThe more we can make a choice, the bigger our answer will be.\n\nIf we have a choice, we can make a choice.\n\nThat is, the problem in Python is a pit.\n\nIn fact, you will come to the conclusion that we need a function to solve the problem, and then we will use the function to solve the problem.\n\nExample\nInput:\n3 3\naba\nbaaa\n\nOutput:\n8\n\nExplanation:\n\naba and baaa are lexicographically not smaller than aba, but they are bigger than aba. We can make a choice in aba and say, we will put a suffix on it and in baaa we will put prefix on it and we can make a choice.\n\nNow we have to make a choice.\n\nIf we do not have a prefix, then we are looking for a suffix.\n\nIn the case of \"aba\", there is no prefix, so we can make a choice.\n\nBut, if we have a prefix, we need to make a choice.\n\nIf we have a prefix, we need to make a choice.\n\nThe more we need to make a choice, the bigger our answer will be.\n\nAfter, we can see, that we can make a choice in aba and we can put suffix on it and we can make a choice in baaa.\n\nThe more we can make a choice, the bigger our answer will be.\n\nIf we have a choice, we can make a choice.\n\nThat is, the problem in Python is a pit.\n\nIn fact, you will come to the conclusion that we need a function to solve the problem, and then we will use the function to solve the problem.\n\"\"\""
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 0 0') == 'YES'\nassert solution('0 0 1') == 'YES'\nassert solution('0 0 1') == 'YES'\nassert solution('0 0 1') == 'YES'\nassert solution('0 1 1') == 'YES'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == 'YES'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n') == 'YES'"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n') == 'YES'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO'"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 0 0') == 'YES'\nassert solution('0 0 1') == 'YES'\nassert solution('0 0 1') == 'YES'\nassert solution('0 0 1') == 'YES'\nassert solution('0 1 1') == 'YES'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1\n''') == 'YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n0 1 1\\n1 0 1\\n1 1 0\\n1 1 1\\n'\nassert solution('''\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'NO\\n'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1') == 'YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n0 1 1\\n1 0 1\\n1 1 0\\n1 1 1'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == 'NO'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0\") == \"YES\", \"Worst\"\nassert solution(\"0 0 0\\n0 0 1\\n0 0 1\") == \"YES\", \"Common\"\nassert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 1 1\\n1 1 1\\n1 1 1\") == \"YES\", \"Extreme\"\nassert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\", \"Common\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n3 5 3 5\n''') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n6 15 35 77 22\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n4\n2 3 6 7\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n5\n6 10 15 1000 75\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n2 3 6 7\n''') == 'YES', \"2,2,1,1\"\nassert solution('''5\n6 15 35 77 22\n''') == 'YES', \"2,2,1,1,1,1\"\nassert solution('''5\n6 10 15 1000 75\n''') == 'NO', \"2,2,1,1,1,1\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n-12 -13 -14\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n5\n-8 -10 -15 -20 -25\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n5\n-12 -13 -14 -20 -25\n\"\"\") == \"NO\""
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n4\\n2 4\\n') == 'YES\\n2 1 1 1\\n'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"2 2 1 1 1\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n2 3 6 7\n''') == 'YES'\nassert solution('''5\n6 15 35 77 22\n''') == 'YES'\nassert solution('''5\n6 10 15 1000 75\n''') == 'NO'\nassert solution('''\n''') == 'NO'"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 6 7\") == \"YES\"\nassert solution(\"5\\n6 15 35 77 22\") == \"YES\"\nassert solution(\"5\\n6 10 15 1000 75\") == \"NO\""
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'YES'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''100\n60\n70''') == '40'\nassert solution('''410\n55\n70''') == '5'\nassert solution('''600\n60\n70''') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '1'\nassert solution('100') == '1'\nassert solution('410') == '0'\nassert solution('0') == '0'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n60\\n70\\n') == '40\\n'\nassert solution('600\\n60\\n70\\n') == '5\\n'\nassert solution('10\\n60\\n70\\n') == '5\\n'\nassert solution('20\\n60\\n70\\n') == '0\\n'\nassert solution('100\\n60\\n70\\n') == '40\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('100') == '40'\nassert solution('410') == '5'\nassert solution('600') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''100\n60\n70''') == '40'\nassert solution('''410\n55\n70''') == '5'\nassert solution('''600\n60\n70''') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''100\n60\n70''') == '40'\n\nassert solution('''410\n55\n70''') == '5'\n\nassert solution('''600\n60\n70''') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"100\\n60\\n70\") == \"40\"\nassert solution(\"410\\n55\\n70\") == \"5\"\nassert solution(\"600\\n60\\n70\") == \"0\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n60\n70\n''') == '40'\nassert solution('''410\n55\n70\n''') == '5'\nassert solution('''600\n60\n70\n''') == '0'\nassert solution('''300\n500\n400\n''') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''100\n60\n70''') == '40'\n\nassert solution('''410\n55\n70''') == '5'\n\nassert solution('''600\n60\n70''') == '0'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n3 1 4 1 5 9 2 6 5 3 5 8\n''') == \"3 4\"\n\nassert solution('''\n5\n1 1 1 1 1\n''') == \"1\"\n\nassert solution('''\n6\n1 2 4 1 1 6 2 3\n''') == \"7 4\"\n\nassert solution('''\n9\n7 8 7 3 7 4 9 7 8\n''') == \"13 14\"\n\nassert solution('''\n11\n1 1 2 2 1 1 1 2 2 1 1 1 1 1 1 1\n''') == \"11\""
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '2'\nassert solution('4\\n') == '3'\nassert solution('5\\n') == '2'\nassert solution('2\\n') == '1'\nassert solution('10\\n') == '10'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"1\\n1\\n1\\n1\\n1\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"12\"\nassert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == \"1\\n1\\n1\\n1\\n1\""
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3 1 4 1 5 9 2 6 5 3 5 8') == '12'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n12\n3 1 4 1 5 9 2 6 5 3 5 8\n''') == '3 4'\nassert solution('''\n5\n1 1 1 1 1\n''') == '1 1'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"12\") == \"12\"\nassert solution(\"5\") == \"1\""
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\\\n5\n1 1 1 1 1\n\"\"\") == \"1 1\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2\\n1 1'"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == 6\n\"\"\"\n\n\"\"\"\nSOLUTION\n1) N is the number of squares, M is the number of conditions\n2) The conditions are defined as the following:\n    - There are exactly x_i different colors among squares l_i, l_i + 1,..., r_i.\n3) Counting is done by counting each color and then multiplying by the count of the number of conditions\n    - Counting by color is done using the following steps:\n        - Get the number of different colors from the conditions.\n        - Count the number of times each color has been seen.\n    - The number of times each color has been seen is equal to the number of times each color appears in the conditions.\n4) The modulo operator allows us to count only when the condition is satisfied (one condition is satisfied for each color).\n    - For example, for the conditions (1 2 2 1 1 3), if we count the number of colors that appear in the conditions once,\n      we know that the number of times each color appears (3) is equal to 3 because (1 2 2 1 1 3) has all the colors\n      but repeated as well. The modulo operator allows us to count only when the condition is satisfied.\n5) We can use a count by color that is stored in a list and we have to iterate through it.\n    - For each color, we check if the number of times it appears in the conditions is equal to the number of times\n      each color is being counted.\n6) We can count by color by adding the number of times each color is being counted to the total count of colors\n    - We can do this by iterating through the list and adding the number of times the color appears in the conditions.\n\"\"\""
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"6\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"10 10\") == \"125860\"\nassert solution(\"10 1\") == \"125860\"\nassert solution(\"30 30\") == \"125860\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"6\"\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1\n1 3 3\n''') == '6'\nassert solution('''3 4\n2 1 1 1\n''') == '6'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"4 2\") == \"5\"\nassert solution(\"4 3\") == \"6\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"4 1\") == \"14\"\nassert solution(\"3 2\") == \"8\"\n\nNote:\n - 0 \u2264 N \u2264 300,\n - 0 \u2264 M \u2264 300\n - 0 \u2264 l_i \u2264 r_i \u2264 N,\n - 0 \u2264 x_i \u2264 3\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"6 1\") == \"6\"\nassert solution(\"10 1\") == \"24\"\nassert solution(\"2 1\") == \"0\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"6\", \"Wrong result for sample case\"\nassert solution(\"3 1\") == \"6\", \"Wrong result for sample case\"\nassert solution(\"10 1\") == \"16869\", \"Wrong result for sample case\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n1 3 3\") == \"6\"\nassert solution(\"2 1\\n2 1 1\") == \"2\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 1\\n\"\n    \"1 3 3\\n\"\n) == \"6\"\n\nassert solution(\n    \"4 2\\n\"\n    \"1 2 3 2\\n\"\n) == \"1\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n7\n\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n1\n1\n\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n10\n30\n\n\"\"\") == \"10\""
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"5\n3\n\n\"\"\") == '5'\nassert solution(r\"\"\"10\n1\n\n\"\"\") == '-1'\nassert solution(r\"\"\"10\n4\n\n\"\"\") == '-1'\nassert solution(r\"\"\"10\n100\n\n\"\"\") == '10'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"10\"\nassert solution(\"8\") == \"10\"\nassert solution(\"10\") == \"-1\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"10\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1'\nassert solution('3') == '2'\nassert solution('4') == '-1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r\"\"\"3\n9\n\"\"\") == \"10\"\nassert solution(r\"\"\"100\n100\n\"\"\") == \"120\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('87654') == '10'\nassert solution('138') == '10'\nassert solution('1234') == '-1'\nassert solution('1234567890') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '10'\nassert solution('86') == '-1'\nassert solution('87654') == '10'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n30') == '10'\nassert solution('7\\n99') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"87654\") == \"10\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aba') == 'Second'\nassert solution('bab') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"aaaa\") == \"First\"\nassert solution(\"\") == \"No\"\nassert solution(\"a\") == \"No\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aba') == 'Second'\nassert solution('ab') == 'Second'\nassert solution('abc') == 'Second'\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aba') == 'Second'\nassert solution('abba') == 'First'\nassert solution('aaaa') == 'First'\nassert solution('aabaa') == 'Second'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''aba''') == 'Second'\nassert solution('''aab''') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"First\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aba') == 'Second'\nassert solution('aa') == 'First'\nassert solution('aab') == 'Second'\nassert solution('aab') == 'Second'\nassert solution('aab') == 'Second'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"Second\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aba') == 'Second'\n\n\"\"\"\n\ns = stdin\nl = len(s)\n\nwhile True:\n    if l == 0:\n        break\n    else:\n        if s[0] == s[-1]:\n            s = s[1:-1]\n            l = len(s)\n        else:\n            s = s[1:]\n            l = len(s)"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aba') == 'Second'\nassert solution('aab') == 'Second'\nassert solution('aba') == 'Second'\nassert solution('aab') == 'First'\nassert solution('aab') == 'Second'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"10\\n\"\n    \"12345\"\n) == \"6\"\nassert solution(\n    \"16\\n\"\n    \"439873893693495623498263984765\"\n) == \"40\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '6'\nassert solution('12345') == '6'\nassert solution('16') == '40'"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"10\"\n) == \"6\"\nassert solution(\n    \"16\"\n) == \"40\"\nassert solution(\n    \"439873893693495623498263984765\"\n) == \"40\"\nassert solution(\n    \"998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899889988998899"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8') == '8'\nassert solution('2') == '0'\nassert solution('4') == '5'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '6'\nassert solution('12345') == '6'\nassert solution('16') == '40'\nassert solution('439873893693495623498263984765') == '40'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10\n12345''') == '6'\nassert solution('''16\n439873893693495623498263984765''') == '40'\nassert solution('''2\n3\n1''') == '3'\nassert solution('''1\n1\n1''') == '1'\nassert solution('''1\n1\n2''') == '1'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '6'\nassert solution('16') == '40'"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '6'\nassert solution('12345') == '6'\nassert solution('12345') == '6'\nassert solution('12345') == '6'\nassert solution('12345') == '6'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"40\""
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    3\n    1 2 3\n    4 5 6\n    7 8 9\n    ''') == '40'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2\n1\n1\n''') == '332748119'\nassert solution('''2 1\n1 1\n1\n''') == '332748119'\nassert solution('''2 2\n0 0\n0 1\n''') == '3'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '160955686'\nassert solution('''1 2\n1\n1\n''') == '3'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"332748119\"\n\"\"\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n0 1\\n2 1\\n') == '332748119'\nassert solution('1 2\\n1\\n1\\n') == '3'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == '332748119'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"332748119\"\nassert solution(\"1 2\") == \"332748119\"\nassert solution(\"1\") == \"3\"\nassert solution(\"3 3\") == \"160955686\"\nassert solution(\"0 1\") == \"185138929\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"332748119\"\nassert solution(\"1 2\") == \"332748119\"\nassert solution(\"3 3\") == \"160955686\"\nassert solution(\"1 2\") == \"3\""
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_data) == \"332748119\"\nassert solution(input_data_2) == \"185138929\"\nassert solution(input_data_3) == \"974061117\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1\\n0 1\\n2 1') == '332748119'\nassert solution('1 2\\n1') == '3'\nassert solution('3 3\\n0 1 1') == '160955686'\nassert solution('3 4\\n1 1 1') == '974061117'\nprint(solution(input()))\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"332748119\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"3 3\") == \"160955686\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ABDCDDA\") == \"ABDCDDA\"\nassert solution(\"A\") == \"A\"\nassert solution(\"AACCCAA\") == \"AACCCAA\"\nassert solution(\"ABDCDDA\") == \"ABDCDDA\"\nassert solution(\"ABCDEFGHIJKLIMNOQRSTUVWXYZABCDEFGHIJKLIMNOQRSTUVWXYZ\") == \"ABCDEFGHIJKLIMNOQRSTUVWXYZABCDEFGHIJKLIMNOQRSTUVWXYZ\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'OZ'\nassert solution('AA') == '0'\n\"\"\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"ORZ\"\nassert solution(\"OZ\") == \"0\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == 0\n\nstdin = \"\"\"\nAJKEQSLOBSROFGZ\nOVGURWZLWVLUXTH\nOZ\n\"\"\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(AJKEQSLOBSROFGZ) == ORZ\nassert solution(OVGURWZLWVLUXTH) == OZ\nassert solution(OZ) == 0\n\n\n'''"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AB') == 'A'\nassert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('AOJKEQSLOBSROFGZ') == '0'\nprint('Almost done!')"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(\"AQCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(\"AA\") == \"0\"\nassert solution(\"AQCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(open(\"input.txt\").read()) == \"99\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1\") == '99'\nassert solution(\"1 100 1\") == '0'\nassert solution(\"100 100 100\") == '0'"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == \"0\""
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2 1\n1 100 1\n1 100 100''') == '99'\n\n'''\n--- Day 12: Rain Risk ---\n\nStanding on the bank of a deck at sea-level, the ocean asks: \"can you cross the river?\"\n\nAlong the bank of the deck there are trees, which must be avoided. The river is dangerous, so a boat is tied up behind a tree. If you get to the other side of the bank, will you:\n\nWait until the boat can leave the island\nWait until the boat can get to the other side of the bank\nWait until the boat gets to the other side of the bank AND the trees are avoided\nTime to find out what to do!\n\nThe boat is approaching the other side of the bank from behind. You are at sea-level, and you can either:\n\nGet to the other side of the bank directly\nWait for the boat to get to the other side of the bank\n\nThe boat can get to the other side of the bank by getting to a higher sea-level and avoiding the trees.\n\nHow many different combinations of actions can you take, in order to get the boat to the other side of the bank?\n\nInput\n\n1 2 1\n1 100 1\n1 100 100\n\nOutput\n\n5\n\n'''\n\n'''\nimport math"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1') == '0'\nassert solution('1 1 1\\n1 1 1\\n1 1 1') == '0'\nassert solution('1 1 1\\n1 1 1\\n1 1 1') == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 1') == '99'\nassert solution('1 100 1') == '0'\nassert solution('100 100 100') == '0'"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100\\n') == '99'\nassert solution('1 5 1\\n1 100 1\\n1 100 100\\n') == '0'"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1') == '0'\nassert solution('1 2 1\\n1 100 1\\n1 100 100') == '0'\nassert solution('3 3 3\\n1 1 1\\n1 1 1') == '0'\nassert solution('1 2 1\\n1 1 1\\n1 1 1') == '0'"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 1\n1 100 1\n1 100 100\n''') == '99'\nassert solution('''\n100 100 100\n1 1 1\n1 1 1\n''') == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1') == '0'"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''3 2''') == '1'\nassert solution('''3 3''') == '0'\nassert solution('''1000000000000 1048576''') == '118606527258'"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('1000000000000 1048576') == '118606527258'"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '1'\nassert solution('1000000000000 1048576') == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"1000000000000 1048576\") == \"118606527258\""
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('3 2\\n') == '1'\nassert solution('3 3\\n') == '0'\nassert solution('1000000000000 1048576\\n') == '118606527258'"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\n''') == '1'\nassert solution('''\n3 3\n''') == '0'\nassert solution('''\n8 1000000\n''') == '118606527258'\nassert solution('''\n8 100000000\n''') == '0'\nassert solution('''\n8 1000000000\n''') == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(None) == None\nprint(solution(''))\nprint(solution('\\n'))\nprint(solution('1'))\nprint(solution('1 1'))\nprint(solution('3 2'))\nprint(solution('3 3'))\nprint(solution('1000000000000 1048576'))\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"3 2\\n\") == \"1\"\nassert solution(\"3 3\\n\") == \"0\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n''') == '1'\nassert solution('''\n3 2\n''') == '1'\nassert solution('''\n3 3\n''') == '0'\nassert solution('''\n1000000000000 1048576\n''') == '118606527258'"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''+-''') == 'No'\nassert solution('''++''') == 'No'\nassert solution('''-++''') == 'No'\nassert solution('''-+''') == 'Yes'\nassert solution('''--++''') == 'Yes'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''+-\n+-''') == 'No'\nassert solution('''++''') == 'Yes'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('+-') == \"No\"\nassert solution('++') == \"Yes\"\nassert solution('+-+') == \"No\"\nassert solution('+--') == \"No\"\nassert solution('+-+') == \"Yes\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''+-''') == 'No'\nassert solution('''+-''') == 'No'\nassert solution('''++''') == 'Yes'\nassert solution('''++''') == 'Yes'\nassert solution('''+-+''') == 'Yes'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"+\") == \"Yes\"\nassert solution(\"--\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n-++-\n\"\"\"\n) == \"No\"\n\nassert solution(\n    \"\"\"\n+-\n\"\"\"\n) == \"Yes\"\n\nassert solution(\n    \"\"\"\n++\n\"\"\"\n) == \"Yes\"\n\nassert solution(\n    \"\"\"\n-+\n\"\"\"\n) == \"No\"\n\nassert solution(\n    \"\"\"\n-++-+\n\"\"\"\n) == \"Yes\""
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('-+') == 'No'\nassert solution('--') == 'No'\nassert solution('+-') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"++\") == \"Yes\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"++-\") == \"Yes\"\nassert solution(\"-+\") == \"No\"\nassert solution(\"++-\") == \"Yes\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('++-') == 'No'\nassert solution('+-+') == 'Yes'\nassert solution('+-++') == 'Yes'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"Yes\"\n\n'''\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n''') == '12.566370614359172464'\n\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n''') == '21.991148575128551812'\n\nassert solution('''\n4 1 2\n2 1\n2 -1\n1 0\n0 1\n''') == '12.566370614359172464'\n\nassert solution('''\n4 2 1\n1 -1\n1 1\n1 2\n''') == '0'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1 -1\n0 0\n1 2\n2 0\n1 1\n\n''') == '12.566370614359172464'\n\nassert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n\n''') == '12.566370614359172464'\n\nassert solution('''\n3 0 0\n0 1\n1 2\n2 0\n1 1\n\n''') == '21.991148575128551812'\n\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\n''') == '21.991148575128551812'\n\nassert solution('''\n10 0 0\n1 1\n0 1\n2 2\n0 2\n3 3\n0 3\n4 4\n0 4\n5 5\n0 5\n6 6\n0 6\n7 7\n0 7\n8 8\n0 8\n9 9\n0 9\n10 10\n0 10\n11 11\n0 11\n12 12\n0 12\n13 13\n0 13\n14 14\n0 14\n15 15\n0 15\n16 16\n0 16\n17 17\n0 17\n18 18\n0 18\n19 19\n0 19\n20 20\n0 20\n21 21\n0 21\n22 22\n0 22\n23 23\n0 23\n24 24\n0 24\n25 25\n0 25\n26 26\n0 26\n27 27\n0 27\n28 28\n0 28\n29 29\n0 29\n30 30\n0 30\n31 31\n0 31\n32 32\n0 32\n33 33\n0 33\n34 34\n0 34\n35 35\n0 35\n36 36\n0 36\n37 37\n0 37\n38 38\n0 38\n39 39\n0 39\n40 40\n0 40\n41 41\n0 41\n42 42\n0 42\n43 43\n0 43\n44 44\n0 44\n45 45\n0 45\n46 46\n0 46\n47 47\n0 47\n48 48\n0 48\n49 49\n0 49\n50 50\n0 50\n51 51\n0 51\n52 52\n0 52\n53 53\n0 53\n54 54\n0 54\n55 55\n0 55\n56 56\n0 56\n57 57\n0 57\n58 58\n0 58\n59 59\n0 59\n60 60\n0 60\n61 61\n0 61\n62 62\n0 62\n63 63\n0 63\n64 64\n0 64\n65 65\n0 65\n66 66\n0 66\n67 67\n0 67\n68 68\n0 68\n69 69\n0 69\n70 70\n0 70\n71 71\n0 71\n72 72\n0 72\n73 73\n0 73\n74 74\n0 74\n75 75\n0 75\n76 76\n0 76\n77 77\n0 77\n78 78\n0 78\n79 79\n0 79\n80 80\n0 80\n81 81\n0 81\n82 82\n0 82\n83 83\n0 83\n84 84\n0 84\n85 85\n0 85\n86 86\n0 86\n87 87\n0 87\n88 88\n0 88\n89 89\n0 89\n90 90\n0 90\n91 91\n0 91\n92 92\n0 92\n93 93\n0 93\n94 94\n0 94\n95 95\n0 95\n96 96\n0 96\n97 97\n0 97\n98 98\n0 98\n99 99\n0 99\n100 100\n0 100\n101 101\n0 101\n102 102\n0 102\n103 103\n0 103\n104 104\n0 104\n105 105\n0 105\n106 106\n0 106\n107 107\n0 107\n108 108\n0 108\n109 109\n0 109\n110 110\n0 110\n111 111\n0 111\n112 112\n0 112\n113 113\n0 113\n114 114\n0 114\n115 115\n0 115\n116 116\n0 116\n117 117\n0 117\n118 118\n0 118\n119 119\n0 119\n120 120\n0 120\n121 121\n0 121\n122 122\n0 122\n123 123\n0 123\n124 124\n0 124\n125 125\n0 125\n126 126\n0 126\n127 127\n0 127\n128 128\n0 128\n129 129\n0 129\n130 130\n0 130\n131 131\n0 131\n132 132\n0 132\n133 133\n0 133\n134 134\n0 134\n135 135\n0 135\n136 136\n0 136\n137 137\n0 137\n138 138\n0 138\n139 139\n0 139\n140 140\n0 140\n141 141\n0 141\n142 142\n0 142\n143 143\n0 143\n144 144\n0 144\n145 145\n0 145\n146 146\n0 146\n147 147\n0 147\n148 148\n0 148\n149 149\n0 149\n150 150\n0 150\n151 151\n0 151\n152 152\n0 152\n153 153\n0 153\n154 154\n0 154\n155 155\n0 155\n156 156\n0 156\n157 157\n0 157\n158 158\n0 158\n159 159\n0 159\n160 160\n0 160\n161 161\n0 161\n162 162\n0 162\n163 163\n0 163\n164 164\n0 164\n165 165\n0 165\n166 166\n0 166\n167 167\n0 167\n168 168\n0 168\n169 169\n0 169\n170 170\n0 170\n171 171\n0 171\n172 172\n0 172\n173 173\n0 173\n174 174\n0 174\n175 175\n0 175\n176 176\n0 176\n177 177\n0 177\n178 178\n0 178\n179 179\n0 179\n180 180\n0 180\n181 181\n0 181\n182 182\n0 182\n183 183\n0 183\n184 184\n0 184\n185 185\n0 185\n186 186\n0 186\n187 187\n0 187\n188 188\n0 188\n189 189\n0 189\n190 190\n0 190\n191 191\n0 191\n192 192\n0 192\n193 193\n0 193\n194 194\n0 194\n195 195\n0 195\n196 196\n0 196\n197 197\n0 197\n198 198\n0 198\n199 199\n0 199\n200 200\n0 200\n201 201\n0 201\n202 202\n0 202\n203 203\n0 203\n204 204\n0 204\n205 205\n0 205\n206 206\n0 206\n207 207\n0 207\n208 208\n0 208\n209 209\n0 209\n210 210\n0 210\n211 211\n0 211\n212 212\n0 212\n213 213\n0 213\n214 214\n0 214\n215 215\n0 215\n216 216\n0 216\n217 217\n0 217\n218 218\n0 218\n219 219\n0"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == stdout\n\n\"\"\""
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 0 0') == '12.566370614359172464'\n\nassert solution('4 1 -1') == '21.991148575128551812'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 0 0\n0 1\n-1 2\n1 2\n''') == '12.566370614359172464'\n\nassert solution('''4 1 -1\n0 0\n1 2\n2 0\n1 1\n''') == '21.991148575128551812'\n\"\"\""
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 1 -1\") == \"21.991148575128551812\"\nassert solution(\"3 0 0\") == \"12.566370614359172464\"\nassert solution(\"5 1 -1\") == \"20.78860759493670886\"\nassert solution(\"10 1 -1\") == \"10.5\"\nassert solution(\"15 1 -1\") == \"5.5\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\n''') == '21.991148575128551812'\n\n\nassert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n\n''') == '12.566370614359172464'"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 0 0\") == \"12.566370614359172464\"\nassert solution(\"4 1 -1\") == \"21.991148575128551812\"\nassert solution(\"1 0\") == \"10.0000000000000003\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 0 0\\n0 1\\n-1 2\\n1 2') == '12.566370614359172464'\nassert solution('4 1 -1\\n0 0\\n1 2\\n2 0\\n1 1\\n') == '21.991148575128551812'\n\n\"\"\"\n\nfrom math import pi\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"12.566370614359172464\"\n\"\"\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '1 1'\nassert solution('4\\n') == '1 2'\nassert solution('5\\n') == '2 3'\nassert solution('6\\n') == '2 4'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"48\") == \"9 42\"\nassert solution(\"6\") == \"6 6\""
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7') == '42 42'\nassert solution('48') == '9 42'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''48''') == '9 42'\nassert solution('''6''') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0 0'\nassert solution('6') == '1 1'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"6 6\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"6 6\"\nassert solution(\"48\") == \"9 42\"\nprint(solution(open(\"input.txt\")))"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('48\\n') == '9 42'\nassert solution('6\\n') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\n''') == '6 6'\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'Yes'\nassert solution('3') == 'No'\nassert solution('10') == 'Yes'\nprint(solution(input()))\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n\"\"\"\n\nn = int(input())\ns = input()\n\ns = s.replace('(','()')\ns = s.replace(')','()')"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"10\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"10\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"10\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n1\n(\n\"\"\") == \"Yes\"\nassert solution(\n\"\"\"\n2\n)\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n3\n))\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n5\n)))\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n8\n)))\n\"\"\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n(())') == 'Yes'\nassert solution('2\\n(()())') == 'Yes'\nassert solution('3\\n(())') == 'No'\nassert solution('4\\n(())(())') == 'Yes'\nassert solution('5\\n
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"10\") == \"Yes\""
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'Yes'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('4') == 'No'\nassert solution('5') == 'Yes'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 50\n50 50 100\n''') == '5'\nassert solution('''\n2 50\n50 50\n''') == '2'\nassert solution('''\n3 100\n50 50 100\n''') == '2'\nassert solution('''\n4 100\n50 50 100 50\n''') == '0'\nassert solution('''\n5 100\n50 50 50 100 50\n''') == '1'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 50\") == \"1\"\nassert solution(\"3 100\") == \"5\"\nassert solution(\"2 50\") == \"-1\"\nassert solution(\"5 100\") == \"0\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 50\\n50 50 100\\n') == '1\\n1'\nassert solution('2 50\\n50 50\\n') == '5\\n2'\nassert solution('3 100\\n50 50 100\\n') == '5\\n2'"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 50\") == \"1\"\nassert solution(\"3 100\") == \"5\""
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 50\n50 50\n''') == '1'\nassert solution('''3 100\n50 50 100\n''') == '5'\nassert solution('''2 50\n50 50\n''') == '-1'\nassert solution('''5 100\n50 50 100\n50 50\n50 50\n''') == '2'\nassert solution('''5 100\n50 50 100\n50 50\n50 50\n''') == '2'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 50\n50 50 100\n''') == '1'\n\nassert solution('''2 50\n50 50\n''') == '5'\n\nassert solution('''3 100\n50 50 100\n''') == '2'\n\nassert solution('''4 50\n50 50 100\n''') == '3'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 50') == '1'\nassert solution('2 50') == '-1'\nassert solution('3 50') == '2'\nassert solution('4 50') == '2'\nassert solution('5 50') == '1'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 50\n50 50 100\n''') == '1'\nassert solution('''2 50\n50 50\n''') == '2'\nassert solution('''3 100\n50 50 100\n''') == '5'\nassert solution('''1 1000000000\n10000000 50\n''') == '0'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 50\\n50 50 100') == '1'\nassert solution('3 100\\n50 50 100') == '5'\nassert solution('2 50\\n50 50') == '-1'\nassert solution('2 50\\n50 50') == '0'\nassert solution('3 100\\n50 50 100') == '5'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 100\n50 50 100\n\n5''') == \"5\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n2 6 8\n''') == '2'\n\nassert solution('''5\n2 3 4 9 12\n''') == '4'\n\nassert solution('''4\n5 7 2 9\n''') == '1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '4'\nassert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('1') == '0'\n\n\"\"\""
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '1'\n\nprint(solution(input_))\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 3 4 9 12') == '2'\nassert solution('4\\n5 7 2 9') == '1'\nassert solution('6\\n2 3 4 9 12') == '4'\nassert solution('3\\n2 3 4 9 12') == '1'\nassert solution('5\\n1 3 4 9 12') == '4'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2 6 8') == '2'\nassert solution('5\\n2 3 4 9 12') == '4'\nassert solution('4\\n5 7 2 9') == '1'"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\nassert solution('4') == '1'\n\n\n\n\"\"\""
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 3 4 9 12') == '2'\nassert solution('4\\n5 7 2 9') == '1'\nassert solution('3\\n2 6 8') == '2'\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '-1'\nassert solution('5') == '5'\nassert solution('4') == '-1'\nassert solution('100') == '-1'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n10 16\n7 17\n''') == \"5\"\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == \"5\"\nassert solution('''\n3\n17 18\n15 24\n12 15\n''') == \"6\"\nassert solution('''\n2\n10 16\n7 17\n''') == \"-1\"\nassert solution('''\n3\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == \"5\""
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '5'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(open(0).read()) == '6'\nprint(solution(open(0).read()))\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3,17,18,15,24,12,15,24,12,15,24]) == 6\nassert solution([5,90,108,45,105,75,40]) == 5\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\nassert solution('''\n1\n0\n''') == '-1'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '6'\nassert solution('7') == '-1'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n17 18\n15 24\n12 15\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5\n10 16\n7 17\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\n\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\n\nassert solution('''\n2\n10 16\n7 17\n''') == '-1'"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 12, 15, 18, 24, 25, 27]) == 6\nassert solution([3, 13, 21, 39, 46, 51]) == -1\nassert solution([1, 2, 3, 4, 5, 6]) == -1\nassert solution([1, 2, 3, 4, 5, 6]) == -1\nassert solution([1, 2, 3, 4, 5, 6]) == -1\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '0'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"bab\") == \"2 0 1 3\"\nassert solution(\"bbbb\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"bab\\nbb\") == \"0\"\nassert solution(\"bbbb\\na\") == \"1 0 1 3\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"bab\") == \"1 0\"\nassert solution(\"bbbb\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aab') == '2 0 1 0'\nassert solution('bbbb') == '0'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '0'"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '0'"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"bab\\nbb\") == \"2 0 1 3\"\nassert solution(\"bbbb\\naaa\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '0'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"2\") == \"IMPOSSIBLE\"\nassert solution(\"3\") == \"POSSIBLE\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\nassert solution(\"5\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'POSSIBLE'\nassert solution('2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'POSSIBLE'\nassert solution('12') == 'IMPOSSIBLE'\n\"\"\"\n\nimport sys\nimport os\nsys.path.append(os.path.dirname(sys.path[0]))\nfrom solutions.cs_583_solutions.solutions import is_subtree"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"POSSIBLE\"\nassert solution(\"2\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == 'POSSIBLE'\nassert solution('4 3 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"POSSIBLE\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\nassert solution(\"1\") == \"IMPOSSIBLE\"\nassert solution(\"10\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'POSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n1 1\n4 3 2\n\"\"\") == \"POSSIBLE\"\nassert solution(\"\"\"3\n1 1\n2 2\n\"\"\") == \"IMPOSSIBLE\"\n\"\"\"\n1. For each vertex v, there are two possibilities.\n    - 1. if v is the root of a tree, Snuke can assign colors to it so that the following condition is satisfied:\n        for each node v\u2019 in its subtree rooted at v,\n            x_v\u2019 = max(x_v, x_v\u2019)\n    - 2. if v is not the root of a tree, Snuke can assign colors to it so that the following condition is satisfied:\n        for each node v\u2019 in its subtree rooted at v,\n            x_v\u2019 = max(x_v\u2019, x_v + X_v)\n            \n2. for each v, Snuke can assign colors to it so that the following condition is satisfied:\n    for each node v\u2019 in its subtree rooted at v,\n        x_v\u2019 = max(x_v, x_v\u2019)\n    \n3. for each v, Snuke can assign colors to it so that the following condition is satisfied:\n    for each node v\u2019 in its subtree rooted at v,\n        x_v\u2019 = max(x_v\u2019, x_v + X_v)\n    \n4. for each v, Snuke can assign colors to it so that the following condition is satisfied:\n    for each node v\u2019 in its subtree rooted at v,\n        x_v\u2019 = max(x_v, x_v\u2019)\n    \n5. for each v, Snuke can assign colors to it so that the following condition is satisfied:\n    for each node v\u2019 in its subtree rooted at v,\n        x_v\u2019 = max(x_v, x_v\u2019)\n    \nIf there is no node v in the subtree rooted at v, then x_v is set to 0.\n\"\"\"\n\n\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n\n    def solution(self, stdin: str):\n        \"\"\"\n        Given an array arr of integers, write a function to find the root of a tree,\n        such that every node has at most k children, with each subtree having no more than k + 1 children.\n\n        The definition of a root of a tree is a node in the tree such that there is no node in the tree\n        such that has a child of the root.\n\n        The definition of a tree node is a node in the tree that has no children.\n\n        Example 1:\n\n        Input:\n        arr = [5,4,1,3,2,6,9]\n        k = 3\n        Output:\n        [1,2,3,4,5,6,null,null,9]\n\n        Note that the returned tree should still have node 5,4,1,3,2,6 and node 9 in the tree.\n        The tree should not have any new nodes.\n        \"\"\"\n\n        def construct_tree(node, prev, num_nodes, node_index, node_depth, max_depth):\n            \"\"\"\n            recursive construction of a tree from array arr\n            \"\"\"\n\n            # if there are no nodes left, then the tree is constructed\n            if node_index == num_nodes:\n                return node\n\n            # if the depth is greater than max_depth, then the tree is not constructed\n            if node_depth > max_depth:\n                return None\n\n            # if node is not the last element, then add the parent node to the tree\n            if node_index!= num_nodes - 1:\n                node.left = TreeNode(arr[node_index])\n                prev = node.left\n                node_index += 1\n                # recur for the child node\n                construct_tree(node.left, node, num_nodes, node_index, node_depth + 1, max_depth)\n\n            # if node is not the last element, then add the parent node to the tree\n            if node_index!= num_nodes - 1:\n                node.right = TreeNode(arr[node_index])\n                prev = node.right\n                node_index += 1\n                # recur for the child node\n                construct_tree(node.right, node, num_nodes, node_index, node_depth + 1, max_depth)\n\n        # main function to construct a tree from array arr\n        def construct_tree(arr, k):\n\n            # if there are no nodes left, then the tree is constructed\n            if len(arr) == 1:\n                return TreeNode(arr[0])\n\n            # construct the tree\n            root = TreeNode(arr[0])\n            construct_tree(arr[1:], k)\n\n            # find the node with the maximum children\n            node_index, max_children = 0, 0\n            node = root\n            while node:\n                children = 1 + node.left.val + node.right.val\n                if children > max_children:\n                    node_index, max_children = node.val, children\n                node = node.left\n\n            # get the parent node from the node with the maximum children\n            parent_node = TreeNode(node_index)\n            parent_node.left = root\n            root = parent_node\n\n            # construct the tree\n            max_depth = max_children\n            construct_tree(arr[1:], k)\n\n            # remove the parent node from the tree\n            parent_node.right = None\n            return root\n\n        # return the tree\n        return construct_tree(arr, k)\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3\n1 1\n4 3 2\n\"\"\"\n) == \"POSSIBLE\"\nassert solution(\n\"\"\"\n3\n1 1\n3 2 2\n\"\"\"\n) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'POSSIBLE'\nassert solution('2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"3\"\nassert solution(\"2 1000000007\") == \"2\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"4 5\") == \"1\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 10\") == \"2\"\nassert solution(\"1 100\") == \"0\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1000000007\") == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"3 5\") == \"3\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '1'\nassert solution('2 0') == '0'\nassert solution('2 10') == '0'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 10') == '2'\nassert solution('2 10') == '1'\nassert solution('1 10') == '0'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1000000007') == '2'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1000000007\") == \"2\"\nassert solution(\"10 8\") == \"4\"\nassert solution(\"10\") == \"10\"\n\"\"\"\nimport math"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 1000000007\"\n) == \"2\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1000000007') == '2'\n\nIn any given test set, only the two conditions mentioned above will be satisfied for the number of bowls of ramen that satisfy these conditions, disregarding order, modulo M."
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3 3\") == \"7\"\nassert solution(\"4 1 5 1\") == \"999999228\""
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2 3 3\n+-+\n''') == '7'\nassert solution('''\n4 1 5 1\n-\n''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2 3 3\n+-+\n''') == '7'\nassert solution('''\n4 1 5 1\n-\n''') == '999999228'"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 3 3''') == '7'\nassert solution('''4 1 5 1''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(example_input_1) == '7'\nassert solution(example_input_2) == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 2 3 3\"\n    ) == \"7\"\n\nassert solution(\n    \"4 1 5 1\"\n    ) == \"999999228\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3 3\") == \"7\"\nassert solution(\"4 1 5 1\") == \"999999228\""
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2 3 3\n+-+''') == '7'\nassert solution('''\n4 1 5 1\n-''') == '999999228'\n\n'''\n[i] = s_i\n[j] = s_{j - k}\n[k] = (n + 1) // k\n[n] = (n + 1) % k\n\n[i - k] = (n - i) // k\n[j - k] = (n - i) % k\n'''\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 1 5 1\n-''') == '999999228'\nassert solution('''2 2 3 3\n+''') == '7'\nassert solution('''4 1 5 1\n+''') == '999999228'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 2') == 4\nassert solution('1 2 3 1') == 2\nassert solution('10 2 1 7') == 0"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1 1 1 2\"\n) == \"4\"\nassert solution(\n    \"1 2 3 1\"\n) == \"2\"\nassert solution(\n    \"10 2 1 7\"\n) == \"0\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1 1 2\n\n''') == 4\n\nassert solution('''1 2 3 1\n\n''') == 2\n\nassert solution('''10 2 1 7\n\n''') == 0\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\""
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 2\") == \"4\", \"First sample\"\nassert solution(\"1 2 3 1\") == \"2\", \"Second sample\""
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 2\") == '4', f'It should return 4, not {solution(\"1 1 1 2\")}'\nassert solution(\"1 2 3 1\") == '2', f'It should return 2, not {solution(\"1 2 3 1\")}'\nassert solution(\"10 2 1 7\") == '0', f'It should return 0, not {solution(\"10 2 1 7\")}'"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\nassert solution('1 1 1 2') == '1'\nassert solution('1 2 3 1') == '2'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n''') == '6'\nassert solution('''\n10 4\n''') == '134'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2\n0 1\n1 1\n2 2''') == '6'\nassert solution('''3 2\n0 0\n1 1\n2 2''') == '9'\nassert solution('''4 2\n0 0\n1 1\n2 0\n3 1''') == '5'\nassert solution('''4 2\n0 0\n1 1\n2 0\n3 1\n3 2''') == '2'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"6\"\nassert solution(\"2 1\") == \"7\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"6\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"3 2\") == \"6\""
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '6'\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"5 4\") == \"8\"\nassert solution(\"3 3\") == \"5\""
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '6'"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '6'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '6'\nassert solution('10 10') == '40'\nassert solution('10 50') == '106'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('1 2') == '1'\nassert solution('1 2 2') == '0'\nassert solution('1') == '1'\nassert solution('1 2 1 2') == '2'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == \"2\"\nassert solution('2') == \"0\"\nassert solution('3') == \"2\""
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '0'\nassert solution('3') == '1'"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1 2') == '2'\nassert solution('2\\n1 2') == '0'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\\n\") == \"2\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n1 2\n''') == '2'\nassert solution('''2\n1 2\n''') == '1'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1 2\\n') == '2'\nassert solution('2\\n1 2\\n') == '1'\nassert solution('2\\n0 1\\n') == '0'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 2 0\\n3 0 1\\n\") == \"2\"\nassert solution(\"2\\n0 2 0\\n1 0 3\\n\") == \"4\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('11') == '18'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('11') == '18'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n0 2 0\\n3 0 1\\n') == '2'\nassert solution('3\\n0 2 0\\n1 0 3\\n') == '4'\n\n\"\"\""
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"18\""
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('3') == '4'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == \"4\"\nassert solution('''\n3\n0 2 0\n1 0 3\n''') == \"18\"\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == \"41\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == \"2\"\nassert solution('''\n4\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == \"18\"\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == \"48\"\n\n\"\"\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n0 2 0\n3 0 1\n\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n0 2 0\n1 0 3\n\n\"\"\") == \"4\"\n\nprint(solution(input))\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0 2 0\\n3 0 1\\n') == '2'\n\nassert solution('11\\n0 0 0 5 0 0 0 4 0 0 11\\n9 2 6 0 8 1 7 0 3 0 10\\n') == '18'\n\n\"\"\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\nvkcup\\nvkcup\\nvkcup\") == \"YES\"\nassert solution(\"3 1\\ngfgf\\ngfgf\\ngfgf\") == \"YES\"\nassert solution(\"9 6\\ngfgf\\ngfgf\\ngfgf\") == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 10\\ncode*s\\ncodeforces') == 'YES'\nassert solution('6 5\\nvk*cup\\nvkcup') == 'YES'\nassert solution('1 1\\nv\\nk') == 'NO'"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == 'YES'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 10\ncodeforces\ncodeforces\ncodeforces\ncodeforces\nvkcup\nvkcup\n''') == 'YES'\nassert solution('''\n6 5\nvk*cup\nvkcup\n''') == 'YES'\nassert solution('''\n1 1\nv\nk\n''') == 'NO'\nassert solution('''\n9 6\ngfgf*gfgf\ngfgfgf\n''') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"YES\"\n\n'''"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\nvkcup\n''') == 'YES'\nassert solution('''\n1 1\nvk*cup\n''') == 'YES'\nassert solution('''\n1 1\nvkcup\n''') == 'YES'\nassert solution('''\n1 1\nvk*cup\n''') == 'YES'\nassert solution('''\n1 1\nvk*cup\n''') == 'YES'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n*c*c\n*a*b\n''') == 'YES'\nassert solution('''\n2 5\nvk*cup\nvkcup\n''') == 'YES'\nassert solution('''\n1 1\nv\nk\n''') == 'NO'\nassert solution('''\n9 6\ngfgf*gfgf\ngfgfgf\n''') == 'YES'\nassert solution('''\n6 10\ncodeforces\ncodeforces\n''') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"aaa*a\") == \"YES\"\nassert solution(\"aba*aba\") == \"YES\"\nassert solution(\"a*aba\") == \"YES\"\nassert solution(\"*a*b\") == \"YES\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n\") == \"YES\"\nassert solution(\"2 5\\n\") == \"YES\"\nassert solution(\"1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 10') == 'YES'\nassert solution('6 5') == 'YES'\nassert solution('1 1') == 'NO'\nassert solution('9 6') == 'NO'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0.1 0.2 0.3 0.8\\n\") == '0.800000000000'\nassert solution(\"2\\n0.1 0.2\\n\") == '0.260000000000'"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.800000000000'\nassert solution('2\\n0.1 0.2') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0.260000000000'\nassert solution('4') == '0.800000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == '0.260000000000'"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.800000000000'\nassert solution('2\\n0.1 0.2') == '0.260000000000'\n\n'''\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8') == '0.800000000000'\nassert solution('2\\n0.1 0.2') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0.260000000000'\nassert solution('2') == '0.260000000000'"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n0.1 0.2 0.3 0.8\") == '0.800000000000'\nassert solution(\"2\\n0.1 0.2\") == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0.260000000000\"\n\nassert solution(\"4\") == \"0.800000000000\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0.260000000000'\nassert solution('4') == '0.800000000000'"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10 1 2 5') == \"5.0000000000\"\nassert solution('3 6 1 2 1') == \"4.7142857143\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 10 1 2 5\\n\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\\n\") == \"4.7142857143\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10 1 2 5') == '5.0'\nassert solution('3 6 1 2 1') == '4.7142857143'"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\""
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\n\"\"\"\n\nimport math\n\nn, l, v_1, v_2, k = (int(x) for x in input().split())\n\ntime = k * l / v_1"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10 1 2 5') == '5.0'\nassert solution('3 6 1 2 1') == '4.7142857143'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10 1 2 5\\n') == '5.0000000000'\nassert solution('3 6 1 2 1\\n') == '4.7142857143'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'\nassert solution('100000000000000000 5 1 1 2 1') == '100000000000000000'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\") == \"0.250\"\nassert solution(\"3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\") == \"0.279\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0.250\"\nassert solution(\"4\") == \"0.279\""
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''\n3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''\n3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'\nassert solution('''2\n3.4\n2.1\n''') == '0.0'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\\n\") == \"0.250\"\nassert solution(\"3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\\n\") == \"0.279\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.250'\nassert solution('3') == '0.279'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3\n0.000 0.500 0.750 1.000 2.000 3.000\n\"\"\") == \"0.250\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"0.25\"\nassert solution(\"3\") == \"0.279\""
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"18\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 5\") == \"18\"\nassert solution(\"0 1\") == \"8\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == \"18\"\nassert solution(\"0 1\") == \"8\""
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5') == '8'\nassert solution('0 0') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5\\n5 2') == '18'\nassert solution('0 1\\n0 0') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 1') == '8'\nassert solution('1 0') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 5\") == \"18\"\nassert solution(\"0 1\") == \"8\"\nprint(solution())\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 5\n5 2\n''') == '18'\nassert solution('''0 1\n0 0\n''') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '8'\nassert solution('1 5\\n5 2\\n') == '18'\nassert solution('0 1\\n0 0\\n') == '8'\n\nassert solution('1 1\\n1 1\\n') == '0'\n\nassert solution('0 0\\n0 0\\n') == '0'"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100''') == \"244\":\n    print(\"test case 1 success\")\nelse:\n    print(\"test case 1 fail\")"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"10\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 4\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"10\"\nassert solution(\"10\") == \"244\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'\nassert solution('10') == '244'\nassert solution('100') == '146'\nassert solution('1000') == '1000'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 4, \"First\"\nassert solution('10') == 10, \"Second\"\nassert solution('2') == 10, \"Third\"\nprint(solution(input()))\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1''') == '4'\nassert solution('''10''') == '244'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"10\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 4\nassert solution(\"2\") == 10\n\n'''\n\nfrom itertools import product\nimport math"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"10\"\nassert solution(\"10\") == \"244\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 3\n''') == '0'\nassert solution('''4\n1 4 1 4 9\n''') == '2'\nassert solution('''5\n1 4 1 4 9\n''') == '2'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 2 3\n''') == '0'\n\nassert solution('''\n4\n1 4 1 4 9\n''') == '2'\n\nassert solution('''\n5\n1 4 1 4 9\n''') == '2'\n\nassert solution('''\n7\n1 2 3 4 5 6 7\n''') == '1'\n\nassert solution('''\n20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 3\n\n''') == '0'\n\nassert solution('''\n4\n1 1 2 2\n\n''') == '2'\n\nassert solution('''\n5\n1 4 1 4 9\n\n''') == '2'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '0'\nassert solution('4 1 4 9') == '2'\nassert solution('5 1 4 1 4 9') == '2'"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '0'\nassert solution(input(2)) == '2'\nassert solution(input(3)) == '2'"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == '2'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 0\nassert solution('4') == 2\nassert solution('5') == 2\nassert solution('6') == 2\nassert solution('7') == 2\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aaa\") == \"YES\"\nassert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n\n\n\"\"\""
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('aabc') == 'YES'\nassert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('bbb') == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aabc') == 'YES'\nassert solution('aaacc') == 'NO'\nassert solution('aaabbcc') == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"aaabccc\"\n) == \"YES\"\n\nassert solution(\n    \"bbacc\"\n) == \"NO\"\n\nassert solution(\n    \"aabc\"\n) == \"YES\"\n\n\n\"\"\""
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"2\"\n\n-------------------------------------------------------------\n\n4 3 2 5 1\n\n5 4 3 2 1\n\n1 2 5 3 4\n\n1 2 4 3 5\n\n4 2 1 3 5\n\n2 3 4 1 5\n\n4 3 2 5 1\n\n1 2 5 3 4\n\n1 3 2 4 5\n\n3 4 5 2 1\n\n2 3 4 5 1\n\n3 4 1 5 2\n\n4 5 1 3 2\n\n4 1 5 2 3\n\n4 5 3 2 1\n\n5 3 2 1 4\n\n5 2 1 4 3\n\n5 3 1 2 4\n\n5 1 4 3 2\n\n5 4 3 2 1\n\n4 2 1 5 3\n\n4 3 5 2 1\n\n5 4 2 1 3\n\n4 5 1 3 2\n\n4 5 3 2 1\n\n4 2 5 1 3\n\n5 2 3 1 4\n\n5 4 3 2 1\n\n4 5 1 2 3\n\n4 1 2 3 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n1 4 3 2 5\n\n4 3 2 1 5\n\n4 1 3 2 5\n\n1 2 3 5 4\n\n1 3 2 5 4\n\n4 2 1 3 5\n\n1 4 3 2 5\n\n4 3 2 1 5\n\n4 1 3 2 5\n\n5 3 2 1 4\n\n4 3 1 5 2\n\n4 5 1 3 2\n\n4 3 5 1 2\n\n4 5 1 3 2\n\n5 1 4 3 2\n\n5 1 3 2 4\n\n5 4 3 2 1\n\n5 3 2 1 4\n\n5 2 1 4 3\n\n5 1 4 3 2\n\n5 4 3 2 1\n\n5 1 3 2 4\n\n5 2 3 1 4\n\n5 1 2 3 4\n\n1 2 3 4 5\n\n4 1 3 2 5\n\n4 1 2 3 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5\n\n4 1 3 2 5"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) == \"2\"\nprint(solution(input_data))\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\nassert solution('5\\n4 1 3 2') == '2'\nassert solution('5\\n5 4 1 3 2') == '2'\nassert solution('5\\n5 4 3 1 2') == '2'\nassert solution('5\\n3 1 2 5 4') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n4 1 2 5 3\n''') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n4 1 2 5 3\n''') == '2'\nassert solution('''4\n4 1 3 2\n''') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2'\n\"\"\"\n\nn = int(input())\n\np = input().split()\n\np = [int(i) for i in p]\n\np.sort()\n\nfor i in range(len(p)):\n    if i == n-1:\n        print(p[i])\n        break\n    if i == 0:\n        print(p[i])\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 1\") == \"3.500000000000\"\nassert solution(\"6 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.750000000000\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == '3.500000000000'\n\n\"\"\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 1\n3.500000000000''') == '3.500000000000'\nassert solution('''6 3\n4.958333333333''') == '4.958333333333'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 1\n''') == '3.5'\nassert solution('''6 3\n''') == '4.958333333333'\nassert solution('''2 2\n''') == '1.75'"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 1') == '3.500000000000'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.750000000000'\nassert solution('7 1') == '3.7500000000000'\nassert solution('1 2') == '1.5000000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 1\") == '3.500000000000'\nassert solution(\"6 3\") == '4.958333333333'\nassert solution(\"2 2\") == '1.750000000000'"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 1''') == '3.500000000000'\nassert solution('''6 3''') == '4.958333333333'\nassert solution('''2 2''') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 1\") == \"3.5\"\nassert solution(\"6 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.75\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 1') == '3.500000000000'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 1\n\n''') == '3.500000000000'\nassert solution('''6 3\n\n''') == '4.958333333333'\nassert solution('''2 2\n\n''') == '1.750000000000'\nprint(\"Wow, that's correct!\")\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\"\nassert solution(\"1\") == \"5\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"5\"\n\"\"\"\nimport sys\nfrom typing import List\nimport math\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '5'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '5'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n-><-\n5\n>>>>>\n3''') == '5'\n\nassert solution('''4\n<--\n5\n<->\n3\n>''') == '3'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n4\n-><-\n5\n>>>>\n3\n<--\n2\n<>''') == '3'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"5\"\n\"\"\"\n\nimport sys\nimport os\nsys.path.append(os.path.dirname(__file__))\n\nimport math\nimport functools\nimport itertools\nimport time\nfrom typing import List"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n5\n-><-\n3\n>-''') == '3'\n\nassert solution('''4\n4\n-><-\n5\n>>>-''') == '0'\n\nassert solution('''4\n3\n<--\n2\n>-''') == '1'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>''') == '5'\nassert solution('''1\n1\n<>''') == '0'\nassert solution('''2\n3\n<->\n5\n<->\n1\n<->''') == '3'\nassert solution('''9\n11\n<->\n8\n<->\n7\n<->\n6\n<->\n5\n<->\n4\n<->\n3\n<->\n2\n<->\n1\n<->''') == '7'"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n\n''') == \"3\"\n\nassert solution('''\n2\n<->\n1\n<->\n\n''') == \"0\"\n\nassert solution('''\n3\n<->\n2\n<->\n\n''') == \"1\"\n\nassert solution('''\n5\n<->\n3\n<->\n2\n<->\n1\n<->\n\n''') == \"4\"\n\nassert solution('''\n4\n<->\n3\n<->\n2\n<->\n\n''') == \"3\""
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n4\\n-><-\\n5\\n>>>>>\\n3\\n<--\\n2\\n<>\") == \"3\\n5\\n3\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '16'\nassert solution('4') == '202'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '16'\nassert solution('4\\n') == '9 9 10'\nassert solution('3\\n') == '-1'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '9 9 10'"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n4 5\n4 5\n4 10\n\"\"\") == \"16\"\nassert solution(\"\"\"\n3\n1 1\n100 100\n1 1\n\"\"\") == \"202\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '9 9 10'\nassert solution('5') == '202 101 101 101 101'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1'\nassert solution('3') == '16'"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '9 9 10'"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"202\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '9 9 10'\nassert solution('5') == '101 101 101 101'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n4 5\n4 5\n4 10\n''') == '16', \"Three\"\nassert solution('''\n3\n1 1\n100 100\n1 1\n''') == '101 101 101 101', \"Three\"\nassert solution('''\n1\n1 1\n1 1\n''') == '-1', \"One\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('10') == '2'\nassert solution('5') == '1'\nassert solution('15') == '2'\nassert solution('13') == '2'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1 2 3\"\nassert solution(\"3\") == \"0 2\"\nassert solution(\"5\") == \"0 1 3\"\nassert solution(\"6\") == \"0 2 1\"\n\nstdin = \"\"\"\n7\n6\n2\n7\n1\n4\n5\n3\n\"\"\"\n\nassert solution(stdin) == \"0 2 1\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1 2 3'\nassert solution('3') == '0 1 2'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 2 3 2 2\n''') == '1 2 3'\nassert solution('''\n5\n1 2 3 2 2\n''') == '1 2 3'\nassert solution('''\n3\n1 2 3\n''') == '0 2'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 1 1 1 1') == '1 2 2 \nassert solution('3\\n1 2 3') == '0 2 \nassert solution('5\\n1 2 3 2 2') == '0 1 3 "
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '0 2'\nassert solution('5') == '0 1 3'\nassert solution('10') == '0 1 3'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"1 2 3\"\nassert solution(\"3\") == \"0 1 3\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1 2 3 2 2'\nassert solution('3') == '0 1 3'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1 2 2\"\nassert solution(\"3\\n1 2 3\") == \"0 1 3\"\n\n'''\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1 2 3 2 2\"\nassert solution(\"3\") == \"0 2\"\nassert solution(\"5\") == \"1 2 3 2 2\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10010110\n100011\n''') == '01'\nassert solution('''110\n11100\n''') == '1101'\nassert solution('''10\n11100\n''') == '01'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"1011111\"\nassert solution(input()) == \"11100\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10010110\") == \"01111010\"\nassert solution(\"10\") == \"1\"\nassert solution(\"\") == \"0\"\nassert solution(\"1\") == \"00\"\nassert solution(\"100\") == \"01\"\n\nstdin = \"10010110\"\nsolution(stdin)\nprint(stdin)\n\n\n\n---"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"11100\"\n\n\nInput\n10010110\n100011\n\nOutput\n01100011\n\nInput\n10\n11100\n\nOutput\n01\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '101101'\n) == '110110', 'Example #1'\n\nassert solution(\n    '10010110'\n) == '01100011', 'Example #2'\n\nassert solution(\n    '10'\n) == '01', 'Example #3'\n\nassert solution(\n    '11100'\n) == '100011', 'Example #4'\n\nassert solution(\n    '100101'\n) == '110110', 'Example #5'"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('101101') == '110110'\nassert solution('110') == '01100011'\nassert solution('10') == '01'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('101101') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '101101'\n) == '110110'\nassert solution(\n    '10010110'\n) == '01100011'\nassert solution(\n    '10'\n) == '01'"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10010110') == '01100011'\nassert solution('10') == '01'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''101101\n110''') == '110110'\nassert solution('''10010110\n100011\n\n''') == '01100011'\nassert solution('''10''') == '01'\nassert solution('''11100\n\n''') == '01'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\nassert solution('3 2 3') == '-1'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\nassert solution(input()) == '0'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\nassert solution(\"3 4 1\") == \"0\""
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\"\nassert solution(\"5 5 3\") == \"-1\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"3 4 1\") == \"-1\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 2') == '1', 'x'\nassert solution('3 4 1') == '0', 'x'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5 5 2\"\n    \"1 1 1 1 1\"\n    \"1 1 1 1 1\"\n    \"1 1 0 1 1\"\n    \"1 1 1 1 1\"\n    \"1 1 1 1 1\"\n) == \"1\"\nassert solution(\n    \"3 4 1\"\n    \"1 0 0 1\"\n    \"0 1 1 0\"\n    \"1 0 0 1\"\n    \"1 0 0 1\"\n    \"1 0 0 1\"\n) == \"0\""
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\nassert solution('6 3 1') == '-1'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\""
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == \"2 2 3 1 2\"\nassert solution('''3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998''') == \"9999 10000 9998\"\nassert solution('''4\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n99980000 99980000 0\n''') == \"9999 10000 9998\"\n\nassert solution('''5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == \"2 2 3 1 2\"\n\nassert solution('''3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998''') == \"9999 10000 9998\""
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '2 2 3 1 2'\nassert solution('3') == '9999 10000 9998'"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n\"\"\") == \"2 2 3 1 2\"\n\nassert solution(\"\"\"\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\n\"\"\") == \"9999 10000 9998\"\n\nassert solution(\"\"\"\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n\"\"\") == \"2 2 3 1 2\"\n\nassert solution(\"\"\"\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\n\"\"\") == \"9999 10000 9998\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\"\n) == \"2 2 3 1 2\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2 2 3 1 2'\nassert solution('4') == '2 2 3 1 2'\nassert solution('6') == '2 2 3 1 2 3'\nassert solution('3') == '2 2 3 1 2 3'\nassert solution('9') == '9999 10000 9998'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == '2 2 3 1 2'\nassert solution('''\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n''') == '9999 10000 9998'\nassert solution('''\n1\n1\n''') == '1'\nassert solution('''\n2\n1 1\n''') == '1'"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"2 2 3 1 2\"\nassert solution(\"3\") == \"2 2 3 1 2\""
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2 2 3'\nassert solution('5') == '2 2 3 1 2'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2 2 3 1 2\"\nassert solution(\"5\") == \"2 2 3 1 2\"\nassert solution(\"7\") == \"1 2 3 4 5 6 7\"\nassert solution(\"9\") == \"9 8 7 6 5 4 3 2 1\""
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == \"2 2 3 1 2\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"22\"\nassert solution(\"5\") == \"0\"\nassert solution(\"4\") == \"0\""
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"22\"\nassert solution(\"6\") == \"105\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"22\"\nassert solution(input) == \"0\"\nassert solution(input) == \"105\"\nassert solution(input) == \"0\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"22\"\nassert solution(\"5\\n\"+\"10 10\"*5+\"\\n\") == \"105\"\nassert solution(\"5\\n\"+\"11 1\"*5+\"\\n\") == \"0\""
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"22\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n10 2\n01 3\n00 3''') == '105'\nassert solution('''3\n10 1\n01 3\n00 3''') == '0'\nassert solution('''5\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9''') == '22'"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    6\n    11 6\n    10 4\n    01 3\n    00 3\n    00 7\n    00 9\n    \"\"\") == \"22\"\n\nassert solution(\n    \"\"\"\n    5\n    11 1\n    01 1\n    00 100\n    10 1\n    01 1\n    \n    \"\"\") == \"105\""
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\") == \"22\"\nassert solution(\"5\\n11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\") == \"105\"\nassert solution(\"3\\n00 5000\\n00 5000\\n00 5000\") == \"0\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n\") == \"22\"\n\nassert solution(\"5\\n11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\\n\") == \"105\"\n\nassert solution(\"3\\n00 5000\\n00 5000\\n00 5000\\n\") == \"0\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4 9\n1 3 1 2\n2 1 3\n4 3 6\n''') == 'YES'\nassert solution('''\n3 4 10\n2 3 1 2\n2 1 3\n4 3 6\n''') == 'YES'\nassert solution('''\n3 4 5\n1 3 1 2\n2 1 3\n5 3 6\n''') == 'NO'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 9') == 'YES', 'One test case'\nassert solution('3 4 10') == 'YES', 'Second test case'\nassert solution('3 4 9') == 'YES', 'Third test case'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 4 9\n1 3 1 2\n2 1 3\n4 3 6''') == 'YES'\n\nassert solution('''3 4 9\n2 3 1 2\n2 1 3\n4 3 6''') == 'YES'\n\nassert solution('''3 4 9\n1 3 1 2\n2 1 3\n4 3 6''') == 'YES'\n\nassert solution('''3 4 5\n1 3 1 2\n2 1 3\n5 3 6''') == 'NO'\n\nassert solution('''3 3 2\n1 3 1 2\n2 1 3\n4 3 6''') == 'YES'"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 4 9\n1 3 1 2\n2 1 3\n4 3 6\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n3 4 10\n2 3 1 2\n2 1 3\n4 3 6\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n3 4 5\n1 3 1 2\n2 1 3\n5 3 6\n\"\"\") == \"NO\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 5') == 'NO'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 9\") == \"NO\"\nassert solution(\"3 4 9\") == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"NO\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 9') == 'YES', '3 4 9'\nassert solution('3 4 10') == 'YES', '3 4 10'\nassert solution('3 4 9') == 'NO', '3 4 9'\nassert solution('3 4 5') == 'NO', '3 4 5'"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"4 1\") == \"YES\"\nassert solution(\"4 2\") == \"NO\""
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 1\n4 3 1 2\n3 4 2 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4 1\n4 3 1 2\n3 4 2 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4 2\n4 3 1 2\n2 1 4 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4 1\n4 3 1 2\n2 1 4 3\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n4 1\n4 3 1 2\n2 1 4 3\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 1\n2 3 4 1\n1 2 3 4\n''') == 'NO'\nassert solution('''4 1\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''4 2\n4 3 1 2\n2 1 4 3\n''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3\n''') == 'NO'\nassert solution('''4 2\n4 3 1 2\n2 1 4 3\n''') == 'NO'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 1') == 'NO'\nassert solution('4 1') == 'NO'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1\\n3 4 1\\n') == 'YES'\nassert solution('4 1\\n4 3 1 2\\n3 4 2 1\\n') == 'YES'\nassert solution('4 2\\n4 3 1 2\\n2 1 4 3\\n') == 'YES'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n4 3 1 2\\n\") == \"NO\"\nassert solution(\"3 1\\n4 3 1 2\\n\") == \"YES\"\nassert solution(\"4 1\\n4 3 1 2\\n\") == \"YES\"\nassert solution(\"3 1\\n3 2 1 2\\n\") == \"YES\"\nassert solution(\"4 1\\n4 3 1 2\\n\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"2 3 4 1\") == \"YES\"\nassert solution(\"4 3 1 2\") == \"YES\"\nassert solution(\"4 3 1 2\") == \"YES\"\nassert solution(\"2 3 4 1\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"NO\"\nassert solution(\"2 1\") == \"NO\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"4 1\") == \"YES\"\nassert solution(\"4 3\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\""
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n1 2\\n2 3') == 'YES'\nassert solution('2\\n1 3\\n2 1') == 'NO'\nassert solution('1\\n2\\n1 3\\n2 1') == 'NO'\nassert solution('2\\n3\\n1 2\\n2 1') == 'NO'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\\n1 5\\n4 4\\n\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n\"\n\n\n\n'''\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n') == '1 1\\n3 1\\n1 5\\n4 4\\n'\nassert solution('7\\n') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 1\n3 1\n1 5\n4 4\n''') == '1 1\\n3 1\\n1 5\\n4 4\\n'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1 1\\n3 1\\n1 5\\n4 4\\n'\n\n'''\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n') == '1 1\\n3 1\\n1 5\\n4 4'\nassert solution('7\\n') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6'\n\n\"\"\""
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6\n2 2\n4 1\n5 2\n6 4\n7 4\n''') == '''2 1\n3 1\n4 1\n5 2\n6 4\n'''\nassert solution('''8\n3 3\n3 4\n2 3\n1 2\n4 5\n1 5\n5 3\n''') == '''1 2\n2 1\n4 1\n5 2\n6 3\n7 4\n'''\n\nfrom collections import Counter\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n''') == '1 1\\n3 1\\n1 5\\n4 4\\n'''\nassert solution('''7\n''') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'''\nassert solution('''12\n''') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'''\nassert solution('''13\n''') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'''\nassert solution('''14\n''') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'''\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '1 1\\n3 1\\n1 5\\n4 4\\n'\nassert solution('7') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\\n1 5\\n4 4\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\""
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n3 1\n4 1''') == '1 1 3 2\\n1 2 2 2\\n1 3 2 2\\n2 2 3 3\\n3 1 2 2\\n3 2 2 2\\n4 1 2 2\\n4 2 2 3 3\\n'''"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '-1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"7\") == \"3\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1\\n\") == \"3\"\nassert solution(\"3\\n1 2 3\\n\") == \"3\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"3 2 1\") == \"2\"\nassert solution(\"3 2 1 5\") == \"2\"\nassert solution(\"3 2 1 5 6\") == \"3\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '-1'\nassert solution('3') == '3'"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"1 2 3\") == \"3\"\nprint(solution(input()))"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 2 3\n''') == '3'\nassert solution('''\n4\n1 2 3 2\n''') == '4'\nassert solution('''\n10\n1 1 2 2 1 2 1 2 2 1\n''') == '8'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n2 1 1\n\n''') == '3'\nassert solution('''\n3\n1 2 3\n\n''') == '-1'\nassert solution('''\n4\n1 2 3 1\n\n''') == '5'\nassert solution('''\n5\n1 2 3 2 1\n\n''') == '5'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == -1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 3\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2018 214\") == \"3 2 0 0 1 1 1\"\nassert solution(\"46 2\") == \"7 0 1 0 1 1 1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('46 2') == '7'\nassert solution('2018 214') == '3'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == '-1'\nassert solution('1') == '1'\nassert solution('1 2') == '1 2'\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 3 4') == '1 2 3 4'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n46 2\n\n''') == '7'\n\nassert solution('''\n2018 214\n\n''') == '92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '-1'\nassert solution('1 2') == '3'\nassert solution('2018 214') == '3'\nassert solution('46 2') == '7'\nassert solution('46 2') == '92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''46 2\n''') == '7\\n0 1 0 0 1 1 1'''\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"7\"\nassert solution(\"7 7\") == \"12\"\nassert solution(\"5 3\") == \"0 1 1 1 1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"46 2\") == \"7 0 1 0 0 1 1 1\"\n\nassert solution(\n    \"2018 214\") == \"3 92 205 1\""
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''46 2''') == '7'\nassert solution('''2018 214''') == '92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '7'\nassert solution(input) == '92 205 1'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 20 20\n6 2\n1 3\n2 6\"\"\") == \"5.000000000000000\"\nassert solution(\"\"\"4 1 1\n2 3\n3 2\n2 3\n3 2\"\"\") == \"0.400000000000000\"\nassert solution(\"\"\"4 1 2\n2 3\n3 2\n2 3\n3 2\"\"\") == \"3.999999999999999\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\nassert solution('''\n4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\n''')\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 20 20\n6 2\n1 3\n2 6\n\"\"\") == '5.000000000000000'\n\nassert solution(\"\"\"\n4 1 1\n2 3\n3 2\n2 3\n3 2\n\"\"\") == '0.400000000000000'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\nassert solution('''3 5 5\n3 1\n4 3\n4 5\n''') == '3.400000000000000'\nassert solution('''3 2 2\n2 3\n1 2\n1 2\n''') == '0.400000000000000'\nassert solution('''3 2 2\n2 3\n1 2\n1 2\n''') == '0.400000000000000'\n'''\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\n\nassert solution('''\n4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\n'''\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '4.000000'\nassert solution('4 5 6') == '3.83333'\nassert solution('3 3 3') == '3.75000'\nassert solution('4 4 4') == '3.75000'\n\n\"\"\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 20 20\n2 3\n3 2\n''') == '5.000000000000000'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 20 20\n6 2\n1 3\n2 6\n\n''') == '5.000000000000000'\nassert solution('''4 1 1\n2 3\n3 2\n2 3\n3 2\n\n''') == '0.400000000000000'''\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 20 20') == '5.000000000000000'\nassert solution('4 1 1') == '0.400000000000000'\n\"\"\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n20 20\n6 2\n1 3\n2 6\n\"\"\") == \"5.000000000000000\"\n\nassert solution(\"\"\"\n3\n20 20\n6 2\n1 3\n2 6\n\"\"\") == \"5.000000000000000\"\n\nassert solution(\"\"\"\n1\n1 1\n1 2\n\"\"\") == \"2.00000000000000\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'\n\n\n\"\"\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'\n\"\"\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\n\n''') == '4'\nassert solution('''8 2\n\n''') == '5'\nassert solution('''1 3\n\n''') == '0'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '4'"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([2, 3]) == 4\nassert solution([8, 2]) == 5\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([2, 3]) == \"4\"\nassert solution([8, 2]) == \"5\"\n\nimport itertools\nimport math\nimport operator\n\nfor i in range(2, 10):\n    for j in range(2, 10):\n        for k in itertools.product(range(10), repeat=i):\n            print(k)\n            print(int(\"\".join(map(str, k))))"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '4'\nassert solution('8 2') == '5'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\n\n'''\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == \"4\"\nassert solution('8 2') == \"5\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n4 5 7\\n') == 'Conan'\nassert solution('2\\n1 1\\n') == 'Agasa'"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n4 5 7') == 'Conan', 'first'\nassert solution('2\\n1 1') == 'Agasa','second'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n6 5 4\") == \"Agasa\"\nassert solution(\"3\\n4 2 1\") == \"Conan\"\nassert solution(\"2\\n8 9 8\") == \"Conan\"\n\n\n'''"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 5 7\") == \"Conan\"\nassert solution(\"2\\n1 1\") == \"Agasa\""
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n4 5 7\\n') == 'Conan'\nassert solution('2\\n1 1\\n') == 'Agasa'"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"Conan\"\nassert solution(\"4 5 7\") == \"Conan\"\nassert solution(\"2 1\") == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n4 5 7\n\n''') == 'Conan'\n\nassert solution('''2\n1 1\n\n''') == 'Agasa'\n\nassert solution('''1\n1\n\n''') == 'Agasa'\n\nassert solution('''4\n1 5 7\n\n''') == 'Conan'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1 1\n''') == 'Conan'\nassert solution('''3\n4 5 7\n''') == 'Conan'\nassert solution('''3\n3 4 7\n''') == 'Agasa'\nassert solution('''4\n1 2 3\n''') == 'Agasa'\nassert solution('''6\n7 1 9 2 3\n''') == 'Conan'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"Agasa\"\nassert solution(\"1\") == \"Conan\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 5 7\n3 4 6\n''') == 'Agasa'\nassert solution('''1 1\n2 2\n''') == 'Conan'\nassert solution('''3\n3\n3\n''') == 'Agasa'\nassert solution('''3\n5\n5\n''') == 'Conan'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '3 3'\n\n'''"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('2 3') == '3 2'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"3 3\"\nassert solution(input(\"\")) == \"3 3\"\nassert solution(input(\"2 3\\n\")) == \"3 3\"\nassert solution(input(\"1 2\\n\")) == \"2 2\"\n\n\"\"\""
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n') == '3 3\\n'\nassert solution('1 2\\n') == '1 2\\n'\n\nimport unittest\n\nfrom typing import List, Any\nfrom collections import deque\n\nstdin = '1 2\\n'\n\nclass Test(unittest.TestCase):\n    def test(self):\n        pass\n    \n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([1, 2]) == '##.\\n.##\\n##.#'\n\"\"\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"###\\n##.\\n###\"\nassert solution(\"2 3\") == \"###\\n##.\\n###\"\nassert solution(\"5 2\") == \"#####\\n#####\\n#####\\n#####\\n#####\\n#####\"\n\"\"\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '####\\n####\\n###.'\n\"\"\"\nfrom typing import List\nimport itertools\nimport sys\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n\") == \"3 3\"\nassert solution(\"1 1\\n\") == \"1 1\"\nassert solution(\"6 5\\n\") == \"4 4\"\nassert solution(\"2 2\\n\") == \"4 4\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '3 3'\nassert solution('10 10') == '10 10'\nassert solution('1 1') == '1 1'\n\n'''\n\nimport sys\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '2'\nassert solution('2 4') == '0'\nassert solution('5 6') == '3'\nassert solution('1 3 2 4 3 5 2 6 5 7 2') == '3 2 3 4 5 6 7'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4\n+ 1\n+ 2\n- 2\n- 1\n''') == '4'\nassert solution('''3 2\n+ 1\n- 2\n+ 2\n- 1\n''') == '3'\nassert solution('''2 4\n+ 1\n- 2\n+ 2\n- 1\n''') == '0'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"3 2\") == \"1 2\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"5 5\") == \"0\"\n\nstdin = \"\"\"\n5 4\n+ 1\n- 2\n- 1\n+ 2\n+ 3\n- 4\n\"\"\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"4\""
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n\") == \"4\\n1 3 4 5\"\nassert solution(\"3 2\\n\") == \"3\\n3 1 2\"\nassert solution(\"2 4\\n\") == \"0\"\nassert solution(\"5 6\\n\") == \"3\\n2 3 5\"\nassert solution(\"2 4\\n\") == \"0\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '3'\nassert solution('2 4') == '0'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4\\n+ 1') == '4'\nassert solution('3 2\\n+ 1') == '1 3'\nassert solution('2 4\\n+ 1') == '0'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4\n+ 1\n- 2\n- 1\n+ 2''') == '4 1 3 4'\nassert solution('''2 4\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n3\n2 3 5 \nInput\n2 4\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n0\n''') == '0'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"3 2\") == \"3\"\n\nassert solution(\"6 4\") == \"0\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n\") == \"4\\n1 3 4 5\"\nassert solution(\"3 2\\n\") == \"1 3 5\"\nassert solution(\"2 4\\n\") == \"0\"\nassert solution(\"5 6\\n\") == \"3\"\nassert solution(\"3 2\\n\") == \"1 3 5\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"5 1\") == \"0\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1') == '1'\nassert solution('3 3') == '4'\nassert solution('5 1') == '1'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"5 2\") == \"0\""
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3, 3], [1, 2, 3], 9) == \"4\"\nassert solution([5, 1], [5, 4, 2, 4, 5], 5) == \"1\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '4'\nassert solution('5 1') == '1'\nassert solution('5 2') == '0'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 1\n5 4 2 4 5\n2''') == '1'\n\nassert solution('''5 3\n1 2 3\n1 2 3\n9\n\n''') == '4'\n\nassert solution('''6 5\n2 4 1 5 3 6\n3 6 1 2 3\n8 9 4 3 2\n10 11 5 2\n12 13 7 4\n15 14 7 6\n''') == '1'\n\nassert solution('''2 7\n3 2 3 2 3 2 2 3\n2 2\n6 8\n\n''') == '0'\n\nassert solution('''3 3\n4 4 5 5\n1 1 2 2\n2 3 3 3\n3 2 2 2\n4 3\n\n''') == '1'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 2 3\n1 2 3\n9\n\n''') == '4'\n\nassert solution('''5 1\n5 4 2 4 5\n2\n5\n\n''') == '1'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == \"4\"\nassert solution('5 1') == \"1\"\nassert solution('5 1') == \"0\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1') == '1', 'Wrong answer'\nassert solution('3 3') == '4', 'Wrong answer'\nassert solution('5 1') == '1', 'Wrong answer'\nassert solution('5 1') == '0', 'Wrong answer'\nassert solution('6 4 4') == '5', 'Wrong answer'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(['3', '2', '3', '1', '2', '3', '4', '5']) == '1'\nassert solution(['5', '5', '2', '3', '3', '3', '1', '2']) == '4'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\ncba\n''') == 'NO'\nassert solution('''\n3 4\ncba\n''') == 'cbd'\nassert solution('''\n4 4\nabcd\n''') == 'abda'\nassert solution('''\n5 5\na'b\n''') == 'aab'"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 4') == 'cbd'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 4') == 'cbd'\nassert solution('4 4') == 'abda'\nassert solution('10 10') == 'NO'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 'NO'"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'NO'"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"abda\"\nassert solution(\"4 4\") == \"abda\"\nassert solution(\"10 6\") == \"abdab\"\nassert solution(\"11 7\") == \"abdab\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\ncba\n\nOutput\ncbd\n''') == \"NO\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('4 4') == 'abda'\nassert solution('5 5') == 'abcd'"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3\ncba''') == 'NO'\n\nassert solution('''3 4\ncba''') == 'cbd'\n\nassert solution('''4 4\nabcd''') == 'abda'\n\nassert solution('''5 5\nabcde''') == 'abdea'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"cbd\"\nassert solution(\"4 4\") == \"abda\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"quailty\"\nassert solution(\"6 1\") == \"once again\"\nassert solution(\"4 1\") == \"tokitsukaze\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 1\n0101\n\n''') == \"tokitsukaze\"\n\nassert solution('''\n6 5\n010101\n\n''') == \"quailty\"\n\nassert solution('''\n4 1\n0011\n\n''') == \"once again\"\n\nassert solution('''\n4 1\n00011\n\n''') == \"once again\"\n\nassert solution('''\n8 1\n00000101\n\n''') == \"tokitsukaze\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"quailty\"\nassert solution(input()) == \"tokitsukaze\"\nassert solution(input()) == \"once again\"\n\n'''\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"tokitsukaze\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n11111\") == \"tokitsukaze\"\nassert solution(\"6 1\\n010101\") == \"quailty\"\nassert solution(\"6 5\\n010101\") == \"once again\"\nassert solution(\"4 1\\n0011\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"once again\"\nassert solution(\"6 1\") == \"tokitsukaze\"\nassert solution(\"6 5\") == \"quailty\"\n\n\"\"\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == 'tokitsukaze'\nassert solution('6 1') == 'quailty'\nassert solution('6 5') == 'once again'\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == \"tokitsukaze\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"tokitsukaze\"\nassert solution(\"5 1\") == \"tokitsukaze\"\nassert solution(\"6 1\") == \"quailty\"\nassert solution(\"6 5\") == \"quailty\"\nassert solution(\"6 1\") == \"tokitsukaze\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_value) in (input_value.replace(\"once again\", \"tokitsukaze\"), input_value.replace(\"once again\", \"quailty\"))\n\"\"\""
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4 50') == '50'\nassert solution('1 2 10') == '7'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 50\\n20 100\\n60 10 40 80\\n') == '50'\nassert solution('1 2 10\\n11\\n15 7\\n') == '7'"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 10\") == \"7\"\nassert solution(\"1 2 10\") == \"7\""
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 50') == '50'\nassert solution('1 2 10') == '7'\nassert solution('3 7 10') == '5'\nassert solution('4 5 10') == '6'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\\n\") == \"50\"\nassert solution(\"1 2 10\\n11\\n15 7\\n\") == \"7\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\"\nassert solution(\"1 1 1\") == \"1\""
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 10\n11\n15 7\n''') == \"7\"\nassert solution('''\n1 1 1\n''') == \"1\"\nassert solution('''\n2 5 2\n5 1 2\n1 4 3\n''') == \"9\"\nassert solution('''\n3 2 5\n2 2 3\n3 4 5\n''') == \"10\""
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\""
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4 50\\n20 100\\n60 10 40 80\") == \"50\"\nassert solution(\"1 2 10\\n11\\n15 7\") == \"7\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3\\n1 1\\n\"\n) == \"1 6\"\nassert solution(\n    \"3 2\\n0 0\\n\"\n) == \"1 3\"\nassert solution(\n    \"1 10\\n5 3\\n\"\n) == \"5 5\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3\n1 1\n''') == '1 6'\nassert solution('''\n3 2\n0 0\n''') == '1 3'\nassert solution('''\n1 10\n5 3\n''') == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3') == '1 6'\nassert solution('2 3') == '1 6'\nassert solution('1 10') == '1 10'\nassert solution('3 2') == '1 6'\nassert solution('1 100') == '1 101'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\n1 1\n''') == '1 6'\nassert solution('''3 2\n0 0\n''') == '1 3'\nassert solution('''1 10\n5 3\n''') == '5 5'"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n1 1\n\n''') == '1 6'\n\nassert solution('''\n2 3\n0 0\n\n''') == '1 3'"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n1 1\n''') == '1 6'\nassert solution('''\n3 2\n0 0\n''') == '1 3'\nassert solution('''\n1 10\n5 3\n''') == '5 5'\n\nprint(solution('''\n3 2\n0 0\n'''))"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n1 1\n''') == '1 6'\nassert solution('''\n3 2\n0 0\n''') == '1 3'\nassert solution('''\n1 10\n5 3\n''') == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1 6'\nassert solution('3 2') == '1 3'\nassert solution('1 10') == '5 5'\nassert solution('1 100') == '5 5'\nassert solution('1 100000') == '5 5'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n-2 5 -1''') == '2'\nassert solution('''4\n-2 5 -1 -4''') == '3'\nassert solution('''3\n-2 5 6''') == '2'\nassert solution('''3\n-2 5 4''') == '3'\nassert solution('''2\n5 3''') == '1'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n-2 5 -1\n''') == '2 2 3'\nassert solution('''\n5\n-2 -5 -1 -3 -1\n''') == '1 1 3 3'\nassert solution('''\n5\n-2 -5 -1 -3 -1\n-3 -1\n''') == '2 2 3 3'\n'''\n-2 -5 -1 -3 -1\n2 3\n3 3\n'''\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2 3\""
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('3 -2 5 -1') == '2 3'\nassert solution('3 -1 -1') == '2 1'\nassert solution('5') == '1'\nassert solution('5 -1') == '4'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n-2 5 -1\n''') == '2 2 3'\nassert solution('''\n3\n-2 5\n''') == '2 2 3'\nassert solution('''\n3\n-2 5 6\n''') == '3 3 3'\nassert solution('''\n5\n-1 -3 -2 5\n''') == '2 2 2 2 3'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '2 2'\nassert solution('5') == '2 3 1 2'\nassert solution('6') == '2 4 2 3 2'\nassert solution('7') == '3 3 1 3'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2 3'\n\"\"\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == '2'\nassert solution('3') == '2 3'\nassert solution('5') == '2 3 5'\nassert solution('6') == '2 3 6'\nassert solution('6') == '2 3 6'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n0 3\n1 5\n''') == '3'\n\nassert solution('''\n1\n0 4\n''') == '1'\n\nassert solution('''\n2\n1 10\n2 2\n''') == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0 3\") == \"3\"\nassert solution(\"1 5\") == \"4\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 10\") == \"3\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''0 1\n1 2''') == '3'\n\nassert solution('''1 1\n1 3''') == '2'\n\nassert solution('''2 2\n2 2\n1 1''') == '3'\n\n\n\n'''\n\nfrom math import log\nfrom math import ceil\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 3\n1 5\n''') == '3'\nassert solution('''\n1 10\n2 2\n''') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([0,3]) == \"3\"\nassert solution([1,5]) == \"1\"\nassert solution([2,4]) == \"3\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '1'\nassert solution('2') == '3'"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '1'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 0 3\n1 5\n''') == '3'\nassert solution('''\n2\n1 10\n2 2\n''') == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\nassert solution([0, 3]) == \"3\"\nassert solution([1, 5]) == \"1\"\nassert solution([2, 10]) == \"3\""
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 50\n25 25 50\n''') == '0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 \n\nassert solution('''\n2 5\n10 25\n
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 18\") == \"16\"\nassert solution(\"3 50\") == \"3 0 25 50\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"16\"\nassert solution(\"3 50\\n\") == \"3\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n6 18\n5 6 1 10 12 2\n\"\"\") == \"16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 \nassert solution(\"\"\"\n3 50\n25 25 50\n\"\"\") == \"3 0 25 50\nassert solution(\"\"\"\n6 18\n7 9 12 3 9 4 6 9 5\n\"\"\") == \"1 8 9\""
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 18\\n5 6 1 10 12 2\") == \"16\\n0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18\"\nassert solution(\"6 12\\n2 3 5 6 7 8 9 10 11\") == \"8\"\nassert solution(\"10 10\\n1 2 3 4 5 6 7 8 9\") == \"8\"\nassert solution(\"8 10\\n1 2 3 4 5 6 7 8 9\") == \"6\"\nassert solution(\"8 10\\n1 2 3 4 5 6 7 8 9\") == \"10\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 6 1 10 12 2\n    ''') == '16\n    \nassert solution('''6 18\n    5 6 1 10 12 2\n    ''') == '0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 \n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 18\n5 6 1 10 12 2\n''') == '16\\n0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 '\nassert solution('''3 50\n25 25 50\n''') == '3\\n0 25 50'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 6 1 10 12 2\n6 8 10 14 16 17 18''') == '16 17 18'''\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 18\n5 6 1 10 12 2\n''') == '16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 \nassert solution('''\n3 50\n25 25 50\n''') == '3 0 25 50\n''')\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '16'\nassert solution(input()) == '0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\\n\") == \"3\\n\"\nassert solution(\"2\\n\") == \"2\\n\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n''') == '3'\nassert solution('''\n2\n''') == '2'\nassert solution('''\n10\n''') == '4'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n') == '3'\nassert solution('2\\n') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n''') == '1'\nassert solution('''1\n''') == '1'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n''') == '2'\nassert solution('''\n5\n''') == '1'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n''') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '180'\nassert solution('1') == '50'\nassert solution('1') == '50'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '180'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '180'\nassert solution('3') == '180'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n10 1\\n20 2\\n30 3\") == \"180\"\nassert solution(\"1\\n3 1\\n2 2\\n4 3\") == \"21\"\nassert solution(\"1\\n1 1\\n2 2\\n3 3\") == \"50\""
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '180'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '180'\nassert solution(r\"4 3\\n3 1\\n2 2\\n4 3\") == '21'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n5 2\n4 5''') == \"20\"\n\nassert solution('''5\n4 4\n4 5\n3 4\n5 5\n2 3''') == \"80\"\n\nassert solution('''4\n6 3\n5 2\n4 5\n2 4\n1 4''') == \"66\"\n\nassert solution('''4\n10 10\n10 10\n10 10\n10 10''') == \"65\"\n\nassert solution('''1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"180\""
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n10 1\n20 2\n30 3\n''') == '180'\nassert solution('''3\n3 1\n2 2\n4 3\n''') == '21'\nassert solution('''1\n5 10\n''') == '50'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3 1\n2 2\n4 3\n''') == '180'\nassert solution('''3\n3 1\n2 2\n4 3\n''') == '21'\nassert solution('''\n1\n5 10\n''') == '50'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n0 0 10\n''') == '2'\nassert solution('''5\n0 1 2 3 4\n''') == '1'\nassert solution('''4\n0 0 0 0\n''') == '4'\nassert solution('''9\n0 1 0 2 0 1 1 2 10\n''') == '3'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n0 0 10\n''') == '2'\nassert solution('''5\n0 1 2 3 4\n''') == '1'\nassert solution('''4\n0 0 0 0\n''') == '4'\nassert solution('''9\n0 1 2 3 4 5 6 7 8 9\n''') == '4'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 0 10\n''') == '2'\n\nassert solution('''\n5\n0 1 2 3 4\n''') == '1'\n\nassert solution('''\n4\n0 0 0 0\n''') == '4'\n\nassert solution('''\n9\n0 1 2 3 4 5 6 7 8\n''') == '3'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0 10\\n\") == \"2\"\nassert solution(\"5\\n0 1 2 3 4\\n\") == \"1\"\nassert solution(\"4\\n0 0 0 0\\n\") == \"4\"\nassert solution(\"9\\n0 1 0 2 0 1 1 2 10\\n\") == \"3\"\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n0 0 10\n''') == \"2\"\nassert solution('''\n4\n0 1 2 3 4\n''') == \"1\"\nassert solution('''\n9\n0 1 2 3 4 5 6 7 8\n''') == \"3\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n0 1 2 3 4\n''') == '1'\nassert solution('''4\n0 0 0 0\n''') == '4'\nassert solution('''9\n0 1 2 3 4 5 6 7 8\n''') == '3'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('4') == '4'\nassert solution('5') == '1'\nassert solution('9') == '3'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n0 0 10\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n0 1 2 3 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n0 0 0 0\n\"\"\") == \"4\"\n\n\"\"\"\n= RESTART: /home/lixiny/projects/algo/solutions/solutions_python/pile_of_boxes.py =\n3\n0 0 10\n\n4\n0 0 0 0\n\n5\n0 1 2 3 4\n\n2\n\n\"\"\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 1\n1 0\n1 2\n0 1\n2 1''') == '5'"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n0 0\n0 1\n1 0\n1 1\n''') == '1'\nassert solution('''2\n0 0\n0 1\n1 1\n''') == '2'\nassert solution('''1\n1 1\n''') == '4'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\\n\") == \"5\"\nassert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\\n\") == \"10\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n0 0\n0 1\n1 0\n1 1\n5''') == '6'\nassert solution('''5\n0 0\n0 1\n1 0\n1 1\n1 1''') == '7'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n0 0\n0 1\n1 0\n1 1\n\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '5'\nassert solution('10\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '8'\nassert solution('12\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '0'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"2 1 3\") == \"8\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"5\"\nassert solution(\"\"\"\n4\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '4'\nassert solution('3') == '4'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '4'\nassert solution('4') == '5'\n\"\"\""
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '4'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '4'\nassert solution('12') == '13'\nassert solution('1') == '1'\nassert solution('111') == '101'\n\n(\uc124\uba85)\n\uc0ac\uc2e4 'W' \uac00 \uc5ec\ub294 \uc0c1\ud0dc\uc774\uace0 'B' \uac00 \uc788\uc744 \uc218\ub3c4 \uc788\ub2e4.\n\uc5ec\uae30\uc11c \uc6d0\ud558\ub294 \uc791\uc5c5\uc744 \uace0\ubbfc\ud588\ub294\ub370, \uc6b0\uc120\uc801\uc73c\ub85c \uac00\ub2a5\ud55c \ubb38\uc81c\ub97c \ud478\ub294 \uac83\uc774 \uc911\uc694\ud558\ub2e4.\n\uc791\uc5c5\uc744 \ud558\uba74 \ud3b8\ud560 \uac83\uc774\ub2e4.\n\uc5ec\uae30\uc11c \uc6b0\uc120\uc801\uc73c\ub85c \uac00\ub2a5\ud55c \ubb38\uc81c\ub97c \ud478\ub294 \ucf54\ub4dc\ub97c \ubcf4\uba74,\n(a_i,c_i) = (a_j,c_j) \uc778 \uac83\uc740 (a_j,c_j)\uac00 \uac00\ub2a5\ud558\ub2e4.\n\uadf8\ub7f0\ub370 \uc774\ubc88\uc5d0\ub294 (a_i,c_i) = (a_j,c_j) \uc758 \uc791\uc5c5\uc73c\ub85c \uc6d0\ud558\ub294 \uc791\uc5c5\uc744 \ud574\uc57c\ub9cc \ud55c\ub2e4.\n\ub530\ub77c\uc11c, (a_i,c_i) = (a_j,c_j)\ub97c \uc6d0\ud558\ub294 \uc791\uc5c5\uc73c\ub85c \uc124\uc815\ud558\ub294 \uac83\uc774 \uc911\uc694\ud558\ub2e4.\n\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\n''') == '4'\n\ninput_str = input()\nn = int(input_str)\n\ncolors = list(input_str)\n\ncolors_dict = {}\n\nfor color in colors:\n    if color == \"W\":\n        colors_dict[\"W\"] = colors_dict.get(\"W\", 0) + 1\n    elif color == \"B\":\n        colors_dict[\"B\"] = colors_dict.get(\"B\", 0) + 1"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"3\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '4'\nassert solution('5') == '4'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n') == '4'\nassert solution('3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n') == '4'\nassert solution('10\\nB 1\\nB 2\\nW 1\\nW 2\\nW 3\\nW 4\\nW 5\\nW 6\\nW 7\\nW 8\\nW 9\\nW 10\\nB 11\\nB 12\\nW 11\\nW 12\\nW 13\\nW 14\\nW 15\\nW 16\\nW 17\\nW 18\\nW 19\\nW 20\\nB 21\\nB 22\\nW 21\\nW 22\\nW 23\\nW 24\\nW 25\\nW 26\\nW 27\\nW 28\\nW 29\\nW 30\\nB 31\\nB 32\\nW 31\\nW 32\\nW 33\\nW 34\\nW 35\\nW 36\\nW 37\\nW 38\\nW 39\\nW 40\\nW 41\\nB 42\\nB 43\\nW 42\\nW 43\\nW 44\\nW 45\\nW 46\\nW 47\\nW 48\\nW 49\\nW 50\\nB 51\\nB 52\\nW 51\\nW 52\\nW 53\\nW 54\\nW 55\\nW 56\\nW 57\\nW 58\\nW 59\\nW 60\\nB 61\\nB 62\\nW 61\\nW 62\\nW 63\\nW 64\\nW 65\\nW 66\\nW 67\\nW 68\\nW 69\\nW 70\\nW 71\\nW 72\\nW 73\\nW 74\\nW 75\\nW 76\\nW 77\\nW 78\\nW 79\\nW 80\\nB 81\\nB 82\\nW 81\\nW 82\\nW 83\\nW 84\\nW 85\\nW 86\\nW 87\\nW 88\\nW 89\\nW 90\\nW 91\\nW 92\\nW 93\\nW 94\\nW 95\\nW 96\\nW 97\\nW 98\\nW 99\\nW 100\\nB 101\\nB 102\\nW 101\\nW 102\\nW 103\\nW 104\\nW 105\\nW 106\\nW 107\\nW 108\\nW 109\\nW 110\\nW 111\\nW 112\\nW 113\\nW 114\\nW 115\\nW 116\\nW 117\\nW 118\\nW 119\\nW 120\\nW 121\\nW 122\\nW 123\\nW 124\\nW 125\\nW 126\\nW 127\\nW 128\\nW 129\\nW 130\\nW 131\\nW 132\\nW 133\\nW 134\\nW 135\\nW 136\\nW 137\\nW 138\\nW 139\\nW 140\\nW 141\\nW 142\\nW 143\\nW 144\\nW 145\\nW 146\\nW 147\\nW 148\\nW 149\\nW 150\\nW 151\\nW 152\\nW 153\\nW 154\\nW 155\\nW 156\\nW 157\\nW 158\\nW 159\\nW 160\\nW 161\\nW 162\\nW 163\\nW 164\\nW 165\\nW 166\\nW 167\\nW 168\\nW 169\\nW 170\\nW 171\\nW 172\\nW 173\\nW 174\\nW 175\\nW 176\\nW 177\\nW 178\\nW 179\\nW 180\\nW 181\\nW 182\\nW 183\\nW 184\\nW 185\\nW 186\\nW 187\\nW 188\\nW 189\\nW 190\\nW 191\\nW 192\\nW 193\\nW 194\\nW 195\\nW 196\\nW 197\\nW 198\\nW 199\\nW 200\\nW 201\\nB 202\\nB 203\\nW 202\\nW 203\\nW 204\\nW 205\\nW 206\\nW 207\\nW 208\\nW 209\\nW 210\\nW 211\\nW 212\\nW 213\\nW 214\\nW 215\\nW 216\\nW 217\\nW 218\\nW 219\\nW 220\\nW 221\\nW 222\\nW 223\\nW 224\\nW 225\\nW 226\\nW 227\\nW 228\\nW 229\\nW 230\\nW 231\\nW 232\\nW 233\\nW 234\\nW 235\\nW 236\\nW 237\\nW 238\\nW 239\\nW 240\\nW 241\\nW 242\\nW 243\\nW 244\\nW 245\\nW 246\\nW 247\\nW 248\\nW 249\\nW 250\\nW 251\\nW 252\\nW 253\\nW 254\\nW 255\\nW 256\\nW 257\\nW 258\\nW 259\\nW 260\\nW 261\\nW 262\\nW 263\\nW 264\\nW 265\\nW 266\\nW 267\\nW 268\\nW 269\\nW 270\\nW 271\\nW 272\\nW 273\\nW 274\\nW 275\\nW 276\\nW 277\\nW 278\\nW 279\\nW 280\\nW 281\\nW 282\\nW 283\\nW 284\\nW 285\\nW 286\\nW 287\\nW 288\\nW 289\\nW 290\\nW 291\\nW 292\\nW 293\\nW 294\\nW 295\\nW 296\\nW 297\\nW 298\\nW 299\\nW 300\\nW 301\\nW 302\\nW 303\\nW 304\\nW 305\\nW 306\\nW 307\\nW 308\\nW 309\\nW 310\\nW 311\\nW 312\\nW 313\\nW 314\\nW 315\\nW 316\\nW 317\\nW 318\\nW 319\\nW 320\\nW 321\\nW 322\\nW 323\\nW 324\\nW 325\\nW 326\\nW 327\\nW 328\\nW 329\\nW 330\\nW 331\\nW 332\\nW 333\\nW 334\\nW 335\\nW 336\\nW 337\\nW 338\\nW 339\\nW 340\\nW 341\\nW 342\\nW 343\\nW 344\\nW 345\\nW 346\\nW 347\\nW 348"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '4'\nassert solution('3') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"4\"\nassert solution(sys.stdin.read()) == \"4\""
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n6\n3\n''') == '4'\n\nassert solution('''\n5\n3\n5\n''') == '4'\n\nassert solution('''\n5\n3\n5\n''') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n6\n3''') == '4'\nassert solution('''5\n3\n5''') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n6\\n3') == '4'\nassert solution('5\\n3\\n5') == '4'\nassert solution('1\\n3\\n1') == '0'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"5\") == \"4\"\nassert solution(\"5\") == \"4\"\nassert solution(\"5\") == \"4\""
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n6\n3''') == '4'\nassert solution('''5\n3\n5''') == '4'\nassert solution('''5\n4\n5''') == '3'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '4'\nassert solution('6') == '5'\nassert solution('3') == '2'"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '4'\nassert solution('8') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n4 2\\n\") == \"2\"\nassert solution(\"8\\n1 2 4 8 16 32 64 576\\n\") == \"32\"\nassert solution(\"3\\n3 3 3\\n\") == \"3\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"32\"\nassert solution() == \"2\""
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '2'\n) == '2'\nassert solution(\n    '4 2'\n) == '4'\nassert solution(\n    '8 1 2 4 8 16 32 64 576'\n) == '32'\nassert solution(\n    '6 7 8 9 10 11 12 13 14 15'\n) == '15'\nassert solution(\n    '10 10 11 12 13 14 15 16 17 18'\n) == '18'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('8') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '2'\nassert solution('8 1 2 4 8 16 32 64 576') == '32'"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('8') == '32'\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n4 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n8\n1 2 4 8 16 32 64 576\n\"\"\") == \"32\"\nassert solution(\"\"\"\n4\n2 2 4 4\n\"\"\") == \"4\"\n\n\n\"\"\"\nYou've got this problem!\n\nGiven an array of integers, return the largest number in the array that is not the sum of a perfect square.\n\nFor example, given the array [8, 15, 3, 4], you should return the number 15. Given the array [-8, -15, -3, -4], you should return the number 4.\n\nYou can't use any built-in square number data structure or mathematical functions that you use in this Kata.\n\n\"\"\""
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n\") == \"2\"\nassert solution(\"8 1 2 4 8 16 32 64 576\\n\") == \"32\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"50 2\") == \"3\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(example_input_1) == '2'\nassert solution(example_input_2) == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"7 4\") == \"1\""
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n100 300 450 500\") == \"2\"\nassert solution(\"50 2\\n100 25\") == \"3\""
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''400 4\n100 300 450 500\n''') == '2'\n\nassert solution('''50 2\n100 25\n''') == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"50 2\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"400 4\") == \"2\"\nassert solution(\"50 2\") == \"3\""
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4') == '2'\nassert solution('3 2') == '2'\nassert solution('5 2') == '1'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([4, 4]) == \"2\"\nassert solution([10, 5]) == \"3\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"10 2\") == \"2\"\nassert solution(\"400 4\") == \"2\"\nassert solution(\"100 300 450 500\") == \"3\"\nassert solution(\"50 2\") == \"3\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '6'"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"6\""
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"6\"\n\"\"\"\nn, k = map(int, input().split())"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5') == '5'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == '6'"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '6'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3') == '5'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '1'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"499122178\""
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"499122178\"\nassert solution(\"4\") == \"499122178\"\nassert solution(\"5\") == \"499122178\"\nassert solution(\"10\") == \"499122178\"\nassert solution(\"16\") == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n''') == '499122178'\nassert solution('''1\n''') == '499122178'\nassert solution('''2\n''') == '499122178'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '499122178'\nassert solution('1') == '499122178'\nassert solution('0') == '499122178'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3/2'\nassert solution('4') == '3/2'\nassert solution('5') == '2/3'\nassert solution('20') == '13/21'\nassert solution('3') == '1/2'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"499122178\"\nassert solution(\"5\") == \"499122178\"\nassert solution(\"6\") == \"499122178\"\nassert solution(\"8\") == \"499122178\"\nassert solution(\"10\") == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"499122178\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\nassert solution('20') == '10'\nassert solution('30') == '0'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(6) == '6'\nassert solution(8) == '8'\nassert solution(2) == '-1'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"6\", \"First Test\"\nassert solution(\"4\") == \"-1\", \"Second Test\"\nassert solution(\"2\") == \"6\", \"Third Test\"\nassert solution(\"3\") == \"6669\", \"Fourth Test\""
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6669\", '3'\nassert solution(\"10\") == \"-1\", '10'\nassert solution(\"15\") == \"1525\", '15'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"11\") == \"0\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n\nOutput\n6\n\n''') == '6'\nassert solution('''\n10\n\nOutput\n6669\n\n''') == '6669'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '1 4 3 2 0'\nassert solution('5') == '1 4 3 2 0'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'\n\n\"\"\""
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1 4 3 2 0'\n\nassert solution('2') == '-1'"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"-1\""
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == -1\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n''') == '-1'\nassert solution('''2\n''') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0 1 2\\n1 0 2') == '-1'\nassert solution('4\\n1 1 2 3\\n2 2 3 2\\n3 1 2 1') == '2 1 1 1'\nassert solution('2\\n1 1 2 3\\n2 2 3 2') == '-1'\nassert solution('5\\n0 1 4 3 2\\n1 0 2 4 3\\n2 4 0 1 3') == '1 1 4 3 2'\nassert solution('5\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '2 1 1 1'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"Yes\"\nassert solution() == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"3\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\"\nassert solution(\"3\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3\") == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\\n\") == \"Yes\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n1 2 3 4\\n\") == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'Yes'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\\n') == 'Yes'\nassert solution('3\\n1 2\\n1 3\\n') == 'No'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n2 4\\n3 3\\n4 2\\n4 2\\n3 3\\n4 3\\n3 4\\n') == 'Yes'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'Yes'\nassert solution('1') == 'No'\n\n'''\nimport sys\nimport math\nfrom collections import deque\n\n\nclass bfs:\n    def __init__(self):\n        self.my_queue = deque([1])\n        self.visited = []\n    def bfs_traversal(self, adjacency_list, n):\n        self.visited = [False] * (n + 1)\n        while self.my_queue:\n            vertex = self.my_queue.popleft()\n            print(vertex, end='')\n            if not self.visited[vertex]:\n                self.visited[vertex] = True\n                for vertex_neighbor in adjacency_list[vertex]:\n                    self.my_queue.append(vertex_neighbor)\n\n    def traverse(self, adjacency_list, n, sequence):\n        for i in sequence:\n            if i not in range(1, n + 1):\n                return False\n        self.visited = [False] * (n + 1)\n        self.my_queue = deque([1])\n        while self.my_queue:\n            vertex = self.my_queue.popleft()\n            if not self.visited[vertex]:\n                self.visited[vertex] = True\n                for vertex_neighbor in adjacency_list[vertex]:\n                    self.my_queue.append(vertex_neighbor)\n        return all(self.visited)\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n1 2\n1 3\n2 4\n1 2 3 4''') == 'Yes'\nassert solution('''4\n1 2\n1 3\n2 4\n1 2 4 3''') == 'No'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"1 2 3\") == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'No'\nassert solution('3\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'No'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\""
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\\n\") == \"24500\"\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\"\nassert solution(\"8 0 1 7000\") == \"25000\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 5 5\n1 2 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500''') == '24500'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '24500'\nassert solution('''\n2 5 1\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\n''') == '-1'\nassert solution('''\n2 4 5\n1 2 0 5000\n2 1 0 4500\n2 1 0 3000\n8 0 1 6000\n''') == '24500'\nassert solution('''\n2 6 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\n''') == '-1'\nassert solution('''\n2 6 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\n''') == '24500'\n'''\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 6 5') == '24500'\nassert solution('2 4 5') == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\""
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"25000\"\nassert solution(\"2 4 5\") == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\""
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 4 30') == '19.668384925'\nassert solution('1 1 45') == '0.828427125'\n\n\"\"\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\nassert solution('100000000000000000 -1') == '9.333333333333345894e-38'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'\nprint(solution(input()))\n\n\"\"\"\n\nfrom math import pi"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1 45''') == '0.828427125'\nassert solution('''6 4 30''') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1 45\n''') == '0.828427125'\nassert solution('''\n6 4 30\n''') == '19.668384925'\n''')\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 45\n''') == '0.828427125'\nassert solution('''\n6 4 30\n''') == '19.668384925'"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 45\\n\") == \"0.828427125\"\nassert solution(\"6 4 30\\n\") == \"19.668384925\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 1 45\n''') == '0.828427125'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n''') == '3000'\nassert solution('''3 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == '1'\nassert solution('''2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == '1'"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3000'\nassert solution('2 3') == '2000'\nassert solution('3 4') == '1000'\nassert solution('2 4') == '1001'\n\"\"\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"3000\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"3 4\") == \"992\"\nassert solution(\"3 4\") == \"0\"\nassert solution(\"1\") == \"0\""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"3000\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"3 4\") == \"1\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n''') == '3000'\nassert solution('''2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == '1'"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n'\n    ) == '3000', f'actual: {solution(stdin=_)}'\n\nassert solution(\n    '3 4\\nDEF 0\\nATK 0\\n1\\n11\\n101\\n1001\\n'\n    ) == '1', f'actual: {solution(stdin=_)}'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '3000'\nassert solution() == '992'\nassert solution() == '1'"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == \"3000\"\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n1\\n1\") == \"1\"\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\") == \"992\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"3 4\") == \"5\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3000'\nassert solution('2 3') == '3000'\nassert solution('3 4') == '992'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4') == '6'\nassert solution('2 2') == '2'\nassert solution('3 1') == '3'\nassert solution('1 2') == '3'\nassert solution('1 2') == '3'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"6\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 4\") == \"62\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"6\"\nassert solution(stdin=\"5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n\") == \"62\""
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n') == '6'\nassert solution(\n    '2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n') == '2'\nassert solution(\n    '5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n') == '62'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4') == '6'\nassert solution('2 2') == '2'\nassert solution('1 2') == '2'\nassert solution('4 4') == '6'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 4\") == \"6\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 3 2 1 1\") == \"2\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n1 2 3 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n2 2\\n2 3 -100 -100\\n2 1\") == \"6\"\nassert solution(\"2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n\") == \"2\"\nassert solution(\"3 4\\n4 3 2 1 1\\n0 2 6 7 4\\n2 2\\n1 2\\n1 2 3 4 5 6 7 8 9\\n2 2\") == \"2\"\n\nprint(solution(open(\"input.txt\", \"r\").read()))"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 4\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n''') == '6'\nassert solution('''\n5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n''') == '62'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4') == '6'\nassert solution('2 2') == '2'\nassert solution('4 4') == '4'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4') == '6'\nassert solution('2 2') == '2'\nassert solution('2 2') == '2'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"bbaa\") == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('aabb') == 'NO'"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aaba') == 'YES', \"3rd example\"\nassert solution('aabb') == 'NO', \"3rd example\"\nassert solution('aaba') == 'YES', \"2nd example\"\nassert solution('aabb') == 'NO', \"2nd example\"\nassert solution('aaba') == 'YES', \"1st example\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''aaba''') == 'YES'\nassert solution('''abaa''') == 'YES'\nassert solution('''aabb''') == 'NO'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aaba\") == \"YES\", \"YES\"\nassert solution(\"abaa\") == \"YES\", \"YES\"\nassert solution(\"aabb\") == \"NO\", \"NO\"\nassert solution(\"bbaa\") == \"NO\", \"NO\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"bbaa\") == \"NO\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"bbaa\") == \"YES\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abaa') == 'YES'\nassert solution('aabb') == 'NO'\nassert solution('bbaa') == 'YES'"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aaba') == \"YES\"\nassert solution('aabb') == \"NO\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'NO'\nassert solution('1') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'YES'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\", solution()\n\nassert solution(\"1\") == \"NO\", solution(\"1\")\n\nassert solution(\"3\") == \"YES\", solution(\"3\")\n\n\n\n1 2\n1 3\n2 3\n1 2\n1 3\n2 3\n1 2\n1 3\n2 3\n1 2\n1 3\n2 3\n1 2\n1 3\n2 3\n\n\n2 2\n2 1\n1 1\n1 1\n1 1\n2 1\n2 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n\") == \"NO\"\nassert solution(\"1\\n\") == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'NO'\nassert solution('1') == 'YES'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"15\") == \"YES\"\nassert solution(\"12\") == \"NO\"\nassert solution(\"1,2\") == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'NO'\nassert solution('1') == 'YES'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"1\") == \"YES\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"NO\"\n\nassert solution(\"1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"1\") == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'YES'\nassert solution('3') == 'NO'"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 2\nab\nac\ncd\n1 2\n''') == \"Yes\"\nassert solution('''\n5 2\nab\nac\ncd\n1 2\n''') == \"Yes\"\nassert solution('''\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n''') == \"No\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == 'Yes'\nassert solution('5 3') == 'Yes'\nassert solution('4 4') == 'No'\nassert solution('6 3') == 'No'\nassert solution('a') == 'No'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"a?ab\") == \"Yes\"\nassert solution(\"a?a?ab\") == \"Yes\"\nassert solution(\"a?ab?\") == \"Yes\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2\nab\nac\ncd\n1 2\n''') == 'Yes'\nassert solution('''\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n''') == 'Yes'\nassert solution('''\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n''') == 'No'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3\\nab\\nac\\ndd\\n1 2 3 4') == 'Yes\\n?es?', 'First solution'\nassert solution('10 2\\nabcdef\\nghij\\nklmno\\npqrst\\nfvwxyz\\n1 2 3 4 5 6 7 8 9 10') == 'No', 'Second solution'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"Yes\"\nassert solution(\"5 3\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\nassert solution(\"6 3\") == \"No\""
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == 'Yes'\nassert solution('3 2') == 'a?'\nassert solution('5 3') == '?es?'\nassert solution('6 3') == 'No'\nassert solution('4 4') == 'No'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\nab\nac\ncd\n1 2\n''') == 'Yes'\nassert solution('''\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n''') == 'Yes'\nassert solution('''\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n''') == 'No'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3 2\\nab\\nac\\ncd\\n1 2\\n') == 'Yes\\na?\\n'\nassert solution(\n    '5 3\\ntest\\ntezt\\ntest.\\n.est\\ntes.\\n1 4 5\\n') == 'Yes\\n?es?\\n'\nassert solution(\n    '6 3\\n.svn\\n.git\\n....\\n...\\n..\\n.\\n1 2 3\\n') == 'No\\n'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"No\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"5 3\") == \"Yes\"\nassert solution(\"5 3\") == \"Yes\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 3\n''') == '2'\nassert solution('''4\n1 2 3 4\n''') == '2'\nassert solution('''5\n1 2 3 4 5\n''') == '3'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('10') == '2'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('3 1 2') == '3'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2 3\n1 2 3''') == '2'\nassert solution('''3 2 3\n1 2 3''') == '3'\nassert solution('''5 6 6\n1 1 1 2 3 3\n1 1 2 1 3 2\n1 2 2 2 3 3\n1 2 3 3 1 2\n1 3 2 3 1 2\n2 2 2 2 2 3\n2 3 1 1 3 2\n3 1 1 3 2 2\n3 2 2 2 2 1\n3 3 3 3 3''') == '7'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2 2\") == \"2\\n\"\nassert solution(\"3\\n1 2 3\") == \"1\\n\"\nassert solution(\"6\\n1 2 3 4 5\") == \"3\\n\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"3 4\") == \"2\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2'\n\"\"\""
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"8\\n1 2\\n1 3\\n4 5\\n5 6\\n3 7\\n7 8\\n\") == \"5\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n\") == \"6\"\nassert solution(\"20\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n\") == \"7\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('1\\n1 2\\n2 3\\n3 4') == '1'\nassert solution('1\\n2\\n2 4\\n4 3') == '1'\nassert solution('4\\n2\\n1 3\\n3 4') == '1'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"17\"\n\"\"\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2'\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n''') == '3'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    5\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 8\n    8 9\n    9 10\n    10 11\n    11 12\n    12 13\n    13 14\n    14 15\n    15 16\n    \"\"\"\n) == \"3\"\n\nassert solution(\n    \"\"\"\n    5\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 8\n    8 9\n    9 10\n    10 11\n    11 12\n    12 13\n    13 14\n    14 15\n    15 16\n    \"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '2'\nassert solution('4') == '2'\n\n\"\"\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 2 5') == \"4\"\nassert solution('10 3 10') == \"5\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 2 5\n4\n3\n2\n1\n3''') == '4'\nassert solution('''10 3 10\n4\n3\n2\n1\n3\n5\n4\n6\n7\n8\n9\n10''') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7 2 5''') == '4'\nassert solution('''10 3 10''') == '5'"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 5') == '4'\nassert solution('10 3 10') == '5'"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 2 5\n2\n0\n4\n3\n2\n1\n5''') == '4'\nassert solution('''10 3 10\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7 2 5''') == '4'\nassert solution('''10 3 10''') == '5'\n\n\n'''\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\nassert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\nprint('\"Run\" is good. Coding is good, keep it up!\"')\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nConsider a Python program in which the data type of an integer is to be determined. \nWrite a program to determine the data type of an integer.\n\nInput:\n\n101\n\nOutput:\n\nData Type = Int64\n\nInput:\n\n100\n\nOutput:\n\nData Type = Int32\n\nInput:\n\n0\n\nOutput:\n\nData Type = Int32\n\nInput:\n\n-20\n\nOutput:\n\nData Type = Int32\n\nInput:\n\n2147483647\n\nOutput:\n\nData Type = Int64\n\nInput:\n\n2147483648\n\nOutput:\n\nData Type = Int64\n\nInput:\n\n0\n\nOutput:\n\nData Type = Int32\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nWrite a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10].\n\nHints:\n\nUse map() to generate a list.\nUse filter() to filter elements of a list.\nUse lambda to define anonymous functions.\n\nInput:\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nOutput:\n\n[4, 16, 36, 64, 100]\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nWrite a program which can map() and filter() to make a list whose elements are square of even number in [1,4,9,16,25,36,49,64,81,100].\n\nHints:\n\nUse map() to generate a list.\nUse filter() to filter elements of a list.\nUse lambda to define anonymous functions.\n\nInput:\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nOutput:\n\n[4, 16, 36, 64, 100]\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nWrite a program which can map() and filter() to make a list whose elements are square of even number in [1,4,9,16,25,36,49,64,81,100] using map() and filter()\n\nHints:\n\nUse map() to generate a list.\nUse filter() to filter elements of a list.\nUse lambda to define anonymous functions.\n\nInput:\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nOutput:\n\n[4, 16, 36, 64, 100]\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nWrite a program which can map() and filter() to make a list whose elements are square of even number in [1,4,9,16,25,36,49,64,81,100] using map() and filter()\n\nHints:\n\nUse map() to generate a list.\nUse filter() to filter elements of a list.\nUse lambda to define anonymous functions.\n\nInput:\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nOutput:\n\n[4, 16, 36, 64, 100]\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nWrite a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10], using map() and filter()\n\nHints:\n\nUse map() to generate a list.\nUse filter() to filter elements of a list.\nUse lambda to define anonymous functions.\n\nInput:\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nOutput:\n\n[4, 16, 36, 64, 100]\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nWrite a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10], using map() and filter()\n\nHints:\n\nUse map() to generate a list.\nUse filter() to filter elements of a list.\nUse lambda to define anonymous functions.\n\nInput:\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nOutput:\n\n[4, 16, 36, 64, 100]\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nWrite a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10], using map() and filter()\n\nHints:\n\nUse map() to generate a list.\nUse filter() to filter elements of a list.\nUse lambda to define anonymous functions.\n\nInput:\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nOutput:\n\n[4, 16, 36, 64, 100]\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nWrite a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10], using map() and filter()\n\nHints:\n\nUse map() to generate a list.\nUse filter() to filter elements of a list.\nUse lambda to define anonymous functions.\n\nInput:\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nOutput:\n\n[4, 16, 36, 64, 100]\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nWrite a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10], using map() and filter()\n\nHints:\n\nUse map() to generate a list.\nUse filter() to filter elements of a list.\nUse lambda to define anonymous functions.\n\nInput:\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nOutput:\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"4\"\nassert solution() == \"5\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''7 2 5''') == '4'\nassert solution('''10 3 10''') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\nassert solution(\"1 2 3\") == \"1\""
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') == '2'\nassert solution('4 4') == '1'\nassert solution('5 5') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '1'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == '2'\nassert solution(input_string_2) == '1 3 4'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '2'\nassert solution('''4 4\n1 2\n1 3\n1 4\n3 4\n''') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '2'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6') == '2'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n''') == '2'\nassert solution('''\n4 4\n1 2\n1 3\n1 4\n3 4\n''') == '1'\nassert solution('''\n4 5\n1 2\n1 3\n1 4\n3 4\n''') == '0'\nassert solution('''\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n''') == '1'\nassert solution('''\n4 4\n1 2\n1 3\n1 4\n3 4\n''') == '0'\n''')"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 5\\n3 4\\n4 5\") == \"1\"\nassert solution(\"5 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 5\\n3 4\\n4 5\") == \"2\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"2\""
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n75 150 75 50\\n') == 'Yes'\nassert solution('3\\n100 150 250\\n') == 'No'"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n75 150 75 50\n\n3\n100 150 250\n\n''') == \"Yes\""
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n75 150 75 50\n''') == 'Yes'\nassert solution('''3\n100 150 250\n''') == 'No'"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n75 150 75 50\n''') == 'Yes'\nassert solution('''\n3\n100 150 250\n''') == 'No'"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n100 150 250\n''') == 'No'\nassert solution('''\n4\n75 150 75 50\n''') == 'Yes'\n'''"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"Yes\"\nassert solution([\"5\", \"3\", \"2\", \"2\", \"1\"]) == \"No\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n75 150 75 50\n''') == 'Yes'\nassert solution('''\n3\n100 150 250\n''') == 'No'"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n100 150 250\n''') == 'No'\nassert solution('''4\n75 150 75 50\n''') == 'Yes'\nassert solution('''5\n100 150 75 50\n''') == 'No'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n75 150 75 50\\n') == 'Yes'\nassert solution('3\\n100 150 250\\n') == 'No'\n\n\n\"\"\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''50 50 50\n    -1 -100 -1\n    ''') == '150'\nassert solution('''2\n    50 50 50\n    -1 -100 -1\n    ''') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n50 50 50') == '150'\nassert solution('2\\n-1 -100 -1') == '100'"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '150'\nassert solution('2') == '100'\nassert solution('-1 -100 -1') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n50 50 50\") == \"150\"\nassert solution(\"2\\n-1 -100 -1\") == \"100\"\nassert solution(\"2\\n-1 -100 -1\") == \"100\"\nassert solution(\"2\\n-1 -100 -1\") == \"100\"\nassert solution(\"2\\n-1 -100 -1\") == \"100\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"150\"\nassert solution(stdin='''50 50 50\n''') == \"150\"\nassert solution(stdin='''-1 -100 -1\n''') == \"100\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n50 50 50\n''') == '150'\nassert solution('''\n2\n-1 -100 -1\n''') == '100'\nprint('Congratulations! Your solution:')\nprint(solution(input()))\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"150\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n50 50 50''') == '150'\nassert solution('''2\n-1 -100 -1''') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '150'\nassert solution(input()) == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5') == '4'\nassert solution('2 8') == '1'\nassert solution('6 2') == '0'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"6\") == \"5\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    3 5\n    ab a\n    cc c\n    ca a\n    ee c\n    ff d\n    ''') == \"4\"\n\nassert solution('''\n    2 8\n    af e\n    dc d\n    cc f\n    bc b\n    da b\n    eb a\n    bb b\n    ff c\n    ''') == \"1\"\n\nassert solution('''\n    6 2\n    bb a\n    ba a\n    ''') == \"0\""
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5') == 4\nassert solution('2 8') == 1\nassert solution('6 2') == 0\n\n\"\"\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5\\nab a\\ncc c\\nc a\\nee c\\nff d') == '4\\n'\nassert solution('6 2\\nb b\\n') == '1\\n'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '4'\nassert solution('''\na a\na''') == '2'\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5\nab a\ncc c\nca a\nee c\nff d\n\n3 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n\n6 2\nbb a\nba a\n\n7 2\na b\nb b\nb b\n\n8 2\nbc a\nba a\nba a\nbb b\n\n11 2\nab ab\nba ab\nba ab\nbc ab\nbc ab\nbc ab\n\n''') == \"4\""
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5') == '4'\nassert solution('2 8') == '1'\nassert solution('6 2') == '0'\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"2 8\") == \"1\"\nassert solution(\"6 2\") == \"0\""
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"4\"\n\"\"\"\nfrom itertools import permutations\nimport string\n\nn, q = list(map(int, input().split()))\nstr_list = []\nfor _ in range(q):\n    str_list.append(input())\n\ns_list = []\nfor s in str_list:\n    s_list.append(s[0])\n    s_list.append(s[1])\n\ns_set = set(s_list)\n\nans = 0\nfor p in permutations(s_set, n - 1):\n    ans += 1\nprint(ans)\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '3'\nassert solution('''3''') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n2\n3''') == '10'\n\nassert solution('''2\n2\n3''') == '11'\n\nassert solution('''3\n2\n3''') == '10'\n\nassert solution('''10\n2\n3''') == '9'"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\nassert solution('4') == '9'\n\n\n\"\"\"\n\n\n\nimport math\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('2\\n') == '3\\n'\nassert solution('3\\n') == '10\\n'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '10'\nassert solution('1') == '1'\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1.000000000000'\nassert solution('4 1') == '1.250000000000'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"1.000000000000\"\nassert solution(\"1 3\") == \"1.250000000000\"\nassert solution(\"4 1\") == \"1.250000000000\""
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'\n\n\n\n'''\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1') == '1.000000000000'\nassert solution('3 2') == '-1'\nassert solution('4 1') == '1.250000000000'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1.000000000000\"\nassert solution(\"1 3\") == \"1.000000000000\"\nassert solution(\"4 1\") == \"1.250000000000\"\n\nassert solution(\"3 1\") == -1\nassert solution(\"1 3\") == -1\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'\nassert solution('0 0') == '0'\nassert solution('1 3') == '-1'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"1.000000000000\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"4 1\") == \"1.250000000000\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 1\n\n\"\"\") == \"1.000000000000\"\n\nassert solution(\"\"\"1 3\n\n\"\"\") == \"-1\"\n\nassert solution(\"\"\"4 1\n\n\"\"\") == \"1.250000000000\"\n\nassert solution(\"\"\"4 1\n\n\"\"\") == \"1.250000000000\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1\n\nOutput\n1.000000000000\n\nInput\n1 3\n\nOutput\n-1\n\nInput\n4 1\n\nOutput\n1.250000000000''') == '1.250000000000'\n\nassert solution('''1 2\n\nOutput\n0.0''') == '0.0'\n\nassert solution('''5 5\n\nOutput\n1.000000000000\n\nInput\n6 6\n\nOutput\n-1''') == '-1'\n\nassert solution('''7 7\n\nOutput\n1.250000000000''') == '1.250000000000'\n\nassert solution('''2 1\n\nOutput\n0.0''') == '0.0'"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1.000000000000'\nassert solution('4 1') == '1.250000000000'\nassert solution('5 1') == '0'\n\n\"\"\"\nfrom math import ceil,floor"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '10.0000000000'\nassert solution('3') == '-1'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '10.0000000000'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == \"10.0000000000\"\nassert solution('3') == \"-1\""
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1\n1 4 1\n2 5 3\n''') == '10.0000000000'\nassert solution('''\n3\n1\n1 4 1\n2 5 3\n''') == '-1'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '10.0000000000'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"10.0000000000\"\nassert solution(\"3\") == \"-1\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '10.0000000000'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1\n1 4 1\n2 5 3\n''') == '10.0000000000'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\nassert solution(input) == output\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"10.0000000000\""
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n\n''') == '0'\nassert solution('''\n10\n\n''') == '4'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0'\nassert solution('10') == '4'\n\"\"\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n''') == \"0\"\n\n\nassert solution('''\n10\n''') == \"4\"\n\n\n'''\n============================================================================================================\n113. Path Sum\n============================================================================================================\nGiven a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\nNote: A leaf is a node with no children.\nExample:\nGiven the below binary tree and sum = 22,\n      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\      \\\n7    2      1\nreturn true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.\n'''\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n') == '4'\nassert solution('10\\n') == '3'\nassert solution('1000\\n') == '3798'"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([2]) == 0\nassert solution([10]) == 4"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('10') == '4'\n\n\n'''\n\n\nclass Solution:\n    def solution(self, n):\n        pass"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 0\nassert solution('10') == 4\n'''\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 0\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n\") == 0\nassert solution(\"10\\n\") == 4"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n\n''') == '0'\nassert solution('''\n10\n\n''') == '4'\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Wh\"\nassert solution(\"1 2\") == \"abdef\""
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'Wh.'\nassert solution('1 2') == 'abdef'\nassert solution('1 111111111111') == 'Areyoubusy'\n\n\"\"\"\n\nimport sys\nfrom typing import List\nfrom collections import deque\n\nclass MyQueue:\n    def __init__(self):\n        self.q = deque()\n\n    def push(self, value):\n        return self.q.append(value)\n\n    def pop(self):\n        return self.q.popleft()\n\n    def peek(self):\n        return self.q[0]\n\n    def empty(self):\n        return len(self.q) == 0"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 1\n1 2\n1 111111111111\n\"\"\") == \"Wh.\"\n\nassert solution(\"\"\"\n5 0\n0 69\n1 194\n1 139\n0 47\n1 66\n\n\"\"\") == \"abdef\"\n\nassert solution(\"\"\"\n10 3\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n\n\"\"\") == \"Areyoubusy\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"Wh. Areyoubusy\") == \"Wh. Areyoubusy\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 1\n1 2\n1 111111111111\n\"\"\") == \"Wh.\"\n\nassert solution(\"\"\"\n5 0\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n\"\"\") == \"Areyoubusy\"\n\nassert solution(\"\"\"\n5 1\n2 2\n3 3\n4 4\n\"\"\") == \".\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"\n\n---"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'Wh'\nassert solution('1 2') == 'abdef'\n\n\"\"\""
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\nWhat are you doing at the end of the world? Are you busy? Will you save us?\n\nWhat are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"?\".\n\nAre you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy?"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 1\n1 2\n1 111111111111\n\"\"\") == \"Wh.\"\nassert solution(\"\"\"\n5 0\n0 69\n1 194\n1 139\n0 47\n1 66\n\"\"\") == \"abdef\"\nassert solution(\"\"\"\n10 4\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n\"\"\") == \"Areyoubusy\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n1 2\n1 111111111111\n''') == 'Wh.'\nassert solution('''\n5 0\n0 69\n1 194\n1 139\n0 47\n1 66\n''') == 'abdef'\nassert solution('''\n10 4\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n''') == 'Areyoubusy'\n''')\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('? +? -? +? =?') == 'Possible'\nassert solution('? +? -? +? = 42') == 'Possible'\nassert solution('? +? =?') == 'Impossible'\nassert solution('? -? =?') == 'Impossible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''? +? -? +? +? = 42''') == 'Possible'\nassert solution('''? -? = 1''') == 'Impossible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''? +? -? +? = 42''') == 'Possible'\nassert solution('''? +? = 1''') == 'Impossible'\nassert solution('''? = 1000000''') == 'Possible'"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''? +? -? +? = n\n                        9 + 13 - 39 + 28 + 31 = 42''') == 'Possible'\nassert solution('''? = 1\n                        1 =?''') == 'Impossible'\nassert solution('''? +? = n\n                        1 +? = 2''') == 'Possible'\nassert solution('''? +? +? = n\n                        9 + 13 =?''') == 'Impossible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"? +? -? +? = 42\") == \"Possible\"\nassert solution(\"? +? -? +? = 9\") == \"Possible\"\nassert solution(\"? = 1\") == \"Impossible\"\nassert solution(\"? -? = 1\") == \"Impossible\"\nassert solution(\"? +? -? +? = 1000000\") == \"Possible\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n? +? -? +? = 42\n\n''') == 'Possible', 'Should return \"Possible\" if rebus has a solution and \"Impossible\" otherwise.'\nassert solution('''\n? = 1\n\n''') == 'Impossible', 'Should return \"Impossible\" if rebus has a solution and \"Possible\" otherwise.'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n? +? -? +? +? = n\n''') == \"Possible\"\nassert solution('''\n? +? -? +? +? = n\n''') == \"Impossible\"\nassert solution('''\n? = 1\n''') == \"Impossible\""
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('? +? -? +? = n') == 'Possible'\nassert solution('? +? -? +? = 100000000') == 'Possible'\nassert solution('? +? -? +? = -1') == 'Impossible'\nassert solution('? = 1000000') == 'Impossible'\nprint(\"Congratulations! Your solution is correct!\")\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == 'Possible'\nassert solution('? +? -? +? +? = 42') == '9 + 13 - 39 + 28 + 31 = 42'\nassert solution('? -? = 1') == 'Impossible'\nassert solution('? = 1000000') == '1000000 = 1000000'"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''? +? -? +? = n''') == 'Possible'\nassert solution('''? -? = 1''') == 'Impossible'\nassert solution('''? = 1000000''') == 'Possible'\nprint('Congratulations! Your solution is correct.')\n\n'''\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 0 2\\n0\\n0\\n0\\n\") == \"7 4 5\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 0 0 0\\n0 0 1 0\") == \"7 4 5\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2 0 2\n0 1 2 0\n0 2 0 1\n0 1 2 0''') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '7 4 5'"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2 0 2\n0\n0\n0\n\n''') == '7 4 5'\nassert solution('''5\n1 2 0 2\n0 1 2 0\n0 2 0 1\n0 1 2 0\n\n''') == '7 4 5'"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"7 4 5\"\nassert solution(\"5\") == \"7 4 5\"\nassert solution(\"2\") == \"7 4 5\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 2 0 2\n0\n0\n0\n''') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 2 0 2\n0\n0\n0\n''') == '7 4 5', 'First'\nassert solution('''\n4\n0\n0\n0\n''') == '7 4 5', 'Second'\nassert solution('''\n1\n1\n0\n''') == '2 1 0', 'Third'\n\nassert solution('''\n2\n0 0\n1\n''') == '4 2 1', 'Fourth'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 0 2') == '7 4 5'\nassert solution('2 0 1 2') == '7 4 5'\nassert solution('3 2 1 2') == '7 4 5'\nassert solution('4') == '7 4 5'\nassert solution('5') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3 0 1'\nassert solution('4') == '4 1 1 1'\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    3\n    aab\n    ''') == 'No'\n\nassert solution('''\n    4\n    bbbb\n    ''') == 'Yes'\n\nassert solution('''\n    3\n    abc\n    ''') == 'Yes'\n\nassert solution('''\n    5\n    ababababababab\n    ''') == 'Yes'\n\nassert solution('''\n    5\n    aaab\n    ''') == 'Yes'"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"3\") == \"Yes\""
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'Yes'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\n\"\"\""
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(s) == 'Yes'\nassert solution(m) == 'No'\nassert solution(n) == 'No'\nassert solution(o) == 'Yes'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\naabddc\n''') == 'Yes'\nassert solution('''\n3\nabc\n''') == 'No'\nassert solution('''\n3\njjj\n''') == 'Yes'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\\nabc\") == \"Yes\"\nassert solution(\"3\\njjj\") == \"Yes\"\nassert solution(\"3\\naaa\") == \"No\""
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"Yes\""
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"3\") == \"Yes\""
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == \"Yes\"\nassert solution('3') == \"No\"\nassert solution('3') == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(test.sample_input_stdin) == \"Yes\"\nassert solution(test.input_stdin) == \"Yes\"\nassert solution(test.input_stdin_1) == \"Yes\"\nassert solution(test.input_stdin_2) == \"Yes\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 1 3 3\n''') == '8'\nassert solution('''\n10 4\n1 1 2 2\n''') == '4'\nassert solution('''\n10 7\n1 1 5 5\n''') == '3'\nassert solution('''\n8 1\n1 1 3 3\n''') == '54'\nassert solution('''\n3 2\n1 1 2\n''') == '9'\n''')"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n') == '5'\nassert solution('4 4\\n') == '24'\nassert solution('5 4\\n') == '35'\nassert solution('100000 4\\n') == '9984'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"54\"\nassert solution(\"7 4\") == \"1728\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3\n''') == '54', 'First'\nassert solution('''\n2 5\n''') == '1728', 'Second'\nassert solution('''\n1 8\n''') == '9474', 'Third'\nassert solution('''\n1 5\n''') == '1806', 'Fourth'\nassert solution('''\n1 3\n''') == '54', 'Fifth'\n'''\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"54\"\nassert solution(\"7 4\") == \"1728\""
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1\\n') == '1'\nassert solution('3 2\\n') == '2'\nassert solution('5 3\\n') == '5'\nassert solution('5 4\\n') == '1728'\nassert solution('9 7\\n') == '0'"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 2\n''') == '54', 'First'\nassert solution('''\n7 4\n''') == '1728', 'Second'\nassert solution('''\n1 5\n''') == '10588897', 'Third'"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"54\"\nassert solution(\"7 4\") == \"1728\"\nassert solution(\"1 1000000000 7 4\") == \"6926208\"\nassert solution(\"1 1000000000 8 4\") == \"1346269\"\nassert solution(\"1 1000000000 7 3\") == \"6926208\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\n''') == '54'\nassert solution('''\n7 4\n''') == '1728'"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW') == '2 4'\nassert solution('3 3\\nWWW\\nWWW\\nWWW') == '2 1'"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n\nOutput\n2 4''') == '2 4'\nassert solution('''3 3\nWWW\nBWW\nWWW\n\nOutput\n2 1''') == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2 1\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW\\n') == '2 4'\nassert solution(\n    '3 3\\nWWW\\nBWW\\nWWW\\n') == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW\\n\") == \"2 4\"\nassert solution(\"5 6\\nWWWWWW\\nWWWWWW\\nWWWWWW\\nWWWWWW\\nWWWWWW\\n\") == \"0 0\"\nassert solution(\"5 6\\nWWWWWW\\nWWWWWW\\nWWWWWW\\nWWWWWW\\nWWWWWW\\n\") == \"2 2\"\nassert solution(\"5 6\\n
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"2 1\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n\n''') == '2 4'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW\\n') == '2 4'\nassert solution('3 3\\nWWW\\nBWW\\nWWW\\n') == '2 1'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 7\\n2 4\\n5 1\\n2 3\") == \"10 9 10 10 9\"\nassert solution(\"2 3\\n1 2\\n1 2\") == \"5 6\"\nassert solution(\"2 3\\n1 2\\n1 2\\n1 2\") == \"5 6\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 7') == '10 9 10 10 9'\nassert solution('2 3') == '5 6'"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 7') == '10 9 10 10 9 \nassert solution('2 3') == '5 6 \nassert solution('1 2') == '5 5 \n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"5 6\"\nassert solution(\"5 7\\n2 4\\n5 1\\n2 3\\n3 4\\n4 1\\n5 3\") == \"10 9 10 10 9\""
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == \"10 9 10 10 9\"\nassert solution('2 3') == \"10 9 10 10 9\"\nassert solution('5 7') == \"10 9 10 10 9 10\"\nassert solution('5 7') == \"10 9 10 10 9 10\"\nassert solution('5 10') == \"10 9 10 10 10\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 7\") == \"10 9 10 10 9\"\nassert solution(\"2 3\") == \"5 6\""
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5''') == '10 9 10 10 9'\n\nassert solution('''2 3\n1 2\n1 2\n1 2''') == '5 6'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 7\") == \"10 9 10 10 9\"\nassert solution(\"2 3\") == \"5 6\"\nassert solution(\"3 3\") == \"4 3\"\nassert solution(\"1 2\") == \"4 3\""
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3\n1 2\n1 2\n1 2\n''') == '5 6'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n''') == '10 9 10 10 9 '\n\nassert solution('''2 3\n1 2\n1 2\n1 2\n\n''') == '5 6 '\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n-1 -1\\n2') == '2'\nassert solution('1 1\\n-1 -1\\n3') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '2'\nassert solution('-1 -1') == '2'\nassert solution('2') == '1'\nassert solution('-1 -1') == '2'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '2'\nassert solution('-1 -1') == '2'\nassert solution('2') == '2'\nassert solution('0 1') == '2'\nassert solution('1 0 0') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n0 1 0\") == \"1\"\nassert solution(\"1 1\\n-1 -1\\n2\\n0 1 0\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n2\\n1 0 0\") == \"1\""
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n\n''') == '2'\n\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n\n''') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1\\n-1 -1\\n2') == '2'\nassert solution('1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"-1 -1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"0 1 0\") == \"2\"\nassert solution(\"1 0 0\") == \"2\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\\n0 1 0\\n1 0 0\\n1 1 -3\") == \"2\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n1 1 -3\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0\\n1 1 -3\") == \"2\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"Kevin\"\nassert solution(\"1 2\") == \"Nicky\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1\n3 4\n''') == \"Kevin\"\nassert solution('''\n1 2\n3\n''') == \"Nicky\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == 'Kevin'\nassert solution('2 1') == 'Nicky'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4\n3\n2 1\n2\n1''') == 'Kevin'\n\n'''\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1\n4\n''') == 'Kevin'\nassert solution('''2 2\n4\n''') == 'Nicky'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n3 4\") == \"Kevin\"\nassert solution(\"1 2\\n3\") == \"Nicky\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"Kevin\"\nassert solution(\"1 1\") == \"Nicky\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"Kevin\"\nassert solution(\"1 2\") == \"Nicky\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"Kevin\"\nassert solution(\"2 2\") == \"Nicky\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == 'Nicky'\nassert solution('1 2 3 4') == 'Kevin'"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n3 4 1 5 7\n\n\"\"\") == \"1 2 3 4 5 7\"\nassert solution(\"\"\"\n2\n1 2\n\n\"\"\") == \"2 2\"\nassert solution(\"\"\"\n3\n1 1 1\n\n\"\"\") == \"1 1 1\""
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"2\") == \"1 1\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1 2 3'\nassert solution('3') == '1 2 3'\nassert solution('4') == '-1'\nassert solution('4') == '-1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('3') == '-1'\nassert solution('2') == '1'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1 2\"\nassert solution(\"3 1\") == \"1 1 1\"\nassert solution(\"10 20\") == \"10 20 20 20 20 20 20 20 20 20 20\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n1 1') == '1 1 1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2\n2 1\n\"\"\") == \"1 1 1\"\nassert solution(\"\"\"\n1\n1 1\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n1\n2 2\n\"\"\") == \"1 2 2\"\nassert solution(\"\"\"\n3\n2 2 2\n\"\"\") == \"3 2 2\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1 2'\nassert solution('1') == '1 1 1'\n\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n3 2 4 1 2\n''') == '1'\n\nassert solution('''\n6\n3 2 4 1 2 3\n''') == '2'\n\nassert solution('''\n6\n4 1 2 3 2 1\n''') == '-1'\n\nassert solution('''\n2\n1 2\n1 2\n''') == '-1'\n\nassert solution('''\n4\n4 4 4 4\n4 4 4 4\n''') == '2'"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"11\"\n) == \"6\"\nassert solution(\n    \"01\"\n) == \"2\"\nassert solution(\n    \"0\"\n) == \"1\"\nprint(\"You're all set!\")\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11\") == \"6\"\nassert solution(\"01\") == \"2\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\n\nassert solution('00') == '1'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"11\"\n) == \"6\"\nassert solution(\n    \"01\"\n) == \"2\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"11\\n\"\n) == \"6\"\nassert solution(\n    \"01\\n\"\n) == \"2\"\nprint(solution(\n    \"101\\n\"\n))\nprint(solution(\n    \"1001\\n\"\n))\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\nassert solution('11') == '6'"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"15\") == \"1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '5'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1', solution('1')\nassert solution('2') == '2', solution('2')\nassert solution('3') == '3', solution('3')\nassert solution('4') == '4', solution('4')\nassert solution('5') == '3', solution('5')\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n15') == '1'\nassert solution('3\\n1 1 2') == '3'\nassert solution('2\\n5 7') == '4'\nassert solution('3\\n1 1 2') == '3'"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('2') == '4'\n\nassert solution('2') == '4'\n\nassert solution('3') == '2'\n\n\n\n'''\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == \"1\"\nassert solution('2') == \"3\"\nassert solution('3') == \"6\"\nassert solution('4') == \"5\"\nassert solution('5') == \"8\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"2\") == \"4\""
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n15\n''') == '1'\nassert solution('''3\n1 1 2\n''') == '3'\nassert solution('''2\n5 7\n''') == '4'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 1 2\") == \"3\"\nassert solution(\"1\\n1 1 2\") == \"3\"\nassert solution(\"3\\n1 1 2\") == \"4\"\nassert solution(\"3\\n2 2 2\") == \"4\"\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n1 0 2\n2 0 1\n\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n4\n1 2 3 0\n0 3 2 1\n\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n2\n1 0\n0 1\n\n\"\"\") == \"NO\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\"\nassert solution(\"4\\n1 2 3 0\\n0 3 2 1\\n\") == \"NO\"\nprint(solution(input()))\n\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\nclass Graph(object):\n    \n    def __init__(self, vertices):\n        self.graph = {}\n        self.V = vertices\n    \n    def addEdge(self, u, v, w):\n        self.graph.setdefault(u, []).append((v, w))\n        self.graph.setdefault(v, []).append((u, w))\n    \n    # A utility function to find set of an element i\n    # (uses path compression technique)\n    def find(self, parent, i):\n        if parent[i] == i:\n            return i\n        return self.find(parent, parent[i])\n    \n    # A function that does union of two sets of x and y\n    # (uses union by rank)\n    def union(self, parent, rank, x, y):\n        xroot = self.find(parent, x)\n        yroot = self.find(parent, y)\n        # Attach smaller rank tree under root of\n        # high rank tree (Union by Rank)\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        # If ranks are same, then make one as root\n        # and increment its rank by one\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n    \n    # The main function to construct MST using Kruskal's\n    # algorithm\n    def KruskalMST(self):\n        result = []\n        i = 0 # An index variable, used for sorted edges\n        e = 0 # An index variable, used for result[]\n        # Step 1:  Sort all the edges in non-decreasing\n        # order of their\n        # weight.  If we are not allowed to change the\n        # given graph, we can create a copy of graph\n        for node in range(self.V):\n            self.graph[node] = sorted(self.graph[node], key = lambda x: x[2])\n        # for node in range(self.V):\n            # print(node, self.graph[node])\n        \n        # Step 2:  Find the smallest edge and increment\n        # the index for next edge\n        while e < self.V - 1:\n            # Step 3:  Pick the smallest edge\n            u, v, w = self.graph[i]\n            i = i + 1\n            x = self.graph[i]\n            i = i + 1\n            # Step 4:  If including this edge doesn't\n            # increase the sum of weights of the MST,\n            # then subtract the value of this edge from\n            # the total weight of MST and exclude this edge\n            # from final MST.\n            if e < self.V - 1:\n                y = self.graph[i]\n                i = i + 1\n                # Step 5:  Update result if needed\n                # and use the abovementioned\n                # algorithm recursively\n                if x[2] + y[2] < w:\n                    result.append((u, v, w))\n                    e = e + 1\n                else:\n                    if u < v:\n                        parent[u] = v\n                    else:\n                        parent[v] = u\n        # Step 6:  If result array is not empty, then use\n        # abovementioned algorithm to update MST and\n        # return MST\n        if result:\n            self.graph = self.graph.fromkeys(self.graph, sorted(self.graph[i]))\n            # print(self.graph)\n            self.graph = self.graph.fromkeys(self.graph, sorted(self.graph[i]))\n            # for node in self.graph:\n            #     print(node, self.graph[node])\n            self.KruskalMST()\n        \n        # print(parent)\n        # print(rank)\n        # print(result)\n        return result\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n1 0 2\n2 0 1\n3 0 2\n4 0 1\n5 0 0\n\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n5\n1 2 3 0\n0 3 2 1\n\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n6\n1 2 3 0\n0 3 2 1\n3 0 2 1\n5 2 1 3\n0 2 1 3\n\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 0 2\n2 0 1\n''') == 'YES'\nassert solution('''\n4\n1 2 3 0\n0 3 2 1\n''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 0 2\n2 0 1\n''') == 'YES'\nassert solution('''\n4\n1 2 3 0\n0 3 2 1\n''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'YES'\nassert solution('2') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 0 2\n2 0 1\n''') == 'YES'\nassert solution('''2\n1 0\n0 1\n''') == 'YES'\nassert solution('''4\n1 2 3 0\n0 3 2 1\n''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == 'YES'\nassert solution('2') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\\\n3\n1 0 2\n2 0 1\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\\\n2\n1 0\n0 1\n\n\"\"\") == \"NO\"\nassert solution(\"\"\"\\\n4\n1 2 3 0\n0 3 2 1\n\n\"\"\") == \"NO\"\n\"\"\""
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10''') == '9000'\nassert solution('''6\n8 10 9 9 8 10\n1 1 1 1 1 1\n''') == '1160'"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == str(1600000)\nprint(solution(input_data))\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"9000\"\nassert solution(\"6\") == \"1160\"\n\"\"\"\nimport sys"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n8 10 9 9 8 10\n1 1 1 1 1 1\n''') == '9000'\n\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160'\n\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '1000000'"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n8 10 9 9 8 10\n1 1 1 1 1 1\n''') == '9000'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n') == '9000'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"9000\"\nassert solution(\"6\") == \"1160\""
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '9000'\nassert solution('7') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n') == '9000'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n\") == \"9000\"\nassert solution(\n    \"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n\") == \"1160\"\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"1 2\"\nassert solution(\"4 2\") == \"6\""
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 2\n2 3\n1 4\n1 4\n2 1''') == '6'\n\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == '6'\nassert solution('8 6') == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '6'\nassert solution('8 6') == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2') == '6'\nassert solution('8 6') == '1'"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 2\n2 3\n1 4\n1 4\n2 1''') == '6'\nprint(solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4'''))\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '6'\nassert solution('8 6') == '1'"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\nassert solution(\"\"\"\n4 2\n2 3\n1 4\n1 4\n2 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4 1\n4 3\n3 1\n2 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n2 3\n1 4''') == '1'\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1'\nassert solution('''4 3\n2 3\n1 4\n1 4\n2 1''') == '0'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '6'\nassert solution('8 6') == '1'"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(['5', '2 2 3 4 6']) == '5', solution('5 2 2 3 4 6')\nassert solution(['4', '2 4 6 8']) == '-1', solution('4 2 4 6 8')\n\nstdin = ['1', '2 2 3 4 6']\nassert solution(stdin) == '5', solution(stdin)\nstdin = ['3', '2 6 9']\nassert solution(stdin) == '4', solution(stdin)\nstdin = ['3', '2 6 9']\nassert solution(stdin) == '-1', solution(stdin)"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n2 2 3 4 6\n''') == '5'\nassert solution('''\n4\n2 4 6 8\n''') == '-1'\nassert solution('''\n3\n2 6 9\n''') == '4'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"3\") == \"-1\"\n\n'''\n\n'''\nO(n)\nstart to count the number of elements in the array and put them in a list.\nonce it find a number and it is 1, it remove it from the list.\ncount it and it is a = 1, so if there is still at least 1, it means there is a 1 in the array.\nAfter that, if it is 0, it means all elements in the array are 1, so we can return the count.\n\n'''\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([5, 2, 3, 4, 6]) == 5\nassert solution([4, 2, 4, 6, 8]) == -1\nassert solution([5, 2, 6, 8, 9]) == 4\nassert solution([3, 4, 5, 2, 3]) == 1\nassert solution([7, 5, 4, 3, 2]) == -1\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 2 3 4 6\") == \"5\"\nassert solution(\"4\\n2 4 6 8\") == \"-1\"\nassert solution(\"3\\n2 6 9\") == \"4\""
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n2 4 6 8\n''') == '4'\nassert solution('''3\n2 6 9\n''') == '-1'\nassert solution('''5\n2 2 3 4 6\n''') == '5'\n\n\n'''\n\nimport math\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.strip())\n        a = list(map(int, stdin.split()))\n\n        if n <= 1:\n            return '-1'\n\n        count = 0\n        for i in range(n):\n            # print('a[i]', a[i])\n            for j in range(i+1, n):\n                # print('a[j]', a[j])\n                if a[i]!= a[j]:\n                    count += 1\n                    a[i], a[j] = a[j], a[i]\n                    break\n        return str(count)\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '-1'\n\n'''\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '-1'\nassert solution('4') == '4'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == '4'\n\n\"\"\"\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n3\n2 6 9\n''') == '4'\nassert solution('''5\n2 4 6 8\n''') == '-1'\nassert solution('''3\n2 6 9\n''') == '4'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abacabaca\") == \"3\"\nassert solution(\"abaca\") == \"0\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''aba\naba\nba''') == '2'\nassert solution('''abb\naba\naba''') == '1'\nassert solution('''ab''') == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\nassert solution('abac') == '0'\n\"\"\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abacabaca\") == \"3\"\nassert solution(\"abaca\") == \"0\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abacabaca') == \"3\"\nassert solution('abaca') == \"0\""
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\n'''\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5\\n1#2#3') == '2'\nassert solution('4 5\\n11..2\\n#..22\\n#.323\\n#.333') == '4'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 5\\n1#2#3\") == \"2\"\nassert solution(\"10 1\\n.2..\") == \"9\"\nassert solution(\"4 5\\n.11.2\\n##.22\\n.123\") == \"4\"\nassert solution(\"4 2\\n1#2\\n#1\") == \"2\"\nassert solution(\"4 2\\n1#2\\n##2\") == \"0\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5\\n1#2#3\") == \"2\"\nassert solution(\"1 5\\n1.1.1.1.2.1.1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5\\n11.2\\n#.22\\n#.323\\n') == '2'\nassert solution('2 1\\n1#1\\n') == '1'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n1#2#3\\n\") == \"2\"\nassert solution(\"6 5\\n1#2#3\\n1#3#4\\n1#4#5\\n1#5#6\\n\") == \"3\"\nassert solution(\"6 5\\n1#2#3\\n1#2#4\\n1#2#5\\n1#2#6\\n\") == \"4\"\nassert solution(\"6 5\\n1#2#3\\n1#2#4\\n1#2#5\\n1#2#6\\n1#3#4\\n1#3#5\\n\") == \"5\"\nassert solution(\"6 5\\n1#2#3\\n1#2#4\\n1#2#5\\n1#2#6\\n1#3#4\\n1#3#5\\n1#3#6\\n\") == \"6\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '2'\nassert solution('3 5') == '1'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5\\n11..2\\n#..22\\n#.323\\n#2') == '2'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4') == '2'\nassert solution('10 5') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 2\\n2 2\\n\") == \"0\"\nassert solution(\"2 3\\n.1.2\\n.2.3\\n.3.4\\n\") == \"3\"\nassert solution(\"2 3\\n.1.2\\n.2.3\\n.3.4\\n\") == \"1\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 5\") == \"2\"\nassert solution(\"11.2\") == \"2\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"8\") == \"6\"\nassert solution(\"12\") == \"-1\""
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8') == '6'\nassert solution('3') == '-1'\nassert solution('1') == '-1'\nassert solution('') == '-1'"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"-1\"\nassert solution(\"8\") == \"6\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"0\""
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\nassert solution(\"12\") == \"6\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '6'\nassert solution('3') == '-1'\n\n\n\"\"\""
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '2') == '2'\nassert solution(\n    '3') == '3'\nassert solution(\n    '4') == '4'\nassert solution(\n    '5') == '5'\nassert solution(\n    '6') == '6'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"()\") == \"0\"\nassert solution(\"()(())()\") == \"3\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"8\") == \"6\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n(()(())') == '5'\nassert solution('4\\n((()))') == '5'\nassert solution('4\\n(()((()))') == '6'\nassert solution('4\\n(())())') == '6'\nassert solution('4\\n(((()))') == '5'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n''') == '4'\nassert solution('''5 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n''') == '3'\nassert solution('''5 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n''') == '2'\nassert solution('''5 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n''') == '2'\nassert solution('''5 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n''') == '4'"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 5\") == \"1\"\nassert solution(\"4 5 4\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"4 5 4\") == \"1\"\nassert solution(\"1 2 3\") == \"2\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 5\") == \"1\"\nassert solution(\"4 5 4\") == \"4\"\nassert solution(\"3 5 3\") == \"1 2 3 4\""
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5 4\\n2 1 0 3\\n4 3\") == \"1 2 3 4\"\nassert solution(\"4 5 4\\n2 1 0 3\\n3 2\") == \"1 2 3 4\"\nassert solution(\"4 5 4\\n2 1 0 3\\n3 2\") == \"1 3 4\""
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 5 4\n2 1 0 3\n4 3\n3 2\n1 2''') == '1 2 3 4'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 4\") == \"1\"\nassert solution(\"5 5 4\") == \"4\"\nassert solution(\"4 5 4\") == \"4\""
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5 4') == '1'\nassert solution('5 5 5') == '1'\nassert solution('8 8 5') == '3'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3 5\n4 4 0\n1 3\n3 2\n3 1\n\nOutput\n1\n3 \nInput\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\nOutput\n4\n1 2 3 4 \n''') == '4'"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'\n\"\"\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 5 4') == '4'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '8'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 2') == '4'\nassert solution('3 3') == '10'\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 5\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n5 6\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10 10\n\"\"\") == \"25\""
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == 8\n\n\"\"\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([2, 3]) == 8\n\"\"\"\nfrom math import factorial as fact\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '8'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"8\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n\n''') == '8'\nassert solution('''\n10 10\n\n''') == '1472'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3,3]) == 8\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1', solution('1')\nassert solution('2') == '3', solution('2')\nassert solution('3') == '8', solution('3')\nassert solution('4') == '7', solution('4')\nassert solution('5') == '14', solution('5')\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"100 3\") == \"100\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 2\n1 2\n2 3\n\n''') == '5'\n\nassert solution('''\n1 2\n2 1\n3 1\n\n''') == '4'\n\nassert solution('''\n1 2\n1 1\n2 100\n\n''') == '100'\n\n\"\"\""
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2\n1 1\n2 100''') == '100'\n\nassert solution('''1 2\n1 1\n2 100''') == '100'\n\nassert solution('''5 2\n1 2\n2 3\n3 1\n4 100\n5 2''') == '5'\n\nassert solution('''1 2\n1 1\n2 100\n3 3\n4 3\n5 2''') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 2\n1 2\n2 3\n\n''') == '5'\n\nassert solution('''\n100 3\n1 2\n2 1\n3 1\n\n''') == '100'\n\nassert solution('''\n1 2\n1 1\n2 100\n\n''') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"100 3\") == \"100\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 2\n1 2\n2 3\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n1 2\n2 1\n3 1\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 2\n1 1\n2 100\n\"\"\") == \"100\"\n\nassert solution(\"\"\"\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"5\"\nassert solution(\"1 2\") == \"4\"\nassert solution(\"100 3\") == \"4\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2\n2 3\n''') == '5'\nassert solution('''\n1 2\n1 1\n2 100\n''') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    5 2\n    1 2\n    2 3\n    ''') == '5'\n\nassert solution('''\n    100 3\n    1 2\n    2 1\n    3 1\n    ''') == '100'\n\nassert solution('''\n    5 2\n    1 2\n    2 1\n    3 1\n    ''') == '101'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aab') == '1'\nassert solution('aaabb') == '2'\nassert solution('usaco') == '1'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"aaabb\") == 6\nassert solution(\"usaco\") == 1\nassert solution(\"lol\") == 2\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nusaco\n''') == '1'\nassert solution('''\nlol\n''') == '2'\nassert solution('''\naab\n''') == '1'\nassert solution('''\na\n''') == '1'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aaabb') == '6'\nassert solution('usaco') == '1'\nassert solution('lol') == '2'"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aaabb\") == 6\nassert solution(\"usaco\") == 1\nassert solution(\"lol\") == 2"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\naaabb\n''') == '6'\nassert solution('''\nusaco\n''') == '1'\nassert solution('''\nlol\n''') == '2'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '1'\nassert solution('aaaabbbcccdddd') == '2'\nassert solution('aaabbbcccddddaaabb') == '3'\nassert solution('aaaabaaabbb') == '1'\nassert solution('abbbbbabab') == '2'\n\n\"\"\""
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''aaa\nbbb''') == '2'\nassert solution('''usaco''') == '1'\nassert solution('''lol''') == '2'\nassert solution('''aab''') == '2'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aaabb') == '6'\nassert solution('usaco') == '1'\nassert solution('lol') == '2'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('usaco') == '2'\nassert solution('lol') == '1'\nassert solution('aaabb') == '6'\n\"\"\"\n\nimport string"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n''') == '1'\nassert solution('''4\n''') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('4\\n') == '2\\n'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\"\n\n'''\n\nimport math"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n''') == '1'\nassert solution('''\n4\n''') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n''') == '1'\nassert solution('''4\n''') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('9') == '2'\nassert solution('27') == '3'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\n\n'''"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4\\n1 4\\n2 3\\n3 4\") == \"1 2\"\n\nassert solution(\"10\\n1 4\\n2 4\\n2 4\\n2 4\\n2 4\\n3 4\\n3 4\\n3 4\\n3 4\") == \"1 1\"\n\nassert solution(\"10\\n1 4\\n2 4\\n2 5\\n3 4\\n3 5\\n3 4\\n3 5\\n3 5\\n3 5\") == \"1 2\"\n\nassert solution(\"10\\n1 4\\n2 5\\n2 5\\n3 4\\n3 4\\n3 5\\n3 5\\n3 5\") == \"1 2\"\n\nassert solution(\"10\\n1 4\\n2 5\\n2 5\\n3 4\\n3 4\\n3 5\\n3 5\\n3 5\") == \"1 2\""
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 4\n2 5\n3 6\n2 5\n3 6\n''') == '1 2'\nassert solution('''\n4\n1 4\n2 5\n3 6\n1 3\n3 2\n''') == '1 2'\nassert solution('''\n4\n1 4\n2 5\n3 6\n1 3\n3 2\n''') == '1 2'\nassert solution('''\n4\n1 4\n2 5\n3 6\n1 3\n1 2\n''') == '1 2'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2\\n2 1\") == \"1 2\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n3 2\") == \"1 2\"\nassert solution(\"6\\n1 2\\n2 3\\n3 4\\n3 2\\n3 5\\n5 6\\n6 4\\n5 4\") == \"1 2\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n1 4\n2 5\n3 6\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n1 4\n2 5\n3 6\n\"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n3\n2 1\n2 1\n\"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n3\n1 2\n2 1\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"\n3\n2 1\n2 1\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"\n3\n1 1\n2 2\n\"\"\") == \"1 1\""
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 4\\n2 5\\n3 6\") == \"1 2\"\nassert solution(\"5\\n1 2\\n4 3\\n6 5\\n2 3\") == \"1 2\"\nassert solution(\"4\\n2 3\\n1 5\\n6 4\") == \"2 1\"\nassert solution(\"2\\n1 2\\n3 4\\n5 6\") == \"1 2\"\nassert solution(\"10\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\") == \"1 2\""
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n    5\n    1 4\n    2 5\n    3 6\n    4 3\n    \"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n    6\n    1 5\n    2 4\n    3 6\n    4 3\n    5 2\n    \"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n    1\n    1 1\n    \"\"\") == \"1\"\n\nassert solution(\"\"\"\n    8\n    1 5\n    2 4\n    3 6\n    4 3\n    5 2\n    6 1\n    \"\"\") == \"1 2\"\n\nprint(\"solution() complete\")"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3, 1, 4, 2, 5, 6]) == \"1 2\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 4\n2 5\n3 6\n''') == '1 2'\nassert solution('''\n1 3\n2 2\n3 3\n''') == '3 1'\nassert solution('''\n3\n1 3\n2 2\n3 3\n''') == '1 2'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == \"1 2\"\nassert solution('2 1') == \"1 2\"\nassert solution('3 2') == \"1 2\"\nassert solution('1 2') == \"1 2\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"3\") == \"2 1 1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '2 1'\nassert solution('''3''') == '2 1 1'\nassert solution('''8''') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1'\nassert solution('4') == '2 1'\nassert solution('8') == '4'"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1'\nassert solution('4') == '2 1'\nassert solution('5') == '2 2 1'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2 1\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '2'\nassert solution('''3''') == '2 1'\nassert solution('''8''') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"3\") == \"2 1 1\"\nassert solution(\"8\") == \"4\"\n\n'''\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == \"1\"\nassert solution('2') == \"2 1\"\nassert solution('3') == \"2 1 1\"\nassert solution('8') == \"4\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '4 '\nassert solution('5') == '4 '\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '2'\nassert solution('8') == '1'\nassert solution('2') == '2'\nassert solution('0rTrT022') == '1'\nassert solution('aA') == 'a A'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2 2\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"aabaac\"\n) == \"aba aca\", \"First example\"\nassert solution(\n    \"0rTrT022\"\n) == \"02 TrrT 20\", \"Second example\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2 0\") == \"2 3 2 0\"\nassert solution(\"4 5 1 7\") == \"1 7 5 1 2 3 4\"\nassert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"12\") == \"1 2 2 1\"\nassert solution(\"12\") == \"1 2 2 1\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('\\n'.join([\n    '2',\n    '1',\n    '1 2',\n    'a',\n    'a a',\n    'a A',\n    'A A',\n    'A a',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',\n    'a a',\n    'a A',"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0rTrT022') == '02TrrT20'\nassert solution('aA') == 'a A'\nassert solution('abcd') == 'abcd'\nassert solution('aaaaa') == 'aaaaa'\nassert solution('aAa') == 'a a'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"2\", \"2\"\nassert solution(\"8\") == \"1\", \"1\"\nassert solution(\"2\") == \"2\", \"2\""
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n****\\n2\\naba\\n\") == \"1\"\nassert solution(\"5\\nl*o*er\\n2\\naaa\\n\") == \"0\"\nassert solution(\"3\\na*a\\n2\\naaa\\n\") == \"1\""
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\""
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\nabcd\\n2\\naaa\\naba') == '1'\n\nassert solution('3\\nlo*er\\n2\\nloser') == '0'"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\na**d\n2\nabcd\nacbd\n''') == '2'\nassert solution('''3\na*a\n2\naaa\naba\n''') == '1'\nassert solution('''3\na*a\n2\naaa\naba\n''') == '0'\nassert solution('''5\nlo*er\n2\nlover\nloser\n''') == '0'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\naba\\n2\\nabcd\\n') == '2'\nassert solution('5\\nlo*er\\n2\\nlover\\n') == '0'\nassert solution('3\\na*a\\n2\\naaa\\n') == '1'"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\na**d\n2\nabcd\nacbd\n''') == '2'\n\nassert solution('''5\nlo*er\n2\nlover\nloser\n''') == '0'\n\nassert solution('''3\na*a\n2\naaa\naba\n''') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\na**d\n2\nabcd\nacbd\n\n''') == '2'\nassert solution('''5\nlo*er\n2\nlover\nloser\n\n''') == '0'\nassert solution('''3\na*a\n2\naaa\naba\n\n''') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\nabc\\n2\\nabcd') == '2'\nassert solution('5\\nlo*er\\n2\\nlover\\nloser') == '1'\nassert solution('3\\na*a\\n2\\naaa\\naba') == '1'\n\n---\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\na**d\n2\nabcd\nacbd\n\n\"\"\") == \"2\"\nassert solution(\"\"\"5\nlo*er\n2\nlover\nloser\n\n\"\"\") == \"0\"\nassert solution(\"\"\"3\na*a\n2\naaa\naba\n\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1 1\\n1 0 0 0 4\") == \"1\"\nassert solution(\"5 1 1\\n3 8 0 1 0 0\") == \"2\"\nassert solution(\"5 1 1\\n3 8 0 1 0 0\") == \"2\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1 1\") == \"1\"\nassert solution(\"6 1 2\") == \"2\""
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('5 1 1') == '2'\nassert solution('6 1 2') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 1 1\n1 0 0 0 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 1 2\n3 8 0 1 0 0\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == \"1\"\nassert solution(\"3 1 2\") == \"2\"\nassert solution(\"5 1 1\") == \"1\"\nassert solution(\"6 1 2\") == \"2\""
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 1 2\n3 8 0 1 0 0''') == '2'\nassert solution('''5 1 1\n1 0 0 0 4''') == '1'\nassert solution('''6 1 2\n3 8 0 1 0 0''') == '3'"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([5, 1, 1]) == \"1\"\nassert solution([6, 1, 2]) == \"2\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"5 1 1\") == \"1\"\nassert solution(\"6 1 2\") == \"2\""
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n0''') == 'Palindromic tree is better than splay tree'\nassert solution('''1\n1''') == 'Palindromic tree is better than splay tree'\nassert solution('''1\n42''') == 'Palindromic tree is better than splay tree'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == \"40\"\nassert solution('1 42') == \"1\"\nassert solution('6 4') == \"172\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1''') == \"40\"\nassert solution('''1 42''') == \"1\"\nassert solution('''6 4''') == \"172\"\nassert solution('''20 1''') == \"1\"\nassert solution('''20 42''') == \"1\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"Palindromic tree is better than splay tree\""
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'\n\nstdin = '1 1'\nassert solution(stdin) == '40'\n\nstdin = '1 42'\nassert solution(stdin) == '1'\n\nstdin = '6 4'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1\n''') == '40'\nassert solution('''1 42\n''') == '1'\nassert solution('''6 4\n''') == '172'"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\"\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '11'\nassert solution('5') == '15'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n3 1 4 1\n''') == '6'\nassert solution('''4\n3 1 4 1 5\n''') == '11'\nassert solution('''5\n3 1 4 1 5 5\n''') == '11'\nassert solution('''5\n3 1 4 1 5 6\n''') == '13'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '6'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"11\"\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 4\") == \"5\"\nassert solution(\"3 1 4 4\") == \"6\"\nassert solution(\"4 3 1 4 1\") == \"11\"\n\n\nfrom collections import deque"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"11\"\n\nprint(solution())\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '6'\nassert solution('5') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n2 1 4\n''') == '5'\n\nassert solution('''4\n3 1 4 1\n''') == '6'\n\nassert solution('''5\n3 1 4 1 5\n''') == '11'"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == output_\n\n\n\"\"\"\n\n\nimport sys\nimport math\nfrom collections import deque\n\nn = int(input())\nd = deque()\n\nfor i in range(1, n + 1):\n    d.append(i)\n\nk = list(map(int, input().split()))\n\nwhile len(d)!= 1:\n    for i in range(n):\n        if k[i]!= d[0]:\n            d.popleft()\n            d.append(k[i])\n            break\n    else:\n        d.popleft()\n        d.append(k[n - 1])\n\nprint(len(d))"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2 1 4\n''') == '5'\nassert solution('''\n4\n3 1 4 1\n''') == '6'\nassert solution('''\n5\n3 1 4 1 5\n''') == '11'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n1 0 0 -1''') == '1'\nassert solution('''2\n1 -1''') == '2'"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1 -1\n''') == '2'\nassert solution('''4\n1 -1\n''') == '3'\nassert solution('''3\n2 -1\n''') == '1'"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1 -1\n''') == '2'\nassert solution('''3\n1 -1\n2 3\n''') == '2'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 -1''') == '2'\nassert solution('''2\n1 -1''') == '1'"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n0 0 0 -1 -1\n\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4\n1 0 0 -1\n\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n0 -1\n\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 0 0 -1') == '1'\nassert solution('2 -1') == '2'"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    1 0 0 -1\n    ''') == \"1\"\nassert solution('''\n    1 -1\n    ''') == \"2\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 0 0 -1') == '1'\nassert solution('1 -1') == '2'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 0 0\\n1 2\\n2 3') == '2'\nassert solution('2 1 0\\n1 2\\n2 2') == '0'\nassert solution('2 5 7\\n3 4\\n14 4') == '1'\nassert solution('2 100 0\\n1 2\\n2 2') == '0'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 0 0\"\n) == \"2\"\n\nassert solution(\n    \"2 1 0\"\n) == \"0\"\n\nassert solution(\n    \"2 5 7\"\n) == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 0 0\n1 2\n2 3\n''') == '2'\n\nassert solution('''\n2 1 0\n1 2\n2 2\n''') == '0'\n\nassert solution('''\n2 5 7\n3 4\n14 4\n''') == '1'\n\nassert solution('''\n2 0 0\n2 1\n1 3\n''') == '2'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"2 5 7\") == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 0 0\n1 2\n2 3\n''') == '2'\nassert solution('''\n2 1 0\n1 2\n2 2\n''') == '0'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"2 5 7\") == \"1\"\n\nINPUT = (2, 0, 0, '1 2', '2 3')\nOUTPUT = (0, '1 2')\nprint(solution(*INPUT))\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('2 1 0') == '0'\nassert solution('2 5 7') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"2 1 0\") == \"1\""
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('2 1 0') == '0'\nassert solution('2 5 7') == '1'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 0 0\\n1 2\\n2 3\") == \"2\"\n\nassert solution(\n    \"2 1 0\\n1 2\\n2 2\") == \"0\"\n\nassert solution(\n    \"2 5 7\\n3 4\") == \"1\"\n\nassert solution(\n    \"2 5 7\\n3 6\") == \"1\"\n\nprint(solution(\n    \"2 5 7\\n3 6\"))"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '2'\nassert solution('3 2') == '3'\nassert solution('4 5') == '8'\nassert solution('5 6') == '19'\nassert solution('6 7') == '26'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '6'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"6 4\") == \"9\"\nassert solution(\"7 5\") == \"61\""
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"5 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == '6'"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"3 5\") == \"4\"\nassert solution(\"4 5\") == \"4\"\nassert solution(\"5 6\") == \"5\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 2\\n\"\n    \"01001\\n\"\n    \"2 4\\n\"\n    \"3 5\\n\"\n) == \"6\"\nassert solution(\n    \"5 2\\n\"\n    \"01001\\n\"\n    \"2 4\\n\"\n    \"3 5\\n\"\n    \"4 5\\n\"\n) == \"6\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n01001\n2 4\n3 5\n''') == '6'\nassert solution('''10 2\n000000100000001\n0000000100000001\n0000000100000011\n0000000100000002\n0000000100000010\n0000000100000100\n0000000100010010\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110\n0000000100000101\n0000000100000111\n0000000100000110"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"10 3\") == \"42\"\n\n\"\"\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"5 4\") == \"3\"\nassert solution(\"5 5\") == \"5\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1 1 1 1 1\n''') == '6'\nassert solution('''\n1 2 1 2 1 2\n''') == '13'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"6\"\nassert solution(\"1 2 1 2 1 2\") == \"13\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    1 1 1 1 1 1\n    ''') == '6'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1 1 1 1 1\n''') == '6'\n\n'''\n\nstdin = input()\n\na = stdin.split()\n\ncount = 0\n\nfor i in range(len(a)):\n    if int(a[i]) % 2!= 0:\n        count += 1\n    elif int(a[i]) == 1:\n        count += 1\n\nprint(count)\n\n'''"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\n\"\"\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_lines) == \"6\"\n\n\nInput:\n2 2 2 2 2 2\n\nOutput:\n8\n\nInput:\n2 1 1 2 1 2\n\nOutput:\n6\n\nInput:\n1 2 1 2 1 2\n\nOutput:\n3\n\n\"\"\"\nfrom itertools import combinations\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"6\"\nassert solution(\"1 2 1 2 1 2\") == \"13\"\n\n\"\"\"\n\nfrom math import sqrt\n\na1, a2, a3, a4, a5, a6 = map(int, input().split())"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == '13'\n\"\"\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 1 1 1\") == '6'\nassert solution(\"1 2 1 2 1 2\") == '13'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n' '2 3 4 6 9') == '4'\nassert solution('9\\n' '1 2 3 5 6 7 8 9 10') == '4'\nassert solution('15\\n' '1 2 3 5 6 7 8 9 10 11 12 13 14 15') == '6'\nassert solution('4\\n' '1 2 3 4') == '4'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2 3 4 6 9\n''') == '4'\nassert solution('''9\n1 2 3 5 6 7 8 9 10\n''') == '4'"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 3 4 6 9\") == \"4\"\nassert solution(\"9\\n1 2 3 5 6 7 8 9 10\") == \"4\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2 3 4 6 9\n''') == '4'\nassert solution('''\n9\n1 2 3 5 6 7 8 9 10\n''') == '4'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '8'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2 3 4 6 9') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == '4'\n\n\"\"\""
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n2 3 4 6 9\n''') == \"4\"\nassert solution('''5\n2 3 4 6 9\n''') == \"4\"\nassert solution('''9\n1 2 3 5 6 7 8 9 10\n''') == \"4\""
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 3 4 6 9\\n') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10\\n') == '4'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '4'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n2 3 4 6 9') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == '4'"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE'\nassert solution('''\n1\n2\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11') == \"SURGERY COMPLETE\"\nassert solution('2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11') == \"SURGERY FAILED\"\nassert solution('2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11') == \"SURGERY COMPLETE\"\nassert solution('2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11') == \"SURGERY FAILED\"\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'SURGERY FAILED'\nassert solution('3') == 'SURGERY COMPLETE'\nassert solution('1') == 'SURGERY COMPLETE'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY COMPLETE'\nassert solution('4\\n3 3 3 2 3 1\\n1 1 1 1 1 1\\n2 2 2 2 2 2\\n3 3 3 2 2 3\\n') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY COMPLETE'\n\nassert solution('2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY COMPLETE\"\nassert solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY FAILED\"\nassert solution(\"2\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY COMPLETE\"\n\n\"\"\"\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'SURGERY FAILED'\nassert solution('3') == 'SURGERY FAILED'\nassert solution('6') == 'SURGERY COMPLETE'\n\nstdin = '\\n'.join([\n    '3',\n    '1 2 3 5 6 E 7',\n    '8 9 10 4 11 12 13',\n    '11',\n    '34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1',\n    'E 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3',\n    '5 4 3 2 1',\n
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\") == \"SURR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\nIRR\\"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY COMPLETE\"\nassert solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY FAILED\"\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"SURRGERY COMPLETE\"\nassert solution(\"2\") == \"SURRGERY FAILED\"\nassert solution(\"3\") == \"SURRGERY FAILED\"\n\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2 1\n''') == '1 2 3'\nassert solution('''3 2 1\n''') == '1 2 3'\nassert solution('''9 2 5\n''') == '6 5 8 3 4 1 9 2 7'\nassert solution('''3 2 1\n''') == '1 2 3'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([9, 2, 5]) == \"6 5 8 3 4 1 9 2 7\"\nassert solution([3, 2, 1]) == \"1 2 3\"\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2 1\n''') == '1 2 3'\nassert solution('''5 2 1\n''') == '5 2 1'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 2 5\n''') == '6 5 8 3 4 1 9 2 7'\nassert solution('''\n3 2 1\n''') == '1 2 3'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"9 2 5\") == \"6 5 8 3 4 1 9 2 7\"\nassert solution(\"3 2 1\") == \"1 2 3\""
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2 1\n''') == '1 2 3'\nassert solution('''\n10 2 5\n''') == '6 5 8 3 4 1 9 2 7'\nassert solution('''\n20 2 5\n''') == '7 5 8 3 6 4 1 2 9'\nassert solution('''\n100 10 5\n''') == '96 5 8 3 6 4 1 2 9 7'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 1') == '1 2 3'\nassert solution('9 2 5') == '6 5 8 3 4 1 9 2 7'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6 2 5\n3 2 1\n''') == '1 2 3 6 5 4'\nassert solution('''4 2 1\n5 1 4\n''') == '5 4 1 2 3'\nassert solution('''1 4 2\n3 2 1\n''') == '1 2 3 4 5'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 1') == '1 2 3'\nassert solution('9 2 5') == '6 5 8 3 4 1 9 2 7'"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 2 1\\n\"\n    \"1 0 1\\n\"\n) == \"3\"\nassert solution(\n    \"5 1\\n\"\n    \"1000000000 1000000000 1000000000 1000000000 1000000000\\n\"\n) == \"5000000000\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 2\\n\"\n    \"3 2 1\\n\"\n) == \"3\"\n\nassert solution(\n    \"5 1\\n\"\n    \"1000000000 1000000000 1000000000 1000000000 1000000000\\n\"\n) == \"5000000000\"\n\nassert solution(\n    \"4 4\\n\"\n    \"2 8 4 1\\n\"\n) == \"4\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == \"5000000000\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"4 4\") == \"4\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '3'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('3 2') == '4'\n\nimport sys\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\nassert solution('1\\n2') == '2'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2\n3 2 1\n''') == '3'\nassert solution('''\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '5000000000'\nprint('Almost done! \u2728 \ud83c\udf89')\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\nassert solution('wwwwwwww') == '2'\nassert solution('wwwwbwwb') == '1'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"bbwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\nassert solution(\"bwwwbww\") == \"2\"\nassert solution(\"bwwbwwb\") == \"1\"\nassert solution(\"bwwbwb\") == \"0\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('bwwwbwwbw') == \"5\"\nassert solution('bwwbwwb') == \"3\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n\nsolution('''bwwbwwbw\nbwwbwwbw''')\n\nsolution('bwwbwwb')\n\"\"\""
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('bwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\nassert solution('wwwwwwwwb') == '1'\nassert solution('bwwwwwwww') == '1'\n\n'''\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\nassert solution('bwwbww') == '1'\nassert solution('bwbwwb') == '0'\nassert solution('bwwb') == '0'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n\nsolution = lambda stdin: len(stdin) - 2 * stdin.count('b')\nassert solution('bwwbwwbw') == 5\nassert solution('bwwbwwb') == 3\n\n\n\nfrom collections import deque"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n''') == \"10\"\nassert solution('''\n4 4\n2 2\n0 1\n....\n..*.\n....\n....\n''') == \"7\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n''') == '10'\nassert solution('''\n4 4\n2 2\n0 1\n....\n..*.\n....\n....\n''') == '7'\n\n'''\nExplanation:\nExample 1:\n\n+++++\n++++*\n+++++\n+++++\n\n+++++\n++++*\n+++++\n+++++\n\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++\n+++++\n++++*\n+++++\n+++++\n+++++"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"10\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '10'\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n\n''') == '10'\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"10\"\nassert solution() == \"7\""
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n\n''') == \"10\""
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10\"\n\nassert solution() == \"7\"\n\nassert solution() == \"0\"\n\n------------------------------------\n\n--- Part Two ---\n\nNow, in the maze that you built, you have reached the end. The labyrinth contains several doors. You can enter them one by one, but you are limited only by the number of moves you make.\n\nYou enter the first door and move down, but there is a wall blocking the way. You can't enter the second door either because it is too high and you can only move down. You enter the third door, but the wall is still blocking the way. And so on.\n\nAt the end of the game you are given a map of the maze with cells labelled as follows:\n\nCell marked by '.' is a free cell.\nCell marked by '*' is an obstacle.\nCell marked by '+' represents the starting cell.\nCell marked by 'x' represents an ending cell.\n\nYou are now to determine whether you can reach the ending cell by moving from the starting cell towards any of the other cells.\n\nYou can move up, left or right. You can't move diagonally. You can only move one step at a time. You can't enter the same cell twice.\n\nSo, the solution to the puzzle is to find the shortest path between the starting cell and the ending cell.\n\n--- Part Two ---\n\nYou were just running through the maze. It was nice having you in the maze but you decided to get out and find the exit to the outer wall.\n\nThe maze now has several more doors that you have to choose from. You must now use your limited moves wisely.\n\nYou enter the door on the right and move right. You enter the door on the left and move left. You enter the door on the upper right and move up.\n\nYou enter the door on the upper left and move up. You enter the door on the right and move right. You enter the door on the lower right and move down.\n\nYou enter the door on the lower left and move down. You enter the door on the right and move right. You enter the door on the upper right and move up.\n\nYou enter the door on the upper left and move left. You enter the door on the lower right and move down. You enter the door on the right and move right. You enter the door on the lower left and move down.\n\nYou enter the door on the left and move left. You enter the door on the lower left and move down. You enter the door on the right and move right. You enter the door on the upper right and move up.\n\nYou enter the door on the upper left and move down. You enter the door on the lower right and move down. You enter the door on the right and move right. You enter the door on the upper right and move up.\n\nYou enter the door on the upper right and move up. You enter the door on the right and move right. You enter the door on the lower right and move down. You enter the door on the left and move left.\n\nYou enter the door on the lower left and move down. You enter the door on the right and move right. You enter the door on the upper right and move up. You enter the door on the upper left and move up.\n\nYou enter the door on the lower right and move down. You enter the door on the right and move right. You enter the door on the upper left and move up. You enter the door on the left and move left.\n\nYou enter the door on the upper right and move up. You enter the door on the right and move right. You enter the door on the lower left and move down. You enter the door on the left and move left.\n\nYou enter the door on the lower left and move down. You enter the door on the right and move right. You enter the door on the lower right and move down. You enter the door on the left and move left.\n\nYou enter the door on the lower right and move down. You enter the door on the right and move right. You enter the door on the upper left and move up. You enter the door on the left and move left.\n\nYou enter the door on the upper right and move up. You enter the door on the right and move right. You enter the door on the lower right and move down. You enter the door on the left and move left.\n\nYou enter the door on the lower right and move down. You enter the door on the right and move right. You enter the door on the upper left and move up. You enter the door on the left and move left.\n\nYou enter the door on the upper right and move up. You enter the door on the right and move right. You enter the door on the lower left and move down. You enter the door on theleft and move left.\n\nYou enter the door on the lower right and move down. You enter the door on theright and move right. You enter the door on theupper right and move up. You enter the door on theupper left and move up.\n\nYou enter the door on the upper right and move up. You enter the door on theright and move right. You enter the door on thelower left and move down. You enter the door on theleft and move left.\n\nYou enter the door on thelower right and move down. You enter the door on theright and move right. You enter the door on thelower left and move down. You enter the door on theleft and move left.\n\nYou enter the door on thelower right and move down. You enter the door on theright and move right. You enter the door on theupper right and move up. You enter the door on theupper left and move up.\n\nYou enter the door on theupper right and move up. You enter the door on theright and move right. You enter the door on thelower right and move down. You enter the door on theleft and move left.\n\nYou enter the door on thelower right and move down. You enter the door on theright and move right. You enter the door on theupper right and move up. You enter the door on theupper left and move up.\n\nYou enter the door on theupper right and move up. You enter the door on theright and move right. You enter the door on thelower left and move down. You enter the door on theleft and move left.\n\nYou enter the door on thelower right and move down. You enter the door on theright and move right. You enter the door on theupper left and move up. You enter the door on theleft and move left.\n\nYou enter the door on theupper right and move up. You enter the door on"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n''') == \"10\"\nassert solution('''\n4 4\n2 2\n0 1\n....\n..*.\n....\n....\n''') == \"7\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4\n3 2\n0 1\n....\n..*.\n....\n''') == '7'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 4 2 2\") == \"2\"\nassert solution(\"6\\n1 2 4 4 4 9\") == \"2\""
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 4 2 2\n\n''') == '2'\nassert solution('''\n5\n1 2 4 4 4 9\n\n''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 4 2 2\n''') == '2'\nassert solution('''6\n1 2 4 4 4 9\n''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '2'\nassert solution('6') == '2'\n\"\"\""
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 4 2 2') == '2'\nassert solution('6\\n1 2 4 4 4 9') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 4 2 2\\n') == '2'\nassert solution('6\\n1 2 4 4 4 9\\n') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 4\\n') == '2'\nassert solution('4\\n1 4 2 2\\n') == '2'\nassert solution('6\\n1 2 4 4 4 9\\n') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 4 4 4 9\\n') == '2'\nassert solution('6\\n1 2 4 4 4 9\\n') == '2'\n\n\n\n\n=======\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 4 2 2\") == \"2\"\nassert solution(\"6\\n1 2 4 4 4 9\") == \"2\""
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 1') == '7'\nassert solution('4 1 1') == '4'\nassert solution('4 10 1') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 1\\naba') == '7'\nassert solution('4 1 1\\nabcd') == '4'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1\") == \"7\"\nassert solution(\"4 1 1\") == \"4\"\nassert solution(\"4 10 1\") == \"12\""
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 1\naba\n\n''') == '7'\n\nassert solution('''\n4 1 1\nabcd\n\n''') == '4'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == 7"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1\") == \"7\"\nassert solution(\"4 1 1\") == \"4\"\nassert solution(\"4 10 1\") == \"12\"\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3 1\naba''') == '7'\nassert solution('''4 1 1\nabcd''') == '4'\nassert solution('''4 10 1\naaaa''') == '12'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 1\\naba') == '7'\nassert solution('4 1 1\\nabcd') == '12'\nassert solution('4 10 1\\naaaa') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 1\\naba') == '7'\nassert solution('4 1 1\\nabcd') == '4'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1\") == \"7\"\nassert solution(\"4 1 1\") == \"4\"\nassert solution(\"4 10 1\") == \"12\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 3') == '1'\nassert solution('3 5') == '1'\n\"\"\"\n\nn, k = list(map(int, input().split()))\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 1\n''') == '1'\nassert solution('''5 3\n''') == '0'\nassert solution('''6 4\n''') == '0'\nassert solution('''100 100\n''') == '1'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"5 1\") == \"1\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 1') == '2'"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '1'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '1'\nassert solution('5 1') == '2'\nassert solution('1 10') == '10'\n\nimport sys"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '1'\n\"\"\"\n\nfrom collections import deque\nfrom collections import Counter\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"5 1\") == \"1\"\n\"\"\"\n\nn, k = map(int, input().split())\n\ni = 1\nresult = 0\n\nwhile i <= n:\n    if i % k == 0:\n        result += 1\n    i += 1\n\nprint(result)"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '1'\nassert solution('100 100') == '101'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 2 2 2\") == \"8\"\nassert solution(\"4 -3\\n3 -6 -3 12\") == \"3\""
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == '8'\nassert solution(\"4 -3\") == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2') == '8'\nassert solution('4 -3') == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\n2 2\\n') == '8'\nassert solution('4 -3\\n3 -6 -3 12\\n') == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"8\"\nassert solution(\"5 2\") == \"17\"\n\n'''"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n2 2 2 2\n''') == '8'\nassert solution('''4 -3\n3 -6 -3 12\n''') == '3'\nassert solution('''4\n1 1 1 1\n''') == '5'"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\""
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 2 2 2\") == '8'\nassert solution(\"4 -3\\n3 -6 -3 12\") == '3'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 5 3 1 8\nBerBank University\nUniversity BerMall\nUniversity BerBank\n''') == '11'\nassert solution('''4 2 1 300 1000\na A\nA aa\naa AA\nAA a\n''') == '5'\nassert solution('''6 4 1 300 1000\na A\nA aa\naa AA\nAA a\naa AA\naa AA\naa AA\n''') == '10'\n\nprint(solution('''6 4 1 300 1000\na A\nA aa\naa AA\nAA a\naa AA\naa AA\naa AA\n'''))"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\""
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'\nprint(solution(input()))\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 5 3 1 8''') == '11'\nassert solution('''4 2 1 300 1000''') == '5'"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 5 3 1 8''') == '11'\nassert solution('''4 2 1 300 1000''') == '5'\n\n\n\"\"\""
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3, 5, 3, 1, 8]) == \"11\"\nassert solution([4, 2, 1, 300, 1000]) == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3, 5, 3, 1, 8]) == '11'\nassert solution([4, 2, 1, 300, 1000]) == '5'"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 5, 3, 1, 8]) == \"11\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 4') == 'YES'\nassert solution('5 1 5 2 1') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"NO\"\nassert solution(\"4 1 1 4\") == \"YES\"\nassert solution(\"5 1 5 2 1\") == \"YES\"\nassert solution(\"6 1 5 2 1 4 3\") == \"YES\"\nassert solution(\"7 1 5 2 1 4 3 2\") == \"YES\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 4\") == \"YES\"\nassert solution(\"5 1 5 2 1\") == \"NO\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2 1 2 1') == 'YES'\n\nassert solution('7 2 1 4 5 1 2') == 'NO'\n\nassert solution('8 2 1 8 1 1 3 2 2') == 'NO'\n\nassert solution('9 2 1 8 1 1 2 8 1 2') == 'YES'\n\nassert solution('10 2 1 8 1 1 2 8 1 3 2') == 'NO'"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1 4') == 'YES'\nassert solution('5\\n1 1 5 2 1') == 'NO'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"YES\"\nassert solution(\"3\\n1 2 4\") == \"YES\"\nassert solution(\"4\\n1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == 'YES'\nassert solution('5') == 'NO'\n\"\"\"\nn = int(input())\nc = list(map(int, input().split()))\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1 1 1 4\n''') == 'YES'\nassert solution('''5\n1 1 5 2 1\n''') == 'NO'"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"NO\"\nassert solution(\"2 1 1 3\") == \"YES\"\nassert solution(\"5 1 5 2 1\") == \"NO\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '-15'\nassert solution('4') == '1'\nassert solution('2') == '1100'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"-15\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"-5\"\nassert solution(\"6\") == \"1100\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n10 5 0 -5 -10\n''') == '-15'\nassert solution('''4\n1 1 1 1\n''') == '1'\nassert solution('''2\n900 1000\n''') == '1100'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n10 5 0 -5 -10') == '-15'\nassert solution('4\\n1 1 1 1') == '1'\nassert solution('2\\n900 1000') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\"5\", \"10\", \"5\", \"0\", \"-5\", \"-10\"]) == \"-15\"\nassert solution([\"4\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"2\", \"900\", \"1000\"]) == \"1100\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"100\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"-15\"\nassert solution(\"4\") == \"1\"\nassert solution(\"2\") == \"1100\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 1 1 1\n''') == '1'\nassert solution('''\n5\n10 5 0 -5 -10\n''') == '-15'\nassert solution('''\n3\n5 1 -5\n''') == '-5'\nassert solution('''\n2\n900 1000\n''') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([5, 10, 5, 0, -5, -10]) == -15\nassert solution([1, 1, 1, 1]) == 1\nassert solution([2, 900, 1000]) == 1100\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n10 5 0 -5 -10\n''') == '-15'\nassert solution('''4\n1 1 1 1\n''') == '1'\nassert solution('''2\n900 1000\n''') == '1100'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2\") == \"YES\"\nassert solution(\"3\\n1 2\\n1 3\") == \"NO\"\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\") == \"YES\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == 'YES', 'Case 1'\nassert solution('3') == 'NO', 'Case 2'\nassert solution('5') == 'YES', 'Case 3'\n\n\n\"\"\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    3\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n    ''') == 'YES'\n\nassert solution('''\n    5\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n    ''') == 'NO'\n\nassert solution('''\n    6\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n    ''') == 'NO'\n\nassert solution('''\n    10\n    1 2\n    1 3\n    1 4\n    1 5\n    1 6\n    1 7\n    1 8\n    1 9\n    2 10\n    ''') == 'YES'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'YES'\nassert solution('''\n3\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'NO'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"YES\"\n\n'''\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'NO'\nassert solution('''5\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'YES'\nassert solution('''6\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'YES'"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"NO\""
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"5 6\") == \"YES\"\nassert solution(\"5 6\") == \"YES\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\"\n\nassert solution() == \"NO\""
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1\\n2'\nassert solution('2 2') == '0\\n'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3\") == \"1\"\nassert solution(\"2 5 3\") == \"0\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 2\n''') == '1'\nassert solution('''4\n4 3 1 2\n''') == '2'\nassert solution('''1\n1\n''') == '1'\nassert solution('''5\n1 1 2 2 3\n''') == '1'\nassert solution('''7\n1 1 1 1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2 3\\n') == '1\\n2\\n'\nassert solution('1\\n3 5\\n') == '0\\n'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('1 2 3 4 5 6 7 8 9') == '1'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '0'\nassert solution('1 2 3 4 5 6 7 8 9 10 11') == '0'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12') == '1'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('2\\n2 6') == '0'\nprint(solution('''\n3\n1 2 3\n\n''')) == '1'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 6') == '0'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\""
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\n') == '0'\nassert solution('2\\n3\\n') == '1'\nassert solution('3\\n2\\n') == '0'\nassert solution('3\\n3\\n') == '1'\nassert solution('3\\n4\\n') == '2'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '6'\n\"\"\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == '6'\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\"\n\nN = int(input())\nS_1 = input()\nS_2 = input()"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n' 'aab\\n' 'ccb\\n') == '6'\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '0'\nassert solution('2') == '6'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 6\nassert solution(\"4\") == 10\nassert solution(\"5\") == 15\nassert solution(\"6\") == 21\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '7'\n\"\"\""
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '6'\n\"\"\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == 6\n\"\"\""
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n100 100 5\n5 2 1 2 1\n''') == \"YES\"\nassert solution('''\n100 8 5\n1 2 3 4 5 6 7\n''') == \"NO\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n100 100 5\n5 2 1 2 1\n''') == 'YES'\nassert solution('''\n100 8 5\n5 2 1 2 1\n''') == 'NO'\nassert solution('''\n100 100 7\n1 2 3 4 5 6 7\n''') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 100 5') == 'YES'\nassert solution('100 8 5') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('100 100 5') == 'YES'\nassert solution('100 8 5') == 'NO'\n\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == 'NO'\nassert solution(\"100 100 5\") == 'YES'\nassert solution(\"100 8 5\") == 'NO'"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100 100 5') == 'YES'\nassert solution('100 8 5') == 'NO'"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1 2 1\\n\") == \"YES\"\nassert solution(\"100 8 5\\n\") == \"NO\"\nassert solution(\"100 100 7\\n\") == \"NO\"\nassert solution(\"3 6 5 7 4 8\\n\") == \"YES\""
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n100 100 5\n5 2 1 2 1\n''') == 'YES'\nassert solution('''\n100 8 5\n5 2 1 2 1\n''') == 'NO'"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\""
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n4 1 5 10\n1 4 10 5\n''') == \"4\"\nassert solution('''7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == \"3\"\nassert solution('''10 2\n4 1 5 10\n1 4 10 5\n''') == \"4\"\nassert solution('''15 2\n4 1 5 10\n1 4 10 5\n6 7 5 4\n3 5 2 6\n2 7 7 6\n7 7 7 6\n5 5 2 7\n5 4 7 7\n4 6 2 3\n6 5 3 5\n3 3 3 4\n6 4 6 4\n5 6 7 7\n6 6 7 7\n4 6 5 7\n6 7 3 3\n''') == \"13\"\nassert solution('''15 2\n2 5 5 5\n4 4 4 3\n4 4 3 4\n5 4 5 4\n3 4 5 5\n5 2 4 4\n2 3 5 5\n4 5 5 4\n3 5 5 5\n2 5 5 5\n3 5 5 5\n5 4 4 4\n5 5 4 4\n4 5 5 5\n4 5 4 5\n3 5 5 5\n5 5 5 5\n4 5 5 5\n5 5 5 5\n4 5 5 5\n3 5 5 5\n5 5 5 5\n5 5 5 5\n''') == \"23\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 2\\n4 1 5 10\") == \"4\"\nassert solution(\"7 6\\n2 1 2 1\\n4 2 4 3\\n2 5 2 5\\n2 3 5 3\\n1 2 1 2\\n3 2 5 3\") == \"3\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n''') == \"4\"\nassert solution('''\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == \"3\"\nassert solution('''\n10 3\n5 8 7 2\n7 8 4 3\n1 5 6 5\n6 8 2 4\n9 1 2 1\n''') == \"20\"\n'''\n\n\nimport sys"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n\n''') == '4'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\nassert solution('''7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == '3'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2\n2 1 5 10\n1 4 10 5\n''') == '4'\nassert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\n'''"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2\n4 1 5 10\n1 4 10 5\n''') == 4\nassert solution('''7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == 3\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == \"4\"\nassert solution(input_string_2) == \"3\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\nassert solution('''\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == '3'\nassert solution('''\n10 20\n5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5 5 5\n1 4 10 4 10\n4 5 5 5 5\n5 2 5 5 5\n3 5 5"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 2') == '4'\nassert solution('7 6') == '3'\n\"\"\"\n\nn, m = [int(i) for i in stdin.split(' ')]\nmatrix = [[0] * n for _ in range(n)]\nrectangles = []\n\nfor i in range(m):\n    x1, y1, x2, y2 = [int(j) for j in stdin.split()]\n    rectangles.append([x1, y1, x2, y2])\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"yes\"\nassert solution(\"5 1\") == \"no\"\nassert solution(\"4 3\") == \"yes\"\nassert solution(\"5 4\") == \"yes\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no\\nyes\\nno\\nyes\\nyes'''\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"yes\\nyes\\nyes\\nyes\\nyes\", \"test\"\nprint(solution())\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n5\\n7\\n1 2 3 4 5 6 7 8 9 10\\n') == 'yes'\nassert solution('1\\n2\\n1 2\\n') == 'no'\nassert solution('5\\n3\\n1 2 3 4\\n') == 'no'\nassert solution('5\\n5\\n1 2 3 4\\n') == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no\\no\\no\\no\\no'\n\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    _n, _k = map(int, input().split())\n    _a = list(map(int, input().split()))\n    \n    if _n!= len(_a):\n        print('no')\n        continue\n    \n    def solution(a):\n        _s = set(a)\n        if len(_s) % 2 == 0:\n            return 'no'\n        \n        _s = sorted(_s)\n        _c = _s[len(_s) // 2]\n        \n        s = set()\n        for _a in a:\n            if _a <= _c:\n                s.add(_a)\n        \n        if len(s) < len(_s) // 2:\n            return 'no'\n        \n        _c = sorted(_s)[len(_s) // 2]\n        _s.remove(_c)\n        _s.remove(0)\n        return 'yes'\n    \n    print(solution(_a))"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no\\nyes\\nyes\\nno\\nyes'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no\\nyes\\nno\\nyes\\nyes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes\\nyes\\nno\\nno\\nno'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 3\\n2 5\\n4 5\\n') == '2'\nassert solution('4 2\\n1 4\\n2 4\\n') == '3'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3\n1 3\n2 5\n4 5\n''') == '2'\n\nassert solution('''4 2\n1 4\n2 4\n''') == '3'\n\nassert solution('''0\n3\n''') == '0'\n\nassert solution('''10\n3\n''') == '3'\n\nassert solution('''2\n5\n''') == '5'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\nassert solution('5 2') == '5 2 0 1'\nassert solution('5 5') == '4 0 2 0 1'\nassert solution('5 3') == '2'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3\\n2 5\\n4 5\") == \"2\"\nassert solution(\"4 2\\n1 4\\n2 4\\n4 5\") == \"3\"\nassert solution(\"4 1\\n1 4\\n2 4\\n4 5\") == \"4\"\nassert solution(\"4 1\\n1 4\\n2 4\\n4 5\") == \"1 0 2 1 0\""
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"10 1\") == \"10\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\""
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 3\\n2 5\\n4 5\") == \"2\"\nassert solution(\"4 2\\n1 4\\n2 4\") == \"3\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 0 1\\n2 1 3\\n2 1 2\\n2 2 3\\n2 1 2\\n2 3') == 'YES'\nassert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n') == 'NO'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3\\n1 0 1') == 'YES'\nassert solution('3 3\\n1 0 1\\n2 1 3\\n2 1 2\\n2 2 3') == 'YES'\nassert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3') == 'NO'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 3') == 'NO'\nassert solution('2 2') == 'YES'\nassert solution('2 2') == 'YES'\nassert solution('3 3') == 'YES'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'YES'\nprint(solution())\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 0 1\\n2 1 3\\n2 1 2\\n2 2 3\\n2 1 2\\n2 1 3') == 'NO'\nassert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3') == 'YES'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('3 3') == 'NO'\nassert solution('3 3') == 'NO'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 0 1\n2 1 3\n2 1 2\n2 2 3\n\nOutput\nNO\nInput\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n\nOutput\nYES\nInput\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n\nOutput\nNO''') == 'NO'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('3 3') == 'YES'\n\nassert solution('4 4') == 'YES'\nassert solution('4 4') == 'NO'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n1 0 1\n2 1 3\n2 1 2\n2 2 3\n''') == 'NO'\n\nassert solution('''\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'YES'\n\nassert solution('''\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'NO'\n\nassert solution('''\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'NO'"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"()((#((#(#()\") == \"2\"\nassert solution(\"#\") == \"-1\"\nassert solution(\"(#)\") == \"-1\"\nassert solution(\"(#\") == \"-1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution('())') == '-1'\nassert solution('#') == '-1'\nassert solution('(((#)((#)') == '2'\nassert solution('())') == '2'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"()((#((#(#(#()\"\n    ) == \"2\"\n\nassert solution(\n    \"((#((#(#)\") == \"2\"\n\nassert solution(\n    \"()((#(#(#))\") == \"1\"\n\nassert solution(\n    \"(#)((#(#()\") == \"1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"())\") == \"0\"\nassert solution(\"(()\") == \"1\"\nassert solution(\"((((((((((#)\") == \"2\"\nassert solution(\"()(()\") == \"1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '2'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"()((#((#(#())\") == \"2\"\nassert solution
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('(((#)((#)') == '1'\n\nassert solution('()((#((#(#()') == '2'\n\nassert solution('#') == '-1'"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''(((#)((#)\n    ''') == '1')\nassert solution('''()((#((#(#()\n    ''') == '2')\nassert solution('''#''') == '-1'\nassert solution('''(((#)\n    ''') == '1'"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution(')') == '-1'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\nassert solution('2 1') == '-1'\nassert solution('2 0') == '-1'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '-1'\nassert solution(input()) == 'xoxox'\nassert solution(input()) == '16'"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"16\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"16\"\nassert solution(\"0 4\") == \"-16\""
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\nassert solution('2 2') == '0'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"16\"\nassert solution(\"0 4\") == \"-16\""
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n''') == '-1', \"First example\"\nassert solution('''\n0 4\n''') == '-16', \"Second example\"\nassert solution('''\n10 4\n''') == '16384', \"Third example\"\nassert solution('''\n10 10\n''') == '-65536', \"Fourth example\""
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"xoxox\"\nassert solution(\"4 0\") == \"16\""
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"16\"\nassert solution(\"0 4\") == \"-16\""
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1 1\n    ''') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('2 2 3') == '29'\nassert solution('1 2 2') == '24'\nassert solution('3 2 2') == '10'\nassert solution('2 3 2') == '6'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 1 1''') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1 1\n        1 1"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1 1\n''') == '17'\n\nassert solution('''\n1 2 1\n''') == '17'\n\nassert solution('''\n1 3 1\n''') == '17'\n\nassert solution('''\n1 4 1\n''') == '17'\n\nassert solution('''\n1 5 1\n''') == '17'"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"3 3 3\") == \"3\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"1 1 2\") == \"1\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('1 1 1') == '18'\nassert solution('1 1 1') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('2 2 2') == '10'\nassert solution('1 1 1') == '17'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '2 2 2'\nassert solution('2 2') == '2 2 2'\nassert solution('3 3') == '3 3 3'"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2, 3]) == '2 2 2'\nassert solution([2, 2]) == '2 2 2'\nassert solution([1, 2]) == '1 2'\nassert solution([3, 4]) == '3 2'"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '2 2 2\\n2 2 2\\n'\nassert solution('2 2') == '2 2 2'\n\n'''\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1 1 1'\nassert solution('1 2') == '2 2 2'\nassert solution('2 3') == '2 3 2'\nassert solution('2 2') == '2 2 2'\n\nprint(solution(input()))"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\n1 2 1\n2 1 2\n''') == '2 2 2'\nassert solution('''2 2\n1 2\n3 4\n''') == '3 2'\n\n'''"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n1 2 1\n2 1 2\n3 4\n''') == '2 3 2'\n\nassert solution('''\n2 2\n1 2\n''') == '2 2 2'\n\nassert solution('''\n2 2\n1 2\n''') == '2 2 2'\n\nassert solution('''\n2 1\n1 2\n''') == '1 2 1'\n\nassert solution('''\n2 2\n1 2\n3 4\n''') == '2 3 2'"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '2 2 2\\n2 2 2\\n'\nassert solution('2 2') == '2 2 2\\n2 2 2\\n'\nassert solution('1 2') == '1 2 1\\n1 2 1\\n'\nassert solution('3 4') == '3 3 3\\n3 3 3\\n'"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '2 2 2'\nassert solution('2 2') == '2 2 2'\nassert solution('2 2') == '2 2 2'"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '2 2 2'\nassert solution('2 2') == '2 2 2'\nassert solution('3 3') == '3 3 3'\nassert solution('1 2') == '2 2 2'\nassert solution('2 1') == '2 2 2'\n\n\n\n-----Test cases-----\nInput\n2 3\n1 2 1\n2 1 2\n\nOutput\n2 2 2 \n2 2 2 \n\n\nInput\n2 2\n1 2\n3 4\n\nOutput\n3 3 \n4 2 \n\n\n>>> \n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2\n1 2\n2 1\n''') == '2 2 2'\nassert solution('''2 2\n1 2\n3 4\n''') == '2 3 2'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1\\n0 1\\n2 1\\n') == '332748119'\nassert solution('1 2\\n1\\n1\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '332748119'\nassert solution('1 2') == '160955686'\nassert solution('3 3') == '974061117'"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == '332748119'\nassert solution(test_input_2) == '185138929'\nassert solution(test_input_3) == '974061117'"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n''') == '3'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '332748119'\nassert solution('1 2') == '332748119'\nassert solution('1') == '160955686'\nassert solution('2 2') == '974061117'\nassert solution('1 1') == '160955686'"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '1 2\\n0 1\\n2 1'\n) == '332748119'\nassert solution(\n    '1 2\\n1\\n2'\n) == '3'\nassert solution(\n    '1 2\\n0 1\\n1\\n2'\n) == '1.3333333333'\nassert solution(\n    '1 2\\n0 1\\n2 1'\n) == '160955686'\nassert solution(\n    '1 2\\n0 1\\n1\\n2'\n) == '974061117'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '332748119'\nassert solution('1 2') == '185138929'\nassert solution('3 3') == '974061117'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"332748119\"\nassert solution(\"3 3\") == \"160955686\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n0 1\\n2 1') == '332748119'\nassert solution('1 2\\n1\\n2 1') == '160955686'\nassert solution('1 2\\n0 1\\n1\\n2 1') == '974061117'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(example1) == \"332748119\"\nassert solution(example2) == \"185138929\"\nassert solution(example3) == \"974061117\"\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n3 1 5 2 6\n''') == '11'\nassert solution('''5\n1 100 101 100 1\n''') == '102'\nprint('Done! \u2728 \ud83c\udf89')"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n3 1 5 2 6') == '11'\nassert solution('5\\n1 2 3 4 5') == '6'"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1 5 2 6\") == \"11\"\nassert solution(\"5\") == \"6\"\nassert solution(\"5\") == \"6\"\n\n\n\nfrom typing import List\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n3 2 1') == '6\\n'\nassert solution('5\\n1 2 3 4 5') == '11\\n'\nassert solution('5\\n1 2 3 4 5') == '6\\n'\nassert solution('5\\n1 2 3 4 5') == '6\\n'\nassert solution('5\\n1 2 3 4 5') == '6\\n'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3 2 1\n\n2\n1\n''') == '6'\n\nassert solution('''\n5\n1 2 3 4 5\n\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n5\n1 2 3 4 5\n\n1\n2\n3\n4\n5\n''') == '11'\n\nassert solution('''\n5\n1 2 3 4 5\n\n1\n2\n3\n4\n5\n''') == '11'\n\nassert solution('''\n5\n1 2 3 4 5\n\n1\n2\n3\n4\n5\n''') == '11'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n3 1 5 2 6') == '11'\nassert solution('5\\n1 100 101 100 1') == '102'\nassert solution('5\\n1 2 3 4 5') == '6'\nassert solution('5\\n1 1 1 1 1') == '2'\nassert solution('5\\n1 2 3 4 5') == '6'"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n') == '11'\nassert solution('5\\n1 2 3 4 5') == '6'\nassert solution('5\\n1 100 101 100 1') == '102'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '11'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '11'\nassert solution('5\\n3 1 5 2 6') == '11'\nassert solution('5\\n1 2 3 4 5') == '6'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3 1 5 2 6\n''') == '11'\nassert solution('''5\n1 100 101 100 1\n''') == '102'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"14 2\\n1 4\\n2 4\\n3 4\\n4 13\\n10 5\\n11 5\\n12 5\\n14 5\\n5 13\\n6 7\\n8 6\\n13 6\\n9 6\"\n    ) == \"Yes\"\nassert solution(\n    \"3 1\\n1 3\\n2 3\"\n    ) == \"No\""
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n14 2\n1 4\n2 4\n3 4\n4 13\n10 5\n11 5\n12 5\n14 5\n5 13\n6 7\n8 6\n13 6\n9 6\n\"\"\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('14 2\\n1 4\\n2 4\\n3 4\\n4 13\\n10 5\\n11 5\\n12 5\\n14 5\\n5 13\\n6 7\\n8 6\\n13 6\\n9 6') == 'Yes'\nassert solution('3 1\\n1 3\\n2 3\\n') == 'No'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n2 2\n1 3\n2 3\n\"\"\") == \"Yes\"\n\nassert solution(\n\"\"\"\n3 1\n1 3\n2 3\n\"\"\") == \"No\"\n\nassert solution(\n\"\"\"\n4 2\n1 4\n2 4\n3 4\n4 13\n10 5\n11 5\n12 5\n13 6\n5 13\n6 7\n8 6\n13 6\n9 6\n\"\"\") == \"Yes\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\n1 4\n2 4\n3 4\n4 13\n10 5\n11 5\n12 5\n14 5\n5 13\n6 7\n8 6\n13 6\n9 6\n''') == 'Yes'\nassert solution('''\n3 1\n1 3\n2 3\n''') == 'No'\nassert solution('''\n1\n2\n''') == 'No'\nassert solution('''\n0\n2\n''') == 'No'\n'''\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"3 1\") == \"No\"\nassert solution(\"3 5\") == \"Yes\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"3 1\") == \"No\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('14 2') == 'Yes'\nassert solution('3 1') == 'No'\nassert solution('1') == 'No'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2\n2 4\n3 4\n''') == \"Yes\"\nassert solution('''\n2 1\n1 3\n2 3\n''') == \"No\"\nassert solution('''\n3 1\n1 3\n2 3\n''') == \"No\"\nassert solution('''\n5 3\n1 4\n2 4\n3 4\n4 13\n10 5\n11 5\n12 5\n14 5\n5 13\n6 7\n8 6\n13 6\n9 6\n''') == \"Yes\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n1 4\n2 4\n''') == 'Yes', 'Test #1'\nassert solution('''\n3 1\n1 3\n2 3\n''') == 'No', 'Test #2'"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"3 5\") == \"0\"\n\nstdin = \"\"\"5 3\n####\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\nassert solution('1 1\\n.\\n#') == '-1'\nassert solution('2 2\\n##\\n#') == '2'\nassert solution('4 4\\n#.\\n#.\\n###\\n') == '0'\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 2') == '-1'\nassert solution('5 5') == '0'\nassert solution('10 10') == '0'"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nprint('Done')"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3\n.#.\n###\n##.\n\"\"\") == \"1\", \"First\"\nassert solution(\"\"\"\n4 2\n##\n.#\n###\n\"\"\") == \"0\", \"Second\"\nassert solution(\"\"\"\n3 5\n....\n.....\n.....\n\"\"\") == \"0\", \"Third\"\nassert solution(\"\"\"\n2 1\n.\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 2') == '-1'\nassert solution('3 5') == '0'\nassert solution('2 1') == '-1'\nassert solution('4 5') == '2'"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3 3\n.#.\n###\n##.\n\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n4 2\n##\n.#\n##\n\n\"\"\") == \"-1\"\n\nassert solution(\n\"\"\"\n3 5\n.....\n.....\n.....\n\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3\n.#.\n###\n##.\n''') == '1'\nassert solution('''4 2\n##\n.#\n##\n''') == '-1'\nassert solution('''3 5\n.....\n.....\n.....\n''') == '0'\nassert solution('''3 5\n....#\n####.\n.###.\n''') == '2'"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 5\n.....\n.....\n.....\n''') == \"0\"\n\nassert solution('''4 5\n.....\n.....\n.....\n\n##.\n###.\n##.\n''') == \"1\"\n\nassert solution('''4 5\n....#\n####.\n.###.\n''') == \"-1\"\n\nassert solution('''5 5\n...#\n##.\n###.\n##.#\n''') == \"2\"\n\nassert solution('''3 5\n....#\n...#.\n##.#\n''') == \"1\""
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3\n0 0 2''') == \"YES\"\nassert solution('''3 5\n0 0 0\n0 0 0''') == \"NO\"\nassert solution('''4 5\n0 0 0 2\n0 0 0''') == \"YES\"\nassert solution('''5 6\n0 0 0 0\n0 0 0''') == \"YES\"\nassert solution('''3 5\n0 0 0\n0 0 0''') == \"NO\"\n\n'''\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == 'YES'\nassert solution('4 3') == 'YES'\nassert solution('5 6') == 'NO'\nassert solution('3 5') == 'YES'\nassert solution('3 2') == 'YES'\n\n'''\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('4 4') == 'YES'\nassert solution('5 5') == 'YES'\nassert solution('4 4') == 'YES'\nassert solution('4 3') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\\\n4 3\n1 0 2 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"\\\n3 10\n10 10 10\n\"\"\") == \"YES\"\nassert solution(\"\"\"\\\n5 6\n6 5 6 2 2\n\"\"\") == \"NO\"\nassert solution(\"\"\"\\\n3 5\n0 0 0\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n1 0 2 3\n\nOutput\nYES\n1 2 2 3\n\nInput\n3 10\n10 10 10\n\nOutput\nYES\n10 10 10 \n\nInput\n5 6\n6 5 6 2 2\n\nOutput\nNO\n\nInput\n3 5\n0 0 0\n\nOutput\nYES\n5 4 2''') == 'YES'"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"5 3\\n\"\n    \"0 0 0\\n\"\n    ) == \"YES\\n\"\n\nassert solution(\n    \"3 5\\n\"\n    \"0 0 0\\n\"\n    ) == \"YES\\n\"\n\nassert solution(\n    \"3 5\\n\"\n    \"1 1 1\\n\"\n    ) == \"NO\\n\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 0 2 3\n''') == \"YES\"\nassert solution('''3 10\n10 10 10\n''') == \"YES\"\nassert solution('''5 6\n6 5 6 2 2\n''') == \"NO\"\nassert solution('''3 5\n0 0 0\n''') == \"YES\"\nassert solution('''3 5\n0 0 0\n''') == \"YES\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 3\n1 0 2 3\n\n''') == 'YES'\nassert solution('''3 5\n0 0 0\n\n''') == 'YES'\nassert solution('''5 6\n1 2 3 4 5\n\n''') == 'NO'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_data) == 'YES' or solution(input_data) == 'NO'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 6\n0 0 0\n''') == 'NO'\n\nassert solution('''\n3 5\n0 0 0\n''') == 'YES'\n\nassert solution('''\n3 5\n0 0 0\n''') == 'NO'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\") == \"4 3 6 2\", \"Wrong result\"\nassert solution(\"1\") == \"1\", \"Wrong result\""
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1 1\""
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().rstrip()"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    4\n    2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\n    \"\"\") == \"4 3 6 2\"\nassert solution(\n    \"\"\"\n    1\n    42\n    \"\"\") == \"42\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '4 3 6 2'\nassert solution('2') == '1 1'"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\n\n''') == '4 3 6 2', \"Wrong answer\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n2\n3\n4\n5''') == '1 2 3 4'\nassert solution('''3\n1\n2\n3\n5''') == '1 2 3'\nassert solution('''5\n5\n4\n3\n2\n1''') == '5 4 3 2 1'\nassert solution('''3\n1\n2\n3''') == '1 2 3'\nassert solution('''4\n1\n2\n3\n4''') == '1 2 3 4'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"3 2 1\"\nassert solution(\"42\") == \"42\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3''') == '3'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\n1 2\\n1 3\\n') == '3'\nassert solution('4 1\\n2 1\\n3 1\\n3 2\\n') == '6'\nassert solution('5 1\\n2 1\\n3 1\\n3 2\\n') == '5'\nprint(solution(''))\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n1\n1\n''') == '3'\nassert solution('''4\n2 1\n2 2\n3 1\n3 2\n''') == '6'\nassert solution('''5\n3 2\n3 1\n3 2\n3 1\n3 2\n3 1\n3 2\n''') == '7'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == '6'\nassert solution(input_) == solution(input_)\n\n\n'''"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1\\n1 2\\n1 3') == '3'\nassert solution('4 1\\n2 1\\n3 1\\n3 2') == '6'\nassert solution('5 1\\n2 1\\n3 1\\n4 1\\n5 1') == '5'\nassert solution('5 5\\n4 4\\n5 5\\n2 2\\n3 3\\n1 1') == '6'\n\n\n\"\"\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '6'\nassert solution('5') == '6'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1\\n1 2\\n1 3\\n') == '3'\nassert solution('4\\n2 1\\n2 2\\n3 1\\n3 2\\n') == '6'\nassert solution('5\\n1 1\\n1 2\\n2 1\\n2 2\\n3 1\\n3 2\\n') == '4'\nassert solution('10\\n0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\\n7 0\\n8 0\\n9 0\\n') == '10'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '6'\nassert solution('5') == '2'\n\n\n\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 1 1\") == \"2\"\nassert solution(\"2 1 1 1\") == \"2\"\nassert solution(\"2 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1 1'\nassert solution('5') == '3 3'\nassert solution('3') == '-1'\nassert solution('1') == '-1'\nassert solution('5') == '4 4'\n\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n.E.\nE..\nE.E\n''') == '-1'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n.E.\\nEEE\\n\") == \"3 3\"\nassert solution(\"3\\nEEE\\nEE.E\\nE...E\") == \"4 4\"\nassert solution(\"5\\nEE.EE\\nE.EE.\\nE...E\\n.EE.E\\nEE.EE\") == \"3 3\"\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3 3\"\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n.E.\nE.E\nE.E\n\n5\nEEE\nE..\nE.E\nEE.E\nEE.EE''') == \"3 3\"\nassert solution('''6\nEE.EE\nE..E\nE.E\nE.E\nEE.EE\n\n7\nEEE\nE..E\nE.E\nE.E\nEEE\nE.E\nE.E\nEEE''') == \"5 5\"\nassert solution('''8\nEE.EE\nE..E\nE.E\nE.E\nEE.E\nEE.E\nE.E\nEEE''') == \"5 5\"\nassert solution('''12\nEE.EE\nE..E\nE.E\nE.E\nEE.E\nEE.E\nE.E\nEEE\nEE.EE\nE..E\nE.E\nEE.EE\nE.E\nEE.EE\nEE.E\nEEE''') == \"5 5\"\nassert solution('''100\nEE.EE\nE..E\nE.E\nE.E\nEE.E\nEE.E\nE.E\nEEE\nEE.EE\nE..E\nE.E\nEE.EE\nE.E\nEE.EE\nEE.E\nEEE\nEE.EE\nEE.EE\nE.E\nEE.EE\nE..E\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\nEE.EE\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1 3'\nassert solution('4') == '2 2'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\".E.E.E\") == \"1 1\"\nassert solution(\"EEE\") == \"3 3\"\n\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\n\ncells = deque()\n\nfor row in range(1,n+1):\n    tmp = input()\n    for i,c in enumerate(tmp):\n        if c == \"E\":\n            cells.append((row,i))\n\npossible_row = set()\npossible_col = set()"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n.E.\\nE..\\nEE.E\\n') == '-1'\nassert solution('3\\nEEE\\nE..\\nE.E\\n') == '2 3'\nassert solution('5\\nEE.EE\\nE...E\\n.EE.E\\nEE.EE\\n') == '3 3'\nassert solution('4\\nEE.E.E\\nE..E.E\\nEE.E.E\\n') == '-1'\n\n\n---\n\nThe below is the actual input you are given\n\n\"\"\"\nimport sys\n\nn = int(input())\n\ngrid = []\n\nfor _ in range(n):\n    grid.append(input().split())"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n.E.\\nE..\\nE.E\") == \"1 1\"\nassert solution(\"5\\nEE.EE\\nE..\\nE.EE\\nEE.EE\\nEE.EE\") == \"4 4\"\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n.E.\nE..\nE.E\n''') == '-1'\n\nassert solution('''\n5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE\n''') == '4 4'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '5 10'\n) == '32'"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 10\n3 4 5 -1 -1 -1\n''') == '32'\nassert solution('''\n1 1\n-1\n''') == '0'"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"32\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '''\n    5 10\n    -1 -1 -1 -1 -1\n    '''\n    ) == '-1'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 10\") == \"32\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n1 2 3\n''') == '6'\nassert solution('''5 2\n-1 -1\n''') == '3'\nassert solution('''7 5\n1 -1 2 2 2 2 -1 10\n''') == '5'\nassert solution('''8 4\n10 -1 -1 -1 -1 -1 -1 -1 -1 10\n''') == '6'\nassert solution('''1 1000\n-1\n''') == '1000'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"10 2\") == \"32\"\nassert solution(\"10 10\") == \"2\"\nassert solution(\"5 10\") == \"1\"\nassert solution(\"3 2 3\") == \"0\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 2\n10 -1 2 2 2 2 2 2 -1 10''') == '32'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '32'\nassert solution('10 2') == '32'\nassert solution('10 10') == '-1'\nassert solution('10 -1') == '-1'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 2\") == \"32\"\nassert solution(\"5 10\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1 2\n1 1 1\n\nOutput\n3\n\n3 1 2\n1 1 1\n\nOutput\n3''') == '3'\nassert solution('''4 2 3\n1 2 4 8\n\nOutput\n79''') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n1 1 1\") == \"3\"\nassert solution(\"4 2 3\\n1 2 4 8\") == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('4 2 3') == '3'\nassert solution('3 2 3') == '6'\nassert solution('10 1 9') == '9'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n1 1 1\\n\") == \"3\"\nassert solution(\"4 2 3\\n1 2 4 8\\n\") == \"79\"\nprint(solution(input()))\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n1 1 1') == '3'\nassert solution('4 2 3\\n1 2 4 8') == '79'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '3'\nassert solution('4 2 3') == '79'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\""
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 1 2\n1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 2 3\n1 2 4 8\n\"\"\") == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_data='''\n3 1 2\n1 1 1\n''') == '3', 'First example'\nassert solution(input_data='''\n4 2 3\n1 2 4 8\n''') == '79', 'Second example'"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '7'\nassert solution('4 4') == '4'\nassert solution('5 5') == '4'"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '7'\nassert solution('4 4') == '7'\nassert solution('5 5') == '7'\nassert solution('3 5') == '7'"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '7 7 7'\nassert solution('1 1 1') == '7 7 7'\nassert solution('1 1 2') == '7 7 7'\nassert solution('1 2 3') == '7 7 7'\nassert solution('1 3 4') == '7 7 7'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"7\"\nassert solution(\"1 3\") == \"7\"\nassert solution(\"2 2\") == \"7\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"3 1\") == \"4\""
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"7\"\nassert solution(\"5 5\") == \"7\"\nassert solution(\"1 1\") == \"7\"\nassert solution(\"2 2\") == \"7\"\nassert solution(\"2 3\") == \"7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '7 7 7'\nassert solution('2 2') == '7 7 7'\nassert solution('3 1') == '7 7 7'\nassert solution('3 3') == '7 7 7'\nassert solution('3 1') == '7 7 7'"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 3\n1 2 3\n2 3 4\n3 4 5\"\"\") == \"7 7 7 4 4 4 4\"\nassert solution(\"\"\"3 3\n1 2 3\n2 3 4\n3 4 5\"\"\") == \"7 7 7 4 4 4 4\"\nassert solution(\"\"\"3 3\n1 2 3\n2 3 4\n3 4 5\"\"\") == \"7 7 7 4 4 4 4\"\nassert solution(\"\"\"3 3\n1 2 3\n2 3 4\n3 4 5\"\"\") == \"7 7 7 4 4 4 4\"\nassert solution(\"\"\"3 3\n1 2 3\n2 3 4\n3 4 5\"\"\") == \"7 7 7 4 4 4 4\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 3\n\"\"\"\n) == \"7 7 7\"\nassert solution(\n\"\"\"\n1 1\n\"\"\"\n) == \"7 7 7\"\nassert solution(\n\"\"\"\n2 2\n\"\"\"\n) == \"7 7 7\"\nassert solution(\n\"\"\"\n2 2\n\"\"\"\n) == \"7 7 7\"\nassert solution(\n\"\"\"\n2 2\n\"\"\"\n) == \"7 7 7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n''') == '7'\nassert solution('''\n4 3\n''') == '7'\nassert solution('''\n2 2\n''') == '4'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"7 7 7\"\nassert solution(\"1 2\") == \"1 1 1\"\nassert solution(\"3 1\") == \"7 7 7\"\nassert solution(\"1 1\") == \"1 1 1\"\nassert solution(\"2 2\") == \"2 2 2\"\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 5 6 2\\n1 3\\n3 2\\n4 5\\n3 7\\n4 3\\n4 6\\n\") == \"6\"\nassert solution(\"9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8\\n\") == \"9\""
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"9 3\") == \"9\"\nassert solution(\"7 2\") == \"7\"\nassert solution(\"9 2\") == \"8\"\nassert solution(\"7 2\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 5 6 2\\n1 3\") == '6'\nassert solution(\"9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8\") == '9'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"6\"\n\nInput\n10 3\n4 2\n2 7\n5 1\n5 7\n4 3\n6 4\n3 2\n2 4\n4 8\n1 4\n4 8\n6 3\n1 8\n4 3\n3 8\n8 2\n4 7\n8 7\n3 1\n6 3\n8 8\n1 4\n3 4\n\nOutput\n18\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 2\\n1 5 6 2\\n1 3\\n3 2\\n4 5\\n3 7\\n4 3\\n4 6\\n') == '6'\nassert solution('9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8\\n') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 2\\n1 5 6 2\\n1 3') == '6'\nassert solution('9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\nassert solution('1 5 6 2') == '3'\nassert solution('3 2') == '4'\n\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 5 6 2\\n1 3\") == \"6\"\nassert solution(\"9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8\\n\") == \"9\""
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n\n''') == '6'\nassert solution('''9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n\n''') == '9'\nassert solution('''20 3\n4 1 2 6 3 5 3 7 7 9 2 10 11 5 13 5 14 6 16 5 19 1 18 5 20 3 7 11 5 10 1 2 6\n3 5\n1 9\n5 5\n9 1\n2 6\n9 8\n9 10\n1 9\n9 3\n9 4\n1 6\n''') == '17'"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0010100\") == \"3 1 3 4\"\nassert solution(\"111\") == \"-1\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"0010100\") == \"3 1 3 4\"\n\nassert solution(\n    \"111\") == \"1 7\""
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('111001') == '3 1 2 5 4 6 7 8 9 10 11'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0010100\") == \"3 1 3 4\"\nassert solution(\"111\") == \"-1\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1101\") == \"3\"\nassert solution(\"10001\") == \"3 2\"\nassert solution(\"01010\") == \"3 2 5 6\"\nassert solution(\"10001\") == \"3 2\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''111''') == '-1'\nassert solution('''0010100''') == '3 1 3 4'\nassert solution('''001101''') == '3 2 5 6'\nassert solution('''11101011''') == '3 2 5 6 7 8 9'\nassert solution('''000010101''') == '1 7'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''011\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 1 0 1 0 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"111\") == \"-1\""
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3') == '1'\nassert solution('2 3') == '1'\nassert solution('1 2') == '1'\nassert solution('2 1 2') == '2'\nassert solution('2 2 3') == '2'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"2 4\") == \"2\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '2 3\\n'\n    '2 1 2\\n'\n    '2 2 3\\n'\n    ) == '1'\n\nassert solution(\n    '1 3\\n'\n    '3 1 2 3\\n'\n    ) == '6'\n\nassert solution(\n    '2 4\\n'\n    '2 1 2\\n'\n    '3 2 3 4\\n'\n    ) == '2'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 4\") == \"1\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n2 1 2\n2 2 3\n''') == '1'\nassert solution('''2 3\n2 1 2\n3 2 3 4\n''') == '2'\nassert solution('''3 7\n2 1 2\n2 3 4\n3 5 6 7\n''') == '24'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1'\nassert solution('2 4') == '2'\nassert solution('3 7') == '24'"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3\\n2 1 2\\n2 2 3\") == \"1\"\n\nassert solution(\"2 3\\n2 1 2\\n3 2 3 4\") == \"2\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 3') == '1'\nassert solution('2 2') == '1'\nassert solution('3 2') == '3'\n\n\nprint(solution(\"2 3\"))\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n2 1 2\n2 2 3\n''') == '1'\n\nassert solution('''\n2 4\n2 1 2\n3 2 3 4\n3 2 1 2\n''') == '2'\n\nassert solution('''\n3 7\n2 1 2\n2 3 4\n3 5 6 7\n''') == '24'\n\nassert solution('''\n3 2\n2 1 2\n2 3 4\n3 5 6 7\n''') == '1'\n\nassert solution('''\n3 5\n2 1 2\n2 3 4\n3 5 6 7\n''') == '2'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2 4 2 3 1\") == '3'\nassert solution(\"2\\n1 5 4 7\") == '6'\nassert solution(\"3\\n1 5 4 7\") == '5'\nassert solution(\"4\\n1 5 4 7\") == '4'\nassert solution(\"5\\n1 5 4 7\") == '6'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 4 2 3 1') == '3'\nassert solution('4\\n1 5 4 7') == '6'\nassert solution('10\\n1 9 9 9 8 2 3 4 5 6 7') == '6'"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n') == '3'\nassert solution('4\\n') == '6'"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '6'\n\"\"\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 4 2 3 1\") == \"3\"\nassert solution(\"4\\n1 5 4 7\") == \"6\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '3'\nassert solution('4') == '6'\nassert solution('5 6 5 1 3 4 1 4') == '4'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n1 2 3 4''') == '6'\nassert solution('''5\n1 2 3 4 5''') == '6'\nassert solution('''4\n1 2 3 4''') == '5'\nassert solution('''5\n1 2 3 4 5''') == '5'\nassert solution('''5\n1 2 3 4 5''') == '4'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n2 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n1 2 4 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 5 4 7 2\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 4 2 3 1\") == \"3\"\nassert solution(\"4 1 2 3\") == \"6\"\nprint(solution(input()))\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 2\n''') == '4'\nassert solution('''\n4\n1 1 1 1 1\n''') == '20'\nassert solution('''\n5\n1 1 1 1 1\n''') == '62'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 1 2 3\n''') == '40'\nassert solution('''\n5\n1 1 1 1 1\n''') == '10000000'\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '22100000'\nassert solution('''\n7\n1 1 1 1 1 1 1\n''') == '44000000'\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '62000000'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 2\n\n''') == '4'\nassert solution('''\n4\n1 1 2 3\n\n''') == '20'\nassert solution('''\n5\n1 1 1 1 1\n\n''') == '62'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 1 2 3\n''') == '20'\nassert solution('''\n5\n1 1 1 1 1\n''') == '62'\nassert solution('''\n2\n5 4\n''') == '1'\nassert solution('''\n3\n1 1 1\n''') == '1'\nassert solution('''\n3\n1 1 2\n''') == '1'"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 1 1 1 1\\n') == '62'\nassert solution('4\\n1 1 2 3\\n') == '4'\nassert solution('5\\n1 1 2 3 4\\n') == '8'\nassert solution('6\\n1 1 1 2 3 4 5\\n') == '30'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2\\n1 2\\n\") == \"4\"\nassert solution(\n    \"4\\n1 1 2 3\\n\") == \"20\"\nassert solution(\n    \"5\\n1 1 1 1 1\\n\") == \"62\"\nassert solution(\n    \"10\\n1 1 1 1 1 1 1 1\\n\") == \"42\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"1\\n1\\n2\\n3\\n\"\n) == \"4\"\nassert solution(\n    \"5\\n1 1 1 1 1\"\n) == \"62\"\nassert solution(\n    \"10\\n1 1 1 1 1 1 1 1 1\"\n) == \"126\"\nassert solution(\n    \"5\\n1 1 1 1 1\"\n) == \"42\"\nassert solution(\n    \"10\\n1 1 1 1 1 1 1 1 1\"\n) == \"210\""
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"2\") == '2'\nassert solution(\"1 2\") == '4'\nassert solution(\"4 1 2 3\") == '14'\nassert solution(\"5 1 1 1 1\") == '62'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '4'\nassert solution('4') == '20'\nassert solution('5') == '62'"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 2 3') == '62'\nassert solution('10\\n1 1 2 3 4 5 6 7 8 9 10') == '100'\nassert solution('2\\n1 1') == '1'\nassert solution('6\\n1 1 1 1 1 1') == '11'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 1\n1 1\n1 1\n''') == '6'\n\nassert solution('''\n4\n1 2\n2 1\n3 5\n5 3\n''') == '15'\n\nassert solution('''\n1\n5 6\n''') == '7'\n\nassert solution('''\n1\n10 10\n''') == '15'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '7'\nassert solution('1') == '5'\nassert solution('5') == '7'\nassert solution('1 2') == '3'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n1 1\\n1 1') == '6'\nassert solution('4\\n1 2\\n2 1\\n3 5\\n5 3\\n') == '15'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\\n1 1\\n1 1\\n\") == \"6\"\nassert solution(\"4\\n1 2\\n2 1\\n3 5\\n5 3\\n\") == \"15\"\nassert solution(\"1\\n5 6\\n\") == \"7\""
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3, 1, 1, 1]) == 6\nassert solution([4, 1, 2, 3, 5, 3]) == 15\nassert solution([1, 5, 6]) == 7"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1\\n1 1\\n1 1\") == \"6\"\nassert solution(\"4\\n1 2\\n2 1\\n3 5\\n5 3\\n\") == \"15\"\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"2\") == \"15\"\nassert solution(\"3\") == \"7\"\nassert solution(\"4\") == \"7\""
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"2\") == '2'\nassert solution(\"3\") == '4'\nassert solution(\"4\") == '7'\nassert solution(\"5\") == '15'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '7'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '7'\nassert solution('3') == '15'"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"1\\n\"\n    \"4\\n\"\n    \"2\\n\"\n) == \"1\"\n\nassert solution(\n    \"2\\n\"\n    \"1\\n\"\n    \"4 4\\n\"\n    \"2\\n\"\n) == \"3\"\n\nassert solution(\n    \"3\\n\"\n    \"3 3\\n\"\n    \"10 10 10\\n\"\n    \"17\\n\"\n) == \"6\"\n\nprint(solution(\n    input()\n))\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '1') == '1'\nassert solution(\n    '2') == '3'\nassert solution(\n    '3') == '6'\nassert solution(\n    '4') == '5'\nassert solution(\n    '5') == '10'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\n\n\"\"\""
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"6\""
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '3'"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1', solution('1')\nassert solution('2') == '2', solution('2')\nassert solution('3') == '4', solution('3')\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\nassert solution('''4\n2\n''') == '3'\nassert solution('''3\n3 3\n10 10 10\n''') == '6'"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '6'\nassert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 3 100\n1 2 1\n''') == '10'\nassert solution('''\n3 5 6 11\n1 2 1\n''') == '0'\nprint(solution(input()))"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3 100\") == \"10\"\nassert solution(\"3 6 5 1000000007\") == \"0\"\nassert solution(\"4 5 6 3\") == \"0\"\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 3 100\") == \"10\"\nassert solution(\"3 6 5 1000000007\") == \"0\"\n\n\"\"\"\nfrom itertools import accumulate\n\nn, m, b, mod = list(map(int, input().split()))\n\nprogrammers = list(map(int, input().split()))\nprogrammers = list(accumulate(programmers))\n\nres = 0\nfor i in range(n):\n    for j in range(i, n):\n        for k in range(j, n):\n            cur = programmers[i] + programmers[j] + programmers[k]\n            if cur >= m:\n                res += 1\n\nprint(res % mod)"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3 100\") == \"10\"\nassert solution(\"3 6 5 1000000007\") == \"0\"\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3 3 100''') == '10'\nassert solution('''3 6 5 1000000007''') == '0'\nassert solution('''3 5 6 11''') == '0'\n\nprint(solution('''3 6 5 1000000007'''))\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 2 3\\nintel') == 'YES'\nassert solution('4\\n1 2 3 1\\na\\nb\\ncdefghi\\njklmnopqrstu\\nvwxyz') == 'NO'\nassert solution('4\\n13 11 15 15\\nto be or not to be that is the question\\nwhether tis nobler in the mind to suffer\\nthe slings and arrows of outrageous fortune\\nor to take arms against a sea of troubles') == 'YES'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n2 2 3\\nintel') == 'YES'\nassert solution('4\\n1 2 3\\nallenge') == 'YES'\nassert solution('4\\n1 2 3\\nch allenge') == 'NO'\nassert solution('4\\n1 2 3\\nch ch') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == 'NO'\nassert solution(\"3\") == 'NO'\nassert solution(\"2 2 3\") == 'NO'\nassert solution(\"3 2 3\") == 'YES'\nassert solution(\"4\") == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n10 8 5 1\nig h o n\"\"\") == \"YES\"\nassert solution(\"\"\"4\n9 6 9 2\ncode true\"\"\") == \"YES\"\nassert solution(\"\"\"1\n6 5\ncell\"\"\") == \"NO\"\nassert solution(\"\"\"2\n7 10 10\ncode true\"\"\") == \"NO\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n    3\n    2 2 3\n    intel\n    code\n    \"\"\") == \"YES\"\nassert solution(\"\"\"\n    4\n    1 2 3 1\n    a\n    bcdefghi\n    jklmnopqrstu\n    vwxyz\n    \"\"\") == \"NO\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"4 1 2 3\") == \"NO\"\nassert solution(\"5 6 7 8 9\") == \"YES\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('4 5 7') == 'NO'\nassert solution('1 2 3') == 'NO'\nassert solution('3') == 'YES'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2 3\na\nbcdefghi\njklmnopqrstu\nvwxyz\n''') == 'YES'\nassert solution('''\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n''') == 'NO'\nassert solution('''\n3\n2 2 3\nintel\ncode\nch allenge\n''') == 'YES'\nassert solution('''\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n''') == 'NO'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n3 1 5''') == '26'\nassert solution('''1\n10''') == '10'"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '26'\nassert solution('1') == '10'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '26'\nassert solution('1') == '10'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '26'\nassert solution('2') == '26'\nassert solution('3') == '26'\n\n\n'''\n\n\n\n'''\nclass NQueen:\n    def __init__(self, n):\n        self.queens = []\n        self.n = n\n    \n    def solve(self):\n        def can_place_queen(x, y):\n            # Check column\n            for i in range(self.n):\n                if self.queens[i] == x or abs(x - self.queens[i]) == abs(y - i):\n                    return False\n            \n            # Check diagonal\n            for i, j in zip(range(self.n), range(1, self.n)):\n                if self.queens[i] == x or abs(x - self.queens[i]) == abs(j - i):\n                    return False\n            \n            return True\n        \n        def place_queen(x, y):\n            self.queens.append(x)\n        \n        # Place initial queens\n        for i in range(self.n):\n            if can_place_queen(i, -1):\n                place_queen(i, -1)\n            if can_place_queen(i, self.n):\n                place_queen(i, self.n)\n            if can_place_queen(i, 0):\n                place_queen(i, 0)\n        \n        count = 0\n        for i in range(self.n):\n            if self.queens[i]!= i:\n                count += 1\n        \n        return count\n\nn = 3\nprint(NQueen(n).solve())\n'''\n\nclass NQueen:\n    def __init__(self, n):\n        self.queens = []\n        self.n = n\n        self.cache = {}\n    \n    def solve(self):\n        def can_place_queen(x, y):\n            # Check column\n            for i in range(self.n):\n                if self.queens[i] == x or abs(x - self.queens[i]) == abs(y - i):\n                    return False\n            \n            # Check diagonal\n            for i, j in zip(range(self.n), range(1, self.n)):\n                if self.queens[i] == x or abs(x - self.queens[i]) == abs(j - i):\n                    return False\n            \n            return True\n        \n        def place_queen(x, y):\n            self.queens.append(x)\n        \n        # Place initial queens\n        for i in range(self.n):\n            if can_place_queen(i, -1):\n                place_queen(i, -1)\n            if can_place_queen(i, self.n):\n                place_queen(i, self.n)\n            if can_place_queen(i, 0):\n                place_queen(i, 0)\n        \n        count = 0\n        for i in range(self.n):\n            if self.queens[i]!= i:\n                count += 1\n        \n        return count\n\nn = 3\nprint(NQueen(n).solve())"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 1 5\") == \"26\"\nassert solution(\"1\\n10\") == \"10\"\n\n\n\"\"\""
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"26\"\nassert solution(\"1\") == \"10\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3 1 5''') == '26'\nassert solution('''1\n10''') == '10'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n3 1 5\n''') == '26'\nassert solution('''1\n10\n''') == '10'\n\nprint(solution('''10\n1 3 2 3 1 1 1 2 2 2\n'''))"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"26\"\nassert solution(\"1\") == \"10\""
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == '26'\nassert solution(\"1\") == '10'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'\n\"\"\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4\n1 3 5\n''') == '3'\nassert solution('''3 40\n10 30 50\n''') == '32'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 4\\n\"\n    \"1 3 5\"\n) == \"3\"\n\nassert solution(\n    \"3 40\\n\"\n    \"10 30 50\"\n) == \"32\"\n\"\"\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4\n1 3 5\n''') == '3'\nassert solution('''3 40\n10 30 50\n''') == '32'\nprint(solution('''2 5\n3 6 7 8 9 10\n'''))\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 4\n1 3 5\n''') == '3'\n\nassert solution('''3 40\n10 30 50\n''') == '32'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '32'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4') == '3'\nassert solution('3 40') == '32'"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 4\n1 3 5\n''') == '3'\nassert solution('''3 40\n10 30 50\n''') == '32'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3') == '3'\nassert solution('3 4') == '4'\nassert solution('1 10') == '10'\nassert solution('40 10') == '50'\nassert solution('10 50') == '40'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\nassert solution(\"\"\"2 40\n10 30 50\n\"\"\") == \"32\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1 4'\nassert solution('5 1') == '1 2 4'\nassert solution('4 1') == '1 3'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(s1) == '1 4 5 6 7 8 9', 'fail on sample 1'\nassert solution(s2) == '1 2 4', 'fail on sample 2'\nassert solution(s3) == '1 2 4', 'fail on sample 3'\n\nimport sys\nimport os\nimport collections as c\n\nsys.setrecursionlimit(10**6)\n\ninput = lambda: sys.stdin.readline().rstrip()"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n''') == '1 4 5 6 7 8 9'\n\nassert solution('''\n5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\n''') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"1 4\"\nassert solution(\"5 1\") == \"1 4\"\nassert solution(\"5 1\") == \"1 4\"\nassert solution(\"5 1\") == \"1 4\"\nassert solution(\"5 1\") == \"1 4\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(t1) == \"1 4 5 6 7 8 9\"\nassert solution(t2) == \"1 2 4\"\n\nt1 = \"9 1\\n1 1\\n5 10\\n1 3\\n11 14\\n5 5\\n10 10\\n3 6\\n6 12\\n7 7\\n4 11\"\nt2 = \"5 1\\n1 1\\n3 3\\n3 3\\n4 4\\n4 4\\n5 5\\nSample Output 2: 1 2 4\"\nt3 = \"5 1\\n1 1\\n3 3\\n3 3\\n4 4\\n4 4\\n5 5\\nSample Output 3: 1 2\"\n\nassert solution(t1) == \"1 4 5 6 7 8 9\"\nassert solution(t2) == \"1 2 4\"\nassert solution(t3) == \"1 2\"\n\nimport unittest\n\nclass TestPractice(unittest.TestCase):\n    def test_exercise(self):\n        self."
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(s) == '1 2 4'"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1 4 5'\nassert solution('5 1') == '1 2 4'\nassert solution('3 3') == '1 2'"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n''') == '1 4 5 6 7 8 9'\n\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\n\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\n\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 1\") == \"1 4\"\nassert solution(\"5 1\") == \"1 2 3 4\"\nassert solution(\"5 1\") == \"1 2 3 4\"\nassert solution(\"5 1\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n2 1\n1 2.0\n1 3.100\n''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0\n''') == '0'\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n''') == '2'\n\n'''"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('6 3') == '2'"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"6 3\") == \"2\""
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 2\n1 1\n1 2.0\n1 3.100\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3\n1 5.0\n2 5.5\n3 6.0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n\"\"\") == \"2\""
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2\n2 1\n1 2.0\n1 3.100\n''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0\n''') == '0'\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n''') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\n2 1\n1 2.0\n1 3.100''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0''') == '0'\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125''') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n2 1\n1 2.0\n1 3.100\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3\n1 5.0\n2 5.5\n3 6.0\n\"\"\") == \"0\""
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\""
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2 1\\n1 2.0\\n1 3.100\\n\") == \"1\\n\"\nassert solution(\"3 3\\n1 5.0\\n2 5.5\\n3 6.0\\n\") == \"0\\n\"\nassert solution(\"6 3\\n1 14.284235\\n2 17.921382\\n1 20.328172\\n3 20.842331\\n1 25.790145\\n1 27.204125\\n\") == \"2\\n\""
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n1 2.0\n2 5.5\n3 6.0\n1 7.2\n4 8.0\n''') == '1'\nassert solution('''\n5 4\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n''') == '2'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n2 3 6 5 4 10\\n\") == \"3\"\nassert solution(\"2 2\\n1 2\\n\") == \"1\"\nassert solution(\"3 3\\n3 2\\n4 1\\n\") == \"4\"\nassert solution(\"6 7\\n1 2 3 4 5 6\\n\") == \"5\"\nassert solution(\"2 2\\n2 1\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n3 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2\n2 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n2\n3 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n2\n3 2\n\"\"\") == \"2\""
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2\\n2 3 6 5 4 10') == '3'\n\n\"\"\"\n\nn, k = list(map(int, input().split()))\nl = list(map(int, input().split()))"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 2\\n2 3 6 5 4 10\\n') == '3'\nassert solution('8 2\\n2 2 3 5 4 6 6 2 3 4 2\\n') == '1'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 2\\n2 3 6 5 4 10') == \"3\"\nassert solution('6 2\\n10 7 9 2 3 8 4 5 6') == \"8\""
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 2\n2 3 6 5 4 10\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n6 2\n2 3 6 5 4 10\n''') == '3'\nassert solution(\n'''\n6 2\n2 3 6 5 4 10\n''') == '3'\n'''"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2\\n3 4 5 6') == '3'\nassert solution('8 10\\n1 2 3 4 5 6 7 8') == '8'\nassert solution('7 10\\n1 2 3 4 5 6 7 8') == '6'\nassert solution('10 10\\n1 2 3 4 5 6 7 8') == '1'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('9') == '10'\nassert solution('12') == '12'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('9') == '10'\nassert solution('1 2 1 3 2 2 2 2 3') == '4'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"9\") == \"10\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n2 1 2') == '4'\nassert solution('9\\n1 2 1 3 2 2 2 2 3') == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('9') == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3\\n') == '4'\nassert solution('9\\n1 2 1 3 2 2 2 2 3\\n') == '10'\nassert solution('4\\n7 8 9 10\\n') == '15'\nassert solution('7\\n11 15 20\\n') == '13'\nassert solution('7\\n8 11 15 20\\n') == '13'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 1 3\n''') == '2'\nassert solution('''\n9\n1 2 1 3 2 2 2 2 3\n''') == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"9\") == \"10\"\n\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 3\n''') == '4'\nassert solution('''9\n1 2 1 3 2 2 2 2 3\n''') == '10'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '4'\nassert solution('9') == '10'"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"0\"\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n\nn = int(input())\ncount = 0\n\nfor i in range(1, n+1):\n    for j in range(i, n+1):\n        for k in range(j, n+1):\n            if i == j and j == k:\n                if i == n:\n                    count += 1\n            else:\n                if i < j < k and i < j+i < k:\n                    if i+1 == j:\n                        count += 1\n                    else:\n                        count += 1\n    count = count % (10**9 + 7)\n\nprint(count)\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"5\") == \"6\"\nassert solution(\"6\") == \"7\"\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"4\"\n\n\"\"\"\n\nn = int(input())\n\nseqs = []\n\nfor i in range(n):\n    seq = list(map(int, input().split()))\n    if seq == sorted(seq):\n        seqs.append(seq)\n\nprint(len(seqs))"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"5\"\n\"\"\""
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\") == \"1\"\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '3'\nassert solution('4') == '2'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '4'\n\"\"\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"4 5\") == \"8\"\nassert solution(\"4 5\") == \"8\""
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n1 5 1 4\n\n''') == '5'\n\nassert solution('''4 6\n1 5 1 4\n\n''') == '5'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 6\\n\"\n    \"1 5 1 4\\n\"\n) == \"5\"\n\nassert solution(\n    \"5 6\\n\"\n    \"1 5 1 4\\n\"\n    \"2 3 4 5\\n\"\n    \"3 5 2 4\\n\"\n) == \"2\"\n\nassert solution(\n    \"3 3\\n\"\n    \"5 5\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 6') == '5'\n\"\"\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 6\") == \"5\"\nassert solution(\"20 20\") == \"20\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 6\") == \"5\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"5 6\") == \"5\"\nassert solution(\"3 5\") == \"4\"\nassert solution(\"6 6\") == \"5\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 6\n1 5 1 4\n''') == '5'\nassert solution('''4 6\n1 5 2 4\n''') == '7'\nassert solution('''5 5\n1 2 2 1 2 1\n''') == '3'\nassert solution('''8 8\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '3'\nassert solution('''5 6\n1 2 1 1 2 1\n''') == '3'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 6\") == \"5\"\nassert solution(\"5 5\") == \"2\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"5\"\n'''\n\n\nclass Solution:\n    def solution(self):\n        m, n = map(int, input().split())\n        arr = list(map(int, input().split()))\n        fav = 1\n        fw = 1\n        count = 0\n        for i in range(1, m + 1):\n            if i == fav:\n                count += 1\n                fav = i + 1\n            else:\n                fav = i\n        for i in range(m - 1):\n            if fw == fav:\n                count += 1\n                fw = i + 1\n            else:\n                fw = i + 1\n        return count\n\n\ns = Solution()\nprint(s.solution())\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 6\") == \"5\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 4\") == \"2\""
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"+++++\") == '1'"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\".+-\") == \"3\"\nassert solution(\"++++-\") == \"4\"\nassert solution(\"+-+-+\") == \"4\"\nassert solution(\"+-++-+\") == \"2\"\nassert solution(\"+-+-+++-\") == \"3\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('+---') == '0'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"++\") == \"1\"\nassert solution(\"--\") == \"1\"\nassert solution(\"+--+\") == \"2\"\nassert solution(\"++--\") == \"3\"\nassert solution(\"--+--\") == \"3\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''+-+-+\n+-+-+\n+-+-+''') == '1'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\n\nInput\n---\n\nOutput\n1\n\nInput\n+-+-+\n\nOutput\n3\n\nInput\n-\n\nOutput\n0\n\nInput\n+-+\n\nOutput\n3\n\nInput\n+-+-+\n\nOutput\n1\n\nInput\n+-+-+\n\nOutput\n1\n\nInput\n-+\n\nOutput\n0\n\nInput\n+-+-+\n\nOutput\n2\n\nInput\n+--+\n\nOutput\n1\n\nInput\n++\n\nOutput\n2\n\nInput\n+--+\n\nOutput\n3\n\nInput\n-+--+\n\nOutput\n4\n\nInput\n+-+-+\n\nOutput\n2\n\nInput\n+-+-+\n\nOutput\n3\n\nInput\n--+\n\nOutput\n1\n\nInput\n+-+\n\nOutput\n2\n\nInput\n+--+\n\nOutput\n2\n\nInput\n+--+\n\nOutput\n1\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"+-+-+\") == \"1\"\nassert solution(\"-++\") == \"2\"\nassert solution(\"+-+-++\") == \"3\"\nassert solution(\"-++-++\") == \"4\"\nassert solution(\"+-+-++-\") == \"5\""
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\nassert solution(\"+-+-+\") == \"3\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"+-+-\") == \"1\"\n\nassert solution(\"+-++-+-\") == \"2\"\n\nassert solution(\"-+-+-\") == \"0\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10110'\n\nassert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10110'\n\nassert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10110'\n\nassert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10110'\n\nassert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10110'"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '10110'\n'''"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\\n\"\n\"AND 9 4\\n\"\n\"IN 1\\n\"\n\"IN 1\\n\"\n\"XOR 6 5\\n\"\n\"AND 3 7\\n\"\n\"IN 0\\n\"\n\"NOT 10\\n\"\n\"IN 1\\n\"\n\"IN 1\\n\"\n\"AND 2 8\\n\") == \"10110\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == \"10110\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom collections import deque"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '10110'\n\n\"\"\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '10110'\nassert solution('2') == '0'\nassert solution('0') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == \"10110\"\nassert solution(test_input_2) == \"10011\"\nassert solution(test_input_3) == \"10101\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '10\\n'\n    'AND 9 4\\n'\n    'IN 1\\n'\n    'IN 1\\n'\n    'XOR 6 5\\n'\n    'AND 3 7\\n'\n    'IN 0\\n'\n    'NOT 10\\n'\n    'IN 1\\n'\n    'IN 1\\n'\n    'AND 2 8\\n') == '10110'"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10\\n'\n        'AND 9 4\\n'\n        'IN 1\\n'\n        'IN 1\\n'\n        'XOR 6 5\\n'\n        'AND 3 7\\n'\n        'IN 0\\n'\n        'NOT 10\\n'\n        'IN 1\\n'\n        'IN 1\\n'\n        'AND 2 8\\n') == '10110'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 1\\n1 2 3 2 1\\n1 2 3') == '2'\nassert solution('6 3 2\\n1 2 3\\n1 2 3') == '2'"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 3 2') == '2'"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1 2\"\nassert solution(\"3 3 3\") == \"2\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 1\\n1 2 3 2 1\\n1 2 3\") == \"2\\n1 3\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 1\\n1 2 3 2 1\\n1 2 3') == '2'\nassert solution('5 3 2\\n1 2 3\\n1 2 3') == '2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 1\") == \"2\"\nassert solution(\"6 3 2\") == \"2\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 1\\n1 2 3 2 1\\n1 2 3') == '2'\nassert solution('6 3 2\\n1 3 2\\n1 2 3') == '2'\nprint(solution('''5 3 1\n1 2 3 2 1\n1 2 3\n'''))"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 1\\n1 2 3 2 1\\n1 2 3\") == \"2\"\nassert solution(\"6 3 2\\n1 3 2 2 3 1\\n1 2 3\") == \"2\""
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 1\") == \"2\"\nassert solution(\"3 3 1\") == \"0\"\nassert solution(\"1 2\") == \"1\""
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 1 2\\n1 3\\n1 2\\n') == '2'\nassert solution('3 3 1\\n2\\n1 2\\n1 3\\n2 3\\n') == '0'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 1 2') == '2'\nassert solution('3 3 1') == '0'\nassert solution('3 2 1') == '1'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1 2\") == \"2\"\nassert solution(\"3 3 1\") == \"0\""
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 1 2') == '2'\nassert solution('3 3 1') == '0'\n\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1\") == \"2\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"2\"\nassert solution(\"3 3 1\") == \"0\"\n\"\"\"\nimport sys\nsys.setrecursionlimit(100000)\n\nfrom collections import defaultdict\n\nclass Solution:\n    def max_add_edges(self, graph):\n        home_counts = defaultdict(int)\n        for v in graph:\n            home_counts[v] += 1\n        \n        def dfs(graph, v):\n            visited.add(v)\n            for u in graph[v]:\n                if u not in visited:\n                    dfs(graph, u)\n\n        visited = set()\n        home_count = max(home_counts.values())\n        for i in range(1, home_count+1):\n            if i not in visited:\n                home_counts[i] -= 1\n                if home_counts[i] == 0:\n                    visited.clear()\n                    dfs(graph, i)\n                    for u in graph:\n                        home_counts[u] += 1\n                else:\n                    visited.clear()\n                    dfs(graph, i)\n        return len(visited)"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 1 2') == '2'\nassert solution('3 3 1') == '0'"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1\") == \"0\"\nassert solution(\"3 3 1\") == \"2\"\nassert solution(\"4 1 2\") == \"2\"\nassert solution(\"3 3 1\") == \"0\""
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1\\n2\\n1 2\\n1 3\") == \"0\"\nassert solution(\"5 5 2\\n2 3\\n3 4\\n4 5\\n3 1\") == \"3\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == '3'\n\"\"\"\nimport math"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"6\\n\"\n    \"10 2 3 5 4 2\"\n    ) == \"3\"\n\nassert solution(\n    \"4\\n\"\n    \"100 100 100 100\"\n    ) == \"1\"\n\nassert solution(\n    \"8\\n\"\n    \"7 6 5 4 3 2 2 3\"\n    ) == \"4\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(solution.__doc__) == \"4\"\nprint(solution('''1\n4\n5\n1\n3\n3\n'''))\n\nprint(solution('''2\n10 2 3 5 4 2\n'''))"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n100 100 100 100\n''') == \"1\"\n\nassert solution('''\n6\n10 2 3 5 4 2\n''') == \"3\"\n\nassert solution('''\n8\n7 6 5 4 3 2 2 3\n''') == \"4\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"4\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '3'\nassert solution('4') == '1'\nassert solution('8') == '4'\n\n\n'''\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6\n10 2 3 5 4 2\n''') == '3'\nassert solution('''\n4\n100 100 100 100\n''') == '1'\nassert solution('''\n8\n7 6 5 4 3 2 2 3\n''') == '4'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n10 2 3 5 4 2''') == '3'\nassert solution('''8\n7 6 5 4 3 2 2 3''') == '4'\nassert solution('''6\n1 1 2 3 4 5''') == '1'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"8\") == \"4\"\n\nstdin = \"\"\"\n5\n5 5 5 5 5\n\n4\n4 4 4 4\n\n3\n\"\"\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 4\n1 2\n1 1\n3 1 3 2\n2 1 1\"\"\") == \"Yes\"\n\nassert solution(\"\"\"3 5\n4 3 2\n3 2 3 2 1\"\"\") == \"No\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"3 5\") == \"No\"\nassert solution(\"1 5\") == \"Yes\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"Yes\"\nassert solution(\"6 5\") == \"No\"\nassert solution(\"4 3\") == \"Yes\"\nassert solution(\"6 5\") == \"No\"\nassert solution(\"6 5\") == \"No\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == 'Yes\\n2 3'\nassert solution('6 5') == 'No'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"Yes\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n3 1 2''') == 'Yes'\nassert solution('''6 5\n4 3 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1\n4 4 4\n2 4 4''') == 'No'\nassert solution('''4 3\n4 2 1 2 3\n3 2 3 3\n2 3 1''') == 'Yes'\nassert solution('''5 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n3 2 3 3\n2 3 1''') == 'No'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == 'Yes','solution'\nassert solution(input()) == '0','solution'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == 'Yes'\nassert solution('6 5') == 'No'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"Yes\"\nassert solution(\"6 5\") == \"No\""
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1 0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"0 2 1 4 3\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2 0 1'\nassert solution('3') == '3 0 1 2'\nassert solution('10') == '10 0 1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n3\n1 2\n2 1\n0 1''') == '0 2 1 4 3'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '20 0 2 1 4 3'\n\"\"\"\nimport unittest\nfrom typing import List"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '0 2 1 4 3'\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"0 2 1 4 3\"\nassert solution(\"3\") == \"0 2 1\"\nassert solution(\"15\") == \"0 2 1 4 3 5 6 7 8 9 10 12 13 14 15 16 17 18\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n') == '0 2 1 4 3\\n'\nassert solution('7\\n') == '0 1 2 3 4 5 6\\n'\nassert solution('15\\n') == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\\n'\nassert solution('20\\n') == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\\n'\nassert solution('30\\n') == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\\n'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0 2 1 4 3\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0 2 1 4 3\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1''') == 'YES'\nassert solution('''3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1''') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 4') == 'NO'"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n1 1') == 'YES'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'YES'\nassert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n0 0\n''') == 'YES'\nassert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n0 0\n''') == 'NO'\nassert solution('''\n1 2\n0 0\n0 -2\n''') == 'YES'\nassert solution('''\n1 2\n0 0\n0 -2\n''') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 4') == 'NO'"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 4\") == \"YES\""
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 4') == 'NO'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\\n1\\n1\\n1\\n\"\n) == \"1\"\nassert solution(\n    \"5\\n1\\n0\\n1\\n0\\n1\\n1\\n0\\n1\\n\"\n) == \"1\"\nassert solution(\n    \"9\\n1\\n1\\n0\\n0\\n0\\n1\\n1\\n0\\n1\\n\"\n) == \"1\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"9\") == \"1\""
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"111\"\nassert solution(\"0\") == \"11\"\nassert solution(\"111\") == \"111\"\nassert solution(\"0111\") == \"0111\"\nassert solution(\"0.1\") == \"11\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n1\n1\n''') == '1'\nassert solution('''5\n1\n1\n0\n0\n1\n''') == '1'\nassert solution('''9\n1\n1\n0\n0\n1\n''') == '1'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0\\n1\\n') == '1'\nassert solution('3\\n1\\n1\\n') == '3'\nassert solution('5\\n1\\n0\\n1\\n1\\n') == '5'\n\nassert solution('9\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n1\\n') == '9'\nassert solution('7\\n1\\n0\\n1\\n1\\n0\\n1\\n0\\n1\\n') == '7'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1\n1\n1\n''') == '1'\nassert solution('''5\n1\n0\n1\n0\n1\n''') == '4'\nassert solution('''9\n1\n1\n0\n0\n0\n1\n1\n0\n1\n''') == '10'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n1\n1\n\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n1\n0\n1\n0\n1\n\n\"\"\") == \"4\"\nassert solution(\"\"\"\n9\n1\n1\n0\n0\n0\n1\n1\n0\n1\n\n\"\"\") == \"8\"\nassert solution(\"\"\"\n13\n1\n0\n1\n1\n0\n1\n1\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n1\n1\n0\n1\n0\n1\n0\n1\n\n\"\"\") == \"11\"\nassert solution(\"\"\"\n23\n1\n0\n1\n0\n1\n0\n1\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n\n\"\"\") == \"21\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n0\n1\n0\n1\n0\n1\n0\n1\n''') == '3'\n\nassert solution('''\n5\n1\n0\n1\n0\n1\n0\n1\n0\n1\n''') == '10'\n\nassert solution('''\n9\n1\n1\n0\n0\n0\n1\n1\n0\n1\n''') == '21'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"00\", \"Morse code of '0' is '00'\"\nassert solution(\"4\") == \"11\", \"Morse code of '1' is '11'\"\nassert solution(\"2\") == \"00\", \"Morse code of '0' is '00'\"\nassert solution(\"3\") == \"111\", \"Morse code of '1' is '11'\"\nassert solution(\"1\") == \"1\", \"Morse code of '0' is '1'\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('111') == '3'\nassert solution('11') == '2'\nassert solution('1') == '1'\nassert solution('11') == '2'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n0 3\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n\"\"\") == 'First\\nSecond\\nFirst'\n\"\"\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 0\") == \"First\"\nassert solution(\"3 1\") == \"Second\"\nassert solution(\"3 2\") == \"First\""
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 0\n2 3\n''') == 'Second'\nassert solution('''\n1 2\n3 2\n''') == 'First'\nassert solution('''\n1 2\n1 2\n''') == 'Draw'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n3 0\n6 2\n1 2''') == 'First'\nassert solution('''3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2''') == 'Second'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n\"\"\") == \"First\"\nassert solution(\"\"\"\n2\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n\"\"\") == \"Second\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 0\") == \"First\"\nassert solution(\"3 0\") == \"Second\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n2\n\"\"\") == 'First'\nassert solution(\"\"\"\n1\n2\n\"\"\") == 'Second'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 0\\n6 2\\n1 2\\n2 3') == 'First'\nassert solution('3 0\\n15 10\\n12 14\\n8 3\\n10 1\\n14 6\\n12 6') == 'Second'\nassert solution('3 0\\n12 6\\n1 9\\n13 1\\n2 5\\n3 9') == 'First'\nassert solution('3 0\\n15 10\\n12 14\\n8 3\\n10 1\\n14 6\\n12 6') == 'Second'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 0') == 'First'\nassert solution('3 1') == 'Second'\nassert solution('10 12') == 'First'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n0 1\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n''') == 'First\\nSecond\\nFirst'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Ann\""
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    'abba'\n) == 'Mike'\nassert solution(\n    'cba'\n) == 'Mike'\nprint('Congratulations!')\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"abba\") == \"Mike\"\nassert solution(\n    \"cba\") == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''abba''') == 'Mike'\nassert solution('''cba''') == 'Mike'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\""
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\""
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == 'Mike'\nassert solution('aaeehhzzzzz') == 'Mike'\nassert solution('aaaaaaaaaaaaaaa') == 'Mike'\nassert solution('aaaaaaaaaaaaaaaaaaa') == 'Mike'\nassert solution('aabbbcccccdd') == 'Mike'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(example_input_1) == '1'\nassert solution(example_input_2) == '3'\n\nassert solution(input_data) == '0'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n8 3 8\n1 2\n2 3\n''') == '0'\nassert solution('''\n3 2\n8 12 8\n1 2\n2 3\n''') == '2'\nassert solution('''\n5 1\n3 5 8\n1 3\n1 4\n1 2\n4 5\n''') == '3'\nassert solution('''\n5 1\n3 5 8\n1 3\n1 4\n1 2\n4 5\n''') == '4'"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(example_input_1) == '0'\nassert solution(example_input_2) == '2'\nassert solution(input) == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('8 3 8') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 2') == '2'\nassert solution('3 2') == '0'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n8 3 8\n1 2\n2 3\n''') == '0'\nassert solution('''\n4 2\n7 4 4\n4 1\n1 3\n''') == '1'\n\nassert solution('''\n5 3\n4 6 8 7 8\n3 1\n5 5\n6 7\n4 4\n''') == '2'\n\nassert solution('''\n6 3\n3 8 5 5 2 4\n1 3\n4 5\n7 5\n3 2\n4 1\n''') == '2'"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 2') == '2'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 2\n8 3 8\n1 2\n2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 3\n1 2 3\n2 3 4\n5 6\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 3\n1 2 3\n2 3 4\n5 6\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3 2\n8 3 8\n1 2\n2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n10 10\n16 30 100 1000 2000 3000 4000 5000\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '0'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n8 3 8\n1 2\n2 3\n''') == \"0\"\nassert solution('''\n3 2\n8 3 8\n1 2\n2 3\n''') == \"2\"\nassert solution('''\n3 4\n1 2 3\n3 1\n4 3\n''') == \"1\"\nassert solution('''\n5 5\n3 9 8 7 2\n1 2\n3 4\n1 5\n5 1\n''') == \"3\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 7') == 'cbcbab'\nassert solution('4 7') == '-1'"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '-1'\nassert solution('ababacd') == 'ababacd'\nassert solution('aaabcdd') == '-1'\nassert solution('acbdb') == 'acbdb'\nassert solution('asadfa') == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 7') == '-1'\nassert solution('2 5') == 'dac'\nassert solution('3 3') == 'abc'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n1\nabac\nabacd\nabacde\nabacdea\nabacdee''') == 'abacd'\n\nassert solution('''2 1\na\nab\nac\n\nOutput\n-1''') == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 4\\n') == 'ababacd'\nassert solution('4 7\\n') == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"ababacd\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 'ababacd'\nassert solution(input()) == '-1'\nassert solution(input()) == 'acd'"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"ababacd\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"ababacd\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"ababacd\"\nassert solution(\"4 7\") == \"-1\"\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '4', \"Wrong\"\nassert solution('3') == '2', \"Wrong\"\nassert solution('8') == '7', \"Wrong\""
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''10\n1 1 2 2 2 1 1 2 2 1''') == '9'\nassert solution('''10\n1 2 1 2 1 2 1 2 1''') == '7'\nassert solution('''10\n1 2 3 2 3 1 1 2 2 1''') == '6'\nassert solution('''10\n1 2 3 2 3 4 1 1 2 2 1''') == '5'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"4\"\nassert solution(\"10\\n1 1 2 2 2 1 1 2 2 1\") == \"9\"\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '4'\nassert solution('10\\n') == '9'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(INPUT_S) == OUTPUT_S\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('10') == '9'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1 2 1 2\n''') == '4'\nassert solution('''10\n1 1 2 2 2 1 1 2 2 1\n''') == '9'"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''10\n1 1 2 2 1 2 1 2 2 1''') == '9'\nassert solution('''10\n1 2 1 2 1 2 1 2 1''') == '8'\nassert solution('''1\n2''') == '1'"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 1\") == \"2\"\nassert solution(\"1 4 5\") == \"2\"\nassert solution(\"1 3 1\") == \"2\"\nassert solution(\"2 2 3\") == \"2\"\nassert solution(\"3 4 5\") == \"++-\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == '++'\nassert solution(input_) == '+-*'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\nassert solution('''\n6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3\n''') == '6'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2', solution\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\", solution()\nprint(solution())"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == '2'\n\nstdin = '''\n5 2 1\n1 1 2\n2 2 1\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\nassert solution(\"2 1\\n1 1 2\\n2 2 1\") == '2'\nassert solution(\"6 6 3\\n2 2 6\\n1 4 5\\n2 3 4\\n1 4 1\\n1 3 1\\n2 2 3\") == '6'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1') == '2'\nassert solution('6 6 3') == '2'\nassert solution('1 4 5') == '2'\nassert solution('2 3 4') == '+'\nassert solution('1 4 1') == '-2'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 1') == '2'\nassert solution('1 4 5') == '+-'\n\n'''\nfrom collections import defaultdict"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n\nsolution(input())\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(1689) == \"1869\"\nassert solution(18906) == \"18690\"\nassert solution(\"18906\") == \"18690\"\nassert solution(\"1689\") == \"1869\"\n\n----CODE----\n\na = int(input())\n\nl = []\nwhile a > 0:\n    l.append(str(a%10))\n    a = int(a//10)\n\nl = \"\".join(l[::-1])"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1689') == '1869', solution('1689')\nassert solution('18906') == '18690', solution('18906')\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(3) == \"3\"\nassert solution(1) == \"1\"\nassert solution(2) == \"21\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(15) == '7135'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(1689) == '1869', 'Correct answer'\nassert solution(18906) == '18690', 'Correct answer'\nassert solution(6) == '0', 'Correct answer'\nassert solution(15) == '0', 'Correct answer'\nassert solution(1) == '1', 'Correct answer'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_1) == \"2\"\nassert solution(input_2) == \"-1\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"4 6\") == \"3\""
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(example1) == 2\nassert solution(example2) == -1\nassert solution(input) ==\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '2'\nassert solution('4 6') == '-1'"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"4 6\") == \"-1\"\nassert solution(\"5 5\") == \"3\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 5\") == \"3\"\nprint(solution(input()))\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\n1 3\n3 4\n\n''') == '2'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 5') == '3'"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3\\n3 4\") == \"2\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3\"\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n4 7\n''') == '3'\nassert solution('''\n3\n4 3 1\n''') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n4 7\n''') == '3'\nassert solution('''\n3\n4 3 1\n''') == '9'\nassert solution('''\n4\n4 3 1\n''') == '7'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n4 3 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2\n5 2 8\n\"\"\") == \"8\""
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\nassert solution('4') == '3'\nassert solution('5') == '1'\nassert solution('10') == '1'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\nassert solution('4') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n4 7\n''') == '3'\n\nassert solution('''3\n4 3 1\n''') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n4 3 1\n''') == '9'\n\nassert solution('''3\n1 2 3\n''') == '10'\n\nassert solution('''2\n6 5 4\n''') == '10'\n\nassert solution('''3\n4 1 2\n''') == '11'\n\nassert solution('''4\n3 1 2 1\n''') == '5'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n4 7\n''') == '3'\n\nassert solution('''3\n4 3 1\n''') == '9'\n\nassert solution('''3\n4 5 3\n''') == '6'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n4 3 1') == '3'\nassert solution('3\\n4 3 1') == '3'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '33'\nassert solution('4\\n2 3 1') == '4'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n4 7\n''') == \"3\"\nassert solution('''\n3\n4 3 1\n''') == \"9\""
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_data) == '9'\n\n\"\"\"\n\n\"\"\"\nDescription: \n    given a string of positive integers, convert to a non-decreasing array of positive integers, without using any built-in sorting algorithms\n\ninput: a string of positive integers\noutput: a non-decreasing array of positive integers\n\nFor example:\n\ninput: '3 3 4 5'\noutput: '3 4 5'\n\ninput: '3 4 5'\noutput: '3 4 5'\n\ninput: '1 2 3 4 5'\noutput: '1 2 3 4 5'\n\nnote: each integer is positive\n\n\"\"\"\n\n\"\"\"\nApproach:\n    I need to iterate through my input string and remember the largest and smallest integers seen so far\n    At each iteration, I will need to check if we can swap the integers to make the array non-decreasing. If we can, continue, otherwise, return the largest and smallest seen so far\n\"\"\""
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 8 5') == '9'\nassert solution('5 3 2 1 5') == '2'\nassert solution('1') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n4 8 5\n''') == '9'\nassert solution('''5\n3 10 2 1 5\n''') == '2'\nassert solution('''4\n0 5 15 10\n''') == '0'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n4 8 5\n''') == '9'\n\nassert solution('''5\n0 5 15 10\n''') == '0'\n\nassert solution('''1\n1\n''') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n4 8 5\n''') == '9'\nassert solution('''5\n3 10 2 1 5\n''') == '2'\nassert solution('''4\n0 5 15 10\n''') == '0'\nassert solution('''1\n1\n''') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n4 8 5\n''') == '9'\nassert solution('''\n4\n0 5 15 10\n''') == '0'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n8 5\n''') == '9'\nassert solution('''3\n4 8 5\n''') == '2'\nassert solution('''1\n1\n''') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\nassert solution(\"4\\n4 8 5\\n\") == \"9\"\nassert solution(\"5\\n3 10 2 1 5\\n\") == \"2\"\nassert solution(\"4\\n0 5 15 10\\n\") == \"0\"\nassert solution(\"1\\n1\\n\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"9\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3 10 2 1 5\n''') == '9'\nassert solution('''4\n0 5 15 10\n''') == '0'\nassert solution('''1\n1\n''') == '-1'\nassert solution('''2\n1\n''') == '0'\nassert solution('''3\n1 5 1\n''') == '-1'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 4 5\n3 5 7 10\n''') == '3'\nassert solution('''\n13 4 5\n7 8 9 10\n''') == '1'\nassert solution('''\n1 2 4 8\n''') == '0'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 4 5\n3 5 7 10\n''') == '3'\nassert solution('''\n13 4 5\n7 8 9 10\n''') == '1'\nassert solution('''\n15 4 5\n6 1 4 7 9 10 15\n''') == '1'\nprint(solution('''\n10 4 5\n7 8 9 10\n'''))\nprint(solution('''\n10 4 5\n1 2 5 6 7 8 9 10\n'''))\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 4 5\\n3 5 7 10\") == \"3\"\nassert solution(\"13 4 5\\n7 8 9 10\") == \"1\""
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 4 5') == '3'\nassert solution('13 4 5') == '1'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 4 5') == '3'\nassert solution('13 4 5') == '1'\nassert solution('20 10 4 5') == '6'"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == \"1\"\nassert solution(input_2) == \"1\""
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"1\""
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 4 5\") == \"3\"\nassert solution(\"13 4 5\") == \"1\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''10 4 5\n3 5 7 10\n''') == '3'\nassert solution('''13 4 5\n7 8 9 10\n''') == '1'\nassert solution('''10 1\n10\n''') == '1'\nassert solution('''10 1\n10\n''') == '0'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n101\\n3 3\\n3 2') == '2'\nassert solution('4\\n1111\\n3 4\\n5 2\\n3 1\\n3 2') == '4'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '6'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"6\") == \"6\"\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('5') == '4'\nassert solution('6') == '6'\nassert solution('7') == '6'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n011100''') == '4'\nassert solution('''3\n3 3\n3 2''') == '2'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n01110000\n3 3\n3 2\n3 1\n''') == '2'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n101\n3 3\n3 2\n3 1\n''') == '2'\nassert solution('''\n4\n1111\n3 4\n5 2\n3 1\n3 2\n''') == '4'\nassert solution('''\n6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\n''') == '6'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('1') == '1'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '2'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('11') == '11'\nassert solution('10101') == '01'\nassert solution('1010111') == '01'\nassert solution('101011110') == '01'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4') == '1111'\nassert solution('5 3') == '01010'\nassert solution('7 3') == '1011011'"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4''') == '1111'\nassert solution('''5 3''') == '01010'\nassert solution('''7 3''') == '1011011'\nprint('\"Run\" is good. It is checking your code, remember it!')"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"1111\"\nassert solution(input) == \"01010\"\nassert solution(input) == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"01010\"\nassert solution(\"4 4\") == \"1111\"\nassert solution(\"7 3\") == \"01010\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([\"4 4\", \"\"]) == \"1111\"\nassert solution([\"5 3\", \"\"]) == \"01010\"\nassert solution([\"7 3\", \"\"]) == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n\n''') == \"1111\"\nassert solution('''5 3\n\n''') == \"01010\"\nassert solution('''7 3\n\n''') == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 4\n1 2 3 4''') == '01010'\nassert solution('''5 3\n1 2 3 4 5''') == '1111'\nassert solution('''7 3\n1 2 3 4 5 6 7''') == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '1111'\nassert solution(input()) == '01010'\nassert solution(input()) == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 3') == '1011011'\nassert solution('4 4') == '1111'\nassert solution('5 3') == '01010'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1/1\"\nassert solution(\"2\") == \"1/2\"\nassert solution(\"3\") == \"0/1\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1/2'\nassert solution('1') == '0/1'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0/1'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n') == '1/2'\nassert solution('3\\n1 1 1\\n') == '0/1'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([1,2]) == \"0/1\"\nassert solution([1,1,1]) == \"1/2\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 1\n\n''') == '0/1'\n\nassert solution('''\n3\n1 1 1\n\n''') == '1/2'\n\nprint('answer: ', solution(stdin))"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"0/1\"\nassert solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"0/1\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([1, 2]) == \"1/2\"\nassert solution([3, 1, 1]) == \"0/1\""
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1/1'\nassert solution('2') == '0/2'\nassert solution('3') == '0/1'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1/2'\nassert solution('3') == '0/1'"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == \"1 0 1 0 0\"\nassert solution('''5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == \"4 3 2 1 0\""
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6\\n') == '1 0 1 0 0'\nassert solution('5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\\n') == '4 3 2 1 0'\nprint('Test passed')"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6\\n') == '1 0 1 0 0'\nassert solution('5\\n2 2 1 4 6\\n1 1\\n1 1\\n3 5\\n3 6\\n') == '4 3 2 1 0'\n\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6\") == \"1 0 1 0 0\"\nassert solution(\"5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\") == \"4 3 2 1 0\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1 0 1 0 0\""
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"1 0 1 0 0\"\nassert solution(\"7\") == \"1 0 1 0 0\"\nassert solution(\"8\") == \"1 0 1 0 0\"\nassert solution(\"6\") == \"1 0 1 0 0\"\nassert solution(\"1\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\nassert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '4 3 2 1 0'\n'''\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6''') == '1 0 1 0 0'\nassert solution('''5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1\n''') == '4 3 2 1 0'"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1 0 1 0 0\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6') == '1 0 1 0 0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"3\") == \"11\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n4 5 1 7 4\n''') == '1'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2\\n1\\n1\") == \"1\\n0\\n1\\n1\"\nassert solution(\"5\\n4 5 1 7 4\\n\") == \"1\\n8\\n01010\\n00011\\n01010\\n10010\\n00011\\n11000\\n00011\\n11000\"\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == '1'\nassert solution(\"5\") == '1'\nassert solution(\"3\") == '11'\nassert solution(\"7\") == '11'\nassert solution(\"4\") == '8'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n0\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n11\n''') == '1\\n0\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n11\n''') == '1\\n0\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n11\n''') == '1\\n0\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n11\n''') == '1\\n0\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n11\n''') == '1\\n0\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n11\n''') == '1\\n0\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n11\n''') == '1\\n0\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n11\n''') == '1\\n0\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n11\n''') == '1\\n0\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n11\n''') == '1\\n0\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n11\n''') == '1\\n0\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n11\n''') == '1\\n0\\n11\\n', solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '0\\n2\\n11\\n11\\n', solution('''2\n1 1\n\nOutput\n0\n1"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('2') == '2'\nassert solution('3') == '11'"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '0'\nassert solution('5') == '8'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n4 5 1 7 4\n''') == '1'\n\nassert solution('''\n5\n4 5 1 7 4\n''') == '0'\n\nassert solution('''\n3\n1 2\n''') == '11'\n\nassert solution('''\n2\n1 2\n''') == '0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('2') == '2'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '0'\nassert solution('1 1 1') == '1'\nassert solution('3 3') == '1'\nassert solution('6 6') == '2'\nassert solution('10 10') == '0'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 1 2\") == \"1\\n2 1\\n2 1\"\nassert solution(\"6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\\n\") == \"1\\n2 1\\n2 1\"\nprint(\"OK\")"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('5') == '0'\n\"\"\""
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5') == '1'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n''') == \"1\"\n\nassert solution('''\n4\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n''') == \"2\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '6\\n'\n    '0 1 2 3\\n'\n    '0 4 6 1\\n'\n    '1 6 7 2\\n'\n    '2 7 5 3\\n'\n    '6 4 5 7\\n'\n    '4 0 3 5\\n'\n) == '1'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\\n') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"6\\n\"\n    \"0 1 2 3\\n\"\n    \"0 4 6 1\\n\"\n    \"1 6 7 2\\n\"\n    \"2 7 5 3\\n\"\n    \"6 4 5 7\\n\"\n    \"4 0 3 5\"\n) == \"1\"\n\nassert solution(\n    \"6\\n\"\n    \"1 2 3\\n\"\n    \"2 1 3\\n\"\n    \"3 2 1\\n\"\n    \"1 3 2\\n\"\n    \"3 1 2\\n\"\n    \"2 1 3\"\n) == \"4\"\n"
    }
]